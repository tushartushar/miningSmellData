Implementation smell,Namespace,Class,File,Method,Description
Long Statement,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The length of the statement  "				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value)); " is 168.
Long Statement,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The length of the statement  "				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100); " is 130.
Long Statement,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The length of the statement  "				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100); " is 130.
Long Statement,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The length of the statement  "                RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value)); " is 168.
Long Statement,MatterHackers.Agg,ComponentRenderingFactory,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,GetAppParameters,The length of the statement  "				"AGG has a gray-scale renderer that can use any 8-bit color channel of an RGB or RGBA frame buffer. Most likely it will be used to draw gray-scale images directly in the alpha-channel."' " is 186.
Virtual Method Call from Constructor,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,ComponentRendering,The constructor "ComponentRendering" calls a virtual method "AddChild".
Virtual Method Call from Constructor,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,ComponentRendering,The constructor "ComponentRendering" calls a virtual method "AddChild".
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,ComponentRendering,The following statement contains a magic number: alphaSlider = new Slider(new Vector2(5' 30)' 310' 0' 255);
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,ComponentRendering,The following statement contains a magic number: alphaSlider = new Slider(new Vector2(5' 30)' 310' 0' 255);
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,ComponentRendering,The following statement contains a magic number: alphaSlider = new Slider(new Vector2(5' 30)' 310' 0' 255);
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,ComponentRendering,The following statement contains a magic number: alphaSlider = new Slider(new Vector2(5' 30)' 310' 0' 255);
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,ComponentRendering,The following statement contains a magic number: alphaSlider.Value = 255;
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,ComponentRendering,The following statement contains a magic number: alphaSlider.View.TextColor = new RGBA_Bytes(127' 127' 127);
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,ComponentRendering,The following statement contains a magic number: alphaSlider.View.TextColor = new RGBA_Bytes(127' 127' 127);
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,ComponentRendering,The following statement contains a magic number: alphaSlider.View.TextColor = new RGBA_Bytes(127' 127' 127);
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,ComponentRendering,The following statement contains a magic number: useBlackBackgroundCheckbox = new UI.CheckBox(5' 30 + 12' "Draw Black Background");
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,ComponentRendering,The following statement contains a magic number: useBlackBackgroundCheckbox = new UI.CheckBox(5' 30 + 12' "Draw Black Background");
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,ComponentRendering,The following statement contains a magic number: useBlackBackgroundCheckbox = new UI.CheckBox(5' 30 + 12' "Draw Black Background");
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,ComponentRendering,The following statement contains a magic number: useBlackBackgroundCheckbox.TextColor = new RGBA_Bytes(127' 127' 127);
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,ComponentRendering,The following statement contains a magic number: useBlackBackgroundCheckbox.TextColor = new RGBA_Bytes(127' 127' 127);
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,ComponentRendering,The following statement contains a magic number: useBlackBackgroundCheckbox.TextColor = new RGBA_Bytes(127' 127' 127);
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRendering,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,OnDraw,The following statement contains a magic number: if (graphics2D.DestImage != null)  			{  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());    				IImageByte backBuffer = widgetsSubImage;    				int distBetween = backBuffer.GetBytesBetweenPixelsInclusive();  				ImageBuffer redImageBuffer = new ImageBuffer();  				redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);  				ImageBuffer greenImageBuffer = new ImageBuffer();  				greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);  				ImageBuffer blueImageBuffer = new ImageBuffer();  				blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);    				ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);  				ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);  				ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);  				ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);    				ScanlineRasterizer ras = new ScanlineRasterizer();  				ScanlineCachePacked8 sl = new ScanlineCachePacked8();    				RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);  				clippingProxy.clear(clearColor);  				alphaSlider.View.BackgroundColor = clearColor;    				RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));    				VertexSource.Ellipse er = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(er);  				ScanlineRenderer scanlineRenderer = new ScanlineRenderer();  				scanlineRenderer.RenderSolid(clippingProxyRed' ras' sl' FillColor);    				VertexSource.Ellipse eg = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);  				ras.add_path(eg);  				scanlineRenderer.RenderSolid(clippingProxyGreen' ras' sl' FillColor);    				VertexSource.Ellipse eb = new MatterHackers.Agg.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);  				ras.add_path(eb);  				scanlineRenderer.RenderSolid(clippingProxyBlue' ras' sl' FillColor);  			}  			else if (graphics2D.DestImageFloat != null)  			{  #if false                  IImageFloat backBuffer = graphics2D.DestImageFloat;                    int distBetween = backBuffer.GetFloatsBetweenPixelsInclusive();                  ImageBufferFloat redImageBuffer = new ImageBufferFloat();                  redImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 2' 8);                  ImageBufferFloat greenImageBuffer = new ImageBufferFloat();                  greenImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 1' 8);                  ImageBufferFloat blueImageBuffer = new ImageBufferFloat();                  blueImageBuffer.Attach(backBuffer' new blender_gray(distBetween)' distBetween' 0' 8);                    ImageClippingProxy clippingProxy = new ImageClippingProxy(backBuffer);                  ImageClippingProxy clippingProxyRed = new ImageClippingProxy(redImageBuffer);                  ImageClippingProxy clippingProxyGreen = new ImageClippingProxy(greenImageBuffer);                  ImageClippingProxy clippingProxyBlue = new ImageClippingProxy(blueImageBuffer);                    ScanlineRasterizer ras = new ScanlineRasterizer();                  ScanlineCachePacked8 sl = new ScanlineCachePacked8();                    RGBA_Bytes clearColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(0' 0' 0) : new RGBA_Bytes(255' 255' 255);                  clippingProxy.clear(clearColor);                  alphaSlider.View.BackGroundColor = clearColor;                    RGBA_Bytes FillColor = useBlackBackgroundCheckbox.Checked ? new RGBA_Bytes(255' 255' 255' (int)(alphaSlider.Value)) : new RGBA_Bytes(0' 0' 0' (int)(alphaSlider.Value));                    VertexSource.Ellipse er = new AGG.VertexSource.Ellipse(Width / 2 - 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(er);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyRed' ras' sl' FillColor);                    VertexSource.Ellipse eg = new AGG.VertexSource.Ellipse(Width / 2 + 0.87 * 50' Height / 2 - 0.5 * 50' 100' 100' 100);                  ras.add_path(eg);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyGreen' ras' sl' FillColor);                    VertexSource.Ellipse eb = new AGG.VertexSource.Ellipse(Width / 2' Height / 2 + 50' 100' 100' 100);                  ras.add_path(eb);                  agg_renderer_scanline.Default.render_scanlines_aa_solid(clippingProxyBlue' ras' sl' FillColor);  #endif  			}
Magic Number,MatterHackers.Agg,ComponentRenderingFactory,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,GetAppParameters,The following statement contains a magic number: AppWidgetInfo appWidgetInfo = new AppWidgetInfo(  				"Vector"'  				"Component Rendering"'  				"AGG has a gray-scale renderer that can use any 8-bit color channel of an RGB or RGBA frame buffer. Most likely it will be used to draw gray-scale images directly in the alpha-channel."'  				320'  				320);
Magic Number,MatterHackers.Agg,ComponentRenderingFactory,C:\repos\MatterHackers_agg-sharp\examples\component_rendering\component_rendering.cs,GetAppParameters,The following statement contains a magic number: AppWidgetInfo appWidgetInfo = new AppWidgetInfo(  				"Vector"'  				"Component Rendering"'  				"AGG has a gray-scale renderer that can use any 8-bit color channel of an RGB or RGBA frame buffer. Most likely it will be used to draw gray-scale images directly in the alpha-channel."'  				320'  				320);
