Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,OnIdle,Cyclomatic complexity of the method is 9
Complex Method,Gaming.Game,GameObject,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GameObject.cs,WriteGameObjectData,Cyclomatic complexity of the method is 8
Long Parameter List,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,DataViewGraph,The method has 5 parameters. Parameters: RenderPosition' Width' Height' StartMin' StartMax
Long Identifier,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,Draw,The length of the parameter StrockedTransformedLinesToDraw is 30.
Long Identifier,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,OnIdle,The length of the parameter NumSecondsPassedSinceLastUpdate is 31.
Long Identifier,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,,The length of the parameter m_PotentialDrawsBudgetPosition is 30.
Long Identifier,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,,The length of the parameter m_ShowPotentialDrawsBudgetGraph is 31.
Long Identifier,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,,The length of the parameter m_PotentialUpdatesBudgetPosition is 32.
Long Identifier,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,,The length of the parameter m_ShowPotentialUpdatesBudgetGraph is 33.
Long Identifier,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,,The length of the parameter m_SecondsLeftOverFromLastUpdate is 31.
Long Identifier,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,,The length of the parameter m_PotentialDrawsPerSecondString is 31.
Long Identifier,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,,The length of the parameter m_PotentialUpdatesPerSecondString is 33.
Long Identifier,Gaming.Graphics,GameImageSequence,C:\repos\MatterHackers_agg-sharp\Gaming\Graphics\GameImageSequence.cs,,The length of the parameter m_CenterOriginDurringPreprocessing is 34.
Long Identifier,Gaming.Graphics,GameImageSequence,C:\repos\MatterHackers_agg-sharp\Gaming\Graphics\GameImageSequence.cs,,The length of the parameter m_CropToVisibleDurringPreprocessing is 35.
Long Statement,Gaming.Audio,Sound,C:\repos\MatterHackers_agg-sharp\Gaming\Audio\Sound.cs,Load,The length of the statement  "				throw new System.Exception("You must have at leas and at most 1 loadable adio file in the dirrectory '" + PathName + "'."); " is 123.
Long Statement,Gaming.Game,DataAssetCache,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataAssetCache.cs,GetAsset,The length of the statement  "							throw new System.Exception("You must have a default constructor defined for '" + GameObjectType.Name + "' for default game object creation to work."); " is 150.
Long Statement,Gaming.Game,DataAssetCache,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataAssetCache.cs,AddAssetToCache,The length of the statement  "				throw new System.Exception("The '" + GameObjectType.Name + "' asset named '" + AssetName + "' is already in the cache."); " is 121.
Long Statement,Gaming.Game,DataAssetTree,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataAssetTree.cs,AddItemToTree,The length of the statement  "				throw new Exception("The GameDateObjectList '" + dataAssetItem.GameObjectClass + "' already contains an instance named '" + dataAssetItem.InstanceName + "'.\n" " is 159.
Long Statement,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,Draw,The length of the statement  "			RoundedRect BackGround = new RoundedRect(m_Position.x' m_Position.y - 1' m_Position.x + m_Width' m_Position.y - 1 + m_Height + 2' 5); " is 133.
Long Statement,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,Draw,The length of the statement  "			RoundedRect BackGround2 = new RoundedRect(m_Position.x' m_Position.y - 1' m_Position.x + m_Width' m_Position.y - 1 + m_Height + 2' 5); " is 134.
Long Statement,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,CreateGraphs,The length of the statement  "			m_ShowPotentialDrawsBudgetGraph = new MatterHackers.Agg.UI.CheckBox(m_PotentialDrawsBudgetPosition.x' m_PotentialDrawsBudgetPosition.y' "D:000.000"); " is 149.
Long Statement,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,CreateGraphs,The length of the statement  "			m_ShowPotentialUpdatesBudgetGraph = new MatterHackers.Agg.UI.CheckBox(m_PotentialUpdatesBudgetPosition.x' m_PotentialUpdatesBudgetPosition.y' "U:000.000"); " is 155.
Long Statement,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,CreateGraphs,The length of the statement  "			m_ShowActualDrawsBudgetGraph = new MatterHackers.Agg.UI.CheckBox(m_ActualDrawsBudgetPosition.x' m_ActualDrawsBudgetPosition.y' "A:000.000"); " is 140.
Long Statement,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,OnIdle,The length of the statement  "				string Lable = string.Format("U:{0:F2}"' m_PotentialUpdatesBudgetGraph.GetAverageValue(m_PotentialUpdatesPerSecondString)); " is 123.
Long Statement,Gaming.Game,GameObject,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GameObject.cs,WriteGameObjectData,The length of the statement  "								+ "All data marked as [GameData] must be a primitive or a struct or if a class have a DEFALT value or filed initializer."); " is 123.
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,DataViewGraph,The following statement contains a magic number: if (StartMin == 0 && StartMax == 0)  			{  				m_DataViewMaxY = -999999;  				m_DataViewMinY = 999999;  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,DataViewGraph,The following statement contains a magic number: if (StartMin == 0 && StartMax == 0)  			{  				m_DataViewMaxY = -999999;  				m_DataViewMinY = 999999;  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,Draw,The following statement contains a magic number: double TextHeight = m_Position.y - 20;
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,Draw,The following statement contains a magic number: RoundedRect BackGround = new RoundedRect(m_Position.x' m_Position.y - 1' m_Position.x + m_Width' m_Position.y - 1 + m_Height + 2' 5);
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,Draw,The following statement contains a magic number: RoundedRect BackGround = new RoundedRect(m_Position.x' m_Position.y - 1' m_Position.x + m_Width' m_Position.y - 1 + m_Height + 2' 5);
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,Draw,The following statement contains a magic number: renderer.Render(TransformedBackGround' new RGBA_Bytes(0' 0' 0' .5));
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,Draw,The following statement contains a magic number: double MaxMax = -999999999;
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,Draw,The following statement contains a magic number: double MinMin = 999999999;
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,Draw,The following statement contains a magic number: foreach (KeyValuePair<String' HistoryData> historyKeyValue in m_DataHistoryArray)  			{  				HistoryData history = historyKeyValue.Value;  				m_LinesToDraw.remove_all();  				MaxMax = System.Math.Max(MaxMax' history.GetMaxValue());  				MinMin = System.Math.Min(MinMin' history.GetMinValue());  				MaxAverage = System.Math.Max(MaxAverage' history.GetAverageValue());  				for (int i = 0; i < m_Width - 1; i++)  				{  					if (i == 0)  					{  						m_LinesToDraw.MoveTo(m_Position.x + i'  							m_Position.y + ((history.GetItem(i) - m_DataViewMinY) * m_Height / Range));  					}  					else  					{  						m_LinesToDraw.LineTo(m_Position.x + i'  							m_Position.y + ((history.GetItem(i) - m_DataViewMinY) * m_Height / Range));  					}  				}    				TransformedLinesToDraw = new VertexSourceApplyTransform(m_LinesToDraw' Position);  				StrockedTransformedLinesToDraw = new Stroke(TransformedLinesToDraw);  				renderer.Render(StrockedTransformedLinesToDraw' history.m_Color);    				String Text = historyKeyValue.Key + ": Min:" + MinMin.ToString("0.0") + " Max:" + MaxMax.ToString("0.0");  				renderer.DrawString(Text' m_Position.x' TextHeight - m_Height);  				TextHeight -= 20;  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,Draw,The following statement contains a magic number: RoundedRect BackGround2 = new RoundedRect(m_Position.x' m_Position.y - 1' m_Position.x + m_Width' m_Position.y - 1 + m_Height + 2' 5);
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,Draw,The following statement contains a magic number: RoundedRect BackGround2 = new RoundedRect(m_Position.x' m_Position.y - 1' m_Position.x + m_Width' m_Position.y - 1 + m_Height + 2' 5);
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!m_DataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (m_ColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				m_DataHistoryArray.Add(DataType' new HistoryData((int)m_Width' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!m_DataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (m_ColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				m_DataHistoryArray.Add(DataType' new HistoryData((int)m_Width' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!m_DataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (m_ColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				m_DataHistoryArray.Add(DataType' new HistoryData((int)m_Width' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!m_DataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (m_ColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				m_DataHistoryArray.Add(DataType' new HistoryData((int)m_Width' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!m_DataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (m_ColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				m_DataHistoryArray.Add(DataType' new HistoryData((int)m_Width' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!m_DataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (m_ColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				m_DataHistoryArray.Add(DataType' new HistoryData((int)m_Width' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!m_DataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (m_ColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				m_DataHistoryArray.Add(DataType' new HistoryData((int)m_Width' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!m_DataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (m_ColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				m_DataHistoryArray.Add(DataType' new HistoryData((int)m_Width' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!m_DataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (m_ColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				m_DataHistoryArray.Add(DataType' new HistoryData((int)m_Width' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!m_DataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (m_ColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				m_DataHistoryArray.Add(DataType' new HistoryData((int)m_Width' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!m_DataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (m_ColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				m_DataHistoryArray.Add(DataType' new HistoryData((int)m_Width' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!m_DataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (m_ColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				m_DataHistoryArray.Add(DataType' new HistoryData((int)m_Width' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!m_DataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (m_ColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				m_DataHistoryArray.Add(DataType' new HistoryData((int)m_Width' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,AddData,The following statement contains a magic number: if (!m_DataHistoryArray.ContainsKey(DataType))  			{  				RGBA_Bytes LineColor = new RGBA_Bytes(255' 255' 255);  				switch (m_ColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}    				m_DataHistoryArray.Add(DataType' new HistoryData((int)m_Width' LineColor));  			}
Magic Number,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,Reset,The following statement contains a magic number: m_DataViewMinY = 99999;
Magic Number,Gaming.Game,HistoryData,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,GetMaxValue,The following statement contains a magic number: double Max = -9999999999;
Magic Number,Gaming.Game,HistoryData,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,GetMinValue,The following statement contains a magic number: double Min = 9999999999;
Magic Number,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,CreateGraphs,The following statement contains a magic number: int FrameRateOffset = -15;
Magic Number,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,CreateGraphs,The following statement contains a magic number: m_PotentialDrawsBudgetPosition = new Vector2(10' (double)Height + FrameRateOffset);
Magic Number,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,CreateGraphs,The following statement contains a magic number: m_PotentialDrawsBudgetGraph = new DataViewGraph(m_PotentialDrawsBudgetPosition' 100' 100);
Magic Number,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,CreateGraphs,The following statement contains a magic number: m_PotentialDrawsBudgetGraph = new DataViewGraph(m_PotentialDrawsBudgetPosition' 100' 100);
Magic Number,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,CreateGraphs,The following statement contains a magic number: m_PotentialUpdatesBudgetPosition = new Vector2(115' (double)Height + FrameRateOffset);
Magic Number,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,CreateGraphs,The following statement contains a magic number: m_PotentialUpdatesBudgetGraph = new DataViewGraph(m_PotentialUpdatesBudgetPosition' 100' 100);
Magic Number,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,CreateGraphs,The following statement contains a magic number: m_PotentialUpdatesBudgetGraph = new DataViewGraph(m_PotentialUpdatesBudgetPosition' 100' 100);
Magic Number,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,CreateGraphs,The following statement contains a magic number: m_ActualDrawsBudgetPosition = new Vector2(220' (double)Height + FrameRateOffset);
Magic Number,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,CreateGraphs,The following statement contains a magic number: m_ActualDrawsBudgetGraph = new DataViewGraph(m_ActualDrawsBudgetPosition' 100' 100);
Magic Number,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,CreateGraphs,The following statement contains a magic number: m_ActualDrawsBudgetGraph = new DataViewGraph(m_ActualDrawsBudgetPosition' 100' 100);
Magic Number,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,OnDraw,The following statement contains a magic number: if (m_ShowFrameRate)  			{  				int GraphOffsetY = -105;  				if (m_ShowPotentialDrawsBudgetGraph.Checked)  				{  					Affine Position = Affine.NewTranslation(0' GraphOffsetY);  					m_PotentialDrawsBudgetGraph.Draw(Position' graphics2D);  				}    				if (m_ShowPotentialUpdatesBudgetGraph.Checked)  				{  					Affine Position = Affine.NewTranslation(0' GraphOffsetY);  					m_PotentialUpdatesBudgetGraph.Draw(Position' graphics2D);  				}    				if (m_ShowActualDrawsBudgetGraph.Checked)  				{  					Affine Position = Affine.NewTranslation(0' GraphOffsetY);  					m_ActualDrawsBudgetGraph.Draw(Position' graphics2D);  				}  			}
Magic Number,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,OnIdle,The following statement contains a magic number: while (NumSecondsPassedSinceLastUpdate >= m_SecondsPerUpdate && m_PotentialUpdatesBudgetGraph != null)  			{  				WasUpdate = true;    				m_PotentialUpdatesStopWatch.Restart();  				// call update with time slices that are as big as m_SecondsPerUpdate  				OnUpdate(m_SecondsPerUpdate);  				m_PotentialUpdatesStopWatch.Stop();  				double Seconds = (double)(m_PotentialUpdatesStopWatch.Elapsed.TotalMilliseconds / 1000);  				if (Seconds == 0) Seconds = 1;  				m_PotentialUpdatesBudgetGraph.AddData(m_PotentialUpdatesPerSecondString' 1.0f / Seconds);  				string Lable = string.Format("U:{0:F2}"' m_PotentialUpdatesBudgetGraph.GetAverageValue(m_PotentialUpdatesPerSecondString));  				m_ShowPotentialUpdatesBudgetGraph.Text = Lable;    				m_NumSecondsSinceStart += m_SecondsPerUpdate;  				// take out the amount of time we updated and check again  				NumSecondsPassedSinceLastUpdate -= m_SecondsPerUpdate;  			}
Magic Number,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,OnIdle,The following statement contains a magic number: if (WasUpdate)  			{  				m_PotentialDrawsStopWatch.Restart();  				//OnDraw(NewGraphics2D());  				Invalidate();  				m_PotentialDrawsStopWatch.Stop();  				double Seconds = (double)(m_PotentialDrawsStopWatch.Elapsed.TotalMilliseconds / 1000);  				if (Seconds == 0) Seconds = 1;  				m_PotentialDrawsBudgetGraph.AddData(m_PotentialDrawsPerSecondString' 1.0f / Seconds);  				string Lable = string.Format("D:{0:F2}"' m_PotentialDrawsBudgetGraph.GetAverageValue(m_PotentialDrawsPerSecondString));  				m_ShowPotentialDrawsBudgetGraph.Text = Lable;    				m_ActualDrawsStopWatch.Stop();  				Seconds = (double)(m_ActualDrawsStopWatch.Elapsed.TotalMilliseconds / 1000);  				if (Seconds == 0) Seconds = 1;  				m_ActualDrawsBudgetGraph.AddData(m_ActualDrawsPerSecondString' 1.0f / Seconds);  				Lable = string.Format("A:{0:F2}"' m_ActualDrawsBudgetGraph.GetAverageValue(m_ActualDrawsPerSecondString));  				m_ShowActualDrawsBudgetGraph.Text = Lable;  				m_ActualDrawsStopWatch.Restart();  			}  			else // if there is more than 3 ms before the next update could happen then sleep for 1 ms.  			{  				double ThreeMiliSeconds = 3 / 1000.0f;  				if (ThreeMiliSeconds < m_SecondsPerUpdate - NumSecondsPassedSinceLastUpdate)  				{  					System.Threading.Thread.Sleep(1);  				}  			}
Magic Number,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,OnIdle,The following statement contains a magic number: if (WasUpdate)  			{  				m_PotentialDrawsStopWatch.Restart();  				//OnDraw(NewGraphics2D());  				Invalidate();  				m_PotentialDrawsStopWatch.Stop();  				double Seconds = (double)(m_PotentialDrawsStopWatch.Elapsed.TotalMilliseconds / 1000);  				if (Seconds == 0) Seconds = 1;  				m_PotentialDrawsBudgetGraph.AddData(m_PotentialDrawsPerSecondString' 1.0f / Seconds);  				string Lable = string.Format("D:{0:F2}"' m_PotentialDrawsBudgetGraph.GetAverageValue(m_PotentialDrawsPerSecondString));  				m_ShowPotentialDrawsBudgetGraph.Text = Lable;    				m_ActualDrawsStopWatch.Stop();  				Seconds = (double)(m_ActualDrawsStopWatch.Elapsed.TotalMilliseconds / 1000);  				if (Seconds == 0) Seconds = 1;  				m_ActualDrawsBudgetGraph.AddData(m_ActualDrawsPerSecondString' 1.0f / Seconds);  				Lable = string.Format("A:{0:F2}"' m_ActualDrawsBudgetGraph.GetAverageValue(m_ActualDrawsPerSecondString));  				m_ShowActualDrawsBudgetGraph.Text = Lable;  				m_ActualDrawsStopWatch.Restart();  			}  			else // if there is more than 3 ms before the next update could happen then sleep for 1 ms.  			{  				double ThreeMiliSeconds = 3 / 1000.0f;  				if (ThreeMiliSeconds < m_SecondsPerUpdate - NumSecondsPassedSinceLastUpdate)  				{  					System.Threading.Thread.Sleep(1);  				}  			}
Magic Number,Gaming.Game,GamePlatform,C:\repos\MatterHackers_agg-sharp\Gaming\Game\GamePlatform.cs,OnIdle,The following statement contains a magic number: if (WasUpdate)  			{  				m_PotentialDrawsStopWatch.Restart();  				//OnDraw(NewGraphics2D());  				Invalidate();  				m_PotentialDrawsStopWatch.Stop();  				double Seconds = (double)(m_PotentialDrawsStopWatch.Elapsed.TotalMilliseconds / 1000);  				if (Seconds == 0) Seconds = 1;  				m_PotentialDrawsBudgetGraph.AddData(m_PotentialDrawsPerSecondString' 1.0f / Seconds);  				string Lable = string.Format("D:{0:F2}"' m_PotentialDrawsBudgetGraph.GetAverageValue(m_PotentialDrawsPerSecondString));  				m_ShowPotentialDrawsBudgetGraph.Text = Lable;    				m_ActualDrawsStopWatch.Stop();  				Seconds = (double)(m_ActualDrawsStopWatch.Elapsed.TotalMilliseconds / 1000);  				if (Seconds == 0) Seconds = 1;  				m_ActualDrawsBudgetGraph.AddData(m_ActualDrawsPerSecondString' 1.0f / Seconds);  				Lable = string.Format("A:{0:F2}"' m_ActualDrawsBudgetGraph.GetAverageValue(m_ActualDrawsPerSecondString));  				m_ShowActualDrawsBudgetGraph.Text = Lable;  				m_ActualDrawsStopWatch.Restart();  			}  			else // if there is more than 3 ms before the next update could happen then sleep for 1 ms.  			{  				double ThreeMiliSeconds = 3 / 1000.0f;  				if (ThreeMiliSeconds < m_SecondsPerUpdate - NumSecondsPassedSinceLastUpdate)  				{  					System.Threading.Thread.Sleep(1);  				}  			}
Magic Number,Gaming.Graphics,GameImageSequence,C:\repos\MatterHackers_agg-sharp\Gaming\Graphics\GameImageSequence.cs,CenterOriginOffset,The following statement contains a magic number: foreach (ImageBuffer image in m_Images)  			{  				image.OriginOffset = new Vector2(image.Width / 2' image.Height / 2);  			}
Magic Number,Gaming.Graphics,GameImageSequence,C:\repos\MatterHackers_agg-sharp\Gaming\Graphics\GameImageSequence.cs,CenterOriginOffset,The following statement contains a magic number: foreach (ImageBuffer image in m_Images)  			{  				image.OriginOffset = new Vector2(image.Width / 2' image.Height / 2);  			}
Magic Number,Gaming.Graphics,GameImageSequence,C:\repos\MatterHackers_agg-sharp\Gaming\Graphics\GameImageSequence.cs,Load,The following statement contains a magic number: foreach (String tgaFile in sortedTgaFiles)  			{  				sequenceLoaded.m_Images[imageIndex] = new ImageBuffer(new BlenderPreMultBGRA());  				Stream imageStream = File.Open(tgaFile' FileMode.Open);  				ImageTgaIO.LoadImageData(sequenceLoaded.m_Images[imageIndex]' imageStream' 32);  				imageIndex++;  			}
Magic Number,Gaming.Graphics,GameImageSequence,C:\repos\MatterHackers_agg-sharp\Gaming\Graphics\GameImageSequence.cs,GetFrameIndexByRatio,The following statement contains a magic number: return (int)((fractionOfTotalLength * (NumFrames - 1)) + .5);
Magic Number,Gaming.Graphics,GameImageSequence,C:\repos\MatterHackers_agg-sharp\Gaming\Graphics\GameImageSequence.cs,GetImageByIndex,The following statement contains a magic number: return GetImageByIndex((int)(ImageIndex + .5));
Magic Number,Gaming.Math,Helper,C:\repos\MatterHackers_agg-sharp\Gaming\Math\Helper.cs,DegToRad,The following statement contains a magic number: return Deg / 180 * (double)System.Math.PI;
Missing Default,Gaming.Game,DataViewGraph,C:\repos\MatterHackers_agg-sharp\Gaming\Game\DataViewGraph.cs,AddData,The following switch statement is missing a default case: switch (m_ColorIndex++ % 3)  				{  					case 0:  						LineColor = new RGBA_Bytes(255' 55' 55);  						break;    					case 1:  						LineColor = new RGBA_Bytes(55' 255' 55);  						break;    					case 2:  						LineColor = new RGBA_Bytes(55' 55' 255);  						break;  				}
