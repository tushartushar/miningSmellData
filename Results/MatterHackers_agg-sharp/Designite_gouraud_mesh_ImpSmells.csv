Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,rotate_colors,Cyclomatic complexity of the method is 8
Long Parameter List,MatterHackers.Agg,mesh_point,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,mesh_point,The method has 6 parameters. Parameters: x_' y_' dx_' dy_' c' dc_
Long Parameter List,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,generate,The method has 6 parameters. Parameters: cols' rows' cell_w' cell_h' start_x' start_y
Long Parameter List,MatterHackers.Agg,styles_gouraud,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,generate_span,The method has 6 parameters. Parameters: span' spanIndex' x' y' len' style
Magic Number,MatterHackers.Agg,gouraud_mesh_application,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,random,The following statement contains a magic number: return (v2 - v1) * (rand.Next() % 1000) / 999.0 + v1;
Magic Number,MatterHackers.Agg,gouraud_mesh_application,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,random,The following statement contains a magic number: return (v2 - v1) * (rand.Next() % 1000) / 999.0 + v1;
Magic Number,MatterHackers.Agg,gouraud_mesh_application,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,gouraud_mesh_application,The following statement contains a magic number: m_mesh.generate(20' 20' 17' 17' 40' 40);
Magic Number,MatterHackers.Agg,gouraud_mesh_application,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,gouraud_mesh_application,The following statement contains a magic number: m_mesh.generate(20' 20' 17' 17' 40' 40);
Magic Number,MatterHackers.Agg,gouraud_mesh_application,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,gouraud_mesh_application,The following statement contains a magic number: m_mesh.generate(20' 20' 17' 17' 40' 40);
Magic Number,MatterHackers.Agg,gouraud_mesh_application,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,gouraud_mesh_application,The following statement contains a magic number: m_mesh.generate(20' 20' 17' 17' 40' 40);
Magic Number,MatterHackers.Agg,gouraud_mesh_application,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,gouraud_mesh_application,The following statement contains a magic number: m_mesh.generate(20' 20' 17' 17' 40' 40);
Magic Number,MatterHackers.Agg,gouraud_mesh_application,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,gouraud_mesh_application,The following statement contains a magic number: m_mesh.generate(20' 20' 17' 17' 40' 40);
Magic Number,MatterHackers.Agg,gouraud_mesh_application,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,OnDraw,The following statement contains a magic number: t.SetFontSize(10.0);
Magic Number,MatterHackers.Agg,gouraud_mesh_application,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,OnDraw,The following statement contains a magic number: pt.width(1.5);
Magic Number,MatterHackers.Agg,gouraud_mesh_application,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,OnDraw,The following statement contains a magic number: string buf = string.Format("{0:F2} ms' {1} triangles' {2:F0} tri/sec"'  				tm'  				m_mesh.num_triangles()'  				m_mesh.num_triangles() / tm * 1000.0);
Magic Number,MatterHackers.Agg,gouraud_mesh_application,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,OnDraw,The following statement contains a magic number: t.start_point(10.0' 10.0);
Magic Number,MatterHackers.Agg,gouraud_mesh_application,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,OnDraw,The following statement contains a magic number: t.start_point(10.0' 10.0);
Magic Number,MatterHackers.Agg,gouraud_mesh_application,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,OnDraw,The following statement contains a magic number: scanlineRenderer.RenderSolid(clippingProxy' ras' sl' new RGBA_Bytes(255' 255' 255));
Magic Number,MatterHackers.Agg,gouraud_mesh_application,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,OnDraw,The following statement contains a magic number: scanlineRenderer.RenderSolid(clippingProxy' ras' sl' new RGBA_Bytes(255' 255' 255));
Magic Number,MatterHackers.Agg,gouraud_mesh_application,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,OnDraw,The following statement contains a magic number: scanlineRenderer.RenderSolid(clippingProxy' ras' sl' new RGBA_Bytes(255' 255' 255));
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,generate,The following statement contains a magic number: for (int i = 0; i < m_rows; i++)  				{  					double x = start_x;  					for (int j = 0; j < m_cols; j++)  					{  						double dx = random(-0.5' 0.5);  						double dy = random(-0.5' 0.5);  						RGBA_Bytes c = new RGBA_Bytes(rand.Next() & 0xFF' rand.Next() & 0xFF' rand.Next() & 0xFF);  						RGBA_Bytes dc = new RGBA_Bytes(rand.Next() & 1' rand.Next() & 1' rand.Next() & 1);  						m_vertices.add(new mesh_point(x' start_y' dx' dy' c' dc));  						x += cell_w;  					}  					start_y += cell_h;  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,generate,The following statement contains a magic number: for (int i = 0; i < m_rows; i++)  				{  					double x = start_x;  					for (int j = 0; j < m_cols; j++)  					{  						double dx = random(-0.5' 0.5);  						double dy = random(-0.5' 0.5);  						RGBA_Bytes c = new RGBA_Bytes(rand.Next() & 0xFF' rand.Next() & 0xFF' rand.Next() & 0xFF);  						RGBA_Bytes dc = new RGBA_Bytes(rand.Next() & 1' rand.Next() & 1' rand.Next() & 1);  						m_vertices.add(new mesh_point(x' start_y' dx' dy' c' dc));  						x += cell_w;  					}  					start_y += cell_h;  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,generate,The following statement contains a magic number: for (int i = 0; i < m_rows; i++)  				{  					double x = start_x;  					for (int j = 0; j < m_cols; j++)  					{  						double dx = random(-0.5' 0.5);  						double dy = random(-0.5' 0.5);  						RGBA_Bytes c = new RGBA_Bytes(rand.Next() & 0xFF' rand.Next() & 0xFF' rand.Next() & 0xFF);  						RGBA_Bytes dc = new RGBA_Bytes(rand.Next() & 1' rand.Next() & 1' rand.Next() & 1);  						m_vertices.add(new mesh_point(x' start_y' dx' dy' c' dc));  						x += cell_w;  					}  					start_y += cell_h;  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,generate,The following statement contains a magic number: for (int i = 0; i < m_rows; i++)  				{  					double x = start_x;  					for (int j = 0; j < m_cols; j++)  					{  						double dx = random(-0.5' 0.5);  						double dy = random(-0.5' 0.5);  						RGBA_Bytes c = new RGBA_Bytes(rand.Next() & 0xFF' rand.Next() & 0xFF' rand.Next() & 0xFF);  						RGBA_Bytes dc = new RGBA_Bytes(rand.Next() & 1' rand.Next() & 1' rand.Next() & 1);  						m_vertices.add(new mesh_point(x' start_y' dx' dy' c' dc));  						x += cell_w;  					}  					start_y += cell_h;  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,generate,The following statement contains a magic number: for (int i = 0; i < m_rows - 1; i++)  				{  					for (int j = 0; j < m_cols - 1; j++)  					{  						int p1 = i * m_cols + j;  						int p2 = p1 + 1;  						int p3 = p2 + m_cols;  						int p4 = p1 + m_cols;  						m_triangles.add(new mesh_triangle((int)p1' (int)p2' (int)p3));  						m_triangles.add(new mesh_triangle((int)p3' (int)p4' (int)p1));    						int curr_cell = i * (m_cols - 1) + j;  						int left_cell = j != 0 ? (int)(curr_cell - 1) : -1;  						int bott_cell = i != 0 ? (int)(curr_cell - (m_cols - 1)) : -1;    						int curr_t1 = curr_cell * 2;  						int curr_t2 = curr_t1 + 1;    						int left_t1 = (left_cell >= 0) ? left_cell * 2 : -1;  						int left_t2 = (left_cell >= 0) ? left_t1 + 1 : -1;    						int bott_t1 = (bott_cell >= 0) ? bott_cell * 2 : -1;  						int bott_t2 = (bott_cell >= 0) ? bott_t1 + 1 : -1;    						m_edges.add(new mesh_edge((int)p1' (int)p2' curr_t1' bott_t2));  						m_edges.add(new mesh_edge((int)p1' (int)p3' curr_t2' curr_t1));  						m_edges.add(new mesh_edge((int)p1' (int)p4' left_t1' curr_t2));    						if (j == m_cols - 2) // Last column  						{  							m_edges.add(new mesh_edge((int)p2' (int)p3' curr_t1' -1));  						}    						if (i == m_rows - 2) // Last row  						{  							m_edges.add(new mesh_edge((int)p3' (int)p4' curr_t2' -1));  						}  					}  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,generate,The following statement contains a magic number: for (int i = 0; i < m_rows - 1; i++)  				{  					for (int j = 0; j < m_cols - 1; j++)  					{  						int p1 = i * m_cols + j;  						int p2 = p1 + 1;  						int p3 = p2 + m_cols;  						int p4 = p1 + m_cols;  						m_triangles.add(new mesh_triangle((int)p1' (int)p2' (int)p3));  						m_triangles.add(new mesh_triangle((int)p3' (int)p4' (int)p1));    						int curr_cell = i * (m_cols - 1) + j;  						int left_cell = j != 0 ? (int)(curr_cell - 1) : -1;  						int bott_cell = i != 0 ? (int)(curr_cell - (m_cols - 1)) : -1;    						int curr_t1 = curr_cell * 2;  						int curr_t2 = curr_t1 + 1;    						int left_t1 = (left_cell >= 0) ? left_cell * 2 : -1;  						int left_t2 = (left_cell >= 0) ? left_t1 + 1 : -1;    						int bott_t1 = (bott_cell >= 0) ? bott_cell * 2 : -1;  						int bott_t2 = (bott_cell >= 0) ? bott_t1 + 1 : -1;    						m_edges.add(new mesh_edge((int)p1' (int)p2' curr_t1' bott_t2));  						m_edges.add(new mesh_edge((int)p1' (int)p3' curr_t2' curr_t1));  						m_edges.add(new mesh_edge((int)p1' (int)p4' left_t1' curr_t2));    						if (j == m_cols - 2) // Last column  						{  							m_edges.add(new mesh_edge((int)p2' (int)p3' curr_t1' -1));  						}    						if (i == m_rows - 2) // Last row  						{  							m_edges.add(new mesh_edge((int)p3' (int)p4' curr_t2' -1));  						}  					}  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,generate,The following statement contains a magic number: for (int i = 0; i < m_rows - 1; i++)  				{  					for (int j = 0; j < m_cols - 1; j++)  					{  						int p1 = i * m_cols + j;  						int p2 = p1 + 1;  						int p3 = p2 + m_cols;  						int p4 = p1 + m_cols;  						m_triangles.add(new mesh_triangle((int)p1' (int)p2' (int)p3));  						m_triangles.add(new mesh_triangle((int)p3' (int)p4' (int)p1));    						int curr_cell = i * (m_cols - 1) + j;  						int left_cell = j != 0 ? (int)(curr_cell - 1) : -1;  						int bott_cell = i != 0 ? (int)(curr_cell - (m_cols - 1)) : -1;    						int curr_t1 = curr_cell * 2;  						int curr_t2 = curr_t1 + 1;    						int left_t1 = (left_cell >= 0) ? left_cell * 2 : -1;  						int left_t2 = (left_cell >= 0) ? left_t1 + 1 : -1;    						int bott_t1 = (bott_cell >= 0) ? bott_cell * 2 : -1;  						int bott_t2 = (bott_cell >= 0) ? bott_t1 + 1 : -1;    						m_edges.add(new mesh_edge((int)p1' (int)p2' curr_t1' bott_t2));  						m_edges.add(new mesh_edge((int)p1' (int)p3' curr_t2' curr_t1));  						m_edges.add(new mesh_edge((int)p1' (int)p4' left_t1' curr_t2));    						if (j == m_cols - 2) // Last column  						{  							m_edges.add(new mesh_edge((int)p2' (int)p3' curr_t1' -1));  						}    						if (i == m_rows - 2) // Last row  						{  							m_edges.add(new mesh_edge((int)p3' (int)p4' curr_t2' -1));  						}  					}  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,generate,The following statement contains a magic number: for (int i = 0; i < m_rows - 1; i++)  				{  					for (int j = 0; j < m_cols - 1; j++)  					{  						int p1 = i * m_cols + j;  						int p2 = p1 + 1;  						int p3 = p2 + m_cols;  						int p4 = p1 + m_cols;  						m_triangles.add(new mesh_triangle((int)p1' (int)p2' (int)p3));  						m_triangles.add(new mesh_triangle((int)p3' (int)p4' (int)p1));    						int curr_cell = i * (m_cols - 1) + j;  						int left_cell = j != 0 ? (int)(curr_cell - 1) : -1;  						int bott_cell = i != 0 ? (int)(curr_cell - (m_cols - 1)) : -1;    						int curr_t1 = curr_cell * 2;  						int curr_t2 = curr_t1 + 1;    						int left_t1 = (left_cell >= 0) ? left_cell * 2 : -1;  						int left_t2 = (left_cell >= 0) ? left_t1 + 1 : -1;    						int bott_t1 = (bott_cell >= 0) ? bott_cell * 2 : -1;  						int bott_t2 = (bott_cell >= 0) ? bott_t1 + 1 : -1;    						m_edges.add(new mesh_edge((int)p1' (int)p2' curr_t1' bott_t2));  						m_edges.add(new mesh_edge((int)p1' (int)p3' curr_t2' curr_t1));  						m_edges.add(new mesh_edge((int)p1' (int)p4' left_t1' curr_t2));    						if (j == m_cols - 2) // Last column  						{  							m_edges.add(new mesh_edge((int)p2' (int)p3' curr_t1' -1));  						}    						if (i == m_rows - 2) // Last row  						{  							m_edges.add(new mesh_edge((int)p3' (int)p4' curr_t2' -1));  						}  					}  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,generate,The following statement contains a magic number: for (int i = 0; i < m_rows - 1; i++)  				{  					for (int j = 0; j < m_cols - 1; j++)  					{  						int p1 = i * m_cols + j;  						int p2 = p1 + 1;  						int p3 = p2 + m_cols;  						int p4 = p1 + m_cols;  						m_triangles.add(new mesh_triangle((int)p1' (int)p2' (int)p3));  						m_triangles.add(new mesh_triangle((int)p3' (int)p4' (int)p1));    						int curr_cell = i * (m_cols - 1) + j;  						int left_cell = j != 0 ? (int)(curr_cell - 1) : -1;  						int bott_cell = i != 0 ? (int)(curr_cell - (m_cols - 1)) : -1;    						int curr_t1 = curr_cell * 2;  						int curr_t2 = curr_t1 + 1;    						int left_t1 = (left_cell >= 0) ? left_cell * 2 : -1;  						int left_t2 = (left_cell >= 0) ? left_t1 + 1 : -1;    						int bott_t1 = (bott_cell >= 0) ? bott_cell * 2 : -1;  						int bott_t2 = (bott_cell >= 0) ? bott_t1 + 1 : -1;    						m_edges.add(new mesh_edge((int)p1' (int)p2' curr_t1' bott_t2));  						m_edges.add(new mesh_edge((int)p1' (int)p3' curr_t2' curr_t1));  						m_edges.add(new mesh_edge((int)p1' (int)p4' left_t1' curr_t2));    						if (j == m_cols - 2) // Last column  						{  							m_edges.add(new mesh_edge((int)p2' (int)p3' curr_t1' -1));  						}    						if (i == m_rows - 2) // Last row  						{  							m_edges.add(new mesh_edge((int)p3' (int)p4' curr_t2' -1));  						}  					}  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,randomize_points,The following statement contains a magic number: for (i = 0; i < m_rows; i++)  				{  					for (j = 0; j < m_cols; j++)  					{  						double xc = j * m_cell_w + m_start_x;  						double yc = i * m_cell_h + m_start_y;  						double x1 = xc - m_cell_w / 4;  						double y1 = yc - m_cell_h / 4;  						double x2 = xc + m_cell_w / 4;  						double y2 = yc + m_cell_h / 4;  						mesh_point p = vertex(j' i);  						p.x += p.dx;  						p.y += p.dy;  						if (p.x < x1) { p.x = x1; p.dx = -p.dx; }  						if (p.y < y1) { p.y = y1; p.dy = -p.dy; }  						if (p.x > x2) { p.x = x2; p.dx = -p.dx; }  						if (p.y > y2) { p.y = y2; p.dy = -p.dy; }  					}  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,randomize_points,The following statement contains a magic number: for (i = 0; i < m_rows; i++)  				{  					for (j = 0; j < m_cols; j++)  					{  						double xc = j * m_cell_w + m_start_x;  						double yc = i * m_cell_h + m_start_y;  						double x1 = xc - m_cell_w / 4;  						double y1 = yc - m_cell_h / 4;  						double x2 = xc + m_cell_w / 4;  						double y2 = yc + m_cell_h / 4;  						mesh_point p = vertex(j' i);  						p.x += p.dx;  						p.y += p.dy;  						if (p.x < x1) { p.x = x1; p.dx = -p.dx; }  						if (p.y < y1) { p.y = y1; p.dy = -p.dy; }  						if (p.x > x2) { p.x = x2; p.dx = -p.dx; }  						if (p.y > y2) { p.y = y2; p.dy = -p.dy; }  					}  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,randomize_points,The following statement contains a magic number: for (i = 0; i < m_rows; i++)  				{  					for (j = 0; j < m_cols; j++)  					{  						double xc = j * m_cell_w + m_start_x;  						double yc = i * m_cell_h + m_start_y;  						double x1 = xc - m_cell_w / 4;  						double y1 = yc - m_cell_h / 4;  						double x2 = xc + m_cell_w / 4;  						double y2 = yc + m_cell_h / 4;  						mesh_point p = vertex(j' i);  						p.x += p.dx;  						p.y += p.dy;  						if (p.x < x1) { p.x = x1; p.dx = -p.dx; }  						if (p.y < y1) { p.y = y1; p.dy = -p.dy; }  						if (p.x > x2) { p.x = x2; p.dx = -p.dx; }  						if (p.y > y2) { p.y = y2; p.dy = -p.dy; }  					}  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,randomize_points,The following statement contains a magic number: for (i = 0; i < m_rows; i++)  				{  					for (j = 0; j < m_cols; j++)  					{  						double xc = j * m_cell_w + m_start_x;  						double yc = i * m_cell_h + m_start_y;  						double x1 = xc - m_cell_w / 4;  						double y1 = yc - m_cell_h / 4;  						double x2 = xc + m_cell_w / 4;  						double y2 = yc + m_cell_h / 4;  						mesh_point p = vertex(j' i);  						p.x += p.dx;  						p.y += p.dy;  						if (p.x < x1) { p.x = x1; p.dx = -p.dx; }  						if (p.y < y1) { p.y = y1; p.dy = -p.dy; }  						if (p.x > x2) { p.x = x2; p.dx = -p.dx; }  						if (p.y > y2) { p.y = y2; p.dy = -p.dy; }  					}  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,rotate_colors,The following statement contains a magic number: for (i = 1; i < m_vertices.size(); i++)  				{  					RGBA_Bytes c = m_vertices[i].color;  					RGBA_Bytes dc = m_vertices[i].dc;  					int r = (int)c.Red0To255 + (dc.Red0To255 != 0 ? 5 : -5);  					int g = (int)c.Green0To255 + (dc.Green0To255 != 0 ? 5 : -5);  					int b = (int)c.Blue0To255 + (dc.Blue0To255 != 0 ? 5 : -5);  					if (r < 0) { r = 0; dc.Red0To255 ^= 1; } if (r > 255) { r = 255; dc.Red0To255 ^= 1; }  					if (g < 0) { g = 0; dc.Green0To255 ^= 1; } if (g > 255) { g = 255; dc.Green0To255 ^= 1; }  					if (b < 0) { b = 0; dc.Blue0To255 ^= 1; } if (b > 255) { b = 255; dc.Blue0To255 ^= 1; }  					c.Red0To255 = (int)r;  					c.Green0To255 = (int)g;  					c.Blue0To255 = (int)b;  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,rotate_colors,The following statement contains a magic number: for (i = 1; i < m_vertices.size(); i++)  				{  					RGBA_Bytes c = m_vertices[i].color;  					RGBA_Bytes dc = m_vertices[i].dc;  					int r = (int)c.Red0To255 + (dc.Red0To255 != 0 ? 5 : -5);  					int g = (int)c.Green0To255 + (dc.Green0To255 != 0 ? 5 : -5);  					int b = (int)c.Blue0To255 + (dc.Blue0To255 != 0 ? 5 : -5);  					if (r < 0) { r = 0; dc.Red0To255 ^= 1; } if (r > 255) { r = 255; dc.Red0To255 ^= 1; }  					if (g < 0) { g = 0; dc.Green0To255 ^= 1; } if (g > 255) { g = 255; dc.Green0To255 ^= 1; }  					if (b < 0) { b = 0; dc.Blue0To255 ^= 1; } if (b > 255) { b = 255; dc.Blue0To255 ^= 1; }  					c.Red0To255 = (int)r;  					c.Green0To255 = (int)g;  					c.Blue0To255 = (int)b;  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,rotate_colors,The following statement contains a magic number: for (i = 1; i < m_vertices.size(); i++)  				{  					RGBA_Bytes c = m_vertices[i].color;  					RGBA_Bytes dc = m_vertices[i].dc;  					int r = (int)c.Red0To255 + (dc.Red0To255 != 0 ? 5 : -5);  					int g = (int)c.Green0To255 + (dc.Green0To255 != 0 ? 5 : -5);  					int b = (int)c.Blue0To255 + (dc.Blue0To255 != 0 ? 5 : -5);  					if (r < 0) { r = 0; dc.Red0To255 ^= 1; } if (r > 255) { r = 255; dc.Red0To255 ^= 1; }  					if (g < 0) { g = 0; dc.Green0To255 ^= 1; } if (g > 255) { g = 255; dc.Green0To255 ^= 1; }  					if (b < 0) { b = 0; dc.Blue0To255 ^= 1; } if (b > 255) { b = 255; dc.Blue0To255 ^= 1; }  					c.Red0To255 = (int)r;  					c.Green0To255 = (int)g;  					c.Blue0To255 = (int)b;  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,rotate_colors,The following statement contains a magic number: for (i = 1; i < m_vertices.size(); i++)  				{  					RGBA_Bytes c = m_vertices[i].color;  					RGBA_Bytes dc = m_vertices[i].dc;  					int r = (int)c.Red0To255 + (dc.Red0To255 != 0 ? 5 : -5);  					int g = (int)c.Green0To255 + (dc.Green0To255 != 0 ? 5 : -5);  					int b = (int)c.Blue0To255 + (dc.Blue0To255 != 0 ? 5 : -5);  					if (r < 0) { r = 0; dc.Red0To255 ^= 1; } if (r > 255) { r = 255; dc.Red0To255 ^= 1; }  					if (g < 0) { g = 0; dc.Green0To255 ^= 1; } if (g > 255) { g = 255; dc.Green0To255 ^= 1; }  					if (b < 0) { b = 0; dc.Blue0To255 ^= 1; } if (b > 255) { b = 255; dc.Blue0To255 ^= 1; }  					c.Red0To255 = (int)r;  					c.Green0To255 = (int)g;  					c.Blue0To255 = (int)b;  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,rotate_colors,The following statement contains a magic number: for (i = 1; i < m_vertices.size(); i++)  				{  					RGBA_Bytes c = m_vertices[i].color;  					RGBA_Bytes dc = m_vertices[i].dc;  					int r = (int)c.Red0To255 + (dc.Red0To255 != 0 ? 5 : -5);  					int g = (int)c.Green0To255 + (dc.Green0To255 != 0 ? 5 : -5);  					int b = (int)c.Blue0To255 + (dc.Blue0To255 != 0 ? 5 : -5);  					if (r < 0) { r = 0; dc.Red0To255 ^= 1; } if (r > 255) { r = 255; dc.Red0To255 ^= 1; }  					if (g < 0) { g = 0; dc.Green0To255 ^= 1; } if (g > 255) { g = 255; dc.Green0To255 ^= 1; }  					if (b < 0) { b = 0; dc.Blue0To255 ^= 1; } if (b > 255) { b = 255; dc.Blue0To255 ^= 1; }  					c.Red0To255 = (int)r;  					c.Green0To255 = (int)g;  					c.Blue0To255 = (int)b;  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,rotate_colors,The following statement contains a magic number: for (i = 1; i < m_vertices.size(); i++)  				{  					RGBA_Bytes c = m_vertices[i].color;  					RGBA_Bytes dc = m_vertices[i].dc;  					int r = (int)c.Red0To255 + (dc.Red0To255 != 0 ? 5 : -5);  					int g = (int)c.Green0To255 + (dc.Green0To255 != 0 ? 5 : -5);  					int b = (int)c.Blue0To255 + (dc.Blue0To255 != 0 ? 5 : -5);  					if (r < 0) { r = 0; dc.Red0To255 ^= 1; } if (r > 255) { r = 255; dc.Red0To255 ^= 1; }  					if (g < 0) { g = 0; dc.Green0To255 ^= 1; } if (g > 255) { g = 255; dc.Green0To255 ^= 1; }  					if (b < 0) { b = 0; dc.Blue0To255 ^= 1; } if (b > 255) { b = 255; dc.Blue0To255 ^= 1; }  					c.Red0To255 = (int)r;  					c.Green0To255 = (int)g;  					c.Blue0To255 = (int)b;  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,rotate_colors,The following statement contains a magic number: for (i = 1; i < m_vertices.size(); i++)  				{  					RGBA_Bytes c = m_vertices[i].color;  					RGBA_Bytes dc = m_vertices[i].dc;  					int r = (int)c.Red0To255 + (dc.Red0To255 != 0 ? 5 : -5);  					int g = (int)c.Green0To255 + (dc.Green0To255 != 0 ? 5 : -5);  					int b = (int)c.Blue0To255 + (dc.Blue0To255 != 0 ? 5 : -5);  					if (r < 0) { r = 0; dc.Red0To255 ^= 1; } if (r > 255) { r = 255; dc.Red0To255 ^= 1; }  					if (g < 0) { g = 0; dc.Green0To255 ^= 1; } if (g > 255) { g = 255; dc.Green0To255 ^= 1; }  					if (b < 0) { b = 0; dc.Blue0To255 ^= 1; } if (b > 255) { b = 255; dc.Blue0To255 ^= 1; }  					c.Red0To255 = (int)r;  					c.Green0To255 = (int)g;  					c.Blue0To255 = (int)b;  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,rotate_colors,The following statement contains a magic number: for (i = 1; i < m_vertices.size(); i++)  				{  					RGBA_Bytes c = m_vertices[i].color;  					RGBA_Bytes dc = m_vertices[i].dc;  					int r = (int)c.Red0To255 + (dc.Red0To255 != 0 ? 5 : -5);  					int g = (int)c.Green0To255 + (dc.Green0To255 != 0 ? 5 : -5);  					int b = (int)c.Blue0To255 + (dc.Blue0To255 != 0 ? 5 : -5);  					if (r < 0) { r = 0; dc.Red0To255 ^= 1; } if (r > 255) { r = 255; dc.Red0To255 ^= 1; }  					if (g < 0) { g = 0; dc.Green0To255 ^= 1; } if (g > 255) { g = 255; dc.Green0To255 ^= 1; }  					if (b < 0) { b = 0; dc.Blue0To255 ^= 1; } if (b > 255) { b = 255; dc.Blue0To255 ^= 1; }  					c.Red0To255 = (int)r;  					c.Green0To255 = (int)g;  					c.Blue0To255 = (int)b;  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,rotate_colors,The following statement contains a magic number: for (i = 1; i < m_vertices.size(); i++)  				{  					RGBA_Bytes c = m_vertices[i].color;  					RGBA_Bytes dc = m_vertices[i].dc;  					int r = (int)c.Red0To255 + (dc.Red0To255 != 0 ? 5 : -5);  					int g = (int)c.Green0To255 + (dc.Green0To255 != 0 ? 5 : -5);  					int b = (int)c.Blue0To255 + (dc.Blue0To255 != 0 ? 5 : -5);  					if (r < 0) { r = 0; dc.Red0To255 ^= 1; } if (r > 255) { r = 255; dc.Red0To255 ^= 1; }  					if (g < 0) { g = 0; dc.Green0To255 ^= 1; } if (g > 255) { g = 255; dc.Green0To255 ^= 1; }  					if (b < 0) { b = 0; dc.Blue0To255 ^= 1; } if (b > 255) { b = 255; dc.Blue0To255 ^= 1; }  					c.Red0To255 = (int)r;  					c.Green0To255 = (int)g;  					c.Blue0To255 = (int)b;  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,rotate_colors,The following statement contains a magic number: for (i = 1; i < m_vertices.size(); i++)  				{  					RGBA_Bytes c = m_vertices[i].color;  					RGBA_Bytes dc = m_vertices[i].dc;  					int r = (int)c.Red0To255 + (dc.Red0To255 != 0 ? 5 : -5);  					int g = (int)c.Green0To255 + (dc.Green0To255 != 0 ? 5 : -5);  					int b = (int)c.Blue0To255 + (dc.Blue0To255 != 0 ? 5 : -5);  					if (r < 0) { r = 0; dc.Red0To255 ^= 1; } if (r > 255) { r = 255; dc.Red0To255 ^= 1; }  					if (g < 0) { g = 0; dc.Green0To255 ^= 1; } if (g > 255) { g = 255; dc.Green0To255 ^= 1; }  					if (b < 0) { b = 0; dc.Blue0To255 ^= 1; } if (b > 255) { b = 255; dc.Blue0To255 ^= 1; }  					c.Red0To255 = (int)r;  					c.Green0To255 = (int)g;  					c.Blue0To255 = (int)b;  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,rotate_colors,The following statement contains a magic number: for (i = 1; i < m_vertices.size(); i++)  				{  					RGBA_Bytes c = m_vertices[i].color;  					RGBA_Bytes dc = m_vertices[i].dc;  					int r = (int)c.Red0To255 + (dc.Red0To255 != 0 ? 5 : -5);  					int g = (int)c.Green0To255 + (dc.Green0To255 != 0 ? 5 : -5);  					int b = (int)c.Blue0To255 + (dc.Blue0To255 != 0 ? 5 : -5);  					if (r < 0) { r = 0; dc.Red0To255 ^= 1; } if (r > 255) { r = 255; dc.Red0To255 ^= 1; }  					if (g < 0) { g = 0; dc.Green0To255 ^= 1; } if (g > 255) { g = 255; dc.Green0To255 ^= 1; }  					if (b < 0) { b = 0; dc.Blue0To255 ^= 1; } if (b > 255) { b = 255; dc.Blue0To255 ^= 1; }  					c.Red0To255 = (int)r;  					c.Green0To255 = (int)g;  					c.Blue0To255 = (int)b;  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,rotate_colors,The following statement contains a magic number: for (i = 1; i < m_vertices.size(); i++)  				{  					RGBA_Bytes c = m_vertices[i].color;  					RGBA_Bytes dc = m_vertices[i].dc;  					int r = (int)c.Red0To255 + (dc.Red0To255 != 0 ? 5 : -5);  					int g = (int)c.Green0To255 + (dc.Green0To255 != 0 ? 5 : -5);  					int b = (int)c.Blue0To255 + (dc.Blue0To255 != 0 ? 5 : -5);  					if (r < 0) { r = 0; dc.Red0To255 ^= 1; } if (r > 255) { r = 255; dc.Red0To255 ^= 1; }  					if (g < 0) { g = 0; dc.Green0To255 ^= 1; } if (g > 255) { g = 255; dc.Green0To255 ^= 1; }  					if (b < 0) { b = 0; dc.Blue0To255 ^= 1; } if (b > 255) { b = 255; dc.Blue0To255 ^= 1; }  					c.Red0To255 = (int)r;  					c.Green0To255 = (int)g;  					c.Blue0To255 = (int)b;  				}
Magic Number,MatterHackers.Agg,mesh_ctrl,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,OnMouseDown,The following statement contains a magic number: if (mouseEvent.Button == MouseButtons.Left)  				{  					int i;  					for (i = 0; i < m_vertices.size(); i++)  					{  						if (agg_math.calc_distance(x' y' m_vertices[i].x' m_vertices[i].y) < 5)  						{  							m_drag_idx = i;  							m_drag_dx = x - m_vertices[i].x;  							m_drag_dy = y - m_vertices[i].y;  							return true;  						}  					}  				}
Magic Number,MatterHackers.Agg,GouraudMeshShadingFactory,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,GetAppParameters,The following statement contains a magic number: AppWidgetInfo appWidgetInfo = new AppWidgetInfo(  				"Vector"'  				"Gouraud Mesh Shading"'  				"Yet another example that demonstrates the power of compound shape rasterization. Here we create a "  				+ "mesh of triangles and render them in one pass with multiple Gouraud shaders (span_gouraud_rgba). "  				+ "The example demonstrates perfect Anti-Aliasing and perfect triangle stitching (seamless edges) at the same time."'  				400'  				400);
Magic Number,MatterHackers.Agg,GouraudMeshShadingFactory,C:\repos\MatterHackers_agg-sharp\examples\gouraud_mesh\gouraud_mesh.cs,GetAppParameters,The following statement contains a magic number: AppWidgetInfo appWidgetInfo = new AppWidgetInfo(  				"Vector"'  				"Gouraud Mesh Shading"'  				"Yet another example that demonstrates the power of compound shape rasterization. Here we create a "  				+ "mesh of triangles and render them in one pass with multiple Gouraud shaders (span_gouraud_rgba). "  				+ "The example demonstrates perfect Anti-Aliasing and perfect triangle stitching (seamless edges) at the same time."'  				400'  				400);
