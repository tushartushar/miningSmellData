Implementation smell,Namespace,Class,File,Method,Description
Long Method,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The method has 116 lines of code.
Complex Method,MomsSolitaire,CMomsGame,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,MoveCard,Cyclomatic complexity of the method is 9
Complex Method,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,Cyclomatic complexity of the method is 19
Complex Method,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,Cyclomatic complexity of the method is 13
Long Parameter List,MomsSolitaire,CMove,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,CMove,The method has 5 parameters. Parameters: x1' y1' x2' y2' MoveIndex
Long Statement,MomsSolitaire,CMomsGame,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,Shuffle,The length of the statement  "				// if you shuffle results in no move available' undo the shuffel and try again.  Rand should change and we will get a new shuffle " is 129.
Long Statement,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The length of the statement  "			RectangleDouble CardBounds = new RectangleDouble(StartX + 1.5' StartY + 1.5' StartX + CARD_WIDTH - 1.5' StartY + CARD_HEIGHT - 1.5); " is 132.
Long Statement,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The length of the statement  "			RoundedRect CardFiledRoundedRect = new RoundedRect(CardBounds.Left' CardBounds.Bottom' CardBounds.Right' CardBounds.Top' 5); " is 124.
Long Statement,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The length of the statement  "				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2)); " is 137.
Long Statement,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The length of the statement  "					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2)); " is 184.
Long Statement,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The length of the statement  "				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2)); " is 167.
Complex Conditional,MomsSolitaire,CMomsGame,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,IsSolved,The conditional expression  "CardIsInOrder(11' 0)  			   && CardIsInOrder(11' 1)  			   && CardIsInOrder(11' 2)  			   && CardIsInOrder(11' 3)"  is complex.
Magic Number,MomsSolitaire,CMomsGame,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,SpaceIsClickable,The following statement contains a magic number: (card.GetValue() == (int)CCard.CARD_VALUE.VALUE_ACE)  				&& CardToLeft.GetValue() > 2
Magic Number,MomsSolitaire,CMomsGame,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,CardIsInOrder,The following statement contains a magic number: CurCard.GetSuit() != TestCard.GetSuit()  						|| TestCard.GetValue() - (13 - i) != 0
Magic Number,MomsSolitaire,CMomsGame,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,CardIsInOrder,The following statement contains a magic number: CurCard.GetValue() - (13 - SlotX) == 0
Magic Number,MomsSolitaire,CMomsGame,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,MoveCard,The following statement contains a magic number: CurCard.GetValue() == 13
Magic Number,MomsSolitaire,CMomsGame,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,Shuffle,The following statement contains a magic number: CardIsInOrder(OtherX' OtherY) && Tries++ < 100000
Magic Number,MomsSolitaire,CMomsGame,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,IsSolved,The following statement contains a magic number: CardIsInOrder(11' 0)  			   && CardIsInOrder(11' 1)  			   && CardIsInOrder(11' 2)  			   && CardIsInOrder(11' 3)
Magic Number,MomsSolitaire,CMomsGame,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,IsSolved,The following statement contains a magic number: CardIsInOrder(11' 0)  			   && CardIsInOrder(11' 1)  			   && CardIsInOrder(11' 2)  			   && CardIsInOrder(11' 3)
Magic Number,MomsSolitaire,CMomsGame,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,IsSolved,The following statement contains a magic number: CardIsInOrder(11' 0)  			   && CardIsInOrder(11' 1)  			   && CardIsInOrder(11' 2)  			   && CardIsInOrder(11' 3)
Magic Number,MomsSolitaire,CMomsGame,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,IsSolved,The following statement contains a magic number: CardIsInOrder(11' 0)  			   && CardIsInOrder(11' 1)  			   && CardIsInOrder(11' 2)  			   && CardIsInOrder(11' 3)
Magic Number,MomsSolitaire,CMomsGame,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,IsSolved,The following statement contains a magic number: CardIsInOrder(11' 0)  			   && CardIsInOrder(11' 1)  			   && CardIsInOrder(11' 2)  			   && CardIsInOrder(11' 3)
Magic Number,MomsSolitaire,CMomsGame,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,IsSolved,The following statement contains a magic number: CardIsInOrder(11' 0)  			   && CardIsInOrder(11' 1)  			   && CardIsInOrder(11' 2)  			   && CardIsInOrder(11' 3)
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,MomsSolitaire,The following statement contains a magic number: m_ShuffleButton = new Button("Shuffle"' 20' 10);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,MomsSolitaire,The following statement contains a magic number: m_ShuffleButton = new Button("Shuffle"' 20' 10);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,MomsSolitaire,The following statement contains a magic number: m_UndoButton = new Button("Undo"' 120' 10);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,MomsSolitaire,The following statement contains a magic number: m_UndoButton = new Button("Undo"' 120' 10);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,MomsSolitaire,The following statement contains a magic number: m_NewGameButton = new Button("New Game"' 530' 350);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,MomsSolitaire,The following statement contains a magic number: m_NewGameButton = new Button("New Game"' 530' 350);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,MomsSolitaire,The following statement contains a magic number: m_ClubShape = CreatePath(inputString' 0' -1052);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,MomsSolitaire,The following statement contains a magic number: m_HeartShape = CreatePath(inputString' 0' -1052);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,MomsSolitaire,The following statement contains a magic number: m_SpadeShape = CreatePath(inputString' 0' -1052);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: RectangleDouble CardBounds = new RectangleDouble(StartX + 1.5' StartY + 1.5' StartX + CARD_WIDTH - 1.5' StartY + CARD_HEIGHT - 1.5);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: RectangleDouble CardBounds = new RectangleDouble(StartX + 1.5' StartY + 1.5' StartX + CARD_WIDTH - 1.5' StartY + CARD_HEIGHT - 1.5);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: RectangleDouble CardBounds = new RectangleDouble(StartX + 1.5' StartY + 1.5' StartX + CARD_WIDTH - 1.5' StartY + CARD_HEIGHT - 1.5);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: RectangleDouble CardBounds = new RectangleDouble(StartX + 1.5' StartY + 1.5' StartX + CARD_WIDTH - 1.5' StartY + CARD_HEIGHT - 1.5);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: RoundedRect CardFiledRoundedRect = new RoundedRect(CardBounds.Left' CardBounds.Bottom' CardBounds.Right' CardBounds.Top' 5);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: CardValue > 10
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: TextWidget stringToDraw = new TextWidget(ValueString' 10);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: CardValue < 11
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: subGraphics2D.Clear(new Color(255' 255' 255));
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: subGraphics2D.Clear(new Color(255' 255' 255));
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: subGraphics2D.Clear(new Color(255' 255' 255));
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: TextWidget stringToDraw = new TextWidget(whatToDo' 12);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: double TextX = m_BoardX + CARD_WIDTH * 4;
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: double TextY = m_BoardY - 34;
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: RoundedRect BackFill = new RoundedRect(Size.Left - 6' Size.Bottom - 3' Size.Right + 6' Size.Top + 6' 3);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: RoundedRect BackFill = new RoundedRect(Size.Left - 6' Size.Bottom - 3' Size.Right + 6' Size.Top + 6' 3);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: RoundedRect BackFill = new RoundedRect(Size.Left - 6' Size.Bottom - 3' Size.Right + 6' Size.Top + 6' 3);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: RoundedRect BackFill = new RoundedRect(Size.Left - 6' Size.Bottom - 3' Size.Right + 6' Size.Top + 6' 3);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: RoundedRect BackFill = new RoundedRect(Size.Left - 6' Size.Bottom - 3' Size.Right + 6' Size.Top + 6' 3);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: BackBorder.Width = 2;
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: TextWidget shuffelStringToDraw = new TextWidget(ShufflesString' 12);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: subGraphics2D.SetTransform(Affine.NewTranslation(m_BoardX' 350));
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnMouseDown,The following statement contains a magic number: StartX < 13 && StartY < 4 && MomsGame.MoveCard(StartX' StartY)
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnMouseDown,The following statement contains a magic number: StartX < 13 && StartY < 4 && MomsGame.MoveCard(StartX' StartY)
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,Main,The following statement contains a magic number: var systemWindow = new SystemWindow(691' 390);
Magic Number,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,Main,The following statement contains a magic number: var systemWindow = new SystemWindow(691' 390);
Missing Default,MomsSolitaire,MomsSolitaire,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnKeyDown,The following switch statement is missing a default case: switch (KeyEvent.KeyCode)  			{  				case Keys.S:  					DoShuffle(this' null);  					break;    				case Keys.U:  					DoUndo(this' null);  					break;  			}
