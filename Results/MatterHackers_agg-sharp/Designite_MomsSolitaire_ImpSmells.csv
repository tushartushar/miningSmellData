Implementation smell,Namespace,Class,File,Method,Description
Long Method,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The method has 116 lines of code.
Long Parameter List,MomsSolitaire,CMove,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,CMove,The method has 5 parameters. Parameters: x1' y1' x2' y2' MoveIndex
Long Statement,MomsSolitaire,CMomsGame,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,Shuffle,The length of the statement  "				// if you shuffle results in no move available' undo the shuffel and try again.  Rand should change and we will get a new shuffle " is 129.
Long Statement,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The length of the statement  "			RectangleDouble CardBounds = new RectangleDouble(StartX + 1.5' StartY + 1.5' StartX + CARD_WIDTH - 1.5' StartY + CARD_HEIGHT - 1.5); " is 132.
Long Statement,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The length of the statement  "			RoundedRect CardFiledRoundedRect = new RoundedRect(CardBounds.Left' CardBounds.Bottom' CardBounds.Right' CardBounds.Top' 5); " is 124.
Long Statement,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The length of the statement  "				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2)); " is 137.
Long Statement,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The length of the statement  "					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2)); " is 184.
Long Statement,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The length of the statement  "				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2)); " is 167.
Complex Conditional,MomsSolitaire,CMomsGame,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,IsSolved,The conditional expression  "CardIsInOrder(11' 0)  			   && CardIsInOrder(11' 1)  			   && CardIsInOrder(11' 2)  			   && CardIsInOrder(11' 3)"  is complex.
Virtual Method Call from Constructor,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,MomsSolitaire,The constructor "MomsSolitaire" calls a virtual method "AddChild".
Virtual Method Call from Constructor,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,MomsSolitaire,The constructor "MomsSolitaire" calls a virtual method "AddChild".
Virtual Method Call from Constructor,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,MomsSolitaire,The constructor "MomsSolitaire" calls a virtual method "AddChild".
Magic Number,MomsSolitaire,CMomsGame,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,SpaceIsClickable,The following statement contains a magic number: if ((card.GetValue() == (int)CCard.CARD_VALUE.VALUE_ACE)  				&& CardToLeft.GetValue() > 2)  			{  				return true;  			}
Magic Number,MomsSolitaire,CMomsGame,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,CardIsInOrder,The following statement contains a magic number: if (CurCard.GetValue() - (13 - SlotX) == 0)  			{  				// we know the card is in the right place is everything to the left of it  				// in the right place and the same suit  				for (int i = 0; i < SlotX; i++)  				{  					CCard TestCard = GetCard(i' SlotY);  					if (CurCard.GetSuit() != TestCard.GetSuit()  						|| TestCard.GetValue() - (13 - i) != 0)  					{  						return false;  					}  				}    				return true;  			}
Magic Number,MomsSolitaire,CMomsGame,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,CardIsInOrder,The following statement contains a magic number: if (CurCard.GetValue() - (13 - SlotX) == 0)  			{  				// we know the card is in the right place is everything to the left of it  				// in the right place and the same suit  				for (int i = 0; i < SlotX; i++)  				{  					CCard TestCard = GetCard(i' SlotY);  					if (CurCard.GetSuit() != TestCard.GetSuit()  						|| TestCard.GetValue() - (13 - i) != 0)  					{  						return false;  					}  				}    				return true;  			}
Magic Number,MomsSolitaire,CMomsGame,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,MoveCard,The following statement contains a magic number: if (m_WaitingForKing)  			{  				if (CurCard.GetValue() == 13)  				{  					CMove Move = new CMove(0' m_WaitingKingY' SlotX' SlotY' m_NumActionsInGame++);  					SwapCards(Move);  					m_WaitingForKing = false;  					return true;  				}  			}  			else  			{  				// make sure we clicked on a hole  				if (CurCard.GetValue() == 1)  				{  					// figure out what card we want to put here  					if (SlotX == 0)  					{  						// we clicked on a king only slot  						m_WaitingForKing = true;  						m_WaitingKingY = SlotY;  						return true;  					}  					else  					{  						CCard CardToLeft = GetCard(SlotX - 1' SlotY);  						if (CardToLeft.GetValue() < 3)  						{  							return false;  						}  						// find the card that we want to put here  						for (int Y = 0; Y < (int)BoardSize.HEIGHT; Y++)  						{  							for (int X = 0; X < (int)BoardSize.WIDTH; X++)  							{  								CCard CheckCard = GetCard(X' Y);  								if (CheckCard.GetSuit() == CardToLeft.GetSuit()  									&& CheckCard.GetValue() == CardToLeft.GetValue() - 1)  								{  									CMove Move = new CMove(X' Y' SlotX' SlotY' m_NumActionsInGame++);  									SwapCards(Move);  									return true;  								}  							}  						}  					}  				}  			}
Magic Number,MomsSolitaire,CMomsGame,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,MoveCard,The following statement contains a magic number: if (m_WaitingForKing)  			{  				if (CurCard.GetValue() == 13)  				{  					CMove Move = new CMove(0' m_WaitingKingY' SlotX' SlotY' m_NumActionsInGame++);  					SwapCards(Move);  					m_WaitingForKing = false;  					return true;  				}  			}  			else  			{  				// make sure we clicked on a hole  				if (CurCard.GetValue() == 1)  				{  					// figure out what card we want to put here  					if (SlotX == 0)  					{  						// we clicked on a king only slot  						m_WaitingForKing = true;  						m_WaitingKingY = SlotY;  						return true;  					}  					else  					{  						CCard CardToLeft = GetCard(SlotX - 1' SlotY);  						if (CardToLeft.GetValue() < 3)  						{  							return false;  						}  						// find the card that we want to put here  						for (int Y = 0; Y < (int)BoardSize.HEIGHT; Y++)  						{  							for (int X = 0; X < (int)BoardSize.WIDTH; X++)  							{  								CCard CheckCard = GetCard(X' Y);  								if (CheckCard.GetSuit() == CardToLeft.GetSuit()  									&& CheckCard.GetValue() == CardToLeft.GetValue() - 1)  								{  									CMove Move = new CMove(X' Y' SlotX' SlotY' m_NumActionsInGame++);  									SwapCards(Move);  									return true;  								}  							}  						}  					}  				}  			}
Magic Number,MomsSolitaire,CMomsGame,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,Shuffle,The following statement contains a magic number: for (int Y = 0; Y < (int)BoardSize.HEIGHT; Y++)  			{  				for (int X = 0; X < (int)BoardSize.WIDTH; X++)  				{  					if (!CardIsInOrder(X' Y))  					{  						int Tries = 0;  						int OtherX = (int)Rand.Next((int)BoardSize.WIDTH);  						int OtherY = (int)Rand.Next((int)BoardSize.HEIGHT);  						while (CardIsInOrder(OtherX' OtherY) && Tries++ < 100000)  						{  							OtherX = (int)Rand.Next((int)BoardSize.WIDTH);  							OtherY = (int)Rand.Next((int)BoardSize.HEIGHT);  						}    						CMove Move = new CMove(X' Y' OtherX' OtherY' m_NumActionsInGame);  						SwapCards(Move);  					}  				}  			}
Magic Number,MomsSolitaire,CMomsGame,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,IsSolved,The following statement contains a magic number: if (CardIsInOrder(11' 0)  			   && CardIsInOrder(11' 1)  			   && CardIsInOrder(11' 2)  			   && CardIsInOrder(11' 3))  			{  				return true;  			}
Magic Number,MomsSolitaire,CMomsGame,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,IsSolved,The following statement contains a magic number: if (CardIsInOrder(11' 0)  			   && CardIsInOrder(11' 1)  			   && CardIsInOrder(11' 2)  			   && CardIsInOrder(11' 3))  			{  				return true;  			}
Magic Number,MomsSolitaire,CMomsGame,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,IsSolved,The following statement contains a magic number: if (CardIsInOrder(11' 0)  			   && CardIsInOrder(11' 1)  			   && CardIsInOrder(11' 2)  			   && CardIsInOrder(11' 3))  			{  				return true;  			}
Magic Number,MomsSolitaire,CMomsGame,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,IsSolved,The following statement contains a magic number: if (CardIsInOrder(11' 0)  			   && CardIsInOrder(11' 1)  			   && CardIsInOrder(11' 2)  			   && CardIsInOrder(11' 3))  			{  				return true;  			}
Magic Number,MomsSolitaire,CMomsGame,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,IsSolved,The following statement contains a magic number: if (CardIsInOrder(11' 0)  			   && CardIsInOrder(11' 1)  			   && CardIsInOrder(11' 2)  			   && CardIsInOrder(11' 3))  			{  				return true;  			}
Magic Number,MomsSolitaire,CMomsGame,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsGame.cs,IsSolved,The following statement contains a magic number: if (CardIsInOrder(11' 0)  			   && CardIsInOrder(11' 1)  			   && CardIsInOrder(11' 2)  			   && CardIsInOrder(11' 3))  			{  				return true;  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,MomsSolitaire,The following statement contains a magic number: m_ShuffleButton = new Button("Shuffle"' 20' 10);
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,MomsSolitaire,The following statement contains a magic number: m_ShuffleButton = new Button("Shuffle"' 20' 10);
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,MomsSolitaire,The following statement contains a magic number: m_UndoButton = new Button("Undo"' 120' 10);
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,MomsSolitaire,The following statement contains a magic number: m_UndoButton = new Button("Undo"' 120' 10);
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,MomsSolitaire,The following statement contains a magic number: m_NewGameButton = new Button("New Game"' 530' 350);
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,MomsSolitaire,The following statement contains a magic number: m_NewGameButton = new Button("New Game"' 530' 350);
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,MomsSolitaire,The following statement contains a magic number: m_ClubShape = CreatePath(inputString' 0' -1052);
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,MomsSolitaire,The following statement contains a magic number: m_HeartShape = CreatePath(inputString' 0' -1052);
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,MomsSolitaire,The following statement contains a magic number: m_SpadeShape = CreatePath(inputString' 0' -1052);
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetSuitOffset,The following statement contains a magic number: switch (TotalDots)  			{  				case 2:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * CurDot);  					break;    				case 3:  					OffsetX = CARD_WIDTH / 2;  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * CurDot;  					break;    				case 4:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					break;    				case 5:  					if (CurDot < 4)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + 2 * (CARD_HEIGHT / 4 * (CurDot / 2));  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 6:  					OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  					OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					break;    				case 7:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 8:  					if (CurDot < 6)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 4 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 6)  							OffsetY = 3 * CARD_HEIGHT / 8;  						else  							OffsetY = 5 * CARD_HEIGHT / 8;  					}  					break;    				case 9:  					if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						OffsetY = CARD_HEIGHT / 2;  					}  					break;    				case 10:  					if (CurDot == 1)  					{  						OffsetX = CARD_WIDTH / 6 + CARD_WIDTH / 6 * 4;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot == 6)  					{  						OffsetX = CARD_WIDTH / 6;  						OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12 * 3);  					}  					else if (CurDot < 8)  					{  						OffsetX = CARD_WIDTH / 3 + CARD_WIDTH / 3 * (CurDot % 2);  						OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 6 * (CurDot / 2);  					}  					else  					{  						OffsetX = CARD_WIDTH / 2;  						if (CurDot == 9)  							OffsetY = CARD_HEIGHT / 4 + CARD_HEIGHT / 12;  						else  							OffsetY = CARD_HEIGHT - (CARD_HEIGHT / 4 + CARD_HEIGHT / 12);  					}  					break;    				default:  					throw new Exception("11 - 13 are draw custom");  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: RectangleDouble CardBounds = new RectangleDouble(StartX + 1.5' StartY + 1.5' StartX + CARD_WIDTH - 1.5' StartY + CARD_HEIGHT - 1.5);
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: RectangleDouble CardBounds = new RectangleDouble(StartX + 1.5' StartY + 1.5' StartX + CARD_WIDTH - 1.5' StartY + CARD_HEIGHT - 1.5);
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: RectangleDouble CardBounds = new RectangleDouble(StartX + 1.5' StartY + 1.5' StartX + CARD_WIDTH - 1.5' StartY + CARD_HEIGHT - 1.5);
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: RectangleDouble CardBounds = new RectangleDouble(StartX + 1.5' StartY + 1.5' StartX + CARD_WIDTH - 1.5' StartY + CARD_HEIGHT - 1.5);
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: RoundedRect CardFiledRoundedRect = new RoundedRect(CardBounds.Left' CardBounds.Bottom' CardBounds.Right' CardBounds.Top' 5);
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,DrawCard,The following statement contains a magic number: if (CardValue > (int)CCard.CARD_VALUE.VALUE_ACE)  			{  				DestGraphics.SetTransform(Affine.NewIdentity());  				DestGraphics.Render(CardRectBounds' new RGBA_Bytes(0' 0' 0));  				if (CardValue > 10)  				{  					switch (CardValue)  					{  						case 11:  							ValueString = "J";  							break;    						case 12:  							ValueString = "Q";  							break;    						case 13:  							ValueString = "K";  							break;    						default:  							throw new Exception();  					}  				}  				else  				{  					ValueString = CardValue.ToString();  				}    				TextWidget stringToDraw = new TextWidget(ValueString' 10);  				RectangleDouble textBounds = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 2' CardBounds.Top - 8 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 4 - textBounds.Width' CardBounds.Bottom + 9 - textBounds.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				RGBA_Bytes SuitColor = new RGBA_Bytes(0' 0' 0);  				IVertexSource suitPath = new PathStorage();    				switch (CardSuit)  				{  					case (int)CCard.CARD_SUIT.SUIT_DIAMOND:  						{  							SuitColor = new RGBA_Bytes(0xFF' 0x11' 0x11);  							suitPath = m_DiamondShape;  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_CLUB:  						{  							SuitColor = new RGBA_Bytes(0x22' 0x22' 0x66);  							suitPath = new FlattenCurves(m_ClubShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_HEART:  						{  							SuitColor = new RGBA_Bytes(0xBB' 0x00' 0x00);  							suitPath = new FlattenCurves(m_HeartShape);  						}  						break;    					case (int)CCard.CARD_SUIT.SUIT_SPADE:  						{  							SuitColor = new RGBA_Bytes(0x00' 0x00' 0x00);  							suitPath = new FlattenCurves(m_SpadeShape);  						}  						break;    					default:  						break;  				}    				textBounds = stringToDraw.Printer.LocalBounds;    				if (CardValue < 11)  				{  					for (int CurDot = 0; CurDot < CardValue; CurDot++)  					{  						double OffsetX = 0' OffsetY = 0;  						GetSuitOffset(ref OffsetX' ref OffsetY' CurDot' (int)CardValue);  						DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + OffsetX' CardBounds.Bottom + OffsetY));  						DestGraphics.Render(suitPath' SuitColor);  					}  				}  				else  				{  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + 9' CardBounds.Bottom + 17));  					DestGraphics.Render(suitPath' SuitColor);  					DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Right - 9' CardBounds.Top - 17));  					DestGraphics.Render(suitPath' SuitColor);    					stringToDraw = new TextWidget(ValueString' 22);  					textBounds = stringToDraw.Printer.LocalBounds;  					DestGraphics.SetTransform(Affine.NewTranslation(-1 + CardBounds.Left + CardBounds.Width / 2 - textBounds.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - textBounds.Height / 2));  					DestGraphics.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}  			}  			else  			{  				RGBA_Bytes HoleColor = new RGBA_Bytes(0' 0' 0);    				String OpenSpaceString;    				if (!MomsGame.SpaceIsClickable(CardX' CardY))  				{  					HoleColor = new RGBA_Bytes(0xf8' 0xe2' 0xe8);  					OpenSpaceString = "X";  				}  				else  				{  					HoleColor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);  					OpenSpaceString = "O";  				}    				TextWidget stringToDraw = new TextWidget(OpenSpaceString' 35);  				RectangleDouble Size = stringToDraw.Printer.LocalBounds;  				DestGraphics.SetTransform(Affine.NewTranslation(CardBounds.Left + CardBounds.Width / 2 - Size.Width / 2' CardBounds.Bottom + CardBounds.Height / 2 - Size.Height / 2));  				DestGraphics.Render(stringToDraw.Printer' HoleColor);  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: {  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());  				Graphics2D subGraphics2D = widgetsSubImage.NewGraphics2D();    				subGraphics2D.Clear(new RGBA_Bytes(255' 255' 255));  				for (int y = 0; y < MomsGame.GetHeight(); y++)  				{  					for (int x = 0; x < MomsGame.GetWidth(); x++)  					{  						DrawCard(subGraphics2D' x' y);  					}  				}    				String whatToDo = "Select any open space marked with an 'O'";  				RGBA_Bytes backFillCollor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);    				if (MomsGame.GetWaitingForKing())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "Select a King for the hole";  				}  				else if (MomsGame.IsSolved())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "You win!";  				}  				else if (!MomsGame.MoveAvailable())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "No more moves! Shuffle to continue.";  				}    				if (whatToDo != null)  				{  					TextWidget stringToDraw = new TextWidget(whatToDo' 12);  					RectangleDouble Size = stringToDraw.Printer.LocalBounds;  					double TextX = m_BoardX + CARD_WIDTH * 4;  					double TextY = m_BoardY - 34;  					RoundedRect BackFill = new RoundedRect(Size.Left - 6' Size.Bottom - 3' Size.Right + 6' Size.Top + 6' 3);  					Stroke BackBorder = new Stroke(BackFill);  					BackBorder.width(2);    					subGraphics2D.SetTransform(Affine.NewTranslation(TextX' TextY));  					subGraphics2D.Render(BackFill' backFillCollor);  					subGraphics2D.Render(BackBorder' new RGBA_Bytes(0' 0' 0));  					subGraphics2D.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}    				String ShufflesString;  				ShufflesString = "Number of shuffles so far = ";  				ShufflesString += MomsGame.GetNumShuffles().ToString();    				TextWidget shuffelStringToDraw = new TextWidget(ShufflesString' 12);  				subGraphics2D.SetTransform(Affine.NewTranslation(m_BoardX' 350));  				subGraphics2D.Render(shuffelStringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				subGraphics2D.SetTransform(Affine.NewIdentity());  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: {  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());  				Graphics2D subGraphics2D = widgetsSubImage.NewGraphics2D();    				subGraphics2D.Clear(new RGBA_Bytes(255' 255' 255));  				for (int y = 0; y < MomsGame.GetHeight(); y++)  				{  					for (int x = 0; x < MomsGame.GetWidth(); x++)  					{  						DrawCard(subGraphics2D' x' y);  					}  				}    				String whatToDo = "Select any open space marked with an 'O'";  				RGBA_Bytes backFillCollor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);    				if (MomsGame.GetWaitingForKing())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "Select a King for the hole";  				}  				else if (MomsGame.IsSolved())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "You win!";  				}  				else if (!MomsGame.MoveAvailable())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "No more moves! Shuffle to continue.";  				}    				if (whatToDo != null)  				{  					TextWidget stringToDraw = new TextWidget(whatToDo' 12);  					RectangleDouble Size = stringToDraw.Printer.LocalBounds;  					double TextX = m_BoardX + CARD_WIDTH * 4;  					double TextY = m_BoardY - 34;  					RoundedRect BackFill = new RoundedRect(Size.Left - 6' Size.Bottom - 3' Size.Right + 6' Size.Top + 6' 3);  					Stroke BackBorder = new Stroke(BackFill);  					BackBorder.width(2);    					subGraphics2D.SetTransform(Affine.NewTranslation(TextX' TextY));  					subGraphics2D.Render(BackFill' backFillCollor);  					subGraphics2D.Render(BackBorder' new RGBA_Bytes(0' 0' 0));  					subGraphics2D.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}    				String ShufflesString;  				ShufflesString = "Number of shuffles so far = ";  				ShufflesString += MomsGame.GetNumShuffles().ToString();    				TextWidget shuffelStringToDraw = new TextWidget(ShufflesString' 12);  				subGraphics2D.SetTransform(Affine.NewTranslation(m_BoardX' 350));  				subGraphics2D.Render(shuffelStringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				subGraphics2D.SetTransform(Affine.NewIdentity());  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: {  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());  				Graphics2D subGraphics2D = widgetsSubImage.NewGraphics2D();    				subGraphics2D.Clear(new RGBA_Bytes(255' 255' 255));  				for (int y = 0; y < MomsGame.GetHeight(); y++)  				{  					for (int x = 0; x < MomsGame.GetWidth(); x++)  					{  						DrawCard(subGraphics2D' x' y);  					}  				}    				String whatToDo = "Select any open space marked with an 'O'";  				RGBA_Bytes backFillCollor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);    				if (MomsGame.GetWaitingForKing())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "Select a King for the hole";  				}  				else if (MomsGame.IsSolved())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "You win!";  				}  				else if (!MomsGame.MoveAvailable())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "No more moves! Shuffle to continue.";  				}    				if (whatToDo != null)  				{  					TextWidget stringToDraw = new TextWidget(whatToDo' 12);  					RectangleDouble Size = stringToDraw.Printer.LocalBounds;  					double TextX = m_BoardX + CARD_WIDTH * 4;  					double TextY = m_BoardY - 34;  					RoundedRect BackFill = new RoundedRect(Size.Left - 6' Size.Bottom - 3' Size.Right + 6' Size.Top + 6' 3);  					Stroke BackBorder = new Stroke(BackFill);  					BackBorder.width(2);    					subGraphics2D.SetTransform(Affine.NewTranslation(TextX' TextY));  					subGraphics2D.Render(BackFill' backFillCollor);  					subGraphics2D.Render(BackBorder' new RGBA_Bytes(0' 0' 0));  					subGraphics2D.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}    				String ShufflesString;  				ShufflesString = "Number of shuffles so far = ";  				ShufflesString += MomsGame.GetNumShuffles().ToString();    				TextWidget shuffelStringToDraw = new TextWidget(ShufflesString' 12);  				subGraphics2D.SetTransform(Affine.NewTranslation(m_BoardX' 350));  				subGraphics2D.Render(shuffelStringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				subGraphics2D.SetTransform(Affine.NewIdentity());  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: {  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());  				Graphics2D subGraphics2D = widgetsSubImage.NewGraphics2D();    				subGraphics2D.Clear(new RGBA_Bytes(255' 255' 255));  				for (int y = 0; y < MomsGame.GetHeight(); y++)  				{  					for (int x = 0; x < MomsGame.GetWidth(); x++)  					{  						DrawCard(subGraphics2D' x' y);  					}  				}    				String whatToDo = "Select any open space marked with an 'O'";  				RGBA_Bytes backFillCollor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);    				if (MomsGame.GetWaitingForKing())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "Select a King for the hole";  				}  				else if (MomsGame.IsSolved())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "You win!";  				}  				else if (!MomsGame.MoveAvailable())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "No more moves! Shuffle to continue.";  				}    				if (whatToDo != null)  				{  					TextWidget stringToDraw = new TextWidget(whatToDo' 12);  					RectangleDouble Size = stringToDraw.Printer.LocalBounds;  					double TextX = m_BoardX + CARD_WIDTH * 4;  					double TextY = m_BoardY - 34;  					RoundedRect BackFill = new RoundedRect(Size.Left - 6' Size.Bottom - 3' Size.Right + 6' Size.Top + 6' 3);  					Stroke BackBorder = new Stroke(BackFill);  					BackBorder.width(2);    					subGraphics2D.SetTransform(Affine.NewTranslation(TextX' TextY));  					subGraphics2D.Render(BackFill' backFillCollor);  					subGraphics2D.Render(BackBorder' new RGBA_Bytes(0' 0' 0));  					subGraphics2D.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}    				String ShufflesString;  				ShufflesString = "Number of shuffles so far = ";  				ShufflesString += MomsGame.GetNumShuffles().ToString();    				TextWidget shuffelStringToDraw = new TextWidget(ShufflesString' 12);  				subGraphics2D.SetTransform(Affine.NewTranslation(m_BoardX' 350));  				subGraphics2D.Render(shuffelStringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				subGraphics2D.SetTransform(Affine.NewIdentity());  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: {  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());  				Graphics2D subGraphics2D = widgetsSubImage.NewGraphics2D();    				subGraphics2D.Clear(new RGBA_Bytes(255' 255' 255));  				for (int y = 0; y < MomsGame.GetHeight(); y++)  				{  					for (int x = 0; x < MomsGame.GetWidth(); x++)  					{  						DrawCard(subGraphics2D' x' y);  					}  				}    				String whatToDo = "Select any open space marked with an 'O'";  				RGBA_Bytes backFillCollor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);    				if (MomsGame.GetWaitingForKing())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "Select a King for the hole";  				}  				else if (MomsGame.IsSolved())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "You win!";  				}  				else if (!MomsGame.MoveAvailable())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "No more moves! Shuffle to continue.";  				}    				if (whatToDo != null)  				{  					TextWidget stringToDraw = new TextWidget(whatToDo' 12);  					RectangleDouble Size = stringToDraw.Printer.LocalBounds;  					double TextX = m_BoardX + CARD_WIDTH * 4;  					double TextY = m_BoardY - 34;  					RoundedRect BackFill = new RoundedRect(Size.Left - 6' Size.Bottom - 3' Size.Right + 6' Size.Top + 6' 3);  					Stroke BackBorder = new Stroke(BackFill);  					BackBorder.width(2);    					subGraphics2D.SetTransform(Affine.NewTranslation(TextX' TextY));  					subGraphics2D.Render(BackFill' backFillCollor);  					subGraphics2D.Render(BackBorder' new RGBA_Bytes(0' 0' 0));  					subGraphics2D.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}    				String ShufflesString;  				ShufflesString = "Number of shuffles so far = ";  				ShufflesString += MomsGame.GetNumShuffles().ToString();    				TextWidget shuffelStringToDraw = new TextWidget(ShufflesString' 12);  				subGraphics2D.SetTransform(Affine.NewTranslation(m_BoardX' 350));  				subGraphics2D.Render(shuffelStringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				subGraphics2D.SetTransform(Affine.NewIdentity());  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: {  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());  				Graphics2D subGraphics2D = widgetsSubImage.NewGraphics2D();    				subGraphics2D.Clear(new RGBA_Bytes(255' 255' 255));  				for (int y = 0; y < MomsGame.GetHeight(); y++)  				{  					for (int x = 0; x < MomsGame.GetWidth(); x++)  					{  						DrawCard(subGraphics2D' x' y);  					}  				}    				String whatToDo = "Select any open space marked with an 'O'";  				RGBA_Bytes backFillCollor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);    				if (MomsGame.GetWaitingForKing())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "Select a King for the hole";  				}  				else if (MomsGame.IsSolved())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "You win!";  				}  				else if (!MomsGame.MoveAvailable())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "No more moves! Shuffle to continue.";  				}    				if (whatToDo != null)  				{  					TextWidget stringToDraw = new TextWidget(whatToDo' 12);  					RectangleDouble Size = stringToDraw.Printer.LocalBounds;  					double TextX = m_BoardX + CARD_WIDTH * 4;  					double TextY = m_BoardY - 34;  					RoundedRect BackFill = new RoundedRect(Size.Left - 6' Size.Bottom - 3' Size.Right + 6' Size.Top + 6' 3);  					Stroke BackBorder = new Stroke(BackFill);  					BackBorder.width(2);    					subGraphics2D.SetTransform(Affine.NewTranslation(TextX' TextY));  					subGraphics2D.Render(BackFill' backFillCollor);  					subGraphics2D.Render(BackBorder' new RGBA_Bytes(0' 0' 0));  					subGraphics2D.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}    				String ShufflesString;  				ShufflesString = "Number of shuffles so far = ";  				ShufflesString += MomsGame.GetNumShuffles().ToString();    				TextWidget shuffelStringToDraw = new TextWidget(ShufflesString' 12);  				subGraphics2D.SetTransform(Affine.NewTranslation(m_BoardX' 350));  				subGraphics2D.Render(shuffelStringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				subGraphics2D.SetTransform(Affine.NewIdentity());  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: {  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());  				Graphics2D subGraphics2D = widgetsSubImage.NewGraphics2D();    				subGraphics2D.Clear(new RGBA_Bytes(255' 255' 255));  				for (int y = 0; y < MomsGame.GetHeight(); y++)  				{  					for (int x = 0; x < MomsGame.GetWidth(); x++)  					{  						DrawCard(subGraphics2D' x' y);  					}  				}    				String whatToDo = "Select any open space marked with an 'O'";  				RGBA_Bytes backFillCollor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);    				if (MomsGame.GetWaitingForKing())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "Select a King for the hole";  				}  				else if (MomsGame.IsSolved())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "You win!";  				}  				else if (!MomsGame.MoveAvailable())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "No more moves! Shuffle to continue.";  				}    				if (whatToDo != null)  				{  					TextWidget stringToDraw = new TextWidget(whatToDo' 12);  					RectangleDouble Size = stringToDraw.Printer.LocalBounds;  					double TextX = m_BoardX + CARD_WIDTH * 4;  					double TextY = m_BoardY - 34;  					RoundedRect BackFill = new RoundedRect(Size.Left - 6' Size.Bottom - 3' Size.Right + 6' Size.Top + 6' 3);  					Stroke BackBorder = new Stroke(BackFill);  					BackBorder.width(2);    					subGraphics2D.SetTransform(Affine.NewTranslation(TextX' TextY));  					subGraphics2D.Render(BackFill' backFillCollor);  					subGraphics2D.Render(BackBorder' new RGBA_Bytes(0' 0' 0));  					subGraphics2D.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}    				String ShufflesString;  				ShufflesString = "Number of shuffles so far = ";  				ShufflesString += MomsGame.GetNumShuffles().ToString();    				TextWidget shuffelStringToDraw = new TextWidget(ShufflesString' 12);  				subGraphics2D.SetTransform(Affine.NewTranslation(m_BoardX' 350));  				subGraphics2D.Render(shuffelStringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				subGraphics2D.SetTransform(Affine.NewIdentity());  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: {  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());  				Graphics2D subGraphics2D = widgetsSubImage.NewGraphics2D();    				subGraphics2D.Clear(new RGBA_Bytes(255' 255' 255));  				for (int y = 0; y < MomsGame.GetHeight(); y++)  				{  					for (int x = 0; x < MomsGame.GetWidth(); x++)  					{  						DrawCard(subGraphics2D' x' y);  					}  				}    				String whatToDo = "Select any open space marked with an 'O'";  				RGBA_Bytes backFillCollor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);    				if (MomsGame.GetWaitingForKing())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "Select a King for the hole";  				}  				else if (MomsGame.IsSolved())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "You win!";  				}  				else if (!MomsGame.MoveAvailable())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "No more moves! Shuffle to continue.";  				}    				if (whatToDo != null)  				{  					TextWidget stringToDraw = new TextWidget(whatToDo' 12);  					RectangleDouble Size = stringToDraw.Printer.LocalBounds;  					double TextX = m_BoardX + CARD_WIDTH * 4;  					double TextY = m_BoardY - 34;  					RoundedRect BackFill = new RoundedRect(Size.Left - 6' Size.Bottom - 3' Size.Right + 6' Size.Top + 6' 3);  					Stroke BackBorder = new Stroke(BackFill);  					BackBorder.width(2);    					subGraphics2D.SetTransform(Affine.NewTranslation(TextX' TextY));  					subGraphics2D.Render(BackFill' backFillCollor);  					subGraphics2D.Render(BackBorder' new RGBA_Bytes(0' 0' 0));  					subGraphics2D.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}    				String ShufflesString;  				ShufflesString = "Number of shuffles so far = ";  				ShufflesString += MomsGame.GetNumShuffles().ToString();    				TextWidget shuffelStringToDraw = new TextWidget(ShufflesString' 12);  				subGraphics2D.SetTransform(Affine.NewTranslation(m_BoardX' 350));  				subGraphics2D.Render(shuffelStringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				subGraphics2D.SetTransform(Affine.NewIdentity());  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: {  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());  				Graphics2D subGraphics2D = widgetsSubImage.NewGraphics2D();    				subGraphics2D.Clear(new RGBA_Bytes(255' 255' 255));  				for (int y = 0; y < MomsGame.GetHeight(); y++)  				{  					for (int x = 0; x < MomsGame.GetWidth(); x++)  					{  						DrawCard(subGraphics2D' x' y);  					}  				}    				String whatToDo = "Select any open space marked with an 'O'";  				RGBA_Bytes backFillCollor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);    				if (MomsGame.GetWaitingForKing())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "Select a King for the hole";  				}  				else if (MomsGame.IsSolved())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "You win!";  				}  				else if (!MomsGame.MoveAvailable())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "No more moves! Shuffle to continue.";  				}    				if (whatToDo != null)  				{  					TextWidget stringToDraw = new TextWidget(whatToDo' 12);  					RectangleDouble Size = stringToDraw.Printer.LocalBounds;  					double TextX = m_BoardX + CARD_WIDTH * 4;  					double TextY = m_BoardY - 34;  					RoundedRect BackFill = new RoundedRect(Size.Left - 6' Size.Bottom - 3' Size.Right + 6' Size.Top + 6' 3);  					Stroke BackBorder = new Stroke(BackFill);  					BackBorder.width(2);    					subGraphics2D.SetTransform(Affine.NewTranslation(TextX' TextY));  					subGraphics2D.Render(BackFill' backFillCollor);  					subGraphics2D.Render(BackBorder' new RGBA_Bytes(0' 0' 0));  					subGraphics2D.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}    				String ShufflesString;  				ShufflesString = "Number of shuffles so far = ";  				ShufflesString += MomsGame.GetNumShuffles().ToString();    				TextWidget shuffelStringToDraw = new TextWidget(ShufflesString' 12);  				subGraphics2D.SetTransform(Affine.NewTranslation(m_BoardX' 350));  				subGraphics2D.Render(shuffelStringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				subGraphics2D.SetTransform(Affine.NewIdentity());  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: {  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());  				Graphics2D subGraphics2D = widgetsSubImage.NewGraphics2D();    				subGraphics2D.Clear(new RGBA_Bytes(255' 255' 255));  				for (int y = 0; y < MomsGame.GetHeight(); y++)  				{  					for (int x = 0; x < MomsGame.GetWidth(); x++)  					{  						DrawCard(subGraphics2D' x' y);  					}  				}    				String whatToDo = "Select any open space marked with an 'O'";  				RGBA_Bytes backFillCollor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);    				if (MomsGame.GetWaitingForKing())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "Select a King for the hole";  				}  				else if (MomsGame.IsSolved())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "You win!";  				}  				else if (!MomsGame.MoveAvailable())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "No more moves! Shuffle to continue.";  				}    				if (whatToDo != null)  				{  					TextWidget stringToDraw = new TextWidget(whatToDo' 12);  					RectangleDouble Size = stringToDraw.Printer.LocalBounds;  					double TextX = m_BoardX + CARD_WIDTH * 4;  					double TextY = m_BoardY - 34;  					RoundedRect BackFill = new RoundedRect(Size.Left - 6' Size.Bottom - 3' Size.Right + 6' Size.Top + 6' 3);  					Stroke BackBorder = new Stroke(BackFill);  					BackBorder.width(2);    					subGraphics2D.SetTransform(Affine.NewTranslation(TextX' TextY));  					subGraphics2D.Render(BackFill' backFillCollor);  					subGraphics2D.Render(BackBorder' new RGBA_Bytes(0' 0' 0));  					subGraphics2D.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}    				String ShufflesString;  				ShufflesString = "Number of shuffles so far = ";  				ShufflesString += MomsGame.GetNumShuffles().ToString();    				TextWidget shuffelStringToDraw = new TextWidget(ShufflesString' 12);  				subGraphics2D.SetTransform(Affine.NewTranslation(m_BoardX' 350));  				subGraphics2D.Render(shuffelStringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				subGraphics2D.SetTransform(Affine.NewIdentity());  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: {  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());  				Graphics2D subGraphics2D = widgetsSubImage.NewGraphics2D();    				subGraphics2D.Clear(new RGBA_Bytes(255' 255' 255));  				for (int y = 0; y < MomsGame.GetHeight(); y++)  				{  					for (int x = 0; x < MomsGame.GetWidth(); x++)  					{  						DrawCard(subGraphics2D' x' y);  					}  				}    				String whatToDo = "Select any open space marked with an 'O'";  				RGBA_Bytes backFillCollor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);    				if (MomsGame.GetWaitingForKing())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "Select a King for the hole";  				}  				else if (MomsGame.IsSolved())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "You win!";  				}  				else if (!MomsGame.MoveAvailable())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "No more moves! Shuffle to continue.";  				}    				if (whatToDo != null)  				{  					TextWidget stringToDraw = new TextWidget(whatToDo' 12);  					RectangleDouble Size = stringToDraw.Printer.LocalBounds;  					double TextX = m_BoardX + CARD_WIDTH * 4;  					double TextY = m_BoardY - 34;  					RoundedRect BackFill = new RoundedRect(Size.Left - 6' Size.Bottom - 3' Size.Right + 6' Size.Top + 6' 3);  					Stroke BackBorder = new Stroke(BackFill);  					BackBorder.width(2);    					subGraphics2D.SetTransform(Affine.NewTranslation(TextX' TextY));  					subGraphics2D.Render(BackFill' backFillCollor);  					subGraphics2D.Render(BackBorder' new RGBA_Bytes(0' 0' 0));  					subGraphics2D.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}    				String ShufflesString;  				ShufflesString = "Number of shuffles so far = ";  				ShufflesString += MomsGame.GetNumShuffles().ToString();    				TextWidget shuffelStringToDraw = new TextWidget(ShufflesString' 12);  				subGraphics2D.SetTransform(Affine.NewTranslation(m_BoardX' 350));  				subGraphics2D.Render(shuffelStringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				subGraphics2D.SetTransform(Affine.NewIdentity());  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: {  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());  				Graphics2D subGraphics2D = widgetsSubImage.NewGraphics2D();    				subGraphics2D.Clear(new RGBA_Bytes(255' 255' 255));  				for (int y = 0; y < MomsGame.GetHeight(); y++)  				{  					for (int x = 0; x < MomsGame.GetWidth(); x++)  					{  						DrawCard(subGraphics2D' x' y);  					}  				}    				String whatToDo = "Select any open space marked with an 'O'";  				RGBA_Bytes backFillCollor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);    				if (MomsGame.GetWaitingForKing())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "Select a King for the hole";  				}  				else if (MomsGame.IsSolved())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "You win!";  				}  				else if (!MomsGame.MoveAvailable())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "No more moves! Shuffle to continue.";  				}    				if (whatToDo != null)  				{  					TextWidget stringToDraw = new TextWidget(whatToDo' 12);  					RectangleDouble Size = stringToDraw.Printer.LocalBounds;  					double TextX = m_BoardX + CARD_WIDTH * 4;  					double TextY = m_BoardY - 34;  					RoundedRect BackFill = new RoundedRect(Size.Left - 6' Size.Bottom - 3' Size.Right + 6' Size.Top + 6' 3);  					Stroke BackBorder = new Stroke(BackFill);  					BackBorder.width(2);    					subGraphics2D.SetTransform(Affine.NewTranslation(TextX' TextY));  					subGraphics2D.Render(BackFill' backFillCollor);  					subGraphics2D.Render(BackBorder' new RGBA_Bytes(0' 0' 0));  					subGraphics2D.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}    				String ShufflesString;  				ShufflesString = "Number of shuffles so far = ";  				ShufflesString += MomsGame.GetNumShuffles().ToString();    				TextWidget shuffelStringToDraw = new TextWidget(ShufflesString' 12);  				subGraphics2D.SetTransform(Affine.NewTranslation(m_BoardX' 350));  				subGraphics2D.Render(shuffelStringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				subGraphics2D.SetTransform(Affine.NewIdentity());  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: {  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());  				Graphics2D subGraphics2D = widgetsSubImage.NewGraphics2D();    				subGraphics2D.Clear(new RGBA_Bytes(255' 255' 255));  				for (int y = 0; y < MomsGame.GetHeight(); y++)  				{  					for (int x = 0; x < MomsGame.GetWidth(); x++)  					{  						DrawCard(subGraphics2D' x' y);  					}  				}    				String whatToDo = "Select any open space marked with an 'O'";  				RGBA_Bytes backFillCollor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);    				if (MomsGame.GetWaitingForKing())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "Select a King for the hole";  				}  				else if (MomsGame.IsSolved())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "You win!";  				}  				else if (!MomsGame.MoveAvailable())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "No more moves! Shuffle to continue.";  				}    				if (whatToDo != null)  				{  					TextWidget stringToDraw = new TextWidget(whatToDo' 12);  					RectangleDouble Size = stringToDraw.Printer.LocalBounds;  					double TextX = m_BoardX + CARD_WIDTH * 4;  					double TextY = m_BoardY - 34;  					RoundedRect BackFill = new RoundedRect(Size.Left - 6' Size.Bottom - 3' Size.Right + 6' Size.Top + 6' 3);  					Stroke BackBorder = new Stroke(BackFill);  					BackBorder.width(2);    					subGraphics2D.SetTransform(Affine.NewTranslation(TextX' TextY));  					subGraphics2D.Render(BackFill' backFillCollor);  					subGraphics2D.Render(BackBorder' new RGBA_Bytes(0' 0' 0));  					subGraphics2D.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}    				String ShufflesString;  				ShufflesString = "Number of shuffles so far = ";  				ShufflesString += MomsGame.GetNumShuffles().ToString();    				TextWidget shuffelStringToDraw = new TextWidget(ShufflesString' 12);  				subGraphics2D.SetTransform(Affine.NewTranslation(m_BoardX' 350));  				subGraphics2D.Render(shuffelStringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				subGraphics2D.SetTransform(Affine.NewIdentity());  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnDraw,The following statement contains a magic number: {  				ImageBuffer widgetsSubImage = ImageBuffer.NewSubImageReference(graphics2D.DestImage' graphics2D.GetClippingRect());  				Graphics2D subGraphics2D = widgetsSubImage.NewGraphics2D();    				subGraphics2D.Clear(new RGBA_Bytes(255' 255' 255));  				for (int y = 0; y < MomsGame.GetHeight(); y++)  				{  					for (int x = 0; x < MomsGame.GetWidth(); x++)  					{  						DrawCard(subGraphics2D' x' y);  					}  				}    				String whatToDo = "Select any open space marked with an 'O'";  				RGBA_Bytes backFillCollor = new RGBA_Bytes(0xe1' 0xe0' 0xf6);    				if (MomsGame.GetWaitingForKing())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "Select a King for the hole";  				}  				else if (MomsGame.IsSolved())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "You win!";  				}  				else if (!MomsGame.MoveAvailable())  				{  					backFillCollor = new RGBA_Bytes(0xf8' 0x89' 0x78);  					whatToDo = "No more moves! Shuffle to continue.";  				}    				if (whatToDo != null)  				{  					TextWidget stringToDraw = new TextWidget(whatToDo' 12);  					RectangleDouble Size = stringToDraw.Printer.LocalBounds;  					double TextX = m_BoardX + CARD_WIDTH * 4;  					double TextY = m_BoardY - 34;  					RoundedRect BackFill = new RoundedRect(Size.Left - 6' Size.Bottom - 3' Size.Right + 6' Size.Top + 6' 3);  					Stroke BackBorder = new Stroke(BackFill);  					BackBorder.width(2);    					subGraphics2D.SetTransform(Affine.NewTranslation(TextX' TextY));  					subGraphics2D.Render(BackFill' backFillCollor);  					subGraphics2D.Render(BackBorder' new RGBA_Bytes(0' 0' 0));  					subGraphics2D.Render(stringToDraw.Printer' new RGBA_Bytes(0' 0' 0));  				}    				String ShufflesString;  				ShufflesString = "Number of shuffles so far = ";  				ShufflesString += MomsGame.GetNumShuffles().ToString();    				TextWidget shuffelStringToDraw = new TextWidget(ShufflesString' 12);  				subGraphics2D.SetTransform(Affine.NewTranslation(m_BoardX' 350));  				subGraphics2D.Render(shuffelStringToDraw.Printer' new RGBA_Bytes(0' 0' 0));    				subGraphics2D.SetTransform(Affine.NewIdentity());  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnMouseDown,The following statement contains a magic number: if (MouseCaptured)  			{  				int StartX = (int)((mouseEvent.X - m_BoardX) / CARD_WIDTH);  				int StartY = (int)((mouseEvent.Y - m_BoardY) / CARD_HEIGHT);  				if (StartX < 13 && StartY < 4 && MomsGame.MoveCard(StartX' StartY))  				{  					Invalidate();  				}  			}
Magic Number,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnMouseDown,The following statement contains a magic number: if (MouseCaptured)  			{  				int StartX = (int)((mouseEvent.X - m_BoardX) / CARD_WIDTH);  				int StartY = (int)((mouseEvent.Y - m_BoardY) / CARD_HEIGHT);  				if (StartX < 13 && StartY < 4 && MomsGame.MoveCard(StartX' StartY))  				{  					Invalidate();  				}  			}
Magic Number,MomsSolitaire,MomsSolitaireFactory,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetAppParameters,The following statement contains a magic number: AppWidgetInfo appWidgetInfo = new AppWidgetInfo(  			"Game"'  			"Moms Solitaire"'  			"A port of the Forth solitaire game that my cousin Marlin Eller wrote for his mom on mothers day in 1989."'  			691'  			390);
Magic Number,MomsSolitaire,MomsSolitaireFactory,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,GetAppParameters,The following statement contains a magic number: AppWidgetInfo appWidgetInfo = new AppWidgetInfo(  			"Game"'  			"Moms Solitaire"'  			"A port of the Forth solitaire game that my cousin Marlin Eller wrote for his mom on mothers day in 1989."'  			691'  			390);
Missing Default,MomsSolitaire,MomsSolitaire,C:\repos\MatterHackers_agg-sharp\examples\MomsSolitaire\MomsSolitaire.cs,OnKeyDown,The following switch statement is missing a default case: switch (KeyEvent.KeyCode)  			{  				case Keys.S:  					DoShuffle(this' null);  					break;    				case Keys.U:  					DoUndo(this' null);  					break;  			}
