Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MatterHackers.DataConverters3D,VertexSourceToMesh,C:\repos\MatterHackers_agg-sharp\DataConverters3D\VertexSourceToMesh.cs,Extrude,Cyclomatic complexity of the method is 8
Long Statement,MatterHackers.DataConverters3D,CsgToRayTraceable,C:\repos\MatterHackers_agg-sharp\DataConverters3D\CsgToRayTraceable.cs,GetIPrimitiveRecursive,The length of the statement  "			return new Transform(GetIPrimitiveRecursive((dynamic)objectToProcess.ObjectToTransform)' objectToProcess.ActiveTransform); " is 122.
Long Statement,MatterHackers.DataConverters3D,CsgToRayTraceable,C:\repos\MatterHackers_agg-sharp\DataConverters3D\CsgToRayTraceable.cs,GetIPrimitiveRecursive,The length of the statement  "			return new MatterHackers.RayTracer.Traceable.Difference(GetIPrimitiveRecursive((dynamic)objectToProcess.Primary)' BoundingVolumeHierarchy.CreateNewHierachy(subtractItems)); " is 172.
Long Statement,MatterHackers.DataConverters3D,CsgToRayTraceable,C:\repos\MatterHackers_agg-sharp\DataConverters3D\CsgToRayTraceable.cs,GetIPrimitiveRecursive,The length of the statement  "			//return ApplyIndent("intersection()" + AddNameAsComment(objectToProcess) + "\n{\n" + GetRayTraceableRecursive((dynamic)objectToProcess.a' level + 1) + "\n" + GetRayTraceableRecursive((dynamic)objectToProcess.b' level + 1) + "\n}"' level); " is 239.
Long Statement,MatterHackers.DataConverters3D,VertexSourceToMesh,C:\repos\MatterHackers_agg-sharp\DataConverters3D\VertexSourceToMesh.cs,AddRevolveStrip,The length of the statement  "					Vertex lastStart = mesh.CreateVertex(Vector3.Transform(lastPosition' Matrix4X4.CreateRotationZ(startAngle))' createOption' sortOption); " is 135.
Long Statement,MatterHackers.DataConverters3D,VertexSourceToMesh,C:\repos\MatterHackers_agg-sharp\DataConverters3D\VertexSourceToMesh.cs,AddRevolveStrip,The length of the statement  "					Vertex lastEnd = mesh.CreateVertex(Vector3.Transform(lastPosition' Matrix4X4.CreateRotationZ(endAngle))' createOption' sortOption); " is 131.
Long Statement,MatterHackers.DataConverters3D,VertexSourceToMesh,C:\repos\MatterHackers_agg-sharp\DataConverters3D\VertexSourceToMesh.cs,AddRevolveStrip,The length of the statement  "					Vertex currentStart = mesh.CreateVertex(Vector3.Transform(currentPosition' Matrix4X4.CreateRotationZ(startAngle))' createOption' sortOption); " is 141.
Long Statement,MatterHackers.DataConverters3D,VertexSourceToMesh,C:\repos\MatterHackers_agg-sharp\DataConverters3D\VertexSourceToMesh.cs,AddRevolveStrip,The length of the statement  "					Vertex currentEnd = mesh.CreateVertex(Vector3.Transform(currentPosition' Matrix4X4.CreateRotationZ(endAngle))' createOption' sortOption); " is 137.
Magic Number,MatterHackers.DataConverters3D,CsgToRayTraceable,C:\repos\MatterHackers_agg-sharp\DataConverters3D\CsgToRayTraceable.cs,ApplyIndent,The following statement contains a magic number: if (level > 0)  			{  				StringBuilder final = new StringBuilder();    				string[] splitOnReturn = source.Split('\n');  				for (int i = 0; i < splitOnReturn.Length; i++)  				{  					final.Append(Spaces(4));  					final.Append(splitOnReturn[i]);  					if (i < splitOnReturn.Length - 1)  					{  						final.Append('\n');  					}  				}    				return final.ToString();  			}
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,Convert,The following statement contains a magic number: if (partMaterial == null)  			{  				partMaterial = new SolidMaterial(new RGBA_Floats(.9' .2' .1)' .01' 0.0' 2.0);  			}
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,Convert,The following statement contains a magic number: if (partMaterial == null)  			{  				partMaterial = new SolidMaterial(new RGBA_Floats(.9' .2' .1)' .01' 0.0' 2.0);  			}
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,Convert,The following statement contains a magic number: if (partMaterial == null)  			{  				partMaterial = new SolidMaterial(new RGBA_Floats(.9' .2' .1)' .01' 0.0' 2.0);  			}
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,Convert,The following statement contains a magic number: if (partMaterial == null)  			{  				partMaterial = new SolidMaterial(new RGBA_Floats(.9' .2' .1)' .01' 0.0' 2.0);  			}
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,Convert,The following statement contains a magic number: if (partMaterial == null)  			{  				partMaterial = new SolidMaterial(new RGBA_Floats(.9' .2' .1)' .01' 0.0' 2.0);  			}
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,Convert,The following statement contains a magic number: Vector3[] triangle = new Vector3[3];
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,Convert,The following statement contains a magic number: foreach (PolygonMesh.Face face in simpleMesh.Faces)  			{  				foreach (PolygonMesh.Vertex vertex in face.Vertices())  				{  					triangle[index++] = vertex.Position;  					if (index == 3)  					{  						index = 0;  						renderCollection.Add(new TriangleShape(triangle[0]' triangle[1]' triangle[2]' partMaterial));  					}  				}  			}
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,Convert,The following statement contains a magic number: foreach (PolygonMesh.Face face in simpleMesh.Faces)  			{  				foreach (PolygonMesh.Vertex vertex in face.Vertices())  				{  					triangle[index++] = vertex.Position;  					if (index == 3)  					{  						index = 0;  						renderCollection.Add(new TriangleShape(triangle[0]' triangle[1]' triangle[2]' partMaterial));  					}  				}  			}
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,Convert,The following statement contains a magic number: SolidMaterial otherMaterial = new SolidMaterial(new RGBA_Floats(.1' .2' .9)' .01' 0.0' 2.0);
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,Convert,The following statement contains a magic number: SolidMaterial otherMaterial = new SolidMaterial(new RGBA_Floats(.1' .2' .9)' .01' 0.0' 2.0);
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,Convert,The following statement contains a magic number: SolidMaterial otherMaterial = new SolidMaterial(new RGBA_Floats(.1' .2' .9)' .01' 0.0' 2.0);
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,Convert,The following statement contains a magic number: SolidMaterial otherMaterial = new SolidMaterial(new RGBA_Floats(.1' .2' .9)' .01' 0.0' 2.0);
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,Convert,The following statement contains a magic number: SolidMaterial otherMaterial = new SolidMaterial(new RGBA_Floats(.1' .2' .9)' .01' 0.0' 2.0);
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,Convert,The following statement contains a magic number: if (partMaterial == null)  			{  				partMaterial = new SolidMaterial(new RGBA_Floats(.9' .2' .1)' .01' 0.0' 2.0);  			}
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,Convert,The following statement contains a magic number: if (partMaterial == null)  			{  				partMaterial = new SolidMaterial(new RGBA_Floats(.9' .2' .1)' .01' 0.0' 2.0);  			}
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,Convert,The following statement contains a magic number: if (partMaterial == null)  			{  				partMaterial = new SolidMaterial(new RGBA_Floats(.9' .2' .1)' .01' 0.0' 2.0);  			}
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,Convert,The following statement contains a magic number: if (partMaterial == null)  			{  				partMaterial = new SolidMaterial(new RGBA_Floats(.9' .2' .1)' .01' 0.0' 2.0);  			}
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,Convert,The following statement contains a magic number: if (partMaterial == null)  			{  				partMaterial = new SolidMaterial(new RGBA_Floats(.9' .2' .1)' .01' 0.0' 2.0);  			}
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,Convert,The following statement contains a magic number: Vector3[] triangle = new Vector3[3];
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,Convert,The following statement contains a magic number: foreach (PolygonMesh.Mesh mesh in meshGroup.Meshes)  			{  				int materialIntdex = MeshMaterialData.Get(mesh).MaterialIndex;  				foreach (PolygonMesh.Face face in mesh.Faces)  				{  					foreach (PolygonMesh.Vertex vertex in face.Vertices())  					{  						triangle[index++] = vertex.Position;  						if (index == 3)  						{  							index = 0;  							if (materialIntdex == 1)  							{  								renderCollection.Add(new TriangleShape(triangle[0]' triangle[1]' triangle[2]' partMaterial));  							}  							else  							{  								renderCollection.Add(new TriangleShape(triangle[0]' triangle[1]' triangle[2]' otherMaterial));  							}  						}  					}  				}  			}
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,Convert,The following statement contains a magic number: foreach (PolygonMesh.Mesh mesh in meshGroup.Meshes)  			{  				int materialIntdex = MeshMaterialData.Get(mesh).MaterialIndex;  				foreach (PolygonMesh.Face face in mesh.Faces)  				{  					foreach (PolygonMesh.Vertex vertex in face.Vertices())  					{  						triangle[index++] = vertex.Position;  						if (index == 3)  						{  							index = 0;  							if (materialIntdex == 1)  							{  								renderCollection.Add(new TriangleShape(triangle[0]' triangle[1]' triangle[2]' partMaterial));  							}  							else  							{  								renderCollection.Add(new TriangleShape(triangle[0]' triangle[1]' triangle[2]' otherMaterial));  							}  						}  					}  				}  			}
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,Convert,The following statement contains a magic number: foreach (PolygonMesh.Mesh mesh in meshGroup.Meshes)  			{  				int materialIntdex = MeshMaterialData.Get(mesh).MaterialIndex;  				foreach (PolygonMesh.Face face in mesh.Faces)  				{  					foreach (PolygonMesh.Vertex vertex in face.Vertices())  					{  						triangle[index++] = vertex.Position;  						if (index == 3)  						{  							index = 0;  							if (materialIntdex == 1)  							{  								renderCollection.Add(new TriangleShape(triangle[0]' triangle[1]' triangle[2]' partMaterial));  							}  							else  							{  								renderCollection.Add(new TriangleShape(triangle[0]' triangle[1]' triangle[2]' otherMaterial));  							}  						}  					}  				}  			}
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,ConvertUnoptomized,The following statement contains a magic number: SolidMaterial mhBlueStuff = new SolidMaterial(new RGBA_Floats(0' .32' .58)' .01' 0.0' 2.0);
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,ConvertUnoptomized,The following statement contains a magic number: SolidMaterial mhBlueStuff = new SolidMaterial(new RGBA_Floats(0' .32' .58)' .01' 0.0' 2.0);
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,ConvertUnoptomized,The following statement contains a magic number: SolidMaterial mhBlueStuff = new SolidMaterial(new RGBA_Floats(0' .32' .58)' .01' 0.0' 2.0);
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,ConvertUnoptomized,The following statement contains a magic number: SolidMaterial mhBlueStuff = new SolidMaterial(new RGBA_Floats(0' .32' .58)' .01' 0.0' 2.0);
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,ConvertUnoptomized,The following statement contains a magic number: Vector3[] triangle = new Vector3[3];
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,ConvertUnoptomized,The following statement contains a magic number: foreach (PolygonMesh.Face face in simpleMesh.Faces)  			{  				foreach (PolygonMesh.Vertex vertex in face.Vertices())  				{  					triangle[index++] = vertex.Position;  					if (index == 3)  					{  						index = 0;  						renderCollection.Add(new TriangleShape(triangle[0]' triangle[1]' triangle[2]' mhBlueStuff));  					}  				}  			}
Magic Number,MatterHackers.DataConverters3D,MeshToBVH,C:\repos\MatterHackers_agg-sharp\DataConverters3D\MeshToBVH.cs,ConvertUnoptomized,The following statement contains a magic number: foreach (PolygonMesh.Face face in simpleMesh.Faces)  			{  				foreach (PolygonMesh.Vertex vertex in face.Vertices())  				{  					triangle[index++] = vertex.Position;  					if (index == 3)  					{  						index = 0;  						renderCollection.Add(new TriangleShape(triangle[0]' triangle[1]' triangle[2]' mhBlueStuff));  					}  				}  			}
Magic Number,MatterHackers.DataConverters3D,VertexSourceToMesh,C:\repos\MatterHackers_agg-sharp\DataConverters3D\VertexSourceToMesh.cs,TriangulateFaces,The following statement contains a magic number: for (int i = 0; i < numIndicies; i += 3)  			{  				Vector2 v0 = teselatedSource.VerticesCache[teselatedSource.IndicesCache[i + 0].Index].Position;  				Vector2 v1 = teselatedSource.VerticesCache[teselatedSource.IndicesCache[i + 1].Index].Position;  				Vector2 v2 = teselatedSource.VerticesCache[teselatedSource.IndicesCache[i + 2].Index].Position;  				if (v0 == v1 || v1 == v2 || v2 == v0)  				{  					continue;  				}    				Vertex topVertex0 = extrudedVertexSource.CreateVertex(new Vector3(v0' 0));  				Vertex topVertex1 = extrudedVertexSource.CreateVertex(new Vector3(v1' 0));  				Vertex topVertex2 = extrudedVertexSource.CreateVertex(new Vector3(v2' 0));    				extrudedVertexSource.CreateFace(new Vertex[] { topVertex0' topVertex1' topVertex2 });  			}
Magic Number,MatterHackers.DataConverters3D,VertexSourceToMesh,C:\repos\MatterHackers_agg-sharp\DataConverters3D\VertexSourceToMesh.cs,TriangulateFaces,The following statement contains a magic number: for (int i = 0; i < numIndicies; i += 3)  			{  				Vector2 v0 = teselatedSource.VerticesCache[teselatedSource.IndicesCache[i + 0].Index].Position;  				Vector2 v1 = teselatedSource.VerticesCache[teselatedSource.IndicesCache[i + 1].Index].Position;  				Vector2 v2 = teselatedSource.VerticesCache[teselatedSource.IndicesCache[i + 2].Index].Position;  				if (v0 == v1 || v1 == v2 || v2 == v0)  				{  					continue;  				}    				Vertex topVertex0 = extrudedVertexSource.CreateVertex(new Vector3(v0' 0));  				Vertex topVertex1 = extrudedVertexSource.CreateVertex(new Vector3(v1' 0));  				Vertex topVertex2 = extrudedVertexSource.CreateVertex(new Vector3(v2' 0));    				extrudedVertexSource.CreateFace(new Vertex[] { topVertex0' topVertex1' topVertex2 });  			}
Magic Number,MatterHackers.DataConverters3D,VertexSourceToMesh,C:\repos\MatterHackers_agg-sharp\DataConverters3D\VertexSourceToMesh.cs,Revolve,The following statement contains a magic number: mesh.CleanAndMergMesh(.0001);
Magic Number,MatterHackers.DataConverters3D,VertexSourceToMesh,C:\repos\MatterHackers_agg-sharp\DataConverters3D\VertexSourceToMesh.cs,Extrude,The following statement contains a magic number: for (int i = 0; i < numIndicies; i += 3)  			{  				Vector2 v0 = teselatedSource.VerticesCache[teselatedSource.IndicesCache[i + 0].Index].Position;  				Vector2 v1 = teselatedSource.VerticesCache[teselatedSource.IndicesCache[i + 1].Index].Position;  				Vector2 v2 = teselatedSource.VerticesCache[teselatedSource.IndicesCache[i + 2].Index].Position;  				if (v0 == v1 || v1 == v2 || v2 == v0)  				{  					continue;  				}    				Vertex bottomVertex0 = extrudedVertexSource.CreateVertex(new Vector3(v0' 0));  				Vertex bottomVertex1 = extrudedVertexSource.CreateVertex(new Vector3(v1' 0));  				Vertex bottomVertex2 = extrudedVertexSource.CreateVertex(new Vector3(v2' 0));    				Vertex topVertex0 = extrudedVertexSource.CreateVertex(new Vector3(v0' zHeight));  				Vertex topVertex1 = extrudedVertexSource.CreateVertex(new Vector3(v1' zHeight));  				Vertex topVertex2 = extrudedVertexSource.CreateVertex(new Vector3(v2' zHeight));    				if (teselatedSource.IndicesCache[i + 0].IsEdge)  				{  					extrudedVertexSource.CreateFace(new Vertex[] { bottomVertex0' bottomVertex1' topVertex1' topVertex0 });  				}    				if (teselatedSource.IndicesCache[i + 1].IsEdge)  				{  					extrudedVertexSource.CreateFace(new Vertex[] { bottomVertex1' bottomVertex2' topVertex2' topVertex1 });  				}    				if (teselatedSource.IndicesCache[i + 2].IsEdge)  				{  					extrudedVertexSource.CreateFace(new Vertex[] { bottomVertex2' bottomVertex0' topVertex0' topVertex2 });  				}  			}
Magic Number,MatterHackers.DataConverters3D,VertexSourceToMesh,C:\repos\MatterHackers_agg-sharp\DataConverters3D\VertexSourceToMesh.cs,Extrude,The following statement contains a magic number: for (int i = 0; i < numIndicies; i += 3)  			{  				Vector2 v0 = teselatedSource.VerticesCache[teselatedSource.IndicesCache[i + 0].Index].Position;  				Vector2 v1 = teselatedSource.VerticesCache[teselatedSource.IndicesCache[i + 1].Index].Position;  				Vector2 v2 = teselatedSource.VerticesCache[teselatedSource.IndicesCache[i + 2].Index].Position;  				if (v0 == v1 || v1 == v2 || v2 == v0)  				{  					continue;  				}    				Vertex bottomVertex0 = extrudedVertexSource.CreateVertex(new Vector3(v0' 0));  				Vertex bottomVertex1 = extrudedVertexSource.CreateVertex(new Vector3(v1' 0));  				Vertex bottomVertex2 = extrudedVertexSource.CreateVertex(new Vector3(v2' 0));    				Vertex topVertex0 = extrudedVertexSource.CreateVertex(new Vector3(v0' zHeight));  				Vertex topVertex1 = extrudedVertexSource.CreateVertex(new Vector3(v1' zHeight));  				Vertex topVertex2 = extrudedVertexSource.CreateVertex(new Vector3(v2' zHeight));    				if (teselatedSource.IndicesCache[i + 0].IsEdge)  				{  					extrudedVertexSource.CreateFace(new Vertex[] { bottomVertex0' bottomVertex1' topVertex1' topVertex0 });  				}    				if (teselatedSource.IndicesCache[i + 1].IsEdge)  				{  					extrudedVertexSource.CreateFace(new Vertex[] { bottomVertex1' bottomVertex2' topVertex2' topVertex1 });  				}    				if (teselatedSource.IndicesCache[i + 2].IsEdge)  				{  					extrudedVertexSource.CreateFace(new Vertex[] { bottomVertex2' bottomVertex0' topVertex0' topVertex2 });  				}  			}
Magic Number,MatterHackers.DataConverters3D,VertexSourceToMesh,C:\repos\MatterHackers_agg-sharp\DataConverters3D\VertexSourceToMesh.cs,Extrude,The following statement contains a magic number: for (int i = 0; i < numIndicies; i += 3)  			{  				Vector2 v0 = teselatedSource.VerticesCache[teselatedSource.IndicesCache[i + 0].Index].Position;  				Vector2 v1 = teselatedSource.VerticesCache[teselatedSource.IndicesCache[i + 1].Index].Position;  				Vector2 v2 = teselatedSource.VerticesCache[teselatedSource.IndicesCache[i + 2].Index].Position;  				if (v0 == v1 || v1 == v2 || v2 == v0)  				{  					continue;  				}    				Vertex bottomVertex0 = extrudedVertexSource.CreateVertex(new Vector3(v0' 0));  				Vertex bottomVertex1 = extrudedVertexSource.CreateVertex(new Vector3(v1' 0));  				Vertex bottomVertex2 = extrudedVertexSource.CreateVertex(new Vector3(v2' 0));    				Vertex topVertex0 = extrudedVertexSource.CreateVertex(new Vector3(v0' zHeight));  				Vertex topVertex1 = extrudedVertexSource.CreateVertex(new Vector3(v1' zHeight));  				Vertex topVertex2 = extrudedVertexSource.CreateVertex(new Vector3(v2' zHeight));    				if (teselatedSource.IndicesCache[i + 0].IsEdge)  				{  					extrudedVertexSource.CreateFace(new Vertex[] { bottomVertex0' bottomVertex1' topVertex1' topVertex0 });  				}    				if (teselatedSource.IndicesCache[i + 1].IsEdge)  				{  					extrudedVertexSource.CreateFace(new Vertex[] { bottomVertex1' bottomVertex2' topVertex2' topVertex1 });  				}    				if (teselatedSource.IndicesCache[i + 2].IsEdge)  				{  					extrudedVertexSource.CreateFace(new Vertex[] { bottomVertex2' bottomVertex0' topVertex0' topVertex2 });  				}  			}
Magic Number,MatterHackers.DataConverters3D,VertexSourceToMesh,C:\repos\MatterHackers_agg-sharp\DataConverters3D\VertexSourceToMesh.cs,Extrude,The following statement contains a magic number: for (int i = 0; i < numIndicies; i += 3)  			{  				Vector2 v0 = teselatedSource.VerticesCache[teselatedSource.IndicesCache[i + 0].Index].Position;  				Vector2 v1 = teselatedSource.VerticesCache[teselatedSource.IndicesCache[i + 1].Index].Position;  				Vector2 v2 = teselatedSource.VerticesCache[teselatedSource.IndicesCache[i + 2].Index].Position;  				if (v0 == v1 || v1 == v2 || v2 == v0)  				{  					continue;  				}    				Vertex bottomVertex0 = extrudedVertexSource.CreateVertex(new Vector3(v0' 0));  				Vertex bottomVertex1 = extrudedVertexSource.CreateVertex(new Vector3(v1' 0));  				Vertex bottomVertex2 = extrudedVertexSource.CreateVertex(new Vector3(v2' 0));    				extrudedVertexSource.CreateFace(new Vertex[] { bottomVertex2' bottomVertex1' bottomVertex0 });  			}
Magic Number,MatterHackers.DataConverters3D,VertexSourceToMesh,C:\repos\MatterHackers_agg-sharp\DataConverters3D\VertexSourceToMesh.cs,Extrude,The following statement contains a magic number: for (int i = 0; i < numIndicies; i += 3)  			{  				Vector2 v0 = teselatedSource.VerticesCache[teselatedSource.IndicesCache[i + 0].Index].Position;  				Vector2 v1 = teselatedSource.VerticesCache[teselatedSource.IndicesCache[i + 1].Index].Position;  				Vector2 v2 = teselatedSource.VerticesCache[teselatedSource.IndicesCache[i + 2].Index].Position;  				if (v0 == v1 || v1 == v2 || v2 == v0)  				{  					continue;  				}    				Vertex bottomVertex0 = extrudedVertexSource.CreateVertex(new Vector3(v0' 0));  				Vertex bottomVertex1 = extrudedVertexSource.CreateVertex(new Vector3(v1' 0));  				Vertex bottomVertex2 = extrudedVertexSource.CreateVertex(new Vector3(v2' 0));    				extrudedVertexSource.CreateFace(new Vertex[] { bottomVertex2' bottomVertex1' bottomVertex0 });  			}
