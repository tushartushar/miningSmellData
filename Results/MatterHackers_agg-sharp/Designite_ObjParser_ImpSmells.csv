Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ObjParser,Mtl,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\PolygonMesh\ObjParser\Mtl.cs,processLine,Cyclomatic complexity of the method is 11
Magic Number,ObjParser.Types,Color,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\PolygonMesh\ObjParser\Types\Color.cs,LoadFromStringArray,The following statement contains a magic number: data.Length != 4
Magic Number,ObjParser.Types,Color,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\PolygonMesh\ObjParser\Types\Color.cs,LoadFromStringArray,The following statement contains a magic number: g = float.Parse(data[2]);
Magic Number,ObjParser.Types,Color,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\PolygonMesh\ObjParser\Types\Color.cs,LoadFromStringArray,The following statement contains a magic number: b = float.Parse(data[3]);
Magic Number,ObjParser.Types,TextureVertex,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\PolygonMesh\ObjParser\Types\TextureVertex.cs,LoadFromStringArray,The following statement contains a magic number: success = double.TryParse(data[2]' NumberStyles.Any' CultureInfo.InvariantCulture' out y);
Magic Number,ObjParser.Types,Vertex,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\PolygonMesh\ObjParser\Types\Vertex.cs,LoadFromStringArray,The following statement contains a magic number: success = double.TryParse(data[2]' NumberStyles.Any' CultureInfo.InvariantCulture' out y);
Magic Number,ObjParser.Types,Vertex,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\PolygonMesh\ObjParser\Types\Vertex.cs,LoadFromStringArray,The following statement contains a magic number: success = double.TryParse(data[3]' NumberStyles.Any' CultureInfo.InvariantCulture' out z);
Missing Default,ObjParser,Mtl,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\PolygonMesh\ObjParser\Mtl.cs,processLine,The following switch statement is missing a default case: switch (parts[0])                  {                      case "newmtl":                          CurrentMaterial = new Material();                          CurrentMaterial.Name = parts[1];                          MaterialList.Add(CurrentMaterial);                          break;                      case "Ka":                          c.LoadFromStringArray(parts);                          CurrentMaterial.AmbientReflectivity = c;                          break;                      case "Kd":                          c.LoadFromStringArray(parts);                          CurrentMaterial.DiffuseReflectivity = c;                          break;                      case "Ks":                          c.LoadFromStringArray(parts);                          CurrentMaterial.SpecularReflectivity = c;                          break;                      case "Ke":                          c.LoadFromStringArray(parts);                          CurrentMaterial.EmissiveCoefficient = c;                          break;                      case "Tf":                          c.LoadFromStringArray(parts);                          CurrentMaterial.TransmissionFilter = c;                          break;                      case "Ni":                          CurrentMaterial.OpticalDensity = float.Parse(parts[1]);                          break;                      case "d":                          CurrentMaterial.Dissolve = float.Parse(parts[1]);                          break;                      case "illum":                          CurrentMaterial.IlluminationModel = int.Parse(parts[1]);                          break;                      case "Ns":                          CurrentMaterial.SpecularExponent = float.Parse(parts[1]);                          break;                  }
Missing Default,ObjParser,Obj,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\PolygonMesh\ObjParser\Obj.cs,processLine,The following switch statement is missing a default case: switch (parts[0])  				{  					case "usemtl":  						UseMtl = parts[1];  						break;  					case "mtllib":  						Mtl = parts[1];  						break;  					case "v":  						Vertex v = new Vertex();  						v.LoadFromStringArray(parts);  						VertexList.Add(v);  						v.Index = VertexList.Count();  						break;  					case "f":  						Face f = new Face();  						f.LoadFromStringArray(parts);  						f.UseMtl = UseMtl;  						FaceList.Add(f);  						break;  					case "vt":  						TextureVertex vt = new TextureVertex();  						vt.LoadFromStringArray(parts);  						TextureList.Add(vt);  						vt.Index = TextureList.Count();  						break;    				}
