Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,MatterHackers.Agg.Font,BGRA32LcdSubPixelBlender,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\BGRA32LcdSubPixelBlender.cs,BlendPixels,The method has 8 parameters. Parameters: destBuffer' bufferOffset' sourceColors' sourceColorsOffset' covers' coversIndex' firstCoverForAll' count
Long Parameter List,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_hline,The method has 5 parameters. Parameters: x1' y' x2' c' cover
Long Parameter List,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_solid_hspan,The method has 6 parameters. Parameters: x' y' len' c' covers' coversIndex
Long Parameter List,MatterHackers.Agg,square,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,draw,The method has 6 parameters. Parameters: ras' sl' destImage' color' x' y
Long Statement,MatterHackers.Agg.Font,BGRA32LcdSubPixelBlender,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\BGRA32LcdSubPixelBlender.cs,PixelToColorRGBA_Bytes,The length of the statement  "			return new RGBA_Bytes(buffer[bufferOffset + ImageBuffer.OrderR]' buffer[bufferOffset + ImageBuffer.OrderG]' buffer[bufferOffset + ImageBuffer.OrderB]' buffer[bufferOffset + ImageBuffer.OrderA]); " is 194.
Long Statement,MatterHackers.Agg.Font,BGRA32LcdSubPixelBlender,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\BGRA32LcdSubPixelBlender.cs,BlendPixel,The length of the statement  "					buffer[bufferOffset] = (byte)(((sourceColor.red - r) * sourceColor.alpha + (r << (int)RGBA_Bytes.base_shift)) >> (int)RGBA_Bytes.base_shift); " is 141.
Long Statement,MatterHackers.Agg,FontHinter,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,DrawBigA,The length of the statement  "			VertexSourceApplyTransform scaleAndTranslate = new VertexSourceApplyTransform(flattenedBigA' Affine.NewTranslation(155' 55)); " is 125.
Long Statement,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_hline,The length of the statement  "				buffer[index + ImageBuffer.OrderR] = (byte)((((c.red - buffer[index + ImageBuffer.OrderR]) * alpha) + (buffer[index + ImageBuffer.OrderR] << 16)) >> 16); " is 153.
Long Statement,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_hline,The length of the statement  "				buffer[index + ImageBuffer.OrderG] = (byte)((((c.green - buffer[index + ImageBuffer.OrderG]) * alpha) + (buffer[index + ImageBuffer.OrderG] << 16)) >> 16); " is 155.
Long Statement,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_hline,The length of the statement  "				buffer[index + ImageBuffer.OrderB] = (byte)((((c.blue - buffer[index + ImageBuffer.OrderB]) * alpha) + (buffer[index + ImageBuffer.OrderB] << 16)) >> 16); " is 154.
Virtual Method Call from Constructor,MatterHackers.Agg,FontHinter,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,FontHinter,The constructor "FontHinter" calls a virtual method "AddChild".
Virtual Method Call from Constructor,MatterHackers.Agg,FontHinter,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,FontHinter,The constructor "FontHinter" calls a virtual method "AddChild".
Virtual Method Call from Constructor,MatterHackers.Agg,FontHinter,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,FontHinter,The constructor "FontHinter" calls a virtual method "AddChild".
Magic Number,MatterHackers.Agg.Font,BGRA32LcdSubPixelBlender,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\BGRA32LcdSubPixelBlender.cs,BlendPixel,The following statement contains a magic number: unchecked  			{  				if (sourceColor.alpha == 255)  				{  					buffer[bufferOffset] = (byte)(sourceColor.red);  				}  				else  				{  					int r = buffer[bufferOffset];  					buffer[bufferOffset] = (byte)(((sourceColor.red - r) * sourceColor.alpha + (r << (int)RGBA_Bytes.base_shift)) >> (int)RGBA_Bytes.base_shift);  				}  			}
Magic Number,MatterHackers.Agg.Font,BGRA32LcdSubPixelBlender,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\BGRA32LcdSubPixelBlender.cs,BlendPixels,The following statement contains a magic number: if (firstCoverForAll)  			{  				int cover = covers[coversIndex];  				if (cover == 255)  				{  					do  					{  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset++]);  						bufferOffset += 4;  					}  					while (--count != 0);  				}  				else  				{  					do  					{  						sourceColors[sourceColorsOffset].alpha = (byte)((sourceColors[sourceColorsOffset].alpha * cover + 255) >> 8);  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset]);  						bufferOffset += 4;  						++sourceColorsOffset;  					}  					while (--count != 0);  				}  			}  			else  			{  				do  				{  					int cover = covers[coversIndex++];  					if (cover == 255)  					{  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset]);  					}  					else  					{  						RGBA_Bytes color = sourceColors[sourceColorsOffset];  						color.alpha = (byte)((color.alpha * (cover) + 255) >> 8);  						BlendPixel(destBuffer' bufferOffset' color);  					}  					bufferOffset += 4;  					++sourceColorsOffset;  				}  				while (--count != 0);  			}
Magic Number,MatterHackers.Agg.Font,BGRA32LcdSubPixelBlender,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\BGRA32LcdSubPixelBlender.cs,BlendPixels,The following statement contains a magic number: if (firstCoverForAll)  			{  				int cover = covers[coversIndex];  				if (cover == 255)  				{  					do  					{  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset++]);  						bufferOffset += 4;  					}  					while (--count != 0);  				}  				else  				{  					do  					{  						sourceColors[sourceColorsOffset].alpha = (byte)((sourceColors[sourceColorsOffset].alpha * cover + 255) >> 8);  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset]);  						bufferOffset += 4;  						++sourceColorsOffset;  					}  					while (--count != 0);  				}  			}  			else  			{  				do  				{  					int cover = covers[coversIndex++];  					if (cover == 255)  					{  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset]);  					}  					else  					{  						RGBA_Bytes color = sourceColors[sourceColorsOffset];  						color.alpha = (byte)((color.alpha * (cover) + 255) >> 8);  						BlendPixel(destBuffer' bufferOffset' color);  					}  					bufferOffset += 4;  					++sourceColorsOffset;  				}  				while (--count != 0);  			}
Magic Number,MatterHackers.Agg.Font,BGRA32LcdSubPixelBlender,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\BGRA32LcdSubPixelBlender.cs,BlendPixels,The following statement contains a magic number: if (firstCoverForAll)  			{  				int cover = covers[coversIndex];  				if (cover == 255)  				{  					do  					{  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset++]);  						bufferOffset += 4;  					}  					while (--count != 0);  				}  				else  				{  					do  					{  						sourceColors[sourceColorsOffset].alpha = (byte)((sourceColors[sourceColorsOffset].alpha * cover + 255) >> 8);  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset]);  						bufferOffset += 4;  						++sourceColorsOffset;  					}  					while (--count != 0);  				}  			}  			else  			{  				do  				{  					int cover = covers[coversIndex++];  					if (cover == 255)  					{  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset]);  					}  					else  					{  						RGBA_Bytes color = sourceColors[sourceColorsOffset];  						color.alpha = (byte)((color.alpha * (cover) + 255) >> 8);  						BlendPixel(destBuffer' bufferOffset' color);  					}  					bufferOffset += 4;  					++sourceColorsOffset;  				}  				while (--count != 0);  			}
Magic Number,MatterHackers.Agg.Font,BGRA32LcdSubPixelBlender,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\BGRA32LcdSubPixelBlender.cs,BlendPixels,The following statement contains a magic number: if (firstCoverForAll)  			{  				int cover = covers[coversIndex];  				if (cover == 255)  				{  					do  					{  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset++]);  						bufferOffset += 4;  					}  					while (--count != 0);  				}  				else  				{  					do  					{  						sourceColors[sourceColorsOffset].alpha = (byte)((sourceColors[sourceColorsOffset].alpha * cover + 255) >> 8);  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset]);  						bufferOffset += 4;  						++sourceColorsOffset;  					}  					while (--count != 0);  				}  			}  			else  			{  				do  				{  					int cover = covers[coversIndex++];  					if (cover == 255)  					{  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset]);  					}  					else  					{  						RGBA_Bytes color = sourceColors[sourceColorsOffset];  						color.alpha = (byte)((color.alpha * (cover) + 255) >> 8);  						BlendPixel(destBuffer' bufferOffset' color);  					}  					bufferOffset += 4;  					++sourceColorsOffset;  				}  				while (--count != 0);  			}
Magic Number,MatterHackers.Agg.Font,BGRA32LcdSubPixelBlender,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\BGRA32LcdSubPixelBlender.cs,BlendPixels,The following statement contains a magic number: if (firstCoverForAll)  			{  				int cover = covers[coversIndex];  				if (cover == 255)  				{  					do  					{  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset++]);  						bufferOffset += 4;  					}  					while (--count != 0);  				}  				else  				{  					do  					{  						sourceColors[sourceColorsOffset].alpha = (byte)((sourceColors[sourceColorsOffset].alpha * cover + 255) >> 8);  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset]);  						bufferOffset += 4;  						++sourceColorsOffset;  					}  					while (--count != 0);  				}  			}  			else  			{  				do  				{  					int cover = covers[coversIndex++];  					if (cover == 255)  					{  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset]);  					}  					else  					{  						RGBA_Bytes color = sourceColors[sourceColorsOffset];  						color.alpha = (byte)((color.alpha * (cover) + 255) >> 8);  						BlendPixel(destBuffer' bufferOffset' color);  					}  					bufferOffset += 4;  					++sourceColorsOffset;  				}  				while (--count != 0);  			}
Magic Number,MatterHackers.Agg.Font,BGRA32LcdSubPixelBlender,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\BGRA32LcdSubPixelBlender.cs,BlendPixels,The following statement contains a magic number: if (firstCoverForAll)  			{  				int cover = covers[coversIndex];  				if (cover == 255)  				{  					do  					{  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset++]);  						bufferOffset += 4;  					}  					while (--count != 0);  				}  				else  				{  					do  					{  						sourceColors[sourceColorsOffset].alpha = (byte)((sourceColors[sourceColorsOffset].alpha * cover + 255) >> 8);  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset]);  						bufferOffset += 4;  						++sourceColorsOffset;  					}  					while (--count != 0);  				}  			}  			else  			{  				do  				{  					int cover = covers[coversIndex++];  					if (cover == 255)  					{  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset]);  					}  					else  					{  						RGBA_Bytes color = sourceColors[sourceColorsOffset];  						color.alpha = (byte)((color.alpha * (cover) + 255) >> 8);  						BlendPixel(destBuffer' bufferOffset' color);  					}  					bufferOffset += 4;  					++sourceColorsOffset;  				}  				while (--count != 0);  			}
Magic Number,MatterHackers.Agg.Font,BGRA32LcdSubPixelBlender,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\BGRA32LcdSubPixelBlender.cs,BlendPixels,The following statement contains a magic number: if (firstCoverForAll)  			{  				int cover = covers[coversIndex];  				if (cover == 255)  				{  					do  					{  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset++]);  						bufferOffset += 4;  					}  					while (--count != 0);  				}  				else  				{  					do  					{  						sourceColors[sourceColorsOffset].alpha = (byte)((sourceColors[sourceColorsOffset].alpha * cover + 255) >> 8);  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset]);  						bufferOffset += 4;  						++sourceColorsOffset;  					}  					while (--count != 0);  				}  			}  			else  			{  				do  				{  					int cover = covers[coversIndex++];  					if (cover == 255)  					{  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset]);  					}  					else  					{  						RGBA_Bytes color = sourceColors[sourceColorsOffset];  						color.alpha = (byte)((color.alpha * (cover) + 255) >> 8);  						BlendPixel(destBuffer' bufferOffset' color);  					}  					bufferOffset += 4;  					++sourceColorsOffset;  				}  				while (--count != 0);  			}
Magic Number,MatterHackers.Agg.Font,BGRA32LcdSubPixelBlender,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\BGRA32LcdSubPixelBlender.cs,BlendPixels,The following statement contains a magic number: if (firstCoverForAll)  			{  				int cover = covers[coversIndex];  				if (cover == 255)  				{  					do  					{  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset++]);  						bufferOffset += 4;  					}  					while (--count != 0);  				}  				else  				{  					do  					{  						sourceColors[sourceColorsOffset].alpha = (byte)((sourceColors[sourceColorsOffset].alpha * cover + 255) >> 8);  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset]);  						bufferOffset += 4;  						++sourceColorsOffset;  					}  					while (--count != 0);  				}  			}  			else  			{  				do  				{  					int cover = covers[coversIndex++];  					if (cover == 255)  					{  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset]);  					}  					else  					{  						RGBA_Bytes color = sourceColors[sourceColorsOffset];  						color.alpha = (byte)((color.alpha * (cover) + 255) >> 8);  						BlendPixel(destBuffer' bufferOffset' color);  					}  					bufferOffset += 4;  					++sourceColorsOffset;  				}  				while (--count != 0);  			}
Magic Number,MatterHackers.Agg.Font,BGRA32LcdSubPixelBlender,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\BGRA32LcdSubPixelBlender.cs,BlendPixels,The following statement contains a magic number: if (firstCoverForAll)  			{  				int cover = covers[coversIndex];  				if (cover == 255)  				{  					do  					{  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset++]);  						bufferOffset += 4;  					}  					while (--count != 0);  				}  				else  				{  					do  					{  						sourceColors[sourceColorsOffset].alpha = (byte)((sourceColors[sourceColorsOffset].alpha * cover + 255) >> 8);  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset]);  						bufferOffset += 4;  						++sourceColorsOffset;  					}  					while (--count != 0);  				}  			}  			else  			{  				do  				{  					int cover = covers[coversIndex++];  					if (cover == 255)  					{  						BlendPixel(destBuffer' bufferOffset' sourceColors[sourceColorsOffset]);  					}  					else  					{  						RGBA_Bytes color = sourceColors[sourceColorsOffset];  						color.alpha = (byte)((color.alpha * (cover) + 255) >> 8);  						BlendPixel(destBuffer' bufferOffset' color);  					}  					bufferOffset += 4;  					++sourceColorsOffset;  				}  				while (--count != 0);  			}
Magic Number,MatterHackers.Agg,FontHinter,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,FontHinter,The following statement contains a magic number: pixelSizeSlider = new Slider(new Vector2(30' 30)' 600 - 60);
Magic Number,MatterHackers.Agg,FontHinter,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,FontHinter,The following statement contains a magic number: pixelSizeSlider = new Slider(new Vector2(30' 30)' 600 - 60);
Magic Number,MatterHackers.Agg,FontHinter,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,FontHinter,The following statement contains a magic number: pixelSizeSlider = new Slider(new Vector2(30' 30)' 600 - 60);
Magic Number,MatterHackers.Agg,FontHinter,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,FontHinter,The following statement contains a magic number: pixelSizeSlider = new Slider(new Vector2(30' 30)' 600 - 60);
Magic Number,MatterHackers.Agg,FontHinter,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,FontHinter,The following statement contains a magic number: gammaSlider = new Slider(new Vector2(30' 70)' 600 - 60);
Magic Number,MatterHackers.Agg,FontHinter,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,FontHinter,The following statement contains a magic number: gammaSlider = new Slider(new Vector2(30' 70)' 600 - 60);
Magic Number,MatterHackers.Agg,FontHinter,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,FontHinter,The following statement contains a magic number: gammaSlider = new Slider(new Vector2(30' 70)' 600 - 60);
Magic Number,MatterHackers.Agg,FontHinter,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,FontHinter,The following statement contains a magic number: gammaSlider = new Slider(new Vector2(30' 70)' 600 - 60);
Magic Number,MatterHackers.Agg,FontHinter,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,FontHinter,The following statement contains a magic number: pixelSizeSlider.SetRange(2' 20);
Magic Number,MatterHackers.Agg,FontHinter,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,FontHinter,The following statement contains a magic number: pixelSizeSlider.SetRange(2' 20);
Magic Number,MatterHackers.Agg,FontHinter,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,FontHinter,The following statement contains a magic number: pixelSizeSlider.NumTicks = 23;
Magic Number,MatterHackers.Agg,FontHinter,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,FontHinter,The following statement contains a magic number: pixelSizeSlider.Value = 6;
Magic Number,MatterHackers.Agg,FontHinter,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,FontHinter,The following statement contains a magic number: gammaSlider.SetRange(0.0' 3.0);
Magic Number,MatterHackers.Agg,FontHinter,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,OnDraw,The following statement contains a magic number: StyledTypeFace type = new StyledTypeFace(LiberationSansFont.Instance' 12);
Magic Number,MatterHackers.Agg,FontHinter,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,OnDraw,The following statement contains a magic number: pg.width(2);
Magic Number,MatterHackers.Agg,FontHinter,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,DrawBigA,The following statement contains a magic number: TypeFacePrinter bigAPrinter = new TypeFacePrinter("a"' 150);
Magic Number,MatterHackers.Agg,FontHinter,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,DrawBigA,The following statement contains a magic number: VertexSourceApplyTransform scaleAndTranslate = new VertexSourceApplyTransform(flattenedBigA' Affine.NewTranslation(155' 55));
Magic Number,MatterHackers.Agg,FontHinter,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,DrawBigA,The following statement contains a magic number: VertexSourceApplyTransform scaleAndTranslate = new VertexSourceApplyTransform(flattenedBigA' Affine.NewTranslation(155' 55));
Magic Number,MatterHackers.Agg,BlurFactory,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,GetAppParameters,The following statement contains a magic number: AppWidgetInfo appWidgetInfo = new AppWidgetInfo(  				"Bitmap"'  				"Font Hinter"'  				@""'  				440'  				330);
Magic Number,MatterHackers.Agg,BlurFactory,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,GetAppParameters,The following statement contains a magic number: AppWidgetInfo appWidgetInfo = new AppWidgetInfo(  				"Bitmap"'  				"Font Hinter"'  				@""'  				440'  				330);
Magic Number,MatterHackers.Agg,lcd_distribution_lut,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,lcd_distribution_lut,The following statement contains a magic number: double norm = 1.0 / (prim + second * 2 + tert * 2);
Magic Number,MatterHackers.Agg,lcd_distribution_lut,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,lcd_distribution_lut,The following statement contains a magic number: double norm = 1.0 / (prim + second * 2 + tert * 2);
Magic Number,MatterHackers.Agg,lcd_distribution_lut,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,lcd_distribution_lut,The following statement contains a magic number: for (int i = 0; i < 256; i++)  			{  				m_primary[i] = (byte)Math.Floor(prim * i);  				m_secondary[i] = (byte)Math.Floor(second * i);  				m_tertiary[i] = (byte)Math.Floor(tert * i);  			}
Magic Number,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_hline,The following statement contains a magic number: len /= 3;
Magic Number,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_hline,The following statement contains a magic number: do  			{  				buffer[index + ImageBuffer.OrderR] = (byte)((((c.red - buffer[index + ImageBuffer.OrderR]) * alpha) + (buffer[index + ImageBuffer.OrderR] << 16)) >> 16);  				buffer[index + ImageBuffer.OrderG] = (byte)((((c.green - buffer[index + ImageBuffer.OrderG]) * alpha) + (buffer[index + ImageBuffer.OrderG] << 16)) >> 16);  				buffer[index + ImageBuffer.OrderB] = (byte)((((c.blue - buffer[index + ImageBuffer.OrderB]) * alpha) + (buffer[index + ImageBuffer.OrderB] << 16)) >> 16);  				index += 3;  			}  			while (--len > 0);
Magic Number,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_hline,The following statement contains a magic number: do  			{  				buffer[index + ImageBuffer.OrderR] = (byte)((((c.red - buffer[index + ImageBuffer.OrderR]) * alpha) + (buffer[index + ImageBuffer.OrderR] << 16)) >> 16);  				buffer[index + ImageBuffer.OrderG] = (byte)((((c.green - buffer[index + ImageBuffer.OrderG]) * alpha) + (buffer[index + ImageBuffer.OrderG] << 16)) >> 16);  				buffer[index + ImageBuffer.OrderB] = (byte)((((c.blue - buffer[index + ImageBuffer.OrderB]) * alpha) + (buffer[index + ImageBuffer.OrderB] << 16)) >> 16);  				index += 3;  			}  			while (--len > 0);
Magic Number,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_hline,The following statement contains a magic number: do  			{  				buffer[index + ImageBuffer.OrderR] = (byte)((((c.red - buffer[index + ImageBuffer.OrderR]) * alpha) + (buffer[index + ImageBuffer.OrderR] << 16)) >> 16);  				buffer[index + ImageBuffer.OrderG] = (byte)((((c.green - buffer[index + ImageBuffer.OrderG]) * alpha) + (buffer[index + ImageBuffer.OrderG] << 16)) >> 16);  				buffer[index + ImageBuffer.OrderB] = (byte)((((c.blue - buffer[index + ImageBuffer.OrderB]) * alpha) + (buffer[index + ImageBuffer.OrderB] << 16)) >> 16);  				index += 3;  			}  			while (--len > 0);
Magic Number,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_hline,The following statement contains a magic number: do  			{  				buffer[index + ImageBuffer.OrderR] = (byte)((((c.red - buffer[index + ImageBuffer.OrderR]) * alpha) + (buffer[index + ImageBuffer.OrderR] << 16)) >> 16);  				buffer[index + ImageBuffer.OrderG] = (byte)((((c.green - buffer[index + ImageBuffer.OrderG]) * alpha) + (buffer[index + ImageBuffer.OrderG] << 16)) >> 16);  				buffer[index + ImageBuffer.OrderB] = (byte)((((c.blue - buffer[index + ImageBuffer.OrderB]) * alpha) + (buffer[index + ImageBuffer.OrderB] << 16)) >> 16);  				index += 3;  			}  			while (--len > 0);
Magic Number,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_hline,The following statement contains a magic number: do  			{  				buffer[index + ImageBuffer.OrderR] = (byte)((((c.red - buffer[index + ImageBuffer.OrderR]) * alpha) + (buffer[index + ImageBuffer.OrderR] << 16)) >> 16);  				buffer[index + ImageBuffer.OrderG] = (byte)((((c.green - buffer[index + ImageBuffer.OrderG]) * alpha) + (buffer[index + ImageBuffer.OrderG] << 16)) >> 16);  				buffer[index + ImageBuffer.OrderB] = (byte)((((c.blue - buffer[index + ImageBuffer.OrderB]) * alpha) + (buffer[index + ImageBuffer.OrderB] << 16)) >> 16);  				index += 3;  			}  			while (--len > 0);
Magic Number,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_hline,The following statement contains a magic number: do  			{  				buffer[index + ImageBuffer.OrderR] = (byte)((((c.red - buffer[index + ImageBuffer.OrderR]) * alpha) + (buffer[index + ImageBuffer.OrderR] << 16)) >> 16);  				buffer[index + ImageBuffer.OrderG] = (byte)((((c.green - buffer[index + ImageBuffer.OrderG]) * alpha) + (buffer[index + ImageBuffer.OrderG] << 16)) >> 16);  				buffer[index + ImageBuffer.OrderB] = (byte)((((c.blue - buffer[index + ImageBuffer.OrderB]) * alpha) + (buffer[index + ImageBuffer.OrderB] << 16)) >> 16);  				index += 3;  			}  			while (--len > 0);
Magic Number,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_hline,The following statement contains a magic number: do  			{  				buffer[index + ImageBuffer.OrderR] = (byte)((((c.red - buffer[index + ImageBuffer.OrderR]) * alpha) + (buffer[index + ImageBuffer.OrderR] << 16)) >> 16);  				buffer[index + ImageBuffer.OrderG] = (byte)((((c.green - buffer[index + ImageBuffer.OrderG]) * alpha) + (buffer[index + ImageBuffer.OrderG] << 16)) >> 16);  				buffer[index + ImageBuffer.OrderB] = (byte)((((c.blue - buffer[index + ImageBuffer.OrderB]) * alpha) + (buffer[index + ImageBuffer.OrderB] << 16)) >> 16);  				index += 3;  			}  			while (--len > 0);
Magic Number,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_solid_hspan,The following statement contains a magic number: if (c3.Length < len + 4)  			{  				c3 = new byte[len + 4];  			}
Magic Number,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_solid_hspan,The following statement contains a magic number: if (c3.Length < len + 4)  			{  				c3 = new byte[len + 4];  			}
Magic Number,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_solid_hspan,The following statement contains a magic number: agg_basics.memset(c3' 0' 0' len + 4);
Magic Number,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_solid_hspan,The following statement contains a magic number: for (i = 0; i < len; i++)  			{  				c3[i + 0] += (byte)m_lut.tertiary(covers[coversIndex + i]);  				c3[i + 1] += (byte)m_lut.secondary(covers[coversIndex + i]);  				c3[i + 2] += (byte)m_lut.primary(covers[coversIndex + i]);  				c3[i + 3] += (byte)m_lut.secondary(covers[coversIndex + i]);  				c3[i + 4] += (byte)m_lut.tertiary(covers[coversIndex + i]);  			}
Magic Number,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_solid_hspan,The following statement contains a magic number: for (i = 0; i < len; i++)  			{  				c3[i + 0] += (byte)m_lut.tertiary(covers[coversIndex + i]);  				c3[i + 1] += (byte)m_lut.secondary(covers[coversIndex + i]);  				c3[i + 2] += (byte)m_lut.primary(covers[coversIndex + i]);  				c3[i + 3] += (byte)m_lut.secondary(covers[coversIndex + i]);  				c3[i + 4] += (byte)m_lut.tertiary(covers[coversIndex + i]);  			}
Magic Number,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_solid_hspan,The following statement contains a magic number: for (i = 0; i < len; i++)  			{  				c3[i + 0] += (byte)m_lut.tertiary(covers[coversIndex + i]);  				c3[i + 1] += (byte)m_lut.secondary(covers[coversIndex + i]);  				c3[i + 2] += (byte)m_lut.primary(covers[coversIndex + i]);  				c3[i + 3] += (byte)m_lut.secondary(covers[coversIndex + i]);  				c3[i + 4] += (byte)m_lut.tertiary(covers[coversIndex + i]);  			}
Magic Number,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_solid_hspan,The following statement contains a magic number: x -= 2;
Magic Number,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_solid_hspan,The following statement contains a magic number: len += 4;
Magic Number,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_solid_hspan,The following statement contains a magic number: i = x % 3;
Magic Number,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_solid_hspan,The following statement contains a magic number: do  			{  				int alpha = c3[c3Index++] * c.alpha;  				if (alpha > 0)  				{  					if (alpha == 255 * 255)  					{  						buffer[index] = (byte)rgb[i];  					}  					else  					{  						buffer[index] = (byte)((((rgb[i] - buffer[index]) * alpha) + (buffer[index] << 16)) >> 16);  					}  				}  				index++;  				i++;  				if (i >= 3)  				{  					i = 0;  				}  			}  			while (--len > 0);
Magic Number,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_solid_hspan,The following statement contains a magic number: do  			{  				int alpha = c3[c3Index++] * c.alpha;  				if (alpha > 0)  				{  					if (alpha == 255 * 255)  					{  						buffer[index] = (byte)rgb[i];  					}  					else  					{  						buffer[index] = (byte)((((rgb[i] - buffer[index]) * alpha) + (buffer[index] << 16)) >> 16);  					}  				}  				index++;  				i++;  				if (i >= 3)  				{  					i = 0;  				}  			}  			while (--len > 0);
Magic Number,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_solid_hspan,The following statement contains a magic number: do  			{  				int alpha = c3[c3Index++] * c.alpha;  				if (alpha > 0)  				{  					if (alpha == 255 * 255)  					{  						buffer[index] = (byte)rgb[i];  					}  					else  					{  						buffer[index] = (byte)((((rgb[i] - buffer[index]) * alpha) + (buffer[index] << 16)) >> 16);  					}  				}  				index++;  				i++;  				if (i >= 3)  				{  					i = 0;  				}  			}  			while (--len > 0);
Magic Number,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_solid_hspan,The following statement contains a magic number: do  			{  				int alpha = c3[c3Index++] * c.alpha;  				if (alpha > 0)  				{  					if (alpha == 255 * 255)  					{  						buffer[index] = (byte)rgb[i];  					}  					else  					{  						buffer[index] = (byte)((((rgb[i] - buffer[index]) * alpha) + (buffer[index] << 16)) >> 16);  					}  				}  				index++;  				i++;  				if (i >= 3)  				{  					i = 0;  				}  			}  			while (--len > 0);
Magic Number,MatterHackers.Agg,ImageProxySubpxelLcd24,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,blend_solid_hspan,The following statement contains a magic number: do  			{  				int alpha = c3[c3Index++] * c.alpha;  				if (alpha > 0)  				{  					if (alpha == 255 * 255)  					{  						buffer[index] = (byte)rgb[i];  					}  					else  					{  						buffer[index] = (byte)((((rgb[i] - buffer[index]) * alpha) + (buffer[index] << 16)) >> 16);  					}  				}  				index++;  				i++;  				if (i >= 3)  				{  					i = 0;  				}  			}  			while (--len > 0);
Magic Number,MatterHackers.Agg,renderer_enlarged,C:\repos\MatterHackers_agg-sharp\examples\FontHinting\FontHinting.cs,RenderSolidSingleScanLine,The following statement contains a magic number: for (; ; )  			{  				int x = scanlineSpan.x;  				int num_pix = scanlineSpan.len;  				int coverIndex = scanlineSpan.cover_index;    				do  				{  					int a = (ManagedCoversArray[coverIndex++] * color.Alpha0To255) >> 8;  					m_square.draw(destImage.NewGraphics2D().Rasterizer' m_sl' destImage'  									new RGBA_Bytes(color.Red0To255' color.Green0To255' color.Blue0To255' a)'  									x' y);  					++x;  				}  				while (--num_pix > 0);  				if (--num_spans == 0) break;  				scanlineSpan = scanLineCache.GetNextScanlineSpan();  			}
