Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,FindInteractionVolumeHit,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,trackballTumbleWidget_DrawGlContent,Cyclomatic complexity of the method is 8
Long Parameter List,MatterHackers.MeshVisualizer,InteractionVolume,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\InteractionVolume.cs,DrawMeasureLine,The method has 5 parameters. Parameters: graphics2D' lineStart' lineEnd' color' arrows
Long Statement,MatterHackers.MeshVisualizer,ValueDisplayInfo,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\InteractionVolume.cs,DisplaySizeInfo,The length of the statement  "				measureDisplayImage = new ImageBuffer((int)(bounds.Width + margin.Width + unitPrinterBounds.Width + unitPrinterOffset)' (int)(bounds.Height + margin.Height)); " is 158.
Long Statement,MatterHackers.MeshVisualizer,InteractionVolume,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\InteractionVolume.cs,DrawMeasureLine,The length of the statement  "					IVertexSource correctRotation = new VertexSourceApplyTransform(arrow' Affine.NewRotation(rotation - MathHelper.Tau / 4)); " is 121.
Long Statement,MatterHackers.MeshVisualizer,InteractionVolume,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\InteractionVolume.cs,DrawMeasureLine,The length of the statement  "					IVertexSource correctRotation = new VertexSourceApplyTransform(arrow' Affine.NewRotation(rotation - MathHelper.Tau / 4)); " is 121.
Long Statement,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreatePrintBed,The length of the statement  "							buildVolume = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.x / 2' displayVolumeToBuild.y / 2)' displayVolumeToBuild.z); " is 149.
Long Statement,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreatePrintBed,The length of the statement  "						printerBed = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.x / 2' displayVolumeToBuild.y / 2)' 2); " is 127.
Long Statement,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreatePrintBed,The length of the statement  "										edgeUV.TextureUV.Add(new Vector2((displayVolumeToBuild.x / 2 + faceEdge.firstVertex.Position.x) / displayVolumeToBuild.x' " is 121.
Long Statement,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,LoadMesh,The length of the statement  "				partProcessingInfo.centeredInfoText.Text = string.Format("{0}\n'{1}'"' "File not found on disk."' Path.GetFileName(meshPathAndFileName)); " is 137.
Long Statement,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,OnMouseDown,The length of the statement  "				if (trackballTumbleWidget.TransformState == TrackBallController.MouseDownType.Rotation || mouseEvent.Button == MouseButtons.Right) " is 130.
Long Statement,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,SetMeshAfterLoad,The length of the statement  "						meshTransforms[i] *= Matrix4X4.CreateTranslation(-boundsCenter + new Vector3(0' 0' bounds.ZSize / 2) + new Vector3(bedCenter)); " is 127.
Long Statement,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateCircularBedGridImage,The length of the statement  "					graphics2D.DrawString((count * increment).ToString()' linePos + 2' BedImage.Height / 2' pointSize' color: bedMarkingsColor); " is 124.
Long Statement,MatterHackers.MeshVisualizer,MeshViewerApplication,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerApplication.cs,OnDraw,The length of the statement  "				this.Title = string.Format("Allocated = {0:n0} : {1}ms' d{2} Size = {3}x{4}"' memory' totalDrawTime.ElapsedMilliseconds' drawCount++' this.Width' this.Height); " is 159.
Virtual Method Call from Constructor,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,MeshViewerWidget,The constructor "MeshViewerWidget" calls a virtual method "AddChild".
Virtual Method Call from Constructor,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,MeshViewerWidget,The constructor "MeshViewerWidget" calls a virtual method "AddChild".
Virtual Method Call from Constructor,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,MeshViewerWidget,The constructor "MeshViewerWidget" calls a virtual method "AddChild".
Virtual Method Call from Constructor,MatterHackers.MeshVisualizer,PartProcessingInfo,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,PartProcessingInfo,The constructor "PartProcessingInfo" calls a virtual method "AddChild".
Virtual Method Call from Constructor,MatterHackers.MeshVisualizer,PartProcessingInfo,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,PartProcessingInfo,The constructor "PartProcessingInfo" calls a virtual method "AddChild".
Virtual Method Call from Constructor,MatterHackers.MeshVisualizer,PartProcessingInfo,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,PartProcessingInfo,The constructor "PartProcessingInfo" calls a virtual method "AddChild".
Virtual Method Call from Constructor,MatterHackers.MeshVisualizer,MeshViewerApplication,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerApplication.cs,MeshViewerApplication,The constructor "MeshViewerApplication" calls a virtual method "AddChild".
Virtual Method Call from Constructor,MatterHackers.MeshVisualizer,MeshViewerApplication,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerApplication.cs,MeshViewerApplication,The constructor "MeshViewerApplication" calls a virtual method "AddChild".
Virtual Method Call from Constructor,MatterHackers.MeshVisualizer,MeshViewerApplication,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerApplication.cs,MeshViewerApplication,The constructor "MeshViewerApplication" calls a virtual method "AddChild".
Virtual Method Call from Constructor,MatterHackers.MeshVisualizer,MeshViewerApplication,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerApplication.cs,MeshViewerApplication,The constructor "MeshViewerApplication" calls a virtual method "AddChild".
Virtual Method Call from Constructor,MatterHackers.MeshVisualizer,MeshViewerApplication,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerApplication.cs,MeshViewerApplication,The constructor "MeshViewerApplication" calls a virtual method "AddChild".
Virtual Method Call from Constructor,MatterHackers.MeshVisualizer,MeshViewerApplication,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerApplication.cs,MeshViewerApplication,The constructor "MeshViewerApplication" calls a virtual method "AddChild".
Virtual Method Call from Constructor,MatterHackers.MeshVisualizer,MeshViewerApplication,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerApplication.cs,MeshViewerApplication,The constructor "MeshViewerApplication" calls a virtual method "AddChild".
Virtual Method Call from Constructor,MatterHackers.MeshVisualizer,MeshViewerApplication,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerApplication.cs,MeshViewerApplication,The constructor "MeshViewerApplication" calls a virtual method "AddChild".
Magic Number,MatterHackers.MeshVisualizer,ValueDisplayInfo,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\InteractionVolume.cs,DisplaySizeInfo,The following statement contains a magic number: if (measureDisplayImage == null || measureDisplayedString != displayString)  			{  				measureDisplayedString = displayString;  				TypeFacePrinter printer = new TypeFacePrinter(measureDisplayedString' 16);  				TypeFacePrinter unitPrinter = new TypeFacePrinter(unitsString' 10);  				Double unitPrinterOffset = 1;    				BorderDouble margin = new BorderDouble(5);  				printer.Origin = new Vector2(margin.Left' margin.Bottom);  				RectangleDouble bounds = printer.LocalBounds;    				unitPrinter.Origin = new Vector2(bounds.Right + unitPrinterOffset' margin.Bottom);  				RectangleDouble unitPrinterBounds = unitPrinter.LocalBounds;    				measureDisplayImage = new ImageBuffer((int)(bounds.Width + margin.Width + unitPrinterBounds.Width + unitPrinterOffset)' (int)(bounds.Height + margin.Height));  				// make sure the texture has mipmaps (so it can reduce well)  				ImageGlPlugin glPlugin = ImageGlPlugin.GetImageGlPlugin(measureDisplayImage' true);  				Graphics2D widthGraphics = measureDisplayImage.NewGraphics2D();  				widthGraphics.Clear(new RGBA_Bytes(RGBA_Bytes.White' 128));  				printer.Render(widthGraphics' RGBA_Bytes.Black);  				unitPrinter.Render(widthGraphics' RGBA_Bytes.Black);  			}
Magic Number,MatterHackers.MeshVisualizer,ValueDisplayInfo,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\InteractionVolume.cs,DisplaySizeInfo,The following statement contains a magic number: if (measureDisplayImage == null || measureDisplayedString != displayString)  			{  				measureDisplayedString = displayString;  				TypeFacePrinter printer = new TypeFacePrinter(measureDisplayedString' 16);  				TypeFacePrinter unitPrinter = new TypeFacePrinter(unitsString' 10);  				Double unitPrinterOffset = 1;    				BorderDouble margin = new BorderDouble(5);  				printer.Origin = new Vector2(margin.Left' margin.Bottom);  				RectangleDouble bounds = printer.LocalBounds;    				unitPrinter.Origin = new Vector2(bounds.Right + unitPrinterOffset' margin.Bottom);  				RectangleDouble unitPrinterBounds = unitPrinter.LocalBounds;    				measureDisplayImage = new ImageBuffer((int)(bounds.Width + margin.Width + unitPrinterBounds.Width + unitPrinterOffset)' (int)(bounds.Height + margin.Height));  				// make sure the texture has mipmaps (so it can reduce well)  				ImageGlPlugin glPlugin = ImageGlPlugin.GetImageGlPlugin(measureDisplayImage' true);  				Graphics2D widthGraphics = measureDisplayImage.NewGraphics2D();  				widthGraphics.Clear(new RGBA_Bytes(RGBA_Bytes.White' 128));  				printer.Render(widthGraphics' RGBA_Bytes.Black);  				unitPrinter.Render(widthGraphics' RGBA_Bytes.Black);  			}
Magic Number,MatterHackers.MeshVisualizer,ValueDisplayInfo,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\InteractionVolume.cs,DisplaySizeInfo,The following statement contains a magic number: if (measureDisplayImage == null || measureDisplayedString != displayString)  			{  				measureDisplayedString = displayString;  				TypeFacePrinter printer = new TypeFacePrinter(measureDisplayedString' 16);  				TypeFacePrinter unitPrinter = new TypeFacePrinter(unitsString' 10);  				Double unitPrinterOffset = 1;    				BorderDouble margin = new BorderDouble(5);  				printer.Origin = new Vector2(margin.Left' margin.Bottom);  				RectangleDouble bounds = printer.LocalBounds;    				unitPrinter.Origin = new Vector2(bounds.Right + unitPrinterOffset' margin.Bottom);  				RectangleDouble unitPrinterBounds = unitPrinter.LocalBounds;    				measureDisplayImage = new ImageBuffer((int)(bounds.Width + margin.Width + unitPrinterBounds.Width + unitPrinterOffset)' (int)(bounds.Height + margin.Height));  				// make sure the texture has mipmaps (so it can reduce well)  				ImageGlPlugin glPlugin = ImageGlPlugin.GetImageGlPlugin(measureDisplayImage' true);  				Graphics2D widthGraphics = measureDisplayImage.NewGraphics2D();  				widthGraphics.Clear(new RGBA_Bytes(RGBA_Bytes.White' 128));  				printer.Render(widthGraphics' RGBA_Bytes.Black);  				unitPrinter.Render(widthGraphics' RGBA_Bytes.Black);  			}
Magic Number,MatterHackers.MeshVisualizer,ValueDisplayInfo,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\InteractionVolume.cs,DisplaySizeInfo,The following statement contains a magic number: if (measureDisplayImage == null || measureDisplayedString != displayString)  			{  				measureDisplayedString = displayString;  				TypeFacePrinter printer = new TypeFacePrinter(measureDisplayedString' 16);  				TypeFacePrinter unitPrinter = new TypeFacePrinter(unitsString' 10);  				Double unitPrinterOffset = 1;    				BorderDouble margin = new BorderDouble(5);  				printer.Origin = new Vector2(margin.Left' margin.Bottom);  				RectangleDouble bounds = printer.LocalBounds;    				unitPrinter.Origin = new Vector2(bounds.Right + unitPrinterOffset' margin.Bottom);  				RectangleDouble unitPrinterBounds = unitPrinter.LocalBounds;    				measureDisplayImage = new ImageBuffer((int)(bounds.Width + margin.Width + unitPrinterBounds.Width + unitPrinterOffset)' (int)(bounds.Height + margin.Height));  				// make sure the texture has mipmaps (so it can reduce well)  				ImageGlPlugin glPlugin = ImageGlPlugin.GetImageGlPlugin(measureDisplayImage' true);  				Graphics2D widthGraphics = measureDisplayImage.NewGraphics2D();  				widthGraphics.Clear(new RGBA_Bytes(RGBA_Bytes.White' 128));  				printer.Render(widthGraphics' RGBA_Bytes.Black);  				unitPrinter.Render(widthGraphics' RGBA_Bytes.Black);  			}
Magic Number,MatterHackers.MeshVisualizer,ValueDisplayInfo,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\InteractionVolume.cs,DisplaySizeInfo,The following statement contains a magic number: widthDisplayCenter -= new Vector2(measureDisplayImage.Width / 2' measureDisplayImage.Height / 2);
Magic Number,MatterHackers.MeshVisualizer,ValueDisplayInfo,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\InteractionVolume.cs,DisplaySizeInfo,The following statement contains a magic number: widthDisplayCenter -= new Vector2(measureDisplayImage.Width / 2' measureDisplayImage.Height / 2);
Magic Number,MatterHackers.MeshVisualizer,InteractionVolume,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\InteractionVolume.cs,DrawMeasureLine,The following statement contains a magic number: if (direction.LengthSquared > 0  				&& (arrows.HasFlag(LineArrows.Start) || arrows.HasFlag(LineArrows.End)))  			{  				PathStorage arrow = new PathStorage();  				arrow.MoveTo(-3' -5);  				arrow.LineTo(0' 0);  				arrow.LineTo(3' -5);  				if (arrows.HasFlag(LineArrows.End))  				{  					double rotation = Math.Atan2(direction.y' direction.x);  					IVertexSource correctRotation = new VertexSourceApplyTransform(arrow' Affine.NewRotation(rotation - MathHelper.Tau / 4));  					IVertexSource inPosition = new VertexSourceApplyTransform(correctRotation' Affine.NewTranslation(lineEnd));  					graphics2D.Render(inPosition' RGBA_Bytes.Black);  				}  				if (arrows.HasFlag(LineArrows.Start))  				{  					double rotation = Math.Atan2(direction.y' direction.x) + MathHelper.Tau / 2;  					IVertexSource correctRotation = new VertexSourceApplyTransform(arrow' Affine.NewRotation(rotation - MathHelper.Tau / 4));  					IVertexSource inPosition = new VertexSourceApplyTransform(correctRotation' Affine.NewTranslation(lineStart));  					graphics2D.Render(inPosition' RGBA_Bytes.Black);  				}  			}
Magic Number,MatterHackers.MeshVisualizer,InteractionVolume,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\InteractionVolume.cs,DrawMeasureLine,The following statement contains a magic number: if (direction.LengthSquared > 0  				&& (arrows.HasFlag(LineArrows.Start) || arrows.HasFlag(LineArrows.End)))  			{  				PathStorage arrow = new PathStorage();  				arrow.MoveTo(-3' -5);  				arrow.LineTo(0' 0);  				arrow.LineTo(3' -5);  				if (arrows.HasFlag(LineArrows.End))  				{  					double rotation = Math.Atan2(direction.y' direction.x);  					IVertexSource correctRotation = new VertexSourceApplyTransform(arrow' Affine.NewRotation(rotation - MathHelper.Tau / 4));  					IVertexSource inPosition = new VertexSourceApplyTransform(correctRotation' Affine.NewTranslation(lineEnd));  					graphics2D.Render(inPosition' RGBA_Bytes.Black);  				}  				if (arrows.HasFlag(LineArrows.Start))  				{  					double rotation = Math.Atan2(direction.y' direction.x) + MathHelper.Tau / 2;  					IVertexSource correctRotation = new VertexSourceApplyTransform(arrow' Affine.NewRotation(rotation - MathHelper.Tau / 4));  					IVertexSource inPosition = new VertexSourceApplyTransform(correctRotation' Affine.NewTranslation(lineStart));  					graphics2D.Render(inPosition' RGBA_Bytes.Black);  				}  			}
Magic Number,MatterHackers.MeshVisualizer,InteractionVolume,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\InteractionVolume.cs,DrawMeasureLine,The following statement contains a magic number: if (direction.LengthSquared > 0  				&& (arrows.HasFlag(LineArrows.Start) || arrows.HasFlag(LineArrows.End)))  			{  				PathStorage arrow = new PathStorage();  				arrow.MoveTo(-3' -5);  				arrow.LineTo(0' 0);  				arrow.LineTo(3' -5);  				if (arrows.HasFlag(LineArrows.End))  				{  					double rotation = Math.Atan2(direction.y' direction.x);  					IVertexSource correctRotation = new VertexSourceApplyTransform(arrow' Affine.NewRotation(rotation - MathHelper.Tau / 4));  					IVertexSource inPosition = new VertexSourceApplyTransform(correctRotation' Affine.NewTranslation(lineEnd));  					graphics2D.Render(inPosition' RGBA_Bytes.Black);  				}  				if (arrows.HasFlag(LineArrows.Start))  				{  					double rotation = Math.Atan2(direction.y' direction.x) + MathHelper.Tau / 2;  					IVertexSource correctRotation = new VertexSourceApplyTransform(arrow' Affine.NewRotation(rotation - MathHelper.Tau / 4));  					IVertexSource inPosition = new VertexSourceApplyTransform(correctRotation' Affine.NewTranslation(lineStart));  					graphics2D.Render(inPosition' RGBA_Bytes.Black);  				}  			}
Magic Number,MatterHackers.MeshVisualizer,InteractionVolume,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\InteractionVolume.cs,DrawMeasureLine,The following statement contains a magic number: if (direction.LengthSquared > 0  				&& (arrows.HasFlag(LineArrows.Start) || arrows.HasFlag(LineArrows.End)))  			{  				PathStorage arrow = new PathStorage();  				arrow.MoveTo(-3' -5);  				arrow.LineTo(0' 0);  				arrow.LineTo(3' -5);  				if (arrows.HasFlag(LineArrows.End))  				{  					double rotation = Math.Atan2(direction.y' direction.x);  					IVertexSource correctRotation = new VertexSourceApplyTransform(arrow' Affine.NewRotation(rotation - MathHelper.Tau / 4));  					IVertexSource inPosition = new VertexSourceApplyTransform(correctRotation' Affine.NewTranslation(lineEnd));  					graphics2D.Render(inPosition' RGBA_Bytes.Black);  				}  				if (arrows.HasFlag(LineArrows.Start))  				{  					double rotation = Math.Atan2(direction.y' direction.x) + MathHelper.Tau / 2;  					IVertexSource correctRotation = new VertexSourceApplyTransform(arrow' Affine.NewRotation(rotation - MathHelper.Tau / 4));  					IVertexSource inPosition = new VertexSourceApplyTransform(correctRotation' Affine.NewTranslation(lineStart));  					graphics2D.Render(inPosition' RGBA_Bytes.Black);  				}  			}
Magic Number,MatterHackers.MeshVisualizer,InteractionVolume,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\InteractionVolume.cs,DrawMeasureLine,The following statement contains a magic number: if (direction.LengthSquared > 0  				&& (arrows.HasFlag(LineArrows.Start) || arrows.HasFlag(LineArrows.End)))  			{  				PathStorage arrow = new PathStorage();  				arrow.MoveTo(-3' -5);  				arrow.LineTo(0' 0);  				arrow.LineTo(3' -5);  				if (arrows.HasFlag(LineArrows.End))  				{  					double rotation = Math.Atan2(direction.y' direction.x);  					IVertexSource correctRotation = new VertexSourceApplyTransform(arrow' Affine.NewRotation(rotation - MathHelper.Tau / 4));  					IVertexSource inPosition = new VertexSourceApplyTransform(correctRotation' Affine.NewTranslation(lineEnd));  					graphics2D.Render(inPosition' RGBA_Bytes.Black);  				}  				if (arrows.HasFlag(LineArrows.Start))  				{  					double rotation = Math.Atan2(direction.y' direction.x) + MathHelper.Tau / 2;  					IVertexSource correctRotation = new VertexSourceApplyTransform(arrow' Affine.NewRotation(rotation - MathHelper.Tau / 4));  					IVertexSource inPosition = new VertexSourceApplyTransform(correctRotation' Affine.NewTranslation(lineStart));  					graphics2D.Render(inPosition' RGBA_Bytes.Black);  				}  			}
Magic Number,MatterHackers.MeshVisualizer,InteractionVolume,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\InteractionVolume.cs,DrawMeasureLine,The following statement contains a magic number: if (direction.LengthSquared > 0  				&& (arrows.HasFlag(LineArrows.Start) || arrows.HasFlag(LineArrows.End)))  			{  				PathStorage arrow = new PathStorage();  				arrow.MoveTo(-3' -5);  				arrow.LineTo(0' 0);  				arrow.LineTo(3' -5);  				if (arrows.HasFlag(LineArrows.End))  				{  					double rotation = Math.Atan2(direction.y' direction.x);  					IVertexSource correctRotation = new VertexSourceApplyTransform(arrow' Affine.NewRotation(rotation - MathHelper.Tau / 4));  					IVertexSource inPosition = new VertexSourceApplyTransform(correctRotation' Affine.NewTranslation(lineEnd));  					graphics2D.Render(inPosition' RGBA_Bytes.Black);  				}  				if (arrows.HasFlag(LineArrows.Start))  				{  					double rotation = Math.Atan2(direction.y' direction.x) + MathHelper.Tau / 2;  					IVertexSource correctRotation = new VertexSourceApplyTransform(arrow' Affine.NewRotation(rotation - MathHelper.Tau / 4));  					IVertexSource inPosition = new VertexSourceApplyTransform(correctRotation' Affine.NewTranslation(lineStart));  					graphics2D.Render(inPosition' RGBA_Bytes.Black);  				}  			}
Magic Number,MatterHackers.MeshVisualizer,InteractionVolume,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\InteractionVolume.cs,DrawMeasureLine,The following statement contains a magic number: if (direction.LengthSquared > 0  				&& (arrows.HasFlag(LineArrows.Start) || arrows.HasFlag(LineArrows.End)))  			{  				PathStorage arrow = new PathStorage();  				arrow.MoveTo(-3' -5);  				arrow.LineTo(0' 0);  				arrow.LineTo(3' -5);  				if (arrows.HasFlag(LineArrows.End))  				{  					double rotation = Math.Atan2(direction.y' direction.x);  					IVertexSource correctRotation = new VertexSourceApplyTransform(arrow' Affine.NewRotation(rotation - MathHelper.Tau / 4));  					IVertexSource inPosition = new VertexSourceApplyTransform(correctRotation' Affine.NewTranslation(lineEnd));  					graphics2D.Render(inPosition' RGBA_Bytes.Black);  				}  				if (arrows.HasFlag(LineArrows.Start))  				{  					double rotation = Math.Atan2(direction.y' direction.x) + MathHelper.Tau / 2;  					IVertexSource correctRotation = new VertexSourceApplyTransform(arrow' Affine.NewRotation(rotation - MathHelper.Tau / 4));  					IVertexSource inPosition = new VertexSourceApplyTransform(correctRotation' Affine.NewTranslation(lineStart));  					graphics2D.Render(inPosition' RGBA_Bytes.Black);  				}  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,MeshViewerWidget,The following statement contains a magic number: BedColor = new RGBA_Floats(.8' .8' .8' .7).GetAsRGBA_Bytes();
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,MeshViewerWidget,The following statement contains a magic number: BedColor = new RGBA_Floats(.8' .8' .8' .7).GetAsRGBA_Bytes();
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,MeshViewerWidget,The following statement contains a magic number: BedColor = new RGBA_Floats(.8' .8' .8' .7).GetAsRGBA_Bytes();
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,MeshViewerWidget,The following statement contains a magic number: BedColor = new RGBA_Floats(.8' .8' .8' .7).GetAsRGBA_Bytes();
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,MeshViewerWidget,The following statement contains a magic number: BuildVolumeColor = new RGBA_Floats(.2' .8' .3' .2).GetAsRGBA_Bytes();
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,MeshViewerWidget,The following statement contains a magic number: BuildVolumeColor = new RGBA_Floats(.2' .8' .3' .2).GetAsRGBA_Bytes();
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,MeshViewerWidget,The following statement contains a magic number: BuildVolumeColor = new RGBA_Floats(.2' .8' .3' .2).GetAsRGBA_Bytes();
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,MeshViewerWidget,The following statement contains a magic number: BuildVolumeColor = new RGBA_Floats(.2' .8' .3' .2).GetAsRGBA_Bytes();
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,GetMaterialColor,The following statement contains a magic number: return RGBA_Floats.FromHSL((materialIndexBase1 % 4) / 4.0' .5' .5).GetAsRGBA_Bytes();
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,GetMaterialColor,The following statement contains a magic number: return RGBA_Floats.FromHSL((materialIndexBase1 % 4) / 4.0' .5' .5).GetAsRGBA_Bytes();
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,GetMaterialColor,The following statement contains a magic number: return RGBA_Floats.FromHSL((materialIndexBase1 % 4) / 4.0' .5' .5).GetAsRGBA_Bytes();
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,GetMaterialColor,The following statement contains a magic number: return RGBA_Floats.FromHSL((materialIndexBase1 % 4) / 4.0' .5' .5).GetAsRGBA_Bytes();
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,GetSelectedMaterialColor,The following statement contains a magic number: saturation0To1 = Math.Min(1' saturation0To1 * 2);
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,GetSelectedMaterialColor,The following statement contains a magic number: lightness0To1 = Math.Min(1' lightness0To1 * 1.2);
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreatePrintBed,The following statement contains a magic number: double divisor = 10;
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreatePrintBed,The following statement contains a magic number: if (sizeForMarking > 1000)  			{  				divisor = 100;  				skip = 10;  			}  			else if (sizeForMarking > 300)  			{  				divisor = 50;  				skip = 5;  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreatePrintBed,The following statement contains a magic number: if (sizeForMarking > 1000)  			{  				divisor = 100;  				skip = 10;  			}  			else if (sizeForMarking > 300)  			{  				divisor = 50;  				skip = 5;  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreatePrintBed,The following statement contains a magic number: if (sizeForMarking > 1000)  			{  				divisor = 100;  				skip = 10;  			}  			else if (sizeForMarking > 300)  			{  				divisor = 50;  				skip = 5;  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreatePrintBed,The following statement contains a magic number: if (sizeForMarking > 1000)  			{  				divisor = 100;  				skip = 10;  			}  			else if (sizeForMarking > 300)  			{  				divisor = 50;  				skip = 5;  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreatePrintBed,The following statement contains a magic number: if (sizeForMarking > 1000)  			{  				divisor = 100;  				skip = 10;  			}  			else if (sizeForMarking > 300)  			{  				divisor = 50;  				skip = 5;  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreatePrintBed,The following statement contains a magic number: if (sizeForMarking > 1000)  			{  				divisor = 100;  				skip = 10;  			}  			else if (sizeForMarking > 300)  			{  				divisor = 50;  				skip = 5;  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreatePrintBed,The following statement contains a magic number: switch (bedShape)  			{  				case BedShape.Rectangular:  					if (displayVolumeToBuild.z > 0)  					{  						buildVolume = PlatonicSolids.CreateCube(displayVolumeToBuild);  						foreach (Vertex vertex in buildVolume.Vertices)  						{  							vertex.Position = vertex.Position + new Vector3(0' 0' displayVolumeToBuild.z / 2);  						}  					}  					CreateRectangularBedGridImage(displayVolumeToBuild' bedCenter' divisor' skip);  					printerBed = PlatonicSolids.CreateCube(displayVolumeToBuild.x' displayVolumeToBuild.y' 4);  					{  						Face face = printerBed.Faces[0];  						CommonShapes.PlaceTextureOnFace(face' BedImage);  					}  					break;    				case BedShape.Circular:  					{  						if (displayVolumeToBuild.z > 0)  						{  							buildVolume = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.x / 2' displayVolumeToBuild.y / 2)' displayVolumeToBuild.z);  							foreach (Vertex vertex in buildVolume.Vertices)  							{  								vertex.Position = vertex.Position + new Vector3(0' 0' .2);  							}  						}  						CreateCircularBedGridImage((int)(displayVolumeToBuild.x / divisor)' (int)(displayVolumeToBuild.y / divisor)' skip);  						printerBed = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.x / 2' displayVolumeToBuild.y / 2)' 2);  						{  							foreach (Face face in printerBed.Faces)  							{  								if (face.normal.z > 0)  								{  									FaceTextureData faceData = FaceTextureData.Get(face);  									faceData.Textures.Add(BedImage);  									foreach (FaceEdge faceEdge in face.FaceEdges())  									{  										FaceEdgeTextureUvData edgeUV = FaceEdgeTextureUvData.Get(faceEdge);  										edgeUV.TextureUV.Add(new Vector2((displayVolumeToBuild.x / 2 + faceEdge.firstVertex.Position.x) / displayVolumeToBuild.x'  											(displayVolumeToBuild.y / 2 + faceEdge.firstVertex.Position.y) / displayVolumeToBuild.y));  									}  								}  							}  						}  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreatePrintBed,The following statement contains a magic number: switch (bedShape)  			{  				case BedShape.Rectangular:  					if (displayVolumeToBuild.z > 0)  					{  						buildVolume = PlatonicSolids.CreateCube(displayVolumeToBuild);  						foreach (Vertex vertex in buildVolume.Vertices)  						{  							vertex.Position = vertex.Position + new Vector3(0' 0' displayVolumeToBuild.z / 2);  						}  					}  					CreateRectangularBedGridImage(displayVolumeToBuild' bedCenter' divisor' skip);  					printerBed = PlatonicSolids.CreateCube(displayVolumeToBuild.x' displayVolumeToBuild.y' 4);  					{  						Face face = printerBed.Faces[0];  						CommonShapes.PlaceTextureOnFace(face' BedImage);  					}  					break;    				case BedShape.Circular:  					{  						if (displayVolumeToBuild.z > 0)  						{  							buildVolume = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.x / 2' displayVolumeToBuild.y / 2)' displayVolumeToBuild.z);  							foreach (Vertex vertex in buildVolume.Vertices)  							{  								vertex.Position = vertex.Position + new Vector3(0' 0' .2);  							}  						}  						CreateCircularBedGridImage((int)(displayVolumeToBuild.x / divisor)' (int)(displayVolumeToBuild.y / divisor)' skip);  						printerBed = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.x / 2' displayVolumeToBuild.y / 2)' 2);  						{  							foreach (Face face in printerBed.Faces)  							{  								if (face.normal.z > 0)  								{  									FaceTextureData faceData = FaceTextureData.Get(face);  									faceData.Textures.Add(BedImage);  									foreach (FaceEdge faceEdge in face.FaceEdges())  									{  										FaceEdgeTextureUvData edgeUV = FaceEdgeTextureUvData.Get(faceEdge);  										edgeUV.TextureUV.Add(new Vector2((displayVolumeToBuild.x / 2 + faceEdge.firstVertex.Position.x) / displayVolumeToBuild.x'  											(displayVolumeToBuild.y / 2 + faceEdge.firstVertex.Position.y) / displayVolumeToBuild.y));  									}  								}  							}  						}  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreatePrintBed,The following statement contains a magic number: switch (bedShape)  			{  				case BedShape.Rectangular:  					if (displayVolumeToBuild.z > 0)  					{  						buildVolume = PlatonicSolids.CreateCube(displayVolumeToBuild);  						foreach (Vertex vertex in buildVolume.Vertices)  						{  							vertex.Position = vertex.Position + new Vector3(0' 0' displayVolumeToBuild.z / 2);  						}  					}  					CreateRectangularBedGridImage(displayVolumeToBuild' bedCenter' divisor' skip);  					printerBed = PlatonicSolids.CreateCube(displayVolumeToBuild.x' displayVolumeToBuild.y' 4);  					{  						Face face = printerBed.Faces[0];  						CommonShapes.PlaceTextureOnFace(face' BedImage);  					}  					break;    				case BedShape.Circular:  					{  						if (displayVolumeToBuild.z > 0)  						{  							buildVolume = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.x / 2' displayVolumeToBuild.y / 2)' displayVolumeToBuild.z);  							foreach (Vertex vertex in buildVolume.Vertices)  							{  								vertex.Position = vertex.Position + new Vector3(0' 0' .2);  							}  						}  						CreateCircularBedGridImage((int)(displayVolumeToBuild.x / divisor)' (int)(displayVolumeToBuild.y / divisor)' skip);  						printerBed = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.x / 2' displayVolumeToBuild.y / 2)' 2);  						{  							foreach (Face face in printerBed.Faces)  							{  								if (face.normal.z > 0)  								{  									FaceTextureData faceData = FaceTextureData.Get(face);  									faceData.Textures.Add(BedImage);  									foreach (FaceEdge faceEdge in face.FaceEdges())  									{  										FaceEdgeTextureUvData edgeUV = FaceEdgeTextureUvData.Get(faceEdge);  										edgeUV.TextureUV.Add(new Vector2((displayVolumeToBuild.x / 2 + faceEdge.firstVertex.Position.x) / displayVolumeToBuild.x'  											(displayVolumeToBuild.y / 2 + faceEdge.firstVertex.Position.y) / displayVolumeToBuild.y));  									}  								}  							}  						}  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreatePrintBed,The following statement contains a magic number: switch (bedShape)  			{  				case BedShape.Rectangular:  					if (displayVolumeToBuild.z > 0)  					{  						buildVolume = PlatonicSolids.CreateCube(displayVolumeToBuild);  						foreach (Vertex vertex in buildVolume.Vertices)  						{  							vertex.Position = vertex.Position + new Vector3(0' 0' displayVolumeToBuild.z / 2);  						}  					}  					CreateRectangularBedGridImage(displayVolumeToBuild' bedCenter' divisor' skip);  					printerBed = PlatonicSolids.CreateCube(displayVolumeToBuild.x' displayVolumeToBuild.y' 4);  					{  						Face face = printerBed.Faces[0];  						CommonShapes.PlaceTextureOnFace(face' BedImage);  					}  					break;    				case BedShape.Circular:  					{  						if (displayVolumeToBuild.z > 0)  						{  							buildVolume = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.x / 2' displayVolumeToBuild.y / 2)' displayVolumeToBuild.z);  							foreach (Vertex vertex in buildVolume.Vertices)  							{  								vertex.Position = vertex.Position + new Vector3(0' 0' .2);  							}  						}  						CreateCircularBedGridImage((int)(displayVolumeToBuild.x / divisor)' (int)(displayVolumeToBuild.y / divisor)' skip);  						printerBed = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.x / 2' displayVolumeToBuild.y / 2)' 2);  						{  							foreach (Face face in printerBed.Faces)  							{  								if (face.normal.z > 0)  								{  									FaceTextureData faceData = FaceTextureData.Get(face);  									faceData.Textures.Add(BedImage);  									foreach (FaceEdge faceEdge in face.FaceEdges())  									{  										FaceEdgeTextureUvData edgeUV = FaceEdgeTextureUvData.Get(faceEdge);  										edgeUV.TextureUV.Add(new Vector2((displayVolumeToBuild.x / 2 + faceEdge.firstVertex.Position.x) / displayVolumeToBuild.x'  											(displayVolumeToBuild.y / 2 + faceEdge.firstVertex.Position.y) / displayVolumeToBuild.y));  									}  								}  							}  						}  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreatePrintBed,The following statement contains a magic number: switch (bedShape)  			{  				case BedShape.Rectangular:  					if (displayVolumeToBuild.z > 0)  					{  						buildVolume = PlatonicSolids.CreateCube(displayVolumeToBuild);  						foreach (Vertex vertex in buildVolume.Vertices)  						{  							vertex.Position = vertex.Position + new Vector3(0' 0' displayVolumeToBuild.z / 2);  						}  					}  					CreateRectangularBedGridImage(displayVolumeToBuild' bedCenter' divisor' skip);  					printerBed = PlatonicSolids.CreateCube(displayVolumeToBuild.x' displayVolumeToBuild.y' 4);  					{  						Face face = printerBed.Faces[0];  						CommonShapes.PlaceTextureOnFace(face' BedImage);  					}  					break;    				case BedShape.Circular:  					{  						if (displayVolumeToBuild.z > 0)  						{  							buildVolume = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.x / 2' displayVolumeToBuild.y / 2)' displayVolumeToBuild.z);  							foreach (Vertex vertex in buildVolume.Vertices)  							{  								vertex.Position = vertex.Position + new Vector3(0' 0' .2);  							}  						}  						CreateCircularBedGridImage((int)(displayVolumeToBuild.x / divisor)' (int)(displayVolumeToBuild.y / divisor)' skip);  						printerBed = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.x / 2' displayVolumeToBuild.y / 2)' 2);  						{  							foreach (Face face in printerBed.Faces)  							{  								if (face.normal.z > 0)  								{  									FaceTextureData faceData = FaceTextureData.Get(face);  									faceData.Textures.Add(BedImage);  									foreach (FaceEdge faceEdge in face.FaceEdges())  									{  										FaceEdgeTextureUvData edgeUV = FaceEdgeTextureUvData.Get(faceEdge);  										edgeUV.TextureUV.Add(new Vector2((displayVolumeToBuild.x / 2 + faceEdge.firstVertex.Position.x) / displayVolumeToBuild.x'  											(displayVolumeToBuild.y / 2 + faceEdge.firstVertex.Position.y) / displayVolumeToBuild.y));  									}  								}  							}  						}  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreatePrintBed,The following statement contains a magic number: switch (bedShape)  			{  				case BedShape.Rectangular:  					if (displayVolumeToBuild.z > 0)  					{  						buildVolume = PlatonicSolids.CreateCube(displayVolumeToBuild);  						foreach (Vertex vertex in buildVolume.Vertices)  						{  							vertex.Position = vertex.Position + new Vector3(0' 0' displayVolumeToBuild.z / 2);  						}  					}  					CreateRectangularBedGridImage(displayVolumeToBuild' bedCenter' divisor' skip);  					printerBed = PlatonicSolids.CreateCube(displayVolumeToBuild.x' displayVolumeToBuild.y' 4);  					{  						Face face = printerBed.Faces[0];  						CommonShapes.PlaceTextureOnFace(face' BedImage);  					}  					break;    				case BedShape.Circular:  					{  						if (displayVolumeToBuild.z > 0)  						{  							buildVolume = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.x / 2' displayVolumeToBuild.y / 2)' displayVolumeToBuild.z);  							foreach (Vertex vertex in buildVolume.Vertices)  							{  								vertex.Position = vertex.Position + new Vector3(0' 0' .2);  							}  						}  						CreateCircularBedGridImage((int)(displayVolumeToBuild.x / divisor)' (int)(displayVolumeToBuild.y / divisor)' skip);  						printerBed = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.x / 2' displayVolumeToBuild.y / 2)' 2);  						{  							foreach (Face face in printerBed.Faces)  							{  								if (face.normal.z > 0)  								{  									FaceTextureData faceData = FaceTextureData.Get(face);  									faceData.Textures.Add(BedImage);  									foreach (FaceEdge faceEdge in face.FaceEdges())  									{  										FaceEdgeTextureUvData edgeUV = FaceEdgeTextureUvData.Get(faceEdge);  										edgeUV.TextureUV.Add(new Vector2((displayVolumeToBuild.x / 2 + faceEdge.firstVertex.Position.x) / displayVolumeToBuild.x'  											(displayVolumeToBuild.y / 2 + faceEdge.firstVertex.Position.y) / displayVolumeToBuild.y));  									}  								}  							}  						}  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreatePrintBed,The following statement contains a magic number: switch (bedShape)  			{  				case BedShape.Rectangular:  					if (displayVolumeToBuild.z > 0)  					{  						buildVolume = PlatonicSolids.CreateCube(displayVolumeToBuild);  						foreach (Vertex vertex in buildVolume.Vertices)  						{  							vertex.Position = vertex.Position + new Vector3(0' 0' displayVolumeToBuild.z / 2);  						}  					}  					CreateRectangularBedGridImage(displayVolumeToBuild' bedCenter' divisor' skip);  					printerBed = PlatonicSolids.CreateCube(displayVolumeToBuild.x' displayVolumeToBuild.y' 4);  					{  						Face face = printerBed.Faces[0];  						CommonShapes.PlaceTextureOnFace(face' BedImage);  					}  					break;    				case BedShape.Circular:  					{  						if (displayVolumeToBuild.z > 0)  						{  							buildVolume = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.x / 2' displayVolumeToBuild.y / 2)' displayVolumeToBuild.z);  							foreach (Vertex vertex in buildVolume.Vertices)  							{  								vertex.Position = vertex.Position + new Vector3(0' 0' .2);  							}  						}  						CreateCircularBedGridImage((int)(displayVolumeToBuild.x / divisor)' (int)(displayVolumeToBuild.y / divisor)' skip);  						printerBed = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.x / 2' displayVolumeToBuild.y / 2)' 2);  						{  							foreach (Face face in printerBed.Faces)  							{  								if (face.normal.z > 0)  								{  									FaceTextureData faceData = FaceTextureData.Get(face);  									faceData.Textures.Add(BedImage);  									foreach (FaceEdge faceEdge in face.FaceEdges())  									{  										FaceEdgeTextureUvData edgeUV = FaceEdgeTextureUvData.Get(faceEdge);  										edgeUV.TextureUV.Add(new Vector2((displayVolumeToBuild.x / 2 + faceEdge.firstVertex.Position.x) / displayVolumeToBuild.x'  											(displayVolumeToBuild.y / 2 + faceEdge.firstVertex.Position.y) / displayVolumeToBuild.y));  									}  								}  							}  						}  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreatePrintBed,The following statement contains a magic number: switch (bedShape)  			{  				case BedShape.Rectangular:  					if (displayVolumeToBuild.z > 0)  					{  						buildVolume = PlatonicSolids.CreateCube(displayVolumeToBuild);  						foreach (Vertex vertex in buildVolume.Vertices)  						{  							vertex.Position = vertex.Position + new Vector3(0' 0' displayVolumeToBuild.z / 2);  						}  					}  					CreateRectangularBedGridImage(displayVolumeToBuild' bedCenter' divisor' skip);  					printerBed = PlatonicSolids.CreateCube(displayVolumeToBuild.x' displayVolumeToBuild.y' 4);  					{  						Face face = printerBed.Faces[0];  						CommonShapes.PlaceTextureOnFace(face' BedImage);  					}  					break;    				case BedShape.Circular:  					{  						if (displayVolumeToBuild.z > 0)  						{  							buildVolume = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.x / 2' displayVolumeToBuild.y / 2)' displayVolumeToBuild.z);  							foreach (Vertex vertex in buildVolume.Vertices)  							{  								vertex.Position = vertex.Position + new Vector3(0' 0' .2);  							}  						}  						CreateCircularBedGridImage((int)(displayVolumeToBuild.x / divisor)' (int)(displayVolumeToBuild.y / divisor)' skip);  						printerBed = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.x / 2' displayVolumeToBuild.y / 2)' 2);  						{  							foreach (Face face in printerBed.Faces)  							{  								if (face.normal.z > 0)  								{  									FaceTextureData faceData = FaceTextureData.Get(face);  									faceData.Textures.Add(BedImage);  									foreach (FaceEdge faceEdge in face.FaceEdges())  									{  										FaceEdgeTextureUvData edgeUV = FaceEdgeTextureUvData.Get(faceEdge);  										edgeUV.TextureUV.Add(new Vector2((displayVolumeToBuild.x / 2 + faceEdge.firstVertex.Position.x) / displayVolumeToBuild.x'  											(displayVolumeToBuild.y / 2 + faceEdge.firstVertex.Position.y) / displayVolumeToBuild.y));  									}  								}  							}  						}  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreatePrintBed,The following statement contains a magic number: switch (bedShape)  			{  				case BedShape.Rectangular:  					if (displayVolumeToBuild.z > 0)  					{  						buildVolume = PlatonicSolids.CreateCube(displayVolumeToBuild);  						foreach (Vertex vertex in buildVolume.Vertices)  						{  							vertex.Position = vertex.Position + new Vector3(0' 0' displayVolumeToBuild.z / 2);  						}  					}  					CreateRectangularBedGridImage(displayVolumeToBuild' bedCenter' divisor' skip);  					printerBed = PlatonicSolids.CreateCube(displayVolumeToBuild.x' displayVolumeToBuild.y' 4);  					{  						Face face = printerBed.Faces[0];  						CommonShapes.PlaceTextureOnFace(face' BedImage);  					}  					break;    				case BedShape.Circular:  					{  						if (displayVolumeToBuild.z > 0)  						{  							buildVolume = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.x / 2' displayVolumeToBuild.y / 2)' displayVolumeToBuild.z);  							foreach (Vertex vertex in buildVolume.Vertices)  							{  								vertex.Position = vertex.Position + new Vector3(0' 0' .2);  							}  						}  						CreateCircularBedGridImage((int)(displayVolumeToBuild.x / divisor)' (int)(displayVolumeToBuild.y / divisor)' skip);  						printerBed = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.x / 2' displayVolumeToBuild.y / 2)' 2);  						{  							foreach (Face face in printerBed.Faces)  							{  								if (face.normal.z > 0)  								{  									FaceTextureData faceData = FaceTextureData.Get(face);  									faceData.Textures.Add(BedImage);  									foreach (FaceEdge faceEdge in face.FaceEdges())  									{  										FaceEdgeTextureUvData edgeUV = FaceEdgeTextureUvData.Get(faceEdge);  										edgeUV.TextureUV.Add(new Vector2((displayVolumeToBuild.x / 2 + faceEdge.firstVertex.Position.x) / displayVolumeToBuild.x'  											(displayVolumeToBuild.y / 2 + faceEdge.firstVertex.Position.y) / displayVolumeToBuild.y));  									}  								}  							}  						}  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreatePrintBed,The following statement contains a magic number: switch (bedShape)  			{  				case BedShape.Rectangular:  					if (displayVolumeToBuild.z > 0)  					{  						buildVolume = PlatonicSolids.CreateCube(displayVolumeToBuild);  						foreach (Vertex vertex in buildVolume.Vertices)  						{  							vertex.Position = vertex.Position + new Vector3(0' 0' displayVolumeToBuild.z / 2);  						}  					}  					CreateRectangularBedGridImage(displayVolumeToBuild' bedCenter' divisor' skip);  					printerBed = PlatonicSolids.CreateCube(displayVolumeToBuild.x' displayVolumeToBuild.y' 4);  					{  						Face face = printerBed.Faces[0];  						CommonShapes.PlaceTextureOnFace(face' BedImage);  					}  					break;    				case BedShape.Circular:  					{  						if (displayVolumeToBuild.z > 0)  						{  							buildVolume = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.x / 2' displayVolumeToBuild.y / 2)' displayVolumeToBuild.z);  							foreach (Vertex vertex in buildVolume.Vertices)  							{  								vertex.Position = vertex.Position + new Vector3(0' 0' .2);  							}  						}  						CreateCircularBedGridImage((int)(displayVolumeToBuild.x / divisor)' (int)(displayVolumeToBuild.y / divisor)' skip);  						printerBed = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.x / 2' displayVolumeToBuild.y / 2)' 2);  						{  							foreach (Face face in printerBed.Faces)  							{  								if (face.normal.z > 0)  								{  									FaceTextureData faceData = FaceTextureData.Get(face);  									faceData.Textures.Add(BedImage);  									foreach (FaceEdge faceEdge in face.FaceEdges())  									{  										FaceEdgeTextureUvData edgeUV = FaceEdgeTextureUvData.Get(faceEdge);  										edgeUV.TextureUV.Add(new Vector2((displayVolumeToBuild.x / 2 + faceEdge.firstVertex.Position.x) / displayVolumeToBuild.x'  											(displayVolumeToBuild.y / 2 + faceEdge.firstVertex.Position.y) / displayVolumeToBuild.y));  									}  								}  							}  						}  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreatePrintBed,The following statement contains a magic number: foreach (Vertex vertex in printerBed.Vertices)  			{  				vertex.Position = vertex.Position - new Vector3(-bedCenter' 2.2);  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreatePrintBed,The following statement contains a magic number: if (buildVolume != null)  			{  				foreach (Vertex vertex in buildVolume.Vertices)  				{  					vertex.Position = vertex.Position - new Vector3(-bedCenter' 2.2);  				}  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,SetMeshAfterLoad,The following statement contains a magic number: if (loadedMeshGroups == null)  			{  				partProcessingInfo.centeredInfoText.Text = string.Format("Sorry! No 3D view available\nfor this file.");  			}  			else  			{  				CreateGlDataForMeshes(loadedMeshGroups);    				AxisAlignedBoundingBox bounds = new AxisAlignedBoundingBox(Vector3.Zero' Vector3.Zero);  				bool first = true;  				foreach (MeshGroup meshGroup in loadedMeshGroups)  				{  					if (first)  					{  						bounds = meshGroup.GetAxisAlignedBoundingBox();  						first = false;  					}  					else  					{  						bounds = AxisAlignedBoundingBox.Union(bounds' meshGroup.GetAxisAlignedBoundingBox());  					}  				}    				// add all the loaded meshes  				foreach (MeshGroup meshGroup in loadedMeshGroups)  				{  					meshTransforms.Add(Matrix4X4.Identity);  					MeshGroups.Add(meshGroup);  				}    				if (centerPart == CenterPartAfterLoad.DO)  				{  					// make sure the entire load is centered and on the bed  					Vector3 boundsCenter = (bounds.maxXYZ + bounds.minXYZ) / 2;  					for (int i = 0; i < MeshGroups.Count; i++)  					{  						meshTransforms[i] *= Matrix4X4.CreateTranslation(-boundsCenter + new Vector3(0' 0' bounds.ZSize / 2) + new Vector3(bedCenter));  					}  				}    				trackballTumbleWidget.TrackBallController = new TrackBallController();  				trackballTumbleWidget.OnBoundsChanged(null);    				ResetView();  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,SetMeshAfterLoad,The following statement contains a magic number: if (loadedMeshGroups == null)  			{  				partProcessingInfo.centeredInfoText.Text = string.Format("Sorry! No 3D view available\nfor this file.");  			}  			else  			{  				CreateGlDataForMeshes(loadedMeshGroups);    				AxisAlignedBoundingBox bounds = new AxisAlignedBoundingBox(Vector3.Zero' Vector3.Zero);  				bool first = true;  				foreach (MeshGroup meshGroup in loadedMeshGroups)  				{  					if (first)  					{  						bounds = meshGroup.GetAxisAlignedBoundingBox();  						first = false;  					}  					else  					{  						bounds = AxisAlignedBoundingBox.Union(bounds' meshGroup.GetAxisAlignedBoundingBox());  					}  				}    				// add all the loaded meshes  				foreach (MeshGroup meshGroup in loadedMeshGroups)  				{  					meshTransforms.Add(Matrix4X4.Identity);  					MeshGroups.Add(meshGroup);  				}    				if (centerPart == CenterPartAfterLoad.DO)  				{  					// make sure the entire load is centered and on the bed  					Vector3 boundsCenter = (bounds.maxXYZ + bounds.minXYZ) / 2;  					for (int i = 0; i < MeshGroups.Count; i++)  					{  						meshTransforms[i] *= Matrix4X4.CreateTranslation(-boundsCenter + new Vector3(0' 0' bounds.ZSize / 2) + new Vector3(bedCenter));  					}  				}    				trackballTumbleWidget.TrackBallController = new TrackBallController();  				trackballTumbleWidget.OnBoundsChanged(null);    				ResetView();  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,ResetView,The following statement contains a magic number: trackballTumbleWidget.TrackBallController.Scale = .03;
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,ResetView,The following statement contains a magic number: trackballTumbleWidget.TrackBallController.Rotate(Quaternion.FromEulerAngles(new Vector3(0' 0' MathHelper.Tau / 16)));
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,ResetView,The following statement contains a magic number: trackballTumbleWidget.TrackBallController.Rotate(Quaternion.FromEulerAngles(new Vector3(-MathHelper.Tau * .19' 0' 0)));
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateCircularBedGridImage,The following statement contains a magic number: BedImage = new ImageBuffer(1024' 1024);
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateCircularBedGridImage,The following statement contains a magic number: BedImage = new ImageBuffer(1024' 1024);
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateCircularBedGridImage,The following statement contains a magic number: {  				double lineDist = BedImage.Width / (double)linesInX;    				int count = 1;  				int pointSize = 16;  				graphics2D.DrawString(count.ToString()' 4' 4' pointSize' color: bedMarkingsColor);  				double currentRadius = lineDist;  				Vector2 bedCenter = new Vector2(BedImage.Width / 2' BedImage.Height / 2);  				for (double linePos = lineDist + BedImage.Width / 2; linePos < BedImage.Width; linePos += lineDist)  				{  					int linePosInt = (int)linePos;  					graphics2D.DrawString((count * increment).ToString()' linePos + 2' BedImage.Height / 2' pointSize' color: bedMarkingsColor);    					Ellipse circle = new Ellipse(bedCenter' currentRadius);  					Stroke outline = new Stroke(circle);  					graphics2D.Render(outline' bedMarkingsColor);  					currentRadius += lineDist;  					count++;  				}    				graphics2D.Line(0' BedImage.Height / 2' BedImage.Width' BedImage.Height / 2' bedMarkingsColor);  				graphics2D.Line(BedImage.Width / 2' 0' BedImage.Width / 2' BedImage.Height' bedMarkingsColor);  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateCircularBedGridImage,The following statement contains a magic number: {  				double lineDist = BedImage.Width / (double)linesInX;    				int count = 1;  				int pointSize = 16;  				graphics2D.DrawString(count.ToString()' 4' 4' pointSize' color: bedMarkingsColor);  				double currentRadius = lineDist;  				Vector2 bedCenter = new Vector2(BedImage.Width / 2' BedImage.Height / 2);  				for (double linePos = lineDist + BedImage.Width / 2; linePos < BedImage.Width; linePos += lineDist)  				{  					int linePosInt = (int)linePos;  					graphics2D.DrawString((count * increment).ToString()' linePos + 2' BedImage.Height / 2' pointSize' color: bedMarkingsColor);    					Ellipse circle = new Ellipse(bedCenter' currentRadius);  					Stroke outline = new Stroke(circle);  					graphics2D.Render(outline' bedMarkingsColor);  					currentRadius += lineDist;  					count++;  				}    				graphics2D.Line(0' BedImage.Height / 2' BedImage.Width' BedImage.Height / 2' bedMarkingsColor);  				graphics2D.Line(BedImage.Width / 2' 0' BedImage.Width / 2' BedImage.Height' bedMarkingsColor);  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateCircularBedGridImage,The following statement contains a magic number: {  				double lineDist = BedImage.Width / (double)linesInX;    				int count = 1;  				int pointSize = 16;  				graphics2D.DrawString(count.ToString()' 4' 4' pointSize' color: bedMarkingsColor);  				double currentRadius = lineDist;  				Vector2 bedCenter = new Vector2(BedImage.Width / 2' BedImage.Height / 2);  				for (double linePos = lineDist + BedImage.Width / 2; linePos < BedImage.Width; linePos += lineDist)  				{  					int linePosInt = (int)linePos;  					graphics2D.DrawString((count * increment).ToString()' linePos + 2' BedImage.Height / 2' pointSize' color: bedMarkingsColor);    					Ellipse circle = new Ellipse(bedCenter' currentRadius);  					Stroke outline = new Stroke(circle);  					graphics2D.Render(outline' bedMarkingsColor);  					currentRadius += lineDist;  					count++;  				}    				graphics2D.Line(0' BedImage.Height / 2' BedImage.Width' BedImage.Height / 2' bedMarkingsColor);  				graphics2D.Line(BedImage.Width / 2' 0' BedImage.Width / 2' BedImage.Height' bedMarkingsColor);  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateCircularBedGridImage,The following statement contains a magic number: {  				double lineDist = BedImage.Width / (double)linesInX;    				int count = 1;  				int pointSize = 16;  				graphics2D.DrawString(count.ToString()' 4' 4' pointSize' color: bedMarkingsColor);  				double currentRadius = lineDist;  				Vector2 bedCenter = new Vector2(BedImage.Width / 2' BedImage.Height / 2);  				for (double linePos = lineDist + BedImage.Width / 2; linePos < BedImage.Width; linePos += lineDist)  				{  					int linePosInt = (int)linePos;  					graphics2D.DrawString((count * increment).ToString()' linePos + 2' BedImage.Height / 2' pointSize' color: bedMarkingsColor);    					Ellipse circle = new Ellipse(bedCenter' currentRadius);  					Stroke outline = new Stroke(circle);  					graphics2D.Render(outline' bedMarkingsColor);  					currentRadius += lineDist;  					count++;  				}    				graphics2D.Line(0' BedImage.Height / 2' BedImage.Width' BedImage.Height / 2' bedMarkingsColor);  				graphics2D.Line(BedImage.Width / 2' 0' BedImage.Width / 2' BedImage.Height' bedMarkingsColor);  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateCircularBedGridImage,The following statement contains a magic number: {  				double lineDist = BedImage.Width / (double)linesInX;    				int count = 1;  				int pointSize = 16;  				graphics2D.DrawString(count.ToString()' 4' 4' pointSize' color: bedMarkingsColor);  				double currentRadius = lineDist;  				Vector2 bedCenter = new Vector2(BedImage.Width / 2' BedImage.Height / 2);  				for (double linePos = lineDist + BedImage.Width / 2; linePos < BedImage.Width; linePos += lineDist)  				{  					int linePosInt = (int)linePos;  					graphics2D.DrawString((count * increment).ToString()' linePos + 2' BedImage.Height / 2' pointSize' color: bedMarkingsColor);    					Ellipse circle = new Ellipse(bedCenter' currentRadius);  					Stroke outline = new Stroke(circle);  					graphics2D.Render(outline' bedMarkingsColor);  					currentRadius += lineDist;  					count++;  				}    				graphics2D.Line(0' BedImage.Height / 2' BedImage.Width' BedImage.Height / 2' bedMarkingsColor);  				graphics2D.Line(BedImage.Width / 2' 0' BedImage.Width / 2' BedImage.Height' bedMarkingsColor);  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateCircularBedGridImage,The following statement contains a magic number: {  				double lineDist = BedImage.Width / (double)linesInX;    				int count = 1;  				int pointSize = 16;  				graphics2D.DrawString(count.ToString()' 4' 4' pointSize' color: bedMarkingsColor);  				double currentRadius = lineDist;  				Vector2 bedCenter = new Vector2(BedImage.Width / 2' BedImage.Height / 2);  				for (double linePos = lineDist + BedImage.Width / 2; linePos < BedImage.Width; linePos += lineDist)  				{  					int linePosInt = (int)linePos;  					graphics2D.DrawString((count * increment).ToString()' linePos + 2' BedImage.Height / 2' pointSize' color: bedMarkingsColor);    					Ellipse circle = new Ellipse(bedCenter' currentRadius);  					Stroke outline = new Stroke(circle);  					graphics2D.Render(outline' bedMarkingsColor);  					currentRadius += lineDist;  					count++;  				}    				graphics2D.Line(0' BedImage.Height / 2' BedImage.Width' BedImage.Height / 2' bedMarkingsColor);  				graphics2D.Line(BedImage.Width / 2' 0' BedImage.Width / 2' BedImage.Height' bedMarkingsColor);  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateCircularBedGridImage,The following statement contains a magic number: {  				double lineDist = BedImage.Width / (double)linesInX;    				int count = 1;  				int pointSize = 16;  				graphics2D.DrawString(count.ToString()' 4' 4' pointSize' color: bedMarkingsColor);  				double currentRadius = lineDist;  				Vector2 bedCenter = new Vector2(BedImage.Width / 2' BedImage.Height / 2);  				for (double linePos = lineDist + BedImage.Width / 2; linePos < BedImage.Width; linePos += lineDist)  				{  					int linePosInt = (int)linePos;  					graphics2D.DrawString((count * increment).ToString()' linePos + 2' BedImage.Height / 2' pointSize' color: bedMarkingsColor);    					Ellipse circle = new Ellipse(bedCenter' currentRadius);  					Stroke outline = new Stroke(circle);  					graphics2D.Render(outline' bedMarkingsColor);  					currentRadius += lineDist;  					count++;  				}    				graphics2D.Line(0' BedImage.Height / 2' BedImage.Width' BedImage.Height / 2' bedMarkingsColor);  				graphics2D.Line(BedImage.Width / 2' 0' BedImage.Width / 2' BedImage.Height' bedMarkingsColor);  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateCircularBedGridImage,The following statement contains a magic number: {  				double lineDist = BedImage.Width / (double)linesInX;    				int count = 1;  				int pointSize = 16;  				graphics2D.DrawString(count.ToString()' 4' 4' pointSize' color: bedMarkingsColor);  				double currentRadius = lineDist;  				Vector2 bedCenter = new Vector2(BedImage.Width / 2' BedImage.Height / 2);  				for (double linePos = lineDist + BedImage.Width / 2; linePos < BedImage.Width; linePos += lineDist)  				{  					int linePosInt = (int)linePos;  					graphics2D.DrawString((count * increment).ToString()' linePos + 2' BedImage.Height / 2' pointSize' color: bedMarkingsColor);    					Ellipse circle = new Ellipse(bedCenter' currentRadius);  					Stroke outline = new Stroke(circle);  					graphics2D.Render(outline' bedMarkingsColor);  					currentRadius += lineDist;  					count++;  				}    				graphics2D.Line(0' BedImage.Height / 2' BedImage.Width' BedImage.Height / 2' bedMarkingsColor);  				graphics2D.Line(BedImage.Width / 2' 0' BedImage.Width / 2' BedImage.Height' bedMarkingsColor);  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateCircularBedGridImage,The following statement contains a magic number: {  				double lineDist = BedImage.Width / (double)linesInX;    				int count = 1;  				int pointSize = 16;  				graphics2D.DrawString(count.ToString()' 4' 4' pointSize' color: bedMarkingsColor);  				double currentRadius = lineDist;  				Vector2 bedCenter = new Vector2(BedImage.Width / 2' BedImage.Height / 2);  				for (double linePos = lineDist + BedImage.Width / 2; linePos < BedImage.Width; linePos += lineDist)  				{  					int linePosInt = (int)linePos;  					graphics2D.DrawString((count * increment).ToString()' linePos + 2' BedImage.Height / 2' pointSize' color: bedMarkingsColor);    					Ellipse circle = new Ellipse(bedCenter' currentRadius);  					Stroke outline = new Stroke(circle);  					graphics2D.Render(outline' bedMarkingsColor);  					currentRadius += lineDist;  					count++;  				}    				graphics2D.Line(0' BedImage.Height / 2' BedImage.Width' BedImage.Height / 2' bedMarkingsColor);  				graphics2D.Line(BedImage.Width / 2' 0' BedImage.Width / 2' BedImage.Height' bedMarkingsColor);  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateCircularBedGridImage,The following statement contains a magic number: {  				double lineDist = BedImage.Width / (double)linesInX;    				int count = 1;  				int pointSize = 16;  				graphics2D.DrawString(count.ToString()' 4' 4' pointSize' color: bedMarkingsColor);  				double currentRadius = lineDist;  				Vector2 bedCenter = new Vector2(BedImage.Width / 2' BedImage.Height / 2);  				for (double linePos = lineDist + BedImage.Width / 2; linePos < BedImage.Width; linePos += lineDist)  				{  					int linePosInt = (int)linePos;  					graphics2D.DrawString((count * increment).ToString()' linePos + 2' BedImage.Height / 2' pointSize' color: bedMarkingsColor);    					Ellipse circle = new Ellipse(bedCenter' currentRadius);  					Stroke outline = new Stroke(circle);  					graphics2D.Render(outline' bedMarkingsColor);  					currentRadius += lineDist;  					count++;  				}    				graphics2D.Line(0' BedImage.Height / 2' BedImage.Width' BedImage.Height / 2' bedMarkingsColor);  				graphics2D.Line(BedImage.Width / 2' 0' BedImage.Width / 2' BedImage.Height' bedMarkingsColor);  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateCircularBedGridImage,The following statement contains a magic number: {  				double lineDist = BedImage.Width / (double)linesInX;    				int count = 1;  				int pointSize = 16;  				graphics2D.DrawString(count.ToString()' 4' 4' pointSize' color: bedMarkingsColor);  				double currentRadius = lineDist;  				Vector2 bedCenter = new Vector2(BedImage.Width / 2' BedImage.Height / 2);  				for (double linePos = lineDist + BedImage.Width / 2; linePos < BedImage.Width; linePos += lineDist)  				{  					int linePosInt = (int)linePos;  					graphics2D.DrawString((count * increment).ToString()' linePos + 2' BedImage.Height / 2' pointSize' color: bedMarkingsColor);    					Ellipse circle = new Ellipse(bedCenter' currentRadius);  					Stroke outline = new Stroke(circle);  					graphics2D.Render(outline' bedMarkingsColor);  					currentRadius += lineDist;  					count++;  				}    				graphics2D.Line(0' BedImage.Height / 2' BedImage.Width' BedImage.Height / 2' bedMarkingsColor);  				graphics2D.Line(BedImage.Width / 2' 0' BedImage.Width / 2' BedImage.Height' bedMarkingsColor);  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateCircularBedGridImage,The following statement contains a magic number: {  				double lineDist = BedImage.Width / (double)linesInX;    				int count = 1;  				int pointSize = 16;  				graphics2D.DrawString(count.ToString()' 4' 4' pointSize' color: bedMarkingsColor);  				double currentRadius = lineDist;  				Vector2 bedCenter = new Vector2(BedImage.Width / 2' BedImage.Height / 2);  				for (double linePos = lineDist + BedImage.Width / 2; linePos < BedImage.Width; linePos += lineDist)  				{  					int linePosInt = (int)linePos;  					graphics2D.DrawString((count * increment).ToString()' linePos + 2' BedImage.Height / 2' pointSize' color: bedMarkingsColor);    					Ellipse circle = new Ellipse(bedCenter' currentRadius);  					Stroke outline = new Stroke(circle);  					graphics2D.Render(outline' bedMarkingsColor);  					currentRadius += lineDist;  					count++;  				}    				graphics2D.Line(0' BedImage.Height / 2' BedImage.Width' BedImage.Height / 2' bedMarkingsColor);  				graphics2D.Line(BedImage.Width / 2' 0' BedImage.Width / 2' BedImage.Height' bedMarkingsColor);  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateRectangularBedGridImage,The following statement contains a magic number: lock (lastCreatedBedImage)  			{  				BedImage = new ImageBuffer(1024' 1024);  				Graphics2D graphics2D = BedImage.NewGraphics2D();  				graphics2D.Clear(bedBaseColor);  				{  					double lineDist = BedImage.Width / (displayVolumeToBuild.x / divisor);    					double xPositionCm = (-(displayVolume.x / 2.0) + bedCenter.x) / divisor;  					int xPositionCmInt = (int)Math.Round(xPositionCm);  					double fraction = xPositionCm - xPositionCmInt;  					int pointSize = 20;  					graphics2D.DrawString((xPositionCmInt * skip).ToString()' 4' 4' pointSize' color: bedMarkingsColor);  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Width; linePos += lineDist)  					{  						xPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (xPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(linePosInt' 0' linePosInt' BedImage.Height' bedMarkingsColor' lineWidth);  						graphics2D.DrawString((xPositionCmInt * skip).ToString()' linePos + 4' 4' pointSize' color: bedMarkingsColor);  					}  				}  				{  					double lineDist = BedImage.Height / (displayVolumeToBuild.y / divisor);    					double yPositionCm = (-(displayVolume.y / 2.0) + bedCenter.y) / divisor;  					int yPositionCmInt = (int)Math.Round(yPositionCm);  					double fraction = yPositionCm - yPositionCmInt;  					int pointSize = 20;  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Height; linePos += lineDist)  					{  						yPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (yPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(0' linePosInt' BedImage.Height' linePosInt' bedMarkingsColor' lineWidth);    						graphics2D.DrawString((yPositionCmInt * skip).ToString()' 4' linePos + 4' pointSize' color: bedMarkingsColor);  					}  				}    				lastCreatedBedImage = BedImage;  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateRectangularBedGridImage,The following statement contains a magic number: lock (lastCreatedBedImage)  			{  				BedImage = new ImageBuffer(1024' 1024);  				Graphics2D graphics2D = BedImage.NewGraphics2D();  				graphics2D.Clear(bedBaseColor);  				{  					double lineDist = BedImage.Width / (displayVolumeToBuild.x / divisor);    					double xPositionCm = (-(displayVolume.x / 2.0) + bedCenter.x) / divisor;  					int xPositionCmInt = (int)Math.Round(xPositionCm);  					double fraction = xPositionCm - xPositionCmInt;  					int pointSize = 20;  					graphics2D.DrawString((xPositionCmInt * skip).ToString()' 4' 4' pointSize' color: bedMarkingsColor);  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Width; linePos += lineDist)  					{  						xPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (xPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(linePosInt' 0' linePosInt' BedImage.Height' bedMarkingsColor' lineWidth);  						graphics2D.DrawString((xPositionCmInt * skip).ToString()' linePos + 4' 4' pointSize' color: bedMarkingsColor);  					}  				}  				{  					double lineDist = BedImage.Height / (displayVolumeToBuild.y / divisor);    					double yPositionCm = (-(displayVolume.y / 2.0) + bedCenter.y) / divisor;  					int yPositionCmInt = (int)Math.Round(yPositionCm);  					double fraction = yPositionCm - yPositionCmInt;  					int pointSize = 20;  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Height; linePos += lineDist)  					{  						yPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (yPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(0' linePosInt' BedImage.Height' linePosInt' bedMarkingsColor' lineWidth);    						graphics2D.DrawString((yPositionCmInt * skip).ToString()' 4' linePos + 4' pointSize' color: bedMarkingsColor);  					}  				}    				lastCreatedBedImage = BedImage;  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateRectangularBedGridImage,The following statement contains a magic number: lock (lastCreatedBedImage)  			{  				BedImage = new ImageBuffer(1024' 1024);  				Graphics2D graphics2D = BedImage.NewGraphics2D();  				graphics2D.Clear(bedBaseColor);  				{  					double lineDist = BedImage.Width / (displayVolumeToBuild.x / divisor);    					double xPositionCm = (-(displayVolume.x / 2.0) + bedCenter.x) / divisor;  					int xPositionCmInt = (int)Math.Round(xPositionCm);  					double fraction = xPositionCm - xPositionCmInt;  					int pointSize = 20;  					graphics2D.DrawString((xPositionCmInt * skip).ToString()' 4' 4' pointSize' color: bedMarkingsColor);  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Width; linePos += lineDist)  					{  						xPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (xPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(linePosInt' 0' linePosInt' BedImage.Height' bedMarkingsColor' lineWidth);  						graphics2D.DrawString((xPositionCmInt * skip).ToString()' linePos + 4' 4' pointSize' color: bedMarkingsColor);  					}  				}  				{  					double lineDist = BedImage.Height / (displayVolumeToBuild.y / divisor);    					double yPositionCm = (-(displayVolume.y / 2.0) + bedCenter.y) / divisor;  					int yPositionCmInt = (int)Math.Round(yPositionCm);  					double fraction = yPositionCm - yPositionCmInt;  					int pointSize = 20;  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Height; linePos += lineDist)  					{  						yPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (yPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(0' linePosInt' BedImage.Height' linePosInt' bedMarkingsColor' lineWidth);    						graphics2D.DrawString((yPositionCmInt * skip).ToString()' 4' linePos + 4' pointSize' color: bedMarkingsColor);  					}  				}    				lastCreatedBedImage = BedImage;  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateRectangularBedGridImage,The following statement contains a magic number: lock (lastCreatedBedImage)  			{  				BedImage = new ImageBuffer(1024' 1024);  				Graphics2D graphics2D = BedImage.NewGraphics2D();  				graphics2D.Clear(bedBaseColor);  				{  					double lineDist = BedImage.Width / (displayVolumeToBuild.x / divisor);    					double xPositionCm = (-(displayVolume.x / 2.0) + bedCenter.x) / divisor;  					int xPositionCmInt = (int)Math.Round(xPositionCm);  					double fraction = xPositionCm - xPositionCmInt;  					int pointSize = 20;  					graphics2D.DrawString((xPositionCmInt * skip).ToString()' 4' 4' pointSize' color: bedMarkingsColor);  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Width; linePos += lineDist)  					{  						xPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (xPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(linePosInt' 0' linePosInt' BedImage.Height' bedMarkingsColor' lineWidth);  						graphics2D.DrawString((xPositionCmInt * skip).ToString()' linePos + 4' 4' pointSize' color: bedMarkingsColor);  					}  				}  				{  					double lineDist = BedImage.Height / (displayVolumeToBuild.y / divisor);    					double yPositionCm = (-(displayVolume.y / 2.0) + bedCenter.y) / divisor;  					int yPositionCmInt = (int)Math.Round(yPositionCm);  					double fraction = yPositionCm - yPositionCmInt;  					int pointSize = 20;  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Height; linePos += lineDist)  					{  						yPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (yPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(0' linePosInt' BedImage.Height' linePosInt' bedMarkingsColor' lineWidth);    						graphics2D.DrawString((yPositionCmInt * skip).ToString()' 4' linePos + 4' pointSize' color: bedMarkingsColor);  					}  				}    				lastCreatedBedImage = BedImage;  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateRectangularBedGridImage,The following statement contains a magic number: lock (lastCreatedBedImage)  			{  				BedImage = new ImageBuffer(1024' 1024);  				Graphics2D graphics2D = BedImage.NewGraphics2D();  				graphics2D.Clear(bedBaseColor);  				{  					double lineDist = BedImage.Width / (displayVolumeToBuild.x / divisor);    					double xPositionCm = (-(displayVolume.x / 2.0) + bedCenter.x) / divisor;  					int xPositionCmInt = (int)Math.Round(xPositionCm);  					double fraction = xPositionCm - xPositionCmInt;  					int pointSize = 20;  					graphics2D.DrawString((xPositionCmInt * skip).ToString()' 4' 4' pointSize' color: bedMarkingsColor);  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Width; linePos += lineDist)  					{  						xPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (xPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(linePosInt' 0' linePosInt' BedImage.Height' bedMarkingsColor' lineWidth);  						graphics2D.DrawString((xPositionCmInt * skip).ToString()' linePos + 4' 4' pointSize' color: bedMarkingsColor);  					}  				}  				{  					double lineDist = BedImage.Height / (displayVolumeToBuild.y / divisor);    					double yPositionCm = (-(displayVolume.y / 2.0) + bedCenter.y) / divisor;  					int yPositionCmInt = (int)Math.Round(yPositionCm);  					double fraction = yPositionCm - yPositionCmInt;  					int pointSize = 20;  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Height; linePos += lineDist)  					{  						yPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (yPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(0' linePosInt' BedImage.Height' linePosInt' bedMarkingsColor' lineWidth);    						graphics2D.DrawString((yPositionCmInt * skip).ToString()' 4' linePos + 4' pointSize' color: bedMarkingsColor);  					}  				}    				lastCreatedBedImage = BedImage;  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateRectangularBedGridImage,The following statement contains a magic number: lock (lastCreatedBedImage)  			{  				BedImage = new ImageBuffer(1024' 1024);  				Graphics2D graphics2D = BedImage.NewGraphics2D();  				graphics2D.Clear(bedBaseColor);  				{  					double lineDist = BedImage.Width / (displayVolumeToBuild.x / divisor);    					double xPositionCm = (-(displayVolume.x / 2.0) + bedCenter.x) / divisor;  					int xPositionCmInt = (int)Math.Round(xPositionCm);  					double fraction = xPositionCm - xPositionCmInt;  					int pointSize = 20;  					graphics2D.DrawString((xPositionCmInt * skip).ToString()' 4' 4' pointSize' color: bedMarkingsColor);  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Width; linePos += lineDist)  					{  						xPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (xPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(linePosInt' 0' linePosInt' BedImage.Height' bedMarkingsColor' lineWidth);  						graphics2D.DrawString((xPositionCmInt * skip).ToString()' linePos + 4' 4' pointSize' color: bedMarkingsColor);  					}  				}  				{  					double lineDist = BedImage.Height / (displayVolumeToBuild.y / divisor);    					double yPositionCm = (-(displayVolume.y / 2.0) + bedCenter.y) / divisor;  					int yPositionCmInt = (int)Math.Round(yPositionCm);  					double fraction = yPositionCm - yPositionCmInt;  					int pointSize = 20;  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Height; linePos += lineDist)  					{  						yPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (yPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(0' linePosInt' BedImage.Height' linePosInt' bedMarkingsColor' lineWidth);    						graphics2D.DrawString((yPositionCmInt * skip).ToString()' 4' linePos + 4' pointSize' color: bedMarkingsColor);  					}  				}    				lastCreatedBedImage = BedImage;  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateRectangularBedGridImage,The following statement contains a magic number: lock (lastCreatedBedImage)  			{  				BedImage = new ImageBuffer(1024' 1024);  				Graphics2D graphics2D = BedImage.NewGraphics2D();  				graphics2D.Clear(bedBaseColor);  				{  					double lineDist = BedImage.Width / (displayVolumeToBuild.x / divisor);    					double xPositionCm = (-(displayVolume.x / 2.0) + bedCenter.x) / divisor;  					int xPositionCmInt = (int)Math.Round(xPositionCm);  					double fraction = xPositionCm - xPositionCmInt;  					int pointSize = 20;  					graphics2D.DrawString((xPositionCmInt * skip).ToString()' 4' 4' pointSize' color: bedMarkingsColor);  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Width; linePos += lineDist)  					{  						xPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (xPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(linePosInt' 0' linePosInt' BedImage.Height' bedMarkingsColor' lineWidth);  						graphics2D.DrawString((xPositionCmInt * skip).ToString()' linePos + 4' 4' pointSize' color: bedMarkingsColor);  					}  				}  				{  					double lineDist = BedImage.Height / (displayVolumeToBuild.y / divisor);    					double yPositionCm = (-(displayVolume.y / 2.0) + bedCenter.y) / divisor;  					int yPositionCmInt = (int)Math.Round(yPositionCm);  					double fraction = yPositionCm - yPositionCmInt;  					int pointSize = 20;  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Height; linePos += lineDist)  					{  						yPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (yPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(0' linePosInt' BedImage.Height' linePosInt' bedMarkingsColor' lineWidth);    						graphics2D.DrawString((yPositionCmInt * skip).ToString()' 4' linePos + 4' pointSize' color: bedMarkingsColor);  					}  				}    				lastCreatedBedImage = BedImage;  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateRectangularBedGridImage,The following statement contains a magic number: lock (lastCreatedBedImage)  			{  				BedImage = new ImageBuffer(1024' 1024);  				Graphics2D graphics2D = BedImage.NewGraphics2D();  				graphics2D.Clear(bedBaseColor);  				{  					double lineDist = BedImage.Width / (displayVolumeToBuild.x / divisor);    					double xPositionCm = (-(displayVolume.x / 2.0) + bedCenter.x) / divisor;  					int xPositionCmInt = (int)Math.Round(xPositionCm);  					double fraction = xPositionCm - xPositionCmInt;  					int pointSize = 20;  					graphics2D.DrawString((xPositionCmInt * skip).ToString()' 4' 4' pointSize' color: bedMarkingsColor);  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Width; linePos += lineDist)  					{  						xPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (xPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(linePosInt' 0' linePosInt' BedImage.Height' bedMarkingsColor' lineWidth);  						graphics2D.DrawString((xPositionCmInt * skip).ToString()' linePos + 4' 4' pointSize' color: bedMarkingsColor);  					}  				}  				{  					double lineDist = BedImage.Height / (displayVolumeToBuild.y / divisor);    					double yPositionCm = (-(displayVolume.y / 2.0) + bedCenter.y) / divisor;  					int yPositionCmInt = (int)Math.Round(yPositionCm);  					double fraction = yPositionCm - yPositionCmInt;  					int pointSize = 20;  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Height; linePos += lineDist)  					{  						yPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (yPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(0' linePosInt' BedImage.Height' linePosInt' bedMarkingsColor' lineWidth);    						graphics2D.DrawString((yPositionCmInt * skip).ToString()' 4' linePos + 4' pointSize' color: bedMarkingsColor);  					}  				}    				lastCreatedBedImage = BedImage;  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateRectangularBedGridImage,The following statement contains a magic number: lock (lastCreatedBedImage)  			{  				BedImage = new ImageBuffer(1024' 1024);  				Graphics2D graphics2D = BedImage.NewGraphics2D();  				graphics2D.Clear(bedBaseColor);  				{  					double lineDist = BedImage.Width / (displayVolumeToBuild.x / divisor);    					double xPositionCm = (-(displayVolume.x / 2.0) + bedCenter.x) / divisor;  					int xPositionCmInt = (int)Math.Round(xPositionCm);  					double fraction = xPositionCm - xPositionCmInt;  					int pointSize = 20;  					graphics2D.DrawString((xPositionCmInt * skip).ToString()' 4' 4' pointSize' color: bedMarkingsColor);  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Width; linePos += lineDist)  					{  						xPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (xPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(linePosInt' 0' linePosInt' BedImage.Height' bedMarkingsColor' lineWidth);  						graphics2D.DrawString((xPositionCmInt * skip).ToString()' linePos + 4' 4' pointSize' color: bedMarkingsColor);  					}  				}  				{  					double lineDist = BedImage.Height / (displayVolumeToBuild.y / divisor);    					double yPositionCm = (-(displayVolume.y / 2.0) + bedCenter.y) / divisor;  					int yPositionCmInt = (int)Math.Round(yPositionCm);  					double fraction = yPositionCm - yPositionCmInt;  					int pointSize = 20;  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Height; linePos += lineDist)  					{  						yPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (yPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(0' linePosInt' BedImage.Height' linePosInt' bedMarkingsColor' lineWidth);    						graphics2D.DrawString((yPositionCmInt * skip).ToString()' 4' linePos + 4' pointSize' color: bedMarkingsColor);  					}  				}    				lastCreatedBedImage = BedImage;  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateRectangularBedGridImage,The following statement contains a magic number: lock (lastCreatedBedImage)  			{  				BedImage = new ImageBuffer(1024' 1024);  				Graphics2D graphics2D = BedImage.NewGraphics2D();  				graphics2D.Clear(bedBaseColor);  				{  					double lineDist = BedImage.Width / (displayVolumeToBuild.x / divisor);    					double xPositionCm = (-(displayVolume.x / 2.0) + bedCenter.x) / divisor;  					int xPositionCmInt = (int)Math.Round(xPositionCm);  					double fraction = xPositionCm - xPositionCmInt;  					int pointSize = 20;  					graphics2D.DrawString((xPositionCmInt * skip).ToString()' 4' 4' pointSize' color: bedMarkingsColor);  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Width; linePos += lineDist)  					{  						xPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (xPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(linePosInt' 0' linePosInt' BedImage.Height' bedMarkingsColor' lineWidth);  						graphics2D.DrawString((xPositionCmInt * skip).ToString()' linePos + 4' 4' pointSize' color: bedMarkingsColor);  					}  				}  				{  					double lineDist = BedImage.Height / (displayVolumeToBuild.y / divisor);    					double yPositionCm = (-(displayVolume.y / 2.0) + bedCenter.y) / divisor;  					int yPositionCmInt = (int)Math.Round(yPositionCm);  					double fraction = yPositionCm - yPositionCmInt;  					int pointSize = 20;  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Height; linePos += lineDist)  					{  						yPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (yPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(0' linePosInt' BedImage.Height' linePosInt' bedMarkingsColor' lineWidth);    						graphics2D.DrawString((yPositionCmInt * skip).ToString()' 4' linePos + 4' pointSize' color: bedMarkingsColor);  					}  				}    				lastCreatedBedImage = BedImage;  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateRectangularBedGridImage,The following statement contains a magic number: lock (lastCreatedBedImage)  			{  				BedImage = new ImageBuffer(1024' 1024);  				Graphics2D graphics2D = BedImage.NewGraphics2D();  				graphics2D.Clear(bedBaseColor);  				{  					double lineDist = BedImage.Width / (displayVolumeToBuild.x / divisor);    					double xPositionCm = (-(displayVolume.x / 2.0) + bedCenter.x) / divisor;  					int xPositionCmInt = (int)Math.Round(xPositionCm);  					double fraction = xPositionCm - xPositionCmInt;  					int pointSize = 20;  					graphics2D.DrawString((xPositionCmInt * skip).ToString()' 4' 4' pointSize' color: bedMarkingsColor);  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Width; linePos += lineDist)  					{  						xPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (xPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(linePosInt' 0' linePosInt' BedImage.Height' bedMarkingsColor' lineWidth);  						graphics2D.DrawString((xPositionCmInt * skip).ToString()' linePos + 4' 4' pointSize' color: bedMarkingsColor);  					}  				}  				{  					double lineDist = BedImage.Height / (displayVolumeToBuild.y / divisor);    					double yPositionCm = (-(displayVolume.y / 2.0) + bedCenter.y) / divisor;  					int yPositionCmInt = (int)Math.Round(yPositionCm);  					double fraction = yPositionCm - yPositionCmInt;  					int pointSize = 20;  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Height; linePos += lineDist)  					{  						yPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (yPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(0' linePosInt' BedImage.Height' linePosInt' bedMarkingsColor' lineWidth);    						graphics2D.DrawString((yPositionCmInt * skip).ToString()' 4' linePos + 4' pointSize' color: bedMarkingsColor);  					}  				}    				lastCreatedBedImage = BedImage;  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateRectangularBedGridImage,The following statement contains a magic number: lock (lastCreatedBedImage)  			{  				BedImage = new ImageBuffer(1024' 1024);  				Graphics2D graphics2D = BedImage.NewGraphics2D();  				graphics2D.Clear(bedBaseColor);  				{  					double lineDist = BedImage.Width / (displayVolumeToBuild.x / divisor);    					double xPositionCm = (-(displayVolume.x / 2.0) + bedCenter.x) / divisor;  					int xPositionCmInt = (int)Math.Round(xPositionCm);  					double fraction = xPositionCm - xPositionCmInt;  					int pointSize = 20;  					graphics2D.DrawString((xPositionCmInt * skip).ToString()' 4' 4' pointSize' color: bedMarkingsColor);  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Width; linePos += lineDist)  					{  						xPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (xPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(linePosInt' 0' linePosInt' BedImage.Height' bedMarkingsColor' lineWidth);  						graphics2D.DrawString((xPositionCmInt * skip).ToString()' linePos + 4' 4' pointSize' color: bedMarkingsColor);  					}  				}  				{  					double lineDist = BedImage.Height / (displayVolumeToBuild.y / divisor);    					double yPositionCm = (-(displayVolume.y / 2.0) + bedCenter.y) / divisor;  					int yPositionCmInt = (int)Math.Round(yPositionCm);  					double fraction = yPositionCm - yPositionCmInt;  					int pointSize = 20;  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Height; linePos += lineDist)  					{  						yPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (yPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(0' linePosInt' BedImage.Height' linePosInt' bedMarkingsColor' lineWidth);    						graphics2D.DrawString((yPositionCmInt * skip).ToString()' 4' linePos + 4' pointSize' color: bedMarkingsColor);  					}  				}    				lastCreatedBedImage = BedImage;  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateRectangularBedGridImage,The following statement contains a magic number: lock (lastCreatedBedImage)  			{  				BedImage = new ImageBuffer(1024' 1024);  				Graphics2D graphics2D = BedImage.NewGraphics2D();  				graphics2D.Clear(bedBaseColor);  				{  					double lineDist = BedImage.Width / (displayVolumeToBuild.x / divisor);    					double xPositionCm = (-(displayVolume.x / 2.0) + bedCenter.x) / divisor;  					int xPositionCmInt = (int)Math.Round(xPositionCm);  					double fraction = xPositionCm - xPositionCmInt;  					int pointSize = 20;  					graphics2D.DrawString((xPositionCmInt * skip).ToString()' 4' 4' pointSize' color: bedMarkingsColor);  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Width; linePos += lineDist)  					{  						xPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (xPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(linePosInt' 0' linePosInt' BedImage.Height' bedMarkingsColor' lineWidth);  						graphics2D.DrawString((xPositionCmInt * skip).ToString()' linePos + 4' 4' pointSize' color: bedMarkingsColor);  					}  				}  				{  					double lineDist = BedImage.Height / (displayVolumeToBuild.y / divisor);    					double yPositionCm = (-(displayVolume.y / 2.0) + bedCenter.y) / divisor;  					int yPositionCmInt = (int)Math.Round(yPositionCm);  					double fraction = yPositionCm - yPositionCmInt;  					int pointSize = 20;  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Height; linePos += lineDist)  					{  						yPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (yPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(0' linePosInt' BedImage.Height' linePosInt' bedMarkingsColor' lineWidth);    						graphics2D.DrawString((yPositionCmInt * skip).ToString()' 4' linePos + 4' pointSize' color: bedMarkingsColor);  					}  				}    				lastCreatedBedImage = BedImage;  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,CreateRectangularBedGridImage,The following statement contains a magic number: lock (lastCreatedBedImage)  			{  				BedImage = new ImageBuffer(1024' 1024);  				Graphics2D graphics2D = BedImage.NewGraphics2D();  				graphics2D.Clear(bedBaseColor);  				{  					double lineDist = BedImage.Width / (displayVolumeToBuild.x / divisor);    					double xPositionCm = (-(displayVolume.x / 2.0) + bedCenter.x) / divisor;  					int xPositionCmInt = (int)Math.Round(xPositionCm);  					double fraction = xPositionCm - xPositionCmInt;  					int pointSize = 20;  					graphics2D.DrawString((xPositionCmInt * skip).ToString()' 4' 4' pointSize' color: bedMarkingsColor);  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Width; linePos += lineDist)  					{  						xPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (xPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(linePosInt' 0' linePosInt' BedImage.Height' bedMarkingsColor' lineWidth);  						graphics2D.DrawString((xPositionCmInt * skip).ToString()' linePos + 4' 4' pointSize' color: bedMarkingsColor);  					}  				}  				{  					double lineDist = BedImage.Height / (displayVolumeToBuild.y / divisor);    					double yPositionCm = (-(displayVolume.y / 2.0) + bedCenter.y) / divisor;  					int yPositionCmInt = (int)Math.Round(yPositionCm);  					double fraction = yPositionCm - yPositionCmInt;  					int pointSize = 20;  					for (double linePos = lineDist * (1 - fraction); linePos < BedImage.Height; linePos += lineDist)  					{  						yPositionCmInt++;  						int linePosInt = (int)linePos;  						int lineWidth = 1;  						if (yPositionCmInt == 0)  						{  							lineWidth = 2;  						}  						graphics2D.Line(0' linePosInt' BedImage.Height' linePosInt' bedMarkingsColor' lineWidth);    						graphics2D.DrawString((yPositionCmInt * skip).ToString()' 4' linePos + 4' pointSize' color: bedMarkingsColor);  					}  				}    				lastCreatedBedImage = BedImage;  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,reportProgress0to100,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				int percentComplete = (int)(progress0To1 * 100);  				partProcessingInfo.centeredInfoText.Text = "Loading Mesh {0}%...".FormatWith(percentComplete);  				partProcessingInfo.progressControl.PercentComplete = percentComplete;  				partProcessingInfo.centeredInfoDescription.Text = processingState;  			});
Magic Number,MatterHackers.MeshVisualizer,MeshViewerWidget,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerWidget.cs,trackballTumbleWidget_DrawGlContent,The following statement contains a magic number: if (MeshGroups.Count > 0 || AllowBedRenderingWhenEmpty)  			{  				if (RenderBed)  				{  					RenderMeshToGl.Render(printerBed' this.BedColor);  				}    				if (buildVolume != null && RenderBuildVolume)  				{  					RenderMeshToGl.Render(buildVolume' this.BuildVolumeColor);  				}    				if (false) // this is code to draw a small axis indicator  				{  					double big = 10;  					double small = 1;  					Mesh xAxis = PlatonicSolids.CreateCube(big' small' small);  					RenderMeshToGl.Render(xAxis' RGBA_Bytes.Red);  					Mesh yAxis = PlatonicSolids.CreateCube(small' big' small);  					RenderMeshToGl.Render(yAxis' RGBA_Bytes.Green);  					Mesh zAxis = PlatonicSolids.CreateCube(small' small' big);  					RenderMeshToGl.Render(zAxis' RGBA_Bytes.Blue);  				}  			}
Magic Number,MatterHackers.MeshVisualizer,MeshViewerApplication,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerApplication.cs,MeshViewerApplication,The following statement contains a magic number: MinimumSize = new VectorMath.Vector2(200' 200);
Magic Number,MatterHackers.MeshVisualizer,MeshViewerApplication,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerApplication.cs,MeshViewerApplication,The following statement contains a magic number: MinimumSize = new VectorMath.Vector2(200' 200);
Magic Number,MatterHackers.MeshVisualizer,MeshViewerApplication,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerApplication.cs,MeshViewerApplication,The following statement contains a magic number: Vector3 viewerVolume = new Vector3(200' 200' 200);
Magic Number,MatterHackers.MeshVisualizer,MeshViewerApplication,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerApplication.cs,MeshViewerApplication,The following statement contains a magic number: Vector3 viewerVolume = new Vector3(200' 200' 200);
Magic Number,MatterHackers.MeshVisualizer,MeshViewerApplication,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerApplication.cs,MeshViewerApplication,The following statement contains a magic number: Vector3 viewerVolume = new Vector3(200' 200' 200);
Magic Number,MatterHackers.MeshVisualizer,MeshViewerApplication,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerApplication.cs,MeshViewerApplication,The following statement contains a magic number: meshViewerWidget = new MeshViewerWidget(viewerVolume' new Vector2(100' 100)' BedShape.Rectangular' "No Part Loaded");
Magic Number,MatterHackers.MeshVisualizer,MeshViewerApplication,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerApplication.cs,MeshViewerApplication,The following statement contains a magic number: meshViewerWidget = new MeshViewerWidget(viewerVolume' new Vector2(100' 100)' BedShape.Rectangular' "No Part Loaded");
Magic Number,MatterHackers.MeshVisualizer,MeshViewerApplication,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerApplication.cs,MeshViewerApplication,The following statement contains a magic number: buttonPanel.Padding = new BorderDouble(3' 3);
Magic Number,MatterHackers.MeshVisualizer,MeshViewerApplication,C:\repos\MatterHackers_agg-sharp\examples\MeshViewer\MeshViewerApplication.cs,MeshViewerApplication,The following statement contains a magic number: buttonPanel.Padding = new BorderDouble(3' 3);
