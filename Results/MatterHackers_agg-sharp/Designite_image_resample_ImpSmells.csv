Implementation smell,Namespace,Class,File,Method,Description
Long Method,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The method has 192 lines of code.
Complex Method,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,Cyclomatic complexity of the method is 9
Long Statement,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnParentChanged,The length of the statement  "				ImageBuffer image32 = new ImageBuffer(image_resample.m_SourceImage.Width' image_resample.m_SourceImage.Height' 32' new BlenderBGRA()); " is 134.
Long Statement,MatterHackers.Agg,ImageResampleFactory,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,GetAppParameters,The length of the statement  "				"The demonstration of image transformations with resampling. You can see the difference in quality between regular image transformers and the ones with resampling. Of course' image tranformations with resampling work slower because they provide the best possible quality."' " is 273.
Virtual Method Call from Constructor,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The constructor "image_resample" calls a virtual method "AddChild".
Virtual Method Call from Constructor,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The constructor "image_resample" calls a virtual method "AddChild".
Virtual Method Call from Constructor,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The constructor "image_resample" calls a virtual method "AddChild".
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_gamma_lut = new GammaLookUpTable(2.0);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_quad = new MatterHackers.Agg.UI.PolygonEditWidget(4' 5.0);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_quad = new MatterHackers.Agg.UI.PolygonEditWidget(4' 5.0);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_trans_type = new MatterHackers.Agg.UI.RadioButtonGroup(new Vector2(400' 5.0)' new Vector2(30 + 170.0' 95));
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_trans_type = new MatterHackers.Agg.UI.RadioButtonGroup(new Vector2(400' 5.0)' new Vector2(30 + 170.0' 95));
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_trans_type = new MatterHackers.Agg.UI.RadioButtonGroup(new Vector2(400' 5.0)' new Vector2(30 + 170.0' 95));
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_trans_type = new MatterHackers.Agg.UI.RadioButtonGroup(new Vector2(400' 5.0)' new Vector2(30 + 170.0' 95));
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_trans_type = new MatterHackers.Agg.UI.RadioButtonGroup(new Vector2(400' 5.0)' new Vector2(30 + 170.0' 95));
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_gamma = new MatterHackers.Agg.UI.Slider(5.0' 5.0 + 15 * 0' 400 - 5' 10.0 + 15 * 0);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_gamma = new MatterHackers.Agg.UI.Slider(5.0' 5.0 + 15 * 0' 400 - 5' 10.0 + 15 * 0);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_gamma = new MatterHackers.Agg.UI.Slider(5.0' 5.0 + 15 * 0' 400 - 5' 10.0 + 15 * 0);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_gamma = new MatterHackers.Agg.UI.Slider(5.0' 5.0 + 15 * 0' 400 - 5' 10.0 + 15 * 0);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_gamma = new MatterHackers.Agg.UI.Slider(5.0' 5.0 + 15 * 0' 400 - 5' 10.0 + 15 * 0);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_gamma = new MatterHackers.Agg.UI.Slider(5.0' 5.0 + 15 * 0' 400 - 5' 10.0 + 15 * 0);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_gamma = new MatterHackers.Agg.UI.Slider(5.0' 5.0 + 15 * 0' 400 - 5' 10.0 + 15 * 0);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_blur = new MatterHackers.Agg.UI.Slider(5.0' 5.0 + 15 * 1' 400 - 5' 10.0 + 15 * 1);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_blur = new MatterHackers.Agg.UI.Slider(5.0' 5.0 + 15 * 1' 400 - 5' 10.0 + 15 * 1);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_blur = new MatterHackers.Agg.UI.Slider(5.0' 5.0 + 15 * 1' 400 - 5' 10.0 + 15 * 1);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_blur = new MatterHackers.Agg.UI.Slider(5.0' 5.0 + 15 * 1' 400 - 5' 10.0 + 15 * 1);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_blur = new MatterHackers.Agg.UI.Slider(5.0' 5.0 + 15 * 1' 400 - 5' 10.0 + 15 * 1);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_blur = new MatterHackers.Agg.UI.Slider(5.0' 5.0 + 15 * 1' 400 - 5' 10.0 + 15 * 1);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_blur = new MatterHackers.Agg.UI.Slider(5.0' 5.0 + 15 * 1' 400 - 5' 10.0 + 15 * 1);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_old_gamma = 2.0;
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_trans_type.SelectedIndex = 4;
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_gamma.SetRange(0.5' 3.0);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_gamma.SetRange(0.5' 3.0);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_gamma.Value = 2.0;
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_blur.SetRange(0.5' 5.0);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,image_resample,The following statement contains a magic number: m_blur.SetRange(0.5' 5.0);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnParentChanged,The following statement contains a magic number: if (!ImageIO.LoadImageData(img_name' image_resample.m_SourceImage))  			{  				string buf;  				buf = "File not found: "  					+ img_name  					+ ".bmp"  					+ ". Download http://www.antigrain.com/" + img_name + ".bmp" + "\n"  					+ "or copy it from another directory if available.";  				throw new NotImplementedException(buf);  			}  			else  			{  				if (image_resample.m_SourceImage.BitDepth != 32)  				{  					throw new Exception("we are expecting 32 bit source.");  				}  				// give the image some alpha. [4/6/2009 lbrubaker]  				ImageBuffer image32 = new ImageBuffer(image_resample.m_SourceImage.Width' image_resample.m_SourceImage.Height' 32' new BlenderBGRA());  				int offset;  				byte[] source = image_resample.m_SourceImage.GetBuffer(out offset);  				byte[] dest = image32.GetBuffer(out offset);  				for (int y = 0; y < image32.Height; y++)  					for (int x = 0; x < image32.Width; x++)  					{  						int i = y * image32.Width + x;  						dest[i * 4 + 0] = source[i * 4 + 0];  						dest[i * 4 + 1] = source[i * 4 + 1];  						dest[i * 4 + 2] = source[i * 4 + 2];  						Vector2 pixel = new Vector2(x' y);  						Vector2 center = new Vector2(image32.Width / 2' image32.Height / 2);  						Vector2 delta = pixel - center;  						int length = (int)Math.Min(delta.Length * 3' 255);  						dest[i * 4 + 3] = (byte)length;  					}  				// and set our new image with alpha  				image_resample.m_SourceImage = image32;  				//image_resample_application.m_SourceImage.SetBlender(new BlenderBGR());  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnParentChanged,The following statement contains a magic number: if (!ImageIO.LoadImageData(img_name' image_resample.m_SourceImage))  			{  				string buf;  				buf = "File not found: "  					+ img_name  					+ ".bmp"  					+ ". Download http://www.antigrain.com/" + img_name + ".bmp" + "\n"  					+ "or copy it from another directory if available.";  				throw new NotImplementedException(buf);  			}  			else  			{  				if (image_resample.m_SourceImage.BitDepth != 32)  				{  					throw new Exception("we are expecting 32 bit source.");  				}  				// give the image some alpha. [4/6/2009 lbrubaker]  				ImageBuffer image32 = new ImageBuffer(image_resample.m_SourceImage.Width' image_resample.m_SourceImage.Height' 32' new BlenderBGRA());  				int offset;  				byte[] source = image_resample.m_SourceImage.GetBuffer(out offset);  				byte[] dest = image32.GetBuffer(out offset);  				for (int y = 0; y < image32.Height; y++)  					for (int x = 0; x < image32.Width; x++)  					{  						int i = y * image32.Width + x;  						dest[i * 4 + 0] = source[i * 4 + 0];  						dest[i * 4 + 1] = source[i * 4 + 1];  						dest[i * 4 + 2] = source[i * 4 + 2];  						Vector2 pixel = new Vector2(x' y);  						Vector2 center = new Vector2(image32.Width / 2' image32.Height / 2);  						Vector2 delta = pixel - center;  						int length = (int)Math.Min(delta.Length * 3' 255);  						dest[i * 4 + 3] = (byte)length;  					}  				// and set our new image with alpha  				image_resample.m_SourceImage = image32;  				//image_resample_application.m_SourceImage.SetBlender(new BlenderBGR());  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnParentChanged,The following statement contains a magic number: if (!ImageIO.LoadImageData(img_name' image_resample.m_SourceImage))  			{  				string buf;  				buf = "File not found: "  					+ img_name  					+ ".bmp"  					+ ". Download http://www.antigrain.com/" + img_name + ".bmp" + "\n"  					+ "or copy it from another directory if available.";  				throw new NotImplementedException(buf);  			}  			else  			{  				if (image_resample.m_SourceImage.BitDepth != 32)  				{  					throw new Exception("we are expecting 32 bit source.");  				}  				// give the image some alpha. [4/6/2009 lbrubaker]  				ImageBuffer image32 = new ImageBuffer(image_resample.m_SourceImage.Width' image_resample.m_SourceImage.Height' 32' new BlenderBGRA());  				int offset;  				byte[] source = image_resample.m_SourceImage.GetBuffer(out offset);  				byte[] dest = image32.GetBuffer(out offset);  				for (int y = 0; y < image32.Height; y++)  					for (int x = 0; x < image32.Width; x++)  					{  						int i = y * image32.Width + x;  						dest[i * 4 + 0] = source[i * 4 + 0];  						dest[i * 4 + 1] = source[i * 4 + 1];  						dest[i * 4 + 2] = source[i * 4 + 2];  						Vector2 pixel = new Vector2(x' y);  						Vector2 center = new Vector2(image32.Width / 2' image32.Height / 2);  						Vector2 delta = pixel - center;  						int length = (int)Math.Min(delta.Length * 3' 255);  						dest[i * 4 + 3] = (byte)length;  					}  				// and set our new image with alpha  				image_resample.m_SourceImage = image32;  				//image_resample_application.m_SourceImage.SetBlender(new BlenderBGR());  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnParentChanged,The following statement contains a magic number: if (!ImageIO.LoadImageData(img_name' image_resample.m_SourceImage))  			{  				string buf;  				buf = "File not found: "  					+ img_name  					+ ".bmp"  					+ ". Download http://www.antigrain.com/" + img_name + ".bmp" + "\n"  					+ "or copy it from another directory if available.";  				throw new NotImplementedException(buf);  			}  			else  			{  				if (image_resample.m_SourceImage.BitDepth != 32)  				{  					throw new Exception("we are expecting 32 bit source.");  				}  				// give the image some alpha. [4/6/2009 lbrubaker]  				ImageBuffer image32 = new ImageBuffer(image_resample.m_SourceImage.Width' image_resample.m_SourceImage.Height' 32' new BlenderBGRA());  				int offset;  				byte[] source = image_resample.m_SourceImage.GetBuffer(out offset);  				byte[] dest = image32.GetBuffer(out offset);  				for (int y = 0; y < image32.Height; y++)  					for (int x = 0; x < image32.Width; x++)  					{  						int i = y * image32.Width + x;  						dest[i * 4 + 0] = source[i * 4 + 0];  						dest[i * 4 + 1] = source[i * 4 + 1];  						dest[i * 4 + 2] = source[i * 4 + 2];  						Vector2 pixel = new Vector2(x' y);  						Vector2 center = new Vector2(image32.Width / 2' image32.Height / 2);  						Vector2 delta = pixel - center;  						int length = (int)Math.Min(delta.Length * 3' 255);  						dest[i * 4 + 3] = (byte)length;  					}  				// and set our new image with alpha  				image_resample.m_SourceImage = image32;  				//image_resample_application.m_SourceImage.SetBlender(new BlenderBGR());  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnParentChanged,The following statement contains a magic number: if (!ImageIO.LoadImageData(img_name' image_resample.m_SourceImage))  			{  				string buf;  				buf = "File not found: "  					+ img_name  					+ ".bmp"  					+ ". Download http://www.antigrain.com/" + img_name + ".bmp" + "\n"  					+ "or copy it from another directory if available.";  				throw new NotImplementedException(buf);  			}  			else  			{  				if (image_resample.m_SourceImage.BitDepth != 32)  				{  					throw new Exception("we are expecting 32 bit source.");  				}  				// give the image some alpha. [4/6/2009 lbrubaker]  				ImageBuffer image32 = new ImageBuffer(image_resample.m_SourceImage.Width' image_resample.m_SourceImage.Height' 32' new BlenderBGRA());  				int offset;  				byte[] source = image_resample.m_SourceImage.GetBuffer(out offset);  				byte[] dest = image32.GetBuffer(out offset);  				for (int y = 0; y < image32.Height; y++)  					for (int x = 0; x < image32.Width; x++)  					{  						int i = y * image32.Width + x;  						dest[i * 4 + 0] = source[i * 4 + 0];  						dest[i * 4 + 1] = source[i * 4 + 1];  						dest[i * 4 + 2] = source[i * 4 + 2];  						Vector2 pixel = new Vector2(x' y);  						Vector2 center = new Vector2(image32.Width / 2' image32.Height / 2);  						Vector2 delta = pixel - center;  						int length = (int)Math.Min(delta.Length * 3' 255);  						dest[i * 4 + 3] = (byte)length;  					}  				// and set our new image with alpha  				image_resample.m_SourceImage = image32;  				//image_resample_application.m_SourceImage.SetBlender(new BlenderBGR());  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnParentChanged,The following statement contains a magic number: if (!ImageIO.LoadImageData(img_name' image_resample.m_SourceImage))  			{  				string buf;  				buf = "File not found: "  					+ img_name  					+ ".bmp"  					+ ". Download http://www.antigrain.com/" + img_name + ".bmp" + "\n"  					+ "or copy it from another directory if available.";  				throw new NotImplementedException(buf);  			}  			else  			{  				if (image_resample.m_SourceImage.BitDepth != 32)  				{  					throw new Exception("we are expecting 32 bit source.");  				}  				// give the image some alpha. [4/6/2009 lbrubaker]  				ImageBuffer image32 = new ImageBuffer(image_resample.m_SourceImage.Width' image_resample.m_SourceImage.Height' 32' new BlenderBGRA());  				int offset;  				byte[] source = image_resample.m_SourceImage.GetBuffer(out offset);  				byte[] dest = image32.GetBuffer(out offset);  				for (int y = 0; y < image32.Height; y++)  					for (int x = 0; x < image32.Width; x++)  					{  						int i = y * image32.Width + x;  						dest[i * 4 + 0] = source[i * 4 + 0];  						dest[i * 4 + 1] = source[i * 4 + 1];  						dest[i * 4 + 2] = source[i * 4 + 2];  						Vector2 pixel = new Vector2(x' y);  						Vector2 center = new Vector2(image32.Width / 2' image32.Height / 2);  						Vector2 delta = pixel - center;  						int length = (int)Math.Min(delta.Length * 3' 255);  						dest[i * 4 + 3] = (byte)length;  					}  				// and set our new image with alpha  				image_resample.m_SourceImage = image32;  				//image_resample_application.m_SourceImage.SetBlender(new BlenderBGR());  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnParentChanged,The following statement contains a magic number: if (!ImageIO.LoadImageData(img_name' image_resample.m_SourceImage))  			{  				string buf;  				buf = "File not found: "  					+ img_name  					+ ".bmp"  					+ ". Download http://www.antigrain.com/" + img_name + ".bmp" + "\n"  					+ "or copy it from another directory if available.";  				throw new NotImplementedException(buf);  			}  			else  			{  				if (image_resample.m_SourceImage.BitDepth != 32)  				{  					throw new Exception("we are expecting 32 bit source.");  				}  				// give the image some alpha. [4/6/2009 lbrubaker]  				ImageBuffer image32 = new ImageBuffer(image_resample.m_SourceImage.Width' image_resample.m_SourceImage.Height' 32' new BlenderBGRA());  				int offset;  				byte[] source = image_resample.m_SourceImage.GetBuffer(out offset);  				byte[] dest = image32.GetBuffer(out offset);  				for (int y = 0; y < image32.Height; y++)  					for (int x = 0; x < image32.Width; x++)  					{  						int i = y * image32.Width + x;  						dest[i * 4 + 0] = source[i * 4 + 0];  						dest[i * 4 + 1] = source[i * 4 + 1];  						dest[i * 4 + 2] = source[i * 4 + 2];  						Vector2 pixel = new Vector2(x' y);  						Vector2 center = new Vector2(image32.Width / 2' image32.Height / 2);  						Vector2 delta = pixel - center;  						int length = (int)Math.Min(delta.Length * 3' 255);  						dest[i * 4 + 3] = (byte)length;  					}  				// and set our new image with alpha  				image_resample.m_SourceImage = image32;  				//image_resample_application.m_SourceImage.SetBlender(new BlenderBGR());  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnParentChanged,The following statement contains a magic number: if (!ImageIO.LoadImageData(img_name' image_resample.m_SourceImage))  			{  				string buf;  				buf = "File not found: "  					+ img_name  					+ ".bmp"  					+ ". Download http://www.antigrain.com/" + img_name + ".bmp" + "\n"  					+ "or copy it from another directory if available.";  				throw new NotImplementedException(buf);  			}  			else  			{  				if (image_resample.m_SourceImage.BitDepth != 32)  				{  					throw new Exception("we are expecting 32 bit source.");  				}  				// give the image some alpha. [4/6/2009 lbrubaker]  				ImageBuffer image32 = new ImageBuffer(image_resample.m_SourceImage.Width' image_resample.m_SourceImage.Height' 32' new BlenderBGRA());  				int offset;  				byte[] source = image_resample.m_SourceImage.GetBuffer(out offset);  				byte[] dest = image32.GetBuffer(out offset);  				for (int y = 0; y < image32.Height; y++)  					for (int x = 0; x < image32.Width; x++)  					{  						int i = y * image32.Width + x;  						dest[i * 4 + 0] = source[i * 4 + 0];  						dest[i * 4 + 1] = source[i * 4 + 1];  						dest[i * 4 + 2] = source[i * 4 + 2];  						Vector2 pixel = new Vector2(x' y);  						Vector2 center = new Vector2(image32.Width / 2' image32.Height / 2);  						Vector2 delta = pixel - center;  						int length = (int)Math.Min(delta.Length * 3' 255);  						dest[i * 4 + 3] = (byte)length;  					}  				// and set our new image with alpha  				image_resample.m_SourceImage = image32;  				//image_resample_application.m_SourceImage.SetBlender(new BlenderBGR());  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnParentChanged,The following statement contains a magic number: if (!ImageIO.LoadImageData(img_name' image_resample.m_SourceImage))  			{  				string buf;  				buf = "File not found: "  					+ img_name  					+ ".bmp"  					+ ". Download http://www.antigrain.com/" + img_name + ".bmp" + "\n"  					+ "or copy it from another directory if available.";  				throw new NotImplementedException(buf);  			}  			else  			{  				if (image_resample.m_SourceImage.BitDepth != 32)  				{  					throw new Exception("we are expecting 32 bit source.");  				}  				// give the image some alpha. [4/6/2009 lbrubaker]  				ImageBuffer image32 = new ImageBuffer(image_resample.m_SourceImage.Width' image_resample.m_SourceImage.Height' 32' new BlenderBGRA());  				int offset;  				byte[] source = image_resample.m_SourceImage.GetBuffer(out offset);  				byte[] dest = image32.GetBuffer(out offset);  				for (int y = 0; y < image32.Height; y++)  					for (int x = 0; x < image32.Width; x++)  					{  						int i = y * image32.Width + x;  						dest[i * 4 + 0] = source[i * 4 + 0];  						dest[i * 4 + 1] = source[i * 4 + 1];  						dest[i * 4 + 2] = source[i * 4 + 2];  						Vector2 pixel = new Vector2(x' y);  						Vector2 center = new Vector2(image32.Width / 2' image32.Height / 2);  						Vector2 delta = pixel - center;  						int length = (int)Math.Min(delta.Length * 3' 255);  						dest[i * 4 + 3] = (byte)length;  					}  				// and set our new image with alpha  				image_resample.m_SourceImage = image32;  				//image_resample_application.m_SourceImage.SetBlender(new BlenderBGR());  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnParentChanged,The following statement contains a magic number: if (!ImageIO.LoadImageData(img_name' image_resample.m_SourceImage))  			{  				string buf;  				buf = "File not found: "  					+ img_name  					+ ".bmp"  					+ ". Download http://www.antigrain.com/" + img_name + ".bmp" + "\n"  					+ "or copy it from another directory if available.";  				throw new NotImplementedException(buf);  			}  			else  			{  				if (image_resample.m_SourceImage.BitDepth != 32)  				{  					throw new Exception("we are expecting 32 bit source.");  				}  				// give the image some alpha. [4/6/2009 lbrubaker]  				ImageBuffer image32 = new ImageBuffer(image_resample.m_SourceImage.Width' image_resample.m_SourceImage.Height' 32' new BlenderBGRA());  				int offset;  				byte[] source = image_resample.m_SourceImage.GetBuffer(out offset);  				byte[] dest = image32.GetBuffer(out offset);  				for (int y = 0; y < image32.Height; y++)  					for (int x = 0; x < image32.Width; x++)  					{  						int i = y * image32.Width + x;  						dest[i * 4 + 0] = source[i * 4 + 0];  						dest[i * 4 + 1] = source[i * 4 + 1];  						dest[i * 4 + 2] = source[i * 4 + 2];  						Vector2 pixel = new Vector2(x' y);  						Vector2 center = new Vector2(image32.Width / 2' image32.Height / 2);  						Vector2 delta = pixel - center;  						int length = (int)Math.Min(delta.Length * 3' 255);  						dest[i * 4 + 3] = (byte)length;  					}  				// and set our new image with alpha  				image_resample.m_SourceImage = image32;  				//image_resample_application.m_SourceImage.SetBlender(new BlenderBGR());  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnParentChanged,The following statement contains a magic number: if (!ImageIO.LoadImageData(img_name' image_resample.m_SourceImage))  			{  				string buf;  				buf = "File not found: "  					+ img_name  					+ ".bmp"  					+ ". Download http://www.antigrain.com/" + img_name + ".bmp" + "\n"  					+ "or copy it from another directory if available.";  				throw new NotImplementedException(buf);  			}  			else  			{  				if (image_resample.m_SourceImage.BitDepth != 32)  				{  					throw new Exception("we are expecting 32 bit source.");  				}  				// give the image some alpha. [4/6/2009 lbrubaker]  				ImageBuffer image32 = new ImageBuffer(image_resample.m_SourceImage.Width' image_resample.m_SourceImage.Height' 32' new BlenderBGRA());  				int offset;  				byte[] source = image_resample.m_SourceImage.GetBuffer(out offset);  				byte[] dest = image32.GetBuffer(out offset);  				for (int y = 0; y < image32.Height; y++)  					for (int x = 0; x < image32.Width; x++)  					{  						int i = y * image32.Width + x;  						dest[i * 4 + 0] = source[i * 4 + 0];  						dest[i * 4 + 1] = source[i * 4 + 1];  						dest[i * 4 + 2] = source[i * 4 + 2];  						Vector2 pixel = new Vector2(x' y);  						Vector2 center = new Vector2(image32.Width / 2' image32.Height / 2);  						Vector2 delta = pixel - center;  						int length = (int)Math.Min(delta.Length * 3' 255);  						dest[i * 4 + 3] = (byte)length;  					}  				// and set our new image with alpha  				image_resample.m_SourceImage = image32;  				//image_resample_application.m_SourceImage.SetBlender(new BlenderBGR());  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnParentChanged,The following statement contains a magic number: if (!ImageIO.LoadImageData(img_name' image_resample.m_SourceImage))  			{  				string buf;  				buf = "File not found: "  					+ img_name  					+ ".bmp"  					+ ". Download http://www.antigrain.com/" + img_name + ".bmp" + "\n"  					+ "or copy it from another directory if available.";  				throw new NotImplementedException(buf);  			}  			else  			{  				if (image_resample.m_SourceImage.BitDepth != 32)  				{  					throw new Exception("we are expecting 32 bit source.");  				}  				// give the image some alpha. [4/6/2009 lbrubaker]  				ImageBuffer image32 = new ImageBuffer(image_resample.m_SourceImage.Width' image_resample.m_SourceImage.Height' 32' new BlenderBGRA());  				int offset;  				byte[] source = image_resample.m_SourceImage.GetBuffer(out offset);  				byte[] dest = image32.GetBuffer(out offset);  				for (int y = 0; y < image32.Height; y++)  					for (int x = 0; x < image32.Width; x++)  					{  						int i = y * image32.Width + x;  						dest[i * 4 + 0] = source[i * 4 + 0];  						dest[i * 4 + 1] = source[i * 4 + 1];  						dest[i * 4 + 2] = source[i * 4 + 2];  						Vector2 pixel = new Vector2(x' y);  						Vector2 center = new Vector2(image32.Width / 2' image32.Height / 2);  						Vector2 delta = pixel - center;  						int length = (int)Math.Min(delta.Length * 3' 255);  						dest[i * 4 + 3] = (byte)length;  					}  				// and set our new image with alpha  				image_resample.m_SourceImage = image32;  				//image_resample_application.m_SourceImage.SetBlender(new BlenderBGR());  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnParentChanged,The following statement contains a magic number: if (!ImageIO.LoadImageData(img_name' image_resample.m_SourceImage))  			{  				string buf;  				buf = "File not found: "  					+ img_name  					+ ".bmp"  					+ ". Download http://www.antigrain.com/" + img_name + ".bmp" + "\n"  					+ "or copy it from another directory if available.";  				throw new NotImplementedException(buf);  			}  			else  			{  				if (image_resample.m_SourceImage.BitDepth != 32)  				{  					throw new Exception("we are expecting 32 bit source.");  				}  				// give the image some alpha. [4/6/2009 lbrubaker]  				ImageBuffer image32 = new ImageBuffer(image_resample.m_SourceImage.Width' image_resample.m_SourceImage.Height' 32' new BlenderBGRA());  				int offset;  				byte[] source = image_resample.m_SourceImage.GetBuffer(out offset);  				byte[] dest = image32.GetBuffer(out offset);  				for (int y = 0; y < image32.Height; y++)  					for (int x = 0; x < image32.Width; x++)  					{  						int i = y * image32.Width + x;  						dest[i * 4 + 0] = source[i * 4 + 0];  						dest[i * 4 + 1] = source[i * 4 + 1];  						dest[i * 4 + 2] = source[i * 4 + 2];  						Vector2 pixel = new Vector2(x' y);  						Vector2 center = new Vector2(image32.Width / 2' image32.Height / 2);  						Vector2 delta = pixel - center;  						int length = (int)Math.Min(delta.Length * 3' 255);  						dest[i * 4 + 3] = (byte)length;  					}  				// and set our new image with alpha  				image_resample.m_SourceImage = image32;  				//image_resample_application.m_SourceImage.SetBlender(new BlenderBGR());  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnParentChanged,The following statement contains a magic number: if (!ImageIO.LoadImageData(img_name' image_resample.m_SourceImage))  			{  				string buf;  				buf = "File not found: "  					+ img_name  					+ ".bmp"  					+ ". Download http://www.antigrain.com/" + img_name + ".bmp" + "\n"  					+ "or copy it from another directory if available.";  				throw new NotImplementedException(buf);  			}  			else  			{  				if (image_resample.m_SourceImage.BitDepth != 32)  				{  					throw new Exception("we are expecting 32 bit source.");  				}  				// give the image some alpha. [4/6/2009 lbrubaker]  				ImageBuffer image32 = new ImageBuffer(image_resample.m_SourceImage.Width' image_resample.m_SourceImage.Height' 32' new BlenderBGRA());  				int offset;  				byte[] source = image_resample.m_SourceImage.GetBuffer(out offset);  				byte[] dest = image32.GetBuffer(out offset);  				for (int y = 0; y < image32.Height; y++)  					for (int x = 0; x < image32.Width; x++)  					{  						int i = y * image32.Width + x;  						dest[i * 4 + 0] = source[i * 4 + 0];  						dest[i * 4 + 1] = source[i * 4 + 1];  						dest[i * 4 + 2] = source[i * 4 + 2];  						Vector2 pixel = new Vector2(x' y);  						Vector2 center = new Vector2(image32.Width / 2' image32.Height / 2);  						Vector2 delta = pixel - center;  						int length = (int)Math.Min(delta.Length * 3' 255);  						dest[i * 4 + 3] = (byte)length;  					}  				// and set our new image with alpha  				image_resample.m_SourceImage = image32;  				//image_resample_application.m_SourceImage.SetBlender(new BlenderBGR());  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnParentChanged,The following statement contains a magic number: if (!ImageIO.LoadImageData(img_name' image_resample.m_SourceImage))  			{  				string buf;  				buf = "File not found: "  					+ img_name  					+ ".bmp"  					+ ". Download http://www.antigrain.com/" + img_name + ".bmp" + "\n"  					+ "or copy it from another directory if available.";  				throw new NotImplementedException(buf);  			}  			else  			{  				if (image_resample.m_SourceImage.BitDepth != 32)  				{  					throw new Exception("we are expecting 32 bit source.");  				}  				// give the image some alpha. [4/6/2009 lbrubaker]  				ImageBuffer image32 = new ImageBuffer(image_resample.m_SourceImage.Width' image_resample.m_SourceImage.Height' 32' new BlenderBGRA());  				int offset;  				byte[] source = image_resample.m_SourceImage.GetBuffer(out offset);  				byte[] dest = image32.GetBuffer(out offset);  				for (int y = 0; y < image32.Height; y++)  					for (int x = 0; x < image32.Width; x++)  					{  						int i = y * image32.Width + x;  						dest[i * 4 + 0] = source[i * 4 + 0];  						dest[i * 4 + 1] = source[i * 4 + 1];  						dest[i * 4 + 2] = source[i * 4 + 2];  						Vector2 pixel = new Vector2(x' y);  						Vector2 center = new Vector2(image32.Width / 2' image32.Height / 2);  						Vector2 delta = pixel - center;  						int length = (int)Math.Min(delta.Length * 3' 255);  						dest[i * 4 + 3] = (byte)length;  					}  				// and set our new image with alpha  				image_resample.m_SourceImage = image32;  				//image_resample_application.m_SourceImage.SetBlender(new BlenderBGR());  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnParentChanged,The following statement contains a magic number: if (!ImageIO.LoadImageData(img_name' image_resample.m_SourceImage))  			{  				string buf;  				buf = "File not found: "  					+ img_name  					+ ".bmp"  					+ ". Download http://www.antigrain.com/" + img_name + ".bmp" + "\n"  					+ "or copy it from another directory if available.";  				throw new NotImplementedException(buf);  			}  			else  			{  				if (image_resample.m_SourceImage.BitDepth != 32)  				{  					throw new Exception("we are expecting 32 bit source.");  				}  				// give the image some alpha. [4/6/2009 lbrubaker]  				ImageBuffer image32 = new ImageBuffer(image_resample.m_SourceImage.Width' image_resample.m_SourceImage.Height' 32' new BlenderBGRA());  				int offset;  				byte[] source = image_resample.m_SourceImage.GetBuffer(out offset);  				byte[] dest = image32.GetBuffer(out offset);  				for (int y = 0; y < image32.Height; y++)  					for (int x = 0; x < image32.Width; x++)  					{  						int i = y * image32.Width + x;  						dest[i * 4 + 0] = source[i * 4 + 0];  						dest[i * 4 + 1] = source[i * 4 + 1];  						dest[i * 4 + 2] = source[i * 4 + 2];  						Vector2 pixel = new Vector2(x' y);  						Vector2 center = new Vector2(image32.Width / 2' image32.Height / 2);  						Vector2 delta = pixel - center;  						int length = (int)Math.Min(delta.Length * 3' 255);  						dest[i * 4 + 3] = (byte)length;  					}  				// and set our new image with alpha  				image_resample.m_SourceImage = image32;  				//image_resample_application.m_SourceImage.SetBlender(new BlenderBGR());  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnInitialize,The following statement contains a magic number: double dx = Width / 2.0 - (x2 - x1) / 2.0;
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnInitialize,The following statement contains a magic number: double dx = Width / 2.0 - (x2 - x1) / 2.0;
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnInitialize,The following statement contains a magic number: double dy = Height / 2.0 - (y2 - y1) / 2.0;
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnInitialize,The following statement contains a magic number: double dy = Height / 2.0 - (y2 - y1) / 2.0;
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnInitialize,The following statement contains a magic number: m_quad.SetXN(2' Math.Floor(x2 + dx));
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnInitialize,The following statement contains a magic number: m_quad.SetYN(2' Math.Floor(y2 + dy));
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnInitialize,The following statement contains a magic number: m_quad.SetXN(3' Math.Floor(x1 + dx));
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnInitialize,The following statement contains a magic number: m_quad.SetYN(3' Math.Floor(y2 + dy));
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: switch (widgetsSubImage.BitDepth)  			{  				case 24:  					pixf.Attach(widgetsSubImage' new BlenderBGR());  					break;    				case 32:  					pixf.Attach(widgetsSubImage' new BlenderBGRA());  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: switch (widgetsSubImage.BitDepth)  			{  				case 24:  					pixf.Attach(widgetsSubImage' new BlenderBGR());  					break;    				case 32:  					pixf.Attach(widgetsSubImage' new BlenderBGRA());  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: if (m_trans_type.SelectedIndex < 2)  			{  				// For the affine parallelogram transformations we  				// calculate the 4-th (implicit) point of the parallelogram  				m_quad.SetXN(3' m_quad.GetXN(0) + (m_quad.GetXN(2) - m_quad.GetXN(1)));  				m_quad.SetYN(3' m_quad.GetYN(0) + (m_quad.GetYN(2) - m_quad.GetYN(1)));  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: if (m_trans_type.SelectedIndex < 2)  			{  				// For the affine parallelogram transformations we  				// calculate the 4-th (implicit) point of the parallelogram  				m_quad.SetXN(3' m_quad.GetXN(0) + (m_quad.GetXN(2) - m_quad.GetXN(1)));  				m_quad.SetYN(3' m_quad.GetYN(0) + (m_quad.GetYN(2) - m_quad.GetYN(1)));  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: if (m_trans_type.SelectedIndex < 2)  			{  				// For the affine parallelogram transformations we  				// calculate the 4-th (implicit) point of the parallelogram  				m_quad.SetXN(3' m_quad.GetXN(0) + (m_quad.GetXN(2) - m_quad.GetXN(1)));  				m_quad.SetYN(3' m_quad.GetYN(0) + (m_quad.GetYN(2) - m_quad.GetYN(1)));  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: if (m_trans_type.SelectedIndex < 2)  			{  				// For the affine parallelogram transformations we  				// calculate the 4-th (implicit) point of the parallelogram  				m_quad.SetXN(3' m_quad.GetXN(0) + (m_quad.GetXN(2) - m_quad.GetXN(1)));  				m_quad.SetYN(3' m_quad.GetYN(0) + (m_quad.GetYN(2) - m_quad.GetYN(1)));  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: if (m_trans_type.SelectedIndex < 2)  			{  				// For the affine parallelogram transformations we  				// calculate the 4-th (implicit) point of the parallelogram  				m_quad.SetXN(3' m_quad.GetXN(0) + (m_quad.GetXN(2) - m_quad.GetXN(1)));  				m_quad.SetYN(3' m_quad.GetYN(0) + (m_quad.GetYN(2) - m_quad.GetYN(1)));  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: int RectWidth = 70;
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: int xoffset = 50;
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: int yoffset = 50;
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: for (int i = 0; i < 7; i++)  			{  				for (int j = 0; j < 7; j++)  				{  					if ((i + j) % 2 != 0)  					{  						VertexSource.RoundedRect rect = new VertexSource.RoundedRect(i * RectWidth + xoffset' j * RectWidth + yoffset'  							(i + 1) * RectWidth + xoffset' (j + 1) * RectWidth + yoffset' 2);  						rect.normalize_radius();    						g_rasterizer.add_path(rect);  						scanlineRenderer.RenderSolid(clippingProxy' g_rasterizer' g_scanline' new RGBA_Bytes(.2' .2' .2));  					}  				}  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: for (int i = 0; i < 7; i++)  			{  				for (int j = 0; j < 7; j++)  				{  					if ((i + j) % 2 != 0)  					{  						VertexSource.RoundedRect rect = new VertexSource.RoundedRect(i * RectWidth + xoffset' j * RectWidth + yoffset'  							(i + 1) * RectWidth + xoffset' (j + 1) * RectWidth + yoffset' 2);  						rect.normalize_radius();    						g_rasterizer.add_path(rect);  						scanlineRenderer.RenderSolid(clippingProxy' g_rasterizer' g_scanline' new RGBA_Bytes(.2' .2' .2));  					}  				}  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: for (int i = 0; i < 7; i++)  			{  				for (int j = 0; j < 7; j++)  				{  					if ((i + j) % 2 != 0)  					{  						VertexSource.RoundedRect rect = new VertexSource.RoundedRect(i * RectWidth + xoffset' j * RectWidth + yoffset'  							(i + 1) * RectWidth + xoffset' (j + 1) * RectWidth + yoffset' 2);  						rect.normalize_radius();    						g_rasterizer.add_path(rect);  						scanlineRenderer.RenderSolid(clippingProxy' g_rasterizer' g_scanline' new RGBA_Bytes(.2' .2' .2));  					}  				}  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: for (int i = 0; i < 7; i++)  			{  				for (int j = 0; j < 7; j++)  				{  					if ((i + j) % 2 != 0)  					{  						VertexSource.RoundedRect rect = new VertexSource.RoundedRect(i * RectWidth + xoffset' j * RectWidth + yoffset'  							(i + 1) * RectWidth + xoffset' (j + 1) * RectWidth + yoffset' 2);  						rect.normalize_radius();    						g_rasterizer.add_path(rect);  						scanlineRenderer.RenderSolid(clippingProxy' g_rasterizer' g_scanline' new RGBA_Bytes(.2' .2' .2));  					}  				}  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: for (int i = 0; i < 7; i++)  			{  				for (int j = 0; j < 7; j++)  				{  					if ((i + j) % 2 != 0)  					{  						VertexSource.RoundedRect rect = new VertexSource.RoundedRect(i * RectWidth + xoffset' j * RectWidth + yoffset'  							(i + 1) * RectWidth + xoffset' (j + 1) * RectWidth + yoffset' 2);  						rect.normalize_radius();    						g_rasterizer.add_path(rect);  						scanlineRenderer.RenderSolid(clippingProxy' g_rasterizer' g_scanline' new RGBA_Bytes(.2' .2' .2));  					}  				}  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: for (int i = 0; i < 7; i++)  			{  				for (int j = 0; j < 7; j++)  				{  					if ((i + j) % 2 != 0)  					{  						VertexSource.RoundedRect rect = new VertexSource.RoundedRect(i * RectWidth + xoffset' j * RectWidth + yoffset'  							(i + 1) * RectWidth + xoffset' (j + 1) * RectWidth + yoffset' 2);  						rect.normalize_radius();    						g_rasterizer.add_path(rect);  						scanlineRenderer.RenderSolid(clippingProxy' g_rasterizer' g_scanline' new RGBA_Bytes(.2' .2' .2));  					}  				}  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: for (int i = 0; i < 7; i++)  			{  				for (int j = 0; j < 7; j++)  				{  					if ((i + j) % 2 != 0)  					{  						VertexSource.RoundedRect rect = new VertexSource.RoundedRect(i * RectWidth + xoffset' j * RectWidth + yoffset'  							(i + 1) * RectWidth + xoffset' (j + 1) * RectWidth + yoffset' 2);  						rect.normalize_radius();    						g_rasterizer.add_path(rect);  						scanlineRenderer.RenderSolid(clippingProxy' g_rasterizer' g_scanline' new RGBA_Bytes(.2' .2' .2));  					}  				}  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: scanlineRenderer.RenderSolid(clippingProxy' g_rasterizer' g_scanline' new RGBA_Bytes(0' 0.3' 0.5' 0.1));
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: scanlineRenderer.RenderSolid(clippingProxy' g_rasterizer' g_scanline' new RGBA_Bytes(0' 0.3' 0.5' 0.1));
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: scanlineRenderer.RenderSolid(clippingProxy' g_rasterizer' g_scanline' new RGBA_Bytes(0' 0.3' 0.5' 0.1));
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: g_rasterizer.line_to_d(m_quad.GetXN(2) + b' m_quad.GetYN(2) + b);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: g_rasterizer.line_to_d(m_quad.GetXN(2) + b' m_quad.GetYN(2) + b);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: g_rasterizer.line_to_d(m_quad.GetXN(3) - b' m_quad.GetYN(3) + b);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: g_rasterizer.line_to_d(m_quad.GetXN(3) - b' m_quad.GetYN(3) + b);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: switch (m_trans_type.SelectedIndex)  			{  				case 0:  					{  						/*  								agg::trans_affine tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);    								typedef agg::span_interpolator_linear<agg::trans_affine> interpolator_type;  								interpolator_type interpolator(tr);    								typedef image_filter_2x2_type<source_type'  															  interpolator_type> span_gen_type;  								span_gen_type sg(source' interpolator' filter);  								agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  						 */  						break;  					}    				case 1:  					{  						/*  								agg::trans_affine tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);    								typedef agg::span_interpolator_linear<agg::trans_affine> interpolator_type;  								typedef image_resample_affine_type<source_type> span_gen_type;    								interpolator_type interpolator(tr);  								span_gen_type sg(source' interpolator' filter);  								sg.blur(m_blur.Value);  								agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  						 */  						break;  					}    				case 2:  					{  						/*  								agg::trans_perspective tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  								if(tr.is_valid())  								{  									typedef agg::span_interpolator_linear_subdiv<agg::trans_perspective> interpolator_type;  									interpolator_type interpolator(tr);    									typedef image_filter_2x2_type<source_type'  																  interpolator_type> span_gen_type;  									span_gen_type sg(source' interpolator' filter);  									agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  								}  						 */  						break;  					}    				case 3:  					{  						/*  								agg::trans_perspective tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  								if(tr.is_valid())  								{  									typedef agg::span_interpolator_trans<agg::trans_perspective> interpolator_type;  									interpolator_type interpolator(tr);    									typedef image_filter_2x2_type<source_type'  																  interpolator_type> span_gen_type;  									span_gen_type sg(source' interpolator' filter);  									agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  								}  						 */  						break;  					}    				case 4:  					{  						//typedef agg::span_interpolator_persp_lerp<> interpolator_type;  						//typedef agg::span_subdiv_adaptor<interpolator_type> subdiv_adaptor_type;    						span_interpolator_persp_lerp interpolator = new span_interpolator_persp_lerp(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  						span_subdiv_adaptor subdiv_adaptor = new span_subdiv_adaptor(interpolator);    						span_image_resample sg = null;  						if (interpolator.is_valid())  						{  							switch (source.SourceImage.BitDepth)  							{  								case 24:  									sg = new span_image_resample_rgb(source' subdiv_adaptor' filter);  									break;    								case 32:  									sg = new span_image_resample_rgba(source' subdiv_adaptor' filter);  									break;  							}    							sg.blur(m_blur.Value);  							scanlineRenderer.GenerateAndRender(g_rasterizer' g_scanline' clippingProxy' sa' sg);  						}  						break;  					}    				case 5:  					{  						/*  								typedef agg::span_interpolator_persp_exact<> interpolator_type;  								typedef agg::span_subdiv_adaptor<interpolator_type> subdiv_adaptor_type;    								interpolator_type interpolator(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  								subdiv_adaptor_type subdiv_adaptor(interpolator);    								if(interpolator.is_valid())  								{  									typedef image_resample_type<source_type'  																subdiv_adaptor_type> span_gen_type;  									span_gen_type sg(source' subdiv_adaptor' filter);  									sg.blur(m_blur.Value);  									agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  								}  						 */  						break;  					}  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: switch (m_trans_type.SelectedIndex)  			{  				case 0:  					{  						/*  								agg::trans_affine tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);    								typedef agg::span_interpolator_linear<agg::trans_affine> interpolator_type;  								interpolator_type interpolator(tr);    								typedef image_filter_2x2_type<source_type'  															  interpolator_type> span_gen_type;  								span_gen_type sg(source' interpolator' filter);  								agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  						 */  						break;  					}    				case 1:  					{  						/*  								agg::trans_affine tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);    								typedef agg::span_interpolator_linear<agg::trans_affine> interpolator_type;  								typedef image_resample_affine_type<source_type> span_gen_type;    								interpolator_type interpolator(tr);  								span_gen_type sg(source' interpolator' filter);  								sg.blur(m_blur.Value);  								agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  						 */  						break;  					}    				case 2:  					{  						/*  								agg::trans_perspective tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  								if(tr.is_valid())  								{  									typedef agg::span_interpolator_linear_subdiv<agg::trans_perspective> interpolator_type;  									interpolator_type interpolator(tr);    									typedef image_filter_2x2_type<source_type'  																  interpolator_type> span_gen_type;  									span_gen_type sg(source' interpolator' filter);  									agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  								}  						 */  						break;  					}    				case 3:  					{  						/*  								agg::trans_perspective tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  								if(tr.is_valid())  								{  									typedef agg::span_interpolator_trans<agg::trans_perspective> interpolator_type;  									interpolator_type interpolator(tr);    									typedef image_filter_2x2_type<source_type'  																  interpolator_type> span_gen_type;  									span_gen_type sg(source' interpolator' filter);  									agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  								}  						 */  						break;  					}    				case 4:  					{  						//typedef agg::span_interpolator_persp_lerp<> interpolator_type;  						//typedef agg::span_subdiv_adaptor<interpolator_type> subdiv_adaptor_type;    						span_interpolator_persp_lerp interpolator = new span_interpolator_persp_lerp(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  						span_subdiv_adaptor subdiv_adaptor = new span_subdiv_adaptor(interpolator);    						span_image_resample sg = null;  						if (interpolator.is_valid())  						{  							switch (source.SourceImage.BitDepth)  							{  								case 24:  									sg = new span_image_resample_rgb(source' subdiv_adaptor' filter);  									break;    								case 32:  									sg = new span_image_resample_rgba(source' subdiv_adaptor' filter);  									break;  							}    							sg.blur(m_blur.Value);  							scanlineRenderer.GenerateAndRender(g_rasterizer' g_scanline' clippingProxy' sa' sg);  						}  						break;  					}    				case 5:  					{  						/*  								typedef agg::span_interpolator_persp_exact<> interpolator_type;  								typedef agg::span_subdiv_adaptor<interpolator_type> subdiv_adaptor_type;    								interpolator_type interpolator(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  								subdiv_adaptor_type subdiv_adaptor(interpolator);    								if(interpolator.is_valid())  								{  									typedef image_resample_type<source_type'  																subdiv_adaptor_type> span_gen_type;  									span_gen_type sg(source' subdiv_adaptor' filter);  									sg.blur(m_blur.Value);  									agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  								}  						 */  						break;  					}  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: switch (m_trans_type.SelectedIndex)  			{  				case 0:  					{  						/*  								agg::trans_affine tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);    								typedef agg::span_interpolator_linear<agg::trans_affine> interpolator_type;  								interpolator_type interpolator(tr);    								typedef image_filter_2x2_type<source_type'  															  interpolator_type> span_gen_type;  								span_gen_type sg(source' interpolator' filter);  								agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  						 */  						break;  					}    				case 1:  					{  						/*  								agg::trans_affine tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);    								typedef agg::span_interpolator_linear<agg::trans_affine> interpolator_type;  								typedef image_resample_affine_type<source_type> span_gen_type;    								interpolator_type interpolator(tr);  								span_gen_type sg(source' interpolator' filter);  								sg.blur(m_blur.Value);  								agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  						 */  						break;  					}    				case 2:  					{  						/*  								agg::trans_perspective tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  								if(tr.is_valid())  								{  									typedef agg::span_interpolator_linear_subdiv<agg::trans_perspective> interpolator_type;  									interpolator_type interpolator(tr);    									typedef image_filter_2x2_type<source_type'  																  interpolator_type> span_gen_type;  									span_gen_type sg(source' interpolator' filter);  									agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  								}  						 */  						break;  					}    				case 3:  					{  						/*  								agg::trans_perspective tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  								if(tr.is_valid())  								{  									typedef agg::span_interpolator_trans<agg::trans_perspective> interpolator_type;  									interpolator_type interpolator(tr);    									typedef image_filter_2x2_type<source_type'  																  interpolator_type> span_gen_type;  									span_gen_type sg(source' interpolator' filter);  									agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  								}  						 */  						break;  					}    				case 4:  					{  						//typedef agg::span_interpolator_persp_lerp<> interpolator_type;  						//typedef agg::span_subdiv_adaptor<interpolator_type> subdiv_adaptor_type;    						span_interpolator_persp_lerp interpolator = new span_interpolator_persp_lerp(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  						span_subdiv_adaptor subdiv_adaptor = new span_subdiv_adaptor(interpolator);    						span_image_resample sg = null;  						if (interpolator.is_valid())  						{  							switch (source.SourceImage.BitDepth)  							{  								case 24:  									sg = new span_image_resample_rgb(source' subdiv_adaptor' filter);  									break;    								case 32:  									sg = new span_image_resample_rgba(source' subdiv_adaptor' filter);  									break;  							}    							sg.blur(m_blur.Value);  							scanlineRenderer.GenerateAndRender(g_rasterizer' g_scanline' clippingProxy' sa' sg);  						}  						break;  					}    				case 5:  					{  						/*  								typedef agg::span_interpolator_persp_exact<> interpolator_type;  								typedef agg::span_subdiv_adaptor<interpolator_type> subdiv_adaptor_type;    								interpolator_type interpolator(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  								subdiv_adaptor_type subdiv_adaptor(interpolator);    								if(interpolator.is_valid())  								{  									typedef image_resample_type<source_type'  																subdiv_adaptor_type> span_gen_type;  									span_gen_type sg(source' subdiv_adaptor' filter);  									sg.blur(m_blur.Value);  									agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  								}  						 */  						break;  					}  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: switch (m_trans_type.SelectedIndex)  			{  				case 0:  					{  						/*  								agg::trans_affine tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);    								typedef agg::span_interpolator_linear<agg::trans_affine> interpolator_type;  								interpolator_type interpolator(tr);    								typedef image_filter_2x2_type<source_type'  															  interpolator_type> span_gen_type;  								span_gen_type sg(source' interpolator' filter);  								agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  						 */  						break;  					}    				case 1:  					{  						/*  								agg::trans_affine tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);    								typedef agg::span_interpolator_linear<agg::trans_affine> interpolator_type;  								typedef image_resample_affine_type<source_type> span_gen_type;    								interpolator_type interpolator(tr);  								span_gen_type sg(source' interpolator' filter);  								sg.blur(m_blur.Value);  								agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  						 */  						break;  					}    				case 2:  					{  						/*  								agg::trans_perspective tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  								if(tr.is_valid())  								{  									typedef agg::span_interpolator_linear_subdiv<agg::trans_perspective> interpolator_type;  									interpolator_type interpolator(tr);    									typedef image_filter_2x2_type<source_type'  																  interpolator_type> span_gen_type;  									span_gen_type sg(source' interpolator' filter);  									agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  								}  						 */  						break;  					}    				case 3:  					{  						/*  								agg::trans_perspective tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  								if(tr.is_valid())  								{  									typedef agg::span_interpolator_trans<agg::trans_perspective> interpolator_type;  									interpolator_type interpolator(tr);    									typedef image_filter_2x2_type<source_type'  																  interpolator_type> span_gen_type;  									span_gen_type sg(source' interpolator' filter);  									agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  								}  						 */  						break;  					}    				case 4:  					{  						//typedef agg::span_interpolator_persp_lerp<> interpolator_type;  						//typedef agg::span_subdiv_adaptor<interpolator_type> subdiv_adaptor_type;    						span_interpolator_persp_lerp interpolator = new span_interpolator_persp_lerp(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  						span_subdiv_adaptor subdiv_adaptor = new span_subdiv_adaptor(interpolator);    						span_image_resample sg = null;  						if (interpolator.is_valid())  						{  							switch (source.SourceImage.BitDepth)  							{  								case 24:  									sg = new span_image_resample_rgb(source' subdiv_adaptor' filter);  									break;    								case 32:  									sg = new span_image_resample_rgba(source' subdiv_adaptor' filter);  									break;  							}    							sg.blur(m_blur.Value);  							scanlineRenderer.GenerateAndRender(g_rasterizer' g_scanline' clippingProxy' sa' sg);  						}  						break;  					}    				case 5:  					{  						/*  								typedef agg::span_interpolator_persp_exact<> interpolator_type;  								typedef agg::span_subdiv_adaptor<interpolator_type> subdiv_adaptor_type;    								interpolator_type interpolator(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  								subdiv_adaptor_type subdiv_adaptor(interpolator);    								if(interpolator.is_valid())  								{  									typedef image_resample_type<source_type'  																subdiv_adaptor_type> span_gen_type;  									span_gen_type sg(source' subdiv_adaptor' filter);  									sg.blur(m_blur.Value);  									agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  								}  						 */  						break;  					}  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: switch (m_trans_type.SelectedIndex)  			{  				case 0:  					{  						/*  								agg::trans_affine tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);    								typedef agg::span_interpolator_linear<agg::trans_affine> interpolator_type;  								interpolator_type interpolator(tr);    								typedef image_filter_2x2_type<source_type'  															  interpolator_type> span_gen_type;  								span_gen_type sg(source' interpolator' filter);  								agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  						 */  						break;  					}    				case 1:  					{  						/*  								agg::trans_affine tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);    								typedef agg::span_interpolator_linear<agg::trans_affine> interpolator_type;  								typedef image_resample_affine_type<source_type> span_gen_type;    								interpolator_type interpolator(tr);  								span_gen_type sg(source' interpolator' filter);  								sg.blur(m_blur.Value);  								agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  						 */  						break;  					}    				case 2:  					{  						/*  								agg::trans_perspective tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  								if(tr.is_valid())  								{  									typedef agg::span_interpolator_linear_subdiv<agg::trans_perspective> interpolator_type;  									interpolator_type interpolator(tr);    									typedef image_filter_2x2_type<source_type'  																  interpolator_type> span_gen_type;  									span_gen_type sg(source' interpolator' filter);  									agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  								}  						 */  						break;  					}    				case 3:  					{  						/*  								agg::trans_perspective tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  								if(tr.is_valid())  								{  									typedef agg::span_interpolator_trans<agg::trans_perspective> interpolator_type;  									interpolator_type interpolator(tr);    									typedef image_filter_2x2_type<source_type'  																  interpolator_type> span_gen_type;  									span_gen_type sg(source' interpolator' filter);  									agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  								}  						 */  						break;  					}    				case 4:  					{  						//typedef agg::span_interpolator_persp_lerp<> interpolator_type;  						//typedef agg::span_subdiv_adaptor<interpolator_type> subdiv_adaptor_type;    						span_interpolator_persp_lerp interpolator = new span_interpolator_persp_lerp(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  						span_subdiv_adaptor subdiv_adaptor = new span_subdiv_adaptor(interpolator);    						span_image_resample sg = null;  						if (interpolator.is_valid())  						{  							switch (source.SourceImage.BitDepth)  							{  								case 24:  									sg = new span_image_resample_rgb(source' subdiv_adaptor' filter);  									break;    								case 32:  									sg = new span_image_resample_rgba(source' subdiv_adaptor' filter);  									break;  							}    							sg.blur(m_blur.Value);  							scanlineRenderer.GenerateAndRender(g_rasterizer' g_scanline' clippingProxy' sa' sg);  						}  						break;  					}    				case 5:  					{  						/*  								typedef agg::span_interpolator_persp_exact<> interpolator_type;  								typedef agg::span_subdiv_adaptor<interpolator_type> subdiv_adaptor_type;    								interpolator_type interpolator(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  								subdiv_adaptor_type subdiv_adaptor(interpolator);    								if(interpolator.is_valid())  								{  									typedef image_resample_type<source_type'  																subdiv_adaptor_type> span_gen_type;  									span_gen_type sg(source' subdiv_adaptor' filter);  									sg.blur(m_blur.Value);  									agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  								}  						 */  						break;  					}  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: switch (m_trans_type.SelectedIndex)  			{  				case 0:  					{  						/*  								agg::trans_affine tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);    								typedef agg::span_interpolator_linear<agg::trans_affine> interpolator_type;  								interpolator_type interpolator(tr);    								typedef image_filter_2x2_type<source_type'  															  interpolator_type> span_gen_type;  								span_gen_type sg(source' interpolator' filter);  								agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  						 */  						break;  					}    				case 1:  					{  						/*  								agg::trans_affine tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);    								typedef agg::span_interpolator_linear<agg::trans_affine> interpolator_type;  								typedef image_resample_affine_type<source_type> span_gen_type;    								interpolator_type interpolator(tr);  								span_gen_type sg(source' interpolator' filter);  								sg.blur(m_blur.Value);  								agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  						 */  						break;  					}    				case 2:  					{  						/*  								agg::trans_perspective tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  								if(tr.is_valid())  								{  									typedef agg::span_interpolator_linear_subdiv<agg::trans_perspective> interpolator_type;  									interpolator_type interpolator(tr);    									typedef image_filter_2x2_type<source_type'  																  interpolator_type> span_gen_type;  									span_gen_type sg(source' interpolator' filter);  									agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  								}  						 */  						break;  					}    				case 3:  					{  						/*  								agg::trans_perspective tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  								if(tr.is_valid())  								{  									typedef agg::span_interpolator_trans<agg::trans_perspective> interpolator_type;  									interpolator_type interpolator(tr);    									typedef image_filter_2x2_type<source_type'  																  interpolator_type> span_gen_type;  									span_gen_type sg(source' interpolator' filter);  									agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  								}  						 */  						break;  					}    				case 4:  					{  						//typedef agg::span_interpolator_persp_lerp<> interpolator_type;  						//typedef agg::span_subdiv_adaptor<interpolator_type> subdiv_adaptor_type;    						span_interpolator_persp_lerp interpolator = new span_interpolator_persp_lerp(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  						span_subdiv_adaptor subdiv_adaptor = new span_subdiv_adaptor(interpolator);    						span_image_resample sg = null;  						if (interpolator.is_valid())  						{  							switch (source.SourceImage.BitDepth)  							{  								case 24:  									sg = new span_image_resample_rgb(source' subdiv_adaptor' filter);  									break;    								case 32:  									sg = new span_image_resample_rgba(source' subdiv_adaptor' filter);  									break;  							}    							sg.blur(m_blur.Value);  							scanlineRenderer.GenerateAndRender(g_rasterizer' g_scanline' clippingProxy' sa' sg);  						}  						break;  					}    				case 5:  					{  						/*  								typedef agg::span_interpolator_persp_exact<> interpolator_type;  								typedef agg::span_subdiv_adaptor<interpolator_type> subdiv_adaptor_type;    								interpolator_type interpolator(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  								subdiv_adaptor_type subdiv_adaptor(interpolator);    								if(interpolator.is_valid())  								{  									typedef image_resample_type<source_type'  																subdiv_adaptor_type> span_gen_type;  									span_gen_type sg(source' subdiv_adaptor' filter);  									sg.blur(m_blur.Value);  									agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  								}  						 */  						break;  					}  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: t.SetFontSize(10.0);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: pt.width(1.5);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: t.start_point(10.0' 70.0);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following statement contains a magic number: t.start_point(10.0' 70.0);
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnKeyDown,The following statement contains a magic number: if (keyEvent.KeyCode == Keys.Space)  			{  				double cx = (m_quad.GetXN(0) + m_quad.GetXN(1) + m_quad.GetXN(2) + m_quad.GetXN(3)) / 4;  				double cy = (m_quad.GetYN(0) + m_quad.GetYN(1) + m_quad.GetYN(2) + m_quad.GetYN(3)) / 4;  				Affine tr = Affine.NewTranslation(-cx' -cy);  				tr *= Affine.NewRotation(Math.PI / 2.0);  				tr *= Affine.NewTranslation(cx' cy);  				double xn0 = m_quad.GetXN(0); double yn0 = m_quad.GetYN(0);  				double xn1 = m_quad.GetXN(1); double yn1 = m_quad.GetYN(1);  				double xn2 = m_quad.GetXN(2); double yn2 = m_quad.GetYN(2);  				double xn3 = m_quad.GetXN(3); double yn3 = m_quad.GetYN(3);  				tr.transform(ref xn0' ref yn0);  				tr.transform(ref xn1' ref yn1);  				tr.transform(ref xn2' ref yn2);  				tr.transform(ref xn3' ref yn3);  				m_quad.SetXN(0' xn0); m_quad.SetYN(0' yn0);  				m_quad.SetXN(1' xn1); m_quad.SetYN(1' yn1);  				m_quad.SetXN(2' xn2); m_quad.SetYN(2' yn2);  				m_quad.SetXN(3' xn3); m_quad.SetYN(3' yn3);  				Invalidate();  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnKeyDown,The following statement contains a magic number: if (keyEvent.KeyCode == Keys.Space)  			{  				double cx = (m_quad.GetXN(0) + m_quad.GetXN(1) + m_quad.GetXN(2) + m_quad.GetXN(3)) / 4;  				double cy = (m_quad.GetYN(0) + m_quad.GetYN(1) + m_quad.GetYN(2) + m_quad.GetYN(3)) / 4;  				Affine tr = Affine.NewTranslation(-cx' -cy);  				tr *= Affine.NewRotation(Math.PI / 2.0);  				tr *= Affine.NewTranslation(cx' cy);  				double xn0 = m_quad.GetXN(0); double yn0 = m_quad.GetYN(0);  				double xn1 = m_quad.GetXN(1); double yn1 = m_quad.GetYN(1);  				double xn2 = m_quad.GetXN(2); double yn2 = m_quad.GetYN(2);  				double xn3 = m_quad.GetXN(3); double yn3 = m_quad.GetYN(3);  				tr.transform(ref xn0' ref yn0);  				tr.transform(ref xn1' ref yn1);  				tr.transform(ref xn2' ref yn2);  				tr.transform(ref xn3' ref yn3);  				m_quad.SetXN(0' xn0); m_quad.SetYN(0' yn0);  				m_quad.SetXN(1' xn1); m_quad.SetYN(1' yn1);  				m_quad.SetXN(2' xn2); m_quad.SetYN(2' yn2);  				m_quad.SetXN(3' xn3); m_quad.SetYN(3' yn3);  				Invalidate();  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnKeyDown,The following statement contains a magic number: if (keyEvent.KeyCode == Keys.Space)  			{  				double cx = (m_quad.GetXN(0) + m_quad.GetXN(1) + m_quad.GetXN(2) + m_quad.GetXN(3)) / 4;  				double cy = (m_quad.GetYN(0) + m_quad.GetYN(1) + m_quad.GetYN(2) + m_quad.GetYN(3)) / 4;  				Affine tr = Affine.NewTranslation(-cx' -cy);  				tr *= Affine.NewRotation(Math.PI / 2.0);  				tr *= Affine.NewTranslation(cx' cy);  				double xn0 = m_quad.GetXN(0); double yn0 = m_quad.GetYN(0);  				double xn1 = m_quad.GetXN(1); double yn1 = m_quad.GetYN(1);  				double xn2 = m_quad.GetXN(2); double yn2 = m_quad.GetYN(2);  				double xn3 = m_quad.GetXN(3); double yn3 = m_quad.GetYN(3);  				tr.transform(ref xn0' ref yn0);  				tr.transform(ref xn1' ref yn1);  				tr.transform(ref xn2' ref yn2);  				tr.transform(ref xn3' ref yn3);  				m_quad.SetXN(0' xn0); m_quad.SetYN(0' yn0);  				m_quad.SetXN(1' xn1); m_quad.SetYN(1' yn1);  				m_quad.SetXN(2' xn2); m_quad.SetYN(2' yn2);  				m_quad.SetXN(3' xn3); m_quad.SetYN(3' yn3);  				Invalidate();  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnKeyDown,The following statement contains a magic number: if (keyEvent.KeyCode == Keys.Space)  			{  				double cx = (m_quad.GetXN(0) + m_quad.GetXN(1) + m_quad.GetXN(2) + m_quad.GetXN(3)) / 4;  				double cy = (m_quad.GetYN(0) + m_quad.GetYN(1) + m_quad.GetYN(2) + m_quad.GetYN(3)) / 4;  				Affine tr = Affine.NewTranslation(-cx' -cy);  				tr *= Affine.NewRotation(Math.PI / 2.0);  				tr *= Affine.NewTranslation(cx' cy);  				double xn0 = m_quad.GetXN(0); double yn0 = m_quad.GetYN(0);  				double xn1 = m_quad.GetXN(1); double yn1 = m_quad.GetYN(1);  				double xn2 = m_quad.GetXN(2); double yn2 = m_quad.GetYN(2);  				double xn3 = m_quad.GetXN(3); double yn3 = m_quad.GetYN(3);  				tr.transform(ref xn0' ref yn0);  				tr.transform(ref xn1' ref yn1);  				tr.transform(ref xn2' ref yn2);  				tr.transform(ref xn3' ref yn3);  				m_quad.SetXN(0' xn0); m_quad.SetYN(0' yn0);  				m_quad.SetXN(1' xn1); m_quad.SetYN(1' yn1);  				m_quad.SetXN(2' xn2); m_quad.SetYN(2' yn2);  				m_quad.SetXN(3' xn3); m_quad.SetYN(3' yn3);  				Invalidate();  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnKeyDown,The following statement contains a magic number: if (keyEvent.KeyCode == Keys.Space)  			{  				double cx = (m_quad.GetXN(0) + m_quad.GetXN(1) + m_quad.GetXN(2) + m_quad.GetXN(3)) / 4;  				double cy = (m_quad.GetYN(0) + m_quad.GetYN(1) + m_quad.GetYN(2) + m_quad.GetYN(3)) / 4;  				Affine tr = Affine.NewTranslation(-cx' -cy);  				tr *= Affine.NewRotation(Math.PI / 2.0);  				tr *= Affine.NewTranslation(cx' cy);  				double xn0 = m_quad.GetXN(0); double yn0 = m_quad.GetYN(0);  				double xn1 = m_quad.GetXN(1); double yn1 = m_quad.GetYN(1);  				double xn2 = m_quad.GetXN(2); double yn2 = m_quad.GetYN(2);  				double xn3 = m_quad.GetXN(3); double yn3 = m_quad.GetYN(3);  				tr.transform(ref xn0' ref yn0);  				tr.transform(ref xn1' ref yn1);  				tr.transform(ref xn2' ref yn2);  				tr.transform(ref xn3' ref yn3);  				m_quad.SetXN(0' xn0); m_quad.SetYN(0' yn0);  				m_quad.SetXN(1' xn1); m_quad.SetYN(1' yn1);  				m_quad.SetXN(2' xn2); m_quad.SetYN(2' yn2);  				m_quad.SetXN(3' xn3); m_quad.SetYN(3' yn3);  				Invalidate();  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnKeyDown,The following statement contains a magic number: if (keyEvent.KeyCode == Keys.Space)  			{  				double cx = (m_quad.GetXN(0) + m_quad.GetXN(1) + m_quad.GetXN(2) + m_quad.GetXN(3)) / 4;  				double cy = (m_quad.GetYN(0) + m_quad.GetYN(1) + m_quad.GetYN(2) + m_quad.GetYN(3)) / 4;  				Affine tr = Affine.NewTranslation(-cx' -cy);  				tr *= Affine.NewRotation(Math.PI / 2.0);  				tr *= Affine.NewTranslation(cx' cy);  				double xn0 = m_quad.GetXN(0); double yn0 = m_quad.GetYN(0);  				double xn1 = m_quad.GetXN(1); double yn1 = m_quad.GetYN(1);  				double xn2 = m_quad.GetXN(2); double yn2 = m_quad.GetYN(2);  				double xn3 = m_quad.GetXN(3); double yn3 = m_quad.GetYN(3);  				tr.transform(ref xn0' ref yn0);  				tr.transform(ref xn1' ref yn1);  				tr.transform(ref xn2' ref yn2);  				tr.transform(ref xn3' ref yn3);  				m_quad.SetXN(0' xn0); m_quad.SetYN(0' yn0);  				m_quad.SetXN(1' xn1); m_quad.SetYN(1' yn1);  				m_quad.SetXN(2' xn2); m_quad.SetYN(2' yn2);  				m_quad.SetXN(3' xn3); m_quad.SetYN(3' yn3);  				Invalidate();  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnKeyDown,The following statement contains a magic number: if (keyEvent.KeyCode == Keys.Space)  			{  				double cx = (m_quad.GetXN(0) + m_quad.GetXN(1) + m_quad.GetXN(2) + m_quad.GetXN(3)) / 4;  				double cy = (m_quad.GetYN(0) + m_quad.GetYN(1) + m_quad.GetYN(2) + m_quad.GetYN(3)) / 4;  				Affine tr = Affine.NewTranslation(-cx' -cy);  				tr *= Affine.NewRotation(Math.PI / 2.0);  				tr *= Affine.NewTranslation(cx' cy);  				double xn0 = m_quad.GetXN(0); double yn0 = m_quad.GetYN(0);  				double xn1 = m_quad.GetXN(1); double yn1 = m_quad.GetYN(1);  				double xn2 = m_quad.GetXN(2); double yn2 = m_quad.GetYN(2);  				double xn3 = m_quad.GetXN(3); double yn3 = m_quad.GetYN(3);  				tr.transform(ref xn0' ref yn0);  				tr.transform(ref xn1' ref yn1);  				tr.transform(ref xn2' ref yn2);  				tr.transform(ref xn3' ref yn3);  				m_quad.SetXN(0' xn0); m_quad.SetYN(0' yn0);  				m_quad.SetXN(1' xn1); m_quad.SetYN(1' yn1);  				m_quad.SetXN(2' xn2); m_quad.SetYN(2' yn2);  				m_quad.SetXN(3' xn3); m_quad.SetYN(3' yn3);  				Invalidate();  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnKeyDown,The following statement contains a magic number: if (keyEvent.KeyCode == Keys.Space)  			{  				double cx = (m_quad.GetXN(0) + m_quad.GetXN(1) + m_quad.GetXN(2) + m_quad.GetXN(3)) / 4;  				double cy = (m_quad.GetYN(0) + m_quad.GetYN(1) + m_quad.GetYN(2) + m_quad.GetYN(3)) / 4;  				Affine tr = Affine.NewTranslation(-cx' -cy);  				tr *= Affine.NewRotation(Math.PI / 2.0);  				tr *= Affine.NewTranslation(cx' cy);  				double xn0 = m_quad.GetXN(0); double yn0 = m_quad.GetYN(0);  				double xn1 = m_quad.GetXN(1); double yn1 = m_quad.GetYN(1);  				double xn2 = m_quad.GetXN(2); double yn2 = m_quad.GetYN(2);  				double xn3 = m_quad.GetXN(3); double yn3 = m_quad.GetYN(3);  				tr.transform(ref xn0' ref yn0);  				tr.transform(ref xn1' ref yn1);  				tr.transform(ref xn2' ref yn2);  				tr.transform(ref xn3' ref yn3);  				m_quad.SetXN(0' xn0); m_quad.SetYN(0' yn0);  				m_quad.SetXN(1' xn1); m_quad.SetYN(1' yn1);  				m_quad.SetXN(2' xn2); m_quad.SetYN(2' yn2);  				m_quad.SetXN(3' xn3); m_quad.SetYN(3' yn3);  				Invalidate();  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnKeyDown,The following statement contains a magic number: if (keyEvent.KeyCode == Keys.Space)  			{  				double cx = (m_quad.GetXN(0) + m_quad.GetXN(1) + m_quad.GetXN(2) + m_quad.GetXN(3)) / 4;  				double cy = (m_quad.GetYN(0) + m_quad.GetYN(1) + m_quad.GetYN(2) + m_quad.GetYN(3)) / 4;  				Affine tr = Affine.NewTranslation(-cx' -cy);  				tr *= Affine.NewRotation(Math.PI / 2.0);  				tr *= Affine.NewTranslation(cx' cy);  				double xn0 = m_quad.GetXN(0); double yn0 = m_quad.GetYN(0);  				double xn1 = m_quad.GetXN(1); double yn1 = m_quad.GetYN(1);  				double xn2 = m_quad.GetXN(2); double yn2 = m_quad.GetYN(2);  				double xn3 = m_quad.GetXN(3); double yn3 = m_quad.GetYN(3);  				tr.transform(ref xn0' ref yn0);  				tr.transform(ref xn1' ref yn1);  				tr.transform(ref xn2' ref yn2);  				tr.transform(ref xn3' ref yn3);  				m_quad.SetXN(0' xn0); m_quad.SetYN(0' yn0);  				m_quad.SetXN(1' xn1); m_quad.SetYN(1' yn1);  				m_quad.SetXN(2' xn2); m_quad.SetYN(2' yn2);  				m_quad.SetXN(3' xn3); m_quad.SetYN(3' yn3);  				Invalidate();  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnKeyDown,The following statement contains a magic number: if (keyEvent.KeyCode == Keys.Space)  			{  				double cx = (m_quad.GetXN(0) + m_quad.GetXN(1) + m_quad.GetXN(2) + m_quad.GetXN(3)) / 4;  				double cy = (m_quad.GetYN(0) + m_quad.GetYN(1) + m_quad.GetYN(2) + m_quad.GetYN(3)) / 4;  				Affine tr = Affine.NewTranslation(-cx' -cy);  				tr *= Affine.NewRotation(Math.PI / 2.0);  				tr *= Affine.NewTranslation(cx' cy);  				double xn0 = m_quad.GetXN(0); double yn0 = m_quad.GetYN(0);  				double xn1 = m_quad.GetXN(1); double yn1 = m_quad.GetYN(1);  				double xn2 = m_quad.GetXN(2); double yn2 = m_quad.GetYN(2);  				double xn3 = m_quad.GetXN(3); double yn3 = m_quad.GetYN(3);  				tr.transform(ref xn0' ref yn0);  				tr.transform(ref xn1' ref yn1);  				tr.transform(ref xn2' ref yn2);  				tr.transform(ref xn3' ref yn3);  				m_quad.SetXN(0' xn0); m_quad.SetYN(0' yn0);  				m_quad.SetXN(1' xn1); m_quad.SetYN(1' yn1);  				m_quad.SetXN(2' xn2); m_quad.SetYN(2' yn2);  				m_quad.SetXN(3' xn3); m_quad.SetYN(3' yn3);  				Invalidate();  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnKeyDown,The following statement contains a magic number: if (keyEvent.KeyCode == Keys.Space)  			{  				double cx = (m_quad.GetXN(0) + m_quad.GetXN(1) + m_quad.GetXN(2) + m_quad.GetXN(3)) / 4;  				double cy = (m_quad.GetYN(0) + m_quad.GetYN(1) + m_quad.GetYN(2) + m_quad.GetYN(3)) / 4;  				Affine tr = Affine.NewTranslation(-cx' -cy);  				tr *= Affine.NewRotation(Math.PI / 2.0);  				tr *= Affine.NewTranslation(cx' cy);  				double xn0 = m_quad.GetXN(0); double yn0 = m_quad.GetYN(0);  				double xn1 = m_quad.GetXN(1); double yn1 = m_quad.GetYN(1);  				double xn2 = m_quad.GetXN(2); double yn2 = m_quad.GetYN(2);  				double xn3 = m_quad.GetXN(3); double yn3 = m_quad.GetYN(3);  				tr.transform(ref xn0' ref yn0);  				tr.transform(ref xn1' ref yn1);  				tr.transform(ref xn2' ref yn2);  				tr.transform(ref xn3' ref yn3);  				m_quad.SetXN(0' xn0); m_quad.SetYN(0' yn0);  				m_quad.SetXN(1' xn1); m_quad.SetYN(1' yn1);  				m_quad.SetXN(2' xn2); m_quad.SetYN(2' yn2);  				m_quad.SetXN(3' xn3); m_quad.SetYN(3' yn3);  				Invalidate();  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnKeyDown,The following statement contains a magic number: if (keyEvent.KeyCode == Keys.Space)  			{  				double cx = (m_quad.GetXN(0) + m_quad.GetXN(1) + m_quad.GetXN(2) + m_quad.GetXN(3)) / 4;  				double cy = (m_quad.GetYN(0) + m_quad.GetYN(1) + m_quad.GetYN(2) + m_quad.GetYN(3)) / 4;  				Affine tr = Affine.NewTranslation(-cx' -cy);  				tr *= Affine.NewRotation(Math.PI / 2.0);  				tr *= Affine.NewTranslation(cx' cy);  				double xn0 = m_quad.GetXN(0); double yn0 = m_quad.GetYN(0);  				double xn1 = m_quad.GetXN(1); double yn1 = m_quad.GetYN(1);  				double xn2 = m_quad.GetXN(2); double yn2 = m_quad.GetYN(2);  				double xn3 = m_quad.GetXN(3); double yn3 = m_quad.GetYN(3);  				tr.transform(ref xn0' ref yn0);  				tr.transform(ref xn1' ref yn1);  				tr.transform(ref xn2' ref yn2);  				tr.transform(ref xn3' ref yn3);  				m_quad.SetXN(0' xn0); m_quad.SetYN(0' yn0);  				m_quad.SetXN(1' xn1); m_quad.SetYN(1' yn1);  				m_quad.SetXN(2' xn2); m_quad.SetYN(2' yn2);  				m_quad.SetXN(3' xn3); m_quad.SetYN(3' yn3);  				Invalidate();  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnKeyDown,The following statement contains a magic number: if (keyEvent.KeyCode == Keys.Space)  			{  				double cx = (m_quad.GetXN(0) + m_quad.GetXN(1) + m_quad.GetXN(2) + m_quad.GetXN(3)) / 4;  				double cy = (m_quad.GetYN(0) + m_quad.GetYN(1) + m_quad.GetYN(2) + m_quad.GetYN(3)) / 4;  				Affine tr = Affine.NewTranslation(-cx' -cy);  				tr *= Affine.NewRotation(Math.PI / 2.0);  				tr *= Affine.NewTranslation(cx' cy);  				double xn0 = m_quad.GetXN(0); double yn0 = m_quad.GetYN(0);  				double xn1 = m_quad.GetXN(1); double yn1 = m_quad.GetYN(1);  				double xn2 = m_quad.GetXN(2); double yn2 = m_quad.GetYN(2);  				double xn3 = m_quad.GetXN(3); double yn3 = m_quad.GetYN(3);  				tr.transform(ref xn0' ref yn0);  				tr.transform(ref xn1' ref yn1);  				tr.transform(ref xn2' ref yn2);  				tr.transform(ref xn3' ref yn3);  				m_quad.SetXN(0' xn0); m_quad.SetYN(0' yn0);  				m_quad.SetXN(1' xn1); m_quad.SetYN(1' yn1);  				m_quad.SetXN(2' xn2); m_quad.SetYN(2' yn2);  				m_quad.SetXN(3' xn3); m_quad.SetYN(3' yn3);  				Invalidate();  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnKeyDown,The following statement contains a magic number: if (keyEvent.KeyCode == Keys.Space)  			{  				double cx = (m_quad.GetXN(0) + m_quad.GetXN(1) + m_quad.GetXN(2) + m_quad.GetXN(3)) / 4;  				double cy = (m_quad.GetYN(0) + m_quad.GetYN(1) + m_quad.GetYN(2) + m_quad.GetYN(3)) / 4;  				Affine tr = Affine.NewTranslation(-cx' -cy);  				tr *= Affine.NewRotation(Math.PI / 2.0);  				tr *= Affine.NewTranslation(cx' cy);  				double xn0 = m_quad.GetXN(0); double yn0 = m_quad.GetYN(0);  				double xn1 = m_quad.GetXN(1); double yn1 = m_quad.GetYN(1);  				double xn2 = m_quad.GetXN(2); double yn2 = m_quad.GetYN(2);  				double xn3 = m_quad.GetXN(3); double yn3 = m_quad.GetYN(3);  				tr.transform(ref xn0' ref yn0);  				tr.transform(ref xn1' ref yn1);  				tr.transform(ref xn2' ref yn2);  				tr.transform(ref xn3' ref yn3);  				m_quad.SetXN(0' xn0); m_quad.SetYN(0' yn0);  				m_quad.SetXN(1' xn1); m_quad.SetYN(1' yn1);  				m_quad.SetXN(2' xn2); m_quad.SetYN(2' yn2);  				m_quad.SetXN(3' xn3); m_quad.SetYN(3' yn3);  				Invalidate();  			}
Magic Number,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnKeyDown,The following statement contains a magic number: if (keyEvent.KeyCode == Keys.Space)  			{  				double cx = (m_quad.GetXN(0) + m_quad.GetXN(1) + m_quad.GetXN(2) + m_quad.GetXN(3)) / 4;  				double cy = (m_quad.GetYN(0) + m_quad.GetYN(1) + m_quad.GetYN(2) + m_quad.GetYN(3)) / 4;  				Affine tr = Affine.NewTranslation(-cx' -cy);  				tr *= Affine.NewRotation(Math.PI / 2.0);  				tr *= Affine.NewTranslation(cx' cy);  				double xn0 = m_quad.GetXN(0); double yn0 = m_quad.GetYN(0);  				double xn1 = m_quad.GetXN(1); double yn1 = m_quad.GetYN(1);  				double xn2 = m_quad.GetXN(2); double yn2 = m_quad.GetYN(2);  				double xn3 = m_quad.GetXN(3); double yn3 = m_quad.GetYN(3);  				tr.transform(ref xn0' ref yn0);  				tr.transform(ref xn1' ref yn1);  				tr.transform(ref xn2' ref yn2);  				tr.transform(ref xn3' ref yn3);  				m_quad.SetXN(0' xn0); m_quad.SetYN(0' yn0);  				m_quad.SetXN(1' xn1); m_quad.SetYN(1' yn1);  				m_quad.SetXN(2' xn2); m_quad.SetYN(2' yn2);  				m_quad.SetXN(3' xn3); m_quad.SetYN(3' yn3);  				Invalidate();  			}
Magic Number,MatterHackers.Agg,ImageResampleFactory,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,GetAppParameters,The following statement contains a magic number: AppWidgetInfo appWidgetInfo = new AppWidgetInfo(  				"Bitmap"'  				"Image Transformations with Resampling"'  				"The demonstration of image transformations with resampling. You can see the difference in quality between regular image transformers and the ones with resampling. Of course' image tranformations with resampling work slower because they provide the best possible quality."'  				600'  				600);
Magic Number,MatterHackers.Agg,ImageResampleFactory,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,GetAppParameters,The following statement contains a magic number: AppWidgetInfo appWidgetInfo = new AppWidgetInfo(  				"Bitmap"'  				"Image Transformations with Resampling"'  				"The demonstration of image transformations with resampling. You can see the difference in quality between regular image transformers and the ones with resampling. Of course' image tranformations with resampling work slower because they provide the best possible quality."'  				600'  				600);
Missing Default,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following switch statement is missing a default case: switch (m_trans_type.SelectedIndex)  			{  				case 0:  					{  						/*  								agg::trans_affine tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);    								typedef agg::span_interpolator_linear<agg::trans_affine> interpolator_type;  								interpolator_type interpolator(tr);    								typedef image_filter_2x2_type<source_type'  															  interpolator_type> span_gen_type;  								span_gen_type sg(source' interpolator' filter);  								agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  						 */  						break;  					}    				case 1:  					{  						/*  								agg::trans_affine tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);    								typedef agg::span_interpolator_linear<agg::trans_affine> interpolator_type;  								typedef image_resample_affine_type<source_type> span_gen_type;    								interpolator_type interpolator(tr);  								span_gen_type sg(source' interpolator' filter);  								sg.blur(m_blur.Value);  								agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  						 */  						break;  					}    				case 2:  					{  						/*  								agg::trans_perspective tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  								if(tr.is_valid())  								{  									typedef agg::span_interpolator_linear_subdiv<agg::trans_perspective> interpolator_type;  									interpolator_type interpolator(tr);    									typedef image_filter_2x2_type<source_type'  																  interpolator_type> span_gen_type;  									span_gen_type sg(source' interpolator' filter);  									agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  								}  						 */  						break;  					}    				case 3:  					{  						/*  								agg::trans_perspective tr(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  								if(tr.is_valid())  								{  									typedef agg::span_interpolator_trans<agg::trans_perspective> interpolator_type;  									interpolator_type interpolator(tr);    									typedef image_filter_2x2_type<source_type'  																  interpolator_type> span_gen_type;  									span_gen_type sg(source' interpolator' filter);  									agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  								}  						 */  						break;  					}    				case 4:  					{  						//typedef agg::span_interpolator_persp_lerp<> interpolator_type;  						//typedef agg::span_subdiv_adaptor<interpolator_type> subdiv_adaptor_type;    						span_interpolator_persp_lerp interpolator = new span_interpolator_persp_lerp(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  						span_subdiv_adaptor subdiv_adaptor = new span_subdiv_adaptor(interpolator);    						span_image_resample sg = null;  						if (interpolator.is_valid())  						{  							switch (source.SourceImage.BitDepth)  							{  								case 24:  									sg = new span_image_resample_rgb(source' subdiv_adaptor' filter);  									break;    								case 32:  									sg = new span_image_resample_rgba(source' subdiv_adaptor' filter);  									break;  							}    							sg.blur(m_blur.Value);  							scanlineRenderer.GenerateAndRender(g_rasterizer' g_scanline' clippingProxy' sa' sg);  						}  						break;  					}    				case 5:  					{  						/*  								typedef agg::span_interpolator_persp_exact<> interpolator_type;  								typedef agg::span_subdiv_adaptor<interpolator_type> subdiv_adaptor_type;    								interpolator_type interpolator(m_quad.polygon()' g_x1' g_y1' g_x2' g_y2);  								subdiv_adaptor_type subdiv_adaptor(interpolator);    								if(interpolator.is_valid())  								{  									typedef image_resample_type<source_type'  																subdiv_adaptor_type> span_gen_type;  									span_gen_type sg(source' subdiv_adaptor' filter);  									sg.blur(m_blur.Value);  									agg::render_scanlines_aa(g_rasterizer' g_scanline' rb_pre' sa' sg);  								}  						 */  						break;  					}  			}
Missing Default,MatterHackers.Agg,image_resample,C:\repos\MatterHackers_agg-sharp\examples\image_resample\image_resample.cs,OnDraw,The following switch statement is missing a default case: switch (source.SourceImage.BitDepth)  							{  								case 24:  									sg = new span_image_resample_rgb(source' subdiv_adaptor' filter);  									break;    								case 32:  									sg = new span_image_resample_rgba(source' subdiv_adaptor' filter);  									break;  							}
