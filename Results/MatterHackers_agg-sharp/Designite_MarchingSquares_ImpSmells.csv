Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,CreateLineSegments,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,Cyclomatic complexity of the method is 17
Complex Method,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,Cyclomatic complexity of the method is 16
Long Parameter List,MatterHackers.MarchingSquares,LineSegment,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,LineSegment,The method has 5 parameters. Parameters: x1' y1' x2' y2' color
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,CreateLineLoops,The length of the statement  "					loopToAdd.Add(new IntPoint((long)(connectionVertex.X * pixelsToIntPointsScale)' (long)(connectionVertex.Y * pixelsToIntPointsScale))); " is 134.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,CreateLineLoops,The length of the statement  "									loopToAdd.Add(new IntPoint((long)(connectionVertex.X * pixelsToIntPointsScale)' (long)(connectionVertex.Y * pixelsToIntPointsScale))); " is 134.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,GetInterpolatedSegment,The length of the statement  "			double colorAStartThreshold = thersholdPerPixel[((int)segmentA.start.X) + ((int)segmentA.start.Y) * imageToMarch.Width]; " is 120.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,GetInterpolatedSegment,The length of the statement  "			double colorBStartThreshold = thersholdPerPixel[((int)segmentB.start.X) + ((int)segmentB.start.Y) * imageToMarch.Width]; " is 120.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The length of the statement  "					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y' x' y' color))); " is 121.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The length of the statement  "					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color))); " is 129.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The length of the statement  "					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y + 1' x + 1' y' color))); " is 129.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The length of the statement  "					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x' y + 1' x + 1' y + 1' color))); " is 137.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The length of the statement  "						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color))); " is 129.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The length of the statement  "						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color))); " is 129.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The length of the statement  "						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color))); " is 129.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The length of the statement  "						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color))); " is 129.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The length of the statement  "					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x + 1' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color))); " is 129.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The length of the statement  "					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color))); " is 129.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The length of the statement  "					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color))); " is 129.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The length of the statement  "					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x' y + 1' color)' new LineSegment(x + 1' y' x' y' color))); " is 129.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The length of the statement  "						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x' y' color)' new LineSegment(x' y + 1' x' y' color))); " is 121.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The length of the statement  "						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x + 1' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color))); " is 137.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The length of the statement  "						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color))); " is 121.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The length of the statement  "						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color))); " is 137.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The length of the statement  "					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color))); " is 137.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The length of the statement  "					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color))); " is 129.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The length of the statement  "					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color))); " is 129.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The length of the statement  "					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color))); " is 121.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,GetInterpolatedSegment,The length of the statement  "            float colorAStart = Math.Min(imageToMarch.GetBuffer()[imageToMarch.GetBufferOffsetXY((int)segmentA.start.x' (int)segmentA.start.y)]' 1); " is 136.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,GetInterpolatedSegment,The length of the statement  "            float colorAEnd = Math.Min(imageToMarch.GetBuffer()[imageToMarch.GetBufferOffsetXY((int)segmentA.end.x' (int)segmentA.end.y)]' 1); " is 130.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,GetInterpolatedSegment,The length of the statement  "            float colorBStart = Math.Min(imageToMarch.GetBuffer()[imageToMarch.GetBufferOffsetXY((int)segmentB.start.x' (int)segmentB.start.y)]' 1); " is 136.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,GetInterpolatedSegment,The length of the statement  "            float colorBEnd = Math.Min(imageToMarch.GetBuffer()[imageToMarch.GetBufferOffsetXY((int)segmentB.end.x' (int)segmentB.end.y)]' 1); " is 130.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,GetInterpolatedSegment,The length of the statement  "			float colorAStart = imageToMarch.GetBuffer()[imageToMarch.GetBufferOffsetXY((int)segmentA.start.X' (int)segmentA.start.Y)]; " is 123.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,GetInterpolatedSegment,The length of the statement  "			float colorBStart = imageToMarch.GetBuffer()[imageToMarch.GetBufferOffsetXY((int)segmentB.start.X' (int)segmentB.start.Y)]; " is 123.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The length of the statement  "					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y))); " is 125.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The length of the statement  "					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y + 1' x + 1' y))); " is 125.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The length of the statement  "					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x' y + 1' x + 1' y + 1))); " is 133.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The length of the statement  "						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1))); " is 125.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The length of the statement  "						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y))); " is 125.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The length of the statement  "						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1))); " is 125.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The length of the statement  "						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y))); " is 125.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The length of the statement  "					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x + 1' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1))); " is 125.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The length of the statement  "					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1))); " is 125.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The length of the statement  "					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1))); " is 125.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The length of the statement  "					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x' y + 1)' new LineSegmentFloat(x + 1' y' x' y))); " is 125.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The length of the statement  "						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1))); " is 133.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The length of the statement  "						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1))); " is 133.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The length of the statement  "					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1))); " is 133.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The length of the statement  "					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1))); " is 125.
Long Statement,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The length of the statement  "					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y))); " is 125.
Magic Number,MatterHackers.MarchingSquares,SimpleRange,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,SimpleRange,The following statement contains a magic number: this.starting = Math.Min(starting' 254);
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,MarchingSquaresByte,The following statement contains a magic number: var imageToMarch = new ImageBuffer(sourceImage.Width + 2' sourceImage.Height + 2);
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,MarchingSquaresByte,The following statement contains a magic number: var imageToMarch = new ImageBuffer(sourceImage.Width + 2' sourceImage.Height + 2);
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,MarchingSquaresByte,The following statement contains a magic number: int imageBufferOffsetWithX = imageBufferOffset + x * 4;
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,GetRGBA,The following statement contains a magic number: var color = new Color(buffer[offset + 2]' buffer[offset + 1]' buffer[offset + 0]' buffer[offset + 3]);
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,GetRGBA,The following statement contains a magic number: var color = new Color(buffer[offset + 2]' buffer[offset + 1]' buffer[offset + 0]' buffer[offset + 3]);
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,CreateLineSegments,The following statement contains a magic number: double average = (point0 + point1 + point2 + point3) / 4.0;
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,CreateLineSegments,The following statement contains a magic number: flags = 10;
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,CreateLineSegments,The following statement contains a magic number: average > .5
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,CreateLineSegments,The following statement contains a magic number: flags == 5
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,GetInterpolatedSegment,The following statement contains a magic number: double offsetA = 1 - (colorAEndThreshold + colorAStartThreshold) / 2.0;
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,GetInterpolatedSegment,The following statement contains a magic number: double ratioB = 1 - (colorBEndThreshold + colorBStartThreshold) / 2.0;
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,GetInterpolatedSegment,The following statement contains a magic number: double offsetToPixelCenter = .5;
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y + 1' x + 1' y' color)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x + 1' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x' y' color)' new LineSegment(x' y + 1' x' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x + 1' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y + 1' x + 1' y' color)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x + 1' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x' y' color)' new LineSegment(x' y + 1' x' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x + 1' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y + 1' x + 1' y' color)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x + 1' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x' y' color)' new LineSegment(x' y + 1' x' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x + 1' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y + 1' x + 1' y' color)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x + 1' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x' y' color)' new LineSegment(x' y + 1' x' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x + 1' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y + 1' x + 1' y' color)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x + 1' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x' y' color)' new LineSegment(x' y + 1' x' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x + 1' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y + 1' x + 1' y' color)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x + 1' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x' y' color)' new LineSegment(x' y + 1' x' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x + 1' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y + 1' x + 1' y' color)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x + 1' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x' y' color)' new LineSegment(x' y + 1' x' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x + 1' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y + 1' x + 1' y' color)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x + 1' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x' y' color)' new LineSegment(x' y + 1' x' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x + 1' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y + 1' x + 1' y' color)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x + 1' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x' y' color)' new LineSegment(x' y + 1' x' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x + 1' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y + 1' x + 1' y' color)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x + 1' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x' y' color)' new LineSegment(x' y + 1' x' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x + 1' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y + 1' x + 1' y' color)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x + 1' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x' y' color)' new LineSegment(x' y + 1' x' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x + 1' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y + 1' x + 1' y' color)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x + 1' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x' y' color)' new LineSegment(x' y + 1' x' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x + 1' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y + 1' x + 1' y' color)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x + 1' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x' y' color)' new LineSegment(x' y + 1' x' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x + 1' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,DrawSegments,The following statement contains a magic number: Stroke StrockedLineToDraw = new Stroke(m_LinesToDraw' .25);
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,CreateLineSegments,The following statement contains a magic number: float average = (point0 + point1 + point2 + point3) / 4;
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,CreateLineSegments,The following statement contains a magic number: flags = 10;
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,CreateLineSegments,The following statement contains a magic number: flags == 5
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,GetInterpolatedSegment,The following statement contains a magic number: double offsetA = 1 - (colorAEnd + colorAStart) / 2.0;
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,GetInterpolatedSegment,The following statement contains a magic number: double ratioB = 1 - (colorBEnd + colorBStart) / 2.0;
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,GetInterpolatedSegment,The following statement contains a magic number: double offsetToPixelCenter = .5;
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y + 1' x + 1' y)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x + 1' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x' y)' new LineSegmentFloat(x' y + 1' x' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y + 1' x + 1' y)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x + 1' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x' y)' new LineSegmentFloat(x' y + 1' x' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y + 1' x + 1' y)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x + 1' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x' y)' new LineSegmentFloat(x' y + 1' x' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y + 1' x + 1' y)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x + 1' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x' y)' new LineSegmentFloat(x' y + 1' x' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y + 1' x + 1' y)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x + 1' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x' y)' new LineSegmentFloat(x' y + 1' x' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y + 1' x + 1' y)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x + 1' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x' y)' new LineSegmentFloat(x' y + 1' x' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y + 1' x + 1' y)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x + 1' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x' y)' new LineSegmentFloat(x' y + 1' x' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y + 1' x + 1' y)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x + 1' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x' y)' new LineSegmentFloat(x' y + 1' x' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y + 1' x + 1' y)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x + 1' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x' y)' new LineSegmentFloat(x' y + 1' x' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y + 1' x + 1' y)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x + 1' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x' y)' new LineSegmentFloat(x' y + 1' x' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y + 1' x + 1' y)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x + 1' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x' y)' new LineSegmentFloat(x' y + 1' x' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y + 1' x + 1' y)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x + 1' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x' y)' new LineSegmentFloat(x' y + 1' x' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The following statement contains a magic number: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y + 1' x + 1' y)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x + 1' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x' y)' new LineSegmentFloat(x' y + 1' x' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  					break;  			}
Magic Number,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,DrawSegments,The following statement contains a magic number: Stroke StrockedLineToDraw = new Stroke(m_LinesToDraw' .25);
Missing Default,MatterHackers.MarchingSquares,MarchingSquaresByte,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresByte.cs,AddSegmentForFlags,The following switch statement is missing a default case: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x + 1' y + 1' x + 1' y' color)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x' y' x + 1' y' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x + 1' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x' y' color)' new LineSegment(x' y + 1' x + 1' y + 1' color)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x' y' color)' new LineSegment(x' y + 1' x' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y + 1' x + 1' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y + 1' x + 1' y' color)' new LineSegment(x + 1' y + 1' x' y + 1' color)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x + 1' y' x + 1' y + 1' color)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x + 1' y' x + 1' y + 1' color)' new LineSegment(x + 1' y' x' y' color)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegment(x' y' x' y + 1' color)' new LineSegment(x' y' x + 1' y' color)));  					break;  			}
Missing Default,MatterHackers.MarchingSquares,MarchingSquaresFloat,D:\research\architectureSmells\repos\MatterHackers_agg-sharp\MarchingSquares\MarchingSquaresFloat.cs,AddSegmentForFlags,The following switch statement is missing a default case: switch (flags)  			{  				case 1:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 2:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					break;    				case 3:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x + 1' y + 1' x + 1' y)));  					break;    				case 4:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 5:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x' y' x + 1' y)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					}  					break;    				case 6:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x + 1' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 7:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x' y)' new LineSegmentFloat(x' y + 1' x + 1' y + 1)));  					break;    				case 8:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 9:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 10:  					if (wasFlipped)  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x' y)' new LineSegmentFloat(x' y + 1' x' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y + 1' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					}  					else  					{  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  						LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					}  					break;    				case 11:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y + 1' x + 1' y)' new LineSegmentFloat(x + 1' y + 1' x' y + 1)));  					break;    				case 12:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x + 1' y' x + 1' y + 1)));  					break;    				case 13:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x + 1' y' x + 1' y + 1)' new LineSegmentFloat(x + 1' y' x' y)));  					break;    				case 14:  					LineSegments.Add(GetInterpolatedSegment(new LineSegmentFloat(x' y' x' y + 1)' new LineSegmentFloat(x' y' x + 1' y)));  					break;  			}
