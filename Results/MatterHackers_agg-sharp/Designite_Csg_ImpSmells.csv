Implementation smell,Namespace,Class,File,Method,Description
Long Method,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The method has 108 lines of code.
Long Method,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The method has 143 lines of code.
Long Method,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundPoint,The method has 120 lines of code.
Long Parameter List,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,Box,The method has 5 parameters. Parameters: sizeX' sizeY' sizeZ' name' createCentered
Long Parameter List,MatterHackers.Csg.Solids,BoxPrimitive,C:\repos\MatterHackers_agg-sharp\Csg\Solids\BoxPrimitive.cs,BoxPrimitive,The method has 5 parameters. Parameters: sizeX' sizeY' sizeZ' name' createCentered
Long Parameter List,MatterHackers.Csg.Solids,LinearExtrude,C:\repos\MatterHackers_agg-sharp\Csg\Solids\LinearExtrude.cs,LinearExtrude,The method has 5 parameters. Parameters: points' height' alignment' twistRadians' name
Long Parameter List,MatterHackers.Csg.Solids,LinearExtrude,C:\repos\MatterHackers_agg-sharp\Csg\Solids\LinearExtrude.cs,LinearExtrude,The method has 5 parameters. Parameters: points' height' alignment' twistRadians' name
Long Parameter List,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,CreateFillet,The method has 6 parameters. Parameters: objectA' faceA' objectB' faceB' radius' extraDimension
Long Parameter List,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,CreateBevel,The method has 6 parameters. Parameters: innerRadius' outerRadius' height' alignment' extraDimension' name
Long Parameter List,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,CreateNegativeBevel,The method has 6 parameters. Parameters: innerRadius' outerRadius' height' alignment' extraDimension' name
Long Parameter List,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,CreateFillet,The method has 6 parameters. Parameters: innerRadius' outerRadius' height' alignment' extraDimension' name
Long Parameter List,MatterHackers.Csg.Solids,NGonExtrusion,C:\repos\MatterHackers_agg-sharp\Csg\Solids\NGonExtrusion.cs,NGonExtrusion,The method has 5 parameters. Parameters: radius1' numSides' height' alignment' name
Long Parameter List,MatterHackers.Csg.Solids,Cylinder,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Cylinder.cs,Cylinder,The method has 5 parameters. Parameters: radius1' radius2' height' alignment' name
Long Parameter List,MatterHackers.Csg.Transform,Align,C:\repos\MatterHackers_agg-sharp\Csg\Transform\Align.cs,Align,The method has 8 parameters. Parameters: objectToAlign' boundingFacesToAlign' objectToAlignTo' boundingFacesToAlignTo' offsetX' offsetY' offsetZ' name
Long Parameter List,MatterHackers.Csg.Transform,Align,C:\repos\MatterHackers_agg-sharp\Csg\Transform\Align.cs,Align,The method has 6 parameters. Parameters: objectToAlign' boundingFacesToAlign' offsetX' offsetY' offsetZ' name
Long Parameter List,MatterHackers.Csg.Transform,Align,C:\repos\MatterHackers_agg-sharp\Csg\Transform\Align.cs,Align,The method has 7 parameters. Parameters: objectToAlign' boundingFacesToAlign' positionToAlignTo' offsetX' offsetY' offsetZ' name
Long Parameter List,MatterHackers.Csg.Transform,Rotate,C:\repos\MatterHackers_agg-sharp\Csg\Transform\Rotate.cs,Rotate,The method has 5 parameters. Parameters: objectToRotate' x' y' z' name
Long Parameter List,MatterHackers.Csg.Transform,Scale,C:\repos\MatterHackers_agg-sharp\Csg\Transform\Scale.cs,Scale,The method has 5 parameters. Parameters: objectToScale' x' y' z' name
Long Parameter List,MatterHackers.Csg.Transform,SetCenter,C:\repos\MatterHackers_agg-sharp\Csg\Transform\SetCenter.cs,SetCenter,The method has 8 parameters. Parameters: objectToCenter' x' y' z' onX' onY' onZ' name
Long Parameter List,MatterHackers.Csg.Transform,SetCenter,C:\repos\MatterHackers_agg-sharp\Csg\Transform\SetCenter.cs,SetCenter,The method has 6 parameters. Parameters: objectToCenter' offset' onX' onY' onZ' name
Long Parameter List,MatterHackers.Csg.Transform,Translate,C:\repos\MatterHackers_agg-sharp\Csg\Transform\Translate.cs,Translate,The method has 5 parameters. Parameters: objectToTranslate' x' y' z' name
Long Statement,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateCylinder,The length of the statement  "				Vertex bottomVertex = cylinder.CreateVertex(new Vector3(bottomRadialPos.x' bottomRadialPos.y' -cylinderToMeasure.Height / 2)); " is 126.
Long Statement,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CsgToMeshRecursive,The length of the statement  "            info += "cylinder(r1=" + objectToProcess.Radius1.ToString() + "' r2=" + objectToProcess.Radius1.ToString() + "' h=" + objectToProcess.Height.ToString() + "' center=true' $fn=" + objectToProcess.NumSides.ToString() + ");"; " is 221.
Long Statement,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CsgToMeshRecursive,The length of the statement  "            return ApplyIndent("intersection()" + "\n{\n" + CsgToMeshRecursive((dynamic)objectToProcess.a' level + 1) + "\n" + CsgToMeshRecursive((dynamic)objectToProcess.b' level + 1) + "\n}"); " is 182.
Long Statement,MatterHackers.Csg.Processors,CopyAndFlatten,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CopyAndFlatten.cs,DoCopyAndFlatten,The length of the statement  "			return new TransformBase(DoCopyAndFlatten((dynamic)objectToProcess.objectToTransform)' objectToProcess.transform' objectToProcess.Name); " is 136.
Long Statement,MatterHackers.Csg.Processors,CopyAndFlatten,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CopyAndFlatten.cs,DoCopyAndFlatten,The length of the statement  "			Difference differenceCopy = new Difference(DoCopyAndFlatten((dynamic)objectToProcess.primary)' objectToProcess.primary.Name); " is 125.
Long Statement,MatterHackers.Csg.Processors,OpenSCadOutput,C:\repos\MatterHackers_agg-sharp\Csg\Processors\OpenSCadOutput.cs,GetScadOutputRecursive,The length of the statement  "				info += "cube([" + objectToProcess.Size.x.ToString() + "' " + objectToProcess.Size.y.ToString() + "' " + objectToProcess.Size.z.ToString() + "]' center=true);" + AddNameAsComment(objectToProcess);" is 196.
Long Statement,MatterHackers.Csg.Processors,OpenSCadOutput,C:\repos\MatterHackers_agg-sharp\Csg\Processors\OpenSCadOutput.cs,GetScadOutputRecursive,The length of the statement  "				info += "cube([" + objectToProcess.Size.x.ToString() + "' " + objectToProcess.Size.y.ToString() + "' " + objectToProcess.Size.z.ToString() + "]);" + AddNameAsComment(objectToProcess);" is 183.
Long Statement,MatterHackers.Csg.Processors,OpenSCadOutput,C:\repos\MatterHackers_agg-sharp\Csg\Processors\OpenSCadOutput.cs,GetScadOutputRecursive,The length of the statement  "			info += "cylinder(r1=" + objectToProcess.Radius1.ToString() + "' r2=" + objectToProcess.Radius2.ToString() + "' h=" + objectToProcess.Height.ToString() + "' center=true' $fn={0});".FormatWith(NumberOfCylinderSegments) + AddNameAsComment(objectToProcess);" is 254.
Long Statement,MatterHackers.Csg.Processors,OpenSCadOutput,C:\repos\MatterHackers_agg-sharp\Csg\Processors\OpenSCadOutput.cs,GetScadOutputRecursive,The length of the statement  "			string linear_extrude = String.Format("linear_extrude(height = {0}' center = true' convexity = 10' twist = {1})"' objectToProcess.height' MathHelper.RadiansToDegrees(objectToProcess.twistRadians));" is 197.
Long Statement,MatterHackers.Csg.Processors,OpenSCadOutput,C:\repos\MatterHackers_agg-sharp\Csg\Processors\OpenSCadOutput.cs,GetScadOutputRecursive,The length of the statement  "			info += "cylinder(r1=" + objectToProcess.Radius1.ToString() + "' r2=" + objectToProcess.Radius1.ToString() + "' h=" + objectToProcess.Height.ToString() + "' center=true' $fn=" + objectToProcess.NumSides.ToString() + ");" + AddNameAsComment(objectToProcess);" is 257.
Long Statement,MatterHackers.Csg.Processors,OpenSCadOutput,C:\repos\MatterHackers_agg-sharp\Csg\Processors\OpenSCadOutput.cs,GetScadOutputRecursive,The length of the statement  "			info += "sphere(" + objectToProcess.Radius.ToString() + "' $fn={0});".FormatWith(NumberOfCylinderSegments) + AddNameAsComment(objectToProcess);" is 143.
Long Statement,MatterHackers.Csg.Processors,OpenSCadOutput,C:\repos\MatterHackers_agg-sharp\Csg\Processors\OpenSCadOutput.cs,GetScadOutputRecursive,The length of the statement  "				+ objectToProcess.transform.Column3.ToString("0.#######") + "] ])" + AddNameAsComment(objectToProcess) + "\n{\n" + GetScadOutputRecursive((dynamic)objectToProcess.objectToTransform' level + 1) + "\n}"' level);" is 209.
Long Statement,MatterHackers.Csg.Processors,OpenSCadOutput,C:\repos\MatterHackers_agg-sharp\Csg\Processors\OpenSCadOutput.cs,GetScadOutputRecursive,The length of the statement  "			return ApplyIndent("intersection()" + AddNameAsComment(objectToProcess) + "\n{\n" + GetScadOutputRecursive((dynamic)objectToProcess.a' level + 1) + "\n" + GetScadOutputRecursive((dynamic)objectToProcess.b' level + 1) + "\n}"' level);" is 233.
Long Statement,MatterHackers.Csg.Processors,OutputNamedCenters,C:\repos\MatterHackers_agg-sharp\Csg\Processors\OutputNamedCenters2D.cs,LookForNamedPartRecursive,The length of the statement  "					string output = "translate([" + position.x.ToString() + "' " + position.y.ToString() + "' " + position.z.ToString() + "])\n"; " is 125.
Long Statement,MatterHackers.Csg.Processors,OutputNamedCenters,C:\repos\MatterHackers_agg-sharp\Csg\Processors\OutputNamedCenters2D.cs,LookForNamedPartRecursive,The length of the statement  "			return LookForNamedPartRecursive((dynamic)objectToProcess.a' accumulatedMatrix) + LookForNamedPartRecursive((dynamic)objectToProcess.b' accumulatedMatrix); " is 155.
Long Statement,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The length of the statement  "						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky " is 121.
Long Statement,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,BevelEdge,The length of the statement  "			CsgObject offsetRoundToApply = new Align(roundToApply' Face.Left | Face.Front | Face.Bottom' root' Face.Left | Face.Front | Face.Bottom); " is 137.
Long Statement,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,BevelEdge,The length of the statement  "			CsgObject offsetRoundToApply = new Align(roundToApply' Face.Left | Face.Front | Face.Bottom' root' Face.Left | Face.Front | Face.Bottom); " is 137.
Long Statement,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,BevelFace,The length of the statement  "			CsgObject offsetRoundToApply = new Align(roundToApply' Face.Left | Face.Front | Face.Bottom' root' Face.Left | Face.Front | Face.Bottom); " is 137.
Long Statement,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,BevelAll,The length of the statement  "			CsgObject offsetRoundToApply = new Align(roundToApply' Face.Left | Face.Front | Face.Bottom' root' Face.Left | Face.Front | Face.Bottom); " is 137.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0); " is 130.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0); " is 131.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0); " is 127.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0); " is 128.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension); " is 127.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension); " is 126.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension); " is 132.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension); " is 133.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0); " is 133.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0); " is 132.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension); " is 130.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension); " is 127.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension); " is 141.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension); " is 134.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0); " is 130.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0); " is 129.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension); " is 129.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension); " is 128.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension); " is 134.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension); " is 135.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension); " is 137.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension); " is 132.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension); " is 126.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The length of the statement  "						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension); " is 125.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundPoint,The length of the statement  "						pointCut = new Align(pointCut' threeFacesThatSharePoint' pointRound' threeFacesThatSharePoint' extraDimension' extraDimension' extraDimension); " is 143.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundPoint,The length of the statement  "						pointRound = new Align(pointRound' threeFacesThatSharePoint' GetEdgeOffset(threeFacesThatSharePoint)' -extraDimension' -extraDimension' -extraDimension); " is 153.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundPoint,The length of the statement  "						pointCut = new Align(pointCut' threeFacesThatSharePoint' pointRound' threeFacesThatSharePoint' extraDimension' extraDimension' -extraDimension); " is 144.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundPoint,The length of the statement  "						pointRound = new Align(pointRound' threeFacesThatSharePoint' GetEdgeOffset(threeFacesThatSharePoint)' -extraDimension' -extraDimension' extraDimension); " is 152.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundPoint,The length of the statement  "						pointCut = new Align(pointCut' threeFacesThatSharePoint' pointRound' threeFacesThatSharePoint' extraDimension' -extraDimension' extraDimension); " is 144.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundPoint,The length of the statement  "						pointRound = new Align(pointRound' threeFacesThatSharePoint' GetEdgeOffset(threeFacesThatSharePoint)' -extraDimension' extraDimension' -extraDimension); " is 152.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundPoint,The length of the statement  "						pointCut = new Align(pointCut' threeFacesThatSharePoint' pointRound' threeFacesThatSharePoint' extraDimension' -extraDimension' -extraDimension); " is 145.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundPoint,The length of the statement  "						pointRound = new Align(pointRound' threeFacesThatSharePoint' GetEdgeOffset(threeFacesThatSharePoint)' -extraDimension' extraDimension' extraDimension); " is 151.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundPoint,The length of the statement  "						pointCut = new Align(pointCut' threeFacesThatSharePoint' pointRound' threeFacesThatSharePoint' -extraDimension' extraDimension' extraDimension); " is 144.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundPoint,The length of the statement  "						pointRound = new Align(pointRound' threeFacesThatSharePoint' GetEdgeOffset(threeFacesThatSharePoint)' extraDimension' -extraDimension' -extraDimension); " is 152.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundPoint,The length of the statement  "						pointCut = new Align(pointCut' threeFacesThatSharePoint' pointRound' threeFacesThatSharePoint' -extraDimension' extraDimension' -extraDimension); " is 145.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundPoint,The length of the statement  "						pointRound = new Align(pointRound' threeFacesThatSharePoint' GetEdgeOffset(threeFacesThatSharePoint)' extraDimension' -extraDimension' extraDimension); " is 151.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundPoint,The length of the statement  "						pointCut = new Align(pointCut' threeFacesThatSharePoint' pointRound' threeFacesThatSharePoint' -extraDimension' -extraDimension' extraDimension); " is 145.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundPoint,The length of the statement  "						pointRound = new Align(pointRound' threeFacesThatSharePoint' GetEdgeOffset(threeFacesThatSharePoint)' extraDimension' extraDimension' -extraDimension); " is 151.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundPoint,The length of the statement  "						pointCut = new Align(pointCut' threeFacesThatSharePoint' pointRound' threeFacesThatSharePoint' -extraDimension' -extraDimension' -extraDimension); " is 146.
Long Statement,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundPoint,The length of the statement  "						pointRound = new Align(pointRound' threeFacesThatSharePoint' GetEdgeOffset(threeFacesThatSharePoint)' extraDimension' extraDimension' extraDimension); " is 150.
Long Statement,MatterHackers.Csg.Solids,CylinderPrimitive,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Cylinder.cs,GetAxisAlignedBoundingBox,The length of the statement  "				return new AxisAlignedBoundingBox(new Vector3(-maxRadius' -maxRadius' -height / 2)' new Vector3(maxRadius' maxRadius' height / 2)); " is 131.
Long Statement,MatterHackers.Csg.Transform,Align,C:\repos\MatterHackers_agg-sharp\Csg\Transform\Align.cs,IsSet,The length of the statement  "					throw new Exception("You cannot have both " + faceToCheckFor.ToString() + " and " + faceToAssertNot.ToString() + " set when calling Align.  The are mutually exclusive."); " is 170.
Virtual Method Call from Constructor,MatterHackers.Csg.Transform,Align,C:\repos\MatterHackers_agg-sharp\Csg\Transform\Align.cs,Align,The constructor "Align" calls a virtual method "GetAxisAlignedBoundingBox".
Virtual Method Call from Constructor,MatterHackers.Csg.Transform,SetCenter,C:\repos\MatterHackers_agg-sharp\Csg\Transform\SetCenter.cs,SetCenter,The constructor "SetCenter" calls a virtual method "GetAxisAlignedBoundingBox".
Magic Number,MatterHackers.Csg,CsgObject,C:\repos\MatterHackers_agg-sharp\Csg\CsgObject.cs,GetCenter,The following statement contains a magic number: return new Vector3((bounds.maxXYZ + bounds.minXYZ) / 2);
Magic Number,MatterHackers.Csg,CsgObject,C:\repos\MatterHackers_agg-sharp\Csg\CsgObject.cs,NewMirrorAccrossX,The following statement contains a magic number: if (offsetFromOrigin != 0)  			{  				return new Translate(new Scale(this' new Vector3(-1' 1' 1))' new Vector3(offsetFromOrigin * 2' 0' 0)' name);  			}
Magic Number,MatterHackers.Csg,CsgObject,C:\repos\MatterHackers_agg-sharp\Csg\CsgObject.cs,NewMirrorAccrossY,The following statement contains a magic number: return new Translate(new Scale(this' new Vector3(1' -1' 1))' new Vector3(0' offsetFromOrigin * 2' 0)' name);
Magic Number,MatterHackers.Csg,CsgObject,C:\repos\MatterHackers_agg-sharp\Csg\CsgObject.cs,NewMirrorAccrossZ,The following statement contains a magic number: return new Translate(new Scale(this' new Vector3(1' 1' -1))' new Vector3(0' 0' offsetFromOrigin * 2)' name);
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: Vertex[] verts = new Vertex[8];
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: verts[2] = cube.CreateVertex(new Vector3(aabb.maxXYZ.x' aabb.maxXYZ.y' aabb.maxXYZ.z));
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: verts[3] = cube.CreateVertex(new Vector3(aabb.minXYZ.x' aabb.maxXYZ.y' aabb.maxXYZ.z));
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: verts[4] = cube.CreateVertex(new Vector3(aabb.minXYZ.x' aabb.minXYZ.y' aabb.minXYZ.z));
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: verts[5] = cube.CreateVertex(new Vector3(aabb.maxXYZ.x' aabb.minXYZ.y' aabb.minXYZ.z));
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: verts[6] = cube.CreateVertex(new Vector3(aabb.maxXYZ.x' aabb.maxXYZ.y' aabb.minXYZ.z));
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: verts[7] = cube.CreateVertex(new Vector3(aabb.minXYZ.x' aabb.maxXYZ.y' aabb.minXYZ.z));
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: cube.CreateFace(new Vertex[] { verts[0]' verts[1]' verts[2]' verts[3] });
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: cube.CreateFace(new Vertex[] { verts[0]' verts[1]' verts[2]' verts[3] });
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: cube.CreateFace(new Vertex[] { verts[4]' verts[0]' verts[3]' verts[7] });
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: cube.CreateFace(new Vertex[] { verts[4]' verts[0]' verts[3]' verts[7] });
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: cube.CreateFace(new Vertex[] { verts[4]' verts[0]' verts[3]' verts[7] });
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: cube.CreateFace(new Vertex[] { verts[1]' verts[5]' verts[6]' verts[2] });
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: cube.CreateFace(new Vertex[] { verts[1]' verts[5]' verts[6]' verts[2] });
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: cube.CreateFace(new Vertex[] { verts[1]' verts[5]' verts[6]' verts[2] });
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: cube.CreateFace(new Vertex[] { verts[4]' verts[7]' verts[6]' verts[5] });
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: cube.CreateFace(new Vertex[] { verts[4]' verts[7]' verts[6]' verts[5] });
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: cube.CreateFace(new Vertex[] { verts[4]' verts[7]' verts[6]' verts[5] });
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: cube.CreateFace(new Vertex[] { verts[4]' verts[7]' verts[6]' verts[5] });
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: cube.CreateFace(new Vertex[] { verts[3]' verts[2]' verts[6]' verts[7] });
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: cube.CreateFace(new Vertex[] { verts[3]' verts[2]' verts[6]' verts[7] });
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: cube.CreateFace(new Vertex[] { verts[3]' verts[2]' verts[6]' verts[7] });
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: cube.CreateFace(new Vertex[] { verts[3]' verts[2]' verts[6]' verts[7] });
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: cube.CreateFace(new Vertex[] { verts[4]' verts[5]' verts[1]' verts[0] });
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateBox,The following statement contains a magic number: cube.CreateFace(new Vertex[] { verts[4]' verts[5]' verts[1]' verts[0] });
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateCylinder,The following statement contains a magic number: int count = 20;
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateCylinder,The following statement contains a magic number: for (int i = 0; i < count; i++)  			{  				Vector2 bottomRadialPos = Vector2.Rotate(new Vector2(cylinderToMeasure.Radius1' 0)' MathHelper.Tau * i / 20);  				Vertex bottomVertex = cylinder.CreateVertex(new Vector3(bottomRadialPos.x' bottomRadialPos.y' -cylinderToMeasure.Height / 2));  				bottomVerts.Add(bottomVertex);  				Vector2 topRadialPos = Vector2.Rotate(new Vector2(cylinderToMeasure.Radius1' 0)' MathHelper.Tau * i / 20);  				Vertex topVertex = cylinder.CreateVertex(new Vector3(topRadialPos.x' topRadialPos.y' cylinderToMeasure.Height / 2));  				topVerts.Add(topVertex);  			}
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateCylinder,The following statement contains a magic number: for (int i = 0; i < count; i++)  			{  				Vector2 bottomRadialPos = Vector2.Rotate(new Vector2(cylinderToMeasure.Radius1' 0)' MathHelper.Tau * i / 20);  				Vertex bottomVertex = cylinder.CreateVertex(new Vector3(bottomRadialPos.x' bottomRadialPos.y' -cylinderToMeasure.Height / 2));  				bottomVerts.Add(bottomVertex);  				Vector2 topRadialPos = Vector2.Rotate(new Vector2(cylinderToMeasure.Radius1' 0)' MathHelper.Tau * i / 20);  				Vertex topVertex = cylinder.CreateVertex(new Vector3(topRadialPos.x' topRadialPos.y' cylinderToMeasure.Height / 2));  				topVerts.Add(topVertex);  			}
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateCylinder,The following statement contains a magic number: for (int i = 0; i < count; i++)  			{  				Vector2 bottomRadialPos = Vector2.Rotate(new Vector2(cylinderToMeasure.Radius1' 0)' MathHelper.Tau * i / 20);  				Vertex bottomVertex = cylinder.CreateVertex(new Vector3(bottomRadialPos.x' bottomRadialPos.y' -cylinderToMeasure.Height / 2));  				bottomVerts.Add(bottomVertex);  				Vector2 topRadialPos = Vector2.Rotate(new Vector2(cylinderToMeasure.Radius1' 0)' MathHelper.Tau * i / 20);  				Vertex topVertex = cylinder.CreateVertex(new Vector3(topRadialPos.x' topRadialPos.y' cylinderToMeasure.Height / 2));  				topVerts.Add(topVertex);  			}
Magic Number,MatterHackers.RenderOpenGl,CsgToMesh,C:\repos\MatterHackers_agg-sharp\Csg\Processors\CsgToMesh.cs,CreateCylinder,The following statement contains a magic number: for (int i = 0; i < count; i++)  			{  				Vector2 bottomRadialPos = Vector2.Rotate(new Vector2(cylinderToMeasure.Radius1' 0)' MathHelper.Tau * i / 20);  				Vertex bottomVertex = cylinder.CreateVertex(new Vector3(bottomRadialPos.x' bottomRadialPos.y' -cylinderToMeasure.Height / 2));  				bottomVerts.Add(bottomVertex);  				Vector2 topRadialPos = Vector2.Rotate(new Vector2(cylinderToMeasure.Radius1' 0)' MathHelper.Tau * i / 20);  				Vertex topVertex = cylinder.CreateVertex(new Vector3(topRadialPos.x' topRadialPos.y' cylinderToMeasure.Height / 2));  				topVerts.Add(topVertex);  			}
Magic Number,MatterHackers.Csg.Processors,OpenSCadOutput,C:\repos\MatterHackers_agg-sharp\Csg\Processors\OpenSCadOutput.cs,ApplyIndent,The following statement contains a magic number: if (level > 0) 			{ 				StringBuilder final = new StringBuilder();  				string[] splitOnReturn = source.Split('\n'); 				for (int i = 0; i < splitOnReturn.Length; i++) 				{ 					final.Append(Spaces(4)); 					final.Append(splitOnReturn[i]); 					if (i < splitOnReturn.Length - 1) 					{ 						final.Append('\n'); 					} 				}  				return final.ToString(); 			}
Magic Number,MatterHackers.Csg.Solids,Torus,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Torus.cs,Torus,The following statement contains a magic number: int numCurvePoints = 32;
Magic Number,MatterHackers.Csg.Solids,Torus,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Torus.cs,Torus,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.x:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.negX:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(-90));  					break;    				case Alignment.y:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.z:  					break;    				case Alignment.negZ:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(180));  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.Csg.Solids,Torus,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Torus.cs,Torus,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.x:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.negX:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(-90));  					break;    				case Alignment.y:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.z:  					break;    				case Alignment.negZ:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(180));  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.Csg.Solids,Torus,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Torus.cs,Torus,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.x:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.negX:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(-90));  					break;    				case Alignment.y:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.z:  					break;    				case Alignment.negZ:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(180));  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.Csg.Solids,Torus,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Torus.cs,Torus,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.x:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.negX:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(-90));  					break;    				case Alignment.y:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.z:  					break;    				case Alignment.negZ:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(180));  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,Box,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Box.cs,CutAlongDiagonal,The following statement contains a magic number: switch (facesToKeepWhole)  			{  				case (Face.Left | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' x: Math.Sqrt(2) / 2' y: -Math.Sqrt(2) / 2' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' -MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' y: 1' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutLeftFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Left | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' y: -.05' z: 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Front):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1' 1.1' createCentered: false' name: "boxtToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' 0' MathHelper.Tau / 8));  						boxToCutOut = new Translate(boxToCutOut' z: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOutRightFront");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' -MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' 0' -.05' 0);  						//boxToCutOut = new Translate(boxToCutOut' Math.Sqrt(2) / 2' 0' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Right | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(Math.Sqrt(2)' 1.1' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(0' MathHelper.Tau / 8' 0));  						boxToCutOut = new Translate(boxToCutOut' -Math.Sqrt(2) / 2' 0' 1 - Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size' name: "botToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' Math.Sqrt(2) / 2' -Math.Sqrt(2) / 2);  						boxToCutOut = new Scale(boxToCutOut' size);  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Front | Face.Bottom):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' -.05' 0' 1);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxtToCutOutFrontBottom");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Bottom | Face.Back):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false);  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05);  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				case (Face.Back | Face.Top):  					{  						Vector3 size = root.Size;  						CsgObject boxToCutOut = new Box(1.1' Math.Sqrt(2)' 1' createCentered: false' name: "boxToCutOut");  						boxToCutOut = new Rotate(boxToCutOut' new Vector3(-MathHelper.Tau / 8' 0' 0));  						boxToCutOut = new Translate(boxToCutOut' x: -.05' y: -Math.Sqrt(2) / 2' z: .28); // TODO: do the right math. .28 is hacky  						boxToCutOut = new Scale(boxToCutOut' size' name: "boxToCutOut");  						root = new Difference(root' boxToCutOut);  					}  					break;    				default:  					throw new NotImplementedException("Just write it for this case.");  			}
Magic Number,MatterHackers.Csg.Solids,BoxPrimitive,C:\repos\MatterHackers_agg-sharp\Csg\Solids\BoxPrimitive.cs,GetAxisAlignedBoundingBox,The following statement contains a magic number: if (CreateCentered)  			{  				return new AxisAlignedBoundingBox(-size / 2' size / 2);  			}  			else  			{  				return new AxisAlignedBoundingBox(Vector3.Zero' size);  			}
Magic Number,MatterHackers.Csg.Solids,BoxPrimitive,C:\repos\MatterHackers_agg-sharp\Csg\Solids\BoxPrimitive.cs,GetAxisAlignedBoundingBox,The following statement contains a magic number: if (CreateCentered)  			{  				return new AxisAlignedBoundingBox(-size / 2' size / 2);  			}  			else  			{  				return new AxisAlignedBoundingBox(Vector3.Zero' size);  			}
Magic Number,MatterHackers.Csg.Solids,LinearExtrude,C:\repos\MatterHackers_agg-sharp\Csg\Solids\LinearExtrude.cs,LinearExtrude,The following statement contains a magic number: if ((points.Length % 2) != 0)  			{  				throw new Exception("You must pass in an even number of points so they can be converted to Vector2s.");  			}
Magic Number,MatterHackers.Csg.Solids,LinearExtrude,C:\repos\MatterHackers_agg-sharp\Csg\Solids\LinearExtrude.cs,LinearExtrude,The following statement contains a magic number: for (int i = 0; i < points.Length; i += 2)  			{  				vectorPoints.Add(new Vector2(points[i]' points[i + 1]));  			}
Magic Number,MatterHackers.Csg.Solids,LinearExtrude,C:\repos\MatterHackers_agg-sharp\Csg\Solids\LinearExtrude.cs,LinearExtrude,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.x:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.y:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(90));  					break;  			}
Magic Number,MatterHackers.Csg.Solids,LinearExtrude,C:\repos\MatterHackers_agg-sharp\Csg\Solids\LinearExtrude.cs,LinearExtrude,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.x:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.y:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(90));  					break;  			}
Magic Number,MatterHackers.Csg.Solids,LinearExtrude,C:\repos\MatterHackers_agg-sharp\Csg\Solids\LinearExtrude.cs,LinearExtrude,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.x:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.y:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(90));  					break;  			}
Magic Number,MatterHackers.Csg.Solids,LinearExtrude,C:\repos\MatterHackers_agg-sharp\Csg\Solids\LinearExtrude.cs,LinearExtrude,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.x:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.y:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(90));  					break;  			}
Magic Number,MatterHackers.Csg.Solids,LinearExtrudePrimitive,C:\repos\MatterHackers_agg-sharp\Csg\Solids\LinearExtrude.cs,GetAxisAlignedBoundingBox,The following statement contains a magic number: return new AxisAlignedBoundingBox(new Vector3(minX' minY' -height / 2)' new Vector3(maxX' maxY' height / 2));
Magic Number,MatterHackers.Csg.Solids,LinearExtrudePrimitive,C:\repos\MatterHackers_agg-sharp\Csg\Solids\LinearExtrude.cs,GetAxisAlignedBoundingBox,The following statement contains a magic number: return new AxisAlignedBoundingBox(new Vector3(minX' minY' -height / 2)' new Vector3(maxX' maxY' height / 2));
Magic Number,MatterHackers.Csg.Solids,RotateExtrude,C:\repos\MatterHackers_agg-sharp\Csg\Solids\RotateExtrude.cs,RotateExtrude,The following statement contains a magic number: if ((points.Length % 2) != 0)  			{  				throw new Exception("You must pass in an even number of points so they can be converted to Vector2s.");  			}
Magic Number,MatterHackers.Csg.Solids,RotateExtrude,C:\repos\MatterHackers_agg-sharp\Csg\Solids\RotateExtrude.cs,RotateExtrude,The following statement contains a magic number: for (int i = 0; i < points.Length; i += 2)  			{  				vectorPoints.Add(new Vector2(points[i]' points[i + 1]));  			}
Magic Number,MatterHackers.Csg.Solids,RotateExtrude,C:\repos\MatterHackers_agg-sharp\Csg\Solids\RotateExtrude.cs,RotateExtrude,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.x:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.y:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.z:  					// don't need to do anything  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.Csg.Solids,RotateExtrude,C:\repos\MatterHackers_agg-sharp\Csg\Solids\RotateExtrude.cs,RotateExtrude,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.x:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.y:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.z:  					// don't need to do anything  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.Csg.Solids,RotateExtrude,C:\repos\MatterHackers_agg-sharp\Csg\Solids\RotateExtrude.cs,RotateExtrude,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.x:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.negX:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(-90));  					break;    				case Alignment.y:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.z:  					break;    				case Alignment.negZ:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(180));  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.Csg.Solids,RotateExtrude,C:\repos\MatterHackers_agg-sharp\Csg\Solids\RotateExtrude.cs,RotateExtrude,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.x:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.negX:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(-90));  					break;    				case Alignment.y:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.z:  					break;    				case Alignment.negZ:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(180));  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.Csg.Solids,RotateExtrude,C:\repos\MatterHackers_agg-sharp\Csg\Solids\RotateExtrude.cs,RotateExtrude,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.x:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.negX:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(-90));  					break;    				case Alignment.y:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.z:  					break;    				case Alignment.negZ:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(180));  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.Csg.Solids,RotateExtrude,C:\repos\MatterHackers_agg-sharp\Csg\Solids\RotateExtrude.cs,RotateExtrude,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.x:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.negX:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(-90));  					break;    				case Alignment.y:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.z:  					break;    				case Alignment.negZ:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(180));  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,GetAxisAlignedBoundingBox,The following statement contains a magic number: return new Aabb(-size / 2' size / 2);
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,GetAxisAlignedBoundingBox,The following statement contains a magic number: return new Aabb(-size / 2' size / 2);
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,GetEdgeOffset,The following statement contains a magic number: if ((faceFlags & Face.Left) != 0)  			{  				offset.x = -size.x / 2;  			}  			else if ((faceFlags & Face.Right) != 0)  			{  				offset.x = size.x / 2;  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,GetEdgeOffset,The following statement contains a magic number: if ((faceFlags & Face.Left) != 0)  			{  				offset.x = -size.x / 2;  			}  			else if ((faceFlags & Face.Right) != 0)  			{  				offset.x = size.x / 2;  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,GetEdgeOffset,The following statement contains a magic number: if ((faceFlags & Face.Front) != 0)  			{  				offset.y = -size.y / 2;  			}  			else if ((faceFlags & Face.Back) != 0)  			{  				offset.y = size.y / 2;  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,GetEdgeOffset,The following statement contains a magic number: if ((faceFlags & Face.Front) != 0)  			{  				offset.y = -size.y / 2;  			}  			else if ((faceFlags & Face.Back) != 0)  			{  				offset.y = size.y / 2;  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,GetEdgeOffset,The following statement contains a magic number: if ((faceFlags & Face.Bottom) != 0)  			{  				offset.z = -size.z / 2;  			}  			else if ((faceFlags & Face.Top) != 0)  			{  				offset.z = size.z / 2;  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,GetEdgeOffset,The following statement contains a magic number: if ((faceFlags & Face.Bottom) != 0)  			{  				offset.z = -size.z / 2;  			}  			else if ((faceFlags & Face.Top) != 0)  			{  				offset.z = size.z / 2;  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,RoundEdge,The following statement contains a magic number: switch (edgeToRound)  			{  				case Edge.LeftFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Front' newRound' Face.Left | Face.Front' extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Front' GetEdgeOffset(Face.Left | Face.Front)' -extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.LeftBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Left | Face.Back' newRound' Face.Left | Face.Back' extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Left | Face.Back' GetEdgeOffset(Face.Left | Face.Back)' -extraDimension' extraDimension' 0);  					}  					break;    				case Edge.LeftTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Top' newRound' Face.Left | Face.Top' extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Top' GetEdgeOffset(Face.Left | Face.Top)' -extraDimension' 0' extraDimension);  					}  					break;    				case Edge.LeftBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Left | Face.Bottom' newRound' Face.Left | Face.Bottom' extraDimension' 0' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Left | Face.Bottom' GetEdgeOffset(Face.Left | Face.Bottom)' -extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightFront:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject frontTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Front' newRound' Face.Right | Face.Front' -extraDimension' extraDimension' 0);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Front' GetEdgeOffset(Face.Right | Face.Front)' extraDimension' -extraDimension' 0);  					}  					break;    				case Edge.RightTop:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontTopCut = new Align(frontTopCut' Face.Right | Face.Top' newRound' Face.Right | Face.Top' -extraDimension' 0' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Right | Face.Top' GetEdgeOffset(Face.Right | Face.Top)' extraDimension' 0' extraDimension);  					}  					break;    				case Edge.RightBottom:  					{  						double ySize = size.y + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' ySize' radiusBoxSize);  						CsgObject frontBottomCut = new Cylinder(radius' ySize + extraDimension * 2' Alignment.y);  						frontBottomCut = new Align(frontBottomCut' Face.Right | Face.Bottom' newRound' Face.Right | Face.Bottom' -extraDimension' 0' extraDimension);  						newRound -= frontBottomCut;  						newRound = new Align(newRound' Face.Right | Face.Bottom' GetEdgeOffset(Face.Right | Face.Bottom)' extraDimension' 0' -extraDimension);  					}  					break;    				case Edge.RightBack:  					{  						double zSize = size.z + 2 * extraDimension;  						newRound = new Box(radiusBoxSize' radiusBoxSize' zSize);  						CsgObject BackTopCut = new Cylinder(radius' zSize + extraDimension * 2' Alignment.z);  						BackTopCut = new Align(BackTopCut' Face.Right | Face.Back' newRound' Face.Right | Face.Back' -extraDimension' -extraDimension' 0);  						newRound -= BackTopCut;  						newRound = new Align(newRound' Face.Right | Face.Back' GetEdgeOffset(Face.Right | Face.Back)' extraDimension' extraDimension' 0);  					}  					break;    				case Edge.FrontTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Top' newRound' Face.Front | Face.Top' 0' extraDimension' -extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Top' GetEdgeOffset(Face.Front | Face.Top)' 0' -extraDimension' extraDimension);  					}  					break;    				case Edge.FrontBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject frontTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						frontTopCut = new Align(frontTopCut' Face.Front | Face.Bottom' newRound' Face.Front | Face.Bottom' 0' extraDimension' extraDimension);  						newRound -= frontTopCut;  						newRound = new Align(newRound' Face.Front | Face.Bottom' GetEdgeOffset(Face.Front | Face.Bottom)' 0' -extraDimension' -extraDimension);  					}  					break;    				case Edge.BackBottom:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backBottomCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backBottomCut = new Align(backBottomCut' Face.Back | Face.Bottom' newRound' Face.Back | Face.Bottom' 0' -extraDimension' extraDimension);  						newRound -= backBottomCut;  						newRound = new Align(newRound' Face.Back | Face.Bottom' GetEdgeOffset(Face.Back | Face.Bottom)' 0' extraDimension' -extraDimension);  					}  					break;    				case Edge.BackTop:  					{  						double xSize = size.x + 2 * extraDimension;  						newRound = new Box(xSize' radiusBoxSize' radiusBoxSize);  						CsgObject backTopCut = new Cylinder(radius' xSize + extraDimension * 2' Alignment.x);  						backTopCut = new Align(backTopCut' Face.Back | Face.Top' newRound' Face.Back | Face.Top' 0' -extraDimension' -extraDimension);  						newRound -= backTopCut;  						newRound = new Align(newRound' Face.Back | Face.Top' GetEdgeOffset(Face.Back | Face.Top)' 0' extraDimension' extraDimension);  					}  					break;    				default:  					throw new NotImplementedException("Don't know how to round " + edgeToRound.ToString());  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,CreateFillet,The following statement contains a magic number: switch ((Edge)(faceA | faceB))  			{  				case Edge.LeftTop:  				case Edge.LeftBottom:  				case Edge.RightTop:  				case Edge.RightBottom:  					centralAxis = 1; // y axis  					break;    				case Edge.LeftFront:  				case Edge.LeftBack:  				case Edge.RightFront:  				case Edge.RightBack:  					centralAxis = 2; // z axis  					break;  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,CreateBevel,The following statement contains a magic number: int numCurvePoints = 6;
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,CreateBevel,The following statement contains a magic number: for (int curvePoint = 0; curvePoint <= numCurvePoints; curvePoint++)  			{  				double x = width - Math.Cos((MathHelper.Tau / 4 * curvePoint / numCurvePoints)) * width;  				double y = height - Math.Sin((MathHelper.Tau / 4 * curvePoint / numCurvePoints)) * height;  				points.Add(new Vector2(x' y));  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,CreateBevel,The following statement contains a magic number: for (int curvePoint = 0; curvePoint <= numCurvePoints; curvePoint++)  			{  				double x = width - Math.Cos((MathHelper.Tau / 4 * curvePoint / numCurvePoints)) * width;  				double y = height - Math.Sin((MathHelper.Tau / 4 * curvePoint / numCurvePoints)) * height;  				points.Add(new Vector2(x' y));  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,CreateNegativeBevel,The following statement contains a magic number: int numCurvePoints = 6;
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,CreateNegativeBevel,The following statement contains a magic number: for (int curvePoint = 0; curvePoint <= numCurvePoints; curvePoint++)  			{  				double x = width - Math.Cos((MathHelper.Tau / 4 * curvePoint / numCurvePoints)) * width;  				double y = height - Math.Sin((MathHelper.Tau / 4 * curvePoint / numCurvePoints)) * height;  				points.Add(new Vector2(x' y));  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,CreateNegativeBevel,The following statement contains a magic number: for (int curvePoint = 0; curvePoint <= numCurvePoints; curvePoint++)  			{  				double x = width - Math.Cos((MathHelper.Tau / 4 * curvePoint / numCurvePoints)) * width;  				double y = height - Math.Sin((MathHelper.Tau / 4 * curvePoint / numCurvePoints)) * height;  				points.Add(new Vector2(x' y));  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,CreateNegativeBevel,The following statement contains a magic number: cut = new Align(cut' Face.Bottom' bevel' Face.Bottom' 0' 0' .1);
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,CreateFillet,The following statement contains a magic number: int numCurvePoints = 8;
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,CreateFillet,The following statement contains a magic number: for (int curvePoint = numCurvePoints; curvePoint >= 0; curvePoint--)  			{  				double x = width - Math.Cos((MathHelper.Tau / 4 * curvePoint / numCurvePoints)) * width;  				double y = height - Math.Sin((MathHelper.Tau / 4 * curvePoint / numCurvePoints)) * height;  				points.Add(new Vector2(x' y));  			}
Magic Number,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,CreateFillet,The following statement contains a magic number: for (int curvePoint = numCurvePoints; curvePoint >= 0; curvePoint--)  			{  				double x = width - Math.Cos((MathHelper.Tau / 4 * curvePoint / numCurvePoints)) * width;  				double y = height - Math.Sin((MathHelper.Tau / 4 * curvePoint / numCurvePoints)) * height;  				points.Add(new Vector2(x' y));  			}
Magic Number,MatterHackers.Csg.Solids,NGonExtrusion,C:\repos\MatterHackers_agg-sharp\Csg\Solids\NGonExtrusion.cs,NGonExtrusion,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.x:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.y:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(90));  					break;  			}
Magic Number,MatterHackers.Csg.Solids,NGonExtrusion,C:\repos\MatterHackers_agg-sharp\Csg\Solids\NGonExtrusion.cs,NGonExtrusion,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.x:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.y:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(90));  					break;  			}
Magic Number,MatterHackers.Csg.Solids,NGonExtrusionPrimitive,C:\repos\MatterHackers_agg-sharp\Csg\Solids\NGonExtrusion.cs,GetAxisAlignedBoundingBox,The following statement contains a magic number: return new AxisAlignedBoundingBox(new Vector3(-radius' -radius' -height / 2)' new Vector3(radius' radius' height / 2));
Magic Number,MatterHackers.Csg.Solids,NGonExtrusionPrimitive,C:\repos\MatterHackers_agg-sharp\Csg\Solids\NGonExtrusion.cs,GetAxisAlignedBoundingBox,The following statement contains a magic number: return new AxisAlignedBoundingBox(new Vector3(-radius' -radius' -height / 2)' new Vector3(radius' radius' height / 2));
Magic Number,MatterHackers.Csg.Solids,Cylinder,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Cylinder.cs,Cylinder,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.x:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.y:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(90));  					break;  			}
Magic Number,MatterHackers.Csg.Solids,Cylinder,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Cylinder.cs,Cylinder,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.x:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.y:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(90));  					break;  			}
Magic Number,MatterHackers.Csg.Solids,CylinderPrimitive,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Cylinder.cs,GetAxisAlignedBoundingBox,The following statement contains a magic number: return new AxisAlignedBoundingBox(new Vector3(-maxRadius' -maxRadius' -height / 2)' new Vector3(maxRadius' maxRadius' height / 2));
Magic Number,MatterHackers.Csg.Solids,CylinderPrimitive,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Cylinder.cs,GetAxisAlignedBoundingBox,The following statement contains a magic number: return new AxisAlignedBoundingBox(new Vector3(-maxRadius' -maxRadius' -height / 2)' new Vector3(maxRadius' maxRadius' height / 2));
Magic Number,MatterHackers.Csg.Transform,SetCenter,C:\repos\MatterHackers_agg-sharp\Csg\Transform\SetCenter.cs,SetCenter,The following statement contains a magic number: Vector3 center = (bounds.maxXYZ + bounds.minXYZ) / 2;
Missing Default,MatterHackers.Csg.Solids,LinearExtrude,C:\repos\MatterHackers_agg-sharp\Csg\Solids\LinearExtrude.cs,LinearExtrude,The following switch statement is missing a default case: switch (alignment)  			{  				case Alignment.x:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.y:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(90));  					break;  			}
Missing Default,MatterHackers.Csg.Solids,LinearExtrude,C:\repos\MatterHackers_agg-sharp\Csg\Solids\LinearExtrude.cs,LinearExtrude,The following switch statement is missing a default case: switch (alignment)  			{  				case Alignment.x:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.y:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(90));  					break;  			}
Missing Default,MatterHackers.Csg.Solids,Round,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Round.cs,CreateFillet,The following switch statement is missing a default case: switch ((Edge)(faceA | faceB))  			{  				case Edge.LeftTop:  				case Edge.LeftBottom:  				case Edge.RightTop:  				case Edge.RightBottom:  					centralAxis = 1; // y axis  					break;    				case Edge.LeftFront:  				case Edge.LeftBack:  				case Edge.RightFront:  				case Edge.RightBack:  					centralAxis = 2; // z axis  					break;  			}
Missing Default,MatterHackers.Csg.Solids,NGonExtrusion,C:\repos\MatterHackers_agg-sharp\Csg\Solids\NGonExtrusion.cs,NGonExtrusion,The following switch statement is missing a default case: switch (alignment)  			{  				case Alignment.x:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.y:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(90));  					break;  			}
Missing Default,MatterHackers.Csg.Solids,Cylinder,C:\repos\MatterHackers_agg-sharp\Csg\Solids\Cylinder.cs,Cylinder,The following switch statement is missing a default case: switch (alignment)  			{  				case Alignment.x:  					root = new Rotate(root' y: MathHelper.DegreesToRadians(90));  					break;    				case Alignment.y:  					root = new Rotate(root' x: MathHelper.DegreesToRadians(90));  					break;  			}
