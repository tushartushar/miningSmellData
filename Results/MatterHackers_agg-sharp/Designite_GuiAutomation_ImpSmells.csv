Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,GetWidgetsByName,Cyclomatic complexity of the method is 8
Long Parameter List,MatterHackers.GuiAutomation,WindowsInputMethods,C:\repos\MatterHackers_agg-sharp\GuiAutomation\WindowsInputMethods.cs,CreateMouseEvent,The method has 5 parameters. Parameters: dwFlags' dx' dy' cButtons' dwExtraInfo
Long Parameter List,MatterHackers.GuiAutomation,IInputMethod,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AggInputMethods.cs,CreateMouseEvent,The method has 5 parameters. Parameters: dwFlags' dx' dy' cButtons' dwExtraInfo
Long Parameter List,MatterHackers.GuiAutomation,AggInputMethods,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AggInputMethods.cs,CreateMouseEvent,The method has 5 parameters. Parameters: dwFlags' dx' dy' cButtons' dwExtraInfo
Long Parameter List,MatterHackers.GuiAutomation,NativeMethods,C:\repos\MatterHackers_agg-sharp\GuiAutomation\NativeMethods.cs,BitBlt,The method has 9 parameters. Parameters: hdcDest' xDest' yDest' wDest' hDest' hdcSource' xSrc' ySrc' rop
Long Parameter List,MatterHackers.GuiAutomation,NativeMethods,C:\repos\MatterHackers_agg-sharp\GuiAutomation\NativeMethods.cs,mouse_event,The method has 5 parameters. Parameters: dwFlags' dx' dy' cButtons' dwExtraInfo
Long Parameter List,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,ClickImage,The method has 6 parameters. Parameters: imageName' secondsToWait' searchRegion' offset' origin' mouseButtons
Long Parameter List,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,ClickImage,The method has 6 parameters. Parameters: imageNeedle' secondsToWait' searchRegion' offset' origin' mouseButtons
Long Parameter List,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,DoubleClickImage,The method has 5 parameters. Parameters: imageName' secondsToWait' searchRegion' offset' origin
Long Parameter List,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,DragDropImage,The method has 8 parameters. Parameters: imageNeedleDrag' imageNeedleDrop' secondsToWait' searchRegion' offsetDrag' originDrag' offsetDrop' originDrop
Long Parameter List,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,DragDropImage,The method has 8 parameters. Parameters: imageNameDrag' imageNameDrop' secondsToWait' searchRegion' offsetDrag' originDrag' offsetDrop' originDrop
Long Parameter List,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,DragImage,The method has 5 parameters. Parameters: imageName' secondsToWait' searchRegion' offset' origin
Long Parameter List,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,DragImage,The method has 5 parameters. Parameters: imageNeedle' secondsToWait' searchRegion' offset' origin
Long Parameter List,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,DropImage,The method has 5 parameters. Parameters: imageName' secondsToWait' searchRegion' offset' origin
Long Parameter List,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,DropImage,The method has 5 parameters. Parameters: imageNeedle' secondsToWait' searchRegion' offset' origin
Long Parameter List,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,MoveToImage,The method has 5 parameters. Parameters: imageName' secondsToWait' searchRegion' offset' origin
Long Parameter List,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,ClickByName,The method has 6 parameters. Parameters: widgetName' secondsToWait' searchRegion' offset' origin' delayBeforeReturn
Long Parameter List,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,DragDropByName,The method has 8 parameters. Parameters: widgetNameDrag' widgetNameDrop' secondsToWait' searchRegion' offsetDrag' originDrag' offsetDrop' originDrop
Long Parameter List,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,DragByName,The method has 5 parameters. Parameters: widgetName' secondsToWait' searchRegion' offset' origin
Long Parameter List,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,DropByName,The method has 5 parameters. Parameters: widgetName' secondsToWait' searchRegion' offset' origin
Long Parameter List,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,DoubleClickByName,The method has 5 parameters. Parameters: widgetName' secondsToWait' searchRegion' offset' origin
Long Parameter List,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,MoveToByName,The method has 5 parameters. Parameters: widgetName' secondsToWait' searchRegion' offset' origin
Long Parameter List,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,ShowWindowAndExecuteTests,The method has 5 parameters. Parameters: initialSystemWindow' testMethod' secondsToTestFailure' imagesDirectory' inputType
Long Statement,MatterHackers.GuiAutomation,WindowsInputMethods,C:\repos\MatterHackers_agg-sharp\GuiAutomation\WindowsInputMethods.cs,CurrentMousePosition,The length of the statement  "			Point2D mousePos = new Point2D(System.Windows.Forms.Control.MousePosition.X' System.Windows.Forms.Control.MousePosition.Y); " is 123.
Long Statement,MatterHackers.GuiAutomation,WindowsInputMethods,C:\repos\MatterHackers_agg-sharp\GuiAutomation\WindowsInputMethods.cs,GetCurrentScreen,The length of the statement  "			bool b = NativeMethods.BitBlt(hDest' 0' 0' sz.Width' sz.Height' hSrce' 0' 0' CopyPixelOperation.SourceCopy | CopyPixelOperation.CaptureBlt); " is 140.
Long Statement,MatterHackers.GuiAutomation,WindowsInputMethods,C:\repos\MatterHackers_agg-sharp\GuiAutomation\WindowsInputMethods.cs,GetCurrentScreen,The length of the statement  "			BitmapData bitmapData = bmpScreenCapture.LockBits(new Rectangle(0' 0' bmpScreenCapture.Width' bmpScreenCapture.Height)' System.Drawing.Imaging.ImageLockMode.ReadWrite' bmpScreenCapture.PixelFormat); " is 198.
Long Statement,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,DragDropImage,The length of the statement  "					return DragDropImage(imageNeedleDrag' imageNeedleDrop' secondsToWait' searchRegion' offsetDrag' originDrag' offsetDrop' originDrop); " is 132.
Long Statement,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,ClickByName,The length of the statement  "				Point2D screenPosition = SystemWindowToScreen(new Point2D(childBounds.Left + offset.x' childBounds.Bottom + offset.y)' containingWindow); " is 137.
Long Statement,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,DragByName,The length of the statement  "				Point2D screenPosition = SystemWindowToScreen(new Point2D(childBounds.Left + offset.x' childBounds.Bottom + offset.y)' containingWindow); " is 137.
Long Statement,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,DropByName,The length of the statement  "				Point2D screenPosition = SystemWindowToScreen(new Point2D(childBounds.Left + offset.x' childBounds.Bottom + offset.y)' containingWindow); " is 137.
Long Statement,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,MoveToByName,The length of the statement  "				Point2D screenPosition = SystemWindowToScreen(new Point2D(childBounds.Left + offset.x' childBounds.Bottom + offset.y)' containingWindow); " is 137.
Long Statement,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,ShowWindowAndExecuteTests,The length of the statement  "			// Once either the timeout or the test method has completed' reassign the task/result for timeout errors and shutdown the SystemWindow  " is 134.
Magic Number,MatterHackers.GuiAutomation,WindowsInputMethods,C:\repos\MatterHackers_agg-sharp\GuiAutomation\WindowsInputMethods.cs,GetCurrentScreen,The following statement contains a magic number: unsafe  			{  				byte* bitmapDataScan0 = (byte*)bitmapData.Scan0;  				fixed (byte* pSourceFixed = &buffer[offset])  				{  					byte* pSource = bitmapDataScan0 + bitmapDataStride * backBufferHeightMinusOne;  					byte* pDestBuffer = pSourceFixed;  					for (int y = 0; y < screenCapture.Height; y++)  					{  						int* pSourceInt = (int*)pSource;  						pSourceInt -= (bitmapDataStride * y / 4);    						int* pDestBufferInt = (int*)pDestBuffer;  						pDestBufferInt += (backBufferStrideInBytes * y / 4);    						for (int x = 0; x < screenCapture.Width; x++)  						{  							pDestBufferInt[x] = pSourceInt[x];  						}  					}  				}  			}
Magic Number,MatterHackers.GuiAutomation,WindowsInputMethods,C:\repos\MatterHackers_agg-sharp\GuiAutomation\WindowsInputMethods.cs,GetCurrentScreen,The following statement contains a magic number: unsafe  			{  				byte* bitmapDataScan0 = (byte*)bitmapData.Scan0;  				fixed (byte* pSourceFixed = &buffer[offset])  				{  					byte* pSource = bitmapDataScan0 + bitmapDataStride * backBufferHeightMinusOne;  					byte* pDestBuffer = pSourceFixed;  					for (int y = 0; y < screenCapture.Height; y++)  					{  						int* pSourceInt = (int*)pSource;  						pSourceInt -= (bitmapDataStride * y / 4);    						int* pDestBufferInt = (int*)pDestBuffer;  						pDestBufferInt += (backBufferStrideInBytes * y / 4);    						for (int x = 0; x < screenCapture.Width; x++)  						{  							pDestBufferInt[x] = pSourceInt[x];  						}  					}  				}  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,GetInterpolatedValue,The following statement contains a magic number: switch (interpolationType)  			{  				case InterpolationType.LINEAR:  					return compleatedRatio0To1;    				case InterpolationType.EASE_IN:  					return Math.Pow(compleatedRatio0To1' 3);    				case InterpolationType.EASE_OUT:  					return (Math.Pow(compleatedRatio0To1 - 1' 3) + 1);    				case InterpolationType.EASE_IN_OUT:  					if (compleatedRatio0To1 < .5)  					{  						return Math.Pow(compleatedRatio0To1 * 2' 3) / 2;  					}  					else  					{  						return (Math.Pow(compleatedRatio0To1 * 2 - 2' 3) + 2) / 2;  					}    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,GetInterpolatedValue,The following statement contains a magic number: switch (interpolationType)  			{  				case InterpolationType.LINEAR:  					return compleatedRatio0To1;    				case InterpolationType.EASE_IN:  					return Math.Pow(compleatedRatio0To1' 3);    				case InterpolationType.EASE_OUT:  					return (Math.Pow(compleatedRatio0To1 - 1' 3) + 1);    				case InterpolationType.EASE_IN_OUT:  					if (compleatedRatio0To1 < .5)  					{  						return Math.Pow(compleatedRatio0To1 * 2' 3) / 2;  					}  					else  					{  						return (Math.Pow(compleatedRatio0To1 * 2 - 2' 3) + 2) / 2;  					}    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,GetInterpolatedValue,The following statement contains a magic number: switch (interpolationType)  			{  				case InterpolationType.LINEAR:  					return compleatedRatio0To1;    				case InterpolationType.EASE_IN:  					return Math.Pow(compleatedRatio0To1' 3);    				case InterpolationType.EASE_OUT:  					return (Math.Pow(compleatedRatio0To1 - 1' 3) + 1);    				case InterpolationType.EASE_IN_OUT:  					if (compleatedRatio0To1 < .5)  					{  						return Math.Pow(compleatedRatio0To1 * 2' 3) / 2;  					}  					else  					{  						return (Math.Pow(compleatedRatio0To1 * 2 - 2' 3) + 2) / 2;  					}    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,GetInterpolatedValue,The following statement contains a magic number: switch (interpolationType)  			{  				case InterpolationType.LINEAR:  					return compleatedRatio0To1;    				case InterpolationType.EASE_IN:  					return Math.Pow(compleatedRatio0To1' 3);    				case InterpolationType.EASE_OUT:  					return (Math.Pow(compleatedRatio0To1 - 1' 3) + 1);    				case InterpolationType.EASE_IN_OUT:  					if (compleatedRatio0To1 < .5)  					{  						return Math.Pow(compleatedRatio0To1 * 2' 3) / 2;  					}  					else  					{  						return (Math.Pow(compleatedRatio0To1 * 2 - 2' 3) + 2) / 2;  					}    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,GetInterpolatedValue,The following statement contains a magic number: switch (interpolationType)  			{  				case InterpolationType.LINEAR:  					return compleatedRatio0To1;    				case InterpolationType.EASE_IN:  					return Math.Pow(compleatedRatio0To1' 3);    				case InterpolationType.EASE_OUT:  					return (Math.Pow(compleatedRatio0To1 - 1' 3) + 1);    				case InterpolationType.EASE_IN_OUT:  					if (compleatedRatio0To1 < .5)  					{  						return Math.Pow(compleatedRatio0To1 * 2' 3) / 2;  					}  					else  					{  						return (Math.Pow(compleatedRatio0To1 * 2 - 2' 3) + 2) / 2;  					}    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,GetInterpolatedValue,The following statement contains a magic number: switch (interpolationType)  			{  				case InterpolationType.LINEAR:  					return compleatedRatio0To1;    				case InterpolationType.EASE_IN:  					return Math.Pow(compleatedRatio0To1' 3);    				case InterpolationType.EASE_OUT:  					return (Math.Pow(compleatedRatio0To1 - 1' 3) + 1);    				case InterpolationType.EASE_IN_OUT:  					if (compleatedRatio0To1 < .5)  					{  						return Math.Pow(compleatedRatio0To1 * 2' 3) / 2;  					}  					else  					{  						return (Math.Pow(compleatedRatio0To1 * 2 - 2' 3) + 2) / 2;  					}    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,GetInterpolatedValue,The following statement contains a magic number: switch (interpolationType)  			{  				case InterpolationType.LINEAR:  					return compleatedRatio0To1;    				case InterpolationType.EASE_IN:  					return Math.Pow(compleatedRatio0To1' 3);    				case InterpolationType.EASE_OUT:  					return (Math.Pow(compleatedRatio0To1 - 1' 3) + 1);    				case InterpolationType.EASE_IN_OUT:  					if (compleatedRatio0To1 < .5)  					{  						return Math.Pow(compleatedRatio0To1 * 2' 3) / 2;  					}  					else  					{  						return (Math.Pow(compleatedRatio0To1 * 2 - 2' 3) + 2) / 2;  					}    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,GetInterpolatedValue,The following statement contains a magic number: switch (interpolationType)  			{  				case InterpolationType.LINEAR:  					return compleatedRatio0To1;    				case InterpolationType.EASE_IN:  					return Math.Pow(compleatedRatio0To1' 3);    				case InterpolationType.EASE_OUT:  					return (Math.Pow(compleatedRatio0To1 - 1' 3) + 1);    				case InterpolationType.EASE_IN_OUT:  					if (compleatedRatio0To1 < .5)  					{  						return Math.Pow(compleatedRatio0To1 * 2' 3) / 2;  					}  					else  					{  						return (Math.Pow(compleatedRatio0To1 * 2 - 2' 3) + 2) / 2;  					}    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,GetInterpolatedValue,The following statement contains a magic number: switch (interpolationType)  			{  				case InterpolationType.LINEAR:  					return compleatedRatio0To1;    				case InterpolationType.EASE_IN:  					return Math.Pow(compleatedRatio0To1' 3);    				case InterpolationType.EASE_OUT:  					return (Math.Pow(compleatedRatio0To1 - 1' 3) + 1);    				case InterpolationType.EASE_IN_OUT:  					if (compleatedRatio0To1 < .5)  					{  						return Math.Pow(compleatedRatio0To1 * 2' 3) / 2;  					}  					else  					{  						return (Math.Pow(compleatedRatio0To1 * 2 - 2' 3) + 2) / 2;  					}    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,GetInterpolatedValue,The following statement contains a magic number: switch (interpolationType)  			{  				case InterpolationType.LINEAR:  					return compleatedRatio0To1;    				case InterpolationType.EASE_IN:  					return Math.Pow(compleatedRatio0To1' 3);    				case InterpolationType.EASE_OUT:  					return (Math.Pow(compleatedRatio0To1 - 1' 3) + 1);    				case InterpolationType.EASE_IN_OUT:  					if (compleatedRatio0To1 < .5)  					{  						return Math.Pow(compleatedRatio0To1 * 2' 3) / 2;  					}  					else  					{  						return (Math.Pow(compleatedRatio0To1 * 2 - 2' 3) + 2) / 2;  					}    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,GetInterpolatedValue,The following statement contains a magic number: switch (interpolationType)  			{  				case InterpolationType.LINEAR:  					return compleatedRatio0To1;    				case InterpolationType.EASE_IN:  					return Math.Pow(compleatedRatio0To1' 3);    				case InterpolationType.EASE_OUT:  					return (Math.Pow(compleatedRatio0To1 - 1' 3) + 1);    				case InterpolationType.EASE_IN_OUT:  					if (compleatedRatio0To1 < .5)  					{  						return Math.Pow(compleatedRatio0To1 * 2' 3) / 2;  					}  					else  					{  						return (Math.Pow(compleatedRatio0To1 * 2 - 2' 3) + 2) / 2;  					}    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,ClickImage,The following statement contains a magic number: if (origin == ClickOrigin.Center)  			{  				offset.x += imageNeedle.Width / 2;  				offset.y += imageNeedle.Height / 2;  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,ClickImage,The following statement contains a magic number: if (origin == ClickOrigin.Center)  			{  				offset.x += imageNeedle.Width / 2;  				offset.y += imageNeedle.Height / 2;  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,Delay,The following statement contains a magic number: Thread.Sleep((int)(secondsToWait * 1000));
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,RenderMouse,The following statement contains a magic number: if (parentSystemWindow != null)  			{  				Point2D mousePosOnWindow = ScreenToSystemWindow(inputSystem.CurrentMousePosition()' (SystemWindow)parentSystemWindow);  				Ellipse circle = new Ellipse(new Vector2(mousePosOnWindow.x' mousePosOnWindow.y)' 10);  				if (inputSystem.LeftButtonDown)  				{  					graphics2D.Render(circle' RGBA_Bytes.Green);  				}  				graphics2D.Render(new Stroke(circle' 3)' RGBA_Bytes.Black);  				graphics2D.Render(new Stroke(circle' 2)' RGBA_Bytes.White);  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,RenderMouse,The following statement contains a magic number: if (parentSystemWindow != null)  			{  				Point2D mousePosOnWindow = ScreenToSystemWindow(inputSystem.CurrentMousePosition()' (SystemWindow)parentSystemWindow);  				Ellipse circle = new Ellipse(new Vector2(mousePosOnWindow.x' mousePosOnWindow.y)' 10);  				if (inputSystem.LeftButtonDown)  				{  					graphics2D.Render(circle' RGBA_Bytes.Green);  				}  				graphics2D.Render(new Stroke(circle' 3)' RGBA_Bytes.Black);  				graphics2D.Render(new Stroke(circle' 2)' RGBA_Bytes.White);  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,RenderMouse,The following statement contains a magic number: if (parentSystemWindow != null)  			{  				Point2D mousePosOnWindow = ScreenToSystemWindow(inputSystem.CurrentMousePosition()' (SystemWindow)parentSystemWindow);  				Ellipse circle = new Ellipse(new Vector2(mousePosOnWindow.x' mousePosOnWindow.y)' 10);  				if (inputSystem.LeftButtonDown)  				{  					graphics2D.Render(circle' RGBA_Bytes.Green);  				}  				graphics2D.Render(new Stroke(circle' 3)' RGBA_Bytes.Black);  				graphics2D.Render(new Stroke(circle' 2)' RGBA_Bytes.White);  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,DragImage,The following statement contains a magic number: if (origin == ClickOrigin.Center)  			{  				offset.x += imageNeedle.Width / 2;  				offset.y += imageNeedle.Height / 2;  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,DragImage,The following statement contains a magic number: if (origin == ClickOrigin.Center)  			{  				offset.x += imageNeedle.Width / 2;  				offset.y += imageNeedle.Height / 2;  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,DropImage,The following statement contains a magic number: if (origin == ClickOrigin.Center)  			{  				offset.x += imageNeedle.Width / 2;  				offset.y += imageNeedle.Height / 2;  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,DropImage,The following statement contains a magic number: if (origin == ClickOrigin.Center)  			{  				offset.x += imageNeedle.Width / 2;  				offset.y += imageNeedle.Height / 2;  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,ClickByName,The following statement contains a magic number: if (widgetToClick != null)  			{  				RectangleDouble childBounds = widgetToClick.TransformToParentSpace(containingWindow' widgetToClick.LocalBounds);    				if (origin == ClickOrigin.Center)  				{  					offset.x += (int)childBounds.Width / 2;  					offset.y += (int)childBounds.Height / 2;  				}    				Point2D screenPosition = SystemWindowToScreen(new Point2D(childBounds.Left + offset.x' childBounds.Bottom + offset.y)' containingWindow);    				SetMouseCursorPosition(screenPosition.x' screenPosition.y);  				inputSystem.CreateMouseEvent(NativeMethods.MOUSEEVENTF_LEFTDOWN' screenPosition.x' screenPosition.y' 0' 0);    				Delay(UpDelaySeconds);    				inputSystem.CreateMouseEvent(NativeMethods.MOUSEEVENTF_LEFTUP' screenPosition.x' screenPosition.y' 0' 0);    				// After firing the click event' wait the given period of time before returning to allow MatterControl   				// to complete the targeted action  				Delay(delayBeforeReturn);    				return;  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,ClickByName,The following statement contains a magic number: if (widgetToClick != null)  			{  				RectangleDouble childBounds = widgetToClick.TransformToParentSpace(containingWindow' widgetToClick.LocalBounds);    				if (origin == ClickOrigin.Center)  				{  					offset.x += (int)childBounds.Width / 2;  					offset.y += (int)childBounds.Height / 2;  				}    				Point2D screenPosition = SystemWindowToScreen(new Point2D(childBounds.Left + offset.x' childBounds.Bottom + offset.y)' containingWindow);    				SetMouseCursorPosition(screenPosition.x' screenPosition.y);  				inputSystem.CreateMouseEvent(NativeMethods.MOUSEEVENTF_LEFTDOWN' screenPosition.x' screenPosition.y' 0' 0);    				Delay(UpDelaySeconds);    				inputSystem.CreateMouseEvent(NativeMethods.MOUSEEVENTF_LEFTUP' screenPosition.x' screenPosition.y' 0' 0);    				// After firing the click event' wait the given period of time before returning to allow MatterControl   				// to complete the targeted action  				Delay(delayBeforeReturn);    				return;  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,DragByName,The following statement contains a magic number: if (widgetToClick != null)  			{  				RectangleDouble childBounds = widgetToClick.TransformToParentSpace(containingWindow' widgetToClick.LocalBounds);    				if (origin == ClickOrigin.Center)  				{  					offset.x += (int)childBounds.Width / 2;  					offset.y += (int)childBounds.Height / 2;  				}    				Point2D screenPosition = SystemWindowToScreen(new Point2D(childBounds.Left + offset.x' childBounds.Bottom + offset.y)' containingWindow);  				SetMouseCursorPosition(screenPosition.x' screenPosition.y);  				inputSystem.CreateMouseEvent(NativeMethods.MOUSEEVENTF_LEFTDOWN' screenPosition.x' screenPosition.y' 0' 0);    				return true;  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,DragByName,The following statement contains a magic number: if (widgetToClick != null)  			{  				RectangleDouble childBounds = widgetToClick.TransformToParentSpace(containingWindow' widgetToClick.LocalBounds);    				if (origin == ClickOrigin.Center)  				{  					offset.x += (int)childBounds.Width / 2;  					offset.y += (int)childBounds.Height / 2;  				}    				Point2D screenPosition = SystemWindowToScreen(new Point2D(childBounds.Left + offset.x' childBounds.Bottom + offset.y)' containingWindow);  				SetMouseCursorPosition(screenPosition.x' screenPosition.y);  				inputSystem.CreateMouseEvent(NativeMethods.MOUSEEVENTF_LEFTDOWN' screenPosition.x' screenPosition.y' 0' 0);    				return true;  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,DropByName,The following statement contains a magic number: if (widgetToClick != null)  			{  				RectangleDouble childBounds = widgetToClick.TransformToParentSpace(containingWindow' widgetToClick.LocalBounds);    				if (origin == ClickOrigin.Center)  				{  					offset.x += (int)childBounds.Width / 2;  					offset.y += (int)childBounds.Height / 2;  				}    				Point2D screenPosition = SystemWindowToScreen(new Point2D(childBounds.Left + offset.x' childBounds.Bottom + offset.y)' containingWindow);  				SetMouseCursorPosition(screenPosition.x' screenPosition.y);  				Drop();    				return true;  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,DropByName,The following statement contains a magic number: if (widgetToClick != null)  			{  				RectangleDouble childBounds = widgetToClick.TransformToParentSpace(containingWindow' widgetToClick.LocalBounds);    				if (origin == ClickOrigin.Center)  				{  					offset.x += (int)childBounds.Width / 2;  					offset.y += (int)childBounds.Height / 2;  				}    				Point2D screenPosition = SystemWindowToScreen(new Point2D(childBounds.Left + offset.x' childBounds.Bottom + offset.y)' containingWindow);  				SetMouseCursorPosition(screenPosition.x' screenPosition.y);  				Drop();    				return true;  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,MoveToByName,The following statement contains a magic number: if (widgetToClick != null)  			{  				RectangleDouble childBounds = widgetToClick.TransformToParentSpace(containingWindow' widgetToClick.LocalBounds);    				if (origin == ClickOrigin.Center)  				{  					offset.x += (int)childBounds.Width / 2;  					offset.y += (int)childBounds.Height / 2;  				}    				Point2D screenPosition = SystemWindowToScreen(new Point2D(childBounds.Left + offset.x' childBounds.Bottom + offset.y)' containingWindow);  				SetMouseCursorPosition(screenPosition.x' screenPosition.y);    				return true;  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,MoveToByName,The following statement contains a magic number: if (widgetToClick != null)  			{  				RectangleDouble childBounds = widgetToClick.TransformToParentSpace(containingWindow' widgetToClick.LocalBounds);    				if (origin == ClickOrigin.Center)  				{  					offset.x += (int)childBounds.Width / 2;  					offset.y += (int)childBounds.Height / 2;  				}    				Point2D screenPosition = SystemWindowToScreen(new Point2D(childBounds.Left + offset.x' childBounds.Bottom + offset.y)' containingWindow);  				SetMouseCursorPosition(screenPosition.x' screenPosition.y);    				return true;  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,SetMouseCursorPosition,The following statement contains a magic number: int steps = (int)((TimeToMoveMouse * 1000) / 20);
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,SetMouseCursorPosition,The following statement contains a magic number: int steps = (int)((TimeToMoveMouse * 1000) / 20);
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,SetMouseCursorPosition,The following statement contains a magic number: for (int i = 0; i < steps; i++)  			{  				double ratio = i / (double)steps;  				ratio = GetInterpolatedValue(ratio' InterpolationType.EASE_OUT);  				Vector2 current = start + delta * ratio;  				inputSystem.SetCursorPosition((int)current.x' (int)current.y);  				Thread.Sleep(20);  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,Type,The following statement contains a magic number: Delay(.2);
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,WaitForImage,The following statement contains a magic number: while (!ImageExists(imageNeedle)  				&& timeWaited.Elapsed.TotalSeconds < secondsToWait)  			{  				Delay(.05);  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,WaitForName,The following statement contains a magic number: while (!NameExists(widgetName)  				&& timeWaited.Elapsed.TotalSeconds < secondsToWait)  			{  				Delay(.05);  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,WaitVanishForName,The following statement contains a magic number: while (NameExists(widgetName)  				&& timeWaited.Elapsed.TotalSeconds < secondsToWait)  			{  				Delay(.05);  			}
Magic Number,MatterHackers.GuiAutomation,AutomationRunner,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AutomationRunner.cs,ShowWindowAndExecuteTests,The following statement contains a magic number: int testTimeout = (int)(1000 * secondsToTestFailure);
Missing Default,MatterHackers.GuiAutomation,AggInputMethods,C:\repos\MatterHackers_agg-sharp\GuiAutomation\AggInputMethods.cs,MapButtons,The following switch statement is missing a default case: switch (cButtons)  			{  				case NativeMethods.MOUSEEVENTF_LEFTDOWN:  				case NativeMethods.MOUSEEVENTF_LEFTUP:  					return MouseButtons.Left;    				case NativeMethods.MOUSEEVENTF_RIGHTDOWN:  				case NativeMethods.MOUSEEVENTF_RIGHTUP:  					return MouseButtons.Left;    				case NativeMethods.MOUSEEVENTF_MIDDLEDOWN:  				case NativeMethods.MOUSEEVENTF_MIDDLEUP:  					return MouseButtons.Left;  			}
