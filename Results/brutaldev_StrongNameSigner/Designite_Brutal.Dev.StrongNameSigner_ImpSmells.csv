Implementation smell,Namespace,Class,File,Method,Description
Long Method,Brutal.Dev.StrongNameSigner,AutomaticBuildTask,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\AutomaticBuildTask.cs,Execute,The method has 100 lines of code.
Complex Method,Brutal.Dev.StrongNameSigner,AutomaticBuildTask,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\AutomaticBuildTask.cs,Execute,Cyclomatic complexity of the method is 16
Complex Method,Brutal.Dev.StrongNameSigner,SigningHelper,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\SigningHelper.cs,SignAssembly,Cyclomatic complexity of the method is 8
Complex Method,Brutal.Dev.StrongNameSigner,SigningHelper,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\SigningHelper.cs,FixAssemblyReference,Cyclomatic complexity of the method is 8
Long Parameter List,Brutal.Dev.StrongNameSigner,SigningHelper,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\SigningHelper.cs,SignAssembly,The method has 5 parameters. Parameters: assemblyPath' keyPath' outputPath' keyFilePassword' probingPaths
Long Parameter List,Brutal.Dev.StrongNameSigner,SigningHelper,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\SigningHelper.cs,FixAssemblyReference,The method has 5 parameters. Parameters: assemblyPath' referenceAssemblyPath' keyPath' keyFilePassword' probingPaths
Long Statement,Brutal.Dev.StrongNameSigner,AutomaticBuildTask,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\AutomaticBuildTask.cs,Execute,The length of the statement  "          // Remove all InternalsVisibleTo attributes without public keys from the processed assemblies. Signed assemblies cannot have unsigned friend assemblies. " is 152.
Long Statement,Brutal.Dev.StrongNameSigner,AutomaticBuildTask,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\AutomaticBuildTask.cs,FixSingleAssemblyReference,The length of the statement  "          Log.LogMessage(MessageImportance.Normal' "References to '{1}' in '{0}' were fixed successfully."' assemblyPath' referencePath); " is 127.
Long Statement,Brutal.Dev.StrongNameSigner,SigningHelper,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\SigningHelper.cs,SignAssembly,The length of the statement  "          .Write(outputFile' new WriterParameters() { StrongNameKeyPair = GetStrongNameKeyPair(keyPath' keyFilePassword)' WriteSymbols = writeSymbols }); " is 143.
Long Statement,Brutal.Dev.StrongNameSigner,SigningHelper,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\SigningHelper.cs,GetAssemblyInfo,The length of the statement  "        a = new KeyValuePair<string' AssemblyDefinition>(GetFileMD5Hash(assemblyPath)' AssemblyDefinition.ReadAssembly(assemblyPath' GetReadParameters(assemblyPath' probingPaths))); " is 173.
Long Statement,Brutal.Dev.StrongNameSigner,SigningHelper,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\SigningHelper.cs,GetAssemblyInfo,The length of the statement  "        Is64BitOnly = a.Value.MainModule.Architecture == TargetArchitecture.AMD64 || a.Value.MainModule.Architecture == TargetArchitecture.IA64' " is 136.
Long Statement,Brutal.Dev.StrongNameSigner,SigningHelper,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\SigningHelper.cs,GetAssemblyInfo,The length of the statement  "        Is32BitOnly = a.Value.MainModule.Attributes.HasFlag(ModuleAttributes.Required32Bit) && !a.Value.MainModule.Attributes.HasFlag(ModuleAttributes.Preferred32Bit)' " is 159.
Long Statement,Brutal.Dev.StrongNameSigner,SigningHelper,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\SigningHelper.cs,FixAssemblyReference,The length of the statement  "      AssemblyDefinition b = AssemblyDefinition.ReadAssembly(referenceAssemblyPath' GetReadParameters(referenceAssemblyPath' probingPaths)); " is 134.
Long Statement,Brutal.Dev.StrongNameSigner,SigningHelper,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\SigningHelper.cs,FixAssemblyReference,The length of the statement  "      var assemblyReference = a.MainModule.AssemblyReferences.FirstOrDefault(r => r.Name.Equals(b.Name.Name' StringComparison.OrdinalIgnoreCase)); " is 140.
Long Statement,Brutal.Dev.StrongNameSigner,SigningHelper,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\SigningHelper.cs,FixAssemblyReference,The length of the statement  "          a.Write(assemblyPath' new WriterParameters { StrongNameKeyPair = GetStrongNameKeyPair(keyPath' keyFilePassword)' WriteSymbols = File.Exists(Path.ChangeExtension(assemblyPath' ".pdb")) }); " is 187.
Long Statement,Brutal.Dev.StrongNameSigner,SigningHelper,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\SigningHelper.cs,FixAssemblyReference,The length of the statement  "      var friendReference = b.CustomAttributes.SingleOrDefault(attr => attr.AttributeType.FullName == typeof(InternalsVisibleToAttribute).FullName && " is 143.
Long Statement,Brutal.Dev.StrongNameSigner,SigningHelper,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\SigningHelper.cs,FixAssemblyReference,The length of the statement  "        friendReference.ConstructorArguments.Add(new CustomAttributeArgument(typeRef' a.Name.Name + "' PublicKey=" + BitConverter.ToString(a.Name.PublicKey).Replace("-"' string.Empty))); " is 178.
Long Statement,Brutal.Dev.StrongNameSigner,SigningHelper,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\SigningHelper.cs,FixAssemblyReference,The length of the statement  "        b.Write(referenceAssemblyPath' new WriterParameters { StrongNameKeyPair = GetStrongNameKeyPair(keyPath' keyFilePassword)' WriteSymbols = File.Exists(Path.ChangeExtension(referenceAssemblyPath' ".pdb")) }); " is 205.
Long Statement,Brutal.Dev.StrongNameSigner,SigningHelper,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\SigningHelper.cs,RemoveInvalidFriendAssemblies,The length of the statement  "      var ivtAttributes = a.CustomAttributes.Where(attr => attr.AttributeType.FullName == typeof(InternalsVisibleToAttribute).FullName).ToList(); " is 139.
Long Statement,Brutal.Dev.StrongNameSigner,SigningHelper,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\SigningHelper.cs,RemoveInvalidFriendAssemblies,The length of the statement  "        if (friendReference.HasConstructorArguments && friendReference.ConstructorArguments.Any(ca => ca.Value != null && ca.Value.ToString().IndexOf("PublicKey="' StringComparison.Ordinal) == -1)) " is 189.
Long Statement,Brutal.Dev.StrongNameSigner,SigningHelper,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\SigningHelper.cs,RemoveInvalidFriendAssemblies,The length of the statement  "        a.Write(assemblyPath' new WriterParameters { StrongNameKeyPair = GetStrongNameKeyPair(keyPath' keyFilePassword)' WriteSymbols = File.Exists(Path.ChangeExtension(assemblyPath' ".pdb")) }); " is 187.
Long Statement,Brutal.Dev.StrongNameSigner,SigningHelper,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\SigningHelper.cs,GetReadParameters,The length of the statement  "        readParams = new ReaderParameters() { AssemblyResolver = resolver' ReadSymbols = File.Exists(Path.ChangeExtension(assemblyPath' ".pdb")) }; " is 139.
Magic Number,Brutal.Dev.StrongNameSigner,SigningHelper,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\SigningHelper.cs,GenerateStrongNameKeyPair,The following statement contains a magic number: using (var provider = new RSACryptoServiceProvider(1024' new CspParameters() { KeyNumber = 2 }))        {          return provider.ExportCspBlob(!provider.PublicOnly);        }
Magic Number,Brutal.Dev.StrongNameSigner,SigningHelper,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\SigningHelper.cs,GenerateStrongNameKeyPair,The following statement contains a magic number: using (var provider = new RSACryptoServiceProvider(1024' new CspParameters() { KeyNumber = 2 }))        {          return provider.ExportCspBlob(!provider.PublicOnly);        }
Missing Default,Brutal.Dev.StrongNameSigner,SigningHelper,C:\repos\brutaldev_StrongNameSigner\src\Brutal.Dev.StrongNameSigner\SigningHelper.cs,GetDotNetVersion,The following switch statement is missing a default case: switch (runtime)        {          case TargetRuntime.Net_1_0:            return "1.0.3705";          case TargetRuntime.Net_1_1:            return "1.1.4322";          case TargetRuntime.Net_2_0:            return "2.0.50727";          case TargetRuntime.Net_4_0:            return "4.0.30319";        }
