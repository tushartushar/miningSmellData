Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MusicExplorer.Models,MainViewModel,C:\repos\nokia-developer_music-explorer\MusicExplorer\Models\MainViewModel.cs,LoadData,Cyclomatic complexity of the method is 12
Long Parameter List,MusicExplorer,FlipableItem,C:\repos\nokia-developer_music-explorer\MusicExplorer\FlipableItem.xaml.cs,Flip,The method has 5 parameters.
Long Statement,MusicExplorer,App,C:\repos\nokia-developer_music-explorer\MusicExplorer\App.xaml.cs,Application_UnhandledException,The length of the statement  "		MessageBox.Show (e.ExceptionObject.Source + ": " + e.ExceptionObject.Message + "\n" + "\n" + e.ExceptionObject.StackTrace); " is 123.
Long Statement,MusicExplorer,App,C:\repos\nokia-developer_music-explorer\MusicExplorer\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneContrastForegroundBrush"]).Color = (Color)Resources ["MusicExplorerContrastForegroundColor"]; " is 128.
Long Statement,MusicExplorer,App,C:\repos\nokia-developer_music-explorer\MusicExplorer\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneContrastBackgroundBrush"]).Color = (Color)Resources ["MusicExplorerContrastBackgroundColor"]; " is 128.
Long Statement,MusicExplorer,App,C:\repos\nokia-developer_music-explorer\MusicExplorer\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneTextBoxForegroundBrush"]).Color = (Color)Resources ["MusicExplorerTextBoxForegroundColor"]; " is 126.
Long Statement,MusicExplorer,App,C:\repos\nokia-developer_music-explorer\MusicExplorer\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneTextBoxEditBackgroundBrush"]).Color = (Color)Resources ["MusicExplorerTextBoxEditBackgroundColor"]; " is 134.
Long Statement,MusicExplorer,App,C:\repos\nokia-developer_music-explorer\MusicExplorer\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneTextBoxReadOnlyBrush"]).Color = (Color)Resources ["MusicExplorerTextBoxReadOnlyColor"]; " is 122.
Long Statement,MusicExplorer,App,C:\repos\nokia-developer_music-explorer\MusicExplorer\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneTextBoxSelectionForegroundBrush"]).Color = (Color)Resources ["MusicExplorerTextBoxSelectionForegroundColor"]; " is 144.
Long Statement,MusicExplorer,App,C:\repos\nokia-developer_music-explorer\MusicExplorer\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneButtonBasePressedForegroundBrush"]).Color = (Color)Resources ["MusicExplorerButtonBasePressedForegroundColor"]; " is 146.
Long Statement,MusicExplorer,App,C:\repos\nokia-developer_music-explorer\MusicExplorer\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneRadioCheckBoxBorderBrush"]).Color = (Color)Resources ["MusicExplorerForegroundColor"]; " is 121.
Long Statement,MusicExplorer,App,C:\repos\nokia-developer_music-explorer\MusicExplorer\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneRadioCheckBoxCheckBrush"]).Color = (Color)Resources ["MusicExplorerForegroundColor"]; " is 120.
Long Statement,MusicExplorer,App,C:\repos\nokia-developer_music-explorer\MusicExplorer\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneSemitransparentBrush"]).Color = (Color)Resources ["MusicExplorerSemitransparentColor"]; " is 122.
Long Statement,MusicExplorer,App,C:\repos\nokia-developer_music-explorer\MusicExplorer\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneProgressBarBackgroundBrush"]).Color = (Color)Resources ["MusicExplorerProgressBarBackgroundColor"]; " is 134.
Long Statement,MusicExplorer,App,C:\repos\nokia-developer_music-explorer\MusicExplorer\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneTextHighContrastBrush"]).Color = (Color)Resources ["MusicExplorerTextHighContrastColor"]; " is 124.
Long Statement,MusicExplorer,App,C:\repos\nokia-developer_music-explorer\MusicExplorer\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneTextMidContrastBrush"]).Color = (Color)Resources ["MusicExplorerTextMidContrastColor"]; " is 122.
Long Statement,MusicExplorer,App,C:\repos\nokia-developer_music-explorer\MusicExplorer\App.xaml.cs,InitializeTheming,The length of the statement  "	((SolidColorBrush)Resources ["PhoneTextLowContrastBrush"]).Color = (Color)Resources ["MusicExplorerTextLowContrastColor"]; " is 122.
Long Statement,MusicExplorer,MainPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\MainPage.xaml.cs,OnFavoriteSelectionChanged,The length of the statement  "			MessageBox.Show ("Missing necessary data to browse artist info. Please wait for a while and try again.\n" + "If the problem persists' ensure the device is connected to Internet and restart the application."); " is 208.
Long Statement,MusicExplorer,MainPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\MainPage.xaml.cs,GetCurrentCoordinate,The length of the statement  "		Geoposition currentPosition = await geolocator.GetGeopositionAsync (TimeSpan.FromMinutes (1)' TimeSpan.FromSeconds (10)); " is 121.
Long Statement,MusicExplorer,MainPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\MainPage.xaml.cs,GetCurrentCoordinate,The length of the statement  "			GeoCoordinate coordinate = new GeoCoordinate (currentPosition.Coordinate.Latitude' currentPosition.Coordinate.Longitude); " is 121.
Long Statement,MusicExplorer,MainPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\MainPage.xaml.cs,GetCurrentCoordinate,The length of the statement  "		MessageBox.Show ("Current location cannot be obtained. It is " + "recommended that location service is turned " + "on in phone settings when using Music Explorer." + "\n\nUsing region info from phone settings instead."); " is 220.
Long Statement,MusicExplorer,MusicApi,C:\repos\nokia-developer_music-explorer\MusicExplorer\MusicApi.cs,ShowNokiaMusicApiError,The length of the statement  "	MessageBox.Show ("Nokia Music API error. Please ensure that the " + "device is connected to Internet and restart " + "the application."); " is 137.
Empty Catch Block,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,MediaPlayer_ActiveSongChanged,The method has an empty catch block.
Empty Catch Block,MusicExplorer,FlipableItem,C:\repos\nokia-developer_music-explorer\MusicExplorer\FlipableItem.xaml.cs,Flip,The method has an empty catch block.
Empty Catch Block,MusicExplorer,FlipableItem,C:\repos\nokia-developer_music-explorer\MusicExplorer\FlipableItem.xaml.cs,Stop,The method has an empty catch block.
Magic Number,MusicExplorer,AboutPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\AboutPage.xaml.cs,AboutPage,The following statement contains a magic number: SystemTray.SetOpacity (this' 0.01);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,ArtistPivotPage,The following statement contains a magic number: SystemTray.SetOpacity (this' 0.01);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,OnPlayClick,The following statement contains a magic number: DetailsPivotItem.Margin = new Thickness (12' 28' 12' 70);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,OnPlayClick,The following statement contains a magic number: DetailsPivotItem.Margin = new Thickness (12' 28' 12' 70);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,OnPlayClick,The following statement contains a magic number: DetailsPivotItem.Margin = new Thickness (12' 28' 12' 70);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,OnPlayClick,The following statement contains a magic number: DetailsPivotItem.Margin = new Thickness (12' 28' 12' 70);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,OnPlayClick,The following statement contains a magic number: TracksPivotItem.Margin = new Thickness (12' 28' 12' 70);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,OnPlayClick,The following statement contains a magic number: TracksPivotItem.Margin = new Thickness (12' 28' 12' 70);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,OnPlayClick,The following statement contains a magic number: TracksPivotItem.Margin = new Thickness (12' 28' 12' 70);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,OnPlayClick,The following statement contains a magic number: TracksPivotItem.Margin = new Thickness (12' 28' 12' 70);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,OnPlayClick,The following statement contains a magic number: AlbumsPivotItem.Margin = new Thickness (12' 28' 12' 70);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,OnPlayClick,The following statement contains a magic number: AlbumsPivotItem.Margin = new Thickness (12' 28' 12' 70);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,OnPlayClick,The following statement contains a magic number: AlbumsPivotItem.Margin = new Thickness (12' 28' 12' 70);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,OnPlayClick,The following statement contains a magic number: AlbumsPivotItem.Margin = new Thickness (12' 28' 12' 70);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,OnPlayClick,The following statement contains a magic number: SinglesPivotItem.Margin = new Thickness (12' 28' 12' 70);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,OnPlayClick,The following statement contains a magic number: SinglesPivotItem.Margin = new Thickness (12' 28' 12' 70);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,OnPlayClick,The following statement contains a magic number: SinglesPivotItem.Margin = new Thickness (12' 28' 12' 70);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,OnPlayClick,The following statement contains a magic number: SinglesPivotItem.Margin = new Thickness (12' 28' 12' 70);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,OnPlayClick,The following statement contains a magic number: SimilarPivotItem.Margin = new Thickness (12' 28' 12' 70);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,OnPlayClick,The following statement contains a magic number: SimilarPivotItem.Margin = new Thickness (12' 28' 12' 70);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,OnPlayClick,The following statement contains a magic number: SimilarPivotItem.Margin = new Thickness (12' 28' 12' 70);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,OnPlayClick,The following statement contains a magic number: SimilarPivotItem.Margin = new Thickness (12' 28' 12' 70);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,CreateAppBar,The following statement contains a magic number: ApplicationBar.Opacity = 0.99;  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,CreateAppBar,The following statement contains a magic number: ApplicationBar.BackgroundColor = Color.FromArgb (255' 20' 20' 20);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,CreateAppBar,The following statement contains a magic number: ApplicationBar.BackgroundColor = Color.FromArgb (255' 20' 20' 20);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,CreateAppBar,The following statement contains a magic number: ApplicationBar.BackgroundColor = Color.FromArgb (255' 20' 20' 20);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,CreateAppBar,The following statement contains a magic number: ApplicationBar.BackgroundColor = Color.FromArgb (255' 20' 20' 20);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,CreateAppBar,The following statement contains a magic number: ApplicationBar.ForegroundColor = Color.FromArgb (255' 255' 255' 255);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,CreateAppBar,The following statement contains a magic number: ApplicationBar.ForegroundColor = Color.FromArgb (255' 255' 255' 255);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,CreateAppBar,The following statement contains a magic number: ApplicationBar.ForegroundColor = Color.FromArgb (255' 255' 255' 255);  
Magic Number,MusicExplorer,ArtistPivotPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\ArtistPivotPage.xaml.cs,CreateAppBar,The following statement contains a magic number: ApplicationBar.ForegroundColor = Color.FromArgb (255' 255' 255' 255);  
Magic Number,MusicExplorer,CountryCodes,C:\repos\nokia-developer_music-explorer\MusicExplorer\CountryCodes.cs,CountryNameFromTwoLetter,The following statement contains a magic number: for (int i = 0; i < countryCodes.Length; i++) {  	if (twoLetterCountryCode == countryCodes [i' 1].ToLower ()) {  		ret = countryCodes [i' 2];  		break;  	}  }  
Magic Number,MusicExplorer,CountryCodes,C:\repos\nokia-developer_music-explorer\MusicExplorer\CountryCodes.cs,CountryNameFromTwoLetter,The following statement contains a magic number: if (twoLetterCountryCode == countryCodes [i' 1].ToLower ()) {  	ret = countryCodes [i' 2];  	break;  }  
Magic Number,MusicExplorer,CountryCodes,C:\repos\nokia-developer_music-explorer\MusicExplorer\CountryCodes.cs,CountryNameFromTwoLetter,The following statement contains a magic number: ret = countryCodes [i' 2];  
Magic Number,MusicExplorer,FlipableItem,C:\repos\nokia-developer_music-explorer\MusicExplorer\FlipableItem.xaml.cs,SetupFlipTimer,The following statement contains a magic number: if (flipTimer == null) {  	flipTimer = new System.Windows.Threading.DispatcherTimer ();  	flipTimer.Interval = TimeSpan.FromMilliseconds (5000);  	flipTimer.Tick += (sender' args) => StartFlip ();  }  
Magic Number,MusicExplorer,FlipableItem,C:\repos\nokia-developer_music-explorer\MusicExplorer\FlipableItem.xaml.cs,SetupFlipTimer,The following statement contains a magic number: flipTimer.Interval = TimeSpan.FromMilliseconds (5000);  
Magic Number,MusicExplorer,FlipableItem,C:\repos\nokia-developer_music-explorer\MusicExplorer\FlipableItem.xaml.cs,StartFlip,The following statement contains a magic number: while (startDelay > 4000) {  	startDelay = startDelay / 2;  }  
Magic Number,MusicExplorer,FlipableItem,C:\repos\nokia-developer_music-explorer\MusicExplorer\FlipableItem.xaml.cs,StartFlip,The following statement contains a magic number: while (startDelay > 4000) {  	startDelay = startDelay / 2;  }  
Magic Number,MusicExplorer,FlipableItem,C:\repos\nokia-developer_music-explorer\MusicExplorer\FlipableItem.xaml.cs,StartFlip,The following statement contains a magic number: startDelay = startDelay / 2;  
Magic Number,MusicExplorer,MainPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\MainPage.xaml.cs,MainPage,The following statement contains a magic number: SystemTray.SetOpacity (this' 0.01);  
Magic Number,MusicExplorer,MainPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\MainPage.xaml.cs,GetCurrentCoordinate,The following statement contains a magic number: try {  	Geoposition currentPosition = await geolocator.GetGeopositionAsync (TimeSpan.FromMinutes (1)' TimeSpan.FromSeconds (10));  	Dispatcher.BeginInvoke (() =>  {  		GeoCoordinate coordinate = new GeoCoordinate (currentPosition.Coordinate.Latitude' currentPosition.Coordinate.Longitude);  		ReverseGeocodeQuery reverseGeocodeQuery = new ReverseGeocodeQuery ();  		reverseGeocodeQuery.GeoCoordinate = new GeoCoordinate (coordinate.Latitude' coordinate.Longitude);  		reverseGeocodeQuery.QueryCompleted += ReverseGeocodeQuery_QueryCompleted;  		reverseGeocodeQuery.QueryAsync ();  	});  }  catch (Exception/*ex*/) {  	// Couldn't get current location. Location may be disabled.  	// Region info from the device is used as a fallback.  	MessageBox.Show ("Current location cannot be obtained. It is " + "recommended that location service is turned " + "on in phone settings when using Music Explorer." + "\n\nUsing region info from phone settings instead.");  	InitializeNokiaMusicApi (null);  }  
Magic Number,MusicExplorer,MixesPage,C:\repos\nokia-developer_music-explorer\MusicExplorer\MixesPage.xaml.cs,MixesPage,The following statement contains a magic number: SystemTray.SetOpacity (this' 0.01);  
Magic Number,MusicExplorer,MusicApi,C:\repos\nokia-developer_music-explorer\MusicExplorer\MusicApi.cs,Initialize,The following statement contains a magic number: if (countryCode == null || countryCode.Length != 2) {  	client = new MusicClient (MUSIC_EXPLORER_APP_ID);  }  else {  	client = new MusicClient (MUSIC_EXPLORER_APP_ID' countryCode.ToLower ());  }  
Magic Number,MusicExplorer,MusicApi,C:\repos\nokia-developer_music-explorer\MusicExplorer\MusicApi.cs,FetchRecommendations,The following statement contains a magic number: if (!initialized || localArtists.Count <= recommendResponses) {  	if (initialized && App.ViewModel.Recommendations.Count <= 0) {  		App.ViewModel.NoRecommendedVisibility = Visibility.Visible;  	}  	else {  		App.ViewModel.NoRecommendedVisibility = Visibility.Collapsed;  	}  	// limit the number of recommended artists to 20  	if (localArtists.Count == recommendResponses) {  		int i = App.ViewModel.Recommendations.Count - 1;  		while (i > 20) {  			App.ViewModel.Recommendations.RemoveAt (i);  			i--;  		}  	}  	return;  }  
Magic Number,MusicExplorer,MusicApi,C:\repos\nokia-developer_music-explorer\MusicExplorer\MusicApi.cs,FetchRecommendations,The following statement contains a magic number: if (localArtists.Count == recommendResponses) {  	int i = App.ViewModel.Recommendations.Count - 1;  	while (i > 20) {  		App.ViewModel.Recommendations.RemoveAt (i);  		i--;  	}  }  
Magic Number,MusicExplorer,MusicApi,C:\repos\nokia-developer_music-explorer\MusicExplorer\MusicApi.cs,FetchRecommendations,The following statement contains a magic number: while (i > 20) {  	App.ViewModel.Recommendations.RemoveAt (i);  	i--;  }  
Magic Number,MusicExplorer,MusicApi,C:\repos\nokia-developer_music-explorer\MusicExplorer\MusicApi.cs,GetProductsForArtist,The following statement contains a magic number: client.GetArtistProducts ((ListResponse<Product> response) =>  {  	Deployment.Current.Dispatcher.BeginInvoke (() =>  {  		// Use results  		if (response != null && response.Result != null && response.Result.Count > 0) {  			foreach (Product p in response.Result) {  				string priceString = "";  				if (p.Price != null) {  					priceString = p.Price.Value + p.Price.Currency;  				}  				string takenFromString = "";  				if (p.TakenFrom != null) {  					takenFromString = p.TakenFrom.Name;  				}  				string performersString = "";  				if (p.Performers != null && p.Performers.Length > 0) {  					performersString = p.Performers [0].Name;  				}  				string genresString = "";  				if (p.Genres != null && p.Genres.Length > 0) {  					genresString = p.Genres [0].Name;  				}  				string categoryString = "Album";  				string trackCountString = null;  				if (p.TrackCount > 0) {  					trackCountString = p.TrackCount + " track";  				}  				if (p.TrackCount > 1) {  					trackCountString += "s";  				}  				if (p.Category == Category.Track) {  					categoryString = "Track";  					App.ViewModel.TracksForArtist.Add (new ProductModel () {  						Performers = performersString'  						Name = p.Name'  						TakenFrom = takenFromString'  						Category = categoryString'  						Thumb100Uri = p.Thumb100Uri'  						Thumb200Uri = p.Thumb200Uri'  						Thumb320Uri = p.Thumb320Uri'  						Id = p.Id  					});  				}  				else if (p.Category == Category.Single) {  					categoryString = "Single";  					App.ViewModel.SinglesForArtist.Add (new ProductModel () {  						Performers = performersString'  						Name = p.Name'  						TrackCount = trackCountString'  						Category = categoryString'  						Thumb100Uri = p.Thumb100Uri'  						Thumb200Uri = p.Thumb200Uri'  						Thumb320Uri = p.Thumb320Uri'  						Id = p.Id  					});  				}  				else {  					App.ViewModel.AlbumsForArtist.Add (new ProductModel () {  						Performers = performersString'  						Name = p.Name'  						TrackCount = trackCountString'  						Category = categoryString'  						Thumb100Uri = p.Thumb100Uri'  						Thumb200Uri = p.Thumb200Uri'  						Thumb320Uri = p.Thumb320Uri'  						Id = p.Id  					});  				}  			}  			if (App.ViewModel.TracksForArtist.Count > 0) {  				App.ViewModel.NoTracksVisibility = Visibility.Collapsed;  			}  			if (App.ViewModel.AlbumsForArtist.Count > 0) {  				App.ViewModel.NoAlbumsVisibility = Visibility.Collapsed;  			}  			if (App.ViewModel.SinglesForArtist.Count > 0) {  				App.ViewModel.NoSinglesVisibility = Visibility.Collapsed;  			}  		}  		if (response != null && response.Error != null) {  			ShowNokiaMusicApiError ();  		}  		HideProgressIndicator ("GetProductsForArtist()");  	});  }' id' null' 0' 30);  
Magic Number,MusicExplorer,TileItem,C:\repos\nokia-developer_music-explorer\MusicExplorer\TileItem.xaml.cs,OnLoaded,The following statement contains a magic number: if (PrimaryText.Equals (SecondaryText)) {  	double rightMargin = 10.0;  	if (Note.Visibility == Visibility.Visible) {  		rightMargin += Note.ActualWidth;  	}  	SecondaryTextBlock.Visibility = Visibility.Collapsed;  	PrimaryTextBlock.Margin = new Thickness (4' 0' rightMargin' 0);  	PrimaryTextBlock.TextWrapping = TextWrapping.Wrap;  }  
Magic Number,MusicExplorer,TileItem,C:\repos\nokia-developer_music-explorer\MusicExplorer\TileItem.xaml.cs,OnLoaded,The following statement contains a magic number: if (PrimaryText.Equals (SecondaryText)) {  	double rightMargin = 10.0;  	if (Note.Visibility == Visibility.Visible) {  		rightMargin += Note.ActualWidth;  	}  	SecondaryTextBlock.Visibility = Visibility.Collapsed;  	PrimaryTextBlock.Margin = new Thickness (4' 0' rightMargin' 0);  	PrimaryTextBlock.TextWrapping = TextWrapping.Wrap;  }  
Magic Number,MusicExplorer,TileItem,C:\repos\nokia-developer_music-explorer\MusicExplorer\TileItem.xaml.cs,OnLoaded,The following statement contains a magic number: PrimaryTextBlock.Margin = new Thickness (4' 0' rightMargin' 0);  
Magic Number,MusicExplorer,TopArtistsForGenrePage,C:\repos\nokia-developer_music-explorer\MusicExplorer\TopArtistsForGenrePage.xaml.cs,TopArtistsForGenrePage,The following statement contains a magic number: SystemTray.SetOpacity (this' 0.01);  
Magic Number,MusicExplorer,XNAFrameworkDispatcherService,C:\repos\nokia-developer_music-explorer\MusicExplorer\XnaFrameworkDispatcherService.cs,XNAFrameworkDispatcherService,The following statement contains a magic number: this.frameworkDispatcherTimer.Interval = TimeSpan.FromTicks (333333);  
Magic Number,MusicExplorer.Models,MainViewModel,C:\repos\nokia-developer_music-explorer\MusicExplorer\Models\MainViewModel.cs,LoadData,The following statement contains a magic number: while (removeIndex > 20) {  	App.ViewModel.LocalAudio.RemoveAt (removeIndex);  	removeIndex--;  }  
