Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Tests.SharpArch.Domain.DataAnnotationsValidator,DuplicateCheckerStub,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DataAnnotationsValidator\HasUniqueEntitySignatureValidatorTests.cs,DoesDuplicateExistWithTypedIdOf,The length of the statement  "                        return !string.IsNullOrEmpty(contractor.Name) && string.Equals(contractor.Name' @"codai"' StringComparison.OrdinalIgnoreCase); " is 126.
Long Statement,Tests.SharpArch.Infrastructure,DependencyListTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Infrastructure\DependencyListTests.cs,Can_Calculate_Maximum_ModificationDate,The length of the statement  "            _fileSystemMock.Setup(f => f.GetLastWriteTimeUtc(BasePath + fileName1)).Returns(new DateTime(2018' 01' 01' 00' 00' 00' DateTimeKind.Utc)); " is 138.
Long Statement,Tests.SharpArch.Infrastructure,DependencyListTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Infrastructure\DependencyListTests.cs,Can_Calculate_Maximum_ModificationDate,The length of the statement  "            _fileSystemMock.Setup(f => f.GetLastWriteTimeUtc(BasePath + fileName2)).Returns(new DateTime(2019' 01' 01' 00' 00' 00' DateTimeKind.Utc)); " is 138.
Magic Number,Tests.SharpArch.Domain.DomainModel,BaseObjectEqualityComparerTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\BaseObjectEqualityComparerTests.cs,CanBeUsedByLinqSetOperatorsSuchAsIntersect,The following statement contains a magic number: EntityIdSetter.SetIdOf(obj1' 2);
Magic Number,Tests.SharpArch.Domain.DomainModel,BaseObjectEqualityComparerTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\BaseObjectEqualityComparerTests.cs,CanBeUsedByLinqSetOperatorsSuchAsIntersect,The following statement contains a magic number: EntityIdSetter.SetIdOf(obj3' 2);
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,CanCompareDomainObjectsWithAllPropertiesBeingPartOfDomainSignature,The following statement contains a magic number: obj1.Age = 13;
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,CanCompareDomainObjectsWithAllPropertiesBeingPartOfDomainSignature,The following statement contains a magic number: obj2.Age = 13;
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,CanCompareDomainObjectsWithOnlySomePropertiesBeingPartOfDomainSignature,The following statement contains a magic number: obj1.Age = 13;
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,CanCompareDomainObjectsWithOnlySomePropertiesBeingPartOfDomainSignature,The following statement contains a magic number: obj2.Age = 13;
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,CanCompareDomainObjectsWithOnlySomePropertiesBeingPartOfDomainSignature,The following statement contains a magic number: obj1.Age = 14;
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,CanCompareEntities,The following statement contains a magic number: EntityIdSetter.SetIdOf(obj1' 10);
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,CanCompareEntities,The following statement contains a magic number: EntityIdSetter.SetIdOf(obj2' 10);
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,CanCompareInheritedDomainObjects,The following statement contains a magic number: obj1.Age = 13;
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,CanCompareInheritedDomainObjects,The following statement contains a magic number: obj2.Age = 13;
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,CanCompareObjectsWithComplexProperties,The following statement contains a magic number: obj1.Address = new AddressBeingDomainSignatureComparable              {                  Address1 = "123 Smith Ln."'                  Address2 = "Suite 201"'                  ZipCode = 12345              };
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,CanCompareObjectsWithComplexProperties,The following statement contains a magic number: obj2.Address = new AddressBeingDomainSignatureComparable              {                  Address1 = "123 Smith Ln."'                    // Address2 isn't marked as being part of the domain signature;                   // therefore' it WON'T be used in the equality comparison                  Address2 = "Suite 402"'                  ZipCode = 98765              };
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,CanCompareObjectsWithComplexProperties,The following statement contains a magic number: obj2.Address.ZipCode = 12345;
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,EntitySerializesAsJsonProperly,The following statement contains a magic number: obj.SetIdTo(999);
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,EntitySerializesAsJsonProperly,The following statement contains a magic number: obj.Age = 13;
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,KeepsConsistentHashThroughLifetimeOfPersistentObject,The following statement contains a magic number: obj.Age = 13;
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,KeepsConsistentHashThroughLifetimeOfPersistentObject,The following statement contains a magic number: obj.Age = 14;
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,KeepsConsistentHashThroughLifetimeOfTransientObject,The following statement contains a magic number: obj.Age = 13;
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,KeepsConsistentHashThroughLifetimeOfTransientObject,The following statement contains a magic number: obj.Age = 14;
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,Transient_entity_with_domain_signature_preserves_hashcode_temporarily_when_its_domain_signature_changes,The following statement contains a magic number: obj.Age = 2;
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,Two_persistent_entities_with_different_domain_signature_and_equal_ids_generate_equal_hashcodes,The following statement contains a magic number: IEntityWithTypedId<int> obj2 = new ObjectWithOneDomainSignatureProperty {Age = 2}.SetIdTo(1);
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,Two_persistent_entities_with_equal_domain_signature_and_different_ids_generate_different_hashcodes,The following statement contains a magic number: IEntityWithTypedId<int> obj2 = new ObjectWithOneDomainSignatureProperty {Age = 1}.SetIdTo(2);
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,Two_persistent_entities_with_no_signature_properties_and_different_ids_generate_different_hashcodes,The following statement contains a magic number: IEntityWithTypedId<int> obj2 = new ObjectWithNoDomainSignatureProperties().SetIdTo(2);
Magic Number,Tests.SharpArch.Domain.DomainModel,EntityTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\EntityTests.cs,Two_transient_entities_with_different_values_of_domain_signature_generate_different_hashcodes,The following statement contains a magic number: var obj2 = new ObjectWithOneDomainSignatureProperty {Age = 2};
Magic Number,Tests.SharpArch.Domain.DomainModel,ValueObjectTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\ValueObjectTests.cs,ShouldCompareAndReturnNotEqualWithOperators,The following statement contains a magic number: var val1 = new DummyValueType {Id = 10' Name = @"jose"};
Magic Number,Tests.SharpArch.Domain.DomainModel,ValueObjectTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\ValueObjectTests.cs,ShouldCompareAndReturnNotEqualWithOperators,The following statement contains a magic number: var val2 = new DummyValueType {Id = 20' Name = @"Rui"};
Magic Number,Tests.SharpArch.Domain.DomainModel,ValueObjectTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\ValueObjectTests.cs,ShouldGenerateSameHashcodeWhenEquals,The following statement contains a magic number: var val1 = new DummyValueType {Id = 10' Name = "Miguel"};
Magic Number,Tests.SharpArch.Domain.DomainModel,ValueObjectTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\ValueObjectTests.cs,ShouldGenerateSameHashcodeWhenEquals,The following statement contains a magic number: var val2 = new DummyValueType {Id = 10' Name = "Miguel"};
Magic Number,Tests.SharpArch.Domain.DomainModel,ValueObjectTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DomainModel\ValueObjectTests.cs,ShouldNotBeEqualWithDifferentReferencesAndDifferentIds,The following statement contains a magic number: var val2 = new DummyValueType {Id = 10' Name = "Luis"};
Magic Number,Tests.SharpArch.Infrastructure,DependencyListTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Infrastructure\DependencyListTests.cs,Can_Calculate_Maximum_ModificationDate,The following statement contains a magic number: _fileSystemMock.Setup(f => f.GetLastWriteTimeUtc(BasePath + fileName1)).Returns(new DateTime(2018' 01' 01' 00' 00' 00' DateTimeKind.Utc));
Magic Number,Tests.SharpArch.Infrastructure,DependencyListTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Infrastructure\DependencyListTests.cs,Can_Calculate_Maximum_ModificationDate,The following statement contains a magic number: _fileSystemMock.Setup(f => f.GetLastWriteTimeUtc(BasePath + fileName2)).Returns(new DateTime(2019' 01' 01' 00' 00' 00' DateTimeKind.Utc));
Magic Number,Tests.SharpArch.Infrastructure,DependencyListTests,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Infrastructure\DependencyListTests.cs,Can_Calculate_Maximum_ModificationDate,The following statement contains a magic number: _dependencyList.GetLastModificationTime().Should().Be(new DateTime(2019' 01' 01' 00' 00' 00' DateTimeKind.Utc));
Missing Default,Tests.SharpArch.Domain.DataAnnotationsValidator,DuplicateCheckerStub,D:\research\architectureSmells\repos1\sharparchitecture_Sharp-Architecture\Src\Tests\SharpArch.XunitTests\SharpArch.Domain\DataAnnotationsValidator\HasUniqueEntitySignatureValidatorTests.cs,DoesDuplicateExistWithTypedIdOf,The following switch statement is missing a default case: switch (entity)                  {                      case Contractor contractor:                          return !string.IsNullOrEmpty(contractor.Name) && string.Equals(contractor.Name' @"codai"' StringComparison.OrdinalIgnoreCase);                      case User user:                          return !string.IsNullOrEmpty(user.Ssn) && user.Ssn == "123-12-1234";                      case ObjectWithGuidId objectWithGuidId:                          return !string.IsNullOrEmpty(objectWithGuidId.Name) &&                              string.Equals(objectWithGuidId.Name' @"codai"' StringComparison.OrdinalIgnoreCase);                  }
