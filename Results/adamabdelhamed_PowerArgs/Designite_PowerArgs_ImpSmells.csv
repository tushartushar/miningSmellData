Implementation smell,Namespace,Class,File,Method,Description
Long Method,PowerArgs,Args,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Args.cs,ParseInternal,The method has 106 lines of code.
Long Method,PowerArgs,ArgUsage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgUsage.cs,GetOptionsUsage,The method has 103 lines of code.
Long Method,PowerArgs,ArgParser,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\ArgParser.cs,Parse,The method has 125 lines of code.
Long Method,PowerArgs,TableExpression,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\TableExpression.cs,Evaluate,The method has 108 lines of code.
Long Method,PowerArgs.Cli,ConsoleBitmapFrameSerializer,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Drawing\Recording\ConsoleBitmapFrameSerializer.cs,DeserializeFrame,The method has 105 lines of code.
Complex Method,PowerArgs,CommandLineArgumentsDefinition,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgDefinition\CommandLineArgumentsDefinition.cs,ValidateArguments,Cyclomatic complexity of the method is 9
Complex Method,PowerArgs,Args,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Args.cs,ParseInternal,Cyclomatic complexity of the method is 15
Complex Method,PowerArgs,Args,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Args.cs,ValidateArgScaffold,Cyclomatic complexity of the method is 17
Complex Method,PowerArgs,ArgUsage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgUsage.cs,GetStyledUsage,Cyclomatic complexity of the method is 15
Complex Method,PowerArgs,ArgUsage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgUsage.cs,GetOptionsUsage,Cyclomatic complexity of the method is 22
Complex Method,PowerArgs,ArgUsage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgUsage.cs,FormatAsTable,Cyclomatic complexity of the method is 10
Complex Method,PowerArgs,FileSystemTabCompletionSource,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\FileSystemTabCompletionSource.cs,TryComplete,Cyclomatic complexity of the method is 9
Complex Method,PowerArgs,BooleanExpressionParser,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\BooleanExpressionParser.cs,BuildTree,Cyclomatic complexity of the method is 10
Complex Method,PowerArgs,HookContext,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Hooks\ArgHook.cs,RunHook,Cyclomatic complexity of the method is 9
Complex Method,PowerArgs,TabCompletion,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Hooks\TabCompletion.cs,BeforeParse,Cyclomatic complexity of the method is 9
Complex Method,PowerArgs,ObjectPathExpression,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\ObjectPathExpression.cs,Parse,Cyclomatic complexity of the method is 12
Complex Method,PowerArgs,TableExpression,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\TableExpression.cs,Evaluate,Cyclomatic complexity of the method is 18
Complex Method,PowerArgs.Cli,CliMessagePump,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\CliMessagePump.cs,Pump,Cyclomatic complexity of the method is 9
Complex Method,PowerArgs.Cli,Grid,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Grid-View.cs,PaintInternal,Cyclomatic complexity of the method is 14
Complex Method,PowerArgs.Cli,PageStack,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\PageStack.cs,TryResolveRoute,Cyclomatic complexity of the method is 11
Complex Method,PowerArgs.Cli,PowerArgsRichCommandLineReader,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\PowerArgs\PowerArgsRichCommandLineReader.cs,TryTabComplete,Cyclomatic complexity of the method is 8
Complex Method,PowerArgs.Cli,RichCommandLineContext,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\RichCommandLineContext.cs,CompleteCurrentToken,Cyclomatic complexity of the method is 8
Long Parameter List,PowerArgs,ArgUsage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgUsage.cs,ShowUsageInBrowser,The method has 5 parameters. Parameters: def' template' outputFileName' deleteFileAfterBrowse' waitForBrowserExit
Long Parameter List,PowerArgs,ActionMethodInfo,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\ActionMethodInfo.cs,Invoke,The method has 5 parameters. Parameters: obj' invokeAttr' binder' parameters' culture
Long Parameter List,PowerArgs,StdConsoleProvider,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\StdConsoleProvider.cs,ReadConsoleOutputCharacter,The method has 5 parameters. Parameters: hConsoleOutput' lpCharacter' nLength' dwReadCoord' lpNumberOfCharsRead
Long Parameter List,PowerArgs,VirtualPropertyInfo,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\VirtualPropertyInfo.cs,GetValue,The method has 5 parameters. Parameters: obj' invokeAttr' binder' index' culture
Long Parameter List,PowerArgs,VirtualPropertyInfo,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\VirtualPropertyInfo.cs,SetValue,The method has 6 parameters. Parameters: obj' value' invokeAttr' binder' index' culture
Long Parameter List,PowerArgs,ConsoleString,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\ConsoleString.cs,Replace,The method has 5 parameters. Parameters: toFind' toReplace' foregroundColor' backgroundColor' comparison
Long Parameter List,PowerArgs,ConsoleTableBuilder,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\ConsoleTableBuilder.cs,FormatAsTable,The method has 5 parameters. Parameters: columnHeaders' rows' rowPrefix' columnOverflowBehaviors' gutter
Long Parameter List,PowerArgs,Tokenizer<T>,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\Tokenizer.cs,Tokenize_EscapeCharacter,The method has 7 parameters. Parameters: input' currentIndex' currentCharacter' line' col' currentToken' tokens
Long Parameter List,PowerArgs,Tokenizer<T>,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\Tokenizer.cs,Tokenize_Plain,The method has 7 parameters. Parameters: input' currentIndex' currentCharacter' line' col' currentToken' tokens
Long Parameter List,PowerArgs,Tokenizer<T>,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\Tokenizer.cs,Tokenize_DelimiterCharacter,The method has 7 parameters. Parameters: input' currentIndex' currentCharacter' line' col' currentToken' tokens
Long Parameter List,PowerArgs,Tokenizer<T>,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\Tokenizer.cs,Tokenize_Whitespace,The method has 7 parameters. Parameters: input' currentIndex' currentCharacter' line' col' currentToken' tokens
Long Parameter List,PowerArgs,Tokenizer<T>,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\Tokenizer.cs,AppendToTokenSafe,The method has 5 parameters. Parameters: currentToken' toAppend' startIndex' line' col
Long Parameter List,PowerArgs.Cli,Dialog,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Dialog.cs,ShowMessage,The method has 5 parameters. Parameters: message' resultCallback' allowEscapeToCancel' maxHeight' buttons
Long Parameter List,PowerArgs.Cli,Dialog,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Dialog.cs,ShowTextInput,The method has 5 parameters. Parameters: message' resultCallback' cancelCallback' allowEscapeToCancel' maxHeight
Long Parameter List,PowerArgs.Cli,Dialog,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Dialog.cs,ShowRichTextInput,The method has 7 parameters. Parameters: message' resultCallback' cancelCallback' allowEscapeToCancel' maxHeight' inputBox' initialValue
Long Parameter List,PowerArgs.Cli,ConsoleBitmap,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Drawing\ConsoleBitmap.cs,ConsoleBitmap,The method has 5 parameters. Parameters: x' y' w' h' bg
Long Parameter List,PowerArgs.Cli,ConsoleBitmap,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Drawing\ConsoleBitmap.cs,DrawLine,The method has 5 parameters. Parameters: character' x1' y1' x2' y2
Long Parameter List,PowerArgs.Cli,ConsoleBitmap,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Drawing\ConsoleBitmap.cs,DrawRect,The method has 5 parameters. Parameters: character' x' y' w' h
Long Parameter List,PowerArgs.Cli,ConsoleBitmap,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Drawing\ConsoleBitmap.cs,FillRect,The method has 5 parameters. Parameters: character' x' y' w' h
Long Parameter List,PowerArgs.Cli,ViewModelBinding,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Markup\MarkupParser.cs,OneWayBind,The method has 5 parameters. Parameters: control' propertyName' viewModel' observablePath' map
Long Parameter List,PowerArgs.Cli,ViewModelBinding,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Markup\MarkupParser.cs,ViewModelBinding,The method has 6 parameters. Parameters: control' controlProperty' viewModel' observablePath' mapper' reverseMapper
Long Parameter List,PowerArgs.Cli,ProxiedObservableExtensions,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Observability\ProxiedObservable.cs,SubscribeProxiedForLifetime,The method has 5 parameters. Parameters: obj' app' propertyName' handler' manager
Long Parameter List,PowerArgs.Cli,ProxiedObservableExtensions,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Observability\ProxiedObservable.cs,SynchronizeProxiedForLifetime,The method has 5 parameters. Parameters: obj' app' propertyName' handler' manager
Long Parameter List,PowerArgs.Cli,SimpleSyntaxHighlighter,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\SimpleSyntaxHighlighter.cs,AddConditionalKeyword,The method has 5 parameters. Parameters: keyword' conditionEval' fg' bg' comparison
Long Parameter List,PowerArgs.Cli,ConditionalKeywordHighlighter,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\SimpleSyntaxHighlighter.cs,ConditionalKeywordHighlighter,The method has 5 parameters. Parameters: keyword' conditionEval' fg' bg' comparison
Long Parameter List,PowerArgs.Cli.Physics,HitDetection,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\HitDetection.cs,PredictHit,The method has 5 parameters. Parameters: r' Target' hitDetectionTypes' dx' dy
Long Identifier,PowerArgs,AttrOverride,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\AttrOverride.cs,Get,The length of the parameter overrideIsDifferentFromAttributeVal is 35.
Long Identifier,PowerArgs,AliasCollection,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\AliasCollection.cs,AliasCollection,The length of the parameter stripLeadingArgInticatorsOnAttributeValues is 42.
Long Identifier,PowerArgs,AliasCollection,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\AliasCollection.cs,EvaluateAttributes,The length of the parameter stripLeadingArgInticatorsOnAttributeValues is 42.
Long Identifier,PowerArgs,StickyArg,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Hooks\StickyArg.cs,,The length of the parameter userSpecifiedPersistenceProvider is 32.
Long Identifier,PowerArgs,DocumentToken,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\DocumentToken.cs,TokenFactoryImpl,The length of the parameter previousNonWhitespaceTokenType is 30.
Long Identifier,PowerArgs,DocumentToken,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\DocumentToken.cs,RemoveLinesThatOnlyContainReplacements,The length of the parameter numReplacementTokensOnCurrentLine is 33.
Long Identifier,PowerArgs,DocumentToken,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\DocumentToken.cs,FilterOutNewlinesIfNeeded,The length of the parameter numReplacementTokensOnCurrentLine is 33.
Long Identifier,PowerArgs.Cli,ChartLabelFormatters,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\LineChart.cs,,The length of the parameter SecondGranularityCompactTimestamp is 33.
Long Identifier,PowerArgs.Cli,TextBox,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\TextBox.cs,,The length of the parameter enableBackspaceNavigationOptimization is 37.
Long Identifier,PowerArgs.Cli,TextBox,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\TextBox.cs,,The length of the parameter backspaceNavigationOptimizationTimerHandle is 42.
Long Identifier,PowerArgs.Cli,Page,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\Page.cs,ShowProgressOperationsDialog,The length of the parameter progressOperationManagerControl is 31.
Long Identifier,PowerArgs.Cli,Page,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\Page.cs,,The length of the parameter progressOperationManagerDialog is 30.
Long Identifier,PowerArgs.Cli,SimpleSyntaxHighlighter,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\SimpleSyntaxHighlighter.cs,TryHighlight,The length of the parameter shouldBeHighlightedByAtLeastOneHighlighter is 42.
Long Identifier,PowerArgs.Cli,SimpleSyntaxHighlighter,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\SimpleSyntaxHighlighter.cs,TryHighlight,The length of the parameter shouldBeHighlightedByThisHighlighter is 36.
Long Identifier,PowerArgs.Cli.Physics,SpeedTracker,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpeedTracker.cs,,The length of the parameter haveMovedSinceLastHitDetection is 30.
Long Statement,PowerArgs,CommandLineAction,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgDefinition\CommandLineAction.cs,Create,The length of the statement  "            if (actionProperty.DeclaringType.HasAttr<ArgIgnoreCase>() && actionProperty.DeclaringType.Attr<ArgIgnoreCase>().IgnoreCase == false) " is 132.
Long Statement,PowerArgs,CommandLineAction,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgDefinition\CommandLineAction.cs,Create,The length of the statement  "            if (actionMethod.DeclaringType.HasAttr<ArgIgnoreCase>() && actionMethod.DeclaringType.Attr<ArgIgnoreCase>().IgnoreCase == false) " is 128.
Long Statement,PowerArgs,CommandLineAction,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgDefinition\CommandLineAction.cs,Create,The length of the statement  "            if (actionMethod.GetParameters().Length == 1 && ArgRevivers.CanRevive(actionMethod.GetParameters()[0].ParameterType) == false) " is 126.
Long Statement,PowerArgs,CommandLineAction,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgDefinition\CommandLineAction.cs,Create,The length of the statement  "                ret.Arguments.AddRange(actionMethod.GetParameters()[0].ParameterType.GetProperties(BindingFlags.Public | BindingFlags.Instance).Where(p => CommandLineArgument.IsArgument(p)).Select(p => CommandLineArgument.Create(p' knownAliases))); " is 232.
Long Statement,PowerArgs,CommandLineAction,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgDefinition\CommandLineAction.cs,Create,The length of the statement  "            else if (actionMethod.GetParameters().Length > 0 && actionMethod.GetParameters().Where(p => ArgRevivers.CanRevive(p.ParameterType) == false).Count() == 0) " is 154.
Long Statement,PowerArgs,CommandLineAction,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgDefinition\CommandLineAction.cs,Create,The length of the statement  "                ret.Arguments.AddRange(actionMethod.GetParameters().Where(p => CommandLineArgument.IsArgument(p)).Select(p => CommandLineArgument.Create(p))); " is 142.
Long Statement,PowerArgs,CommandLineAction,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgDefinition\CommandLineAction.cs,Create,The length of the statement  "                throw new InvalidArgDefinitionException("Your action method contains a parameter that cannot be revived on its own.  That is only valid if the non-revivable parameter is the only parameter.  In that case' the properties of that parameter type will be used."); " is 259.
Long Statement,PowerArgs,CommandLineAction,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgDefinition\CommandLineAction.cs,PopulateArguments,The length of the statement  "                if ((Source as MethodInfo).GetParameters().Length > 1 || ArgRevivers.CanRevive((Source as MethodInfo).GetParameters()[0].ParameterType)) " is 136.
Long Statement,PowerArgs,CommandLineAction,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgDefinition\CommandLineAction.cs,IsMatch,The length of the statement  "            var ret = Aliases.Where(a => a.Equals(actionString' IgnoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal)).Count() > 0; " is 141.
Long Statement,PowerArgs,CommandLineArgument,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgDefinition\CommandLineArgument.cs,Create,The length of the statement  "            if (property.DeclaringType.HasAttr<ArgIgnoreCase>() && property.DeclaringType.Attr<ArgIgnoreCase>().IgnoreCase == false) " is 120.
Long Statement,PowerArgs,CommandLineArgument,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgDefinition\CommandLineArgument.cs,Create,The length of the statement  "            if (parameter.Member.DeclaringType.HasAttr<ArgIgnoreCase>() && parameter.Member.DeclaringType.Attr<ArgIgnoreCase>().IgnoreCase == false) " is 136.
Long Statement,PowerArgs,CommandLineArgument,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgDefinition\CommandLineArgument.cs,Validate,The length of the statement  "                throw new InvalidArgDefinitionException("Properties of type SecureStringArgument cannot be validated.  If your goal is to make the argument required then the[ArgRequired] attribute is not needed.  The SecureStringArgument is designed to prompt the user for a value only if your code asks for it after parsing.  If your code never reads the SecureString property then the user is never prompted and it will be treated as an optional parameter.  Although discouraged' if you really' really need to run custom logic against the value before the rest of your program runs then you can implement a custom ArgHook' override RunAfterPopulateProperty' and add your custom attribute to the SecureStringArgument property."); " is 714.
Long Statement,PowerArgs,CommandLineArgument,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgDefinition\CommandLineArgument.cs,Revive,The length of the statement  "                            throw new ArgException("'" + commandLineValue + "' is not a valid value for " + Aliases.First() + ". Available values are [" + string.Join("' "' Enum.GetNames(ArgumentType)) + "]"' ex); " is 185.
Long Statement,PowerArgs,CommandLineArgument,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgDefinition\CommandLineArgument.cs,Revive,The length of the statement  "                        if (ArgumentType.IsEnum) throw new ArgException("'" + commandLineValue + "' is not a valid value for " + Aliases.First() + ". Available values are [" + string.Join("' "' Enum.GetNames(ArgumentType)) + "]"' ex); " is 210.
Long Statement,PowerArgs,CommandLineArgument,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgDefinition\CommandLineArgument.cs,IsMatch,The length of the statement  "            var ret = Aliases.Where(a => a.Equals(key' IgnoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal)).Count() > 0; " is 132.
Long Statement,PowerArgs,CommandLineArgumentsDefinition,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgDefinition\CommandLineArgumentsDefinition.cs,Validate,The length of the statement  "                if (action.ActionMethod == null) throw new InvalidArgDefinitionException("The action '"+action.DefaultAlias+"' has no ActionMethod defined"); " is 141.
Long Statement,PowerArgs,CommandLineArgumentsDefinition,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgDefinition\CommandLineArgumentsDefinition.cs,FindCommandLineActions,The length of the statement  "                        throw new InvalidArgDefinitionException("The method "+method.DeclaringType.FullName+"."+method.Name+" must be static because it has been imported using [ArgActionType] or [ArgActions]"); " is 186.
Long Statement,PowerArgs,CommandLineArgumentsDefinition,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgDefinition\CommandLineArgumentsDefinition.cs,ValidateArguments,The length of the statement  "                    if (knownAliases.Contains(alias' new CaseAwareStringComparer(argument.IgnoreCase))) throw new InvalidArgDefinitionException("Duplicate alias '" + alias + "' on argument '" + argument.Aliases.First() + "'"); " is 206.
Long Statement,PowerArgs,ArgumentScaffoldTypeCommandLineDefinitionFactory,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgDefinition\ICommandLineArgumentsDefinitionFactory.cs,MakeDefinition,The length of the statement  "            if (other.ArgumentScaffoldType == null) throw new NotSupportedException("Your command line arguments definition was not created from a scaffold type. You created it manually using the default constructor of CommandLineArgumentsDefinition()."); " is 243.
Long Statement,PowerArgs,ArgumentScaffoldTypeCommandLineDefinitionFactory,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgDefinition\ICommandLineArgumentsDefinitionFactory.cs,MakeDefinition,The length of the statement  "            throw new NotImplementedException("This class only implements the overload of MakeDefinition that takes in a definition as a parameter"); " is 137.
Long Statement,PowerArgs,Args,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Args.cs,InvokeAction,The length of the statement  "            return REPL.DriveREPL<ArgAction>(definition.Hooks.Where(h => h is TabCompletion).Select(h => h as TabCompletion).SingleOrDefault()' (a) => " is 138.
Long Statement,PowerArgs,Args,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Args.cs,ParseInternal,The length of the statement  "            if (definition.ArgumentScaffoldType != null) context.Args = ObjectFactory.CreateInstance(definition.ArgumentScaffoldType); " is 122.
Long Statement,PowerArgs,Args,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Args.cs,ParseInternal,The length of the statement  "                    throw new UnexpectedArgException("Unexpected unnamed argument: " + context.ParserData.ImplicitParameters.First().Value); " is 120.
Long Statement,PowerArgs,Args,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Args.cs,ParseInternal,The length of the statement  "                    throw new UnexpectedArgException("Unexpected named argument: " + context.ParserData.AdditionalExplicitParameters.First().Key); " is 126.
Long Statement,PowerArgs,Args,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Args.cs,ParseInternal,The length of the statement  "                if (context.SpecifiedAction.Source is PropertyInfo) actionArgsPropertyInfo = context.SpecifiedAction.Source as PropertyInfo; " is 124.
Long Statement,PowerArgs,Args,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Args.cs,ParseInternal,The length of the statement  "                else if (context.SpecifiedAction.Source is MethodInfo) actionArgsPropertyInfo = new ArgActionMethodVirtualProperty(context.SpecifiedAction.Source as MethodInfo); " is 161.
Long Statement,PowerArgs,Args,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Args.cs,ValidateArgScaffold,The length of the statement  "                    throw new InvalidArgDefinitionException("If you specify the " + typeof(ArgIgnoreCase).Name + " attribute on your base type then you must also specify it on each action type."); " is 176.
Long Statement,PowerArgs,Args,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Args.cs,ValidateArgScaffold,The length of the statement  "                else if (parentType.HasAttr<ArgIgnoreCase>() && parentType.Attr<ArgIgnoreCase>().IgnoreCase != t.Attr<ArgIgnoreCase>().IgnoreCase) " is 130.
Long Statement,PowerArgs,Args,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Args.cs,ValidateArgScaffold,The length of the statement  "                    throw new InvalidArgDefinitionException("If you specify the " + typeof(ArgIgnoreCase).Name + " attribute on your base and acton types then they must be configured to use the same value for IgnoreCase."); " is 203.
Long Statement,PowerArgs,Args,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Args.cs,ValidateArgScaffold,The length of the statement  "            if (t.Attrs<ArgIgnoreCase>().Count > 1) throw new InvalidArgDefinitionException("An attribute that is or derives from " + typeof(ArgIgnoreCase).Name+" was specified on your type more than once"); " is 195.
Long Statement,PowerArgs,Args,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Args.cs,ValidateArgScaffold,The length of the statement  "                // This check happens in the CommandLineArgumentsDefinition validation method and should not be repeated here.  Leaving the code commented while this bakes' but this code " is 170.
Long Statement,PowerArgs,Args,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Args.cs,ValidateArgScaffold,The length of the statement  "                //    throw new InvalidArgDefinitionException("There is no reviver for type " + prop.PropertyType.Name + ". Offending Property: " + prop.DeclaringType.Name + "." + prop.Name); " is 175.
Long Statement,PowerArgs,Args,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Args.cs,ValidateArgScaffold,The length of the statement  "                if (noShortcutsAllowed && shortcutsOnly) throw new InvalidArgDefinitionException("You cannot specify a policy of NoShortcut and another policy of ShortcutsOnly."); " is 163.
Long Statement,PowerArgs,Args,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Args.cs,ValidateArgScaffold,The length of the statement  "                if (noShortcutsAllowed && actualShortcutValues) throw new InvalidArgDefinitionException("You cannot specify a policy of NoShortcut and then also specify shortcut values via another attribute."); " is 194.
Long Statement,PowerArgs,Args,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Args.cs,ValidateArgScaffold,The length of the statement  "                if (shortcutsOnly && actualShortcutValues == false) throw new InvalidArgDefinitionException("You specified a policy of ShortcutsOnly' but did not specify any shortcuts by adding another ArgShortcut attrivute."); " is 211.
Long Statement,PowerArgs,ArgUsage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgUsage.cs,ShowUsageInBrowser,The length of the statement  "            return ShowUsageInBrowser(new CommandLineArgumentsDefinition(typeof(T))' template' outputFileName' deleteFileAfterBrowse' waitForBrowserExit); " is 142.
Long Statement,PowerArgs,ArgUsage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgUsage.cs,GetStyledUsage,The length of the statement  "                    throw new InvalidOperationException("PowerArgs could not determine the name of your executable automatically.  This may happen if you run GetUsage<T>() from within unit tests.  Use GetUsageT>(string exeName) in unit tests to avoid this exception."); " is 249.
Long Statement,PowerArgs,ArgUsage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgUsage.cs,GetStyledUsage,The length of the statement  "                string actionText = options.SpecifiedActionOverride == null ? "<action>" : options.SpecifiedActionOverride.DefaultAlias; " is 120.
Long Statement,PowerArgs,ArgUsage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgUsage.cs,GetStyledUsage,The length of the statement  "                    ret += new ConsoleString("\nEXAMPLE: " + example.Example + "\n" + example.Description + "\n\n"' ConsoleColor.DarkGreen); " is 120.
Long Statement,PowerArgs,ArgUsage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgUsage.cs,GetOptionsUsage,The length of the statement  "                if (options.AppendDefaultValueToDescription && usageInfo.DefaultValue != null) descriptionString += new ConsoleString(" [default=" + usageInfo.DefaultValue.ToString() + "]"' ConsoleColor.DarkGreen); " is 198.
Long Statement,PowerArgs,ArgUsage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgUsage.cs,GetOptionsUsage,The length of the statement  "                    var proposedInlineAliases = inlineAliasInfo == string.Empty ? aliases[aliasIndex] : inlineAliasInfo + "' " + aliases[aliasIndex]; " is 129.
Long Statement,PowerArgs,ContextAssistSearch,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\ContextAssist\ContextAssistSearch.cs,DoSearchInternal,The length of the statement  "                throw new ArgumentException("You cannot specify both parentContext and standaloneConsole' you must choose one or the other"); " is 125.
Long Statement,PowerArgs,ContextAssistSearch,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\ContextAssist\ContextAssistSearch.cs,DoSearchInternal,The length of the statement  "                this.console.Write(new ConsoleString("Type to search. Use up/down/enter/escape to navigate/select/cancel: "' ConsoleColor.Cyan)); " is 129.
Long Statement,PowerArgs,ContextAssistSearch,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\ContextAssist\ContextAssistSearch.cs,DoSearchInternal,The length of the statement  "            this.searchReader.RegisterHandler(KeyHandler.FromAction((searchReaderContext) => { _MoveSelectedIndex(-1); searchReaderContext.Intercept = true; }' ConsoleKey.UpArrow)); " is 169.
Long Statement,PowerArgs,ContextAssistSearch,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\ContextAssist\ContextAssistSearch.cs,DoSearchInternal,The length of the statement  "            this.searchReader.RegisterHandler(KeyHandler.FromAction((_searchReaderContext) => { _searchReaderContext.Intercept = true; _MoveSelectedIndex(1); }' ConsoleKey.DownArrow)); " is 172.
Long Statement,PowerArgs,ContextAssistSearch,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\ContextAssist\ContextAssistSearch.cs,DoSearchInternal,The length of the statement  "            this.searchReader.RegisterHandler(KeyHandler.FromAction((searchReaderContext) => { _SearchReader_HandleEnterKey(searchReaderContext); }' ConsoleKey.Enter)); " is 156.
Long Statement,PowerArgs,ContextAssistSearch,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\ContextAssist\ContextAssistSearch.cs,DoSearchInternal,The length of the statement  "                // This next lione makes sure that we ignore any in flight search calls that come back after we return control of the main " is 122.
Long Statement,PowerArgs,ContextAssistSearch,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\ContextAssist\ContextAssistSearch.cs,DoSearchInternal,The length of the statement  "                // thread.  If we didn't do this then the results would get written to the screen even though the search assist code is no " is 122.
Long Statement,PowerArgs,ContextAssistSearch,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\ContextAssist\ContextAssistSearch.cs,_SearchReader_HandleKeyPressed,The length of the statement  "            if(searchReaderContext.KeyPressed.Key == ConsoleKey.UpArrow || searchReaderContext.KeyPressed.Key == ConsoleKey.DownArrow) " is 122.
Long Statement,PowerArgs,ContextAssistSearch,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\ContextAssist\ContextAssistSearch.cs,RedrawSearchResults,The length of the statement  "                        searchResult = searchResult.Highlight(latestResultsSearchString' ConsoleColor.Black' ConsoleColor.Yellow' StringComparison.InvariantCultureIgnoreCase); " is 151.
Long Statement,PowerArgs,FieldInfoEx,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Extensions\FieldInfo.cs,GetEnumShortcuts,The length of the statement  "            if (enumField.DeclaringType.IsEnum == false) throw new ArgumentException("The given field '" + enumField.Name + "' is not an enum field."); " is 139.
Long Statement,PowerArgs,FieldInfoEx,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Extensions\FieldInfo.cs,GetEnumShortcuts,The length of the statement  "            if (noShortcutPolicy != null && shortcutVals.Count > 0) throw new InvalidArgDefinitionException("You can't have an ArgShortcut attribute with a null shortcut and then define a second ArgShortcut attribute with a non-null value."); " is 230.
Long Statement,PowerArgs,IArgMetadataEx,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Extensions\IEnumerableOfIArgMetadata.cs,AssertAreAllInstanceOf,The length of the statement  "                throw new InvalidArgDefinitionException("Metadata of type '" + invalidMetadata.GetType().Name + "' does not implement " + typeof(ICommandLineArgumentsDefinitionMetadata).Name); " is 176.
Long Statement,PowerArgs,MemberInfoEx,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Extensions\MemberInfo.cs,Attrs,The length of the statement  "            string cacheKey = (info is Type ? ((Type)info).FullName : info.DeclaringType.FullName + "." + info.Name) + "<" + typeof(T).FullName + ">"; " is 138.
Long Statement,PowerArgs,ObjectEx,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Extensions\Object.cs,InvokeMainMethod,The length of the statement  "            if (method.IsStatic) throw new InvalidArgDefinitionException("The Main() method in type '" + o.GetType().Name + "' must not be static"); " is 136.
Long Statement,PowerArgs,ObjectEx,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Extensions\Object.cs,InvokeMainMethod,The length of the statement  "            if (method.GetParameters().Length > 0) throw new InvalidArgDefinitionException("The Main() method in type '" + o.GetType().Name + "' must not take any parameters"); " is 164.
Long Statement,PowerArgs,ObjectEx,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Extensions\Object.cs,InvokeMainMethod,The length of the statement  "            if (method.ReturnType != null && method.ReturnType != typeof(void) && method.ReturnType != typeof(Task)) throw new InvalidArgDefinitionException("The Main() method in type '" + o.GetType().Name + "' must return void or Task"); " is 226.
Long Statement,PowerArgs,ParemeterInfoEx,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Extensions\ParemeterInfo.cs,Attrs,The length of the statement  "            string cacheKey = info.Member.DeclaringType.Name + "." + info.Member.Name + parameters + " - " + info.Name + "(" + info.Position + ")"; " is 135.
Long Statement,PowerArgs,TypeEx,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Extensions\Type.cs,ValidateNoDuplicateEnumShortcuts,The length of the statement  "                    if (shortcutsSeenSoFar.Contains(shortcut)) throw new InvalidArgDefinitionException("Duplicate shortcuts defined for enum type '" + enumType.Name + "'"); " is 152.
Long Statement,PowerArgs,TypeEx,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Extensions\Type.cs,TryCreate,The length of the statement  "                if (t != acceptableType && t.GetInterfaces().Contains(acceptableType) == false && t.IsSubclassOf(acceptableType) == false) " is 122.
Long Statement,PowerArgs,TypeEx,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Extensions\Type.cs,TryCreate,The length of the statement  "                throw new InvalidArgDefinitionException("Type does not implement any of the following types - " + acceptableTypeList + ": " + t.FullName); " is 138.
Long Statement,PowerArgs,ActionAndArgumentSmartTabCompletionSource,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\ActionAndArgumentSmartTabCompletionSource.cs,TryComplete,The length of the statement  "                globalArgumentSource = new SimpleTabCompletionSource(FindGlobalArguments(context.Definition)) { MinCharsBeforeCyclingBegins = 0 }; " is 130.
Long Statement,PowerArgs,ActionAndArgumentSmartTabCompletionSource,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\ActionAndArgumentSmartTabCompletionSource.cs,TryComplete,The length of the statement  "            // if there is an action in context and not argument in context then try to complete action specific argument names and then globals " is 132.
Long Statement,PowerArgs,ArgParser,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\ArgParser.cs,Parse,The length of the statement  "                    if (result.ExplicitParameters.ContainsKey(param.Key)) throw new DuplicateArgException("Argument specified more than once: " + param.Key); " is 137.
Long Statement,PowerArgs,ArgParser,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\ArgParser.cs,Parse,The length of the statement  "                        bool isArrayOrList = potentialListArgument.ArgumentType.IsArray || potentialListArgument.ArgumentType.GetInterfaces().Contains(typeof(IList)); " is 142.
Long Statement,PowerArgs,ArgParser,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\ArgParser.cs,IsBool,The length of the statement  "                var possibleActionContext = resultContext.ImplicitParameters.ContainsKey(0) ? resultContext.ImplicitParameters[0] : null; " is 121.
Long Statement,PowerArgs,ArgParser,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\ArgParser.cs,IsArrayOrList,The length of the statement  "                var possibleActionContext = resultContext.ImplicitParameters.ContainsKey(0) ? resultContext.ImplicitParameters[0] : null; " is 121.
Long Statement,PowerArgs,ArgRevivers,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\ArgRevivers.cs,ReviveEnum,The length of the statement  "                        throw new ValidationArgException(enumValue + " is not a valid value for type " + t.Name + "' options are " + string.Join("' "' Enum.GetNames(t))); " is 146.
Long Statement,PowerArgs,ArgRevivers,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\ArgRevivers.cs,ReviveEnum,The length of the statement  "                    throw new ValidationArgException(value + " is not a valid value for type " + t.Name + "' options are " + string.Join("' "' Enum.GetNames(t))); " is 142.
Long Statement,PowerArgs,ArgRevivers,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\ArgRevivers.cs,Revive,The length of the statement  "                var list = t.GetInterfaces().Contains(typeof(IList)) && t.IsArray == false ? (IList)ObjectFactory.CreateInstance(t) : new List<object>(); " is 137.
Long Statement,PowerArgs,ArgRevivers,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\ArgRevivers.cs,Revive,The length of the statement  "                   ArgHook.HookContext.Current.ParserData.TryGetAndRemoveAdditionalExplicitParameters(ArgHook.HookContext.Current.CurrentArgument' out additionalParams)) " is 150.
Long Statement,PowerArgs,ArgRevivers,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\ArgRevivers.cs,Revive,The length of the statement  "                throw new ArgumentException("Cannot revive type " + t.FullName + ". Callers should be calling CanRevive before calling Revive()"); " is 130.
Long Statement,PowerArgs,ArgRevivers,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\ArgRevivers.cs,LoadDefaultRevivers,The length of the statement  "                return val != null && val.ToLower().ToString() != "false" && val != "0"; // null means the switch value was not specified.  If it was specified then it's automatically true " is 172.
Long Statement,PowerArgs,ArgRevivers,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\ArgRevivers.cs,LoadDefaultRevivers,The length of the statement  "				if (System.Net.IPAddress.TryParse(val' out ret) == false) throw new FormatException("value must be a valid IP address: " + val); " is 128.
Long Statement,PowerArgs,AttrOverride,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\AttrOverride.cs,Get,The length of the statement  "                throw new InvalidArgDefinitionException(string.Format("The property '{0}' has been manually set' and the manual override value of '{2}' conflicts with the value '{3}' retrieved from attribute '{1}'"' hostingType.Name + "." + propertyName' typeof(T1).Name' overrideVal' attributeVal)); " is 284.
Long Statement,PowerArgs,AliasCollection,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\AliasCollection.cs,Clear,The length of the statement  "            throw new NotSupportedException("Clear is not supported' use ClearOverrides() to clear items that have manually been added"); " is 125.
Long Statement,PowerArgs,AliasCollection,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\AliasCollection.cs,Remove,The length of the statement  "                throw new InvalidOperationException("The alias '" + item + "' was added via metadata and cannot be removed from this collection"); " is 130.
Long Statement,PowerArgs,ArgAction,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\ArgAction.cs,Invoke,The length of the statement  "            if (resolved.GetParameters().Length == 1 && resolved.GetParameters()[0].ParameterType == typeof(CommandLineArgumentsDefinition)) " is 128.
Long Statement,PowerArgs,ArgAction,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\ArgAction.cs,ResolveMethod,The length of the statement  "            if (end < 1) throw new InvalidArgDefinitionException("Could not resolve action method from property name: " + actionProperty.Name); " is 131.
Long Statement,PowerArgs,ArgAction,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\ArgAction.cs,ResolveMethod,The length of the statement  "            if (method.IsStatic == false && actionType != t) throw new InvalidArgDefinitionException("PowerArg action methods must be static if defined via the ArgActionType attribute"); " is 174.
Long Statement,PowerArgs,ArgAction,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\ArgAction.cs,ResolveMethod,The length of the statement  "                if (method.GetParameters().Length != 1) throw new InvalidArgDefinitionException("PowerArg action methods must take one parameter that matches the property type for the attribute"); " is 180.
Long Statement,PowerArgs,ArgAction,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\ArgAction.cs,ResolveMethod,The length of the statement  "                if (method.GetParameters()[0].ParameterType != actionProperty.PropertyType) throw new InvalidArgDefinitionException(string.Format("Argument of type '{0}' does not match expected type '{1}'"' method.GetParameters()[0].ParameterType.Name' actionProperty.PropertyType.Name)); " is 272.
Long Statement,PowerArgs,ArgumentAwareTabCompletionSource,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\ArgumentAwareTabCompletionSource.cs,TryComplete,The length of the statement  "            throw new NotImplementedException("Since this class implements ITabCompletionSourceWithContext it is expected that the other TryComplete will be called."); " is 155.
Long Statement,PowerArgs,BooleanExpressionParser,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\BooleanExpressionParser.cs,BuildTree,The length of the statement  "                    (defaultGroup.Operands.Count == 0 && (token.Type == BooleanExpressionTokenType.And || token.Type == BooleanExpressionTokenType.Or)) || " is 134.
Long Statement,PowerArgs,BooleanExpressionParser,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\BooleanExpressionParser.cs,BuildTree,The length of the statement  "                    (i == tokens.Count - 1 && (token.Type == BooleanExpressionTokenType.And || token.Type == BooleanExpressionTokenType.Or))) " is 121.
Long Statement,PowerArgs,BooleanExpressionParser,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\BooleanExpressionParser.cs,Tokenize,The length of the statement  "            List<string> delimiters = (from val in Enum.GetValues(typeof(BooleanExpressionTokenType)).ToList<BooleanExpressionTokenType>() " is 126.
Long Statement,PowerArgs,ConsoleString,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\ConsoleString.cs,Replace,The length of the statement  "                ret.characters.InsertRange(currentIndex' toReplace.Select(c => new ConsoleCharacter(c' foregroundColor' backgroundColor))); " is 123.
Long Statement,PowerArgs,ConsoleString,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\ConsoleString.cs,Highlight,The length of the statement  "                ret.characters.InsertRange(currentIndex' replacement.Select(c => new ConsoleCharacter(c' foregroundColor' backgroundColor))); " is 125.
Long Statement,PowerArgs,ConsoleString,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\ConsoleString.cs,Write,The length of the statement  "                ConsoleColor existingForeground = ConsoleProvider.ForegroundColor' existingBackground = ConsoleProvider.BackgroundColor; " is 120.
Long Statement,PowerArgs,ConsoleTableBuilder,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\ConsoleTableBuilder.cs,DetermineColumnWidths,The length of the statement  "                    ret[i] = (context.OverflowBehaviors[i] as TruncateOverflowBehavior).ColumnWidth + (context.OverflowBehaviors[i] as TruncateOverflowBehavior).TruncationText.Length; " is 163.
Long Statement,PowerArgs,ConsoleTableBuilder,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\ConsoleTableBuilder.cs,DetermineColumnWidths,The length of the statement  "                            throw new InvalidOperationException("DefineMaxWidthBasedOnConsoleWidth can only be set to true for the last column in a table"); " is 128.
Long Statement,PowerArgs,ConsoleTableBuilder,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\ConsoleTableBuilder.cs,DetermineColumnWidths,The length of the statement  "                        (context.OverflowBehaviors[i] as SmartWrapOverflowBehavior).MaxWidthBeforeWrapping = ConsoleProvider.Current.BufferWidth - left - context.Gutter; // The Gutter is so newlines don't get double rendered on the console " is 215.
Long Statement,PowerArgs,ConsoleTableBuilder,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\ConsoleTableBuilder.cs,DetermineColumnWidths,The length of the statement  "                    throw new NotSupportedException("Unsupported overflow behavior: '" + context.OverflowBehaviors[i].GetType().FullName + "'"); " is 124.
Long Statement,PowerArgs,ConsoleTableBuilder,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\ConsoleTableBuilder.cs,AddCellToTable,The length of the statement  "                throw new NotSupportedException("Unsupported overflow behavior: '" + context.OverflowBehaviors[colIndex].GetType().FullName + "'"); " is 131.
Long Statement,PowerArgs,ConsoleTableBuilder,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\ConsoleTableBuilder.cs,AddColumnHeadersToTable,The length of the statement  "                    throw new NotSupportedException("Unsupported overflow behavior: '" + context.OverflowBehaviors[colIndex].GetType().FullName + "'"); " is 131.
Long Statement,PowerArgs,ConsoleTableBuilder,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\ConsoleTableBuilder.cs,ValidateInputs,The length of the statement  "                throw new ArgumentOutOfRangeException("If 'columnOverflowBehaviors' is specified then it must contain the same number of items as 'columns'"); " is 142.
Long Statement,PowerArgs,UsageTemplateProvider,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\IUsageTemplateProvider.cs,GetUsage,The length of the statement  "                throw new InvalidArgDefinitionException("The UsageTemplateProviderType "+usageTemplateProviderType.FullName+" does not implement " + typeof(IUsageTemplateProvider).Name); " is 170.
Long Statement,PowerArgs,SimpleTabCompletionSource,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\SimpleTabCompletionSource.cs,TryComplete,The length of the statement  "                return (from c in CandidateFunction() where c.StartsWith(soFar' ignoreCase' CultureInfo.CurrentCulture) select c).ToList(); " is 123.
Long Statement,PowerArgs,HookContext,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Hooks\ArgHook.cs,RunHook,The length of the statement  "                    foreach (var property in Definition.ArgumentScaffoldType.GetProperties(BindingFlags.Public | BindingFlags.Instance).Where(p => seen.Contains(p) == false)) " is 154.
Long Statement,PowerArgs,HelpHook,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Hooks\HelpHook.cs,BeforePopulateProperty,The length of the statement  "                throw new InvalidArgDefinitionException(typeof(HelpHook).Name +" attributes can only be used with boolean properties or parameters"); " is 133.
Long Statement,PowerArgs,ArgumentAwareTabCompletionAttribute,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Hooks\TabCompletion.cs,CreateTabCompletionSource,The length of the statement  "                throw new InvalidArgDefinitionException("The type " + this.CompletionSourceType.FullName + " does not implement ITabCompletionSource or ITabCompletionSource.  The target argument was " + argument.DefaultAlias); " is 210.
Long Statement,PowerArgs,TabCompletion,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Hooks\TabCompletion.cs,BeforeParse,The length of the statement  "                throw new InvalidArgDefinitionException("Type does not implement ITabCompletionSource or ISmartTabCompletionSource: " + CompletionSourceType.FullName); " is 151.
Long Statement,PowerArgs,TabCompletion,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Hooks\TabCompletion.cs,BeforeParse,The length of the statement  "            if (REPL && newCommandLineArray.Length == 1 && string.Equals(newCommandLineArray[0]' REPLExitIndicator' StringComparison.OrdinalIgnoreCase)) " is 140.
Long Statement,PowerArgs,ArgLongForm,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Metadata\ArgShortcut.cs,Clean,The length of the statement  "            else if (value.StartsWith("-")) throw new InvalidArgDefinitionException("Long form shortcuts cannot start with a single dash"); " is 127.
Long Statement,PowerArgs,DocumentExpressionParser,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\DocumentExpressionParser.cs,RegisterDynamicReplacementExpressionProviders,The length of the statement  "            var providerTypes = from type in target.GetTypes() where type.GetInterfaces().Contains(typeof(IDocumentExpressionProvider)) && type.HasAttr<DynamicExpressionProviderAttribute>() select type; " is 190.
Long Statement,PowerArgs,DocumentExpressionParser,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\DocumentExpressionParser.cs,RegisterReplacementExpressionProvider,The length of the statement  "                    throw new ArgumentException("A replacement expression provider withe key '" + replacementKey + "' already exists.  Use the allowOverrideExistingKeys flag to allow overriding the key"); " is 184.
Long Statement,PowerArgs,DocumentExpressionParser,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\DocumentExpressionParser.cs,ParseReplacement,The length of the statement  "            var replacementKeyToken = AdvanceAndExpect(reader' DocumentTokenType.ReplacementKey' "replacement key"' skipWhitespace: true); " is 126.
Long Statement,PowerArgs,DocumentExpressionParser,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\DocumentExpressionParser.cs,ParseReplacement,The length of the statement  "            while (reader.CanAdvance(skipWhitespace: true) && reader.Peek(skipWhitespace: true).TokenType == DocumentTokenType.ReplacementParameter) " is 136.
Long Statement,PowerArgs,DocumentExpressionParser,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\DocumentExpressionParser.cs,ParseReplacement,The length of the statement  "                throw Unexpected(string.Format("'{0}' or '{1}'"' DocumentToken.GetTokenTypeValue(DocumentTokenType.EndReplacementSegment)' DocumentToken.GetTokenTypeValue(DocumentTokenType.QuickTerminateReplacementSegment))); " is 209.
Long Statement,PowerArgs,DocumentExpressionParser,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\DocumentExpressionParser.cs,ParseReplacement,The length of the statement  "                throw Unexpected(string.Format("'{0}' or '{1}'"' DocumentToken.GetTokenTypeValue(DocumentTokenType.EndReplacementSegment)' DocumentToken.GetTokenTypeValue(DocumentTokenType.QuickTerminateReplacementSegment))' closeReplacementToken); " is 232.
Long Statement,PowerArgs,DocumentRendererContext,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\DocumentRendererContext.cs,RenderDynamicContent,The length of the statement  "            return this.DocumentRenderer.Render(dynamicTemplate' this' "dynamic evaluation sourced from '" + nestedToken.Position + "'"); " is 125.
Long Statement,PowerArgs,DocumentToken,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\DocumentToken.cs,TokenFactoryImpl,The length of the statement  "            else if (previousNonWhitespaceTokenType.HasValue && (previousNonWhitespaceTokenType.Value == DocumentTokenType.BeginReplacementSegment || previousNonWhitespaceTokenType.Value == DocumentTokenType.BeginTerminateReplacementSegment)) " is 230.
Long Statement,PowerArgs,DocumentToken,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\DocumentToken.cs,TokenFactoryImpl,The length of the statement  "            else if (previousNonWhitespaceTokenType.HasValue && (previousNonWhitespaceTokenType.Value == DocumentTokenType.ReplacementKey || previousNonWhitespaceTokenType.Value == DocumentTokenType.ReplacementParameter)) " is 209.
Long Statement,PowerArgs,EachExpression,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\EachExpression.cs,Evaluate,The length of the statement  "                throw new DocumentRenderException("'" + this.CollectionVariableExpressionToken.Value + "' resolved to a null reference"' this.CollectionVariableExpressionToken); " is 161.
Long Statement,PowerArgs,EachExpression,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\EachExpression.cs,Evaluate,The length of the statement  "                throw new DocumentRenderException("'" + this.CollectionVariableExpressionToken.Value + "' does not resolve to a collection"' this.CollectionVariableExpressionToken); " is 165.
Long Statement,PowerArgs,EvalExpression,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\EvalExpression.cs,Evaluate,The length of the statement  "                        return new ConsoleString(eval as string' context.LocalVariables.CurrentForegroundColor' context.LocalVariables.CurrentBackgroundColor); " is 135.
Long Statement,PowerArgs,LocalVariableSet,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\LocalVariableSet.cs,Add,The length of the statement  "                throw new ArgumentException("There is already a variable called '" + variableToken.Value + "' at " + variableToken.Position); " is 125.
Long Statement,PowerArgs,LocalVariableSet,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\LocalVariableSet.cs,Remove,The length of the statement  "                throw new ArgumentException("There is no variable to remove called '" + variableToken.Value + "' at " + variableToken.Position); " is 128.
Long Statement,PowerArgs,ObjectPathExpression,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\ObjectPathExpression.cs,Parse,The length of the statement  "                    if (currentToken.TokenType != ObjectPathTokenType.Identifier && currentToken.TokenType != ObjectPathTokenType.StringLiteral) " is 124.
Long Statement,PowerArgs,ObjectPathExpression,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\ObjectPathExpression.cs,Parse,The length of the statement  "                    if (reader.TryAdvance(out currentToken' skipWhitespace: true) == false) throw new FormatException("Expected ']'' got end of string"); " is 133.
Long Statement,PowerArgs,ObjectPathExpression,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\ObjectPathExpression.cs,Parse,The length of the statement  "                    if (currentToken.TokenType != ObjectPathTokenType.IndexerClose) throw new FormatException("Expected ']'' got '" + currentToken.Value + "' at " + currentToken.Position); " is 168.
Long Statement,PowerArgs,ObjectPathExpression,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\ObjectPathExpression.cs,Parse,The length of the statement  "                    throw new ArgumentException("Expected property name or indexer' got '" + currentToken.Value + "' at " + currentToken.Position); " is 127.
Long Statement,PowerArgs,ObjectPathExpression,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\ObjectPathExpression.cs,EvaluateAndTraceInfo,The length of the statement  "                    if (propInfo == null) throw new InvalidOperationException("Type " + currentObject.GetType().Name + " does not have a property called " + propEl.PropertyName); " is 158.
Long Statement,PowerArgs,ObjectPathExpression,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\ObjectPathExpression.cs,EvaluateAndTraceInfo,The length of the statement  "                            throw new InvalidOperationException("Type " + currentObject.GetType().Name + " does not have a supported indexer property of type " + collectionEl.Index.GetType()); " is 164.
Long Statement,PowerArgs,TableExpression,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\TableExpression.cs,Evaluate,The length of the statement  "                    var propToGet = element.GetType().GetProperty(propName' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic); " is 180.
Long Statement,PowerArgs,TableExpression,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\TableExpression.cs,Evaluate,The length of the statement  "                    if (propToGet == null) throw new DocumentRenderException("'" + propName + "' is not a valid property for type '" + element.GetType().FullName + "'"' col); " is 154.
Long Statement,PowerArgs,TableExpression,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\TableExpression.cs,Evaluate,The length of the statement  "                        if (ShowDefaultValuesForArguments && element is CommandLineArgument && propToGet.Name == "Description" && ((CommandLineArgument)element).DefaultValue != null) " is 158.
Long Statement,PowerArgs,TableExpression,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\TableExpression.cs,Evaluate,The length of the statement  "                            valueString+= new ConsoleString(" [Default='" + ((CommandLineArgument)element).DefaultValue.ToString() + "'] "' ConsoleColor.DarkGreen); " is 136.
Long Statement,PowerArgs,TableExpressionProvider,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\TableExpression.cs,CreateExpression,The length of the statement  "                throw new DocumentRenderException("table elements need to have at least one column parameter"' context.ReplacementKeyToken); " is 124.
Long Statement,PowerArgs,TableExpressionProvider,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\TableExpression.cs,CreateExpression,The length of the statement  "            return new TableExpression(variableExpressionToken' columns' context) { ShowDefaultValuesForArguments = showDefaults' ShowPossibleValuesForArguments = showPossibilities }; " is 171.
Long Statement,PowerArgs,Tokenizer<T>,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\Tokenizer.cs,Tokenize,The length of the statement  "                    Tokenize_Whitespace(input' ref currentIndex' ref currentCharacter' ref currentLine' ref currentColumn' ref currentToken' tokens); " is 129.
Long Statement,PowerArgs,Tokenizer<T>,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\Tokenizer.cs,Tokenize,The length of the statement  "                    Tokenize_EscapeCharacter(input' ref currentIndex' ref currentCharacter' ref currentLine' ref currentColumn' ref currentToken' tokens); " is 134.
Long Statement,PowerArgs,Tokenizer<T>,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\Tokenizer.cs,Tokenize,The length of the statement  "                    Tokenize_Plain(input' ref currentIndex' ref currentCharacter' ref currentLine' ref currentColumn' ref currentToken' tokens); " is 124.
Long Statement,PowerArgs,Tokenizer<T>,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\Tokenizer.cs,Tokenize,The length of the statement  "                    Tokenize_DelimiterCharacter(input' ref currentIndex' ref currentCharacter' ref currentLine' ref currentColumn' ref currentToken' tokens); " is 137.
Long Statement,PowerArgs,Tokenizer<T>,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\Tokenizer.cs,Tokenize,The length of the statement  "                    Tokenize_Whitespace(input' ref currentIndex' ref currentCharacter' ref currentLine' ref currentColumn' ref currentToken' tokens); " is 129.
Long Statement,PowerArgs,Tokenizer<T>,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\Tokenizer.cs,Tokenize,The length of the statement  "                    Tokenize_Plain(input' ref currentIndex' ref currentCharacter' ref currentLine' ref currentColumn' ref currentToken' tokens); " is 124.
Long Statement,PowerArgs,Tokenizer<T>,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\Tokenizer.cs,Tokenize_Plain,The length of the statement  "                            currentToken = CreateTokenForTokenizer(delimiter' prevToken.StartIndex + prevToken.Value.Length' prevToken.Line' prevToken.Column + prevToken.Value.Length); " is 156.
Long Statement,PowerArgs,ArgCantBeCombinedWith,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Validators\ArgCantBeCombinedWith.cs,IsCurrentArgumentAllowed,The length of the statement  "                throw new InvalidArgDefinitionException("The " + GetType().Name + " metadata must be applied to a particular argument"); " is 120.
Long Statement,PowerArgs,ArgCantBeCombinedWith,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Validators\ArgCantBeCombinedWith.cs,IsCurrentArgumentAllowed,The length of the statement  "                throw new InvalidArgDefinitionException("Failed to evaluate conditional " + GetType().Name + " clause on target '" + targetText + "' - " + ex.Message); " is 151.
Long Statement,PowerArgs,ArgCantBeCombinedWith,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Validators\ArgCantBeCombinedWith.cs,AfterPopulateProperties,The length of the statement  "                throw new UnexpectedArgException("The argument '" + context.CurrentArgument.DefaultAlias + "' cannot be used with one or more arguments: " + ExpressionText); " is 157.
Long Statement,PowerArgs,ArgRange,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Validators\ArgRange.cs,Validate,The length of the statement  "                    throw new ValidationArgException(name + " must be at least " + min + "' but not greater than " + max' new ArgumentOutOfRangeException()); " is 137.
Long Statement,PowerArgs,ArgRange,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Validators\ArgRange.cs,Validate,The length of the statement  "                    throw new ValidationArgException(name + " must be at least " + min + "' and less than " + max' new ArgumentOutOfRangeException()); " is 130.
Long Statement,PowerArgs,ArgRequired,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Validators\ArgRequired.cs,ValidateAlways,The length of the statement  "                var matchingHook = (from h in argument.Metadata.Metas<ArgRequiredConditionalHook>() where h.parent == this select h).SingleOrDefault(); " is 135.
Long Statement,PowerArgs,ArgRequired,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Validators\ArgRequired.cs,ValidateAlways,The length of the statement  "            if (IsConditionallyRequired == false && arg == null && PromptIfMissing && ArgHook.HookContext.Current.Definition.IsNonInteractive == false) " is 139.
Long Statement,PowerArgs,ArgRequired,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Validators\ArgRequired.cs,ValidateAlways,The length of the statement  "                        // if this is an interactive REPL then continue the REPL in this case as the user may have changed their mind about taking " is 122.
Long Statement,PowerArgs,ArgRequired,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Validators\ArgRequired.cs,ValidateAlways,The length of the statement  "                        throw new MissingArgException("The argument '" + argument.DefaultAlias + "' is required"' new ArgumentNullException(argument.DefaultAlias)); " is 140.
Long Statement,PowerArgs,ArgRequired,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Validators\ArgRequired.cs,ValidateAlways,The length of the statement  "                throw new MissingArgException("The argument '" + argument.DefaultAlias + "' is required"' new ArgumentNullException(argument.DefaultAlias)); " is 140.
Long Statement,PowerArgs,ArgRequiredConditionalHook,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Validators\ArgRequired.cs,AfterPopulateProperties,The length of the statement  "                throw new InvalidArgDefinitionException("You cannot specify both the 'If' and the 'IfNot' properties on the ArgRequired metadata"); " is 131.
Long Statement,PowerArgs,ArgRequiredConditionalHook,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Validators\ArgRequired.cs,AfterPopulateProperties,The length of the statement  "                throw new InvalidOperationException("ArgRequired could not determine if the given argument was required.  This is likely a bug in PowerArgs."); " is 143.
Long Statement,PowerArgs,ArgRequiredConditionalHook,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Validators\ArgRequired.cs,Evaluate,The length of the statement  "                            throw new MissingArgException("The argument '" + context.CurrentArgument.DefaultAlias + "' is required if the following argument(s) are not specified: " + expressionText); " is 171.
Long Statement,PowerArgs,ArgRequiredConditionalHook,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Validators\ArgRequired.cs,Evaluate,The length of the statement  "                            throw new MissingArgException("The argument '" + context.CurrentArgument.DefaultAlias + "' is required if the following argument(s) are specified: " + expressionText); " is 167.
Long Statement,PowerArgs,ArgRequiredConditionalHook,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Validators\ArgRequired.cs,Evaluate,The length of the statement  "                throw new InvalidArgDefinitionException("Failed to evaluate conditional ArgRequired clause on target '" + targetText + "'" + ex.Message); " is 137.
Long Statement,PowerArgs,ArgRequiredConditionalHook,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Validators\ArgRequired.cs,TryPreventExceptionWithPrompt,The length of the statement  "                        // if this is an interactive REPL then continue the REPL in this case as the user may have changed their mind about taking " is 122.
Long Statement,PowerArgs,ArgRequiredConditionalHook,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Validators\ArgRequired.cs,TryPreventExceptionWithPrompt,The length of the statement  "                        throw new MissingArgException("The argument '" + context.CurrentArgument.DefaultAlias + "' is required"' new ArgumentNullException(context.CurrentArgument.DefaultAlias)); " is 170.
Long Statement,PowerArgs.Cli,ConsoleApp,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\ConsoleApp.cs,ControlAddedToVisualTree,The length of the statement  "                childPanel.Controls.SynchronizeForLifetime((cp) => { ControlAddedToVisualTree(cp); }' (cp) => { ControlRemovedFromVisualTree(cp); }' () => { }' c.LifetimeManager); " is 163.
Long Statement,PowerArgs.Cli,Border,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Border.cs,OnPaint,The length of the statement  "            // painted then it's likely that I fixed the other bug and this this.Height - 3 needs to be changed to a this.Height - 2. " is 121.
Long Statement,PowerArgs.Cli,BreadcrumbBar,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\BreadcrumbBar.cs,Compose,The length of the statement  "                    var label = Add(new Label() { Mode = LabelRenderMode.SingleLineAutoSize' Text = "->".ToConsoleString(Theme.DefaultTheme.H1Color) }); " is 132.
Long Statement,PowerArgs.Cli,Button,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Button.cs,RegisterShortcutIfPossibleAndNotAlreadyDone,The length of the statement  "                Application.FocusManager.GlobalKeyHandlers.PushForLifetime(Shortcut.Key' Shortcut.Modifier' Click' this.LifetimeManager); " is 121.
Long Statement,PowerArgs.Cli,Button,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Button.cs,OnPaint,The length of the statement  "            drawState = "[".ToConsoleString(CanFocus ? Application.Theme.H1Color : Application.Theme.DisabledColor' Background = Background); " is 129.
Long Statement,PowerArgs.Cli,Button,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Button.cs,OnPaint,The length of the statement  "                        drawState += new ConsoleString($" (ALT+{Shortcut.Key})"' CanFocus ? Application.Theme.H1Color : Application.Theme.DisabledColor); " is 129.
Long Statement,PowerArgs.Cli,Button,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Button.cs,OnPaint,The length of the statement  "                        drawState += new ConsoleString($" (SHIFT+{Shortcut.Key})"' CanFocus ? Application.Theme.H1Color : Application.Theme.DisabledColor); " is 131.
Long Statement,PowerArgs.Cli,Button,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Button.cs,OnPaint,The length of the statement  "                        drawState += new ConsoleString($" (CTL+{Shortcut.Key})"' CanFocus ? Application.Theme.H1Color : Application.Theme.DisabledColor); " is 129.
Long Statement,PowerArgs.Cli,Button,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Button.cs,OnPaint,The length of the statement  "                        drawState += new ConsoleString($" ({Shortcut.Key})"' CanFocus ? Application.Theme.H1Color : Application.Theme.DisabledColor); " is 125.
Long Statement,PowerArgs.Cli,ConsoleControl,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\ConsoleControl.cs,CalculateRelativePosition,The length of the statement  "                    throw new InvalidOperationException("Controls within scrollable panels cannot have their relative positions calculated"); " is 121.
Long Statement,PowerArgs.Cli,Dialog,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Dialog.cs,OnPaint,The length of the statement  "            context.Pen = new ConsoleCharacter(' '' null' myFocusStackDepth == Application.FocusManager.StackDepth ? Theme.DefaultTheme.H1Color : Theme.DefaultTheme.DisabledColor); " is 168.
Long Statement,PowerArgs.Cli,Dialog,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Dialog.cs,ConfirmYesOrNo,The length of the statement  "            }' true' maxHeight' new DialogButton() { Id = "y"' DisplayText = "Yes".ToConsoleString()' }' new DialogButton() { Id = "n"' DisplayText = "No".ToConsoleString() }); " is 164.
Long Statement,PowerArgs.Cli,Dialog,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Dialog.cs,ShowMessage,The length of the statement  "            Label messageLabel = messagePanel.ScrollableContent.Add(new Label() { Mode = LabelRenderMode.MultiLineSmartWrap' Text = message }).FillHoriontally(padding: new Thickness(3'3'0'0) ); " is 181.
Long Statement,PowerArgs.Cli,Dialog,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Dialog.cs,ShowMessage,The length of the statement  "            StackPanel buttonPanel = dialogContent.Add(new StackPanel() { Margin = 1' Height = 1' Orientation = Orientation.Horizontal }).FillHoriontally(padding: new Thickness(1'0'0'0)).DockToBottom(padding: 1); " is 200.
Long Statement,PowerArgs.Cli,Dialog,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Dialog.cs,Pick,The length of the statement  "            optionsGrid.VisibleColumns.Remove(optionsGrid.VisibleColumns.Where(v => v.ColumnName.ToString() == nameof(DialogOption.Id)).Single()); " is 134.
Long Statement,PowerArgs.Cli,Dialog,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Dialog.cs,ShowMessage,The length of the statement  "            ShowMessage(message' (b) => { if (doneCallback != null) doneCallback(); }'true'maxHeight' new DialogButton() { DisplayText = "ok".ToConsoleString() }); " is 151.
Long Statement,PowerArgs.Cli,Grid,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Grid-View.cs,PaintInternal,The length of the statement  "                    (header.OverflowBehavior as TruncateOverflowBehavior).ColumnWidth = (header.OverflowBehavior as TruncateOverflowBehavior).ColumnWidth == 0 ? colWidth : (header.OverflowBehavior as TruncateOverflowBehavior).ColumnWidth; " is 218.
Long Statement,PowerArgs.Cli,Grid,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Grid-View.cs,PaintInternal,The length of the statement  "                    var displayValue = value == null ? "<null>".ToConsoleString() : (value is ConsoleString ? (ConsoleString)value : value.ToString().ToConsoleString()); " is 149.
Long Statement,PowerArgs.Cli,Grid,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Grid-View.cs,PaintInternal,The length of the statement  "                        if (this.SelectionMode == GridSelectionMode.Row || (this.SelectionMode == GridSelectionMode.Cell && columnIndex == selectedColumnIndex)) " is 136.
Long Statement,PowerArgs.Cli,Grid,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Grid-View.cs,PaintInternal,The length of the statement  "                            displayValue = new ConsoleString(displayValue.ToString()' this.Background' HasFocus ? Application.Theme.FocusColor : Application.Theme.SelectedUnfocusedColor); " is 159.
Long Statement,PowerArgs.Cli,Grid,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Grid-View.cs,PaintInternal,The length of the statement  "                table = table.Highlight(FilterText' Application.Theme.HighlightContrastColor' Application.Theme.HighlightColor' StringComparison.InvariantCultureIgnoreCase); " is 157.
Long Statement,PowerArgs.Cli,Label,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Label.cs,OnPaint,The length of the statement  "                    context.Pen = HasFocus ? new ConsoleCharacter(line[x].Value' Application.Theme.FocusContrastColor' Application.Theme.FocusColor) : line[x]; " is 139.
Long Statement,PowerArgs.Cli,LineChart,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\LineChart.cs,OnAddedToVisualTree,The length of the statement  "            XAxisValueCompactFormatter = XAxisValueCompactFormatter ?? ((d) => {return new ConsoleString(string.Format("{0:0'0.0}"'d)'Foreground' Background);}); " is 149.
Long Statement,PowerArgs.Cli,LineChart,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\LineChart.cs,OnAddedToVisualTree,The length of the statement  "            YAxisValueCompactFormatter = YAxisValueCompactFormatter ?? ((d) => { return new ConsoleString("" + string.Format("{0:0'0.0}"'d)' Foreground' Background); }); " is 157.
Long Statement,PowerArgs.Cli,LineChart,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\LineChart.cs,OnAddedToVisualTree,The length of the statement  "            XAxisValueFormatter = XAxisValueFormatter ?? ((d) => { return new ConsoleString(string.Format("{0:0'0.0}"' d)' Foreground' Background); }); " is 139.
Long Statement,PowerArgs.Cli,LineChart,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\LineChart.cs,OnAddedToVisualTree,The length of the statement  "            YAxisValueFormatter = YAxisValueFormatter ?? ((d) => { return new ConsoleString("" + string.Format("{0:0'0.0}"' d)' Foreground' Background); }); " is 144.
Long Statement,PowerArgs.Cli,LineChart,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\LineChart.cs,RenderTitle,The length of the statement  "                if (HasFocus && ViewModel.FocusedDataPointIndex >= 0 && ViewModel.FocusedDataPointIndex < series.DataPoints.Count && ViewModel.FocusedDataSeries == series) " is 155.
Long Statement,PowerArgs.Cli,LineChart,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\LineChart.cs,RenderDataPoints,The length of the statement  "                    RenderDataPoint(context' series' dataPoint' i == ViewModel.FocusedDataPointIndex && series == ViewModel.FocusedDataSeries && HasFocus); " is 135.
Long Statement,PowerArgs.Cli,NotificationButton,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\NotificationButton.cs,Manager_ProgressOperationsChanged,The length of the statement  "                launcher.Text = (""+numberOfOperations+ (numberOfOperations == 1 ? " notification" : " notifications")).ToConsoleString(); " is 122.
Long Statement,PowerArgs.Cli,NotificationButton,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\NotificationButton.cs,Manager_ProgressOperationsChanged,The length of the statement  "                launcher.Text = (" "+numberOfOperations+ (numberOfOperations == 1 ? " notification" : " notifications")).ToConsoleString(); " is 123.
Long Statement,PowerArgs.Cli,ProgressOperationManagerControl,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\ProgressOperationManagerControl.cs,Operations_Added,The length of the statement  "            operationsStackPanel.Controls.Insert(0' new ProgressOperationControl(manager' operation).FillHoriontally(operationsStackPanel)); " is 128.
Long Statement,PowerArgs.Cli,ScrollablePanel,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\ScrollablePanel.cs,OnAddedToVisualTree,The length of the statement  "            ScrollableContent.Controls.SynchronizeForLifetime(ScrollableControls_Added' (c)=> { }' () => { }' this.LifetimeManager); " is 120.
Long Statement,PowerArgs.Cli,ScrollablePanel,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\ScrollablePanel.cs,UpdateScrollbars,The length of the statement  "                VerticalScrollUnits = 0; // dangerous because if the observable is ever changed to notify on equal changes then this will cause a stack overflow " is 144.
Long Statement,PowerArgs.Cli,ScrollablePanel,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\ScrollablePanel.cs,UpdateScrollbars,The length of the statement  "                HorizontalScrollUnits = 0; // dangerous because if the observable is ever changed to notify on equal changes then this will cause a stack overflow " is 146.
Long Statement,PowerArgs.Cli,Scrollbar,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\ScrollablePanel.cs,OnKeyInputReceived,The length of the statement  "                    int downAmount = Math.Min(ScrollablePanel.Height' ScrollablePanel.ScrollableContentSize.Height - ScrollablePanel.VerticalScrollUnits - ScrollablePanel.Height); " is 159.
Long Statement,PowerArgs.Cli,Scrollbar,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\ScrollablePanel.cs,OnKeyInputReceived,The length of the statement  "                    int rightAmount = Math.Min(ScrollablePanel.Width' ScrollablePanel.ScrollableContentSize.Width - ScrollablePanel.HorizontalScrollUnits - ScrollablePanel.Width); " is 159.
Long Statement,PowerArgs.Cli,TextBox,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\TextBox.cs,TextValueChanged,The length of the statement  "                backspaceNavigationOptimizationTimerHandle = Application.SetTimeout(()=> { enableBackspaceNavigationOptimization = true; }' TimeSpan.FromSeconds(1)); " is 149.
Long Statement,PowerArgs.Cli,LineChartViewModel,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\ViewModels\LineChartViewModel.cs,DataPointRemoved,The length of the statement  "            if(FocusedDataSeriesIndex >= 0 && FocusedDataPointIndex >= 0 && FocusedDataPointIndex >= FocusedDataSeries.DataPoints.Count) " is 124.
Long Statement,PowerArgs.Cli,LoadMoreDataSource,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Data\LoadMoreDataSource.cs,GetDataView,The length of the statement  "                    return new CollectionDataView(new List<object>()' HasAllDataBeenLoaded(query)' HasAllDataBeenLoaded(query)' query.Skip); " is 120.
Long Statement,PowerArgs.Cli,MemoryDataSource,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Data\MemoryDataSource.cs,GetDataView,The length of the statement  "                        results = (results as IOrderedEnumerable<object>).ThenByDescending(item => item?.GetType().GetProperty(orderBy.Value).GetValue(item)); " is 134.
Long Statement,PowerArgs.Cli,MemoryDataSource,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Data\MemoryDataSource.cs,GetDataView,The length of the statement  "                        results = (results as IOrderedEnumerable<object>).ThenBy(item => item?.GetType().GetProperty(orderBy.Value).GetValue(item)); " is 124.
Long Statement,PowerArgs.Cli,MemoryDataSource,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Data\MemoryDataSource.cs,GetDataView,The length of the statement  "            return new CollectionDataView(results.ToList()' true' query.Skip + query.Take >= Items.Where(item => MatchesFilter(item' query.Filter)).Count() - 1' query.Skip); " is 161.
Long Statement,PowerArgs.Cli,ConsoleBitmapFrameSerializer,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Drawing\Recording\ConsoleBitmapFrameSerializer.cs,DeserializeFrame,The length of the statement  "                        if (match.Success == false) throw new FormatException($"Unexpected token {reader.Current.Value} at position {reader.Current.Position} "); " is 137.
Long Statement,PowerArgs.Cli,ConsoleBitmapFrameSerializer,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Drawing\Recording\ConsoleBitmapFrameSerializer.cs,DeserializeFrame,The length of the statement  "                        char? nextChar = next.Value.Length == 1 ? next.Value[0] : next.Value == "OB" ? '[' : next.Value == "CB" ? ']' : new char?(); " is 124.
Long Statement,PowerArgs.Cli,FrameRateMeter,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\FrameRateMeter.cs,AreSameSecond,The length of the statement  "            return a.Year == b.Year && a.Month == b.Month && a.Day == b.Day && a.Hour == b.Hour && a.Minute == b.Minute && a.Second == b.Second; " is 132.
Long Statement,PowerArgs.Cli,Layout,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Helpers\Layout.cs,FillHoriontally,The length of the statement  "                child.Bounds = new Rectangle(effectivePadding.Left' child.Y' parent.Width - (effectivePadding.Right+effectivePadding.Left)' child.Height); " is 138.
Long Statement,PowerArgs.Cli,Layout,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Helpers\Layout.cs,FillVertically,The length of the statement  "                child.Bounds = new Rectangle(child.X' effectivePadding.Top' child.Width' parent.Height - (effectivePadding.Top + effectivePadding.Bottom)); " is 139.
Long Statement,PowerArgs.Cli,ViewModelBinding,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Markup\MarkupParser.cs,OneWayBind,The length of the statement  "            ViewModelBinding ret = new ViewModelBinding(control' control.GetType().GetProperty(propertyName)' viewModel' observablePath' (v) => " is 131.
Long Statement,PowerArgs.Cli,MarkupParser,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Markup\MarkupParser.cs,ParseControlAttributes,The length of the statement  "                            throw new InvalidOperationException($"Property {control.GetType().FullName}.{attribute.Name} does not have a public getter and setter"); " is 136.
Long Statement,PowerArgs.Cli,ObservableObject,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Observability\ObservableObject.cs,DeepSubscribeInternal,The length of the statement  "                    if (i != pathExpression.Elements.Count - 1 && (eval.MemberInfo as PropertyInfo).PropertyType.GetInterfaces().Contains(typeof(IObservableObject)) == false) " is 154.
Long Statement,PowerArgs.Cli,Page,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\Page.cs,Load,The length of the statement  "            Application.FocusManager.GlobalKeyHandlers.PushForLifetime(ConsoleKey.Escape' null' EscapeKeyHandler' this.LifetimeManager); " is 124.
Long Statement,PowerArgs.Cli,Page,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\Page.cs,Load,The length of the statement  "            Application.FocusManager.GlobalKeyHandlers.PushForLifetime(ConsoleKey.Backspace' null' BackspaceHandler' this.LifetimeManager); " is 127.
Long Statement,PowerArgs.Cli,Page,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\Page.cs,EscapeKeyHandler,The length of the statement  "                 }' true' 10' new DialogButton() { DisplayText = "Yes".ToConsoleString() }' new DialogButton() { DisplayText = "No".ToConsoleString() }); " is 136.
Long Statement,PowerArgs.Cli,PageStack,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\PageStack.cs,RegisterRoute,The length of the statement  "                throw new FormatException("Routes must be made up of alphanumeric characters or underscores separated by '/' characters.  Segments can be surrounded with {} to represent a variable"); " is 183.
Long Statement,PowerArgs.Cli,ProgressOperationsManager,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\ProgressOperationsManager.cs,Operations_Added,The length of the statement  "            trackedOperation.SynchronizeForLifetime(AnyProperty' FireProgressOperationsChanged' Operations.GetMembershipLifetime(trackedOperation)); " is 136.
Long Statement,PowerArgs.Cli,ProgressOperationsManager,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\ProgressOperationsManager.cs,Operations_Added,The length of the statement  "            trackedOperation.SubscribeForLifetime(nameof(ProgressOperation.State)' () => { ProgressOperationStatusChanged.Fire(trackedOperation); }' Operations.GetMembershipLifetime(trackedOperation)); " is 189.
Long Statement,PowerArgs.Cli,ProgressOperation,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\ProgressOperationsManager.cs,StateChanged,The length of the statement  "            if(EndTime.HasValue == false && (State == OperationState.Completed || State == OperationState.CompletedWithWarnings || State == OperationState.Failed)) " is 151.
Long Statement,PowerArgs.Cli,PowerArgsMultiContextAssistProvider,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\PowerArgs\PowerArgsContextAssistProviders.cs,CanAssist,The length of the statement  "                targetArgument = (from a in Definition.AllGlobalAndActionArguments where a.IsMatch(candidate) select a).SingleOrDefault(); " is 122.
Long Statement,PowerArgs.Cli,EnumAssistant,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\PowerArgs\PowerArgsContextAssistProviders.cs,CanAssist,The length of the statement  "                Options.AddRange(Enum.GetNames(TargetArgument.ArgumentType).Select(name => ContextAssistSearchResult.FromString(name))); " is 120.
Long Statement,PowerArgs.Cli,PowerArgsRichCommandLineReader,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\PowerArgs\PowerArgsRichCommandLineReader.cs,InitHighlighters,The length of the statement  "                    this.Highlighter.AddKeyword("-" + alias' ArgumentNameForeground' comparison: argument.IgnoreCase ? StringComparison.InvariantCultureIgnoreCase : StringComparison.InvariantCulture); " is 180.
Long Statement,PowerArgs.Cli,PowerArgsRichCommandLineReader,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\PowerArgs\PowerArgsRichCommandLineReader.cs,InitHighlighters,The length of the statement  "                    this.Highlighter.AddConditionalKeyword(alias' (readerContext' highlighterContext) => { return highlighterContext.CurrentTokenIndex == 0; }' ActionForeground' comparison: action.IgnoreCase ? StringComparison.InvariantCultureIgnoreCase : StringComparison.InvariantCulture); " is 271.
Long Statement,PowerArgs.Cli,PowerArgsRichCommandLineReader,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\PowerArgs\PowerArgsRichCommandLineReader.cs,InitHighlighters,The length of the statement  "                        ' ArgumentNameForeground' comparison: argument.IgnoreCase ? StringComparison.InvariantCultureIgnoreCase : StringComparison.InvariantCulture); " is 141.
Long Statement,PowerArgs.Cli,PowerArgsRichCommandLineReader,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\PowerArgs\PowerArgsRichCommandLineReader.cs,TryTabComplete,The length of the statement  "                    if (((ITabCompletionSourceWithContext)completionSource).TryComplete(powerArgsContext.Shift' powerArgsContext.PreviousToken' powerArgsContext.CompletionCandidate' out completion)) " is 178.
Long Statement,PowerArgs.Cli,PowerArgsRichCommandLineReader,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\PowerArgs\PowerArgsRichCommandLineReader.cs,ConvertContext,The length of the statement  "            context.PreviousToken = innerContext.CurrentTokenIndex > 0 ? innerContext.PreviousNonWhitespaceToken.Value : string.Empty; " is 122.
Long Statement,PowerArgs.Cli,PowerArgsRichCommandLineReader,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\PowerArgs\PowerArgsRichCommandLineReader.cs,FindOldTabCompletionHooks,The length of the statement  "            if (definition.Metadata.HasMeta<TabCompletion>() && definition.Metadata.Meta<TabCompletion>().CompletionSourceType != null && definition.Metadata.Meta<TabCompletion>().CompletionSourceType.GetInterfaces().Contains(typeof(ITabCompletionSource))) " is 244.
Long Statement,PowerArgs.Cli,PowerArgsRichCommandLineReader,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\PowerArgs\PowerArgsRichCommandLineReader.cs,FindOldTabCompletionHooks,The length of the statement  "                completionSources.Add((ITabCompletionSource)ObjectFactory.CreateInstance(definition.Metadata.Meta<TabCompletion>().CompletionSourceType)); " is 138.
Long Statement,PowerArgs.Cli,PowerArgsRichCommandLineReader,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\PowerArgs\PowerArgsRichCommandLineReader.cs,FindNewTabCompletionHooks,The length of the statement  "            if (definition.Metadata.HasMeta<TabCompletion>() && definition.Metadata.Meta<TabCompletion>().CompletionSourceType != null && definition.Metadata.Meta<TabCompletion>().CompletionSourceType.GetInterfaces().Contains(typeof(ISmartTabCompletionSource))) " is 249.
Long Statement,PowerArgs.Cli,PowerArgsRichCommandLineReader,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\PowerArgs\PowerArgsRichCommandLineReader.cs,FindNewTabCompletionHooks,The length of the statement  "                completionSources.Add((ISmartTabCompletionSource)ObjectFactory.CreateInstance(definition.Metadata.Meta<TabCompletion>().CompletionSourceType)); " is 143.
Long Statement,PowerArgs.Cli,PowerArgsRichCommandLineReader,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\PowerArgs\PowerArgsRichCommandLineReader.cs,FindCurrentTokenArgument,The length of the statement  "                    currentTokenArgument = contextualAction.Arguments.Where(arg => arg.IsMatch(currentTokenArgumentNameValue)).SingleOrDefault(); " is 125.
Long Statement,PowerArgs.Cli,PowerArgsRichCommandLineReader,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\PowerArgs\PowerArgsRichCommandLineReader.cs,FindContextualArgument,The length of the statement  "                currentTokenArgument = def.Arguments.Where(arg => arg.IsMatch(currentTokenArgumentNameValue) && arg.ArgumentType != typeof(bool)).SingleOrDefault(); " is 148.
Long Statement,PowerArgs.Cli,PowerArgsRichCommandLineReader,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\PowerArgs\PowerArgsRichCommandLineReader.cs,FindContextualArgument,The length of the statement  "                    currentTokenArgument = contextualAction.Arguments.Where(arg => arg.IsMatch(currentTokenArgumentNameValue) && arg.ArgumentType != typeof(bool)).SingleOrDefault(); " is 161.
Long Statement,PowerArgs.Cli,PowerArgsRichCommandLineReader,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\PowerArgs\PowerArgsRichCommandLineReader.cs,PassThroughOrTryGetAmbientDefinition,The length of the statement  "                throw new NullReferenceException("There is no ambient CommandLineArgumentsDefinition argument and you did not pass one in explicitly"); " is 135.
Long Statement,PowerArgs.Cli,ValidationEnforcementTokenHighlighter,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\PowerArgs\PowerArgsRichCommandLineReader.cs,ShouldBeHighlighted,The length of the statement  "            if (readerContext.BufferPosition >= highlighterContext.CurrentToken.StartIndex && readerContext.BufferPosition < highlighterContext.CurrentToken.EndIndex) " is 154.
Long Statement,PowerArgs.Cli,ValidationEnforcementTokenHighlighter,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\PowerArgs\PowerArgsRichCommandLineReader.cs,ShouldBeHighlighted,The length of the statement  "            CommandLineArgument contextualArgument = PowerArgsRichCommandLineReader.FindContextualArgument(previousToken' contextualAction' definition); " is 140.
Long Statement,PowerArgs.Cli,ValidationEnforcementTokenHighlighter,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\PowerArgs\PowerArgsRichCommandLineReader.cs,ShouldBeHighlighted,The length of the statement  "            CommandLineArgument currentTokenArgument = PowerArgsRichCommandLineReader.FindCurrentTokenArgument(contextualAction' currentToken' out expectMatchingArg' definition); " is 166.
Long Statement,PowerArgs.Cli,ValidationEnforcementTokenHighlighter,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\PowerArgs\PowerArgsRichCommandLineReader.cs,ShouldBeHighlighted,The length of the statement  "                // The current token starts with a - or /' but does not match a global or action specific argument' so we'll highlight the token red " is 132.
Long Statement,PowerArgs.Cli,ContextAssistResult,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\ContextAssist\ContextAssistResult.cs,CreateCustomResult,The length of the statement  "            return new ContextAssistResult() { NewBuffer = newBuffer' StatusCode = ContextAssistResultStatusCode.Success' ConsoleRefreshLeftOffset = consoleRefreshLeftOffset }; " is 164.
Long Statement,PowerArgs.Cli,HomeAndEndKeysHandler,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\KeyHandlers\HomeAndEndKeysHandler.cs,Handle,The length of the statement  "                context.Console.CursorTop = context.ConsoleStartTop + (int)(Math.Floor((context.ConsoleStartLeft + context.Buffer.Count) / (double)context.Console.BufferWidth)); " is 161.
Long Statement,PowerArgs.Cli,RichCommandLineContext,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\RichCommandLineContext.cs,GetQuoteStatus,The length of the statement  "            if (chars.LastIndexOf(new ConsoleCharacter('"')) > chars.LastIndexOf(new ConsoleCharacter(' '))) return QuoteStatus.ClosedQuote; " is 128.
Long Statement,PowerArgs.Cli,RichTextCommandLineReader,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\RichTextCommandLineReader.cs,ReadLine,The length of the statement  "                    context.BufferPosition = this.Console.CursorLeft - context.ConsoleStartLeft + (this.Console.CursorTop - context.ConsoleStartTop) * this.Console.BufferWidth; " is 156.
Long Statement,PowerArgs.Cli,RichTextCommandLineReader,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\RichTextCommandLineReader.cs,ReadLine,The length of the statement  "                        var message = string.Format("The cursor is not located within the bounds of the buffer. Cursor: {0}'{1}    Start position: {2}'{3}    Buffer position: {4}    Buffer length: {5}"' this.Console.CursorTop' this.Console.CursorLeft' context.ConsoleStartTop' context.ConsoleStartLeft' context.BufferPosition' context.Buffer.Count); " is 325.
Long Statement,PowerArgs.Cli,RichTextEditor,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\RichTextEditor.cs,RegisterKeyPress,The length of the statement  "            if (KeyHandlers.TryGetValue(Context.KeyPressed.Key' out handler) == false && RichTextCommandLineReader.IsWriteable(Context.KeyPressed)) " is 135.
Long Statement,PowerArgs.Cli,SimpleSyntaxHighlighter,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\SimpleSyntaxHighlighter.cs,TryHighlight,The length of the statement  "                    shouldBeHighlightedByAtLeastOneHighlighter = shouldBeHighlightedByAtLeastOneHighlighter || shouldBeHighlightedByThisHighlighter; " is 128.
Long Statement,PowerArgs.Cli,SimpleSyntaxHighlighter,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\SimpleSyntaxHighlighter.cs,TryHighlight,The length of the statement  "                        didWorkOnThisToken = EnsureHighlighted(highlighterContext.CurrentToken' readerContext' tokenHighlighter.HighlightForegroundColor' tokenHighlighter.HighlightBackgroundColor); " is 173.
Long Statement,PowerArgs.Cli.Physics,SpaceTime,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Spacetime.cs,CalculateDistanceBetween,The length of the statement  "            return (float)Math.Sqrt(((a.CenterX - b.CenterX) * (a.CenterX - b.CenterX)) + ((a.CenterY - b.CenterY) * (a.CenterY - b.CenterY))); " is 131.
Long Statement,PowerArgs.Cli.Physics,SpacetimePanel,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpacetimePanel.cs,SizeAndLocate,The length of the statement  "                if (float.IsInfinity(x) || float.IsNaN(x) || x >= -100000 == false && x < 100000 == false) throw new Exception("Out of bounds: " + x + "'" + y); " is 144.
Long Statement,PowerArgs.Cli.Physics,SpacialElementBinder,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpacetimePanel.cs,LoadBindings,The length of the statement  "                foreach (Type t in from type in rendererAssembly.ExportedTypes where type.GetTypeInfo().IsSubclassOf(typeof(SpacialElementRenderer)) select type) " is 145.
Long Statement,PowerArgs.Cli.Physics,SpacialElementBinder,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpacetimePanel.cs,LoadBindings,The length of the statement  "                foreach (Type t in from type in thingAssembly.ExportedTypes where type.GetTypeInfo().IsSubclassOf(typeof(SpacialElement)) select type) " is 134.
Long Statement,PowerArgs.Cli.Physics,SpacialElementBinder,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpacetimePanel.cs,FindMatchingBinder,The length of the statement  "            var match = (from renderer in rendererTypes where (renderer.GetTypeInfo().GetCustomAttributes(typeof(SpacialElementBindingAttribute)' true).First() as SpacialElementBindingAttribute).ThingType == thingType select renderer).SingleOrDefault(); " is 241.
Complex Conditional,PowerArgs,CommandLineArgument,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgDefinition\CommandLineArgument.cs,IsArgument,The conditional expression  "property.Name == Constants.ActionPropertyConventionName &&                  property.HasAttr<ArgPosition>() &&                  property.Attr<ArgPosition>().Position == 0 &&                  property.HasAttr<ArgRequired>()"  is complex.
Complex Conditional,PowerArgs,ArgParser,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\ArgParser.cs,Parse,The conditional expression  "next == "true" || next == "false" || next == "0" || next == "1""  is complex.
Complex Conditional,PowerArgs,ArgRevivers,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\ArgRevivers.cs,CanRevive,The conditional expression  "Revivers.ContainsKey(t) ||                  t.IsEnum ||                  (t.GetInterfaces().Contains(typeof(IList)) && t.IsGenericType && CanRevive(t.GetGenericArguments()[0])) ||                  (t.IsArray && CanRevive(t.GetElementType()))"  is complex.
Complex Conditional,PowerArgs,BooleanExpressionParser,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\BooleanExpressionParser.cs,BuildTree,The conditional expression  "token.Type == BooleanExpressionTokenType.GroupClose ||                      (defaultGroup.Operands.Count == 0 && (token.Type == BooleanExpressionTokenType.And || token.Type == BooleanExpressionTokenType.Or)) ||                      (i == tokens.Count - 1 && (token.Type == BooleanExpressionTokenType.And || token.Type == BooleanExpressionTokenType.Or))"  is complex.
Complex Conditional,PowerArgs,TableExpression,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\TableExpression.cs,Evaluate,The conditional expression  "ShowDefaultValuesForArguments && element is CommandLineArgument && propToGet.Name == "Description" && ((CommandLineArgument)element).DefaultValue != null"  is complex.
Complex Conditional,PowerArgs,ArgRequired,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Validators\ArgRequired.cs,ValidateAlways,The conditional expression  "IsConditionallyRequired == false && arg == null && PromptIfMissing && ArgHook.HookContext.Current.Definition.IsNonInteractive == false"  is complex.
Complex Conditional,PowerArgs.Cli,LineChart,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\LineChart.cs,RenderTitle,The conditional expression  "HasFocus && ViewModel.FocusedDataPointIndex >= 0 && ViewModel.FocusedDataPointIndex < series.DataPoints.Count && ViewModel.FocusedDataSeries == series"  is complex.
Complex Conditional,PowerArgs.Cli,ProgressOperation,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\ProgressOperationsManager.cs,StateChanged,The conditional expression  "EndTime.HasValue == false && (State == OperationState.Completed || State == OperationState.CompletedWithWarnings || State == OperationState.Failed)"  is complex.
Complex Conditional,PowerArgs.Cli.Physics,SpacetimePanel,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpacetimePanel.cs,SizeAndLocate,The conditional expression  "x != r.X || y != r.Y || w != r.Width || h != r.Height"  is complex.
Complex Conditional,PowerArgs.Cli.Physics,SpacetimePanel,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpacetimePanel.cs,SizeAndLocate,The conditional expression  "float.IsInfinity(x) || float.IsNaN(x) || x >= -100000 == false && x < 100000 == false"  is complex.
Empty Catch Block,PowerArgs.Cli,CliMessagePump,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\CliMessagePump.cs,ClearInterval,The method has an empty catch block.
Empty Catch Block,PowerArgs.Cli,CliMessagePump,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\CliMessagePump.cs,ClearTimeout,The method has an empty catch block.
Empty Catch Block,PowerArgs.Cli,ConsoleBitmap,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Drawing\ConsoleBitmap.cs,DrawPixel,The method has an empty catch block.
Magic Number,PowerArgs,ArgUsage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgUsage.cs,ShowUsageInBrowser,The following statement contains a magic number: try              {                  File.WriteAllText(outputFileName' usage.ToString());                  proc = Process.Start(outputFileName);                  if (proc != null && waitForBrowserExit)                  {                      proc.WaitForExit();                  }              }              finally              {                  if (deleteFileAfterBrowse)                  {                      if (File.Exists(outputFileName))                      {                          if(waitForBrowserExit == false || proc == null)                          {                              Thread.Sleep(3000); // Gives the browser a few seconds to read the file before deleting it.                          }                            File.Delete(outputFileName);                      }                  }              }
Magic Number,PowerArgs,ArgUsage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgUsage.cs,GetOptionsUsage,The following statement contains a magic number: foreach (ArgumentUsageInfo usageInfo in usageInfos.OrderBy(i => i.Position >= 0 ? i.Position : 1000))              {                  var hooks = new List<UsageHook>();                  if (usageInfo.Property != null && ArgUsage.ExplicitPropertyHooks.ContainsKey(usageInfo.Property))                  {                      hooks.AddRange(ArgUsage.ExplicitPropertyHooks[usageInfo.Property]);                  }                    hooks.AddRange(ArgUsage.GlobalUsageHooks);                    hooks.AddRange(usageInfo.Argument.UsageHooks);                    foreach (var hook in hooks)                  {                      hook.BeforeGenerateUsage(usageInfo);                  }                                     if (usageInfo.Ignore) continue;                  if (usageInfo.IsAction && ignoreActionProperties) continue;                    var positionString = new ConsoleString(usageInfo.Position >= 0 ? usageInfo.Position + "" : "NA");                  var requiredString = new ConsoleString(usageInfo.IsRequired ? "*" : ""' ConsoleColor.Red);                  var descriptionString = new ConsoleString(usageInfo.Description);                  if (options.AppendDefaultValueToDescription && usageInfo.DefaultValue != null) descriptionString += new ConsoleString(" [default=" + usageInfo.DefaultValue.ToString() + "]"' ConsoleColor.DarkGreen);                    var typeString = new ConsoleString(usageInfo.Type);                    var aliases = usageInfo.Aliases.OrderBy(a => a.Length).ToList();                  var maxInlineAliasLength = 8;                  string inlineAliasInfo = "";                    int aliasIndex;                  for (aliasIndex = 0; aliasIndex < aliases.Count; aliasIndex++)                  {                      var proposedInlineAliases = inlineAliasInfo == string.Empty ? aliases[aliasIndex] : inlineAliasInfo + "' " + aliases[aliasIndex];                      if (proposedInlineAliases.Length <= maxInlineAliasLength)                      {                          inlineAliasInfo = proposedInlineAliases;                      }                      else                      {                          break;                      }                  }                    if (inlineAliasInfo != string.Empty) inlineAliasInfo = " (" + inlineAliasInfo + ")";                    rows.Add(new List<ConsoleString>()                  {                      new ConsoleString("")+(usageInfo.Name + inlineAliasInfo)'                      descriptionString'                  });                    insertPosition = 1;                  if (options.ShowType)                  {                      rows.Last().Insert(insertPosition++' typeString + requiredString);                  }                    if (hasPositionalArgs && options.ShowPosition)                  {                      rows.Last().Insert(insertPosition' positionString);                  }                    for (int i = aliasIndex; i < aliases.Count; i++)                  {                      rows.Add(new List<ConsoleString>()                      {                          new ConsoleString("  "+aliases[i])'                          ConsoleString.Empty'                      });                        if (hasTypeCol) rows.Last().Add(ConsoleString.Empty);                      if (hasPosCol) rows.Last().Add(ConsoleString.Empty);                  }                    if (options.ShowPossibleValues)                  {                      foreach (var possibleValue in usageInfo.PossibleValues)                      {                          rows.Add(new List<ConsoleString>()                      {                          ConsoleString.Empty'                          new ConsoleString("  "+possibleValue)'                      });                            if (hasTypeCol) rows.Last().Insert(rows.Last().Count - 1' ConsoleString.Empty);                          if (hasPosCol) rows.Last().Insert(rows.Last().Count - 1' ConsoleString.Empty);                      }                  }              }
Magic Number,PowerArgs,ArgUsage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgUsage.cs,GetOptionsUsage,The following statement contains a magic number: foreach (ArgumentUsageInfo usageInfo in usageInfos.OrderBy(i => i.Position >= 0 ? i.Position : 1000))              {                  var hooks = new List<UsageHook>();                  if (usageInfo.Property != null && ArgUsage.ExplicitPropertyHooks.ContainsKey(usageInfo.Property))                  {                      hooks.AddRange(ArgUsage.ExplicitPropertyHooks[usageInfo.Property]);                  }                    hooks.AddRange(ArgUsage.GlobalUsageHooks);                    hooks.AddRange(usageInfo.Argument.UsageHooks);                    foreach (var hook in hooks)                  {                      hook.BeforeGenerateUsage(usageInfo);                  }                                     if (usageInfo.Ignore) continue;                  if (usageInfo.IsAction && ignoreActionProperties) continue;                    var positionString = new ConsoleString(usageInfo.Position >= 0 ? usageInfo.Position + "" : "NA");                  var requiredString = new ConsoleString(usageInfo.IsRequired ? "*" : ""' ConsoleColor.Red);                  var descriptionString = new ConsoleString(usageInfo.Description);                  if (options.AppendDefaultValueToDescription && usageInfo.DefaultValue != null) descriptionString += new ConsoleString(" [default=" + usageInfo.DefaultValue.ToString() + "]"' ConsoleColor.DarkGreen);                    var typeString = new ConsoleString(usageInfo.Type);                    var aliases = usageInfo.Aliases.OrderBy(a => a.Length).ToList();                  var maxInlineAliasLength = 8;                  string inlineAliasInfo = "";                    int aliasIndex;                  for (aliasIndex = 0; aliasIndex < aliases.Count; aliasIndex++)                  {                      var proposedInlineAliases = inlineAliasInfo == string.Empty ? aliases[aliasIndex] : inlineAliasInfo + "' " + aliases[aliasIndex];                      if (proposedInlineAliases.Length <= maxInlineAliasLength)                      {                          inlineAliasInfo = proposedInlineAliases;                      }                      else                      {                          break;                      }                  }                    if (inlineAliasInfo != string.Empty) inlineAliasInfo = " (" + inlineAliasInfo + ")";                    rows.Add(new List<ConsoleString>()                  {                      new ConsoleString("")+(usageInfo.Name + inlineAliasInfo)'                      descriptionString'                  });                    insertPosition = 1;                  if (options.ShowType)                  {                      rows.Last().Insert(insertPosition++' typeString + requiredString);                  }                    if (hasPositionalArgs && options.ShowPosition)                  {                      rows.Last().Insert(insertPosition' positionString);                  }                    for (int i = aliasIndex; i < aliases.Count; i++)                  {                      rows.Add(new List<ConsoleString>()                      {                          new ConsoleString("  "+aliases[i])'                          ConsoleString.Empty'                      });                        if (hasTypeCol) rows.Last().Add(ConsoleString.Empty);                      if (hasPosCol) rows.Last().Add(ConsoleString.Empty);                  }                    if (options.ShowPossibleValues)                  {                      foreach (var possibleValue in usageInfo.PossibleValues)                      {                          rows.Add(new List<ConsoleString>()                      {                          ConsoleString.Empty'                          new ConsoleString("  "+possibleValue)'                      });                            if (hasTypeCol) rows.Last().Insert(rows.Last().Count - 1' ConsoleString.Empty);                          if (hasPosCol) rows.Last().Insert(rows.Last().Count - 1' ConsoleString.Empty);                      }                  }              }
Magic Number,PowerArgs,ArgUsage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\ArgUsage.cs,FormatAsTable,The following statement contains a magic number: int buffer = 3;
Magic Number,PowerArgs,ContextAssistSearch,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\ContextAssist\ContextAssistSearch.cs,DoSearchInternal,The following statement contains a magic number: this.resultsWiper.Top += 2;
Magic Number,PowerArgs,ContextAssistSearch,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\RichTextCommandLineReader\ContextAssist\ContextAssistSearch.cs,RedrawSearchResults,The following statement contains a magic number: using (var snapshot = this.console.TakeSnapshot())              {                  resultsWiper.Wipe();                  resultsWiper.SetBottomToTop();                  menuWiper.Bottom = resultsWiper.Bottom;                    this.console.CursorTop = resultsWiper.Top;                  this.console.CursorLeft = 0;                      for (int i = 0; i < latestResults.Count; i++)                  {                      ConsoleString searchResult = latestResults[i].RichDisplayText;                        if (i == selectedIndex)                      {                          searchResult = searchResult.HighlightSubstring(0' searchResult.Length' ConsoleColor.Yellow' null);                      }                        if(searchResult.Length > this.console.BufferWidth - 1)                      {                          searchResult = searchResult.Substring(0' this.console.BufferWidth - 4) + "...";                      }                        if (latestResultsSearchString.Length > 0)                      {                          searchResult = searchResult.Highlight(latestResultsSearchString' ConsoleColor.Black' ConsoleColor.Yellow' StringComparison.InvariantCultureIgnoreCase);                      }                        this.console.WriteLine(searchResult);                      resultsWiper.IncrementBottom();                      menuWiper.IncrementBottom();                  }              }
Magic Number,PowerArgs,ArgRevivers,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\ArgRevivers.cs,SearchAssemblyForRevivers,The following statement contains a magic number: foreach (var type in a.GetTypes())              {                  var revivers = from m in type.GetMethods(BindingFlags.Static | BindingFlags.Public)                                 where m.HasAttr<ArgReviverAttribute>() &&                                       m.GetParameters().Length == 2 &&                                       m.GetParameters()[0].ParameterType == typeof(string) &&                                       m.GetParameters()[1].ParameterType == typeof(string) &&                                       m.ReturnType != typeof(void)                                 select m;                    foreach (var reviver in revivers)                  {                      SetReviver(reviver);                  }              }
Magic Number,PowerArgs,PowerLogger,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\PowerLogger.cs,LogLine,The following statement contains a magic number: if (retryCount == 3) return;
Magic Number,PowerArgs,PowerLogger,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\PowerLogger.cs,LogLine,The following statement contains a magic number: if (LogFile == "Console")              {                  Console.WriteLine(s);              }              else              {                  lock (logLock)                  {                      try                      {                          File.AppendAllText(LogFile' s + Environment.NewLine);                      }                      catch(Exception ex)                      {                          Thread.Sleep(5);                          LogLine(s' retryCount + 1);                      }                  }              }
Magic Number,PowerArgs,ConsoleInDriver,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\ConsoleInDriver.cs,Read,The following statement contains a magic number: while (true)              {                  char? next = null;                  lock (input)                  {                      if (input.Count > 0)                      {                          next = input.Dequeue();                      }                  }                    if (next.HasValue == false)                  {                      Thread.Sleep(10);                      continue;                  }                  else                  {                      return (int)next.Value;                  }              }
Magic Number,PowerArgs,TruncateOverflowBehavior,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\ConsoleTableBuilder.cs,TruncateOverflowBehavior,The following statement contains a magic number: ColumnWidth = 10;
Magic Number,PowerArgs,SmartWrapOverflowBehavior,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\ConsoleTableBuilder.cs,SmartWrapOverflowBehavior,The following statement contains a magic number: WordBreakLookBehind = 20;
Magic Number,PowerArgs,SimpleTabCompletionSource,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesPublic\SimpleTabCompletionSource.cs,SimpleTabCompletionSource,The following statement contains a magic number: this.MinCharsBeforeCyclingBegins = 3;
Magic Number,PowerArgs,StickyArg,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Hooks\StickyArg.cs,Init,The following statement contains a magic number: BeforePopulatePropertyPriority = 10;
Magic Number,PowerArgs,TabCompletion,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Hooks\TabCompletion.cs,TabCompletion,The following statement contains a magic number: BeforeParsePriority = 100;
Magic Number,PowerArgs,DocumentToken,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\DocumentToken.cs,FilterOutNewlinesIfNeeded,The following statement contains a magic number: if (numContentTokensOnCurrentLine == 0 && numReplacementTokensOnCurrentLine > 0)              {                  if (filtered.Count >= 2 && filtered[filtered.Count - 2].Value == "\r" && filtered[filtered.Count - 1].Value == "\n")                  {                      // this line only had replacements so remove the trailing carriage return and newline                      filtered.RemoveAt(filtered.Count - 1);                      filtered.RemoveAt(filtered.Count - 1);                      //Console.WriteLine("removed CR+NL as 2 tokens");                  }                  if (filtered.Count >= 1 && filtered[filtered.Count - 1].Value == "\r\n")                  {                      // this line only had replacements so remove the trailing carriage return and newline (in the same token)                      filtered.RemoveAt(filtered.Count - 1);                      //Console.WriteLine("removed CR+NL as 1 token");                  }                  else if (filtered.Count >= 1 && filtered[filtered.Count - 1].Value == "\n")                  {                      // this line only had replacements so remove the trailing newline                      filtered.RemoveAt(filtered.Count - 1);                      //Console.WriteLine("removed NL token");                  }              }
Magic Number,PowerArgs,DocumentToken,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\DocumentToken.cs,FilterOutNewlinesIfNeeded,The following statement contains a magic number: if (numContentTokensOnCurrentLine == 0 && numReplacementTokensOnCurrentLine > 0)              {                  if (filtered.Count >= 2 && filtered[filtered.Count - 2].Value == "\r" && filtered[filtered.Count - 1].Value == "\n")                  {                      // this line only had replacements so remove the trailing carriage return and newline                      filtered.RemoveAt(filtered.Count - 1);                      filtered.RemoveAt(filtered.Count - 1);                      //Console.WriteLine("removed CR+NL as 2 tokens");                  }                  if (filtered.Count >= 1 && filtered[filtered.Count - 1].Value == "\r\n")                  {                      // this line only had replacements so remove the trailing carriage return and newline (in the same token)                      filtered.RemoveAt(filtered.Count - 1);                      //Console.WriteLine("removed CR+NL as 1 token");                  }                  else if (filtered.Count >= 1 && filtered[filtered.Count - 1].Value == "\n")                  {                      // this line only had replacements so remove the trailing newline                      filtered.RemoveAt(filtered.Count - 1);                      //Console.WriteLine("removed NL token");                  }              }
Magic Number,PowerArgs,ObjectPathExpression,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Templating\ObjectPathExpression.cs,Parse,The following statement contains a magic number: while (reader.CanAdvance(skipWhitespace: true))              {                  var currentToken = reader.Advance(skipWhitespace: true);                    if (lastTokenWasNavigation == true && currentToken.TokenType != ObjectPathTokenType.Identifier)                  {                      throw new FormatException("Expected property' got '"+currentToken.Value+"'" + " at " + currentToken.Position);                  }                    lastTokenWasNavigation = false;                    if (currentToken.TokenType == ObjectPathTokenType.IndexerOpen)                  {                      // read index value                      if (reader.TryAdvance(out currentToken' skipWhitespace: true) == false)                      {                          throw new FormatException("Expected index value' got end of string");                      }                        if (currentToken.TokenType != ObjectPathTokenType.Identifier && currentToken.TokenType != ObjectPathTokenType.StringLiteral)                      {                          throw new ArgumentException("Unexpected token '" + currentToken.Value + "' at " + currentToken.Position);                      }                        string indexValueText = currentToken.Value;                        if (currentToken.TokenType == ObjectPathTokenType.StringLiteral)                      {                          indexValueText = indexValueText.Substring(1' indexValueText.Length - 2);                      }                        object indexValue;                      int indexValueInt;                      if (int.TryParse(indexValueText' out indexValueInt) == false)                      {                          indexValue = indexValueText;                      }                      else                      {                          indexValue = indexValueInt;                      }                        // read index close                      if (reader.TryAdvance(out currentToken' skipWhitespace: true) == false) throw new FormatException("Expected ']'' got end of string");                      if (currentToken.TokenType != ObjectPathTokenType.IndexerClose) throw new FormatException("Expected ']'' got '" + currentToken.Value + "' at " + currentToken.Position);                        IndexerPathElement el = new IndexerPathElement(indexValue);                      pathElements.Add(el);                    }                  else if (currentToken.TokenType == ObjectPathTokenType.Identifier)                  {                      PropertyPathElement el = new PropertyPathElement(currentToken.Value);                      pathElements.Add(el);                  }                  else if(currentToken.TokenType == ObjectPathTokenType.NavigationElement)                  {                          lastTokenWasNavigation = true;                  }                  else                  {                      throw new ArgumentException("Expected property name or indexer' got '" + currentToken.Value + "' at " + currentToken.Position);                  }              }
Magic Number,PowerArgs,ArgRequired,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Validators\ArgRequired.cs,ArgRequired,The following statement contains a magic number: Priority = 100;
Magic Number,PowerArgs,ArgRequiredConditionalHook,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\Validators\ArgRequired.cs,ArgRequiredConditionalHook,The following statement contains a magic number: this.AfterPopulatePropertiesPriority = 2;
Magic Number,PowerArgs.Cli,CliMessagePump,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\CliMessagePump.cs,DebounceResize,The following statement contains a magic number: ActionDebouncer debouncer = new ActionDebouncer(TimeSpan.FromSeconds(.25)' () =>              {                  done = true;              });
Magic Number,PowerArgs.Cli,CliProgressBar,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\CliProgressBar.cs,CliProgressBar,The following statement contains a magic number: Width = width.HasValue ? width.Value : Console.BufferWidth / 3;
Magic Number,PowerArgs.Cli,CliProgressBar,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\CliProgressBar.cs,Render,The following statement contains a magic number: messageStart = topLeft.CreateOffsetSnapshot(2' 1);
Magic Number,PowerArgs.Cli,CliProgressBar,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\CliProgressBar.cs,Render,The following statement contains a magic number: wiper.Bottom = wiper.Top + 2;
Magic Number,PowerArgs.Cli,CliProgressBar,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\CliProgressBar.cs,RenderAndPollIndeterminate,The following statement contains a magic number: try              {                  var bgTask = Task.Factory.StartNew(() =>                  {                      while (cancelled == false)                      {                          Update();                          indeterminateHighlightIndex++;                          if (indeterminateHighlightIndex > Width - 4)                          {                              indeterminateHighlightIndex = 0;                          }                          Thread.Sleep(50);                      }                  });                    while (heartbeat())                  {                      Thread.Sleep(pollingInterval);                  }              }              finally              {                  indeterminateHighlightIndex = -1;                  Update();                  cancelled = true;              }
Magic Number,PowerArgs.Cli,CliProgressBar,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\CliProgressBar.cs,RenderAndPollIndeterminate,The following statement contains a magic number: try              {                  var bgTask = Task.Factory.StartNew(() =>                  {                      while (cancelled == false)                      {                          Update();                          indeterminateHighlightIndex++;                          if (indeterminateHighlightIndex > Width - 4)                          {                              indeterminateHighlightIndex = 0;                          }                          Thread.Sleep(50);                      }                  });                    while (heartbeat())                  {                      Thread.Sleep(pollingInterval);                  }              }              finally              {                  indeterminateHighlightIndex = -1;                  Update();                  cancelled = true;              }
Magic Number,PowerArgs.Cli,CliProgressBar,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\CliProgressBar.cs,RenderUntilIndeterminate,The following statement contains a magic number: try              {                  var animationTask = Task.Factory.StartNew(() =>                  {                      while (cancelled == false)                      {                          Update();                          indeterminateHighlightIndex++;                          if (indeterminateHighlightIndex > Width - 4)                          {                              indeterminateHighlightIndex = 0;                          }                          Thread.Sleep(50);                      }                  });                    workTask.Wait();              }              finally              {                  indeterminateHighlightIndex = -1;                  Update();                  cancelled = true;              }
Magic Number,PowerArgs.Cli,CliProgressBar,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\CliProgressBar.cs,RenderUntilIndeterminate,The following statement contains a magic number: try              {                  var animationTask = Task.Factory.StartNew(() =>                  {                      while (cancelled == false)                      {                          Update();                          indeterminateHighlightIndex++;                          if (indeterminateHighlightIndex > Width - 4)                          {                              indeterminateHighlightIndex = 0;                          }                          Thread.Sleep(50);                      }                  });                    workTask.Wait();              }              finally              {                  indeterminateHighlightIndex = -1;                  Update();                  cancelled = true;              }
Magic Number,PowerArgs.Cli,CliProgressBar,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\CliProgressBar.cs,Update,The following statement contains a magic number: var maxMessageLength = Width - 4;
Magic Number,PowerArgs.Cli,CliProgressBar,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\CliProgressBar.cs,Update,The following statement contains a magic number: renderedMessage = renderedMessage.Replace("{%}"' Math.Round(Progress * 100' 1) + " %");
Magic Number,PowerArgs.Cli,CliProgressBar,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\CliProgressBar.cs,Update,The following statement contains a magic number: if (renderedMessage.Length > maxMessageLength)              {                  renderedMessage = renderedMessage.Substring(0' maxMessageLength - 3) + "...";              }
Magic Number,PowerArgs.Cli,CliProgressBar,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\CliProgressBar.cs,DrawBorder,The following statement contains a magic number: Console.CursorLeft += Width - 4;
Magic Number,PowerArgs.Cli,Border,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Border.cs,OnPaint,The following statement contains a magic number: context.DrawLine(borderChar' Width-2' 1' Width - 2' Height-1);
Magic Number,PowerArgs.Cli,Border,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Border.cs,OnPaint,The following statement contains a magic number: context.DrawLine(borderChar' Width-2' 1' Width - 2' Height-1);
Magic Number,PowerArgs.Cli,Border,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Border.cs,OnPaint,The following statement contains a magic number: context.Rescope(2' 1' this.Width - 4' this.Height - 3);
Magic Number,PowerArgs.Cli,Border,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Border.cs,OnPaint,The following statement contains a magic number: context.Rescope(2' 1' this.Width - 4' this.Height - 3);
Magic Number,PowerArgs.Cli,Border,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Border.cs,OnPaint,The following statement contains a magic number: context.Rescope(2' 1' this.Width - 4' this.Height - 3);
Magic Number,PowerArgs.Cli,BreadcrumbBar,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\BreadcrumbBar.cs,Compose,The following statement contains a magic number: foreach(var s in PageStack.GetSegments(pageStack.CurrentPath))              {                  string myPath;                    if(builtUpPath == "")                  {                      builtUpPath = s;                      myPath = s;                  }                  else                  {                      var label = Add(new Label() { Mode = LabelRenderMode.SingleLineAutoSize' Text = "->".ToConsoleString(Theme.DefaultTheme.H1Color) });                      builtUpPath += "/" + s;                      myPath = builtUpPath;                  }                    var crumb = Add(new BreadcrumbElement(() => { pageStack.TryNavigate(myPath); }) { Text = s.ToConsoleString() });                  crumb.Width = 10;                  if(hadFocus && builtUpPath.Contains("/") == false)                  {                      var worked = crumb.TryFocus();                  }                    }
Magic Number,PowerArgs.Cli,Button,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Button.cs,UpdateWidth,The following statement contains a magic number: int w = Text == null ? 2 : Text.Length + 2;
Magic Number,PowerArgs.Cli,Button,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Button.cs,UpdateWidth,The following statement contains a magic number: int w = Text == null ? 2 : Text.Length + 2;
Magic Number,PowerArgs.Cli,Dialog,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Dialog.cs,OnAddedToVisualTree,The following statement contains a magic number: if (MaxHeight > 0)              {                  this.Height = Math.Min(MaxHeight' Application.LayoutRoot.Height - 2);              }              else              {                  this.Height = Application.LayoutRoot.Height - 2;              }
Magic Number,PowerArgs.Cli,Dialog,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Dialog.cs,OnAddedToVisualTree,The following statement contains a magic number: if (MaxHeight > 0)              {                  this.Height = Math.Min(MaxHeight' Application.LayoutRoot.Height - 2);              }              else              {                  this.Height = Application.LayoutRoot.Height - 2;              }
Magic Number,PowerArgs.Cli,Dialog,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Dialog.cs,ShowMessage,The following statement contains a magic number: ScrollablePanel messagePanel = dialogContent.Add(new ScrollablePanel()).Fill(padding: new Thickness(0' 0' 1' 3));
Magic Number,PowerArgs.Cli,Dialog,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Dialog.cs,ShowMessage,The following statement contains a magic number: Label messageLabel = messagePanel.ScrollableContent.Add(new Label() { Mode = LabelRenderMode.MultiLineSmartWrap' Text = message }).FillHoriontally(padding: new Thickness(3'3'0'0) );
Magic Number,PowerArgs.Cli,Dialog,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Dialog.cs,ShowMessage,The following statement contains a magic number: Label messageLabel = messagePanel.ScrollableContent.Add(new Label() { Mode = LabelRenderMode.MultiLineSmartWrap' Text = message }).FillHoriontally(padding: new Thickness(3'3'0'0) );
Magic Number,PowerArgs.Cli,Dialog,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Dialog.cs,ShowRichTextInput,The following statement contains a magic number: content.Width = ConsoleApp.Current.LayoutRoot.Width / 2;
Magic Number,PowerArgs.Cli,Dialog,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Dialog.cs,ShowRichTextInput,The following statement contains a magic number: content.Height = ConsoleApp.Current.LayoutRoot.Height / 2;
Magic Number,PowerArgs.Cli,Dialog,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Dialog.cs,ShowRichTextInput,The following statement contains a magic number: Label messageLabel = content.Add(new Label() { Text = message'  X = 2' Y = 2 });
Magic Number,PowerArgs.Cli,Dialog,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Dialog.cs,ShowRichTextInput,The following statement contains a magic number: Label messageLabel = content.Add(new Label() { Text = message'  X = 2' Y = 2 });
Magic Number,PowerArgs.Cli,Dialog,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Dialog.cs,ShowRichTextInput,The following statement contains a magic number: inputBox.Y = 4;
Magic Number,PowerArgs.Cli,Dialog,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Dialog.cs,ShowRichTextInput,The following statement contains a magic number: content.SynchronizeForLifetime(nameof(Bounds)' () => { inputBox.Width = content.Width - 4; }' content.LifetimeManager);
Magic Number,PowerArgs.Cli,Grid,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Grid-View.cs,PaintInternal,The following statement contains a magic number: if (this.Height < 5)              {                  context.DrawString("Grid can't render in a space this small"' 0' 0);                  return;              }
Magic Number,PowerArgs.Cli,Grid,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\Grid-View.cs,InitGridViewModel,The following statement contains a magic number: this.Gutter = 3;
Magic Number,PowerArgs.Cli,LineChart,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\LineChart.cs,LineChart,The following statement contains a magic number: YAxisLeftOffset = 14;
Magic Number,PowerArgs.Cli,LineChart,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\LineChart.cs,RenderYAxisLabels,The following statement contains a magic number: for(int y = YAxisTop; y <= YAxisBottom; y+=2)              {                  double yConverted = ConvertYPixelToValue(y);                  var label = YAxisValueCompactFormatter(yConverted);                  if(label.Length > MaxYAxisLabelLength)                  {                      label = label.Substring(0' MaxYAxisLabelLength-1).AppendUsingCurrentFormat("_");                  }                    label = label.ToDifferentBackground(Background);                    var labelLeft = YAxisLeftOffset - 1 - label.Length;                    if (label != lastLabel)                  {                      context.DrawString(label' labelLeft' y);                      lastLabel = label;                  }              }
Magic Number,PowerArgs.Cli,LineChart,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\LineChart.cs,RenderTitle,The following statement contains a magic number: foreach (var series in ViewModel.DataSeriesCollection)              {                  var title = new ConsoleString(series.Title' series.PlotColor' Background);                    if (HasFocus && ViewModel.FocusedDataPointIndex >= 0 && ViewModel.FocusedDataPointIndex < series.DataPoints.Count && ViewModel.FocusedDataSeries == series)                  {                      var xValue = XAxisValueFormatter(series.DataPoints[ViewModel.FocusedDataPointIndex].X);                      var yValue = YAxisValueFormatter(series.DataPoints[ViewModel.FocusedDataPointIndex].Y);                      title += new ConsoleString(" ( " + xValue + "' " + yValue + " )"' Application.Theme.FocusColor);                  }                    if (title.Length > MaxTitleLength)                  {                      title = title.Substring(0' MaxTitleLength)+("_");                  }                    var titleLeft = XAxisLeft + ((XAxisWidth / 2) - (title.Length / 2));                  context.DrawString(title' titleLeft' YAxisTop + 1+yOffset);                  yOffset++;              }
Magic Number,PowerArgs.Cli,LineChart,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\LineChart.cs,RenderTitle,The following statement contains a magic number: foreach (var series in ViewModel.DataSeriesCollection)              {                  var title = new ConsoleString(series.Title' series.PlotColor' Background);                    if (HasFocus && ViewModel.FocusedDataPointIndex >= 0 && ViewModel.FocusedDataPointIndex < series.DataPoints.Count && ViewModel.FocusedDataSeries == series)                  {                      var xValue = XAxisValueFormatter(series.DataPoints[ViewModel.FocusedDataPointIndex].X);                      var yValue = YAxisValueFormatter(series.DataPoints[ViewModel.FocusedDataPointIndex].Y);                      title += new ConsoleString(" ( " + xValue + "' " + yValue + " )"' Application.Theme.FocusColor);                  }                    if (title.Length > MaxTitleLength)                  {                      title = title.Substring(0' MaxTitleLength)+("_");                  }                    var titleLeft = XAxisLeft + ((XAxisWidth / 2) - (title.Length / 2));                  context.DrawString(title' titleLeft' YAxisTop + 1+yOffset);                  yOffset++;              }
Magic Number,PowerArgs.Cli,LineChart,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\LineChart.cs,RenderThreshold,The following statement contains a magic number: if(title.Length > XAxisWidth-2)              {                  title = series.Threshold.Title.Substring(0' XAxisWidth - 3) + "_";              }
Magic Number,PowerArgs.Cli,LineChart,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\LineChart.cs,RenderThreshold,The following statement contains a magic number: if(title.Length > XAxisWidth-2)              {                  title = series.Threshold.Title.Substring(0' XAxisWidth - 3) + "_";              }
Magic Number,PowerArgs.Cli,LineChart,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\LineChart.cs,ConvertXValueToPixel,The following statement contains a magic number: if(percentage < 0 || percentage > 100)              {                  return -1;              }              else              {                  double xConverted = XAxisLeft + (XAxisWidth * percentage);                  return (int)Math.Round(xConverted);              }
Magic Number,PowerArgs.Cli,LineChart,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\LineChart.cs,ConvertXPixelToValue,The following statement contains a magic number: if (percentage < 0 || percentage > 100)              {                  return -1;              }              else              {                  double dataRange = ViewModel.MaxXValue - ViewModel.MinXValue;                  double xConverted = ViewModel.MinXValue + (dataRange * percentage);                  return xConverted;              }
Magic Number,PowerArgs.Cli,LineChart,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\LineChart.cs,ConvertYValueToPixel,The following statement contains a magic number: if (percentage < 0 || percentage > 100)              {                  return -1;              }              else              {                  double yConverted = YAxisBottom - (YAxisHeight * percentage);                  return (int)Math.Round(yConverted);              }
Magic Number,PowerArgs.Cli,LineChart,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\LineChart.cs,ConvertYPixelToValue,The following statement contains a magic number: if (percentage < 0 || percentage > 100)              {                  return -1;              }              else              {                  double dataRange = ViewModel.MaxYValue - ViewModel.MinYValue;                  double yConverted = ViewModel.MinYValue + (dataRange * percentage);                  return yConverted;              }
Magic Number,PowerArgs.Cli,MatrixPanel,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\MatrixPanel.cs,Added,The following statement contains a magic number: LifetimeManager.Manage(Application.SetInterval(() =>              {                  var fore = r.NextDouble() < .4;                  var pixel = Add(new PixelControl()                  {                      CanFocus = false'                      Value = new ConsoleCharacter((char)r.Next((int)'a'' (int)'z')'                       foregroundColor: fore ? ConsoleColor.Green : ConsoleColor.Black'                       backgroundColor: fore ? ConsoleColor.Black : (r.NextDouble() < .5 ? ConsoleColor.Green : ConsoleColor.DarkGreen))'                      X = r.Next(0' Width)                  });                    LifetimeManager.Manage(Application.SetInterval(() =>                  {                      if (pixel.Y < Height)                      {                          pixel.Y++;                      }                      else                      {                          this.Controls.Remove(pixel);                      }                  }' TimeSpan.FromMilliseconds(r.Next(20' 100))));                }' TimeSpan.FromMilliseconds(r.Next(10' 15))));
Magic Number,PowerArgs.Cli,MatrixPanel,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\MatrixPanel.cs,Added,The following statement contains a magic number: LifetimeManager.Manage(Application.SetInterval(() =>              {                  var fore = r.NextDouble() < .4;                  var pixel = Add(new PixelControl()                  {                      CanFocus = false'                      Value = new ConsoleCharacter((char)r.Next((int)'a'' (int)'z')'                       foregroundColor: fore ? ConsoleColor.Green : ConsoleColor.Black'                       backgroundColor: fore ? ConsoleColor.Black : (r.NextDouble() < .5 ? ConsoleColor.Green : ConsoleColor.DarkGreen))'                      X = r.Next(0' Width)                  });                    LifetimeManager.Manage(Application.SetInterval(() =>                  {                      if (pixel.Y < Height)                      {                          pixel.Y++;                      }                      else                      {                          this.Controls.Remove(pixel);                      }                  }' TimeSpan.FromMilliseconds(r.Next(20' 100))));                }' TimeSpan.FromMilliseconds(r.Next(10' 15))));
Magic Number,PowerArgs.Cli,MatrixPanel,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\MatrixPanel.cs,Added,The following statement contains a magic number: LifetimeManager.Manage(Application.SetInterval(() =>              {                  var fore = r.NextDouble() < .4;                  var pixel = Add(new PixelControl()                  {                      CanFocus = false'                      Value = new ConsoleCharacter((char)r.Next((int)'a'' (int)'z')'                       foregroundColor: fore ? ConsoleColor.Green : ConsoleColor.Black'                       backgroundColor: fore ? ConsoleColor.Black : (r.NextDouble() < .5 ? ConsoleColor.Green : ConsoleColor.DarkGreen))'                      X = r.Next(0' Width)                  });                    LifetimeManager.Manage(Application.SetInterval(() =>                  {                      if (pixel.Y < Height)                      {                          pixel.Y++;                      }                      else                      {                          this.Controls.Remove(pixel);                      }                  }' TimeSpan.FromMilliseconds(r.Next(20' 100))));                }' TimeSpan.FromMilliseconds(r.Next(10' 15))));
Magic Number,PowerArgs.Cli,MatrixPanel,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\MatrixPanel.cs,Added,The following statement contains a magic number: LifetimeManager.Manage(Application.SetInterval(() =>              {                  var fore = r.NextDouble() < .4;                  var pixel = Add(new PixelControl()                  {                      CanFocus = false'                      Value = new ConsoleCharacter((char)r.Next((int)'a'' (int)'z')'                       foregroundColor: fore ? ConsoleColor.Green : ConsoleColor.Black'                       backgroundColor: fore ? ConsoleColor.Black : (r.NextDouble() < .5 ? ConsoleColor.Green : ConsoleColor.DarkGreen))'                      X = r.Next(0' Width)                  });                    LifetimeManager.Manage(Application.SetInterval(() =>                  {                      if (pixel.Y < Height)                      {                          pixel.Y++;                      }                      else                      {                          this.Controls.Remove(pixel);                      }                  }' TimeSpan.FromMilliseconds(r.Next(20' 100))));                }' TimeSpan.FromMilliseconds(r.Next(10' 15))));
Magic Number,PowerArgs.Cli,MatrixPanel,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\MatrixPanel.cs,Added,The following statement contains a magic number: LifetimeManager.Manage(Application.SetInterval(() =>              {                  var fore = r.NextDouble() < .4;                  var pixel = Add(new PixelControl()                  {                      CanFocus = false'                      Value = new ConsoleCharacter((char)r.Next((int)'a'' (int)'z')'                       foregroundColor: fore ? ConsoleColor.Green : ConsoleColor.Black'                       backgroundColor: fore ? ConsoleColor.Black : (r.NextDouble() < .5 ? ConsoleColor.Green : ConsoleColor.DarkGreen))'                      X = r.Next(0' Width)                  });                    LifetimeManager.Manage(Application.SetInterval(() =>                  {                      if (pixel.Y < Height)                      {                          pixel.Y++;                      }                      else                      {                          this.Controls.Remove(pixel);                      }                  }' TimeSpan.FromMilliseconds(r.Next(20' 100))));                }' TimeSpan.FromMilliseconds(r.Next(10' 15))));
Magic Number,PowerArgs.Cli,MatrixPanel,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\MatrixPanel.cs,Added,The following statement contains a magic number: LifetimeManager.Manage(Application.SetInterval(() =>              {                  var fore = r.NextDouble() < .4;                  var pixel = Add(new PixelControl()                  {                      CanFocus = false'                      Value = new ConsoleCharacter((char)r.Next((int)'a'' (int)'z')'                       foregroundColor: fore ? ConsoleColor.Green : ConsoleColor.Black'                       backgroundColor: fore ? ConsoleColor.Black : (r.NextDouble() < .5 ? ConsoleColor.Green : ConsoleColor.DarkGreen))'                      X = r.Next(0' Width)                  });                    LifetimeManager.Manage(Application.SetInterval(() =>                  {                      if (pixel.Y < Height)                      {                          pixel.Y++;                      }                      else                      {                          this.Controls.Remove(pixel);                      }                  }' TimeSpan.FromMilliseconds(r.Next(20' 100))));                }' TimeSpan.FromMilliseconds(r.Next(10' 15))));
Magic Number,PowerArgs.Cli,NotificationButton,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\NotificationButton.cs,OnAddedToVisualTree,The following statement contains a magic number: manager.ProgressOperationStatusChanged.SubscribeForLifetime((op) =>              {                  if(op.State == OperationState.Completed)                  {                      launcher.Foreground = ConsoleColor.Green;                      if(resetTimer != null)                      {                          Application.ClearTimeout(resetTimer);                          resetTimer = null;                      }                      resetTimer = Application.SetTimeout(ResetLaundherFG' TimeSpan.FromSeconds(5));                  }              }' this.LifetimeManager);
Magic Number,PowerArgs.Cli,ProgressOperationControl,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\ProgressOperationControl.cs,ProgressOperationControl,The following statement contains a magic number: this.Height = 2;
Magic Number,PowerArgs.Cli,ProgressOperationControl,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\ProgressOperationControl.cs,ProgressOperationControl,The following statement contains a magic number: actionPanel = messageAndOperationsPanel.Add(new StackPanel() { Orientation = Orientation.Horizontal' Height = 1' Margin = 2 }).FillHoriontally(messageAndOperationsPanel);
Magic Number,PowerArgs.Cli,TextBox,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\TextBox.cs,TextBox,The following statement contains a magic number: this.Width = 15;
Magic Number,PowerArgs.Cli,LineChartViewModel,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Controls\ViewModels\LineChartViewModel.cs,IncrementFocusedDataSeriesIndex,The following statement contains a magic number: if (DataSeriesCollection.Count < 2) return;
Magic Number,PowerArgs.Cli,ConsoleBitmapPlayer,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Drawing\Recording\ConsoleBitmapPlayer.cs,ConsoleBitmapPlayer,The following statement contains a magic number: RewindAndFastForwardIncrement = TimeSpan.FromSeconds(10);
Magic Number,PowerArgs.Cli,ConsoleBitmapPlayer,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Drawing\Recording\ConsoleBitmapPlayer.cs,StateChanged,The following statement contains a magic number: if(State == PlayerState.Playing)              {                  if(duration.HasValue == false)                  {                      throw new InvalidOperationException("Playback is not permitted before a video is loaded");                  }                    playStartPosition = TimeSpan.FromSeconds(playerProgressBar.PlayCursorPosition * duration.Value.TotalSeconds);                  playStartTime = DateTime.UtcNow;                    // start a play loop for as long as the state remains unchanged                  this.playLifetime = this.GetPropertyValueLifetime(nameof(State));                  playLifetime.LifetimeManager.Manage(Application.SetInterval(() =>                  {                      if(State != PlayerState.Playing)                      {                          return;                      }                        pictureInTheFrame.CenterHorizontally().CenterVertically();                      var now = DateTime.UtcNow;                      var delta = now - playStartTime;                      var newPlayerPosition = playStartPosition + delta;                      var videoLocationPercentage = Math.Round(100.0 *newPlayerPosition.TotalSeconds / duration.Value.TotalSeconds'1);                      videoLocationPercentage = Math.Min(videoLocationPercentage' 100);                      playerProgressBar.PlayCursorPosition = videoLocationPercentage / 100.0;                      playButton.Text = $"Pause".ToConsoleString();                        ConsoleBitmap seekedImage;                      if (newPlayerPosition > duration)                      {                          State = PlayerState.Stopped;                      }                      else if(inMemoryVideo.TrySeek(newPlayerPosition' out seekedImage) == false)                      {                          State = PlayerState.Buffering;                      }                      else                      {                          CurrentFrame = seekedImage;                      }                    }' TimeSpan.FromMilliseconds(1)));              }              else if(State == PlayerState.Stopped)              {                  pictureFrame.BorderColor = ConsoleColor.Yellow;                  playButton.Text = "Play".ToConsoleString();              }              else if (State == PlayerState.Paused)              {                  playButton.Text = "Play".ToConsoleString();              }              else if(State == PlayerState.NotLoaded)              {                  playButton.Text = "Play".ToConsoleString();                  playButton.CanFocus = false;              }              else if (State == PlayerState.Buffering)              {                  playButton.Text = "Play".ToConsoleString();              }              else if(State == PlayerState.Failed)              {                  pictureFrame.BorderColor = ConsoleColor.Red;                  Dialog.ShowMessage(failedMessage.ToRed());              }              else              {                  throw new Exception("Unknown state: "+State);              }
Magic Number,PowerArgs.Cli,ConsoleBitmapPlayer,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Drawing\Recording\ConsoleBitmapPlayer.cs,StateChanged,The following statement contains a magic number: if(State == PlayerState.Playing)              {                  if(duration.HasValue == false)                  {                      throw new InvalidOperationException("Playback is not permitted before a video is loaded");                  }                    playStartPosition = TimeSpan.FromSeconds(playerProgressBar.PlayCursorPosition * duration.Value.TotalSeconds);                  playStartTime = DateTime.UtcNow;                    // start a play loop for as long as the state remains unchanged                  this.playLifetime = this.GetPropertyValueLifetime(nameof(State));                  playLifetime.LifetimeManager.Manage(Application.SetInterval(() =>                  {                      if(State != PlayerState.Playing)                      {                          return;                      }                        pictureInTheFrame.CenterHorizontally().CenterVertically();                      var now = DateTime.UtcNow;                      var delta = now - playStartTime;                      var newPlayerPosition = playStartPosition + delta;                      var videoLocationPercentage = Math.Round(100.0 *newPlayerPosition.TotalSeconds / duration.Value.TotalSeconds'1);                      videoLocationPercentage = Math.Min(videoLocationPercentage' 100);                      playerProgressBar.PlayCursorPosition = videoLocationPercentage / 100.0;                      playButton.Text = $"Pause".ToConsoleString();                        ConsoleBitmap seekedImage;                      if (newPlayerPosition > duration)                      {                          State = PlayerState.Stopped;                      }                      else if(inMemoryVideo.TrySeek(newPlayerPosition' out seekedImage) == false)                      {                          State = PlayerState.Buffering;                      }                      else                      {                          CurrentFrame = seekedImage;                      }                    }' TimeSpan.FromMilliseconds(1)));              }              else if(State == PlayerState.Stopped)              {                  pictureFrame.BorderColor = ConsoleColor.Yellow;                  playButton.Text = "Play".ToConsoleString();              }              else if (State == PlayerState.Paused)              {                  playButton.Text = "Play".ToConsoleString();              }              else if(State == PlayerState.NotLoaded)              {                  playButton.Text = "Play".ToConsoleString();                  playButton.CanFocus = false;              }              else if (State == PlayerState.Buffering)              {                  playButton.Text = "Play".ToConsoleString();              }              else if(State == PlayerState.Failed)              {                  pictureFrame.BorderColor = ConsoleColor.Red;                  Dialog.ShowMessage(failedMessage.ToRed());              }              else              {                  throw new Exception("Unknown state: "+State);              }
Magic Number,PowerArgs.Cli,ConsoleBitmapPlayer,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Drawing\Recording\ConsoleBitmapPlayer.cs,StateChanged,The following statement contains a magic number: if(State == PlayerState.Playing)              {                  if(duration.HasValue == false)                  {                      throw new InvalidOperationException("Playback is not permitted before a video is loaded");                  }                    playStartPosition = TimeSpan.FromSeconds(playerProgressBar.PlayCursorPosition * duration.Value.TotalSeconds);                  playStartTime = DateTime.UtcNow;                    // start a play loop for as long as the state remains unchanged                  this.playLifetime = this.GetPropertyValueLifetime(nameof(State));                  playLifetime.LifetimeManager.Manage(Application.SetInterval(() =>                  {                      if(State != PlayerState.Playing)                      {                          return;                      }                        pictureInTheFrame.CenterHorizontally().CenterVertically();                      var now = DateTime.UtcNow;                      var delta = now - playStartTime;                      var newPlayerPosition = playStartPosition + delta;                      var videoLocationPercentage = Math.Round(100.0 *newPlayerPosition.TotalSeconds / duration.Value.TotalSeconds'1);                      videoLocationPercentage = Math.Min(videoLocationPercentage' 100);                      playerProgressBar.PlayCursorPosition = videoLocationPercentage / 100.0;                      playButton.Text = $"Pause".ToConsoleString();                        ConsoleBitmap seekedImage;                      if (newPlayerPosition > duration)                      {                          State = PlayerState.Stopped;                      }                      else if(inMemoryVideo.TrySeek(newPlayerPosition' out seekedImage) == false)                      {                          State = PlayerState.Buffering;                      }                      else                      {                          CurrentFrame = seekedImage;                      }                    }' TimeSpan.FromMilliseconds(1)));              }              else if(State == PlayerState.Stopped)              {                  pictureFrame.BorderColor = ConsoleColor.Yellow;                  playButton.Text = "Play".ToConsoleString();              }              else if (State == PlayerState.Paused)              {                  playButton.Text = "Play".ToConsoleString();              }              else if(State == PlayerState.NotLoaded)              {                  playButton.Text = "Play".ToConsoleString();                  playButton.CanFocus = false;              }              else if (State == PlayerState.Buffering)              {                  playButton.Text = "Play".ToConsoleString();              }              else if(State == PlayerState.Failed)              {                  pictureFrame.BorderColor = ConsoleColor.Red;                  Dialog.ShowMessage(failedMessage.ToRed());              }              else              {                  throw new Exception("Unknown state: "+State);              }
Magic Number,PowerArgs.Cli,ConsoleBitmapStreamWriter,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Drawing\Recording\ConsoleBitmapStreamWriter.cs,WriteFrame,The following statement contains a magic number: if (lastFrame == null)              {                  rawFrame.Timestamp = frameTime;                  StreamHeader(bitmap);                  writer.Write(serializer.SerializeFrame(rawFrame));              }              else              {                  var diff = PrepareDiffFrame(bitmap);                  diff.Timestamp = frameTime;                  if(diff.Diffs.Count > bitmap.Width * bitmap.Height / 2)                  {                      writer.Write(serializer.SerializeFrame(rawFrame));                  }                  else if(diff.Diffs.Count > 0)                  {                      writer.Write(serializer.SerializeFrame(diff));                  }              }
Magic Number,PowerArgs.Cli,PlayerProgressBar,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Drawing\Recording\PlayerProgressBar.cs,OnPaint,The following statement contains a magic number: var loadProgressPixels = (int)(0.5 + (LoadProgressPosition * Width));
Magic Number,PowerArgs.Cli,PlayerProgressBar,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Drawing\Recording\PlayerProgressBar.cs,OnPaint,The following statement contains a magic number: var playCursorOffset = (int)(0.5 + (PlayCursorPosition * Width));
Magic Number,PowerArgs.Cli,Thickness,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Drawing\Thickness.cs,Parse,The following statement contains a magic number: int t = split.Length > 2 ? int.Parse(split[2]) : 0;
Magic Number,PowerArgs.Cli,Thickness,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Drawing\Thickness.cs,Parse,The following statement contains a magic number: int t = split.Length > 2 ? int.Parse(split[2]) : 0;
Magic Number,PowerArgs.Cli,Thickness,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Drawing\Thickness.cs,Parse,The following statement contains a magic number: int b = split.Length > 3 ? int.Parse(split[3]) : 0;
Magic Number,PowerArgs.Cli,Thickness,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Drawing\Thickness.cs,Parse,The following statement contains a magic number: int b = split.Length > 3 ? int.Parse(split[3]) : 0;
Magic Number,PowerArgs.Cli,FocusManager,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\FocusManager.cs,TryMoveFocus,The following statement contains a magic number: do              {                  bool wrapped = CycleFocusIndex(forward);                  var nextControl = focusStack.Peek().Controls[focusStack.Peek().FocusIndex];                  if(nextControl.CanFocus)                  {                      return TrySetFocus(nextControl);                  }                    if (wrapped && initialPosition < 0) break;              }              while (focusStack.Peek().FocusIndex != initialPosition && DateTime.Now - start < TimeSpan.FromSeconds(.2));
Magic Number,PowerArgs.Cli,Friendlies,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Helpers\Friendlies.cs,ToFriendlyPastTimeStamp,The following statement contains a magic number: if(delta < TimeSpan.FromSeconds(30))              {                  return "just now";              }              else if(delta < TimeSpan.FromSeconds(120))              {                  return $"{delta.TotalSeconds.Round()} seconds ago";              }              else if (delta < TimeSpan.FromMinutes(120))              {                  return $"{delta.TotalMinutes.Round()} minutes ago";              }              else if (delta < TimeSpan.FromHours(48))              {                  return $"{delta.TotalHours.Round()} hours ago";              }              else              {                  return $"{delta.TotalDays.Round()} days ago";              }
Magic Number,PowerArgs.Cli,Friendlies,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Helpers\Friendlies.cs,ToFriendlyPastTimeStamp,The following statement contains a magic number: if(delta < TimeSpan.FromSeconds(30))              {                  return "just now";              }              else if(delta < TimeSpan.FromSeconds(120))              {                  return $"{delta.TotalSeconds.Round()} seconds ago";              }              else if (delta < TimeSpan.FromMinutes(120))              {                  return $"{delta.TotalMinutes.Round()} minutes ago";              }              else if (delta < TimeSpan.FromHours(48))              {                  return $"{delta.TotalHours.Round()} hours ago";              }              else              {                  return $"{delta.TotalDays.Round()} days ago";              }
Magic Number,PowerArgs.Cli,Friendlies,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Helpers\Friendlies.cs,ToFriendlyPastTimeStamp,The following statement contains a magic number: if(delta < TimeSpan.FromSeconds(30))              {                  return "just now";              }              else if(delta < TimeSpan.FromSeconds(120))              {                  return $"{delta.TotalSeconds.Round()} seconds ago";              }              else if (delta < TimeSpan.FromMinutes(120))              {                  return $"{delta.TotalMinutes.Round()} minutes ago";              }              else if (delta < TimeSpan.FromHours(48))              {                  return $"{delta.TotalHours.Round()} hours ago";              }              else              {                  return $"{delta.TotalDays.Round()} days ago";              }
Magic Number,PowerArgs.Cli,Friendlies,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Helpers\Friendlies.cs,ToFriendlyPastTimeStamp,The following statement contains a magic number: if(delta < TimeSpan.FromSeconds(30))              {                  return "just now";              }              else if(delta < TimeSpan.FromSeconds(120))              {                  return $"{delta.TotalSeconds.Round()} seconds ago";              }              else if (delta < TimeSpan.FromMinutes(120))              {                  return $"{delta.TotalMinutes.Round()} minutes ago";              }              else if (delta < TimeSpan.FromHours(48))              {                  return $"{delta.TotalHours.Round()} hours ago";              }              else              {                  return $"{delta.TotalDays.Round()} days ago";              }
Magic Number,PowerArgs.Cli,Friendlies,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Helpers\Friendlies.cs,ToFriendlyFileSize,The following statement contains a magic number: if(bytes < 1024)              {                  return bytes + " B";              }              else if(bytes < 1024 * 1024)              {                  var converted = Math.Round(bytes / 1024.0' 1);                  return converted + " KB";              }              else if (bytes < 1024 * 1024 * 1024)              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0) ' 1);                  return converted + " MB";              }              else              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0 * 1024.0)' 1);                  return converted + " GB";              }
Magic Number,PowerArgs.Cli,Friendlies,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Helpers\Friendlies.cs,ToFriendlyFileSize,The following statement contains a magic number: if(bytes < 1024)              {                  return bytes + " B";              }              else if(bytes < 1024 * 1024)              {                  var converted = Math.Round(bytes / 1024.0' 1);                  return converted + " KB";              }              else if (bytes < 1024 * 1024 * 1024)              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0) ' 1);                  return converted + " MB";              }              else              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0 * 1024.0)' 1);                  return converted + " GB";              }
Magic Number,PowerArgs.Cli,Friendlies,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Helpers\Friendlies.cs,ToFriendlyFileSize,The following statement contains a magic number: if(bytes < 1024)              {                  return bytes + " B";              }              else if(bytes < 1024 * 1024)              {                  var converted = Math.Round(bytes / 1024.0' 1);                  return converted + " KB";              }              else if (bytes < 1024 * 1024 * 1024)              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0) ' 1);                  return converted + " MB";              }              else              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0 * 1024.0)' 1);                  return converted + " GB";              }
Magic Number,PowerArgs.Cli,Friendlies,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Helpers\Friendlies.cs,ToFriendlyFileSize,The following statement contains a magic number: if(bytes < 1024)              {                  return bytes + " B";              }              else if(bytes < 1024 * 1024)              {                  var converted = Math.Round(bytes / 1024.0' 1);                  return converted + " KB";              }              else if (bytes < 1024 * 1024 * 1024)              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0) ' 1);                  return converted + " MB";              }              else              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0 * 1024.0)' 1);                  return converted + " GB";              }
Magic Number,PowerArgs.Cli,Friendlies,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Helpers\Friendlies.cs,ToFriendlyFileSize,The following statement contains a magic number: if(bytes < 1024)              {                  return bytes + " B";              }              else if(bytes < 1024 * 1024)              {                  var converted = Math.Round(bytes / 1024.0' 1);                  return converted + " KB";              }              else if (bytes < 1024 * 1024 * 1024)              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0) ' 1);                  return converted + " MB";              }              else              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0 * 1024.0)' 1);                  return converted + " GB";              }
Magic Number,PowerArgs.Cli,Friendlies,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Helpers\Friendlies.cs,ToFriendlyFileSize,The following statement contains a magic number: if(bytes < 1024)              {                  return bytes + " B";              }              else if(bytes < 1024 * 1024)              {                  var converted = Math.Round(bytes / 1024.0' 1);                  return converted + " KB";              }              else if (bytes < 1024 * 1024 * 1024)              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0) ' 1);                  return converted + " MB";              }              else              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0 * 1024.0)' 1);                  return converted + " GB";              }
Magic Number,PowerArgs.Cli,Friendlies,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Helpers\Friendlies.cs,ToFriendlyFileSize,The following statement contains a magic number: if(bytes < 1024)              {                  return bytes + " B";              }              else if(bytes < 1024 * 1024)              {                  var converted = Math.Round(bytes / 1024.0' 1);                  return converted + " KB";              }              else if (bytes < 1024 * 1024 * 1024)              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0) ' 1);                  return converted + " MB";              }              else              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0 * 1024.0)' 1);                  return converted + " GB";              }
Magic Number,PowerArgs.Cli,Friendlies,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Helpers\Friendlies.cs,ToFriendlyFileSize,The following statement contains a magic number: if(bytes < 1024)              {                  return bytes + " B";              }              else if(bytes < 1024 * 1024)              {                  var converted = Math.Round(bytes / 1024.0' 1);                  return converted + " KB";              }              else if (bytes < 1024 * 1024 * 1024)              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0) ' 1);                  return converted + " MB";              }              else              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0 * 1024.0)' 1);                  return converted + " GB";              }
Magic Number,PowerArgs.Cli,Friendlies,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Helpers\Friendlies.cs,ToFriendlyFileSize,The following statement contains a magic number: if(bytes < 1024)              {                  return bytes + " B";              }              else if(bytes < 1024 * 1024)              {                  var converted = Math.Round(bytes / 1024.0' 1);                  return converted + " KB";              }              else if (bytes < 1024 * 1024 * 1024)              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0) ' 1);                  return converted + " MB";              }              else              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0 * 1024.0)' 1);                  return converted + " GB";              }
Magic Number,PowerArgs.Cli,Friendlies,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Helpers\Friendlies.cs,ToFriendlyFileSize,The following statement contains a magic number: if(bytes < 1024)              {                  return bytes + " B";              }              else if(bytes < 1024 * 1024)              {                  var converted = Math.Round(bytes / 1024.0' 1);                  return converted + " KB";              }              else if (bytes < 1024 * 1024 * 1024)              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0) ' 1);                  return converted + " MB";              }              else              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0 * 1024.0)' 1);                  return converted + " GB";              }
Magic Number,PowerArgs.Cli,Friendlies,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Helpers\Friendlies.cs,ToFriendlyFileSize,The following statement contains a magic number: if(bytes < 1024)              {                  return bytes + " B";              }              else if(bytes < 1024 * 1024)              {                  var converted = Math.Round(bytes / 1024.0' 1);                  return converted + " KB";              }              else if (bytes < 1024 * 1024 * 1024)              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0) ' 1);                  return converted + " MB";              }              else              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0 * 1024.0)' 1);                  return converted + " GB";              }
Magic Number,PowerArgs.Cli,Friendlies,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Helpers\Friendlies.cs,ToFriendlyFileSize,The following statement contains a magic number: if(bytes < 1024)              {                  return bytes + " B";              }              else if(bytes < 1024 * 1024)              {                  var converted = Math.Round(bytes / 1024.0' 1);                  return converted + " KB";              }              else if (bytes < 1024 * 1024 * 1024)              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0) ' 1);                  return converted + " MB";              }              else              {                  var converted = Math.Round(bytes / (1024.0 * 1024.0 * 1024.0)' 1);                  return converted + " GB";              }
Magic Number,PowerArgs.Cli,Layout,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Helpers\Layout.cs,CenterVertically,The following statement contains a magic number: parent.SynchronizeForLifetime(nameof(ConsoleControl.Bounds)' () =>              {                  if (parent.Height == 0 || child.Height == 0) return;                    var gap = parent.Height - child.Height;                  var y = gap / 2;                  child.Y = Math.Max(0' y);              }' parent.LifetimeManager);
Magic Number,PowerArgs.Cli,Layout,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Helpers\Layout.cs,CenterHorizontally,The following statement contains a magic number: Action syncAction = () =>              {                  if (parent.Width == 0 || child.Width == 0) return;                    var gap = parent.Width - child.Width;                  var x = gap / 2;                  child.X = Math.Max(0'x);              };
Magic Number,PowerArgs.Cli,Layout,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Helpers\Layout.cs,FillAndPreserveAspectRatio,The following statement contains a magic number: Action syncAction = () =>              {                  if (parent.Width == 0 || parent.Height == 0) return;                    var aspectRatio = (float)child.Width / child.Height;                  var newW = parent.Width - (effectivePadding.Left + effectivePadding.Right);                  var newH = (int)Math.Round(newW / aspectRatio);                    if (newH > parent.Height)                  {                      newH = parent.Height;                      newW = (int)Math.Round(newH * aspectRatio);                  }                    var newLeft = (parent.Width - newW) / 2;                  var newTop = (parent.Height - newH) / 2;                    child.Bounds = new Rectangle(newLeft' newTop' newW' newH);              };
Magic Number,PowerArgs.Cli,Layout,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Helpers\Layout.cs,FillAndPreserveAspectRatio,The following statement contains a magic number: Action syncAction = () =>              {                  if (parent.Width == 0 || parent.Height == 0) return;                    var aspectRatio = (float)child.Width / child.Height;                  var newW = parent.Width - (effectivePadding.Left + effectivePadding.Right);                  var newH = (int)Math.Round(newW / aspectRatio);                    if (newH > parent.Height)                  {                      newH = parent.Height;                      newW = (int)Math.Round(newH * aspectRatio);                  }                    var newLeft = (parent.Width - newW) / 2;                  var newTop = (parent.Height - newH) / 2;                    child.Bounds = new Rectangle(newLeft' newTop' newW' newH);              };
Magic Number,PowerArgs.Cli,ViewModelBinding,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Markup\MarkupParser.cs,ViewModelBinding,The following statement contains a magic number: var observableObject = trace[trace.Count - 2].Value as ObservableObject;
Magic Number,PowerArgs.Cli,MarkupParser,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Markup\MarkupParser.cs,SetPropertyFromTextValue,The following statement contains a magic number: if (isObservable)              {                  var observablePath = textValue.Substring(1' textValue.Length - 2);                  var viewModelObservable = context.CurrentViewModel as ObservableObject;                  if (viewModelObservable == null) throw new InvalidOperationException("View model is not observable");                  new ViewModelBinding(control' property' viewModelObservable' observablePath);              }              else if(property.HasAttr<MarkupPropertyAttribute>())              {                  property.Attr<MarkupPropertyAttribute>().Processor.Process(context);              }              else if (property.PropertyType == typeof(string))              {                  property.SetValue(control' textValue);              }              else if (property.PropertyType == typeof(ConsoleString))              {                  property.SetValue(control' new ConsoleString(textValue));              }              else if (property.PropertyType.IsEnum)              {                  var enumVal = Enum.Parse(property.PropertyType' textValue);                  property.SetValue(control' enumVal);              }              else if (property.PropertyType == typeof(Event))              {                  Event ev = property.GetValue(control) as Event;                  var target = context.CurrentViewModel;                  Action handler = () =>                  {                      var method = target.GetType().GetMethod(textValue' new Type[0]);                      if (method != null)                      {                          method.Invoke(target' new object[0]);                      }                      else                      {                          var action = target.GetType().GetProperty(textValue);                          if (action == null || action.PropertyType != typeof(Action))                          {                              throw new InvalidOperationException("Not a method or action");                          }                            ((Action)action.GetValue(target)).Invoke();                      }                  };                    ev.SubscribeForLifetime(handler' control.LifetimeManager);              }              else              {                  var parseMethod = property.PropertyType.GetMethod("Parse"' new Type[] { typeof(string) });                  var parsed = parseMethod.Invoke(null' new object[] { textValue });                  property.SetValue(control' parsed);              }
Magic Number,PowerArgs.Cli,GridPage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\GridPage.cs,GridPage,The following statement contains a magic number: filterLabel = Add(new Label() { Y = 2' Text = "Filter:".ToConsoleString()' Width = "Filter:".Length });
Magic Number,PowerArgs.Cli,GridPage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\GridPage.cs,GridPage,The following statement contains a magic number: FilterTextBox = Add(new TextBox() { Y = 2' X = filterLabel.Text.Length });
Magic Number,PowerArgs.Cli,GridPage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\GridPage.cs,GridPage,The following statement contains a magic number: Grid = Add(new Grid() { Y = 3 });
Magic Number,PowerArgs.Cli,GridPage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\GridPage.cs,HandleResize,The following statement contains a magic number: if (CommandBar.Controls.Count == 0)              {                  Grid.Y = 2;                  FilterTextBox.Y = 1;                  filterLabel.Y = 1;                  Grid.Height = this.Height - 2;              }              else              {                  Grid.Y = 3;                  FilterTextBox.Y = 2;                  filterLabel.Y = 2;                  Grid.Height = this.Height - 3;              }
Magic Number,PowerArgs.Cli,GridPage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\GridPage.cs,HandleResize,The following statement contains a magic number: if (CommandBar.Controls.Count == 0)              {                  Grid.Y = 2;                  FilterTextBox.Y = 1;                  filterLabel.Y = 1;                  Grid.Height = this.Height - 2;              }              else              {                  Grid.Y = 3;                  FilterTextBox.Y = 2;                  filterLabel.Y = 2;                  Grid.Height = this.Height - 3;              }
Magic Number,PowerArgs.Cli,GridPage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\GridPage.cs,HandleResize,The following statement contains a magic number: if (CommandBar.Controls.Count == 0)              {                  Grid.Y = 2;                  FilterTextBox.Y = 1;                  filterLabel.Y = 1;                  Grid.Height = this.Height - 2;              }              else              {                  Grid.Y = 3;                  FilterTextBox.Y = 2;                  filterLabel.Y = 2;                  Grid.Height = this.Height - 3;              }
Magic Number,PowerArgs.Cli,GridPage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\GridPage.cs,HandleResize,The following statement contains a magic number: if (CommandBar.Controls.Count == 0)              {                  Grid.Y = 2;                  FilterTextBox.Y = 1;                  filterLabel.Y = 1;                  Grid.Height = this.Height - 2;              }              else              {                  Grid.Y = 3;                  FilterTextBox.Y = 2;                  filterLabel.Y = 2;                  Grid.Height = this.Height - 3;              }
Magic Number,PowerArgs.Cli,GridPage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\GridPage.cs,HandleResize,The following statement contains a magic number: if (CommandBar.Controls.Count == 0)              {                  Grid.Y = 2;                  FilterTextBox.Y = 1;                  filterLabel.Y = 1;                  Grid.Height = this.Height - 2;              }              else              {                  Grid.Y = 3;                  FilterTextBox.Y = 2;                  filterLabel.Y = 2;                  Grid.Height = this.Height - 3;              }
Magic Number,PowerArgs.Cli,GridPage,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\GridPage.cs,HandleResize,The following statement contains a magic number: if (CommandBar.Controls.Count == 0)              {                  Grid.Y = 2;                  FilterTextBox.Y = 1;                  filterLabel.Y = 1;                  Grid.Height = this.Height - 2;              }              else              {                  Grid.Y = 3;                  FilterTextBox.Y = 2;                  filterLabel.Y = 2;                  Grid.Height = this.Height - 3;              }
Magic Number,PowerArgs.Cli,Page,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\Page.cs,ShowProgressOperationsDialog,The following statement contains a magic number: progressOperationManagerDialog = new Dialog(progressOperationManagerControl) { MaxHeight = 40 };
Magic Number,PowerArgs.Cli,Page,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\Page.cs,EscapeKeyHandler,The following statement contains a magic number: if (PageStack.GetSegments(PageStack.CurrentPath).Length > 1)              {                  PageStack.TryUp();              }              else if(consolePageApp.AllowEscapeToExit && consolePageApp.PromptBeforeExit)              {                  Dialog.ShowMessage("Are you sure you want to quit?".ToConsoleString()' (choice) =>                   {                       if(choice != null && choice.DisplayText.StringValue == "Yes")                       {                           Application.Stop();                       }                     }' true' 10' new DialogButton() { DisplayText = "Yes".ToConsoleString() }' new DialogButton() { DisplayText = "No".ToConsoleString() });              }              else if(consolePageApp.AllowEscapeToExit)              {                  Application.Stop();              }
Magic Number,PowerArgs.Cli,PageStack,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Pages\PageStack.cs,TryResolveRoute,The following statement contains a magic number: foreach (var route in routes.Keys)              {                  var variablesCandidate = new Dictionary<string' string>();                  var routeSegments = route.Split('/');                    if(pathSegments.Length == routeSegments.Length)                  {                      // the path and route has the same # of segments                  }                  else if(routeSegments.Length > pathSegments.Length)                  {                      // path can't match route because the path is too short' skip it                      continue;                  }                  else if(pathSegments.Length > routeSegments.Length && route.Contains("{*}"))                  {                      // this route supports dynamic routing so it's ok to keep checking if the path is longer than the route                  }                  else                  {                      continue;                  }                    bool candidateIsGood = true;                  for(int i = 0; i < routeSegments.Length; i++)                  {                      var routeSegment = routeSegments[i];                      var pathSegment = pathSegments[i];                        if(routeSegment.StartsWith("{") && routeSegment.EndsWith("}"))                      {                          var variableName = routeSegment.Substring(1' routeSegment.Length - 2);                            if (variableName == "*")                          {                              var restOfPathValue = "";                              for(int j = i; j < pathSegments.Length; j++)                              {                                  restOfPathValue += pathSegments[j]+"/";                              }                              restOfPathValue = restOfPathValue.Substring(0' restOfPathValue.Length - 1);                              variablesCandidate.Add(variableName' restOfPathValue);                              break;                          }                          else                          {                              variablesCandidate.Add(variableName' pathSegment);                          }                      }                      else if(routeSegment.Equals(pathSegment' StringComparison.InvariantCultureIgnoreCase) == false)                      {                          candidateIsGood = false;                          break;                      }                  }                    if(candidateIsGood)                  {                      page = routes[route]();                      page.RouteVariables = new ReadOnlyDictionary<string' string>(variablesCandidate);                      page.Path = path;                      return true;                  }              }
Magic Number,PowerArgs.Cli.Physics,Floater,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Floater.cs,Floater,The following statement contains a magic number: this.Governor.Rate = TimeSpan.FromSeconds(.03);
Magic Number,PowerArgs.Cli.Physics,Floater,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Floater.cs,Evaluate,The following statement contains a magic number: if (rand.NextDouble() > .5) dX = -dX;
Magic Number,PowerArgs.Cli.Physics,Floater,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Floater.cs,Evaluate,The following statement contains a magic number: if (rand.NextDouble() > .5) dY = -dY;
Magic Number,PowerArgs.Cli.Physics,Roamer,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Roamer.cs,Roamer,The following statement contains a magic number: Governor.Rate = TimeSpan.FromSeconds(.1);
Magic Number,PowerArgs.Cli.Physics,Seeker,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Seeker.cs,Seeker,The following statement contains a magic number: Governor.Rate = TimeSpan.FromSeconds(.1);
Magic Number,PowerArgs.Cli.Physics,Seeker,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Seeker.cs,Evaluate,The following statement contains a magic number: if (IsSeeking && Element.CalculateDistanceTo(Seekee) < 1)              {                  var myLeft = Seekee.CenterX() - (Element.Width / 2);                  var myTop = Seekee.CenterY() - (Element.Height / 2);                  Element.MoveTo(myLeft' myTop);                  SeekerSpeed.SpeedX = 0;                  SeekerSpeed.SpeedY = 0;                  if(RemoveWhenReached)                  {                      this.Lifetime.Dispose();                  }              }              else if (IsSeeking)              {                  currentForce = new Force(SeekerSpeed' accelleration' Element.Center().CalculateAngleTo(Seekee.Center()));              }
Magic Number,PowerArgs.Cli.Physics,Seeker,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Seeker.cs,Evaluate,The following statement contains a magic number: if (IsSeeking && Element.CalculateDistanceTo(Seekee) < 1)              {                  var myLeft = Seekee.CenterX() - (Element.Width / 2);                  var myTop = Seekee.CenterY() - (Element.Height / 2);                  Element.MoveTo(myLeft' myTop);                  SeekerSpeed.SpeedX = 0;                  SeekerSpeed.SpeedY = 0;                  if(RemoveWhenReached)                  {                      this.Lifetime.Dispose();                  }              }              else if (IsSeeking)              {                  currentForce = new Force(SeekerSpeed' accelleration' Element.Center().CalculateAngleTo(Seekee.Center()));              }
Magic Number,PowerArgs.Cli.Physics,SpaceExtensions,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Space.cs,GetOppositeAngle,The following statement contains a magic number: if (angle < 180)              {                  ret = angle + 180;              }              else              {                  ret = angle - 180;              }
Magic Number,PowerArgs.Cli.Physics,SpaceExtensions,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Space.cs,GetOppositeAngle,The following statement contains a magic number: if (angle < 180)              {                  ret = angle + 180;              }              else              {                  ret = angle - 180;              }
Magic Number,PowerArgs.Cli.Physics,SpaceExtensions,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Space.cs,GetOppositeAngle,The following statement contains a magic number: if (angle < 180)              {                  ret = angle + 180;              }              else              {                  ret = angle - 180;              }
Magic Number,PowerArgs.Cli.Physics,SpaceExtensions,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Space.cs,GetOppositeAngle,The following statement contains a magic number: if (ret == 360) ret = 0;
Magic Number,PowerArgs.Cli.Physics,SpaceExtensions,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Space.cs,CalculateAngleTo,The following statement contains a magic number: if (dy == 0 && dx > 0) return 0;              else if (dy == 0) return 180;              else if (dx == 0 && dy > 0) return 90;              else if (dx == 0) return 270;
Magic Number,PowerArgs.Cli.Physics,SpaceExtensions,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Space.cs,CalculateAngleTo,The following statement contains a magic number: if (dy == 0 && dx > 0) return 0;              else if (dy == 0) return 180;              else if (dx == 0 && dy > 0) return 90;              else if (dx == 0) return 270;
Magic Number,PowerArgs.Cli.Physics,SpaceExtensions,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Space.cs,CalculateAngleTo,The following statement contains a magic number: if (dy == 0 && dx > 0) return 0;              else if (dy == 0) return 180;              else if (dx == 0 && dy > 0) return 90;              else if (dx == 0) return 270;
Magic Number,PowerArgs.Cli.Physics,SpaceExtensions,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Space.cs,CalculateAngleTo,The following statement contains a magic number: if (dx >= 0 && dy >= 0)              {                  // Sin(a) = dy / d                  radians = Math.Asin(dy / d);                  increment = 0;                }              else if (dx < 0 && dy > 0)              {                  // Sin(a) = dx / d                  radians = Math.Asin(-dx / d);                  increment = 90;              }              else if (dy < 0 && dx < 0)              {                  radians = Math.Asin(-dy / d);                  increment = 180;              }              else if (dx > 0 && dy < 0)              {                  radians = Math.Asin(dx / d);                  increment = 270;              }              else              {                  throw new Exception();              }
Magic Number,PowerArgs.Cli.Physics,SpaceExtensions,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Space.cs,CalculateAngleTo,The following statement contains a magic number: if (dx >= 0 && dy >= 0)              {                  // Sin(a) = dy / d                  radians = Math.Asin(dy / d);                  increment = 0;                }              else if (dx < 0 && dy > 0)              {                  // Sin(a) = dx / d                  radians = Math.Asin(-dx / d);                  increment = 90;              }              else if (dy < 0 && dx < 0)              {                  radians = Math.Asin(-dy / d);                  increment = 180;              }              else if (dx > 0 && dy < 0)              {                  radians = Math.Asin(dx / d);                  increment = 270;              }              else              {                  throw new Exception();              }
Magic Number,PowerArgs.Cli.Physics,SpaceExtensions,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Space.cs,CalculateAngleTo,The following statement contains a magic number: if (dx >= 0 && dy >= 0)              {                  // Sin(a) = dy / d                  radians = Math.Asin(dy / d);                  increment = 0;                }              else if (dx < 0 && dy > 0)              {                  // Sin(a) = dx / d                  radians = Math.Asin(-dx / d);                  increment = 90;              }              else if (dy < 0 && dx < 0)              {                  radians = Math.Asin(-dy / d);                  increment = 180;              }              else if (dx > 0 && dy < 0)              {                  radians = Math.Asin(dx / d);                  increment = 270;              }              else              {                  throw new Exception();              }
Magic Number,PowerArgs.Cli.Physics,SpaceExtensions,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Space.cs,CalculateAngleTo,The following statement contains a magic number: var ret = (float)(increment + radians * 180 / Math.PI);
Magic Number,PowerArgs.Cli.Physics,SpaceExtensions,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Space.cs,CalculateAngleTo,The following statement contains a magic number: if (ret == 360) ret = 0;
Magic Number,PowerArgs.Cli.Physics,SpaceExtensions,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Space.cs,GetHitDirection,The following statement contains a magic number: rightProximity = ((int)((rightProximity * 10) + .5f)) / 10f;
Magic Number,PowerArgs.Cli.Physics,SpaceExtensions,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Space.cs,GetHitDirection,The following statement contains a magic number: leftProximity = ((int)((leftProximity * 10) + .5f)) / 10f;
Magic Number,PowerArgs.Cli.Physics,SpaceExtensions,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Space.cs,GetHitDirection,The following statement contains a magic number: topProximity = ((int)((topProximity * 10) + .5f)) / 10f;
Magic Number,PowerArgs.Cli.Physics,SpaceExtensions,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\Space.cs,GetHitDirection,The following statement contains a magic number: bottomProximity = ((int)((bottomProximity * 10) + .5f)) / 10f;
Magic Number,PowerArgs.Cli.Physics,SpacetimePanel,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpacetimePanel.cs,SpacetimePanel,The following statement contains a magic number: this.SpaceTime = time ?? new SpaceTime(w' h' increment: TimeSpan.FromSeconds(.05));
Magic Number,PowerArgs.Cli.Physics,SpacetimePanel,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpacetimePanel.cs,SpacetimePanel,The following statement contains a magic number: this.AddedToVisualTree.SubscribeForLifetime(() =>              {                  LifetimeManager.Manage(Application.SetInterval(() =>                  {                      RealTimeViewing?.Evaluate();                  }' TimeSpan.FromSeconds(.1)));              }' this.LifetimeManager);
Magic Number,PowerArgs.Cli.Physics,SpacetimePanel,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpacetimePanel.cs,SizeAndLocate,The following statement contains a magic number: if (x != r.X || y != r.Y || w != r.Width || h != r.Height)              {                  r.Width = w;                  r.Height = h;  #if DEBUG                  if (float.IsInfinity(x) || float.IsNaN(x) || x >= -100000 == false && x < 100000 == false) throw new Exception("Out of bounds: " + x + "'" + y);  #endif                    r.X = x;                  r.Y = y;                    return true;              }              else              {                  return false;              }
Magic Number,PowerArgs.Cli.Physics,SpacetimePanel,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpacetimePanel.cs,SizeAndLocate,The following statement contains a magic number: if (x != r.X || y != r.Y || w != r.Width || h != r.Height)              {                  r.Width = w;                  r.Height = h;  #if DEBUG                  if (float.IsInfinity(x) || float.IsNaN(x) || x >= -100000 == false && x < 100000 == false) throw new Exception("Out of bounds: " + x + "'" + y);  #endif                    r.X = x;                  r.Y = y;                    return true;              }              else              {                  return false;              }
Magic Number,PowerArgs.Cli.Physics,SpeedTracker,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpeedTracker.cs,Evaluate,The following statement contains a magic number: if (hitPrediction.Type != HitType.None)              {                  float angle;                    if (hitPrediction.ElementHit != null)                  {                      angle = Element.Center().CalculateAngleTo(hitPrediction.ElementHit.Center());                  }                  else if(hitPrediction.Direction == Direction.Left)                  {                      angle = 180;                  }                  else if(hitPrediction.Direction == Direction.Right)                  {                      angle = 0;                  }                  else if(hitPrediction.Direction == Direction.Up)                  {                      angle = 270;                  }                  else if(hitPrediction.Direction == Direction.Down)                  {                      angle = 90;                  }                  else                  {                      throw new NotSupportedException($"Unsupported direction: {hitPrediction.Direction}");                  }                    if (ImpactOccurred != null && haveMovedSinceLastHitDetection)                  {                      ImpactOccurred.Fire(new Impact()                      {                          Angle = angle'                          Bounds = hitPrediction.BoundsOfItemBeingHit'                          ElementHit = hitPrediction.ElementHit                      });                  }                  haveMovedSinceLastHitDetection = false;                  var testArea = Rectangular.Create(Element.Left + dx' Element.Top + dy' Element.Width' Element.Height);                    if (hitPrediction.Direction == Direction.Down || hitPrediction.Direction == Direction.Up)                  {                      SpeedY = -SpeedY * Bounciness;                      SpeedX = SpeedX * ImpactFriction;                  }                  else if (hitPrediction.Direction == Direction.Left || hitPrediction.Direction == Direction.Right)                  {                      SpeedX = -SpeedX * Bounciness;                      SpeedY = SpeedY * ImpactFriction;                  }                  else                  {                      SpeedX = -SpeedX * Bounciness;                      SpeedY = -SpeedY * Bounciness;                  }              }              else              {                  var oldLocation = Element.CopyBounds();                  Element.MoveBy(dx' dy);                    this.Angle = oldLocation.Center().CalculateAngleTo(Element.Center());                  haveMovedSinceLastHitDetection = true;              }
Magic Number,PowerArgs.Cli.Physics,SpeedTracker,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpeedTracker.cs,Evaluate,The following statement contains a magic number: if (hitPrediction.Type != HitType.None)              {                  float angle;                    if (hitPrediction.ElementHit != null)                  {                      angle = Element.Center().CalculateAngleTo(hitPrediction.ElementHit.Center());                  }                  else if(hitPrediction.Direction == Direction.Left)                  {                      angle = 180;                  }                  else if(hitPrediction.Direction == Direction.Right)                  {                      angle = 0;                  }                  else if(hitPrediction.Direction == Direction.Up)                  {                      angle = 270;                  }                  else if(hitPrediction.Direction == Direction.Down)                  {                      angle = 90;                  }                  else                  {                      throw new NotSupportedException($"Unsupported direction: {hitPrediction.Direction}");                  }                    if (ImpactOccurred != null && haveMovedSinceLastHitDetection)                  {                      ImpactOccurred.Fire(new Impact()                      {                          Angle = angle'                          Bounds = hitPrediction.BoundsOfItemBeingHit'                          ElementHit = hitPrediction.ElementHit                      });                  }                  haveMovedSinceLastHitDetection = false;                  var testArea = Rectangular.Create(Element.Left + dx' Element.Top + dy' Element.Width' Element.Height);                    if (hitPrediction.Direction == Direction.Down || hitPrediction.Direction == Direction.Up)                  {                      SpeedY = -SpeedY * Bounciness;                      SpeedX = SpeedX * ImpactFriction;                  }                  else if (hitPrediction.Direction == Direction.Left || hitPrediction.Direction == Direction.Right)                  {                      SpeedX = -SpeedX * Bounciness;                      SpeedY = SpeedY * ImpactFriction;                  }                  else                  {                      SpeedX = -SpeedX * Bounciness;                      SpeedY = -SpeedY * Bounciness;                  }              }              else              {                  var oldLocation = Element.CopyBounds();                  Element.MoveBy(dx' dy);                    this.Angle = oldLocation.Center().CalculateAngleTo(Element.Center());                  haveMovedSinceLastHitDetection = true;              }
Magic Number,PowerArgs.Cli.Physics,SpeedTracker,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpeedTracker.cs,Evaluate,The following statement contains a magic number: if (hitPrediction.Type != HitType.None)              {                  float angle;                    if (hitPrediction.ElementHit != null)                  {                      angle = Element.Center().CalculateAngleTo(hitPrediction.ElementHit.Center());                  }                  else if(hitPrediction.Direction == Direction.Left)                  {                      angle = 180;                  }                  else if(hitPrediction.Direction == Direction.Right)                  {                      angle = 0;                  }                  else if(hitPrediction.Direction == Direction.Up)                  {                      angle = 270;                  }                  else if(hitPrediction.Direction == Direction.Down)                  {                      angle = 90;                  }                  else                  {                      throw new NotSupportedException($"Unsupported direction: {hitPrediction.Direction}");                  }                    if (ImpactOccurred != null && haveMovedSinceLastHitDetection)                  {                      ImpactOccurred.Fire(new Impact()                      {                          Angle = angle'                          Bounds = hitPrediction.BoundsOfItemBeingHit'                          ElementHit = hitPrediction.ElementHit                      });                  }                  haveMovedSinceLastHitDetection = false;                  var testArea = Rectangular.Create(Element.Left + dx' Element.Top + dy' Element.Width' Element.Height);                    if (hitPrediction.Direction == Direction.Down || hitPrediction.Direction == Direction.Up)                  {                      SpeedY = -SpeedY * Bounciness;                      SpeedX = SpeedX * ImpactFriction;                  }                  else if (hitPrediction.Direction == Direction.Left || hitPrediction.Direction == Direction.Right)                  {                      SpeedX = -SpeedX * Bounciness;                      SpeedY = SpeedY * ImpactFriction;                  }                  else                  {                      SpeedX = -SpeedX * Bounciness;                      SpeedY = -SpeedY * Bounciness;                  }              }              else              {                  var oldLocation = Element.CopyBounds();                  Element.MoveBy(dx' dy);                    this.Angle = oldLocation.Center().CalculateAngleTo(Element.Center());                  haveMovedSinceLastHitDetection = true;              }
Magic Number,PowerArgs.Cli.Physics,SpeedTracker,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpeedTracker.cs,FindEdgesGivenHyp,The following statement contains a magic number: if (angle >= 0 && angle < 90)              {                  angleTemp = angle;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = d1;                  dy = d2;              }              else if (angle >= 90 && angle < 180)              {                  angleTemp = angle - 90;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = -d2;                  dy = d1;              }              else if (angle >= 180 && angle < 270)              {                  angleTemp = angle - 180;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = -d1;                  dy = -d2;              }              else if (angle >= 270 && angle < 360)              {                  angleTemp = angle - 270;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = d2;                  dy = -d1;              }              else              {                  throw new ArgumentOutOfRangeException("Angle must be >= 0 and < 360");              }
Magic Number,PowerArgs.Cli.Physics,SpeedTracker,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpeedTracker.cs,FindEdgesGivenHyp,The following statement contains a magic number: if (angle >= 0 && angle < 90)              {                  angleTemp = angle;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = d1;                  dy = d2;              }              else if (angle >= 90 && angle < 180)              {                  angleTemp = angle - 90;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = -d2;                  dy = d1;              }              else if (angle >= 180 && angle < 270)              {                  angleTemp = angle - 180;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = -d1;                  dy = -d2;              }              else if (angle >= 270 && angle < 360)              {                  angleTemp = angle - 270;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = d2;                  dy = -d1;              }              else              {                  throw new ArgumentOutOfRangeException("Angle must be >= 0 and < 360");              }
Magic Number,PowerArgs.Cli.Physics,SpeedTracker,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpeedTracker.cs,FindEdgesGivenHyp,The following statement contains a magic number: if (angle >= 0 && angle < 90)              {                  angleTemp = angle;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = d1;                  dy = d2;              }              else if (angle >= 90 && angle < 180)              {                  angleTemp = angle - 90;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = -d2;                  dy = d1;              }              else if (angle >= 180 && angle < 270)              {                  angleTemp = angle - 180;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = -d1;                  dy = -d2;              }              else if (angle >= 270 && angle < 360)              {                  angleTemp = angle - 270;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = d2;                  dy = -d1;              }              else              {                  throw new ArgumentOutOfRangeException("Angle must be >= 0 and < 360");              }
Magic Number,PowerArgs.Cli.Physics,SpeedTracker,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpeedTracker.cs,FindEdgesGivenHyp,The following statement contains a magic number: if (angle >= 0 && angle < 90)              {                  angleTemp = angle;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = d1;                  dy = d2;              }              else if (angle >= 90 && angle < 180)              {                  angleTemp = angle - 90;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = -d2;                  dy = d1;              }              else if (angle >= 180 && angle < 270)              {                  angleTemp = angle - 180;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = -d1;                  dy = -d2;              }              else if (angle >= 270 && angle < 360)              {                  angleTemp = angle - 270;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = d2;                  dy = -d1;              }              else              {                  throw new ArgumentOutOfRangeException("Angle must be >= 0 and < 360");              }
Magic Number,PowerArgs.Cli.Physics,SpeedTracker,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpeedTracker.cs,FindEdgesGivenHyp,The following statement contains a magic number: if (angle >= 0 && angle < 90)              {                  angleTemp = angle;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = d1;                  dy = d2;              }              else if (angle >= 90 && angle < 180)              {                  angleTemp = angle - 90;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = -d2;                  dy = d1;              }              else if (angle >= 180 && angle < 270)              {                  angleTemp = angle - 180;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = -d1;                  dy = -d2;              }              else if (angle >= 270 && angle < 360)              {                  angleTemp = angle - 270;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = d2;                  dy = -d1;              }              else              {                  throw new ArgumentOutOfRangeException("Angle must be >= 0 and < 360");              }
Magic Number,PowerArgs.Cli.Physics,SpeedTracker,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpeedTracker.cs,FindEdgesGivenHyp,The following statement contains a magic number: if (angle >= 0 && angle < 90)              {                  angleTemp = angle;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = d1;                  dy = d2;              }              else if (angle >= 90 && angle < 180)              {                  angleTemp = angle - 90;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = -d2;                  dy = d1;              }              else if (angle >= 180 && angle < 270)              {                  angleTemp = angle - 180;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = -d1;                  dy = -d2;              }              else if (angle >= 270 && angle < 360)              {                  angleTemp = angle - 270;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = d2;                  dy = -d1;              }              else              {                  throw new ArgumentOutOfRangeException("Angle must be >= 0 and < 360");              }
Magic Number,PowerArgs.Cli.Physics,SpeedTracker,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpeedTracker.cs,FindEdgesGivenHyp,The following statement contains a magic number: if (angle >= 0 && angle < 90)              {                  angleTemp = angle;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = d1;                  dy = d2;              }              else if (angle >= 90 && angle < 180)              {                  angleTemp = angle - 90;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = -d2;                  dy = d1;              }              else if (angle >= 180 && angle < 270)              {                  angleTemp = angle - 180;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = -d1;                  dy = -d2;              }              else if (angle >= 270 && angle < 360)              {                  angleTemp = angle - 270;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = d2;                  dy = -d1;              }              else              {                  throw new ArgumentOutOfRangeException("Angle must be >= 0 and < 360");              }
Magic Number,PowerArgs.Cli.Physics,SpeedTracker,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpeedTracker.cs,FindEdgesGivenHyp,The following statement contains a magic number: if (angle >= 0 && angle < 90)              {                  angleTemp = angle;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = d1;                  dy = d2;              }              else if (angle >= 90 && angle < 180)              {                  angleTemp = angle - 90;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = -d2;                  dy = d1;              }              else if (angle >= 180 && angle < 270)              {                  angleTemp = angle - 180;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = -d1;                  dy = -d2;              }              else if (angle >= 270 && angle < 360)              {                  angleTemp = angle - 270;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = d2;                  dy = -d1;              }              else              {                  throw new ArgumentOutOfRangeException("Angle must be >= 0 and < 360");              }
Magic Number,PowerArgs.Cli.Physics,SpeedTracker,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpeedTracker.cs,FindEdgesGivenHyp,The following statement contains a magic number: if (angle >= 0 && angle < 90)              {                  angleTemp = angle;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = d1;                  dy = d2;              }              else if (angle >= 90 && angle < 180)              {                  angleTemp = angle - 90;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = -d2;                  dy = d1;              }              else if (angle >= 180 && angle < 270)              {                  angleTemp = angle - 180;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = -d1;                  dy = -d2;              }              else if (angle >= 270 && angle < 360)              {                  angleTemp = angle - 270;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = d2;                  dy = -d1;              }              else              {                  throw new ArgumentOutOfRangeException("Angle must be >= 0 and < 360");              }
Magic Number,PowerArgs.Cli.Physics,SpeedTracker,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\CLI\Physics\Space\SpeedTracker.cs,FindEdgesGivenHyp,The following statement contains a magic number: if (angle >= 0 && angle < 90)              {                  angleTemp = angle;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = d1;                  dy = d2;              }              else if (angle >= 90 && angle < 180)              {                  angleTemp = angle - 90;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = -d2;                  dy = d1;              }              else if (angle >= 180 && angle < 270)              {                  angleTemp = angle - 180;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = -d1;                  dy = -d2;              }              else if (angle >= 270 && angle < 360)              {                  angleTemp = angle - 270;                  FindDeltas(angleTemp' hyp' out d1' out d2);                  dx = d2;                  dy = -d1;              }              else              {                  throw new ArgumentOutOfRangeException("Angle must be >= 0 and < 360");              }
Magic Number,PowerArgs.EasterEggs,MatrixWriter,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\MatrixMode.cs,Loop,The following statement contains a magic number: double sleep = 30;
Magic Number,PowerArgs.EasterEggs,MatrixWriter,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\MatrixMode.cs,Loop,The following statement contains a magic number: try              {                  char last = ' ';                  while (true)                  {                      if (Console.CursorLeft < Console.BufferWidth - 1)                      {                          Console.BackgroundColor = ConsoleColor.Green;                          wrapped.Write(' ');                          if (Console.CursorLeft > 0) Console.CursorLeft--;                      }                      Console.BackgroundColor = resetBG;                        while (sw.ElapsedMilliseconds < sleep) ;                      sleep = sleep * .97;                        lock (chars)                      {                          if (chars.Count > 0)                          {                              var c = chars.Dequeue();                              if (c == '\r') continue;                              if (sleep < 6)                              {                                  Thread.Sleep(r.Next(20' 100));                                  sleep = 30;                              }                                Console.ForegroundColor = ConsoleColor.DarkGreen;                              if (Console.CursorLeft < Console.BufferWidth - 1)                              {                                  wrapped.Write(' ');                                  Console.CursorLeft--;                              }                              wrapped.Write(c);                              last = c;                          }                          else if (cancelled)                          {                              break;                          }                      }                        sw.Restart();                  }              }              finally              {                  Console.ForegroundColor = resetFG;                  Console.BackgroundColor = resetBG;              }
Magic Number,PowerArgs.EasterEggs,MatrixWriter,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\MatrixMode.cs,Loop,The following statement contains a magic number: try              {                  char last = ' ';                  while (true)                  {                      if (Console.CursorLeft < Console.BufferWidth - 1)                      {                          Console.BackgroundColor = ConsoleColor.Green;                          wrapped.Write(' ');                          if (Console.CursorLeft > 0) Console.CursorLeft--;                      }                      Console.BackgroundColor = resetBG;                        while (sw.ElapsedMilliseconds < sleep) ;                      sleep = sleep * .97;                        lock (chars)                      {                          if (chars.Count > 0)                          {                              var c = chars.Dequeue();                              if (c == '\r') continue;                              if (sleep < 6)                              {                                  Thread.Sleep(r.Next(20' 100));                                  sleep = 30;                              }                                Console.ForegroundColor = ConsoleColor.DarkGreen;                              if (Console.CursorLeft < Console.BufferWidth - 1)                              {                                  wrapped.Write(' ');                                  Console.CursorLeft--;                              }                              wrapped.Write(c);                              last = c;                          }                          else if (cancelled)                          {                              break;                          }                      }                        sw.Restart();                  }              }              finally              {                  Console.ForegroundColor = resetFG;                  Console.BackgroundColor = resetBG;              }
Magic Number,PowerArgs.EasterEggs,MatrixWriter,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\MatrixMode.cs,Loop,The following statement contains a magic number: try              {                  char last = ' ';                  while (true)                  {                      if (Console.CursorLeft < Console.BufferWidth - 1)                      {                          Console.BackgroundColor = ConsoleColor.Green;                          wrapped.Write(' ');                          if (Console.CursorLeft > 0) Console.CursorLeft--;                      }                      Console.BackgroundColor = resetBG;                        while (sw.ElapsedMilliseconds < sleep) ;                      sleep = sleep * .97;                        lock (chars)                      {                          if (chars.Count > 0)                          {                              var c = chars.Dequeue();                              if (c == '\r') continue;                              if (sleep < 6)                              {                                  Thread.Sleep(r.Next(20' 100));                                  sleep = 30;                              }                                Console.ForegroundColor = ConsoleColor.DarkGreen;                              if (Console.CursorLeft < Console.BufferWidth - 1)                              {                                  wrapped.Write(' ');                                  Console.CursorLeft--;                              }                              wrapped.Write(c);                              last = c;                          }                          else if (cancelled)                          {                              break;                          }                      }                        sw.Restart();                  }              }              finally              {                  Console.ForegroundColor = resetFG;                  Console.BackgroundColor = resetBG;              }
Magic Number,PowerArgs.EasterEggs,MatrixWriter,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\MatrixMode.cs,Loop,The following statement contains a magic number: try              {                  char last = ' ';                  while (true)                  {                      if (Console.CursorLeft < Console.BufferWidth - 1)                      {                          Console.BackgroundColor = ConsoleColor.Green;                          wrapped.Write(' ');                          if (Console.CursorLeft > 0) Console.CursorLeft--;                      }                      Console.BackgroundColor = resetBG;                        while (sw.ElapsedMilliseconds < sleep) ;                      sleep = sleep * .97;                        lock (chars)                      {                          if (chars.Count > 0)                          {                              var c = chars.Dequeue();                              if (c == '\r') continue;                              if (sleep < 6)                              {                                  Thread.Sleep(r.Next(20' 100));                                  sleep = 30;                              }                                Console.ForegroundColor = ConsoleColor.DarkGreen;                              if (Console.CursorLeft < Console.BufferWidth - 1)                              {                                  wrapped.Write(' ');                                  Console.CursorLeft--;                              }                              wrapped.Write(c);                              last = c;                          }                          else if (cancelled)                          {                              break;                          }                      }                        sw.Restart();                  }              }              finally              {                  Console.ForegroundColor = resetFG;                  Console.BackgroundColor = resetBG;              }
Magic Number,PowerArgs.EasterEggs,MatrixWriter,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\MatrixMode.cs,Loop,The following statement contains a magic number: try              {                  char last = ' ';                  while (true)                  {                      if (Console.CursorLeft < Console.BufferWidth - 1)                      {                          Console.BackgroundColor = ConsoleColor.Green;                          wrapped.Write(' ');                          if (Console.CursorLeft > 0) Console.CursorLeft--;                      }                      Console.BackgroundColor = resetBG;                        while (sw.ElapsedMilliseconds < sleep) ;                      sleep = sleep * .97;                        lock (chars)                      {                          if (chars.Count > 0)                          {                              var c = chars.Dequeue();                              if (c == '\r') continue;                              if (sleep < 6)                              {                                  Thread.Sleep(r.Next(20' 100));                                  sleep = 30;                              }                                Console.ForegroundColor = ConsoleColor.DarkGreen;                              if (Console.CursorLeft < Console.BufferWidth - 1)                              {                                  wrapped.Write(' ');                                  Console.CursorLeft--;                              }                              wrapped.Write(c);                              last = c;                          }                          else if (cancelled)                          {                              break;                          }                      }                        sw.Restart();                  }              }              finally              {                  Console.ForegroundColor = resetFG;                  Console.BackgroundColor = resetBG;              }
Magic Number,PowerArgs.EasterEggs,MatrixMode,C:\repos\adamabdelhamed_PowerArgs\PowerArgs\HelperTypesInternal\MatrixMode.cs,Start,The following statement contains a magic number: Thread.Sleep(100);
