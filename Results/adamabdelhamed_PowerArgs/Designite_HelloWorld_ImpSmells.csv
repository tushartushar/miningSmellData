Implementation smell,Namespace,Class,File,Method,Description
Long Statement,HelloWorld,Program,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Program.cs,Main,The length of the statement  "            //Samples.HelloWorldParse._Main(args);            //  The simplest way to use the parser.  All this sample does is parse the arguments and send them back to your program. " is 170.
Long Statement,HelloWorld,Program,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Program.cs,Main,The length of the statement  "            // Samples.HelloWorldInvoke._Main(args);        //  A simple way to have the parser parse your arguments and then call a new Main method that you build. " is 152.
Long Statement,HelloWorld,Program,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Program.cs,Main,The length of the statement  "            // Samples.Git._Main(args);                     //  Sample that shows how to implement a program that accepts multiple commands and where each command takes its own set of arguments. " is 182.
Long Statement,HelloWorld.Samples,BlobDataSource,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\DataSources\BlobsDataSource.cs,LoadMoreAsync,The length of the statement  "            next = await container.ListBlobsSegmentedAsync(query.Filter' true' BlobListingDetails.All' null' (continuationToken as BlobContinuationToken)' new BlobRequestOptions()' new Microsoft.WindowsAzure.Storage.OperationContext()); " is 224.
Long Statement,HelloWorld.Samples,ContainerPage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\ContainerPage.cs,OnLoad,The length of the statement  "            var accountInfo = (from account in StorageAccountInfo.Load() where account.AccountName == accountName select account).FirstOrDefault(); " is 135.
Long Statement,HelloWorld.Samples,ContainerPage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\ContainerPage.cs,OnLoad,The length of the statement  "            currentStorageAccount = new CloudStorageAccount(new Microsoft.WindowsAzure.Storage.Auth.StorageCredentials(accountName' accountInfo.Key)' accountInfo.UseHttps); " is 160.
Long Statement,HelloWorld.Samples,ContainerPage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\ContainerPage.cs,OpenSelectedBlob,The length of the statement  "                    operation.Message = "Failed to delete blob ".ToConsoleString() + blob.Uri.ToString().ToConsoleString(ConsoleColor.Cyan); " is 120.
Long Statement,HelloWorld.Samples,ContainerPage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\ContainerPage.cs,OpenSelectedBlob,The length of the statement  "                    operation.Message = "Fiinished downloading blob ".ToConsoleString() + blob.Uri.ToString().ToConsoleString(ConsoleColor.Cyan); " is 125.
Long Statement,HelloWorld.Samples,ContainerPage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\ContainerPage.cs,OpenSelectedBlob,The length of the statement  "                    operation.Details = "The downloaded file is located here: ".ToConsoleString() + tempFile.ToConsoleString(ConsoleColor.Cyan); " is 124.
Long Statement,HelloWorld.Samples,ContainerPage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\ContainerPage.cs,DeleteSelectedBlob,The length of the statement  "                    Message = "Deleting blob ".ToConsoleString() + (Grid.SelectedItem as CloudBlob).Name.ToConsoleString(ConsoleColor.Yellow)' " is 122.
Long Statement,HelloWorld.Samples,ContainerPage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\ContainerPage.cs,DeleteSelectedBlob,The length of the statement  "                        operation.Message = "Failed to delete blob ".ToConsoleString() + (Grid.SelectedItem as CloudBlob).Name.ToConsoleString(ConsoleColor.Yellow); " is 140.
Long Statement,HelloWorld.Samples,ContainerPage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\ContainerPage.cs,DeleteSelectedBlob,The length of the statement  "                        operation.Message = "Finished deleting blob ".ToConsoleString() + (Grid.SelectedItem as CloudBlob).Name.ToConsoleString(ConsoleColor.Yellow); " is 141.
Long Statement,HelloWorld.Samples,ContainersPage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\ContainersPage.cs,OnLoad,The length of the statement  "            var accountInfo = (from account in StorageAccountInfo.Load() where account.AccountName == accountName select account).FirstOrDefault(); " is 135.
Long Statement,HelloWorld.Samples,ContainersPage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\ContainersPage.cs,OnLoad,The length of the statement  "            currentStorageAccount = new CloudStorageAccount(new Microsoft.WindowsAzure.Storage.Auth.StorageCredentials(accountName' accountInfo.Key)' accountInfo.UseHttps); " is 160.
Long Statement,HelloWorld.Samples,ContainersPage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\ContainersPage.cs,DeleteSelectedContainer,The length of the statement  "            Dialog.ConfirmYesOrNo("Are you sure you want ot delete container " + (Grid.SelectedItem as ContainerRecord).Name + "?"' () => " is 125.
Long Statement,HelloWorld.Samples,ContainersPage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\ContainersPage.cs,DeleteSelectedContainer,The length of the statement  "                var container = currentStorageAccount.CreateCloudBlobClient().GetContainerReference((Grid.SelectedItem as ContainerRecord).Name); " is 129.
Long Statement,HelloWorld.Samples,TablePage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\TablePage.cs,OnLoad,The length of the statement  "            var accountInfo = (from account in StorageAccountInfo.Load() where account.AccountName == accountName select account).FirstOrDefault(); " is 135.
Long Statement,HelloWorld.Samples,TablePage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\TablePage.cs,OnLoad,The length of the statement  "            currentStorageAccount = new CloudStorageAccount(new Microsoft.WindowsAzure.Storage.Auth.StorageCredentials(accountName' accountInfo.Key)' accountInfo.UseHttps); " is 160.
Long Statement,HelloWorld.Samples,TablePage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\TablePage.cs,OnLoad,The length of the statement  "            Grid.DataSource = new TableEntityDataSource(currentStorageAccount.CreateCloudTableClient().GetTableReference(tableName)' Application); " is 134.
Long Statement,HelloWorld.Samples,TablePage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\TablePage.cs,OnDataLoad,The length of the statement  "                    Grid.VisibleColumns.Add(new ColumnViewModel(prototype.Properties.Keys.ToList()[i].ToConsoleString(Application.Theme.H1Color))); " is 127.
Long Statement,HelloWorld.Samples,TablePage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\TablePage.cs,BeginDeleteSelectedEntityIfExists,The length of the statement  "            Dialog.ConfirmYesOrNo("Are you sure you want to delete entity ".ToConsoleString() + rowKey.ToConsoleString(ConsoleColor.Yellow) + "?"' () => " is 140.
Long Statement,HelloWorld.Samples,TablePage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\TablePage.cs,BeginDeleteSelectedEntityIfExists,The length of the statement  "                     Message = "Deleting entity ".ToConsoleString() + rowKey.ToConsoleString(Application.Theme.H1Color) + " from table " + table.Name' " is 129.
Long Statement,HelloWorld.Samples,TablePage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\TablePage.cs,BeginDeleteSelectedEntityIfExists,The length of the statement  "                          operation.Message = "Failed to delete entity ".ToConsoleString(ConsoleColor.Red) + rowKey.ToConsoleString(applicationRef.Theme.H1Color) + " from table " + table.Name; " is 166.
Long Statement,HelloWorld.Samples,TablePage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\TablePage.cs,BeginDeleteSelectedEntityIfExists,The length of the statement  "                          operation.Message = "Finished deleting entity ".ToConsoleString() + rowKey.ToConsoleString(applicationRef.Theme.H1Color) + " from table " + table.Name; " is 151.
Long Statement,HelloWorld.Samples,TablesPage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\TableListPage.cs,OnLoad,The length of the statement  "            var accountInfo = (from account in StorageAccountInfo.Load() where account.AccountName == accountName select account).FirstOrDefault(); " is 135.
Long Statement,HelloWorld.Samples,TablesPage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\TableListPage.cs,OnLoad,The length of the statement  "            currentStorageAccount = new CloudStorageAccount(new Microsoft.WindowsAzure.Storage.Auth.StorageCredentials(accountName' accountInfo.Key)' accountInfo.UseHttps); " is 160.
Long Statement,HelloWorld.Samples,CPUAndMemoryChartSample,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\CpuAndMemoryChart.cs,Run,The length of the statement  "                if (chart.ViewModel.FocusedDataSeries != null && chart.ViewModel.FocusedDataPointIndex >= 0 && chart.ViewModel.FocusedDataPointIndex < chart.ViewModel.FocusedDataSeries.DataPoints.Count && chart.ViewModel.FocusedDataSeries.DataPoints.Count > 0) " is 244.
Long Statement,HelloWorld.Samples,CPUAndMemoryChartSample,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\CpuAndMemoryChart.cs,Run,The length of the statement  "                    source.Items.Add(new { Value = ContextAssistSearchResult.FromString(chart.ViewModel.FocusedDataSeries.DataPoints[chart.ViewModel.FocusedDataPointIndex].Y + "") }); " is 163.
Long Statement,HelloWorld.Samples,CpuAndMemoryChart,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\CpuAndMemoryChart.cs,InitSeries,The length of the statement  "            cpuSeries.Threshold = new Threshold() { Value = 40' Title = "CPU Warning threshold"' Type = ThresholdType.Maximum' PlotColor = ConsoleColor.DarkGreen }; " is 152.
Long Statement,HelloWorld.Samples,CpuAndMemoryChart,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\CpuAndMemoryChart.cs,InitSeries,The length of the statement  "            memSeries.Threshold = new Threshold() { Value = 80' Title = "Memory Warning threshold" ' Type = ThresholdType.Maximum' PlotColor = ConsoleColor.DarkMagenta}; " is 157.
Long Statement,HelloWorld.Samples,CpuAndMemoryChart,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\CpuAndMemoryChart.cs,WatchCPUAndMemory,The length of the statement  "                var memUsed = Math.Round(100 - (100.0 * PerformanceInfo.GetPhysicalAvailableMemoryInMiB() / PerformanceInfo.GetTotalMemoryInMiB())' 1); " is 135.
Long Statement,HelloWorld.Samples,FileSystemBrowserApp,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\FileSystemBrowserApp.cs,CreateExplorerPage,The length of the statement  "                                Dialog.ShowMessage("Are you sure you want to delete the file ".ToConsoleString() + Path.GetFileName(deletePath).ToConsoleString(ConsoleColor.Yellow) + "?"' (response) => " is 169.
Long Statement,HelloWorld.Samples,FileSystemBrowserApp,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\FileSystemBrowserApp.cs,CreateExplorerPage,The length of the statement  "                                }' true' 12' new DialogButton() { DisplayText = "Yes".ToConsoleString() }' new DialogButton() { DisplayText = "No".ToConsoleString() }); " is 136.
Long Statement,HelloWorld.Samples,ProgressBarSample,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\ProgressBar.cs,IndeterminateSample2,The length of the statement  "            Console.WriteLine("\nThis progress bar shows indeterminate progress and removes itself when complete' polling periodically for an update"); " is 139.
Long Statement,HelloWorld.Samples,REPLInvokeArgs,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\REPLInvoke.cs,Clear,The length of the statement  "            if (Output != OutputMode.Off) Console.WriteLine(count == 1 ? "Removed 1 item" : string.Format("Removed {0} items"' count)); " is 123.
Long Statement,HelloWorld.Samples,HelloWorldInvokeArgs,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\HelloWorldInvoke.cs,Main,The length of the statement  "            Console.WriteLine("You entered StringArg '{0}' and IntArg '{1}'' switch was '{2}'"' this.StringArg' this.IntArg' this.SwitchArg); " is 129.
Complex Conditional,HelloWorld.Samples,CPUAndMemoryChartSample,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\CpuAndMemoryChart.cs,Run,The conditional expression  "chart.ViewModel.FocusedDataSeries != null && chart.ViewModel.FocusedDataPointIndex >= 0 && chart.ViewModel.FocusedDataPointIndex < chart.ViewModel.FocusedDataSeries.DataPoints.Count && chart.ViewModel.FocusedDataSeries.DataPoints.Count > 0"  is complex.
Empty Catch Block,HelloWorld.Samples,FileSystemBrowserApp,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\FileSystemBrowserApp.cs,CreateExplorerPage,The method has an empty catch block.
Magic Number,HelloWorld.Samples,TablePage,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\AzureStorageExplorerApp\Pages\TablePage.cs,OnDataLoad,The following statement contains a magic number: if (Application != null && Grid.DataView != null && Grid.DataView.Items.Count > 0)              {                  var prototype = Grid.DataView.Items.First() as DynamicTableEntity;                  Grid.VisibleColumns.Clear();                  Grid.VisibleColumns.Add(new ColumnViewModel("PartitionKey".ToConsoleString(Application.Theme.H1Color)));                  Grid.VisibleColumns.Add(new ColumnViewModel("RowKey".ToConsoleString(Application.Theme.H1Color)));                    for (int i = 0; i < prototype.Properties.Count && i < 2; i++)                  {                      Grid.VisibleColumns.Add(new ColumnViewModel(prototype.Properties.Keys.ToList()[i].ToConsoleString(Application.Theme.H1Color)));                  }              }              else              {                  Grid.VisibleColumns.Clear();                  Grid.NoVisibleColumnsMessage = "No table entities";              }
Magic Number,HelloWorld.Samples,CPUAndMemoryChartSample,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\CpuAndMemoryChart.cs,Run,The following statement contains a magic number: var app = new ConsoleApp(0' 0' 75' 22);
Magic Number,HelloWorld.Samples,CPUAndMemoryChartSample,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\CpuAndMemoryChart.cs,Run,The following statement contains a magic number: var app = new ConsoleApp(0' 0' 75' 22);
Magic Number,HelloWorld.Samples,CPUAndMemoryChartSample,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\CpuAndMemoryChart.cs,Run,The following statement contains a magic number: var list = new Grid() { Size = new Size(30' 5) };
Magic Number,HelloWorld.Samples,CPUAndMemoryChartSample,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\CpuAndMemoryChart.cs,Run,The following statement contains a magic number: var list = new Grid() { Size = new Size(30' 5) };
Magic Number,HelloWorld.Samples,CpuAndMemoryChart,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\CpuAndMemoryChart.cs,InitAxes,The following statement contains a magic number: YAxisLeftOffset = 8;
Magic Number,HelloWorld.Samples,CpuAndMemoryChart,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\CpuAndMemoryChart.cs,InitAxes,The following statement contains a magic number: ViewModel.YMaximumOverride = 100;
Magic Number,HelloWorld.Samples,CpuAndMemoryChart,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\CpuAndMemoryChart.cs,InitSeries,The following statement contains a magic number: cpuSeries.Threshold = new Threshold() { Value = 40' Title = "CPU Warning threshold"' Type = ThresholdType.Maximum' PlotColor = ConsoleColor.DarkGreen };
Magic Number,HelloWorld.Samples,CpuAndMemoryChart,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\CpuAndMemoryChart.cs,InitSeries,The following statement contains a magic number: memSeries.Threshold = new Threshold() { Value = 80' Title = "Memory Warning threshold" ' Type = ThresholdType.Maximum' PlotColor = ConsoleColor.DarkMagenta};
Magic Number,HelloWorld.Samples,CpuAndMemoryChart,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\CpuAndMemoryChart.cs,WatchCPUAndMemory,The following statement contains a magic number: while (running)              {                  var now = DateTime.Now;                    var cpuUsed = PerformanceInfo.GetCPUPercentage();                  var memUsed = Math.Round(100 - (100.0 * PerformanceInfo.GetPhysicalAvailableMemoryInMiB() / PerformanceInfo.GetTotalMemoryInMiB())' 1);                    // slide the window so it always shows the last minute                  ViewModel.XMaximumOverride = now.Ticks;                  ViewModel.XMinimumOverride = now.Ticks - TimeSpan.FromMinutes(1).Ticks;                    // add the latest value to the series                  ViewModel.DataSeriesCollection[0].DataPoints.Add(new DataPoint() { X = now.Ticks' Y = cpuUsed });                  ViewModel.DataSeriesCollection[1].DataPoints.Add(new DataPoint() { X = now.Ticks' Y = memUsed });                    // Remove the oldest data point if we have a minute worth of data on the chart                  if (ViewModel.DataSeriesCollection[0].DataPoints.Count > 60)                  {                      ViewModel.DataSeriesCollection[0].DataPoints.RemoveAt(0);                      ViewModel.DataSeriesCollection[1].DataPoints.RemoveAt(0);                  }                  Thread.Sleep(1000);              }
Magic Number,HelloWorld.Samples,CpuAndMemoryChart,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\CpuAndMemoryChart.cs,WatchCPUAndMemory,The following statement contains a magic number: while (running)              {                  var now = DateTime.Now;                    var cpuUsed = PerformanceInfo.GetCPUPercentage();                  var memUsed = Math.Round(100 - (100.0 * PerformanceInfo.GetPhysicalAvailableMemoryInMiB() / PerformanceInfo.GetTotalMemoryInMiB())' 1);                    // slide the window so it always shows the last minute                  ViewModel.XMaximumOverride = now.Ticks;                  ViewModel.XMinimumOverride = now.Ticks - TimeSpan.FromMinutes(1).Ticks;                    // add the latest value to the series                  ViewModel.DataSeriesCollection[0].DataPoints.Add(new DataPoint() { X = now.Ticks' Y = cpuUsed });                  ViewModel.DataSeriesCollection[1].DataPoints.Add(new DataPoint() { X = now.Ticks' Y = memUsed });                    // Remove the oldest data point if we have a minute worth of data on the chart                  if (ViewModel.DataSeriesCollection[0].DataPoints.Count > 60)                  {                      ViewModel.DataSeriesCollection[0].DataPoints.RemoveAt(0);                      ViewModel.DataSeriesCollection[1].DataPoints.RemoveAt(0);                  }                  Thread.Sleep(1000);              }
Magic Number,HelloWorld.Samples,CpuAndMemoryChart,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\CpuAndMemoryChart.cs,WatchCPUAndMemory,The following statement contains a magic number: while (running)              {                  var now = DateTime.Now;                    var cpuUsed = PerformanceInfo.GetCPUPercentage();                  var memUsed = Math.Round(100 - (100.0 * PerformanceInfo.GetPhysicalAvailableMemoryInMiB() / PerformanceInfo.GetTotalMemoryInMiB())' 1);                    // slide the window so it always shows the last minute                  ViewModel.XMaximumOverride = now.Ticks;                  ViewModel.XMinimumOverride = now.Ticks - TimeSpan.FromMinutes(1).Ticks;                    // add the latest value to the series                  ViewModel.DataSeriesCollection[0].DataPoints.Add(new DataPoint() { X = now.Ticks' Y = cpuUsed });                  ViewModel.DataSeriesCollection[1].DataPoints.Add(new DataPoint() { X = now.Ticks' Y = memUsed });                    // Remove the oldest data point if we have a minute worth of data on the chart                  if (ViewModel.DataSeriesCollection[0].DataPoints.Count > 60)                  {                      ViewModel.DataSeriesCollection[0].DataPoints.RemoveAt(0);                      ViewModel.DataSeriesCollection[1].DataPoints.RemoveAt(0);                  }                  Thread.Sleep(1000);              }
Magic Number,HelloWorld.Samples,CpuAndMemoryChart,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\CpuAndMemoryChart.cs,WatchCPUAndMemory,The following statement contains a magic number: while (running)              {                  var now = DateTime.Now;                    var cpuUsed = PerformanceInfo.GetCPUPercentage();                  var memUsed = Math.Round(100 - (100.0 * PerformanceInfo.GetPhysicalAvailableMemoryInMiB() / PerformanceInfo.GetTotalMemoryInMiB())' 1);                    // slide the window so it always shows the last minute                  ViewModel.XMaximumOverride = now.Ticks;                  ViewModel.XMinimumOverride = now.Ticks - TimeSpan.FromMinutes(1).Ticks;                    // add the latest value to the series                  ViewModel.DataSeriesCollection[0].DataPoints.Add(new DataPoint() { X = now.Ticks' Y = cpuUsed });                  ViewModel.DataSeriesCollection[1].DataPoints.Add(new DataPoint() { X = now.Ticks' Y = memUsed });                    // Remove the oldest data point if we have a minute worth of data on the chart                  if (ViewModel.DataSeriesCollection[0].DataPoints.Count > 60)                  {                      ViewModel.DataSeriesCollection[0].DataPoints.RemoveAt(0);                      ViewModel.DataSeriesCollection[1].DataPoints.RemoveAt(0);                  }                  Thread.Sleep(1000);              }
Magic Number,HelloWorld.Samples,FileSystemBrowserApp,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\FileSystemBrowserApp.cs,CreateExplorerPage,The following statement contains a magic number: explorerPage.Loaded += () =>              {                  var path = explorerPage.RouteVariables.ContainsKey("*") ? explorerPage.RouteVariables["*"] : "";                    if(path.EndsWith(":"))                  {                      path += "/";                  }                    List<object> items;                  if (path == "")                  {                      items = System.Environment.GetLogicalDrives().Select(d => new Drive() { Letter = d } as object).ToList();                  }                  else                  {                      items = new List<object>();                      try                      {                          items.AddRange(Directory.GetDirectories(path).Select(d => new FileRecord(d)));                          items.AddRange(Directory.GetFiles(path).Select(d => new FileRecord(d)));                      }                      catch (UnauthorizedAccessException) { }                  }                    var grid = explorerPage.Add(new Grid(items));                  var filter = explorerPage.Add(new TextBox() { Y = 1 });                    grid.Width = explorerPage.Width;                  grid.Height = explorerPage.Height - 2;                  grid.Y = 2;                      filter.Width = explorerPage.Width;                  grid.FilterTextBox = filter;                      explorerPage.Width = explorerPage.Application.LayoutRoot.Width;                  explorerPage.Height = explorerPage.Application.LayoutRoot.Height;                  grid.Width = explorerPage.Width;                  grid.Height = explorerPage.Height - 2;                  filter.Width = explorerPage.Width;                      var pathColumn = grid.VisibleColumns.Where(c => c.ColumnDisplayName.ToString() == "Path").SingleOrDefault();                  if (pathColumn != null)                  {                      grid.VisibleColumns.Remove(pathColumn);                  }                        grid.SelectedItemActivated += () =>                  {                      if (grid.SelectedItem is Drive)                      {                          explorerPage.PageStack.Navigate((grid.SelectedItem as Drive).Letter.Replace('\\'' '/'));                      }                      else if(Directory.Exists((grid.SelectedItem as FileRecord).Path.Replace('\\'' '/')))                      {                          explorerPage.PageStack.Navigate((grid.SelectedItem as FileRecord).Path.Replace('\\'' '/'));                      }                      else                      {                          Process.Start((grid.SelectedItem as FileRecord).Path.Replace('\\'' '/'));                      }                  };                    grid.KeyInputReceived.SubscribeForLifetime((keyInfo) =>                  {                      if(keyInfo.Key == ConsoleKey.Delete && grid.SelectedItem != null)                      {                          if(grid.SelectedItem is FileRecord)                          {                              var deletePath = (grid.SelectedItem as FileRecord).Path;                              if(File.Exists(deletePath))                              {                                  Dialog.ShowMessage("Are you sure you want to delete the file ".ToConsoleString() + Path.GetFileName(deletePath).ToConsoleString(ConsoleColor.Yellow) + "?"' (response) =>                                  {                                      if(response != null && response.DisplayText.StringValue == "Yes")                                      {                                          File.Delete(deletePath);                                          explorerPage.PageStack.Refresh();                                      }                                  }' true' 12' new DialogButton() { DisplayText = "Yes".ToConsoleString() }' new DialogButton() { DisplayText = "No".ToConsoleString() });                              }                          }                      }                  }' grid.LifetimeManager);                    grid.TryFocus();              };
Magic Number,HelloWorld.Samples,FileSystemBrowserApp,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\FileSystemBrowserApp.cs,CreateExplorerPage,The following statement contains a magic number: explorerPage.Loaded += () =>              {                  var path = explorerPage.RouteVariables.ContainsKey("*") ? explorerPage.RouteVariables["*"] : "";                    if(path.EndsWith(":"))                  {                      path += "/";                  }                    List<object> items;                  if (path == "")                  {                      items = System.Environment.GetLogicalDrives().Select(d => new Drive() { Letter = d } as object).ToList();                  }                  else                  {                      items = new List<object>();                      try                      {                          items.AddRange(Directory.GetDirectories(path).Select(d => new FileRecord(d)));                          items.AddRange(Directory.GetFiles(path).Select(d => new FileRecord(d)));                      }                      catch (UnauthorizedAccessException) { }                  }                    var grid = explorerPage.Add(new Grid(items));                  var filter = explorerPage.Add(new TextBox() { Y = 1 });                    grid.Width = explorerPage.Width;                  grid.Height = explorerPage.Height - 2;                  grid.Y = 2;                      filter.Width = explorerPage.Width;                  grid.FilterTextBox = filter;                      explorerPage.Width = explorerPage.Application.LayoutRoot.Width;                  explorerPage.Height = explorerPage.Application.LayoutRoot.Height;                  grid.Width = explorerPage.Width;                  grid.Height = explorerPage.Height - 2;                  filter.Width = explorerPage.Width;                      var pathColumn = grid.VisibleColumns.Where(c => c.ColumnDisplayName.ToString() == "Path").SingleOrDefault();                  if (pathColumn != null)                  {                      grid.VisibleColumns.Remove(pathColumn);                  }                        grid.SelectedItemActivated += () =>                  {                      if (grid.SelectedItem is Drive)                      {                          explorerPage.PageStack.Navigate((grid.SelectedItem as Drive).Letter.Replace('\\'' '/'));                      }                      else if(Directory.Exists((grid.SelectedItem as FileRecord).Path.Replace('\\'' '/')))                      {                          explorerPage.PageStack.Navigate((grid.SelectedItem as FileRecord).Path.Replace('\\'' '/'));                      }                      else                      {                          Process.Start((grid.SelectedItem as FileRecord).Path.Replace('\\'' '/'));                      }                  };                    grid.KeyInputReceived.SubscribeForLifetime((keyInfo) =>                  {                      if(keyInfo.Key == ConsoleKey.Delete && grid.SelectedItem != null)                      {                          if(grid.SelectedItem is FileRecord)                          {                              var deletePath = (grid.SelectedItem as FileRecord).Path;                              if(File.Exists(deletePath))                              {                                  Dialog.ShowMessage("Are you sure you want to delete the file ".ToConsoleString() + Path.GetFileName(deletePath).ToConsoleString(ConsoleColor.Yellow) + "?"' (response) =>                                  {                                      if(response != null && response.DisplayText.StringValue == "Yes")                                      {                                          File.Delete(deletePath);                                          explorerPage.PageStack.Refresh();                                      }                                  }' true' 12' new DialogButton() { DisplayText = "Yes".ToConsoleString() }' new DialogButton() { DisplayText = "No".ToConsoleString() });                              }                          }                      }                  }' grid.LifetimeManager);                    grid.TryFocus();              };
Magic Number,HelloWorld.Samples,FileSystemBrowserApp,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\FileSystemBrowserApp.cs,CreateExplorerPage,The following statement contains a magic number: explorerPage.Loaded += () =>              {                  var path = explorerPage.RouteVariables.ContainsKey("*") ? explorerPage.RouteVariables["*"] : "";                    if(path.EndsWith(":"))                  {                      path += "/";                  }                    List<object> items;                  if (path == "")                  {                      items = System.Environment.GetLogicalDrives().Select(d => new Drive() { Letter = d } as object).ToList();                  }                  else                  {                      items = new List<object>();                      try                      {                          items.AddRange(Directory.GetDirectories(path).Select(d => new FileRecord(d)));                          items.AddRange(Directory.GetFiles(path).Select(d => new FileRecord(d)));                      }                      catch (UnauthorizedAccessException) { }                  }                    var grid = explorerPage.Add(new Grid(items));                  var filter = explorerPage.Add(new TextBox() { Y = 1 });                    grid.Width = explorerPage.Width;                  grid.Height = explorerPage.Height - 2;                  grid.Y = 2;                      filter.Width = explorerPage.Width;                  grid.FilterTextBox = filter;                      explorerPage.Width = explorerPage.Application.LayoutRoot.Width;                  explorerPage.Height = explorerPage.Application.LayoutRoot.Height;                  grid.Width = explorerPage.Width;                  grid.Height = explorerPage.Height - 2;                  filter.Width = explorerPage.Width;                      var pathColumn = grid.VisibleColumns.Where(c => c.ColumnDisplayName.ToString() == "Path").SingleOrDefault();                  if (pathColumn != null)                  {                      grid.VisibleColumns.Remove(pathColumn);                  }                        grid.SelectedItemActivated += () =>                  {                      if (grid.SelectedItem is Drive)                      {                          explorerPage.PageStack.Navigate((grid.SelectedItem as Drive).Letter.Replace('\\'' '/'));                      }                      else if(Directory.Exists((grid.SelectedItem as FileRecord).Path.Replace('\\'' '/')))                      {                          explorerPage.PageStack.Navigate((grid.SelectedItem as FileRecord).Path.Replace('\\'' '/'));                      }                      else                      {                          Process.Start((grid.SelectedItem as FileRecord).Path.Replace('\\'' '/'));                      }                  };                    grid.KeyInputReceived.SubscribeForLifetime((keyInfo) =>                  {                      if(keyInfo.Key == ConsoleKey.Delete && grid.SelectedItem != null)                      {                          if(grid.SelectedItem is FileRecord)                          {                              var deletePath = (grid.SelectedItem as FileRecord).Path;                              if(File.Exists(deletePath))                              {                                  Dialog.ShowMessage("Are you sure you want to delete the file ".ToConsoleString() + Path.GetFileName(deletePath).ToConsoleString(ConsoleColor.Yellow) + "?"' (response) =>                                  {                                      if(response != null && response.DisplayText.StringValue == "Yes")                                      {                                          File.Delete(deletePath);                                          explorerPage.PageStack.Refresh();                                      }                                  }' true' 12' new DialogButton() { DisplayText = "Yes".ToConsoleString() }' new DialogButton() { DisplayText = "No".ToConsoleString() });                              }                          }                      }                  }' grid.LifetimeManager);                    grid.TryFocus();              };
Magic Number,HelloWorld.Samples,FileSystemBrowserApp,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\FileSystemBrowserApp.cs,CreateExplorerPage,The following statement contains a magic number: explorerPage.Loaded += () =>              {                  var path = explorerPage.RouteVariables.ContainsKey("*") ? explorerPage.RouteVariables["*"] : "";                    if(path.EndsWith(":"))                  {                      path += "/";                  }                    List<object> items;                  if (path == "")                  {                      items = System.Environment.GetLogicalDrives().Select(d => new Drive() { Letter = d } as object).ToList();                  }                  else                  {                      items = new List<object>();                      try                      {                          items.AddRange(Directory.GetDirectories(path).Select(d => new FileRecord(d)));                          items.AddRange(Directory.GetFiles(path).Select(d => new FileRecord(d)));                      }                      catch (UnauthorizedAccessException) { }                  }                    var grid = explorerPage.Add(new Grid(items));                  var filter = explorerPage.Add(new TextBox() { Y = 1 });                    grid.Width = explorerPage.Width;                  grid.Height = explorerPage.Height - 2;                  grid.Y = 2;                      filter.Width = explorerPage.Width;                  grid.FilterTextBox = filter;                      explorerPage.Width = explorerPage.Application.LayoutRoot.Width;                  explorerPage.Height = explorerPage.Application.LayoutRoot.Height;                  grid.Width = explorerPage.Width;                  grid.Height = explorerPage.Height - 2;                  filter.Width = explorerPage.Width;                      var pathColumn = grid.VisibleColumns.Where(c => c.ColumnDisplayName.ToString() == "Path").SingleOrDefault();                  if (pathColumn != null)                  {                      grid.VisibleColumns.Remove(pathColumn);                  }                        grid.SelectedItemActivated += () =>                  {                      if (grid.SelectedItem is Drive)                      {                          explorerPage.PageStack.Navigate((grid.SelectedItem as Drive).Letter.Replace('\\'' '/'));                      }                      else if(Directory.Exists((grid.SelectedItem as FileRecord).Path.Replace('\\'' '/')))                      {                          explorerPage.PageStack.Navigate((grid.SelectedItem as FileRecord).Path.Replace('\\'' '/'));                      }                      else                      {                          Process.Start((grid.SelectedItem as FileRecord).Path.Replace('\\'' '/'));                      }                  };                    grid.KeyInputReceived.SubscribeForLifetime((keyInfo) =>                  {                      if(keyInfo.Key == ConsoleKey.Delete && grid.SelectedItem != null)                      {                          if(grid.SelectedItem is FileRecord)                          {                              var deletePath = (grid.SelectedItem as FileRecord).Path;                              if(File.Exists(deletePath))                              {                                  Dialog.ShowMessage("Are you sure you want to delete the file ".ToConsoleString() + Path.GetFileName(deletePath).ToConsoleString(ConsoleColor.Yellow) + "?"' (response) =>                                  {                                      if(response != null && response.DisplayText.StringValue == "Yes")                                      {                                          File.Delete(deletePath);                                          explorerPage.PageStack.Refresh();                                      }                                  }' true' 12' new DialogButton() { DisplayText = "Yes".ToConsoleString() }' new DialogButton() { DisplayText = "No".ToConsoleString() });                              }                          }                      }                  }' grid.LifetimeManager);                    grid.TryFocus();              };
Magic Number,HelloWorld.Samples,FileSystemBrowserApp,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\FileSystemBrowserApp.cs,Start,The following statement contains a magic number: ConsolePageApp app = new ConsolePageApp(0' 0' ConsoleProvider.Current.BufferWidth' 25);
Magic Number,HelloWorld.Samples,PerformanceInfo,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\Helpers\PerformanceInfo.cs,GetPhysicalAvailableMemoryInMiB,The following statement contains a magic number: if (GetPerformanceInfo(out pi' Marshal.SizeOf(pi)))              {                  return Convert.ToInt64((pi.PhysicalAvailable.ToInt64() * pi.PageSize.ToInt64() / 1048576));              }              else              {                  return -1;              }
Magic Number,HelloWorld.Samples,PerformanceInfo,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\Helpers\PerformanceInfo.cs,GetTotalMemoryInMiB,The following statement contains a magic number: if (GetPerformanceInfo(out pi' Marshal.SizeOf(pi)))              {                  return Convert.ToInt64((pi.PhysicalTotal.ToInt64() * pi.PageSize.ToInt64() / 1048576));              }              else              {                  return -1;              }
Magic Number,HelloWorld.Samples,ProgressBarSample,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\ProgressBar.cs,DeterminateSample,The following statement contains a magic number: bar.RenderAndPollDeterminate(() =>              {                  var delta = DateTime.Now - start;                  bar.Progress = Math.Min(delta.TotalSeconds / 4' 1);                  if (delta > TimeSpan.FromSeconds(3))                  {                      bar.Message = "The operation was cancelled".ToConsoleString();                      bar.FillColor = ConsoleColor.Red;                      throw new OperationCanceledException();                  }              }              ' TimeSpan.FromMilliseconds(100));
Magic Number,HelloWorld.Samples,ProgressBarSample,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\ProgressBar.cs,DeterminateSample,The following statement contains a magic number: bar.RenderAndPollDeterminate(() =>              {                  var delta = DateTime.Now - start;                  bar.Progress = Math.Min(delta.TotalSeconds / 4' 1);                  if (delta > TimeSpan.FromSeconds(3))                  {                      bar.Message = "The operation was cancelled".ToConsoleString();                      bar.FillColor = ConsoleColor.Red;                      throw new OperationCanceledException();                  }              }              ' TimeSpan.FromMilliseconds(100));
Magic Number,HelloWorld.Samples,ProgressBarSample,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\ProgressBar.cs,DeterminateSample,The following statement contains a magic number: bar.RenderAndPollDeterminate(() =>              {                  var delta = DateTime.Now - start;                  bar.Progress = Math.Min(delta.TotalSeconds / 4' 1);                  if (delta > TimeSpan.FromSeconds(3))                  {                      bar.Message = "The operation was cancelled".ToConsoleString();                      bar.FillColor = ConsoleColor.Red;                      throw new OperationCanceledException();                  }              }              ' TimeSpan.FromMilliseconds(100));
Magic Number,HelloWorld.Samples,ProgressBarSample,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\ProgressBar.cs,IndeterminateSample,The following statement contains a magic number: bar.RenderUntilIndeterminate(() =>              {                  bar.Message = "Phase 1".ToConsoleString();                  Thread.Sleep(1000);                  bar.Message = "Phase 2".ToConsoleString();                  Thread.Sleep(1000);                  bar.Message = "Phase 3".ToConsoleString();                  Thread.Sleep(1000);              });
Magic Number,HelloWorld.Samples,ProgressBarSample,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\ProgressBar.cs,IndeterminateSample,The following statement contains a magic number: bar.RenderUntilIndeterminate(() =>              {                  bar.Message = "Phase 1".ToConsoleString();                  Thread.Sleep(1000);                  bar.Message = "Phase 2".ToConsoleString();                  Thread.Sleep(1000);                  bar.Message = "Phase 3".ToConsoleString();                  Thread.Sleep(1000);              });
Magic Number,HelloWorld.Samples,ProgressBarSample,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\ProgressBar.cs,IndeterminateSample,The following statement contains a magic number: bar.RenderUntilIndeterminate(() =>              {                  bar.Message = "Phase 1".ToConsoleString();                  Thread.Sleep(1000);                  bar.Message = "Phase 2".ToConsoleString();                  Thread.Sleep(1000);                  bar.Message = "Phase 3".ToConsoleString();                  Thread.Sleep(1000);              });
Magic Number,HelloWorld.Samples,ProgressBarSample,C:\repos\adamabdelhamed_PowerArgs\HelloWorld\Samples\ProgressBar.cs,IndeterminateSample2,The following statement contains a magic number: int secs = 5;
