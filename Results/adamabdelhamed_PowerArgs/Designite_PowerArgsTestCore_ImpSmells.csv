Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ArgsTests,TestConsoleProvider,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\TabCompletionTests.cs,ReadKey,Cyclomatic complexity of the method is 18
Long Parameter List,ArgsTests.CLI,CliTestHarness,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Helpers\CliTestHarness.cs,CliTestHarness,The method has 6 parameters. Parameters: testContext' x' y' w' h' keyframeMode
Long Parameter List,ArgsTests.CLI.Games,MultiPlayerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Games\MultiPlayerTests.cs,TestDeathmatch,The method has 5 parameters. Parameters: server' serverInfo' client1' client2' delayMs
Long Parameter List,ArgsTests.CLI.Physics,ConsoleAppTestHarness,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Helpers\ConsoleAppTestHarness.cs,Run,The method has 5 parameters. Parameters: context' testCode' testName' w' h
Long Parameter List,ArgsTests.CLI.Physics,ConsoleAppTestHarness,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Helpers\ConsoleAppTestHarness.cs,Run,The method has 5 parameters. Parameters: context' testCode' testName' w' h
Long Identifier,ArgsTests,ResourceStrings,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Helpers\ResourceStrings.cs,,The length of the parameter PhotoAlbumManagerExpectedConsoleUsage is 37.
Long Identifier,ArgsTests,ResourceStrings,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Helpers\ResourceStrings.cs,,The length of the parameter PhotoAlbumManagerExpectedBrowserUsage is 37.
Long Statement,ArgsTests,ActionFrameworkV2Tests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ActionFrameworkV2Tests.cs,TestInvokeActionsParamsAreArguments,The length of the statement  "            var actionInfo = Args.InvokeAction<ActionScaffold>("Command4"' "-firstName"' "Adam"' "-lastName"' "Abdelhamed"' "-age"' "100"); " is 127.
Long Statement,ArgsTests,ActionFrameworkV2Tests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ActionFrameworkV2Tests.cs,TestInvokeActionsV2Mixed,The length of the statement  "            var actionInfo = Args.InvokeAction<ActionScaffoldWithActionPropertyAndAttributes>("Command1"' "-s"' "SomeStringValue"' "-g"); " is 125.
Long Statement,ArgsTests,ActionFrameworkV2Tests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ActionFrameworkV2Tests.cs,TestInvokeActionsV2Mixed2,The length of the statement  "            var actionInfo = Args.InvokeAction<ActionScaffoldWithActionPropertyAndAttributesAndProperties>("Command1"' "-s"' "SomeStringValue"' "-g"); " is 138.
Long Statement,ArgsTests,ActionFrameworkV2Tests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ActionFrameworkV2Tests.cs,TestInvokeActionsV2Mixed2,The length of the statement  "            var actionInfo2 = Args.InvokeAction<ActionScaffoldWithActionPropertyAndAttributesAndProperties>("Command2"' "-i"' "1000"' "-g"); " is 128.
Long Statement,ArgsTests,ActionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ActionTests.cs,TestActionHasNoParameters,The length of the statement  "                Assert.AreEqual("PowerArg action methods must take one parameter that matches the property type for the attribute"' ex.Message); " is 128.
Long Statement,ArgsTests,ActionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ActionTests.cs,TestActionHasTooManyParameters,The length of the statement  "                Assert.AreEqual("Your action method contains a parameter that cannot be revived on its own.  That is only valid if the non-revivable parameter is the only parameter.  In that case' the properties of that parameter type will be used."' ex.Message); " is 247.
Long Statement,ArgsTests,ArgRequiredConditionalTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ArgRequiredConditionalTests.cs,TestComplexRequiredUnless,The length of the statement  "            parsed = Args.Parse<ComplexUnlessArgs>("-LocalFile"' "SomeFilePath"' "-LocalFileUserName"' "Adam"' "-LocalFilePassword"'"SomePassword"); " is 136.
Long Statement,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestManualReviverRegistration,The length of the statement  "            var prop = reviverType.GetProperty("Revivers"' System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.NonPublic); " is 129.
Long Statement,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyle,The length of the statement  "            var args = new string[] { "-String"' "stringValue"' "-i"' "34"' "-d"' "33.33"' "-b"' "-byte"' "255"' "-g"' g.ToString()' "-t"' d.ToString()' "-l"' long.MaxValue+""' "-li"' "100'200'300"' "-bytes"' "10'20'30"' "-uri"' "http://www.bing.com"' "-ipaddress"' IPAddress.Loopback.ToString() }; " is 286.
Long Statement,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyleWeak,The length of the statement  "            var args = new string[] { "-String"' "stringValue"' "-i"' "34"' "-d"' "33.33"' "-b"' "-byte"' "255"' "-g"' g.ToString()' "-t"' d.ToString()' "-l"' long.MaxValue + ""' "-li"' "100'200'300"' "-bytes"' "10'20'30"' "-uri"' "http://www.bing.com"' "-ipaddress"' IPAddress.Loopback.ToString() }; " is 288.
Long Statement,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,ArgReviversReviveEnumThrowsOnInvalidValue,The length of the statement  "                Assert.AreEqual("NonExistentOption is not a valid value for type BasicEnum' options are Option1' Option2' Option3"' ex.Message); " is 128.
Long Statement,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,ArgReviversReviveEnumThrowsOnInvalidValueInFlagList,The length of the statement  "                Assert.AreEqual("NonExistentOption is not a valid value for type EnumWithFlags' options are Zero' One' Two' Four' Eight' Sixteen"' ex.Message); " is 143.
Long Statement,ArgsTests,UnitTestArgActionResolver,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ComposableArgActionsTests.cs,ResolveActionTypes,The length of the statement  "                return Assembly.GetExecutingAssembly().GetTypes().Where(t => t.HasAttr<ArgActions>() && t.Name.Contains("ComposableActions_")); " is 127.
Long Statement,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestReplaceOtherCases,The length of the statement  "            Assert.AreEqual("White"' string.Join(""'white.Where(c => c.ForegroundColor == ConsoleColor.White).Select(c=> c.Value))); " is 120.
Long Statement,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestReplaceCustomComparison,The length of the statement  "            Assert.AreEqual(new ConsoleString("Adam")' new ConsoleString("adam").Replace("adam"' "Adam"' comparison: StringComparison.InvariantCulture)); " is 141.
Long Statement,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestHighlightCustomComparison,The length of the statement  "            var highlighted = new ConsoleString("Adam").Highlight("a"'foregroundColor: ConsoleColor.Red' comparison: StringComparison.InvariantCultureIgnoreCase); " is 150.
Long Statement,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestHighlightCustomComparison,The length of the statement  "            Assert.AreEqual("The quick brown fox"' new ConsoleString("The quick brown fox").Highlight("brown"' ConsoleColor.Red).ToString()); " is 129.
Long Statement,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestReplaceMultiple,The length of the statement  "            Assert.AreEqual("WhiteWhiteWhite"' string.Join(""' white.Where(c => c.ForegroundColor == ConsoleColor.White).Select(c => c.Value))); " is 132.
Long Statement,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestReplaceRegex,The length of the statement  "            ConsoleString cleaned = orig.ReplaceRegex(@"\d\d\d\d-\d\d\d\d-\d\d\d\d-\d\d\d\d"' "xxxx-xxxx-xxxx-xxxx"' ConsoleColor.White); " is 125.
Long Statement,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConsoleStringHelpers,The length of the statement  "                var method = typeof(StringEx).GetMethod("To" + color' System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public); " is 133.
Long Statement,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConsoleStringHelpers,The length of the statement  "                Assert.AreEqual(new ConsoleString(baseString.ToString()' color' color)' method.Invoke(baseString' new object[] { color })); " is 123.
Long Statement,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConsoleCharacterHelpers,The length of the statement  "                var method = typeof(ConsoleCharacter).GetMethod(color+""' System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public); " is 137.
Long Statement,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConsoleCharacterHelpers,The length of the statement  "                var method = typeof(ConsoleCharacter).GetMethod(color + "BG"' System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public); " is 141.
Long Statement,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringMultiLine,The length of the statement  "            var str = "Adam".ToYellow(bg: ConsoleColor.Green) + "\n".ToConsoleString() + "Abdelhamed".ToYellow(bg: ConsoleColor.Green); " is 123.
Long Statement,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConsoleStringToDiv,The length of the statement  "            Assert.AreEqual("<div class='powerargs-console-string' style='font-family:Consolas;background-color:black'><span style='color:red;background-color:black;'>Adam</span><span style='color:grey;background-color:black;'> </span><span style='color:green;background-color:black;'>Abdelhamed</span></div>"' toDiv); " is 306.
Long Statement,ArgsTests,ConsoleTableBuilderTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleTableBuilderTests.cs,ConsoleTableBasic,The length of the statement  "            var columns = new List<ConsoleString>() { new ConsoleString("NAME")' new ConsoleString("ADDRESS")' new ConsoleString("DESCRIPTION") }; " is 134.
Long Statement,ArgsTests,ConsoleTableBuilderTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleTableBuilderTests.cs,ConsoleTableBasic,The length of the statement  "                new List<ConsoleString>(){ new ConsoleString("Adam Abdelhamed")' new ConsoleString("One Microsoft Way' Redmond WA 98052")' new ConsoleString("The author of PowerArgs' the world's greatest command line parser and invoker.  Hooray for PowerArgs!  We love PowerArgs so much cuz it is awesome and great.  Yay!!!!  In fact' PowerArgs is so fun that nothing in the entire universe is more fun.  ") }' " is 394.
Long Statement,ArgsTests,ConsoleTableBuilderTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleTableBuilderTests.cs,ConsoleTableBasic,The length of the statement  "                new List<ConsoleString>(){ new ConsoleString("Alicia Abdelhamed")' new ConsoleString("Two Microsoft Way' Redmond WA 98052")' new ConsoleString("The wife of the author of PowerArgs' the world's greatest command line parser and invoker.  Hooray for PowerArgs!") }' " is 262.
Long Statement,ArgsTests,ConsoleTableBuilderTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleTableBuilderTests.cs,ConsoleTableBasic,The length of the statement  "Adam Abdelhamed     One Microsoft Way' Redmond WA 98052   The author of PowerArgs' the world's greatest command line parser and invoker.  Hooray for PowerArgs!  We love PowerArgs so much cuz it is awesome and great.  Yay!!!!  In fact' PowerArgs is so fun that nothing in the entire universe is more fun.      " is 303.
Long Statement,ArgsTests,ConsoleTableBuilderTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleTableBuilderTests.cs,ConsoleTableBasic,The length of the statement  "Alicia Abdelhamed   Two Microsoft Way' Redmond WA 98052   The wife of the author of PowerArgs' the world's greatest command line parser and invoker.  Hooray for PowerArgs!                                                                                                                                          " is 171.
Long Statement,ArgsTests,ConsoleTableBuilderTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleTableBuilderTests.cs,ConsoleTableTestMultiOptions,The length of the statement  "            var columns = new List<ConsoleString>() { new ConsoleString("NAME")' new ConsoleString("ADDRESS")' new ConsoleString("DESCRIPTION") }; " is 134.
Long Statement,ArgsTests,ConsoleTableBuilderTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleTableBuilderTests.cs,ConsoleTableTestMultiOptions,The length of the statement  "                new List<ConsoleString>(){ new ConsoleString("Adam Abdelhamed")' new ConsoleString("One Microsoft Way' Redmond WA 98052")' new ConsoleString("The author of PowerArgs' the world's greatest command line parser and invoker.  Hooray for PowerArgs!  We love PowerArgs so much cuz it is awesome and great.  Yay!!!!  In fact' PowerArgs is so fun that nothing in the entire universe is more fun.  ") }' " is 394.
Long Statement,ArgsTests,ConsoleTableBuilderTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleTableBuilderTests.cs,ConsoleTableTestMultiOptions,The length of the statement  "                new List<ConsoleString>(){ new ConsoleString("Alicia Abdelhamed")' new ConsoleString("Two Microsoft Way' Redmond WA 98052")' new ConsoleString("The wife of the author of PowerArgs' the world's greatest command line parser and invoker.  Hooray for PowerArgs!") }' " is 262.
Long Statement,ArgsTests,ConsoleTableBuilderTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleTableBuilderTests.cs,ConsoleTableTestMultiOptions,The length of the statement  "Adam...      One Microsoft     The author of PowerArgs' the world's greatest command line parser and invoker.  Hooray for PowerArgs!  We love PowerArgs so " is 154.
Long Statement,ArgsTests,ConsoleTableBuilderTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleTableBuilderTests.cs,ConsoleTableTestMultiOptions,The length of the statement  "             Way' Redmond      much cuz it is awesome and great.  Yay!!!!  In fact' PowerArgs is so fun that nothing in the entire universe is more fun.   " is 139.
Long Statement,ArgsTests,ConsoleTableBuilderTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleTableBuilderTests.cs,ConsoleTableTestMultiOptions,The length of the statement  "Alic...      Two Microsoft     The wife of the author of PowerArgs' the world's greatest command line parser and invoker.  Hooray for PowerArgs! " is 144.
Long Statement,ArgsTests,ConsoleTableBuilderTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleTableBuilderTests.cs,ConsoleTableTestLongWord,The length of the statement  "                new List<ConsoleString>(){new ConsoleString(" ThisIsAVeryLongWord")' new ConsoleString("Hello. ThisIsAVeryLongWord ThisIsAnother AnotherVeryLongWord")} " is 151.
Long Statement,ArgsTests,NullableTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\NullableTests.cs,Cleanup,The length of the statement  "            var prop = reviverType.GetProperty("Revivers"' System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.NonPublic); " is 129.
Long Statement,ArgsTests,ObjectPathExpressionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ObjectPathExpressionTests.cs,TestTwoLevels,The length of the statement  "            var testObj = new Customer() { Name = "Adam"' Address = new Address() { Line1 = "123 Main Street"' Line2 = "Seattle' WA"' ZipCode = "12345" } }; " is 144.
Long Statement,ArgsTests,ObjectPathExpressionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ObjectPathExpressionTests.cs,TestNumericIndexers,The length of the statement  "            var testObj = new Customer() { Name = "Adam"' Address = new Address() { Line1 = "123 Main Street"' Line2 = "Seattle' WA"' ZipCode = "12345" } }; " is 144.
Long Statement,ArgsTests,ObjectPathExpressionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ObjectPathExpressionTests.cs,TestDeep,The length of the statement  "            var testObj = new Customer() { Name = "Adam"' Address = new Address() { Line1 = "123 Main Street"' Line2 = "Seattle' WA"' ZipCode = "12345" } }; " is 144.
Long Statement,ArgsTests,SecureStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\SecureStringTests.cs,TestSecureStringNotPromptedUnlessNeeded,The length of the statement  "            var secureField = typeof(SecureStringArgument).GetField("secureString"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 156.
Long Statement,ArgsTests,MyLongCompletionSource,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\TabCompletionTests.cs,GetWords,The length of the statement  "                return "AVeryLongWordSoThatTheBufferWidthOfTheConsoleWillBeExceededAndAnExceptionWouldBeRisedIfNoMeasureIsTakendddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd|Abdelhamed".Split('|'); " is 269.
Long Statement,ArgsTests,TemplatedUsageTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\TemplatedUsageTests.cs,TestPhotoAlbumManagerConsoleUsage,The length of the statement  "            var browserUsage = ArgUsage.GenerateUsageFromTemplate(def' template: UsageTemplates.BrowserTemplate).ToString().Replace("\r\n"' "\n").Replace("\r"' "\n"); " is 154.
Long Statement,ArgsTests,TemplatedUsageTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\TemplatedUsageTests.cs,TestPhotoAlbumManagerConsoleUsage,The length of the statement  "            Helpers.AssertAreEqualWithDiffInfo(ResourceStrings.PhotoAlbumManagerExpectedBrowserUsage.Replace("\r\n"'"\n").Replace("\r"' "\n")' browserUsage); " is 145.
Long Statement,ArgsTests,TemplatedUsageTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\TemplatedUsageTests.cs,TestPhotoAlbumManagerConsoleUsage,The length of the statement  "            Helpers.AssertAreEqualWithDiffInfo(ResourceStrings.PhotoAlbumManagerExpectedConsoleUsage.Replace("\r\n"' "\n").Replace("\r"' "\n")' consoleUsage); " is 146.
Long Statement,ArgsTests,UsageTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\UsageTests.cs,TestAllUsageOutputsDontThrowExceptionsOrContainUnprocessedReplacements,The length of the statement  "            var types = Assembly.GetExecutingAssembly().GetTypes().Where(t => t.GetCustomAttributes(typeof(UsageAutomation)' true).Length > 0); " is 131.
Long Statement,ArgsTests,ReflectionHelper,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Helpers\Helpers.cs,InvokeStatic,The length of the statement  "            return (T)t.GetMethod(methodName' BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Static).Invoke(null' parameters); " is 127.
Long Statement,ArgsTests,Helpers,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Helpers\Helpers.cs,AssertAreEqualWithDiffInfo,The length of the statement  "                    Assert.Fail("Character on line " + line + " and col " + col + " did not match.  Expected '" + expectedChar + "'' actual '" + actualChar + "'\n\nExpected:\n"+expected+"\n\nActual:\n"+actual); " is 190.
Long Statement,ArgsTests,Helpers,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Helpers\Helpers.cs,ExpectedException,The length of the statement  "                    Assert.Fail("Error message did not contain the expected case sensitive text. Actual<{0}>. Expected<{1}>"' ex.Message' expectedText); " is 132.
Long Statement,ArgsTests,Helpers,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Helpers\Helpers.cs,ExpectedException,The length of the statement  "                    Assert.Fail("Error message did not contain the expected case insensitive text. Actual<{0}>. Expected<{1}>"' ex.Message' expectedText); " is 134.
Long Statement,ArgsTests,Helpers,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Helpers\Helpers.cs,ExpectedArgException,The length of the statement  "                if (caseS && text != null && !ex.Message.Contains(expectedText)) Assert.Fail("The error message did not contain the text: "+text+" - "+ex.Message); " is 147.
Long Statement,ArgsTests,Helpers,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Helpers\Helpers.cs,ExpectedArgException,The length of the statement  "                if (!caseS && text != null && !ex.Message.ToLower().Contains(expectedText.ToLower())) Assert.Fail("The error message did not contain the text: "+text+" - "+ex.Message); " is 168.
Long Statement,ArgsTests.CLI,GridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\GridTests.cs,TestBasicGrid,The length of the statement  "                app.SetTimeout(() => app.SendKey(new ConsoleKeyInfo((char)0' ConsoleKey.DownArrow' false'false'false))' TimeSpan.FromMilliseconds(333)); " is 136.
Long Statement,ArgsTests.CLI,GridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\GridTests.cs,TestBasicGrid,The length of the statement  "                app.SetTimeout(() => app.SendKey(new ConsoleKeyInfo((char)0' ConsoleKey.UpArrow' false' false' false))' TimeSpan.FromMilliseconds(666)); " is 136.
Long Statement,ArgsTests.CLI,TimerTest,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\TimerTest.cs,TestTaskTimeouts,The length of the statement  "                var unusedResult = await Task<string>.Factory.StartNew(()=> { Thread.Sleep(100); return "Hello"; }).TimeoutAfter(TimeSpan.FromMilliseconds(1)); " is 143.
Long Statement,ArgsTests.CLI,TimerTest,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\TimerTest.cs,TestTaskTimeouts,The length of the statement  "            var stringResult = await Task<string>.Factory.StartNew(() => {  return "Hello"; }).TimeoutAfter(TimeSpan.FromSeconds(1)); " is 121.
Long Statement,ArgsTests.CLI,ContextAssistTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ContextAssistTests.cs,TestBasicAssistMiddleOfLineReplacingCurrentToken,The length of the statement  "            ConsoleProvider.Current = new TestConsoleProvider("choice: abc after{left}{left}{left}{left}{left}{left}{control} {w}{down}{down}{enter}"); " is 139.
Long Statement,ArgsTests.CLI,PeoplePicker,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ContextAssistTests.cs,GetResults,The length of the statement  "            return people.Where(p => p.Name.StartsWith(searchString' StringComparison.InvariantCultureIgnoreCase) || p.Address.StartsWith(searchString' StringComparison.InvariantCultureIgnoreCase)) " is 185.
Long Statement,ArgsTests.CLI,CliKeyboardInputQueue,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Helpers\CliKeyboardInputQueue.cs,Enqueue,The length of the statement  "                    inputQueue.Enqueue(new HumanInputItem(new ConsoleKeyInfo(c' ConsoleKey.NoName' false' false' false)' TimeSpan.Zero' HumanInputItem.NormalDelay)); " is 145.
Long Statement,ArgsTests.CLI,CliKeyboardInputQueue,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Helpers\CliKeyboardInputQueue.cs,EnqueueDelay,The length of the statement  "                inputQueue.Enqueue(new HumanInputItem(new ConsoleKeyInfo('\u0000'' ConsoleKey.NoName' false' false' false)' TimeSpan.Zero' delay)); " is 131.
Long Statement,ArgsTests.CLI,CliKeyboardInputQueue,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Helpers\CliKeyboardInputQueue.cs,Enqueue,The length of the statement  "                inputQueue.Enqueue(new HumanInputItem(new ConsoleKeyInfo('\u0000'' key' false' false' false)' TimeSpan.Zero' HumanInputItem.NormalDelay)); " is 138.
Long Statement,ArgsTests.CLI,CliTestHarness,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Helpers\CliTestHarness.cs,Find,The length of the statement  "                throw new ArgumentException("Text cannot contain newline characters. This function searches the target bitmap line by line."); " is 126.
Long Statement,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridBasic,The length of the statement  "                var selectionLabel = app.LayoutRoot.Add(new Label() { Text = "DEFAULT".ToConsoleString()' Height = 1 }).CenterHorizontally(); " is 125.
Long Statement,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridBasic,The length of the statement  "                selectionLabel.Text = $"SelectedRowIndex: {dataGrid.SelectedRowIndex}' SelectedCellIndex: {dataGrid.SelectedColumnIndex}".ToConsoleString(); " is 140.
Long Statement,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridBasic,The length of the statement  "                    selectionLabel.Text = $"SelectedRowIndex: {dataGrid.SelectedRowIndex}' SelectedCellIndex: {dataGrid.SelectedColumnIndex}".ToConsoleString(); " is 140.
Long Statement,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestAsyncDataGridBasic,The length of the statement  "                var selectionLabel = app.LayoutRoot.Add(new Label() { Text = "DEFAULT".ToConsoleString()' Height = 1 }).CenterHorizontally(); " is 125.
Long Statement,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestAsyncDataGridBasic,The length of the statement  "                selectionLabel.Text = $"SelectedRowIndex: {dataGrid.SelectedRowIndex}' SelectedCellIndex: {dataGrid.SelectedColumnIndex}".ToConsoleString(); " is 140.
Long Statement,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestAsyncDataGridBasic,The length of the statement  "                    selectionLabel.Text = $"SelectedRowIndex: {dataGrid.SelectedRowIndex}' SelectedCellIndex: {dataGrid.SelectedColumnIndex}".ToConsoleString(); " is 140.
Long Statement,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridRefresh,The length of the statement  "                var selectionLabel = app.LayoutRoot.Add(new Label() { Text = "DEFAULT".ToConsoleString()' Height = 1 }).CenterHorizontally(); " is 125.
Long Statement,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridRefresh,The length of the statement  "                selectionLabel.Text = $"SelectedRowIndex: {dataGrid.SelectedRowIndex}' SelectedCellIndex: {dataGrid.SelectedColumnIndex}".ToConsoleString(); " is 140.
Long Statement,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridRefresh,The length of the statement  "                    selectionLabel.Text = $"SelectedRowIndex: {dataGrid.SelectedRowIndex}' SelectedCellIndex: {dataGrid.SelectedColumnIndex}".ToConsoleString(); " is 140.
Long Statement,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridProgrammaticSelection,The length of the statement  "                var selectionLabel = app.LayoutRoot.Add(new Label() { Text = "DEFAULT".ToConsoleString()' Height = 1 }).CenterHorizontally(); " is 125.
Long Statement,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridProgrammaticSelection,The length of the statement  "                selectionLabel.Text = $"SelectedRowIndex: {dataGrid.SelectedRowIndex}' SelectedCellIndex: {dataGrid.SelectedColumnIndex}".ToConsoleString(); " is 140.
Long Statement,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridProgrammaticSelection,The length of the statement  "                    selectionLabel.Text = $"SelectedRowIndex: {dataGrid.SelectedRowIndex}' SelectedCellIndex: {dataGrid.SelectedColumnIndex}".ToConsoleString(); " is 140.
Long Statement,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridCelllevelSelection,The length of the statement  "                var selectionLabel = app.LayoutRoot.Add(new Label() { Text = "DEFAULT".ToConsoleString()' Height = 1 }).CenterHorizontally(); " is 125.
Long Statement,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridCelllevelSelection,The length of the statement  "                selectionLabel.Text = $"SelectedRowIndex: {dataGrid.SelectedRowIndex}' SelectedCellIndex: {dataGrid.SelectedColumnIndex}".ToConsoleString(); " is 140.
Long Statement,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridCelllevelSelection,The length of the statement  "                    selectionLabel.Text = $"SelectedRowIndex: {dataGrid.SelectedRowIndex}' SelectedCellIndex: {dataGrid.SelectedColumnIndex}".ToConsoleString(); " is 140.
Long Statement,ArgsTests.CLI.Recording,RecordingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\RecordingTests.cs,TestRecordVideoLargeVideo,The length of the statement  "                while((lastFrameIndex =  video.Seek(destination' out frame' lastFrameIndex >= 0 ? lastFrameIndex : 0)) != numFrames - 1) " is 120.
Long Statement,ArgsTests.CLI.Recording,RecordingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\RecordingTests.cs,TestPlaybackEndToEnd,The length of the statement  "                app.SetTimeout(() => app.SendKey(new ConsoleKeyInfo('p'' ConsoleKey.P' false' false' false))' TimeSpan.FromMilliseconds(100)); " is 126.
Long Statement,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,SynchronizeCollection,The length of the statement  "                observable.Strings.SynchronizeForLifetime((s) => { addCalls++; }' (s) => { removeCalls++; }' () => { changedCalls++; }' lifetime); " is 130.
Long Statement,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,TestDeepObservable,The length of the statement  "            using (account.SubscribeUnmanaged($"{nameof(ObservableAccount.Customer)}.{nameof(ObservableCustomer.BasicInfo)}.{nameof(BasicInfo.Name)}"'listener)) " is 148.
Long Statement,ArgsTests.CLI.Games,PowerArgsIntroTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Games\PowerArgsIntroTests.cs,TestPowerArgsIntroInterrupts,The length of the statement  "                if (ex.InnerException is InvalidOperationException && ex.InnerException.Message.ToLower().Contains("collection was modified")) " is 126.
Long Statement,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestNormalizedProximity,The length of the statement  "                var a = app.LayoutRoot.Add(new ConsoleControl() { Background = ConsoleColor.Red' Width = 1' Height = 1' X = 0' Y = 0 }); " is 120.
Long Statement,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestNormalizedProximity,The length of the statement  "                var b = app.LayoutRoot.Add(new ConsoleControl() { Background = ConsoleColor.Green' Width = 1' Height = 1' X = 39' Y = 39 }); " is 124.
Long Statement,ArgsTests.Templating,DocumentRendererTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\DocumentRendererTests.cs,TestDocumentRenderingVarExpressionColors,The length of the statement  "            var rendered = new DocumentRenderer().Render("{{var ConsoleForegroundColor Red!}}Hi {{FirstName!}}{{clearvar ConsoleForegroundColor !}}.  How are you?"' new { FirstName = "Adam" }); " is 181.
Long Statement,ArgsTests.Templating,DocumentRendererTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\DocumentRendererTests.cs,TestDocumentRenderingVarExpressionColors,The length of the statement  "            Assert.AreEqual(new ConsoleString("Hi Adam"'foregroundColor: ConsoleColor.Red) + new ConsoleString(".  How are you?")' rendered); " is 129.
Long Statement,ArgsTests.Templating,DocumentRendererTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\DocumentRendererTests.cs,TestDocumentRenderingVarExpression,The length of the statement  "            var rendered = new DocumentRenderer().Render("{{var first FirstName!}}Hi {{first!}}{{clearvar first!}}"' new { FirstName="Adam" }); " is 131.
Long Statement,ArgsTests.Templating,DocumentRendererTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\DocumentRendererTests.cs,TestDocumentRenderingWithConditionalReplacement,The length of the statement  "            var rendered = new DocumentRenderer().Render("{{if GoodMood}}Hi {{Name!}}!{{if}}"' new { Name = "Adam"' GoodMood = true }); " is 123.
Long Statement,ArgsTests.Templating,DocumentRendererTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\DocumentRendererTests.cs,TestDocumentRenderingWithConditionalReplacement,The length of the statement  "            rendered = new DocumentRenderer().Render("{{if GoodMood}}Hi {{Name!}}!{{if}}"' new { Name = "Adam"' GoodMood = false }); " is 120.
Long Statement,ArgsTests.Templating,DocumentRendererTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\DocumentRendererTests.cs,TestDocumentRenderingWithEachReplacement,The length of the statement  "            var rendered = new DocumentRenderer().Render("{{each number in Numbers}}{{number!}}!{{each}}"' new { Numbers = new int[] { 1' 2' 3' 4 } }); " is 139.
Long Statement,ArgsTests.Templating,DocumentRendererTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\DocumentRendererTests.cs,TestDocumentRenderingWithNamedTemplates,The length of the statement  "            var rendered = renderer.Render("[{{template TheOneAndOnlyTemplate DudeData!}}]"' new { DudeData = new { FirstName = "John"' LastName = "Smith" } }); " is 148.
Long Statement,ArgsTests.Templating,DocumentRendererTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\DocumentRendererTests.cs,TestDocumentRenderingSourcePropagation,The length of the statement  "                var rendered = renderer.Render("[{{template TheOneAndOnlyTemplate DudeData!}}]"' new { DudeData = new { FirstName = "John"' LastName = "Smith" } }); " is 148.
Empty Catch Block,ArgsTests,ActionFrameworkV2Tests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ActionFrameworkV2Tests.cs,TestConflictingActionShortcuts,The method has an empty catch block.
Empty Catch Block,ArgsTests,ActionFrameworkV2Tests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ActionFrameworkV2Tests.cs,TestConflictingActionShortcuts,The method has an empty catch block.
Empty Catch Block,ArgsTests,ActionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ActionTests.cs,TestMissingActionBinding,The method has an empty catch block.
Empty Catch Block,ArgsTests,AllowUnexpectedArgsTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\AllowUnexpectedArgsTests.cs,AllowUnexpectedArgsNotAllowed,The method has an empty catch block.
Empty Catch Block,ArgsTests,ArgRequiredConditionalTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ArgRequiredConditionalTests.cs,TestArgRequiredUnlessBasic,The method has an empty catch block.
Empty Catch Block,ArgsTests,ArgRequiredConditionalTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ArgRequiredConditionalTests.cs,TestArgRequiredUnlessOneOfThree,The method has an empty catch block.
Empty Catch Block,ArgsTests,ArgRequiredConditionalTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ArgRequiredConditionalTests.cs,TestComplexRequiredUnless,The method has an empty catch block.
Empty Catch Block,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestRevivalFailure,The method has an empty catch block.
Empty Catch Block,ArgsTests,BasicHook,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,AfterPopulateProperties,The method has an empty catch block.
Empty Catch Block,ArgsTests,CaseSensitiveTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\CaseSensitiveTests.cs,TestCaseSensitivityIsCaseSensitiveAttribute,The method has an empty catch block.
Empty Catch Block,ArgsTests,ComposableArgActionsTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ComposableArgActionsTests.cs,TestComposableActionsBasic,The method has an empty catch block.
Empty Catch Block,ArgsTests,EdgeCases,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\EdgeCases.cs,TestConflictingShortcutPolicies,The method has an empty catch block.
Empty Catch Block,ArgsTests,EdgeCases,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\EdgeCases.cs,TestConflictingShortcutPolicies,The method has an empty catch block.
Empty Catch Block,ArgsTests,EdgeCases,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\EdgeCases.cs,TestConflictingShortcutPolicies,The method has an empty catch block.
Empty Catch Block,ArgsTests,LongFormTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\LongFormTests.cs,TestLongFormBad,The method has an empty catch block.
Empty Catch Block,ArgsTests,NewAwesomeTabCompletionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\NewAwesomeTabCompletionTests.cs,TestGarbageTopLevelSmartTabCompletionSource,The method has an empty catch block.
Empty Catch Block,ArgsTests,SecureStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\SecureStringTests.cs,TestSecureStringNoValidatorsAllowed,The method has an empty catch block.
Empty Catch Block,ArgsTests,SecureStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\SecureStringTests.cs,TestSecureStringIsReadOnly,The method has an empty catch block.
Empty Catch Block,ArgsTests,ShortcutTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ShortcutTests.cs,TestShortcutConflictingSignals,The method has an empty catch block.
Empty Catch Block,ArgsTests,TestNonInteractiveMode,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\TestNonInteractiveMode.cs,TestNonInteractiveNoPrompt,The method has an empty catch block.
Empty Catch Block,ArgsTests.CLI,AsyncUITests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\AsyncUITests.cs,TestAsyncAwaitWithinAppExceptionPath,The method has an empty catch block.
Empty Catch Block,ArgsTests.CLI,TimerTest,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\TimerTest.cs,TestTaskTimeouts,The method has an empty catch block.
Empty Catch Block,ArgsTests.CLI,TimerTest,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\TimerTest.cs,TestTaskTimeouts,The method has an empty catch block.
Magic Number,ArgsTests,ActionFrameworkV2Tests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ActionFrameworkV2Tests.cs,TestInvokeActionsParamsAreArguments,The following statement contains a magic number: Assert.AreEqual(100' actionInfo.Args.Command4Age);
Magic Number,ArgsTests,ActionSwitchHandlingRegression,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ActionSwitchHandlingRegression.cs,RegressActionSwitchingIssue,The following statement contains a magic number: Assert.AreEqual(2' Definition.SettingsInvokedCount);
Magic Number,ArgsTests,Definition,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ActionSwitchHandlingRegression.cs,Settings,The following statement contains a magic number: Assert.AreEqual(5' args.RetryCount);
Magic Number,ArgsTests,ArgRequiredConditionalTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ArgRequiredConditionalTests.cs,TestDependentRequiredIf,The following statement contains a magic number: Assert.AreEqual(1024' parsed.LogFileOutputMaxSize);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestSlashColonStyle,The following statement contains a magic number: Assert.AreEqual(34' parsed.Int);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestSlashColonStyle,The following statement contains a magic number: Assert.AreEqual(33.33' parsed.Double);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestOverrideDefaultReviver,The following statement contains a magic number: Assert.AreEqual(100' newDef.FindMatchingArgument("theInt").RevivedValue);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyle,The following statement contains a magic number: Assert.AreEqual(34' parsed.Int);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyle,The following statement contains a magic number: Assert.AreEqual(33.33' parsed.Double);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyle,The following statement contains a magic number: Assert.AreEqual(255' parsed.Byte);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyle,The following statement contains a magic number: Assert.AreEqual(3' parsed.List.Count);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyle,The following statement contains a magic number: Assert.AreEqual(100' parsed.List[0]);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyle,The following statement contains a magic number: Assert.AreEqual(200' parsed.List[1]);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyle,The following statement contains a magic number: Assert.AreEqual(300' parsed.List[2]);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyle,The following statement contains a magic number: Assert.AreEqual(300' parsed.List[2]);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyle,The following statement contains a magic number: Assert.AreEqual(3' parsed.ArrayOfBytes.Length);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyle,The following statement contains a magic number: Assert.AreEqual(10' parsed.ArrayOfBytes[0]);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyle,The following statement contains a magic number: Assert.AreEqual(20' parsed.ArrayOfBytes[1]);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyle,The following statement contains a magic number: Assert.AreEqual(30' parsed.ArrayOfBytes[2]);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyle,The following statement contains a magic number: Assert.AreEqual(30' parsed.ArrayOfBytes[2]);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyleWeak,The following statement contains a magic number: Assert.AreEqual(34' parsed.Int);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyleWeak,The following statement contains a magic number: Assert.AreEqual(33.33' parsed.Double);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyleWeak,The following statement contains a magic number: Assert.AreEqual(255' parsed.Byte);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyleWeak,The following statement contains a magic number: Assert.AreEqual(3' parsed.List.Count);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyleWeak,The following statement contains a magic number: Assert.AreEqual(100' parsed.List[0]);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyleWeak,The following statement contains a magic number: Assert.AreEqual(200' parsed.List[1]);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyleWeak,The following statement contains a magic number: Assert.AreEqual(300' parsed.List[2]);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyleWeak,The following statement contains a magic number: Assert.AreEqual(300' parsed.List[2]);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyleWeak,The following statement contains a magic number: Assert.AreEqual(3' parsed.ArrayOfBytes.Length);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyleWeak,The following statement contains a magic number: Assert.AreEqual(10' parsed.ArrayOfBytes[0]);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyleWeak,The following statement contains a magic number: Assert.AreEqual(20' parsed.ArrayOfBytes[1]);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyleWeak,The following statement contains a magic number: Assert.AreEqual(30' parsed.ArrayOfBytes[2]);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestPowerShellStyleWeak,The following statement contains a magic number: Assert.AreEqual(30' parsed.ArrayOfBytes[2]);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestSingleElementInArray,The following statement contains a magic number: Assert.AreEqual(10' parsed.ArrayOfBytes[0]);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestSingleElementInList,The following statement contains a magic number: Assert.AreEqual(10' parsed.List[0]);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestCustomReviver,The following statement contains a magic number: Assert.AreEqual(50' parsed.Point.X);
Magic Number,ArgsTests,BasicTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,TestCustomReviver,The following statement contains a magic number: Assert.AreEqual(25' parsed.Point.Y);
Magic Number,ArgsTests,BasicHook,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,BeforeParse,The following statement contains a magic number: context.SetProperty("Year"' 2013);
Magic Number,ArgsTests,BasicHook,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,BeforeParse,The following statement contains a magic number: context.SetProperty("Year"' 2013);
Magic Number,ArgsTests,BasicHook,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\BasicTests.cs,AfterPopulateProperties,The following statement contains a magic number: Assert.AreEqual(2013' year);
Magic Number,ArgsTests,CaseSensitiveTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\CaseSensitiveTests.cs,TestCaseSensitivityPowerShellStyle,The following statement contains a magic number: Helpers.Run(() =>              {                  var args = "TheAction -S SomeOtherArgValue -A 100".Split(' ');                  var parsed = Args.Parse<CaseSensitiveArgs>(args);                    Assert.AreEqual("SomeOtherArgValue"' parsed.SomeOtherArg);                  Assert.AreEqual(100' parsed.TheActionArgs.AnInteger);              });
Magic Number,ArgsTests,CaseSensitiveTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\CaseSensitiveTests.cs,TestCaseSensitivityPowerShellStyleBadCasedShortcut,The following statement contains a magic number: Helpers.Run(() =>              {                  var args = "TheAction -s SomeOtherArgValue -A 100".Split(' ');                  var parsed = Args.Parse<CaseSensitiveArgs>(args);                    Assert.AreEqual("SomeOtherArgValue"' parsed.SomeOtherArg);                  Assert.AreEqual(100' parsed.TheActionArgs.AnInteger);              }' Helpers.ExpectedArgException("required"));
Magic Number,ArgsTests,CaseSensitiveTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\CaseSensitiveTests.cs,TestCaseSensitivityPowerShellStyleBadCasedAction,The following statement contains a magic number: Helpers.Run(() =>              {                  var args = "Theaction -S SomeOtherArgValue -A 100".Split(' ');                  var parsed = Args.Parse<CaseSensitiveArgs>(args);                    Assert.AreEqual("SomeOtherArgValue"' parsed.SomeOtherArg);                  Assert.AreEqual(100' parsed.TheActionArgs.AnInteger);              }' Helpers.ExpectedException<UnknownActionArgException>("Unknown action: 'Theaction'"));
Magic Number,ArgsTests,CaseSensitiveTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\CaseSensitiveTests.cs,TestCaseSensitivityPowerShellStyleBadCasedName,The following statement contains a magic number: Helpers.Run(() =>              {                  var args = "TheAction -S SomeOtherArgValue -aninteger 100".Split(' ');                  var parsed = Args.Parse<CaseSensitiveArgs>(args);                    Assert.AreEqual("SomeOtherArgValue"' parsed.SomeOtherArg);                  Assert.AreEqual(100' parsed.TheActionArgs.AnInteger);              }' Helpers.ExpectedArgException("required"));
Magic Number,ArgsTests,CaseSensitiveTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\CaseSensitiveTests.cs,TestCaseSensitivitySlashColonStyle,The following statement contains a magic number: Helpers.Run(()=>              {                  var args = "TheAction /S:SomeOtherArgValue /A:100".Split(' ');                    var parsed = Args.Parse<CaseSensitiveArgsSC>(args);                    Assert.AreEqual("SomeOtherArgValue"' parsed.SomeOtherArg);                  Assert.AreEqual(100' parsed.TheActionArgs.AnInteger);              });
Magic Number,ArgsTests,ComponentModelReviverTest,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ComponentModelReviverTest.cs,TestTypeConverter,The following statement contains a magic number: Assert.AreEqual(3' parsed.ThePoint.X);
Magic Number,ArgsTests,ComponentModelReviverTest,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ComponentModelReviverTest.cs,TestTypeConverter,The following statement contains a magic number: Assert.AreEqual(4' parsed.ThePoint.Y);
Magic Number,ArgsTests,ComposableArgActionsTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ComposableArgActionsTests.cs,TestComposableActionsBasic,The following statement contains a magic number: Assert.AreEqual(3' action.Definition.Actions.Count);
Magic Number,ArgsTests,ComposableArgActionsTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ComposableArgActionsTests.cs,TestComposableActionsBasic,The following statement contains a magic number: Assert.AreEqual("Action3"' action.Definition.Actions[2].DefaultAlias);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestMultiSegmentConsoleStringEqualityPositive,The following statement contains a magic number: ConsoleString[] equal = new ConsoleString[2];
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestMultiSegmentConsoleStringEqualityPositive,The following statement contains a magic number: Assert.IsFalse(equal[0].Equals(10));
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestMultiSegmentConsoleStringEqualityNegative,The following statement contains a magic number: ConsoleString[] equal = new ConsoleString[2];
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestIndexOf,The following statement contains a magic number: i < 10
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestIndexOf,The following statement contains a magic number: Assert.AreEqual(8' s.IndexOf("89"));
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestIndexOf,The following statement contains a magic number: i < 1000
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestIndexOf,The following statement contains a magic number: Assert.AreEqual(1010's.IndexOf("!"));
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestHighlightCustomComparison,The following statement contains a magic number: Assert.AreEqual(highlighted[2]' new ConsoleCharacter('a'' ConsoleColor.Red));
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestHighlightCustomComparison,The following statement contains a magic number: Assert.AreEqual(highlighted[3]' new ConsoleCharacter('m'));
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestSubstring,The following statement contains a magic number: ConsoleString sub = orig.Substring(5);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestSubstring,The following statement contains a magic number: ConsoleString sub2 = orig.Substring(5'1);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestReplaceRegex,The following statement contains a magic number: Assert.AreEqual(new ConsoleString("222-333-4444"' ConsoleColor.Green)' hasPhoneNumber.Substring(8));
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConsoleStringEdgeCases,The following statement contains a magic number: i < 99
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringTrimMode,The following statement contains a magic number: Assert.AreEqual(8' bmp.Width);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringTrimMode,The following statement contains a magic number: Assert.AreEqual('a'' bmp.GetPixel(2' 0).Value.Value.Value);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringTrimMode,The following statement contains a magic number: Assert.AreEqual('m'' bmp.GetPixel(3' 0).Value.Value.Value);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringTrimMode,The following statement contains a magic number: Assert.AreEqual(' '' bmp.GetPixel(4' 0).Value.Value.Value);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringTrimMode,The following statement contains a magic number: Assert.AreEqual(' '' bmp.GetPixel(5' 0).Value.Value.Value);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringTrimMode,The following statement contains a magic number: Assert.AreEqual(' '' bmp.GetPixel(6' 0).Value.Value.Value);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringTrimMode,The following statement contains a magic number: Assert.AreEqual(' '' bmp.GetPixel(7' 0).Value.Value.Value);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringMultiLine,The following statement contains a magic number: Assert.AreEqual(10' bmp.Width);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringMultiLine,The following statement contains a magic number: Assert.AreEqual(2' bmp.Height);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringMultiLine,The following statement contains a magic number: Assert.AreEqual('a'' bmp.GetPixel(2' 0).Value.Value.Value);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringMultiLine,The following statement contains a magic number: Assert.AreEqual('m'' bmp.GetPixel(3' 0).Value.Value.Value);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringMultiLine,The following statement contains a magic number: Assert.AreEqual('d'' bmp.GetPixel(2' 1).Value.Value.Value);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringMultiLine,The following statement contains a magic number: Assert.AreEqual('e'' bmp.GetPixel(3' 1).Value.Value.Value);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringMultiLine,The following statement contains a magic number: Assert.AreEqual('l'' bmp.GetPixel(4' 1).Value.Value.Value);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringMultiLine,The following statement contains a magic number: Assert.AreEqual('h'' bmp.GetPixel(5' 1).Value.Value.Value);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringMultiLine,The following statement contains a magic number: Assert.AreEqual('a'' bmp.GetPixel(6' 1).Value.Value.Value);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringMultiLine,The following statement contains a magic number: Assert.AreEqual('m'' bmp.GetPixel(7' 1).Value.Value.Value);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringMultiLine,The following statement contains a magic number: Assert.AreEqual('e'' bmp.GetPixel(8' 1).Value.Value.Value);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringMultiLine,The following statement contains a magic number: Assert.AreEqual('d'' bmp.GetPixel(9' 1).Value.Value.Value);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringSingleLine,The following statement contains a magic number: Assert.AreEqual(4' bmp.Width);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringSingleLine,The following statement contains a magic number: Assert.AreEqual('a'' bmp.GetPixel(2' 0).Value.Value.Value);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConvertBetweenConsoleBitmapAndConsoleStringSingleLine,The following statement contains a magic number: Assert.AreEqual('m'' bmp.GetPixel(3' 0).Value.Value.Value);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConsoleStringSplit,The following statement contains a magic number: Assert.AreEqual(2' split.Count);
Magic Number,ArgsTests,ConsoleStringTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleStringTests.cs,TestConsoleStringSplit,The following statement contains a magic number: Assert.AreEqual(2' split.Count);
Magic Number,ArgsTests,ConsoleTableBuilderTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleTableBuilderTests.cs,ConsoleTableTestMultiOptions,The following statement contains a magic number: ConsoleProvider.Current.BufferWidth = 160;
Magic Number,ArgsTests,ConsoleTableBuilderTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleTableBuilderTests.cs,ConsoleTableTestMultiOptions,The following statement contains a magic number: var columnOverflowBehaviors = new List<ColumnOverflowBehavior>()              {                  new TruncateOverflowBehavior(){ColumnWidth = 7}'                  new SmartWrapOverflowBehavior(){DefineMaxWidthBasedOnConsoleWidth = false' MaxWidthBeforeWrapping = 15}'                  new SmartWrapOverflowBehavior()'              };
Magic Number,ArgsTests,ConsoleTableBuilderTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleTableBuilderTests.cs,ConsoleTableTestMultiOptions,The following statement contains a magic number: var columnOverflowBehaviors = new List<ColumnOverflowBehavior>()              {                  new TruncateOverflowBehavior(){ColumnWidth = 7}'                  new SmartWrapOverflowBehavior(){DefineMaxWidthBasedOnConsoleWidth = false' MaxWidthBeforeWrapping = 15}'                  new SmartWrapOverflowBehavior()'              };
Magic Number,ArgsTests,ConsoleTableBuilderTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleTableBuilderTests.cs,ConsoleTableTestLongWord,The following statement contains a magic number: ConsoleProvider.Current.BufferWidth = 160;
Magic Number,ArgsTests,ConsoleTableBuilderTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleTableBuilderTests.cs,ConsoleTableTestLongWord,The following statement contains a magic number: var columnOverflowBehaviors = new List<ColumnOverflowBehavior>()              {                  new SmartWrapOverflowBehavior(){DefineMaxWidthBasedOnConsoleWidth = false' MaxWidthBeforeWrapping = 10}'                  new SmartWrapOverflowBehavior(){DefineMaxWidthBasedOnConsoleWidth = false' MaxWidthBeforeWrapping = 10}              };
Magic Number,ArgsTests,ConsoleTableBuilderTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ConsoleTableBuilderTests.cs,ConsoleTableTestLongWord,The following statement contains a magic number: var columnOverflowBehaviors = new List<ColumnOverflowBehavior>()              {                  new SmartWrapOverflowBehavior(){DefineMaxWidthBasedOnConsoleWidth = false' MaxWidthBeforeWrapping = 10}'                  new SmartWrapOverflowBehavior(){DefineMaxWidthBasedOnConsoleWidth = false' MaxWidthBeforeWrapping = 10}              };
Magic Number,ArgsTests,EdgeCases,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\EdgeCases.cs,TestBadInt,The following statement contains a magic number: TestBadValues("-i"' 1.1 + "");
Magic Number,ArgsTests,EdgeCases,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\EdgeCases.cs,TestBadByte,The following statement contains a magic number: TestBadValues("-by"' 1.1 + "");
Magic Number,ArgsTests,EdgeCases,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\EdgeCases.cs,TestBadLong,The following statement contains a magic number: TestBadValues("-l"' 1.1 + "");
Magic Number,ArgsTests,EdgeCases,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\EdgeCases.cs,TestStrangeArrayInput,The following statement contains a magic number: Helpers.Run(() =>              {                  var args = "-a '".Split(' ');                  var parsed = Args.Parse<BasicArgs>(args);                  Assert.IsNotNull(parsed.ArrayOfStrings);                  Assert.AreEqual(2' parsed.ArrayOfStrings.Length);                  Assert.AreEqual(""' parsed.ArrayOfStrings[0]);                  Assert.AreEqual(""' parsed.ArrayOfStrings[1]);              });
Magic Number,ArgsTests,ListTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ListTests.cs,TestListsNewSyntax,The following statement contains a magic number: Assert.AreEqual(3' parsed.Files.Count);
Magic Number,ArgsTests,ListTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ListTests.cs,TestListsNewSyntax,The following statement contains a magic number: Assert.AreEqual(3' parsed.Files.Count);
Magic Number,ArgsTests,ListTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ListTests.cs,TestListsNewSyntax,The following statement contains a magic number: Assert.AreEqual(3' parsed.Files.Count);
Magic Number,ArgsTests,ListTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ListTests.cs,TestListsNewSyntaxByPosition,The following statement contains a magic number: Assert.AreEqual(3' parsed.Files.Count);
Magic Number,ArgsTests,ListTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ListTests.cs,TestListsNewSyntaxByPosition,The following statement contains a magic number: Assert.AreEqual(3' parsed.Files.Count);
Magic Number,ArgsTests,LongFormTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\LongFormTests.cs,TestLongFormBasic,The following statement contains a magic number: Assert.AreEqual(100' args.Age);
Magic Number,ArgsTests,LongFormTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\LongFormTests.cs,TestLongFormBasic,The following statement contains a magic number: Assert.AreEqual(100' args2.Age);
Magic Number,ArgsTests,LongFormTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\LongFormTests.cs,TestLongFormBasic,The following statement contains a magic number: Assert.AreEqual(2' aliases.Count);
Magic Number,ArgsTests,LongFormTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\LongFormTests.cs,TestLongFormMultiple,The following statement contains a magic number: Assert.AreEqual(100' args.Age);
Magic Number,ArgsTests,LongFormTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\LongFormTests.cs,TestLongFormMultiple,The following statement contains a magic number: Assert.AreEqual(200' args2.Age);
Magic Number,ArgsTests,LongFormTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\LongFormTests.cs,TestLongFormMixed,The following statement contains a magic number: Assert.AreEqual(100' args.Age);
Magic Number,ArgsTests,LongFormTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\LongFormTests.cs,TestLongFormMixed,The following statement contains a magic number: Assert.AreEqual(101' args.Age);
Magic Number,ArgsTests,LongFormTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\LongFormTests.cs,TestLongFormMixed,The following statement contains a magic number: Assert.AreEqual(102' args.Age);
Magic Number,ArgsTests,LongFormTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\LongFormTests.cs,TestLongFormMixed,The following statement contains a magic number: Assert.AreEqual(103' args.Age);
Magic Number,ArgsTests,ModelTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ModelTests.cs,TestSimpleModel,The following statement contains a magic number: Assert.AreEqual(100' definition.Arguments[0].RevivedValue);
Magic Number,ArgsTests,ModelTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ModelTests.cs,TestSimpleModel,The following statement contains a magic number: Assert.AreEqual(100' definition.Arguments[0].RevivedValue);
Magic Number,ArgsTests,NullableTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\NullableTests.cs,TestNullablesBasic,The following statement contains a magic number: Assert.AreEqual(100' parsed.OptionalNumber.Value);
Magic Number,ArgsTests,ShortcutTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ShortcutTests.cs,TestMultipleShortcuts,The following statement contains a magic number: Assert.AreEqual(5' typeof(MultipleShortcutArgs).GetShortcuts("Help").Count);
Magic Number,ArgsTests,StickyArgTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\StickyArgTests.cs,TestStickyArgs,The following statement contains a magic number: Assert.AreEqual(12345' remembered.Sticky);
Magic Number,ArgsTests,StickyArgTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\StickyArgTests.cs,TestStickyArgsWithCustomPersistence,The following statement contains a magic number: Assert.AreEqual(999' parsed.Sticky);
Magic Number,ArgsTests,TabCompletionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\TabCompletionTests.cs,TestPassThrough,The following statement contains a magic number: Assert.AreEqual(100' parsed.AnotherParam);
Magic Number,ArgsTests,TabCompletionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\TabCompletionTests.cs,TestQuotesWithinArgs,The following statement contains a magic number: Assert.AreEqual(100' parsed.AnotherParam);
Magic Number,ArgsTests,TabCompletionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\TabCompletionTests.cs,TestProperParsingOfQuotedArgs,The following statement contains a magic number: Assert.AreEqual(100' parsed.AnotherParam);
Magic Number,ArgsTests,TabCompletionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\TabCompletionTests.cs,TestBasicCompletion,The following statement contains a magic number: Assert.AreEqual(100' parsed.AnotherParam);
Magic Number,ArgsTests,TabCompletionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\TabCompletionTests.cs,TestHomeAndEnd,The following statement contains a magic number: Assert.AreEqual(100' parsed.AnotherParam);
Magic Number,ArgsTests,TabCompletionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\TabCompletionTests.cs,TestMultiTabCycling,The following statement contains a magic number: Assert.AreEqual(50' parsed.AnotherParam);
Magic Number,ArgsTests,TabCompletionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\TabCompletionTests.cs,TestMultiTabCyclingBackwards,The following statement contains a magic number: Assert.AreEqual(50' parsed.AnotherParam);
Magic Number,ArgsTests,TabCompletionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\TabCompletionTests.cs,TestREPL,The following statement contains a magic number: Assert.AreEqual(2' TestArgsWithREPL.SomeParamValues.Count);
Magic Number,ArgsTests,TabCompletionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\TabCompletionTests.cs,TestModeledActionREPL,The following statement contains a magic number: Assert.AreEqual(2' invokeCount);
Magic Number,ArgsTests,TestConsoleProvider,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\TabCompletionTests.cs,TestConsoleProvider,The following statement contains a magic number: BufferWidth = 80;
Magic Number,ArgsTests,TemplatedUsageTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\TemplatedUsageTests.cs,TestPhotoAlbumManagerConsoleUsage,The following statement contains a magic number: ConsoleProvider.Current = new CLI.CliUnitTestConsole() { BufferWidth = 160 };
Magic Number,ArgsTests,ValidatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ValidatorTests.cs,ArgRangeThrowsOnValueGreaterThanMaxInclusive,The following statement contains a magic number: var args = new string[] { Path.GetTempFileName()' "C:\\Windows"' "-start"' 101 + "" };
Magic Number,ArgsTests,ValidatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ValidatorTests.cs,ArgRangeThrowsOnValueEqualToMaxExclusive,The following statement contains a magic number: var args = new string[] { Path.GetTempFileName()' "C:\\Windows"' "-somenumber"' 100 + "" };
Magic Number,ArgsTests,ValidatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ValidatorTests.cs,TestRangeValidator,The following statement contains a magic number: double start = 0' end = 10;
Magic Number,ArgsTests,ValidatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ValidatorTests.cs,TestRangeValidatorMaxInclusive,The following statement contains a magic number: var correctValue = 100;
Magic Number,ArgsTests,ValidatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ValidatorTests.cs,TestRangeValidatorMaxExclusive,The following statement contains a magic number: var correctValue = 99;
Magic Number,ArgsTests,ValidatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ValidatorTests.cs,TestPhoneNumber,The following statement contains a magic number: Assert.AreEqual('('' args.PhoneNumber.ToString()[2]);
Magic Number,ArgsTests,ValidatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ValidatorTests.cs,TestPhoneNumber,The following statement contains a magic number: Assert.IsTrue(char.IsDigit(args.PhoneNumber.ToString()[3]) && int.Parse(args.PhoneNumber.ToString()[3] + "") > 1);
Magic Number,ArgsTests,ValidatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ValidatorTests.cs,TestPhoneNumber,The following statement contains a magic number: Assert.IsTrue(char.IsDigit(args.PhoneNumber.ToString()[3]) && int.Parse(args.PhoneNumber.ToString()[3] + "") > 1);
Magic Number,ArgsTests,ValidatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ValidatorTests.cs,TestPhoneNumber,The following statement contains a magic number: Assert.IsTrue(char.IsDigit(args.PhoneNumber.ToString()[4]));
Magic Number,ArgsTests,ValidatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ValidatorTests.cs,TestPhoneNumber,The following statement contains a magic number: Assert.IsTrue(char.IsDigit(args.PhoneNumber.ToString()[5]));
Magic Number,ArgsTests,ValidatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ValidatorTests.cs,TestPhoneNumber,The following statement contains a magic number: Assert.AreEqual(')'' args.PhoneNumber.ToString()[6]);
Magic Number,ArgsTests,ValidatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ValidatorTests.cs,TestPhoneNumber,The following statement contains a magic number: Assert.AreEqual('-'' args.PhoneNumber.ToString()[7]);
Magic Number,ArgsTests,ValidatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ValidatorTests.cs,TestPhoneNumber,The following statement contains a magic number: Assert.IsTrue(char.IsDigit(args.PhoneNumber.ToString()[8]));
Magic Number,ArgsTests,ValidatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ValidatorTests.cs,TestPhoneNumber,The following statement contains a magic number: Assert.IsTrue(char.IsDigit(args.PhoneNumber.ToString()[9]));
Magic Number,ArgsTests,ValidatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ValidatorTests.cs,TestPhoneNumber,The following statement contains a magic number: Assert.IsTrue(char.IsDigit(args.PhoneNumber.ToString()[10]));
Magic Number,ArgsTests,ValidatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ValidatorTests.cs,TestPhoneNumber,The following statement contains a magic number: Assert.AreEqual('-'' args.PhoneNumber.ToString()[11]);
Magic Number,ArgsTests,ValidatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ValidatorTests.cs,TestPhoneNumber,The following statement contains a magic number: Assert.IsTrue(char.IsDigit(args.PhoneNumber.ToString()[12]));
Magic Number,ArgsTests,ValidatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ValidatorTests.cs,TestPhoneNumber,The following statement contains a magic number: Assert.IsTrue(char.IsDigit(args.PhoneNumber.ToString()[13]));
Magic Number,ArgsTests,ValidatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ValidatorTests.cs,TestPhoneNumber,The following statement contains a magic number: Assert.IsTrue(char.IsDigit(args.PhoneNumber.ToString()[14]));
Magic Number,ArgsTests,ValidatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ValidatorTests.cs,TestPhoneNumber,The following statement contains a magic number: Assert.IsTrue(char.IsDigit(args.PhoneNumber.ToString()[15]));
Magic Number,ArgsTests,VideoEncoderTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\VideoEncoderTests.cs,TestActionArgInheritence,The following statement contains a magic number: double from = 10' to = 20;
Magic Number,ArgsTests,VideoEncoderTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\VideoEncoderTests.cs,TestActionArgInheritence,The following statement contains a magic number: double from = 10' to = 20;
Magic Number,ArgsTests,ObservableDocumentTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservableDocumentTests.cs,ObservableDocumentE2ETest,The following statement contains a magic number: Assert.AreEqual(21' notifyCount);
Magic Number,ArgsTests,ObservableDocumentTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservableDocumentTests.cs,ObservableDocumentUndoRedo,The following statement contains a magic number: var numElements = 10;
Magic Number,ArgsTests,PromiseTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\PromiseTests.cs,TestAsAwaitable,The following statement contains a magic number: Task.Factory.StartNew(()=> { Thread.Sleep(50); done = true; d.Resolve(); });
Magic Number,ArgsTests,PromiseTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\PromiseTests.cs,TestWhenAll,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      Thread.Sleep(100 * (1+ myI));                      Interlocked.Increment(ref completionCount);                      d.Resolve();                  });
Magic Number,ArgsTests,PromiseTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\PromiseTests.cs,TestWhenAll,The following statement contains a magic number: i < 5
Magic Number,ArgsTests,PromiseTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\PromiseTests.cs,TestWhenAll,The following statement contains a magic number: Assert.AreEqual(5' completionCount);
Magic Number,ArgsTests,PromiseTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\PromiseTests.cs,TestWhenAllWithExceptions,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      if (myI % 2 == 0)                      {                          d.Resolve();                      }                      else                      {                          d.Reject(new Exception("Failed"));                      }                  });
Magic Number,ArgsTests,PromiseTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\PromiseTests.cs,TestWhenAllWithExceptions,The following statement contains a magic number: i < 10
Magic Number,ArgsTests.CLI.Apps,AppLifecycle,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\AppLifecycle.cs,PumpFailurePreservesStack,The following statement contains a magic number: var testCli = new CliUnitTestConsole(80' 4);
Magic Number,ArgsTests.CLI.Apps,AppLifecycle,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\AppLifecycle.cs,PumpFailurePreservesStack,The following statement contains a magic number: var testCli = new CliUnitTestConsole(80' 4);
Magic Number,ArgsTests.CLI.Apps,AppLifecycle,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\AppLifecycle.cs,TestQueueActionAsync,The following statement contains a magic number: var app = new ConsoleApp(80' 30);
Magic Number,ArgsTests.CLI.Apps,AppLifecycle,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\AppLifecycle.cs,TestQueueActionAsync,The following statement contains a magic number: var app = new ConsoleApp(80' 30);
Magic Number,ArgsTests.CLI.Apps,AppLifecycle,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\AppLifecycle.cs,TestQueueActionAsync,The following statement contains a magic number: var hello = await app.QueueActionAsync<string>(async () =>              {                  ConsoleApp.AssertAppThread(app);                  await Task.Delay(100);                  ConsoleApp.AssertAppThread(app);                  app.Stop();                  return "Hello";              });
Magic Number,ArgsTests.CLI.Apps,AppLifecycle,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\AppLifecycle.cs,TestQueueActionAsyncExceptions,The following statement contains a magic number: var app = new ConsoleApp(80' 30);
Magic Number,ArgsTests.CLI.Apps,AppLifecycle,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\AppLifecycle.cs,TestQueueActionAsyncExceptions,The following statement contains a magic number: var app = new ConsoleApp(80' 30);
Magic Number,ArgsTests.CLI.Apps,AppLifecycle,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\AppLifecycle.cs,TestQueueActionAsyncExceptions,The following statement contains a magic number: var hello = await app.QueueActionAsync<string>(async () =>                  {                      ConsoleApp.AssertAppThread(app);                      await Task.Delay(10);                      ConsoleApp.AssertAppThread(app);                      throw new FormatException("Some random format exception");                  });
Magic Number,ArgsTests.CLI,AsyncUITests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\AsyncUITests.cs,TestAsyncAwaitWithinApp,The following statement contains a magic number: app.QueueAction(async () =>              {                  ConsoleApp.AssertAppThread(app);                  foreach (TaskCreationOptions option in Enum.GetValues(typeof(TaskCreationOptions)))                  {                      Console.WriteLine(option);                      await Task.Factory.StartNew(() => { Thread.Sleep(50); }' option);                      ConsoleApp.AssertAppThread(app);                      Console.WriteLine("App thread confirmed");                  }                  app.Stop();              });
Magic Number,ArgsTests.CLI,AsyncUITests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\AsyncUITests.cs,TestTaskTimeout,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(1)).TimeoutAfter(TimeSpan.FromSeconds(.5));
Magic Number,ArgsTests.CLI,GridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\GridTests.cs,TestBasicGrid,The following statement contains a magic number: var app = new CliTestHarness(this.TestContext' 80'30);
Magic Number,ArgsTests.CLI,GridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\GridTests.cs,TestBasicGrid,The following statement contains a magic number: var app = new CliTestHarness(this.TestContext' 80'30);
Magic Number,ArgsTests.CLI,GridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\GridTests.cs,TestBasicGrid,The following statement contains a magic number: app.QueueAction(() =>              {                  app.SetTimeout(() => app.SendKey(new ConsoleKeyInfo((char)0' ConsoleKey.DownArrow' false'false'false))' TimeSpan.FromMilliseconds(333));                  app.SetTimeout(() => app.SendKey(new ConsoleKeyInfo((char)0' ConsoleKey.UpArrow' false' false' false))' TimeSpan.FromMilliseconds(666));                  app.SetTimeout(() => app.Stop()' TimeSpan.FromMilliseconds(1000));              });
Magic Number,ArgsTests.CLI,GridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\GridTests.cs,TestBasicGrid,The following statement contains a magic number: app.QueueAction(() =>              {                  app.SetTimeout(() => app.SendKey(new ConsoleKeyInfo((char)0' ConsoleKey.DownArrow' false'false'false))' TimeSpan.FromMilliseconds(333));                  app.SetTimeout(() => app.SendKey(new ConsoleKeyInfo((char)0' ConsoleKey.UpArrow' false' false' false))' TimeSpan.FromMilliseconds(666));                  app.SetTimeout(() => app.Stop()' TimeSpan.FromMilliseconds(1000));              });
Magic Number,ArgsTests.CLI,GridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\GridTests.cs,TestBasicGrid,The following statement contains a magic number: app.QueueAction(() =>              {                  app.SetTimeout(() => app.SendKey(new ConsoleKeyInfo((char)0' ConsoleKey.DownArrow' false'false'false))' TimeSpan.FromMilliseconds(333));                  app.SetTimeout(() => app.SendKey(new ConsoleKeyInfo((char)0' ConsoleKey.UpArrow' false' false' false))' TimeSpan.FromMilliseconds(666));                  app.SetTimeout(() => app.Stop()' TimeSpan.FromMilliseconds(1000));              });
Magic Number,ArgsTests.CLI,TimerTest,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\TimerTest.cs,TestSetTimeout,The following statement contains a magic number: app.SetTimeout(() => { count++; app.Stop(); }' TimeSpan.FromMilliseconds(50));
Magic Number,ArgsTests.CLI,TimerTest,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\TimerTest.cs,TestSetTimeoutCancelling,The following statement contains a magic number: app.SetTimeout(() => { count++; }' TimeSpan.FromMilliseconds(50)).Dispose();
Magic Number,ArgsTests.CLI,TimerTest,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\TimerTest.cs,TestSetTimeoutCancelling,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,ArgsTests.CLI,TimerTest,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\TimerTest.cs,TestSetInterval,The following statement contains a magic number: app.SetInterval(() => { count++; if (count == 5) { app.Stop(); } }' TimeSpan.FromMilliseconds(50));
Magic Number,ArgsTests.CLI,TimerTest,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\TimerTest.cs,TestSetInterval,The following statement contains a magic number: app.SetInterval(() => { count++; if (count == 5) { app.Stop(); } }' TimeSpan.FromMilliseconds(50));
Magic Number,ArgsTests.CLI,TimerTest,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\TimerTest.cs,TestSetInterval,The following statement contains a magic number: Assert.AreEqual(5' count);
Magic Number,ArgsTests.CLI,TimerTest,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\TimerTest.cs,TestSetIntervalCancelling,The following statement contains a magic number: handle = app.SetInterval(() => { count++; if (count == 5) { handle.Dispose(); } }' TimeSpan.FromMilliseconds(5));
Magic Number,ArgsTests.CLI,TimerTest,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\TimerTest.cs,TestSetIntervalCancelling,The following statement contains a magic number: handle = app.SetInterval(() => { count++; if (count == 5) { handle.Dispose(); } }' TimeSpan.FromMilliseconds(5));
Magic Number,ArgsTests.CLI,TimerTest,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\TimerTest.cs,TestSetIntervalCancelling,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,ArgsTests.CLI,TimerTest,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\TimerTest.cs,TestSetIntervalCancelling,The following statement contains a magic number: Assert.AreEqual(5' count);
Magic Number,ArgsTests.CLI,TimerTest,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\TimerTest.cs,TestTaskTimeouts,The following statement contains a magic number: var unusedResult = await Task<string>.Factory.StartNew(()=> { Thread.Sleep(100); return "Hello"; }).TimeoutAfter(TimeSpan.FromMilliseconds(1));
Magic Number,ArgsTests.CLI,VisualTreeTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\VisualTreeTests.cs,ConsoleAppLifecycleTestBasic,The following statement contains a magic number: ConsoleApp app = new ConsoleApp(0' 0' 80' 10);
Magic Number,ArgsTests.CLI,VisualTreeTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\VisualTreeTests.cs,ConsoleAppLifecycleTestBasic,The following statement contains a magic number: ConsoleApp app = new ConsoleApp(0' 0' 80' 10);
Magic Number,ArgsTests.CLI,VisualTreeTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\VisualTreeTests.cs,ConsoleAppLifecycleTestBasic,The following statement contains a magic number: Assert.AreEqual(2' addCounter);
Magic Number,ArgsTests.CLI,VisualTreeTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\VisualTreeTests.cs,ConsoleAppLifecycleTestBasic,The following statement contains a magic number: Assert.AreEqual(2' addCounter);
Magic Number,ArgsTests.CLI,VisualTreeTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\VisualTreeTests.cs,ConsoleAppLifecycleTestBasic,The following statement contains a magic number: Assert.AreEqual(4' addCounter);
Magic Number,ArgsTests.CLI,VisualTreeTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\VisualTreeTests.cs,ConsoleAppLifecycleTestBasic,The following statement contains a magic number: Assert.AreEqual(4' addCounter);
Magic Number,ArgsTests.CLI,VisualTreeTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\VisualTreeTests.cs,ConsoleAppLifecycleTestBasic,The following statement contains a magic number: Assert.AreEqual(4' addCounter);
Magic Number,ArgsTests.CLI,VisualTreeTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\VisualTreeTests.cs,ConsoleAppLifecycleTestBasic,The following statement contains a magic number: Assert.AreEqual(4' removeCounter);
Magic Number,ArgsTests.CLI,VisualTreeTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\VisualTreeTests.cs,EnsureCantReuseControls,The following statement contains a magic number: ConsoleApp app = new ConsoleApp(0' 0' 80' 10);
Magic Number,ArgsTests.CLI,VisualTreeTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\VisualTreeTests.cs,EnsureCantReuseControls,The following statement contains a magic number: ConsoleApp app = new ConsoleApp(0' 0' 80' 10);
Magic Number,ArgsTests.CLI,ContextAssistTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ContextAssistTests.cs,TestSyncSearchDoesntBreakConsole,The following statement contains a magic number: i < 10000
Magic Number,ArgsTests.CLI,ContextAssistTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Core\ContextAssistTests.cs,TestAsyncSearchDoesntBreakConsole,The following statement contains a magic number: i < 10000
Magic Number,ArgsTests.CLI,AnimatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\AnimatorTests.cs,TestAnimatorInTimeAsync,The following statement contains a magic number: var app = new CliTestHarness(TestContext' 0' 0' 40' 1' true);
Magic Number,ArgsTests.CLI,AnimatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\AnimatorTests.cs,TestAnimatorInTimeAsync,The following statement contains a magic number: app.QueueAction(() =>              {                  var panel = app.LayoutRoot.Add(new SpacetimePanel(40' 1));                  panel.SpaceTime.Start(nameof(TestAnimatorInTimeAsync));                  app.SecondsBetweenKeyframes = panel.SpaceTime.Increment.TotalSeconds;                  panel.SpaceTime.QueueAction("Test"'async ()=>                  {                      panel.RealTimeViewing.Enabled = false;                      var element = panel.SpaceTime.Add(new SpacialElement());                      element.ResizeTo(1' 1);                      await app.PaintAndRecordKeyFrameAsync();                                    await Animator.AnimateAsync(new FloatAnimatorOptions()                      {                          From = 0'                          To = panel.Width-1'                          Duration = 3000'                          Setter = v => element.MoveTo(v' element.Top)'                          DelayProvider =delayProvider'                          AutoReverse = true'                          AutoReverseDelay = 1000'                      });                      panel.SpaceTime.Stop();                      app.Stop();                  });              });
Magic Number,ArgsTests.CLI,AnimatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\AnimatorTests.cs,TestAnimatorInTimeAsync,The following statement contains a magic number: app.QueueAction(() =>              {                  var panel = app.LayoutRoot.Add(new SpacetimePanel(40' 1));                  panel.SpaceTime.Start(nameof(TestAnimatorInTimeAsync));                  app.SecondsBetweenKeyframes = panel.SpaceTime.Increment.TotalSeconds;                  panel.SpaceTime.QueueAction("Test"'async ()=>                  {                      panel.RealTimeViewing.Enabled = false;                      var element = panel.SpaceTime.Add(new SpacialElement());                      element.ResizeTo(1' 1);                      await app.PaintAndRecordKeyFrameAsync();                                    await Animator.AnimateAsync(new FloatAnimatorOptions()                      {                          From = 0'                          To = panel.Width-1'                          Duration = 3000'                          Setter = v => element.MoveTo(v' element.Top)'                          DelayProvider =delayProvider'                          AutoReverse = true'                          AutoReverseDelay = 1000'                      });                      panel.SpaceTime.Stop();                      app.Stop();                  });              });
Magic Number,ArgsTests.CLI,AnimatorTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\AnimatorTests.cs,TestAnimatorInTimeAsync,The following statement contains a magic number: app.QueueAction(() =>              {                  var panel = app.LayoutRoot.Add(new SpacetimePanel(40' 1));                  panel.SpaceTime.Start(nameof(TestAnimatorInTimeAsync));                  app.SecondsBetweenKeyframes = panel.SpaceTime.Increment.TotalSeconds;                  panel.SpaceTime.QueueAction("Test"'async ()=>                  {                      panel.RealTimeViewing.Enabled = false;                      var element = panel.SpaceTime.Add(new SpacialElement());                      element.ResizeTo(1' 1);                      await app.PaintAndRecordKeyFrameAsync();                                    await Animator.AnimateAsync(new FloatAnimatorOptions()                      {                          From = 0'                          To = panel.Width-1'                          Duration = 3000'                          Setter = v => element.MoveTo(v' element.Top)'                          DelayProvider =delayProvider'                          AutoReverse = true'                          AutoReverseDelay = 1000'                      });                      panel.SpaceTime.Stop();                      app.Stop();                  });              });
Magic Number,ArgsTests.CLI.Controls,DialogTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\DialogTests.cs,ShowMessageBasicString,The following statement contains a magic number: var app = new CliTestHarness(this.TestContext' 80'20' true);
Magic Number,ArgsTests.CLI.Controls,DialogTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\DialogTests.cs,ShowMessageBasicString,The following statement contains a magic number: var app = new CliTestHarness(this.TestContext' 80'20' true);
Magic Number,ArgsTests.CLI.Controls,DialogTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\DialogTests.cs,ShowYesConfirmation,The following statement contains a magic number: var app = new CliTestHarness(this.TestContext' 80' 20' true);
Magic Number,ArgsTests.CLI.Controls,DialogTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\DialogTests.cs,ShowYesConfirmation,The following statement contains a magic number: var app = new CliTestHarness(this.TestContext' 80' 20' true);
Magic Number,ArgsTests.CLI.Controls,DialogTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\DialogTests.cs,ShowTextInput,The following statement contains a magic number: var app = new CliTestHarness(this.TestContext' 80' 20' true);
Magic Number,ArgsTests.CLI.Controls,DialogTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\DialogTests.cs,ShowTextInput,The following statement contains a magic number: var app = new CliTestHarness(this.TestContext' 80' 20' true);
Magic Number,ArgsTests.CLI.Controls,DialogTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\DialogTests.cs,ShowEnumOptions,The following statement contains a magic number: var app = new CliTestHarness(this.TestContext' 80' 20' true);
Magic Number,ArgsTests.CLI.Controls,DialogTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\DialogTests.cs,ShowEnumOptions,The following statement contains a magic number: var app = new CliTestHarness(this.TestContext' 80' 20' true);
Magic Number,ArgsTests.CLI.Controls,DialogTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\DialogTests.cs,ShowEnumOptions,The following statement contains a magic number: app.QueueAction(async () =>              {                  Promise<ConsoleColor?> dialogPromise;                  dialogPromise = Dialog.ShowEnumOptions<ConsoleColor>("Enum option picker".ToGreen());                  await app.PaintAndRecordKeyFrameAsync();                  Assert.IsFalse(dialogPromise.IsFulfilled);                    for (var i = 0; i < 6; i++)                  {                      app.SendKey(new ConsoleKeyInfo(' '' ConsoleKey.DownArrow' false' false' false));                      await app.PaintAndRecordKeyFrameAsync();                  }                    app.SendKey(new ConsoleKeyInfo(' '' ConsoleKey.Enter' false' false' false));                  await app.PaintAndRecordKeyFrameAsync();                    var enumValue = (await dialogPromise.AsAwaitable());                  Assert.AreEqual(ConsoleColor.DarkGreen' enumValue);                  app.Stop();              });
Magic Number,ArgsTests.CLI.Controls,GridLayoutTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\GridLayoutTests.cs,GridLayoutEndToEnd,The following statement contains a magic number: var app = new CliTestHarness(this.TestContext' 80' 20' true);
Magic Number,ArgsTests.CLI.Controls,GridLayoutTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\GridLayoutTests.cs,GridLayoutEndToEnd,The following statement contains a magic number: var app = new CliTestHarness(this.TestContext' 80' 20' true);
Magic Number,ArgsTests.CLI.Controls,GridLayoutTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\GridLayoutTests.cs,GridLayoutEndToEnd,The following statement contains a magic number: var gridLayout = app.LayoutRoot.Add(new GridLayout(new GridLayoutOptions()              {                  Columns = new List<GridColumnDefinition>()                  {                      new GridColumnDefinition(){ Width = 5' Type = GridValueType.Pixels }'                      new GridColumnDefinition(){ Width= 2' Type = GridValueType.RemainderValue }'                      new GridColumnDefinition(){ Width = 2' Type = GridValueType.RemainderValue }'                  }'                  Rows = new List<GridRowDefinition>()                  {                       new GridRowDefinition(){ Height = 1' Type = GridValueType.Pixels }'                       new GridRowDefinition(){ Height= 2' Type = GridValueType.RemainderValue }'                       new GridRowDefinition(){ Height = 1' Type = GridValueType.Pixels }'                  }              })).Fill();
Magic Number,ArgsTests.CLI.Controls,GridLayoutTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\GridLayoutTests.cs,GridLayoutEndToEnd,The following statement contains a magic number: var gridLayout = app.LayoutRoot.Add(new GridLayout(new GridLayoutOptions()              {                  Columns = new List<GridColumnDefinition>()                  {                      new GridColumnDefinition(){ Width = 5' Type = GridValueType.Pixels }'                      new GridColumnDefinition(){ Width= 2' Type = GridValueType.RemainderValue }'                      new GridColumnDefinition(){ Width = 2' Type = GridValueType.RemainderValue }'                  }'                  Rows = new List<GridRowDefinition>()                  {                       new GridRowDefinition(){ Height = 1' Type = GridValueType.Pixels }'                       new GridRowDefinition(){ Height= 2' Type = GridValueType.RemainderValue }'                       new GridRowDefinition(){ Height = 1' Type = GridValueType.Pixels }'                  }              })).Fill();
Magic Number,ArgsTests.CLI.Controls,GridLayoutTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\GridLayoutTests.cs,GridLayoutEndToEnd,The following statement contains a magic number: var gridLayout = app.LayoutRoot.Add(new GridLayout(new GridLayoutOptions()              {                  Columns = new List<GridColumnDefinition>()                  {                      new GridColumnDefinition(){ Width = 5' Type = GridValueType.Pixels }'                      new GridColumnDefinition(){ Width= 2' Type = GridValueType.RemainderValue }'                      new GridColumnDefinition(){ Width = 2' Type = GridValueType.RemainderValue }'                  }'                  Rows = new List<GridRowDefinition>()                  {                       new GridRowDefinition(){ Height = 1' Type = GridValueType.Pixels }'                       new GridRowDefinition(){ Height= 2' Type = GridValueType.RemainderValue }'                       new GridRowDefinition(){ Height = 1' Type = GridValueType.Pixels }'                  }              })).Fill();
Magic Number,ArgsTests.CLI.Controls,GridLayoutTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\GridLayoutTests.cs,GridLayoutEndToEnd,The following statement contains a magic number: var gridLayout = app.LayoutRoot.Add(new GridLayout(new GridLayoutOptions()              {                  Columns = new List<GridColumnDefinition>()                  {                      new GridColumnDefinition(){ Width = 5' Type = GridValueType.Pixels }'                      new GridColumnDefinition(){ Width= 2' Type = GridValueType.RemainderValue }'                      new GridColumnDefinition(){ Width = 2' Type = GridValueType.RemainderValue }'                  }'                  Rows = new List<GridRowDefinition>()                  {                       new GridRowDefinition(){ Height = 1' Type = GridValueType.Pixels }'                       new GridRowDefinition(){ Height= 2' Type = GridValueType.RemainderValue }'                       new GridRowDefinition(){ Height = 1' Type = GridValueType.Pixels }'                  }              })).Fill();
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridBasic,The following statement contains a magic number: i < 100
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridBasic,The following statement contains a magic number: var app = new CliTestHarness(TestContext' 80' 20' true) { SecondsBetweenKeyframes = .05 };
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridBasic,The following statement contains a magic number: var app = new CliTestHarness(TestContext' 80' 20' true) { SecondsBetweenKeyframes = .05 };
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridBasic,The following statement contains a magic number: var app = new CliTestHarness(TestContext' 80' 20' true) { SecondsBetweenKeyframes = .05 };
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridBasic,The following statement contains a magic number: var dataGrid = new ListGrid<Item>(new ListGridOptions<Item>()              {                  DataSource = new SyncList<Item>(items)'                  Columns = new List<ListGridColumnDefinition<Item>>()                  {                      new ListGridColumnDefinition<Item>()                      {                          Header = "Foo".ToGreen()'                          Width = .5'                          Type = GridValueType.Percentage'                          Formatter = (item) => new Label(){ Text = item.Foo.ToConsoleString() }                      }'                      new ListGridColumnDefinition<Item>()                      {                          Header = "Bar".ToRed()'                          Width = .5'                          Type = GridValueType.Percentage'                          Formatter = (item) => new Label(){ Text = item.Bar.ToConsoleString() }                      }                  }              });
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridBasic,The following statement contains a magic number: var dataGrid = new ListGrid<Item>(new ListGridOptions<Item>()              {                  DataSource = new SyncList<Item>(items)'                  Columns = new List<ListGridColumnDefinition<Item>>()                  {                      new ListGridColumnDefinition<Item>()                      {                          Header = "Foo".ToGreen()'                          Width = .5'                          Type = GridValueType.Percentage'                          Formatter = (item) => new Label(){ Text = item.Foo.ToConsoleString() }                      }'                      new ListGridColumnDefinition<Item>()                      {                          Header = "Bar".ToRed()'                          Width = .5'                          Type = GridValueType.Percentage'                          Formatter = (item) => new Label(){ Text = item.Bar.ToConsoleString() }                      }                  }              });
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestAsyncDataGridBasic,The following statement contains a magic number: i < 100
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestAsyncDataGridBasic,The following statement contains a magic number: var app = new CliTestHarness(TestContext' 80' 20' true) {  };
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestAsyncDataGridBasic,The following statement contains a magic number: var app = new CliTestHarness(TestContext' 80' 20' true) {  };
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestAsyncDataGridBasic,The following statement contains a magic number: var dataGrid = new ListGrid<Item>(new ListGridOptions<Item>()              {                  DataSource = new SlowList<Item>(items)'                  Columns = new List<ListGridColumnDefinition<Item>>()                  {                      new ListGridColumnDefinition<Item>()                      {                          Header = "Foo".ToGreen()'                          Width = .5'                          Type = GridValueType.Percentage'                          Formatter = (item) => new Label(){ Text = item.Foo.ToConsoleString() }                      }'                      new ListGridColumnDefinition<Item>()                      {                          Header = "Bar".ToRed()'                          Width = .5'                          Type = GridValueType.Percentage'                          Formatter = (item) => new Label(){ Text = item.Bar.ToConsoleString() }                      }                  }              });
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestAsyncDataGridBasic,The following statement contains a magic number: var dataGrid = new ListGrid<Item>(new ListGridOptions<Item>()              {                  DataSource = new SlowList<Item>(items)'                  Columns = new List<ListGridColumnDefinition<Item>>()                  {                      new ListGridColumnDefinition<Item>()                      {                          Header = "Foo".ToGreen()'                          Width = .5'                          Type = GridValueType.Percentage'                          Formatter = (item) => new Label(){ Text = item.Foo.ToConsoleString() }                      }'                      new ListGridColumnDefinition<Item>()                      {                          Header = "Bar".ToRed()'                          Width = .5'                          Type = GridValueType.Percentage'                          Formatter = (item) => new Label(){ Text = item.Bar.ToConsoleString() }                      }                  }              });
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestAsyncDataGridBasic,The following statement contains a magic number: app.QueueAction(async () =>              {                  var selectionLabel = app.LayoutRoot.Add(new Label() { Text = "DEFAULT".ToConsoleString()' Height = 1 }).CenterHorizontally();                  selectionLabel.Text = $"SelectedRowIndex: {dataGrid.SelectedRowIndex}' SelectedCellIndex: {dataGrid.SelectedColumnIndex}".ToConsoleString();                  dataGrid.SelectionChanged.SubscribeForLifetime(() =>                  {                      selectionLabel.Text = $"SelectedRowIndex: {dataGrid.SelectedRowIndex}' SelectedCellIndex: {dataGrid.SelectedColumnIndex}".ToConsoleString();                  }' dataGrid);                  app.LayoutRoot.Add(dataGrid).Fill(padding: new Thickness(0' 0' 1' 0));                  await app.PaintAndRecordKeyFrameAsync();                  await Task.Delay(125);                  await app.PaintAndRecordKeyFrameAsync();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridRefresh,The following statement contains a magic number: i < 100
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridRefresh,The following statement contains a magic number: var app = new CliTestHarness(TestContext' 80' 20' true) { SecondsBetweenKeyframes = .05 };
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridRefresh,The following statement contains a magic number: var app = new CliTestHarness(TestContext' 80' 20' true) { SecondsBetweenKeyframes = .05 };
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridRefresh,The following statement contains a magic number: var app = new CliTestHarness(TestContext' 80' 20' true) { SecondsBetweenKeyframes = .05 };
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridRefresh,The following statement contains a magic number: var dataGrid = new ListGrid<Item>(new ListGridOptions<Item>()              {                  DataSource = new SyncList<Item>(items)'                  Columns = new List<ListGridColumnDefinition<Item>>()                  {                      new ListGridColumnDefinition<Item>()                      {                          Header = "Foo".ToGreen()'                          Width = 20'                          Type = GridValueType.Pixels'                          Formatter = (item) => new Label(){ Text = item.Foo.ToConsoleString() }                      }'                      new ListGridColumnDefinition<Item>()                      {                          Header = "Bar".ToRed()'                          Width = 1'                          Type = GridValueType.RemainderValue'                          Formatter = (item) => new Label(){ Text = item.Bar.ToConsoleString() }                      }                  }              });
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridRefresh,The following statement contains a magic number: app.QueueAction(async () =>              {                  var selectionLabel = app.LayoutRoot.Add(new Label() { Text = "DEFAULT".ToConsoleString()' Height = 1 }).CenterHorizontally();                  selectionLabel.Text = $"SelectedRowIndex: {dataGrid.SelectedRowIndex}' SelectedCellIndex: {dataGrid.SelectedColumnIndex}".ToConsoleString();                  dataGrid.SelectionChanged.SubscribeForLifetime(() =>                  {                      selectionLabel.Text = $"SelectedRowIndex: {dataGrid.SelectedRowIndex}' SelectedCellIndex: {dataGrid.SelectedColumnIndex}".ToConsoleString();                  }' dataGrid);                  app.LayoutRoot.Add(dataGrid).Fill(padding: new Thickness(0' 0' 1' 0));                  await app.PaintAndRecordKeyFrameAsync();                    for (var i = 0; i < 100; i++)                  {                      items[i].Foo = "FooRefreshed" + i;                      items[i].Bar = "BarRefreshed" + i;                  }                    dataGrid.Refresh();                  await app.PaintAndRecordKeyFrameAsync();                    app.Stop();              });
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridProgrammaticSelection,The following statement contains a magic number: i < 100
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridProgrammaticSelection,The following statement contains a magic number: var app = new CliTestHarness(TestContext' 80' 20' true) { };
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridProgrammaticSelection,The following statement contains a magic number: var app = new CliTestHarness(TestContext' 80' 20' true) { };
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridProgrammaticSelection,The following statement contains a magic number: var dataGrid = new ListGrid<Item>(new ListGridOptions<Item>()              {                  DataSource = new SyncList<Item>(items)'                  Columns = new List<ListGridColumnDefinition<Item>>()                  {                      new ListGridColumnDefinition<Item>()                      {                          Header = "Foo".ToGreen()'                          Width = 20'                          Type = GridValueType.Pixels'                          Formatter = (item) => new Label(){ Text = item.Foo.ToConsoleString() }                      }'                      new ListGridColumnDefinition<Item>()                      {                          Header = "Bar".ToRed()'                          Width = 20'                          Type = GridValueType.Pixels'                          Formatter = (item) => new Label(){ Text = item.Bar.ToConsoleString() }                      }                  }'              });
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridProgrammaticSelection,The following statement contains a magic number: var dataGrid = new ListGrid<Item>(new ListGridOptions<Item>()              {                  DataSource = new SyncList<Item>(items)'                  Columns = new List<ListGridColumnDefinition<Item>>()                  {                      new ListGridColumnDefinition<Item>()                      {                          Header = "Foo".ToGreen()'                          Width = 20'                          Type = GridValueType.Pixels'                          Formatter = (item) => new Label(){ Text = item.Foo.ToConsoleString() }                      }'                      new ListGridColumnDefinition<Item>()                      {                          Header = "Bar".ToRed()'                          Width = 20'                          Type = GridValueType.Pixels'                          Formatter = (item) => new Label(){ Text = item.Bar.ToConsoleString() }                      }                  }'              });
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridCelllevelSelection,The following statement contains a magic number: i < 100
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridCelllevelSelection,The following statement contains a magic number: var app = new CliTestHarness(TestContext' 80' 20' true) { };
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridCelllevelSelection,The following statement contains a magic number: var app = new CliTestHarness(TestContext' 80' 20' true) { };
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridCelllevelSelection,The following statement contains a magic number: var dataGrid = new ListGrid<Item>(new ListGridOptions<Item>()              {                  DataSource = new SyncList<Item>(items)'                  SelectionMode = DataGridSelectionMode.Cell'                  Columns = new List<ListGridColumnDefinition<Item>>()                  {                      new ListGridColumnDefinition<Item>()                      {                          Header = "Foo".ToGreen()'                          Width = 20'                          Type = GridValueType.Pixels'                          Formatter = (item) => new Label(){ Text = item.Foo.ToConsoleString() }                      }'                      new ListGridColumnDefinition<Item>()                      {                          Header = "Bar".ToRed()'                          Width = 20'                          Type = GridValueType.Pixels'                          Formatter = (item) => new Label(){ Text = item.Bar.ToConsoleString() }                      }                  }              });
Magic Number,ArgsTests.CLI.Controls,ListGridTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,TestDataGridCelllevelSelection,The following statement contains a magic number: var dataGrid = new ListGrid<Item>(new ListGridOptions<Item>()              {                  DataSource = new SyncList<Item>(items)'                  SelectionMode = DataGridSelectionMode.Cell'                  Columns = new List<ListGridColumnDefinition<Item>>()                  {                      new ListGridColumnDefinition<Item>()                      {                          Header = "Foo".ToGreen()'                          Width = 20'                          Type = GridValueType.Pixels'                          Formatter = (item) => new Label(){ Text = item.Foo.ToConsoleString() }                      }'                      new ListGridColumnDefinition<Item>()                      {                          Header = "Bar".ToRed()'                          Width = 20'                          Type = GridValueType.Pixels'                          Formatter = (item) => new Label(){ Text = item.Bar.ToConsoleString() }                      }                  }              });
Magic Number,ArgsTests.CLI.Controls,SlowList<T>,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,FetchCountAsync,The following statement contains a magic number: new Thread(() =>                  {                      Thread.Sleep(50);                      d.Resolve(items.Count);                  }).Start();
Magic Number,ArgsTests.CLI.Controls,SlowList<T>,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\ListGridTests.cs,FetchRangeAsync,The following statement contains a magic number: new Thread(() =>                  {                      Thread.Sleep(50);                      d.Resolve(items.Skip(min).Take(count).ToList());                  }).Start();
Magic Number,ArgsTests.CLI.Controls,TextBoxTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\TextBoxTests.cs,Basic,The following statement contains a magic number: var testCli = new CliUnitTestConsole(80' 1);
Magic Number,ArgsTests.CLI.Controls,TextBoxTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\TextBoxTests.cs,Basic,The following statement contains a magic number: var app = new ConsoleApp(0' 0' 80' 1);
Magic Number,ArgsTests.CLI.Controls,TextBoxTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\TextBoxTests.cs,Basic,The following statement contains a magic number: Assert.AreEqual(80' result.Length);
Magic Number,ArgsTests.CLI.Controls,TextBoxTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\TextBoxTests.cs,TestRenderTextBox,The following statement contains a magic number: var app = new CliTestHarness(this.TestContext' 9' 1);
Magic Number,ArgsTests.CLI.Controls,TextBoxTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\TextBoxTests.cs,TestTextBoxBlinkState,The following statement contains a magic number: var app = new CliTestHarness(this.TestContext' 9' 1);
Magic Number,ArgsTests.CLI.Controls,TextBoxTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\TextBoxTests.cs,TestTextBoxBlinkState,The following statement contains a magic number: app.SetTimeout(app.Stop' TimeSpan.FromSeconds(1.2));
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,CPUChartPastDay,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "CPU Percentage (past day)".ToYellow()'                  XAxisFormatter = new DateTimeFormatter()'                  YMinOverride = 0'                  YMaxOverride = 100'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = new DateTime(2000'1'1).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(3).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(6).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(9).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(12).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(15).Ticks' Y = 45 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(18).Ticks' Y = 50 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(21).Ticks' Y = 55 }'                              new DataPoint(){ X = new DateTime(2000'1'1).AddHours(24).Ticks' Y = 50 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,DistanceOverTime,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "Distance over time".ToYellow()'                  XAxisFormatter = new TimeSpanFormatter()'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = TimeSpan.Zero.Ticks' Y = 0 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(1)).Ticks' Y = 1 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(2)).Ticks' Y = 2 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(3)).Ticks' Y = 3 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(4)).Ticks' Y = 4 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,DistanceOverTime,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "Distance over time".ToYellow()'                  XAxisFormatter = new TimeSpanFormatter()'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = TimeSpan.Zero.Ticks' Y = 0 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(1)).Ticks' Y = 1 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(2)).Ticks' Y = 2 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(3)).Ticks' Y = 3 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(4)).Ticks' Y = 4 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,DistanceOverTime,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "Distance over time".ToYellow()'                  XAxisFormatter = new TimeSpanFormatter()'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = TimeSpan.Zero.Ticks' Y = 0 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(1)).Ticks' Y = 1 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(2)).Ticks' Y = 2 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(3)).Ticks' Y = 3 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(4)).Ticks' Y = 4 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,DistanceOverTime,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "Distance over time".ToYellow()'                  XAxisFormatter = new TimeSpanFormatter()'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = TimeSpan.Zero.Ticks' Y = 0 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(1)).Ticks' Y = 1 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(2)).Ticks' Y = 2 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(3)).Ticks' Y = 3 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(4)).Ticks' Y = 4 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,DistanceOverTime,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "Distance over time".ToYellow()'                  XAxisFormatter = new TimeSpanFormatter()'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = TimeSpan.Zero.Ticks' Y = 0 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(1)).Ticks' Y = 1 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(2)).Ticks' Y = 2 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(3)).Ticks' Y = 3 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(4)).Ticks' Y = 4 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,DistanceOverTime,The following statement contains a magic number: var options = new XYChartOptions()              {                  Title = "Distance over time".ToYellow()'                  XAxisFormatter = new TimeSpanFormatter()'                  Data = new List<Series>()                  {                      new Series()                      {                          Title = ""'                          Points = new List<DataPoint>()                          {                              new DataPoint(){ X = TimeSpan.Zero.Ticks' Y = 0 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(1)).Ticks' Y = 1 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(2)).Ticks' Y = 2 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(3)).Ticks' Y = 3 }'                              new DataPoint(){ X = TimeSpan.Zero.Add(TimeSpan.FromDays(4)).Ticks' Y = 4 }'                          }                      }                  }              };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,NPSPast3Months,The following statement contains a magic number: DateTime end = new DateTime(2018' 1' 1);
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,NPSPast3Months,The following statement contains a magic number: DateTime current = end.AddDays(-90);
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,NPSPast3Months,The following statement contains a magic number: var npsValues = new double[] { 32' 33' 33.6' 33.8' 34' 34.5' 35' 35' 36' 36.5' 37' 37' 37.5 };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,NPSPast3Months,The following statement contains a magic number: var npsValues = new double[] { 32' 33' 33.6' 33.8' 34' 34.5' 35' 35' 36' 36.5' 37' 37' 37.5 };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,NPSPast3Months,The following statement contains a magic number: var npsValues = new double[] { 32' 33' 33.6' 33.8' 34' 34.5' 35' 35' 36' 36.5' 37' 37' 37.5 };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,NPSPast3Months,The following statement contains a magic number: var npsValues = new double[] { 32' 33' 33.6' 33.8' 34' 34.5' 35' 35' 36' 36.5' 37' 37' 37.5 };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,NPSPast3Months,The following statement contains a magic number: var npsValues = new double[] { 32' 33' 33.6' 33.8' 34' 34.5' 35' 35' 36' 36.5' 37' 37' 37.5 };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,NPSPast3Months,The following statement contains a magic number: var npsValues = new double[] { 32' 33' 33.6' 33.8' 34' 34.5' 35' 35' 36' 36.5' 37' 37' 37.5 };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,NPSPast3Months,The following statement contains a magic number: var npsValues = new double[] { 32' 33' 33.6' 33.8' 34' 34.5' 35' 35' 36' 36.5' 37' 37' 37.5 };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,NPSPast3Months,The following statement contains a magic number: var npsValues = new double[] { 32' 33' 33.6' 33.8' 34' 34.5' 35' 35' 36' 36.5' 37' 37' 37.5 };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,NPSPast3Months,The following statement contains a magic number: var npsValues = new double[] { 32' 33' 33.6' 33.8' 34' 34.5' 35' 35' 36' 36.5' 37' 37' 37.5 };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,NPSPast3Months,The following statement contains a magic number: var npsValues = new double[] { 32' 33' 33.6' 33.8' 34' 34.5' 35' 35' 36' 36.5' 37' 37' 37.5 };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,NPSPast3Months,The following statement contains a magic number: var npsValues = new double[] { 32' 33' 33.6' 33.8' 34' 34.5' 35' 35' 36' 36.5' 37' 37' 37.5 };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,NPSPast3Months,The following statement contains a magic number: var npsValues = new double[] { 32' 33' 33.6' 33.8' 34' 34.5' 35' 35' 36' 36.5' 37' 37' 37.5 };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,NPSPast3Months,The following statement contains a magic number: var npsValues = new double[] { 32' 33' 33.6' 33.8' 34' 34.5' 35' 35' 36' 36.5' 37' 37' 37.5 };
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,NPSPast3Months,The following statement contains a magic number: current = current.AddDays(7);
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,Parabola,The following statement contains a magic number: i <= 100
Magic Number,ArgsTests.CLI.Controls,XYChartTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\ConsoleApp\XYChartTests.cs,Cube,The following statement contains a magic number: i <= 100
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLines,The following statement contains a magic number: var bitmap = new ConsoleBitmap(80' 30);
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLines,The following statement contains a magic number: var bitmap = new ConsoleBitmap(80' 30);
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLines,The following statement contains a magic number: var centerX = bitmap.Width / 2;
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLines,The following statement contains a magic number: var centerY = bitmap.Height / 2;
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLines,The following statement contains a magic number: app.QueueAction(async () =>              {                  app.LayoutRoot.Add(new BitmapControl() { Bitmap = bitmap }).Fill();                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' 0' centerY / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(centerX' centerY' 0' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX' centerY' centerX / 2' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine(centerX' centerY' (int)(bitmap.Width * .75)' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' centerY / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.White);                  bitmap.DrawLine(centerX' centerY' 0' bitmap.Height / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Blue);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' bitmap.Height / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' 0' (int)(bitmap.Height * .75));                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(centerX' centerY' 0' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX' centerY' centerX / 2' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine(centerX' centerY' (int)(bitmap.Width * .75)' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' (int)(bitmap.Height * .75));                    await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLines,The following statement contains a magic number: app.QueueAction(async () =>              {                  app.LayoutRoot.Add(new BitmapControl() { Bitmap = bitmap }).Fill();                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' 0' centerY / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(centerX' centerY' 0' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX' centerY' centerX / 2' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine(centerX' centerY' (int)(bitmap.Width * .75)' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' centerY / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.White);                  bitmap.DrawLine(centerX' centerY' 0' bitmap.Height / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Blue);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' bitmap.Height / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' 0' (int)(bitmap.Height * .75));                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(centerX' centerY' 0' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX' centerY' centerX / 2' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine(centerX' centerY' (int)(bitmap.Width * .75)' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' (int)(bitmap.Height * .75));                    await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLines,The following statement contains a magic number: app.QueueAction(async () =>              {                  app.LayoutRoot.Add(new BitmapControl() { Bitmap = bitmap }).Fill();                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' 0' centerY / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(centerX' centerY' 0' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX' centerY' centerX / 2' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine(centerX' centerY' (int)(bitmap.Width * .75)' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' centerY / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.White);                  bitmap.DrawLine(centerX' centerY' 0' bitmap.Height / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Blue);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' bitmap.Height / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' 0' (int)(bitmap.Height * .75));                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(centerX' centerY' 0' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX' centerY' centerX / 2' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine(centerX' centerY' (int)(bitmap.Width * .75)' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' (int)(bitmap.Height * .75));                    await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLines,The following statement contains a magic number: app.QueueAction(async () =>              {                  app.LayoutRoot.Add(new BitmapControl() { Bitmap = bitmap }).Fill();                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' 0' centerY / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(centerX' centerY' 0' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX' centerY' centerX / 2' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine(centerX' centerY' (int)(bitmap.Width * .75)' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' centerY / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.White);                  bitmap.DrawLine(centerX' centerY' 0' bitmap.Height / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Blue);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' bitmap.Height / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' 0' (int)(bitmap.Height * .75));                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(centerX' centerY' 0' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX' centerY' centerX / 2' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine(centerX' centerY' (int)(bitmap.Width * .75)' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' (int)(bitmap.Height * .75));                    await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLines,The following statement contains a magic number: app.QueueAction(async () =>              {                  app.LayoutRoot.Add(new BitmapControl() { Bitmap = bitmap }).Fill();                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' 0' centerY / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(centerX' centerY' 0' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX' centerY' centerX / 2' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine(centerX' centerY' (int)(bitmap.Width * .75)' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' centerY / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.White);                  bitmap.DrawLine(centerX' centerY' 0' bitmap.Height / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Blue);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' bitmap.Height / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' 0' (int)(bitmap.Height * .75));                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(centerX' centerY' 0' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX' centerY' centerX / 2' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine(centerX' centerY' (int)(bitmap.Width * .75)' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' (int)(bitmap.Height * .75));                    await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLines,The following statement contains a magic number: app.QueueAction(async () =>              {                  app.LayoutRoot.Add(new BitmapControl() { Bitmap = bitmap }).Fill();                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' 0' centerY / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(centerX' centerY' 0' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX' centerY' centerX / 2' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine(centerX' centerY' (int)(bitmap.Width * .75)' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' centerY / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.White);                  bitmap.DrawLine(centerX' centerY' 0' bitmap.Height / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Blue);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' bitmap.Height / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' 0' (int)(bitmap.Height * .75));                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(centerX' centerY' 0' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX' centerY' centerX / 2' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine(centerX' centerY' (int)(bitmap.Width * .75)' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' (int)(bitmap.Height * .75));                    await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLines,The following statement contains a magic number: app.QueueAction(async () =>              {                  app.LayoutRoot.Add(new BitmapControl() { Bitmap = bitmap }).Fill();                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' 0' centerY / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(centerX' centerY' 0' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX' centerY' centerX / 2' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine(centerX' centerY' (int)(bitmap.Width * .75)' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' centerY / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.White);                  bitmap.DrawLine(centerX' centerY' 0' bitmap.Height / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Blue);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' bitmap.Height / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' 0' (int)(bitmap.Height * .75));                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(centerX' centerY' 0' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX' centerY' centerX / 2' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine(centerX' centerY' (int)(bitmap.Width * .75)' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' (int)(bitmap.Height * .75));                    await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLines,The following statement contains a magic number: app.QueueAction(async () =>              {                  app.LayoutRoot.Add(new BitmapControl() { Bitmap = bitmap }).Fill();                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' 0' centerY / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(centerX' centerY' 0' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX' centerY' centerX / 2' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine(centerX' centerY' (int)(bitmap.Width * .75)' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' centerY / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.White);                  bitmap.DrawLine(centerX' centerY' 0' bitmap.Height / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Blue);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' bitmap.Height / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' 0' (int)(bitmap.Height * .75));                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(centerX' centerY' 0' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX' centerY' centerX / 2' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine(centerX' centerY' (int)(bitmap.Width * .75)' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' (int)(bitmap.Height * .75));                    await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLines,The following statement contains a magic number: app.QueueAction(async () =>              {                  app.LayoutRoot.Add(new BitmapControl() { Bitmap = bitmap }).Fill();                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' 0' centerY / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(centerX' centerY' 0' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX' centerY' centerX / 2' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine(centerX' centerY' (int)(bitmap.Width * .75)' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' centerY / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.White);                  bitmap.DrawLine(centerX' centerY' 0' bitmap.Height / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Blue);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' bitmap.Height / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' 0' (int)(bitmap.Height * .75));                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(centerX' centerY' 0' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX' centerY' centerX / 2' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine(centerX' centerY' (int)(bitmap.Width * .75)' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' (int)(bitmap.Height * .75));                    await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLines,The following statement contains a magic number: app.QueueAction(async () =>              {                  app.LayoutRoot.Add(new BitmapControl() { Bitmap = bitmap }).Fill();                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' 0' centerY / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(centerX' centerY' 0' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX' centerY' centerX / 2' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine(centerX' centerY' (int)(bitmap.Width * .75)' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' centerY / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.White);                  bitmap.DrawLine(centerX' centerY' 0' bitmap.Height / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Blue);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' bitmap.Height / 2);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' 0' (int)(bitmap.Height * .75));                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(centerX' centerY' 0' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX' centerY' centerX / 2' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine(centerX' centerY' (int)(bitmap.Width * .75)' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' bitmap.Height - 1);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(centerX' centerY' bitmap.Width - 1' (int)(bitmap.Height * .75));                    await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLinesReverse,The following statement contains a magic number: var bitmap = new ConsoleBitmap(80' 30);
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLinesReverse,The following statement contains a magic number: var bitmap = new ConsoleBitmap(80' 30);
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLinesReverse,The following statement contains a magic number: var centerX = bitmap.Width / 2;
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLinesReverse,The following statement contains a magic number: var centerY = bitmap.Height / 2;
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLinesReverse,The following statement contains a magic number: app.QueueAction(async () =>              {                  app.LayoutRoot.Add(new BitmapControl() { Bitmap = bitmap }).Fill();                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(0' centerY / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(0' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX / 2' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine((int)(bitmap.Width * .75)' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(bitmap.Width - 1' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(bitmap.Width - 1' centerY / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.White);                  bitmap.DrawLine(0' bitmap.Height / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Blue);                  bitmap.DrawLine(bitmap.Width - 1' bitmap.Height / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(0' (int)(bitmap.Height * .75)' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(0' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX / 2' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine((int)(bitmap.Width * .75)' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(bitmap.Width - 1' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(bitmap.Width - 1' (int)(bitmap.Height * .75)' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLinesReverse,The following statement contains a magic number: app.QueueAction(async () =>              {                  app.LayoutRoot.Add(new BitmapControl() { Bitmap = bitmap }).Fill();                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(0' centerY / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(0' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX / 2' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine((int)(bitmap.Width * .75)' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(bitmap.Width - 1' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(bitmap.Width - 1' centerY / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.White);                  bitmap.DrawLine(0' bitmap.Height / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Blue);                  bitmap.DrawLine(bitmap.Width - 1' bitmap.Height / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(0' (int)(bitmap.Height * .75)' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(0' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX / 2' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine((int)(bitmap.Width * .75)' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(bitmap.Width - 1' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(bitmap.Width - 1' (int)(bitmap.Height * .75)' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLinesReverse,The following statement contains a magic number: app.QueueAction(async () =>              {                  app.LayoutRoot.Add(new BitmapControl() { Bitmap = bitmap }).Fill();                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(0' centerY / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(0' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX / 2' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine((int)(bitmap.Width * .75)' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(bitmap.Width - 1' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(bitmap.Width - 1' centerY / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.White);                  bitmap.DrawLine(0' bitmap.Height / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Blue);                  bitmap.DrawLine(bitmap.Width - 1' bitmap.Height / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(0' (int)(bitmap.Height * .75)' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(0' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX / 2' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine((int)(bitmap.Width * .75)' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(bitmap.Width - 1' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(bitmap.Width - 1' (int)(bitmap.Height * .75)' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLinesReverse,The following statement contains a magic number: app.QueueAction(async () =>              {                  app.LayoutRoot.Add(new BitmapControl() { Bitmap = bitmap }).Fill();                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(0' centerY / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(0' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX / 2' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine((int)(bitmap.Width * .75)' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(bitmap.Width - 1' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(bitmap.Width - 1' centerY / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.White);                  bitmap.DrawLine(0' bitmap.Height / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Blue);                  bitmap.DrawLine(bitmap.Width - 1' bitmap.Height / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(0' (int)(bitmap.Height * .75)' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(0' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX / 2' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine((int)(bitmap.Width * .75)' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(bitmap.Width - 1' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(bitmap.Width - 1' (int)(bitmap.Height * .75)' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLinesReverse,The following statement contains a magic number: app.QueueAction(async () =>              {                  app.LayoutRoot.Add(new BitmapControl() { Bitmap = bitmap }).Fill();                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(0' centerY / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(0' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX / 2' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine((int)(bitmap.Width * .75)' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(bitmap.Width - 1' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(bitmap.Width - 1' centerY / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.White);                  bitmap.DrawLine(0' bitmap.Height / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Blue);                  bitmap.DrawLine(bitmap.Width - 1' bitmap.Height / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(0' (int)(bitmap.Height * .75)' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(0' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX / 2' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine((int)(bitmap.Width * .75)' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(bitmap.Width - 1' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(bitmap.Width - 1' (int)(bitmap.Height * .75)' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLinesReverse,The following statement contains a magic number: app.QueueAction(async () =>              {                  app.LayoutRoot.Add(new BitmapControl() { Bitmap = bitmap }).Fill();                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(0' centerY / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(0' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX / 2' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine((int)(bitmap.Width * .75)' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(bitmap.Width - 1' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(bitmap.Width - 1' centerY / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.White);                  bitmap.DrawLine(0' bitmap.Height / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Blue);                  bitmap.DrawLine(bitmap.Width - 1' bitmap.Height / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(0' (int)(bitmap.Height * .75)' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(0' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX / 2' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine((int)(bitmap.Width * .75)' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(bitmap.Width - 1' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(bitmap.Width - 1' (int)(bitmap.Height * .75)' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLinesReverse,The following statement contains a magic number: app.QueueAction(async () =>              {                  app.LayoutRoot.Add(new BitmapControl() { Bitmap = bitmap }).Fill();                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(0' centerY / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(0' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX / 2' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine((int)(bitmap.Width * .75)' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(bitmap.Width - 1' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(bitmap.Width - 1' centerY / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.White);                  bitmap.DrawLine(0' bitmap.Height / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Blue);                  bitmap.DrawLine(bitmap.Width - 1' bitmap.Height / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(0' (int)(bitmap.Height * .75)' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(0' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX / 2' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine((int)(bitmap.Width * .75)' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(bitmap.Width - 1' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(bitmap.Width - 1' (int)(bitmap.Height * .75)' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLinesReverse,The following statement contains a magic number: app.QueueAction(async () =>              {                  app.LayoutRoot.Add(new BitmapControl() { Bitmap = bitmap }).Fill();                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(0' centerY / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(0' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX / 2' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine((int)(bitmap.Width * .75)' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(bitmap.Width - 1' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(bitmap.Width - 1' centerY / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.White);                  bitmap.DrawLine(0' bitmap.Height / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Blue);                  bitmap.DrawLine(bitmap.Width - 1' bitmap.Height / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(0' (int)(bitmap.Height * .75)' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(0' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX / 2' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine((int)(bitmap.Width * .75)' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(bitmap.Width - 1' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(bitmap.Width - 1' (int)(bitmap.Height * .75)' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLinesReverse,The following statement contains a magic number: app.QueueAction(async () =>              {                  app.LayoutRoot.Add(new BitmapControl() { Bitmap = bitmap }).Fill();                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(0' centerY / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(0' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX / 2' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine((int)(bitmap.Width * .75)' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(bitmap.Width - 1' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(bitmap.Width - 1' centerY / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.White);                  bitmap.DrawLine(0' bitmap.Height / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Blue);                  bitmap.DrawLine(bitmap.Width - 1' bitmap.Height / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(0' (int)(bitmap.Height * .75)' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(0' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX / 2' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine((int)(bitmap.Width * .75)' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(bitmap.Width - 1' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(bitmap.Width - 1' (int)(bitmap.Height * .75)' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Controls,DrawingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\DrawingTests.cs,DrawLinesReverse,The following statement contains a magic number: app.QueueAction(async () =>              {                  app.LayoutRoot.Add(new BitmapControl() { Bitmap = bitmap }).Fill();                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(0' centerY / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(0' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX / 2' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' centerY' centerX' 0);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine((int)(bitmap.Width * .75)' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(bitmap.Width - 1' 0' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(bitmap.Width - 1' centerY / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.White);                  bitmap.DrawLine(0' bitmap.Height / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Blue);                  bitmap.DrawLine(bitmap.Width - 1' bitmap.Height / 2' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(0' (int)(bitmap.Height * .75)' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Red);                  bitmap.DrawLine(0' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Yellow);                  bitmap.DrawLine(centerX / 2' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Green);                  bitmap.DrawLine(centerX' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Magenta);                  bitmap.DrawLine((int)(bitmap.Width * .75)' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Cyan);                  bitmap.DrawLine(bitmap.Width - 1' bitmap.Height - 1' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                    bitmap.Pen = new ConsoleCharacter('X'' ConsoleColor.Gray);                  bitmap.DrawLine(bitmap.Width - 1' (int)(bitmap.Height * .75)' centerX' centerY);                  await app.Paint().AsAwaitable();                  app.RecordKeyFrame();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Recording,RecordingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\RecordingTests.cs,TestRecordVideoBasic,The following statement contains a magic number: ConsoleBitmap bitmap = new ConsoleBitmap(4' 2)' redBitmap = null' greenBitmap = null' magentaPixelBitmap = null;
Magic Number,ArgsTests.CLI.Recording,RecordingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\RecordingTests.cs,TestRecordVideoBasic,The following statement contains a magic number: ConsoleBitmap bitmap = new ConsoleBitmap(4' 2)' redBitmap = null' greenBitmap = null' magentaPixelBitmap = null;
Magic Number,ArgsTests.CLI.Recording,RecordingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\RecordingTests.cs,TestRecordVideoBasic,The following statement contains a magic number: bitmap = new ConsoleBitmap(4' 2);
Magic Number,ArgsTests.CLI.Recording,RecordingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\RecordingTests.cs,TestRecordVideoBasic,The following statement contains a magic number: bitmap = new ConsoleBitmap(4' 2);
Magic Number,ArgsTests.CLI.Recording,RecordingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\RecordingTests.cs,TestRecordVideoLargeVideo,The following statement contains a magic number: var numFrames = 10000;
Magic Number,ArgsTests.CLI.Recording,RecordingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\RecordingTests.cs,TestRecordVideoLargeVideo,The following statement contains a magic number: Assert.IsTrue(sw.ElapsedMilliseconds < 10);
Magic Number,ArgsTests.CLI.Recording,RecordingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\RecordingTests.cs,TestPlaybackEndToEnd,The following statement contains a magic number: int w = 10' h = 1;
Magic Number,ArgsTests.CLI.Recording,RecordingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\RecordingTests.cs,TestPlaybackEndToEnd,The following statement contains a magic number: writer.WriteFrame(bitmap' true' TimeSpan.FromSeconds(.5*i));
Magic Number,ArgsTests.CLI.Recording,RecordingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\RecordingTests.cs,TestPlaybackEndToEnd,The following statement contains a magic number: var app = new CliTestHarness(this.TestContext' 80' 30);
Magic Number,ArgsTests.CLI.Recording,RecordingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\RecordingTests.cs,TestPlaybackEndToEnd,The following statement contains a magic number: var app = new CliTestHarness(this.TestContext' 80' 30);
Magic Number,ArgsTests.CLI.Recording,RecordingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\RecordingTests.cs,TestPlaybackEndToEnd,The following statement contains a magic number: app.QueueAction(() =>              {                  var player = app.LayoutRoot.Add(new ConsoleBitmapPlayer()).Fill();                  player.Load(File.OpenRead(temp));                  app.SetTimeout(() => app.SendKey(new ConsoleKeyInfo('p'' ConsoleKey.P' false' false' false))' TimeSpan.FromMilliseconds(100));                  var playStarted = false;                  player.SubscribeForLifetime(nameof(player.State)' () =>                  {                      if(player.State == PlayerState.Playing)                      {                          playStarted = true;                      }                      else if(player.State == PlayerState.Stopped && playStarted)                      {                          app.Stop();                      }                  }' app);              });
Magic Number,ArgsTests.CLI.Recording,RecordingTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Drawing\RecordingTests.cs,TestPlaybackEndToEnd,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,SubscribeToAllProperties,The following statement contains a magic number: Assert.AreEqual(2' numChanged);
Magic Number,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,SubscribeToAllProperties,The following statement contains a magic number: Assert.AreEqual(2' numChanged);
Magic Number,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,SubscribeToAllProperties,The following statement contains a magic number: Assert.AreEqual(2' numChanged);
Magic Number,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,SubscribeToAllProperties,The following statement contains a magic number: observable.Number = 2;
Magic Number,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,SubscribeToAllProperties,The following statement contains a magic number: Assert.AreEqual(2' numChanged);
Magic Number,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,SubscribeToEvent,The following statement contains a magic number: Assert.AreEqual(2' triggerCount);
Magic Number,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,SubscribeToEvent,The following statement contains a magic number: Assert.AreEqual(2' triggerCount);
Magic Number,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,SynchronizeCollection,The following statement contains a magic number: Assert.AreEqual(2' addCalls);
Magic Number,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,SynchronizeCollection,The following statement contains a magic number: Assert.AreEqual(3' addCalls);
Magic Number,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,SynchronizeCollection,The following statement contains a magic number: Assert.AreEqual(2' changedCalls);
Magic Number,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,SynchronizeCollection,The following statement contains a magic number: Assert.AreEqual(3' addCalls);
Magic Number,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,SynchronizeCollection,The following statement contains a magic number: Assert.AreEqual(3' changedCalls);
Magic Number,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,SynchronizeCollection,The following statement contains a magic number: Assert.AreEqual(3' addCalls);
Magic Number,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,SynchronizeCollection,The following statement contains a magic number: Assert.AreEqual(3' changedCalls);
Magic Number,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,SubscribeToChildren,The following statement contains a magic number: Assert.AreEqual(2' numChildrenChanged);
Magic Number,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,SubscribeToChildren,The following statement contains a magic number: Assert.AreEqual(3' numChildrenChanged);
Magic Number,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,SubscribeToChildren,The following statement contains a magic number: Assert.AreEqual(4' numChildrenChanged);
Magic Number,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,SubscribeToChildren,The following statement contains a magic number: Assert.AreEqual(4' numChildrenChanged);
Magic Number,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,SubscribeToChildren,The following statement contains a magic number: Assert.AreEqual(4' numChildrenChanged);
Magic Number,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,SubscribeToChildren,The following statement contains a magic number: Assert.AreEqual(2' numChildrenAdded);
Magic Number,ArgsTests.CLI.Observability,ObservabilityTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Eventing\ObservabilityTests.cs,SubscribeToChildren,The following statement contains a magic number: Assert.AreEqual(2' numChildrenRemoved);
Magic Number,ArgsTests.CLI.Games,MultiPlayerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Games\MultiPlayerTests.cs,TestDeathmatchInProc,The following statement contains a magic number: var serverInfo = new ServerInfo() { Port = 8080' Server = "testserver" };
Magic Number,ArgsTests.CLI.Games,MultiPlayerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Games\MultiPlayerTests.cs,TestDeathmatchInProc,The following statement contains a magic number: await TestDeathmatch(server' serverInfo' client1' client2' 100);
Magic Number,ArgsTests.CLI.Games,MultiPlayerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Games\MultiPlayerTests.cs,TestDeathmatchWithSockets,The following statement contains a magic number: var socketServer = new SocketServerNetworkProvider(8080);
Magic Number,ArgsTests.CLI.Games,MultiPlayerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Games\MultiPlayerTests.cs,TestDeathmatchWithSockets,The following statement contains a magic number: await TestDeathmatch(server' socketServer.ServerInfo' client1' client2' 500);
Magic Number,ArgsTests.CLI.Games,MultiPlayerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Games\MultiPlayerTests.cs,TestRequestResponseInProc,The following statement contains a magic number: var serverInfo = new ServerInfo() { Port = 8080' Server = "testserver" };
Magic Number,ArgsTests.CLI.Games,MultiPlayerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Games\MultiPlayerTests.cs,TestRequestResponseWithSockets,The following statement contains a magic number: var socketServer = new SocketServerNetworkProvider(8080);
Magic Number,ArgsTests.CLI.Games,MultiPlayerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Games\MultiPlayerTests.cs,TestDeathmatch,The following statement contains a magic number: var deathmatch = new Deathmatch(new MultiPlayerContestOptions()              {                  MaxPlayers = 2'                  Server = server              });
Magic Number,ArgsTests.CLI.Games,MultiPlayerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Games\MultiPlayerTests.cs,TestRequestResponse,The following statement contains a magic number: await client.SendRequest(new PingMessage() { Delay = 300 }' timeout: TimeSpan.FromSeconds(.1)).AsAwaitable();
Magic Number,ArgsTests.CLI.Games,MultiPlayerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Games\MultiPlayerTests.cs,TestRequestResponse,The following statement contains a magic number: await client.SendRequest(new PingMessage() { Delay = 300 }' timeout: TimeSpan.FromSeconds(.1)).AsAwaitable();
Magic Number,ArgsTests.CLI.Games,PowerArgsIntroTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Games\PowerArgsIntroTests.cs,TestPowerArgsIntroCompletesOnItsOwn,The following statement contains a magic number: var app = new ConsoleApp(80' 30);
Magic Number,ArgsTests.CLI.Games,PowerArgsIntroTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Games\PowerArgsIntroTests.cs,TestPowerArgsIntroCompletesOnItsOwn,The following statement contains a magic number: var app = new ConsoleApp(80' 30);
Magic Number,ArgsTests.CLI.Games,PowerArgsIntroTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Games\PowerArgsIntroTests.cs,TestPowerArgsIntroInterrupts,The following statement contains a magic number: var app = new ConsoleApp(80' 30);
Magic Number,ArgsTests.CLI.Games,PowerArgsIntroTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Games\PowerArgsIntroTests.cs,TestPowerArgsIntroInterrupts,The following statement contains a magic number: var app = new ConsoleApp(80' 30);
Magic Number,ArgsTests.CLI.Games,PowerArgsIntroTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Games\PowerArgsIntroTests.cs,TestPowerArgsIntroInterrupts,The following statement contains a magic number: await Task.Delay(10);
Magic Number,ArgsTests.CLI.Games,PowerArgsIntroTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Games\PowerArgsIntroTests.cs,TestPowerArgsIntroInterrupts,The following statement contains a magic number: i < 100
Magic Number,ArgsTests.CLI.Physics,E2EPhysicsTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\E2EPhysicsTests.cs,E2ESimplestApp,The following statement contains a magic number: panel.SpaceTime.QueueAction("Test"'() =>              {                  element = new SpacialElement();                  panel.SpaceTime.Add(element);                    panel.SpaceTime.Add(TimeFunction.Create(() =>                   {                      lastAge = element.CalculateAge();                      if(Time.CurrentTime.Now == TimeSpan.FromSeconds(.5))                      {                          Time.CurrentTime.Stop();                          app.Stop();                      }                  }));              });
Magic Number,ArgsTests.CLI.Physics,E2EPhysicsTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\E2EPhysicsTests.cs,E2ESimplestApp,The following statement contains a magic number: Assert.AreEqual(.5' lastAge.TotalSeconds);
Magic Number,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestNormalizedProximity,The following statement contains a magic number: var app = new CliTestHarness(TestContext' 0' 0' 40' 40' true);
Magic Number,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestNormalizedProximity,The following statement contains a magic number: var app = new CliTestHarness(TestContext' 0' 0' 40' 40' true);
Magic Number,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestNormalizedProximity,The following statement contains a magic number: app.QueueAction(async () =>              {                  var a = app.LayoutRoot.Add(new ConsoleControl() { Background = ConsoleColor.Red' Width = 1' Height = 1' X = 0' Y = 0 });                  var b = app.LayoutRoot.Add(new ConsoleControl() { Background = ConsoleColor.Green' Width = 1' Height = 1' X = 39' Y = 39 });                  var d = Geometry.CalculateNormalizedDistanceTo(a' b);                  Console.WriteLine(d);                  await app.PaintAndRecordKeyFrameAsync();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestNormalizedProximity,The following statement contains a magic number: app.QueueAction(async () =>              {                  var a = app.LayoutRoot.Add(new ConsoleControl() { Background = ConsoleColor.Red' Width = 1' Height = 1' X = 0' Y = 0 });                  var b = app.LayoutRoot.Add(new ConsoleControl() { Background = ConsoleColor.Green' Width = 1' Height = 1' X = 39' Y = 39 });                  var d = Geometry.CalculateNormalizedDistanceTo(a' b);                  Console.WriteLine(d);                  await app.PaintAndRecordKeyFrameAsync();                  app.Stop();              });
Magic Number,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestAngleGeometry,The following statement contains a magic number: Assert.AreEqual(45' 0.AddToAngle(45));
Magic Number,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestAngleGeometry,The following statement contains a magic number: Assert.AreEqual(45' 0.AddToAngle(45));
Magic Number,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestAngleGeometry,The following statement contains a magic number: Assert.AreEqual(1' 360.AddToAngle(1));
Magic Number,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestAngleGeometry,The following statement contains a magic number: Assert.AreEqual(359' 0.AddToAngle(-1));
Magic Number,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestAngleGeometry,The following statement contains a magic number: Assert.AreEqual(359' 360.AddToAngle(-1));
Magic Number,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestAngleGeometry,The following statement contains a magic number: Assert.AreEqual(359' 360.AddToAngle(-1));
Magic Number,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestAngleGeometry,The following statement contains a magic number: Assert.AreEqual(0' 0.DiffAngle(360));
Magic Number,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestAngleGeometry,The following statement contains a magic number: Assert.AreEqual(1' 1.DiffAngle(360));
Magic Number,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestAngleGeometry,The following statement contains a magic number: Assert.AreEqual(45' 0.DiffAngle(45));
Magic Number,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestAngleGeometry,The following statement contains a magic number: Assert.AreEqual(45' 0.DiffAngle(45));
Magic Number,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestAngleGeometry,The following statement contains a magic number: Assert.AreEqual(45' RectangularF.Create(0' 0' 1' 1).CalculateAngleTo(RectangularF.Create(1' 1' 1' 1)));
Magic Number,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestAngleGeometry,The following statement contains a magic number: Assert.AreEqual(90' RectangularF.Create(0' 0' 1' 1).CalculateAngleTo(RectangularF.Create(0' 1' 1' 1)));
Magic Number,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestAngleGeometry,The following statement contains a magic number: Assert.AreEqual(135' RectangularF.Create(1' 0' 1' 1).CalculateAngleTo(RectangularF.Create(0' 1' 1' 1)));
Magic Number,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestAngleGeometry,The following statement contains a magic number: Assert.AreEqual(180' RectangularF.Create(1' 0' 1' 1).CalculateAngleTo(RectangularF.Create(0' 0' 1' 1)));
Magic Number,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestAngleGeometry,The following statement contains a magic number: Assert.AreEqual(225' RectangularF.Create(1' 1' 1' 1).CalculateAngleTo(RectangularF.Create(0' 0' 1' 1)));
Magic Number,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestAngleGeometry,The following statement contains a magic number: Assert.AreEqual(270' RectangularF.Create(1' 1' 1' 1).CalculateAngleTo(RectangularF.Create(1' 0' 1' 1)));
Magic Number,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestAngleGeometry,The following statement contains a magic number: Assert.AreEqual(315' RectangularF.Create(0' 1' 1' 1).CalculateAngleTo(RectangularF.Create(1' 0' 1' 1)));
Magic Number,ArgsTests.CLI.Physics,GeometryTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\GeometryTests.cs,TestDistanceGeometry,The following statement contains a magic number: Assert.AreEqual(1' RectangularF.Create(0' 0' 1' 1).CalculateDistanceTo(RectangularF.Create(2' 0' 1' 1)));
Magic Number,ArgsTests.CLI.Physics,TimeTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\TimeTests.cs,TestYieldDoesOneIncrementAtATime,The following statement contains a magic number: var t = new Time(TimeSpan.FromSeconds(.05));
Magic Number,ArgsTests.CLI.Physics,TimeTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Physics\TimeTests.cs,TestYieldDoesOneIncrementAtATime,The following statement contains a magic number: Assert.AreEqual(20' assertions);
Magic Number,ArgsTests.Templating,DocumentRendererTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\DocumentRendererTests.cs,TestDocumentRenderingWithSimpleReplacement,The following statement contains a magic number: Assert.AreEqual(ConsoleColor.Red' rendered[3].ForegroundColor);
Magic Number,ArgsTests.Templating,DocumentRendererTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\DocumentRendererTests.cs,TestDocumentRenderingWithEachReplacement,The following statement contains a magic number: var rendered = new DocumentRenderer().Render("{{each number in Numbers}}{{number!}}!{{each}}"' new { Numbers = new int[] { 1' 2' 3' 4 } });
Magic Number,ArgsTests.Templating,DocumentRendererTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\DocumentRendererTests.cs,TestDocumentRenderingWithEachReplacement,The following statement contains a magic number: var rendered = new DocumentRenderer().Render("{{each number in Numbers}}{{number!}}!{{each}}"' new { Numbers = new int[] { 1' 2' 3' 4 } });
Magic Number,ArgsTests.Templating,DocumentRendererTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\DocumentRendererTests.cs,TestDocumentRenderingWithEachReplacement,The following statement contains a magic number: var rendered = new DocumentRenderer().Render("{{each number in Numbers}}{{number!}}!{{each}}"' new { Numbers = new int[] { 1' 2' 3' 4 } });
Magic Number,ArgsTests.Templating,DocumentRendererTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\DocumentRendererTests.cs,TestDocumentRenderingNewLinesBehvior,The following statement contains a magic number: var rendered = new DocumentRenderer().Render(template' new { Foos = new int[] { 1' 2' 3 } }).ToString();
Magic Number,ArgsTests.Templating,DocumentRendererTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\DocumentRendererTests.cs,TestDocumentRenderingNewLinesBehvior,The following statement contains a magic number: var rendered = new DocumentRenderer().Render(template' new { Foos = new int[] { 1' 2' 3 } }).ToString();
Magic Number,ArgsTests.Templating,ObjectPathExpressionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\ObjectPathExpressionTests.cs,TestObjectPathExpressionSingleProperty,The following statement contains a magic number: Assert.AreEqual(4' eval);
Magic Number,ArgsTests.Templating,ObjectPathExpressionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\ObjectPathExpressionTests.cs,TestObjectPathExpressionArrayIndexer,The following statement contains a magic number: var eval = exp.Evaluate(new int[] { 100' 200' 300 });
Magic Number,ArgsTests.Templating,ObjectPathExpressionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\ObjectPathExpressionTests.cs,TestObjectPathExpressionArrayIndexer,The following statement contains a magic number: var eval = exp.Evaluate(new int[] { 100' 200' 300 });
Magic Number,ArgsTests.Templating,ObjectPathExpressionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\ObjectPathExpressionTests.cs,TestObjectPathExpressionArrayIndexer,The following statement contains a magic number: var eval = exp.Evaluate(new int[] { 100' 200' 300 });
Magic Number,ArgsTests.Templating,ObjectPathExpressionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\ObjectPathExpressionTests.cs,TestObjectPathExpressionArrayIndexer,The following statement contains a magic number: Assert.AreEqual(100' eval);
Magic Number,ArgsTests.Templating,ObjectPathExpressionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\ObjectPathExpressionTests.cs,TestObjectPathExpressionListIndexer,The following statement contains a magic number: var eval = exp.Evaluate(new List<int>{ 100' 200' 300 });
Magic Number,ArgsTests.Templating,ObjectPathExpressionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\ObjectPathExpressionTests.cs,TestObjectPathExpressionListIndexer,The following statement contains a magic number: var eval = exp.Evaluate(new List<int>{ 100' 200' 300 });
Magic Number,ArgsTests.Templating,ObjectPathExpressionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\ObjectPathExpressionTests.cs,TestObjectPathExpressionListIndexer,The following statement contains a magic number: var eval = exp.Evaluate(new List<int>{ 100' 200' 300 });
Magic Number,ArgsTests.Templating,ObjectPathExpressionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\ObjectPathExpressionTests.cs,TestObjectPathExpressionListIndexer,The following statement contains a magic number: Assert.AreEqual(100' eval);
Magic Number,ArgsTests.Templating,ObjectPathExpressionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\ObjectPathExpressionTests.cs,TestObjectPathExpressionDictionaryIndexer,The following statement contains a magic number: var eval = exp.Evaluate(new Dictionary<string' int>() { { "MeaningOfLife"' 42 } });
Magic Number,ArgsTests.Templating,ObjectPathExpressionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\ObjectPathExpressionTests.cs,TestObjectPathExpressionDictionaryIndexer,The following statement contains a magic number: Assert.AreEqual(42' eval);
Magic Number,ArgsTests.Templating,ObjectPathExpressionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\ObjectPathExpressionTests.cs,TestObjectPathExpressionDictionaryIndexerWithSpaces,The following statement contains a magic number: var eval = exp.Evaluate(new Dictionary<string' int>() { { "Meaning Of Life"' 42 } });
Magic Number,ArgsTests.Templating,ObjectPathExpressionTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\ObjectPathExpressionTests.cs,TestObjectPathExpressionDictionaryIndexerWithSpaces,The following statement contains a magic number: Assert.AreEqual(42' eval);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerBasicWhitespaceSeparatedStrings,The following statement contains a magic number: Assert.AreEqual(6' tokens.Count);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerBasicWhitespaceSeparatedStrings,The following statement contains a magic number: Assert.AreEqual("three"' tokens[2].Value);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerBasicWhitespaceSeparatedStrings,The following statement contains a magic number: Assert.AreEqual("four"' tokens[3].Value);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerBasicWhitespaceSeparatedStrings,The following statement contains a magic number: Assert.AreEqual("five"' tokens[4].Value);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerBasicWhitespaceSeparatedStrings,The following statement contains a magic number: Assert.AreEqual("six"' tokens[5].Value);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerBasicWhitespaceSeparatedStrings,The following statement contains a magic number: Assert.AreEqual(5' tokens[1].Column);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerBasicWhitespaceSeparatedStrings,The following statement contains a magic number: Assert.AreEqual(3' tokens[3].Line);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerBasicWhitespaceSeparatedStrings,The following statement contains a magic number: Assert.AreEqual(3' tokens[3].Line);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerBasicWhitespaceSeparatedStrings,The following statement contains a magic number: Assert.AreEqual(9' tokens[3].Column);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerBasicWhitespaceSeparatedStrings,The following statement contains a magic number: Assert.AreEqual(9' tokens[3].Column);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerWithCustomDelimiterAndIncludedWhitespace,The following statement contains a magic number: Assert.AreEqual(3' tokens.Count);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerWithCustomDelimiterAndIncludedWhitespace,The following statement contains a magic number: Assert.AreEqual("}"' tokens[2].Value);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerWithCustomDelimiter,The following statement contains a magic number: Assert.AreEqual(7' tokens.Count);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerWithCustomDelimiter,The following statement contains a magic number: Assert.AreEqual("B"' tokens[2].Value);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerWithCustomDelimiter,The following statement contains a magic number: Assert.AreEqual("."' tokens[3].Value);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerWithCustomDelimiter,The following statement contains a magic number: Assert.AreEqual("C"' tokens[4].Value);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerWithCustomDelimiter,The following statement contains a magic number: Assert.AreEqual("."' tokens[5].Value);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerWithCustomDelimiter,The following statement contains a magic number: Assert.AreEqual("D"' tokens[6].Value);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerWithCustomDelimiterAndWhitespace,The following statement contains a magic number: Assert.AreEqual(7' tokens.Count);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerWithCustomDelimiterAndWhitespace,The following statement contains a magic number: Assert.AreEqual("B"' tokens[2].Value);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerWithCustomDelimiterAndWhitespace,The following statement contains a magic number: Assert.AreEqual("."' tokens[3].Value);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerWithCustomDelimiterAndWhitespace,The following statement contains a magic number: Assert.AreEqual("C"' tokens[4].Value);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerWithCustomDelimiterAndWhitespace,The following statement contains a magic number: Assert.AreEqual("."' tokens[5].Value);
Magic Number,ArgsTests.Templating,TokenizerTests,D:\research\architectureSmells\repos\adamabdelhamed_PowerArgs\PowerArgsTestCore\Templating\TokenizerTests.cs,TestTokenizerWithCustomDelimiterAndWhitespace,The following statement contains a magic number: Assert.AreEqual("D"' tokens[6].Value);
