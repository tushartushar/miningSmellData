Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,OnMouseDown,Cyclomatic complexity of the method is 19
Complex Method,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,OnMouseMove,Cyclomatic complexity of the method is 13
Complex Method,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,OnMouseUp,Cyclomatic complexity of the method is 8
Complex Method,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,EndAddElement,Cyclomatic complexity of the method is 21
Complex Method,Dalssoft.DiagramNet,Document,C:\repos\dalssoft_diagramnet\Control\Document.cs,DeleteElement,Cyclomatic complexity of the method is 8
Complex Method,Dalssoft.DiagramNet,Document,C:\repos\dalssoft_diagramnet\Control\Document.cs,SelectElements,Cyclomatic complexity of the method is 10
Complex Method,Dalssoft.DiagramNet,Document,C:\repos\dalssoft_diagramnet\Control\Document.cs,FindElement,Cyclomatic complexity of the method is 11
Complex Method,Dalssoft.DiagramNet,Document,C:\repos\dalssoft_diagramnet\Control\Document.cs,FindElement,Cyclomatic complexity of the method is 12
Complex Method,Dalssoft.DiagramNet,Document,C:\repos\dalssoft_diagramnet\Control\Document.cs,DrawElements,Cyclomatic complexity of the method is 8
Complex Method,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,StartEdit,Cyclomatic complexity of the method is 10
Complex Method,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,Cyclomatic complexity of the method is 47
Complex Method,Dalssoft.DiagramNet,MoveAction,C:\repos\dalssoft_diagramnet\Control\MoveAction.cs,Start,Cyclomatic complexity of the method is 11
Complex Method,Dalssoft.DiagramNet,MoveAction,C:\repos\dalssoft_diagramnet\Control\MoveAction.cs,Move,Cyclomatic complexity of the method is 9
Complex Method,Dalssoft.DiagramNet,ResizeAction,C:\repos\dalssoft_diagramnet\Control\ResizeAction.cs,DrawResizeCorner,Cyclomatic complexity of the method is 8
Complex Method,Dalssoft.DiagramNet,ResizeAction,C:\repos\dalssoft_diagramnet\Control\ResizeAction.cs,UpdateResizeCornerCursor,Cyclomatic complexity of the method is 9
Long Parameter List,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,MeasureString,The method has 6 parameters.
Long Statement,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,Invalidate,The length of the statement  "		this.AutoScrollMinSize = new Size ((int)((document.Location.X + document.Size.Width) * document.Zoom)' (int)((document.Location.Y + document.Size.Height) * document.Zoom)); " is 172.
Long Statement,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,OnMouseMove,The length of the statement  "		if ((resizeAction != null) && ((document.Action == DesignerAction.Select) || ((document.Action == DesignerAction.Connect) && (resizeAction.IsResizingLink)))) { " is 159.
Long Statement,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,StartSelectElements,The length of the statement  "	MoveAction.OnElementMovingDelegate onElementMovingDelegate = new Dalssoft.DiagramNet.MoveAction.OnElementMovingDelegate (OnElementMoving); " is 138.
Long Statement,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,StartResizeElement,The length of the statement  "	if ((resizeAction != null) && ((document.Action == DesignerAction.Select) || ((document.Action == DesignerAction.Connect) && (resizeAction.IsResizingLink)))) { " is 159.
Long Statement,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,StartResizeElement,The length of the statement  "		ResizeAction.OnElementResizingDelegate onElementResizingDelegate = new ResizeAction.OnElementResizingDelegate (OnElementResizing); " is 130.
Long Statement,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,EndAddLink,The length of the statement  "		OnElementConnected (new ElementConnectEventArgs (linkLine.Connector1.ParentElement' linkLine.Connector2.ParentElement' linkLine)); " is 130.
Long Statement,Dalssoft.DiagramNet,Document,C:\repos\dalssoft_diagramnet\Control\Document.cs,SelectElements,The length of the statement  "			if ((!selectedElements.Contains (lnk.Connector1.ParentElement)) || (!selectedElements.Contains (lnk.Connector2.ParentElement))) { " is 129.
Long Statement,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,SetTextBoxLocation,The length of the statement  "			tb.Location = new Point (el.Location.X + (el.Size.Width / 2) - (sizeTmp.Width / 2)' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2)); " is 145.
Long Statement,Dalssoft.DiagramNet,CommentBoxNode,C:\repos\dalssoft_diagramnet\Control\element\CommentBoxNode.cs,Draw,The length of the statement  "	g.DrawLine (new Pen (borderColor' borderWidth)' new Point (r.X + r.Width - foldSize.Width' r.Y + foldSize.Height)' new Point (r.X + r.Width' r.Y + foldSize.Height)); " is 165.
Long Statement,Dalssoft.DiagramNet,CommentBoxNode,C:\repos\dalssoft_diagramnet\Control\element\CommentBoxNode.cs,Draw,The length of the statement  "	g.DrawLine (new Pen (borderColor' borderWidth)' new Point (r.X + r.Width - foldSize.Width' r.Y + 0)' new Point (r.X + r.Width - foldSize.Width' r.Y + 0 + foldSize.Height)); " is 172.
Long Statement,Dalssoft.DiagramNet,CommentBoxElement,C:\repos\dalssoft_diagramnet\Control\element\CommentBoxElement.cs,Draw,The length of the statement  "	g.DrawLine (new Pen (borderColor' borderWidth)' new Point (r.X + r.Width - foldSize.Width' r.Y + foldSize.Height)' new Point (r.X + r.Width' r.Y + foldSize.Height)); " is 165.
Long Statement,Dalssoft.DiagramNet,CommentBoxElement,C:\repos\dalssoft_diagramnet\Control\element\CommentBoxElement.cs,Draw,The length of the statement  "	g.DrawLine (new Pen (borderColor' borderWidth)' new Point (r.X + r.Width - foldSize.Width' r.Y + 0)' new Point (r.X + r.Width - foldSize.Width' r.Y + 0 + foldSize.Height)); " is 172.
Long Statement,Dalssoft.DiagramNet,ConnectorElement,C:\repos\dalssoft_diagramnet\Control\element\ConnectorElement.cs,GetDirection,The length of the statement  "	Point refPoint = new Point (this.location.X - parentElement.Location.X + (this.size.Width / 2)' this.location.Y - parentElement.Location.Y + (this.size.Height / 2)); " is 165.
Long Statement,Dalssoft.DiagramNet,ConnectorController,C:\repos\dalssoft_diagramnet\Control\element\controller\ConnectorController.cs,DrawSelection,The length of the statement  "	Rectangle r = BaseElement.GetUnsignedRectangle (new Rectangle (el.Location.X - distance' el.Location.Y - distance' el.Size.Width + (distance * 2)' el.Size.Height + (distance * 2))); " is 181.
Long Statement,Dalssoft.DiagramNet,ElipseController,C:\repos\dalssoft_diagramnet\Control\element\controller\ElipseController.cs,DrawSelection,The length of the statement  "	Rectangle r = BaseElement.GetUnsignedRectangle (new Rectangle (el.Location.X - border' el.Location.Y - border' el.Size.Width + (border * 2)' el.Size.Height + (border * 2))); " is 173.
Long Statement,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,DrawSelection,The length of the statement  "	Rectangle r = BaseElement.GetUnsignedRectangle (new Rectangle (elLocation.X - border' elLocation.Y - border' elSize.Width + (border * 2)' elSize.Height + (border * 2))); " is 169.
Long Statement,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,UpdateCornersPos,The length of the statement  "	selectionCorner [(int)CornerPosition.TopLeft].Location = new Point (rec.Location.X - selCornerSize' rec.Location.Y - selCornerSize); " is 132.
Long Statement,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,UpdateCornersPos,The length of the statement  "	selectionCorner [(int)CornerPosition.TopRight].Location = new Point (rec.Location.X + rec.Size.Width - selCornerSize' rec.Location.Y - selCornerSize); " is 150.
Long Statement,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,UpdateCornersPos,The length of the statement  "	selectionCorner [(int)CornerPosition.TopCenter].Location = new Point (rec.Location.X + rec.Size.Width / 2 - selCornerSize' rec.Location.Y - selCornerSize); " is 155.
Long Statement,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,UpdateCornersPos,The length of the statement  "	selectionCorner [(int)CornerPosition.BottomLeft].Location = new Point (rec.Location.X - selCornerSize' rec.Location.Y + rec.Size.Height - selCornerSize); " is 153.
Long Statement,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,UpdateCornersPos,The length of the statement  "	selectionCorner [(int)CornerPosition.BottomRight].Location = new Point (rec.Location.X + rec.Size.Width - selCornerSize' rec.Location.Y + rec.Size.Height - selCornerSize); " is 171.
Long Statement,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,UpdateCornersPos,The length of the statement  "	selectionCorner [(int)CornerPosition.BottomCenter].Location = new Point (rec.Location.X + rec.Size.Width / 2 - selCornerSize' rec.Location.Y + rec.Size.Height - selCornerSize); " is 176.
Long Statement,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,UpdateCornersPos,The length of the statement  "	selectionCorner [(int)CornerPosition.MiddleLeft].Location = new Point (rec.Location.X - selCornerSize' rec.Location.Y + rec.Size.Height / 2 - selCornerSize); " is 157.
Long Statement,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,UpdateCornersPos,The length of the statement  "	selectionCorner [(int)CornerPosition.MiddleCenter].Location = new Point (rec.Location.X + rec.Size.Width / 2 - selCornerSize' rec.Location.Y + rec.Size.Height / 2 - selCornerSize); " is 180.
Long Statement,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,UpdateCornersPos,The length of the statement  "	selectionCorner [(int)CornerPosition.MiddleRight].Location = new Point (rec.Location.X + rec.Size.Width - selCornerSize' rec.Location.Y + rec.Size.Height / 2 - selCornerSize); " is 175.
Long Statement,Dalssoft.DiagramNet,RightAngleLinkController,C:\repos\dalssoft_diagramnet\Control\element\controller\RightAngleLinkController.cs,UpdateCornersPos,The length of the statement  "		selectionCorner [0].Location = new Point (elLinePoint1.X + ((elLinePoint2.X - elLinePoint1.X) / 2) - selCornerSize' elLinePoint1.Y + ((elLinePoint2.Y - elLinePoint1.Y) / 2) - selCornerSize); " is 190.
Long Statement,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,InitConnectors,The length of the statement  "	if ((((conn1Dir == CardinalDirection.North) || (conn1Dir == CardinalDirection.South)) && ((conn2Dir == CardinalDirection.East) || (conn2Dir == CardinalDirection.West))) || (((conn1Dir == CardinalDirection.East) || (conn1Dir == CardinalDirection.West)) && ((conn2Dir == CardinalDirection.North) || (conn2Dir == CardinalDirection.South)))) { " is 339.
Long Statement,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkFirtTime,The length of the statement  "	lines [0].Point1 = new Point (connector1Location.X + connector1Size.Width / 2' connector1Location.Y + connector1Size.Height / 2); " is 129.
Long Statement,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkFirtTime,The length of the statement  "	lastLine.Point2 = new Point (connector2Location.X + connector2Size.Width / 2' connector2Location.Y + connector2Size.Height / 2); " is 128.
Long Statement,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLink,The length of the statement  "	lines [0].Point1 = new Point (connector1Location.X + connector1Size.Width / 2' connector1Location.Y + connector1Size.Height / 2); " is 129.
Long Statement,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLink,The length of the statement  "	lastLine.Point2 = new Point (connector2Location.X + connector2Size.Width / 2' connector2Location.Y + connector2Size.Height / 2); " is 128.
Long Statement,Dalssoft.DiagramNet,StraightLinkElement,C:\repos\dalssoft_diagramnet\Control\element\StraightLinkElement.cs,CalcLink,The length of the statement  "		line1.Point1 = new Point (connector1Location.X + connector1Size.Width / 2' connector1Location.Y + connector1Size.Height / 2); " is 125.
Long Statement,Dalssoft.DiagramNet,StraightLinkElement,C:\repos\dalssoft_diagramnet\Control\element\StraightLinkElement.cs,CalcLink,The length of the statement  "		line1.Point2 = new Point (connector2Location.X + connector2Size.Width / 2' connector2Location.Y + connector2Size.Height / 2); " is 125.
Long Statement,Dalssoft.DiagramNet,MoveAction,C:\repos\dalssoft_diagramnet\Control\MoveAction.cs,Start,The length of the statement  "			if ((document.SelectedElements [i] is ILabelElement) && (ControllerHelper.GetLabelController (document.SelectedElements [i]) == null)) { " is 136.
Complex Conditional,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,OnMouseMove,The conditional expression  "(resizeAction != null) && ((document.Action == DesignerAction.Select) || ((document.Action == DesignerAction.Connect) && (resizeAction.IsResizingLink)))"  is complex.
Complex Conditional,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,StartResizeElement,The conditional expression  "(resizeAction != null) && ((document.Action == DesignerAction.Select) || ((document.Action == DesignerAction.Connect) && (resizeAction.IsResizingLink)))"  is complex.
Complex Conditional,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,InitConnectors,The conditional expression  "(((conn1Dir == CardinalDirection.North) || (conn1Dir == CardinalDirection.South)) && ((conn2Dir == CardinalDirection.East) || (conn2Dir == CardinalDirection.West))) || (((conn1Dir == CardinalDirection.East) || (conn1Dir == CardinalDirection.West)) && ((conn2Dir == CardinalDirection.North) || (conn2Dir == CardinalDirection.South)))"  is complex.
Magic Number,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,Designer,The following statement contains a magic number: selectionArea.Opacity = 40;  
Magic Number,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,Invalidate,The following statement contains a magic number: if ((force) || (el.IsInvalidated)) {  	Rectangle invalidateRec = Goc2Gsc (el.invalidateRec);  	invalidateRec.Inflate (10' 10);  	base.Invalidate (invalidateRec);  }  
Magic Number,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,Invalidate,The following statement contains a magic number: if ((force) || (el.IsInvalidated)) {  	Rectangle invalidateRec = Goc2Gsc (el.invalidateRec);  	invalidateRec.Inflate (10' 10);  	base.Invalidate (invalidateRec);  }  
Magic Number,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,Invalidate,The following statement contains a magic number: invalidateRec.Inflate (10' 10);  
Magic Number,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,Invalidate,The following statement contains a magic number: invalidateRec.Inflate (10' 10);  
Magic Number,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,OnMouseDown,The following statement contains a magic number: switch (document.Action) {  // SELECT  case DesignerAction.Connect:  case DesignerAction.Select:  	if (e.Button == MouseButtons.Left) {  		mousePoint = Gsc2Goc (new Point (e.X' e.Y));  		//Verify resize action  		StartResizeElement (mousePoint);  		if ((resizeAction != null) && (resizeAction.IsResizing))  			break;  		//Verify label editing  		if (isEditLabel) {  			EndEditLabel ();  		}  		// Search element by click  		selectedElement = document.FindElement (mousePoint);  		if (selectedElement != null) {  			//Events  			ElementMouseEventArgs eventMouseDownArg = new ElementMouseEventArgs (selectedElement' e.X' e.Y);  			OnElementMouseDown (eventMouseDownArg);  			// Double-click to edit Label  			if ((e.Clicks == 2) && (selectedElement is ILabelElement)) {  				selectedLabel = ((ILabelElement)selectedElement).Label;  				StartEditLabel ();  				break;  			}  			// Element selected  			if (selectedElement is ConnectorElement) {  				StartAddLink ((ConnectorElement)selectedElement' mousePoint);  				selectedElement = null;  			}  			else  				StartSelectElements (selectedElement' mousePoint);  		}  		else {  			// If click is on neutral area' clear selection  			document.ClearSelection ();  			Point p = Gsc2Goc (new Point (e.X' e.Y));  			;  			isMultiSelection = true;  			selectionArea.Visible = true;  			selectionArea.Location = p;  			selectionArea.Size = new Size (0' 0);  			if (resizeAction != null)  				resizeAction.ShowResizeCorner (false);  		}  		base.Invalidate ();  	}  	break;  // ADD  case DesignerAction.Add:  	if (e.Button == MouseButtons.Left) {  		mousePoint = Gsc2Goc (new Point (e.X' e.Y));  		StartAddElement (mousePoint);  	}  	break;  // DELETE  case DesignerAction.Delete:  	if (e.Button == MouseButtons.Left) {  		mousePoint = Gsc2Goc (new Point (e.X' e.Y));  		DeleteElement (mousePoint);  	}  	break;  }  
Magic Number,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,OnMouseDown,The following statement contains a magic number: if (e.Button == MouseButtons.Left) {  	mousePoint = Gsc2Goc (new Point (e.X' e.Y));  	//Verify resize action  	StartResizeElement (mousePoint);  	if ((resizeAction != null) && (resizeAction.IsResizing))  		break;  	//Verify label editing  	if (isEditLabel) {  		EndEditLabel ();  	}  	// Search element by click  	selectedElement = document.FindElement (mousePoint);  	if (selectedElement != null) {  		//Events  		ElementMouseEventArgs eventMouseDownArg = new ElementMouseEventArgs (selectedElement' e.X' e.Y);  		OnElementMouseDown (eventMouseDownArg);  		// Double-click to edit Label  		if ((e.Clicks == 2) && (selectedElement is ILabelElement)) {  			selectedLabel = ((ILabelElement)selectedElement).Label;  			StartEditLabel ();  			break;  		}  		// Element selected  		if (selectedElement is ConnectorElement) {  			StartAddLink ((ConnectorElement)selectedElement' mousePoint);  			selectedElement = null;  		}  		else  			StartSelectElements (selectedElement' mousePoint);  	}  	else {  		// If click is on neutral area' clear selection  		document.ClearSelection ();  		Point p = Gsc2Goc (new Point (e.X' e.Y));  		;  		isMultiSelection = true;  		selectionArea.Visible = true;  		selectionArea.Location = p;  		selectionArea.Size = new Size (0' 0);  		if (resizeAction != null)  			resizeAction.ShowResizeCorner (false);  	}  	base.Invalidate ();  }  
Magic Number,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,OnMouseDown,The following statement contains a magic number: if (selectedElement != null) {  	//Events  	ElementMouseEventArgs eventMouseDownArg = new ElementMouseEventArgs (selectedElement' e.X' e.Y);  	OnElementMouseDown (eventMouseDownArg);  	// Double-click to edit Label  	if ((e.Clicks == 2) && (selectedElement is ILabelElement)) {  		selectedLabel = ((ILabelElement)selectedElement).Label;  		StartEditLabel ();  		break;  	}  	// Element selected  	if (selectedElement is ConnectorElement) {  		StartAddLink ((ConnectorElement)selectedElement' mousePoint);  		selectedElement = null;  	}  	else  		StartSelectElements (selectedElement' mousePoint);  }  else {  	// If click is on neutral area' clear selection  	document.ClearSelection ();  	Point p = Gsc2Goc (new Point (e.X' e.Y));  	;  	isMultiSelection = true;  	selectionArea.Visible = true;  	selectionArea.Location = p;  	selectionArea.Size = new Size (0' 0);  	if (resizeAction != null)  		resizeAction.ShowResizeCorner (false);  }  
Magic Number,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,OnMouseDown,The following statement contains a magic number: if ((e.Clicks == 2) && (selectedElement is ILabelElement)) {  	selectedLabel = ((ILabelElement)selectedElement).Label;  	StartEditLabel ();  	break;  }  
Magic Number,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,StartAddLink,The following statement contains a magic number: if (document.Action == DesignerAction.Connect) {  	this.connStart = connStart;  	this.connEnd = new ConnectorElement (connStart.ParentElement);  	connEnd.Location = connStart.Location;  	IMoveController ctrl = (IMoveController)((IControllable)connEnd).GetController ();  	ctrl.Start (mousePoint);  	isAddLink = true;  	switch (document.LinkType) {  	case (LinkType.Straight):  		linkLine = new StraightLinkElement (connStart' connEnd);  		break;  	case (LinkType.RightAngle):  		linkLine = new RightAngleLinkElement (connStart' connEnd);  		break;  	}  	linkLine.Visible = true;  	linkLine.BorderColor = Color.FromArgb (150' Color.Black);  	linkLine.BorderWidth = 1;  	this.Invalidate (linkLine' true);  	OnElementConnecting (new ElementConnectEventArgs (connStart.ParentElement' null' linkLine));  }  
Magic Number,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,StartAddLink,The following statement contains a magic number: linkLine.BorderColor = Color.FromArgb (150' Color.Black);  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,PointToAngle,The following statement contains a magic number: if ((angle > 0) && (angle < 180))  	angle = 360 - angle;  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,PointToAngle,The following statement contains a magic number: if ((angle > 0) && (angle < 180))  	angle = 360 - angle;  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,PointToAngle,The following statement contains a magic number: angle = 360 - angle;  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,GetDirection,The following statement contains a magic number: if (((angle >= 0) && (angle < 45)) || (angle >= 315))  	return CardinalDirection.East;  //North  else if ((angle >= 45) && (angle < 135))  	return CardinalDirection.North;  //West  else if ((angle >= 135) && (angle < 225))  	return CardinalDirection.West;  //South  else if ((angle >= 225) && (angle < 315))  	return CardinalDirection.South;  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,GetDirection,The following statement contains a magic number: if (((angle >= 0) && (angle < 45)) || (angle >= 315))  	return CardinalDirection.East;  //North  else if ((angle >= 45) && (angle < 135))  	return CardinalDirection.North;  //West  else if ((angle >= 135) && (angle < 225))  	return CardinalDirection.West;  //South  else if ((angle >= 225) && (angle < 315))  	return CardinalDirection.South;  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,GetDirection,The following statement contains a magic number: if (((angle >= 0) && (angle < 45)) || (angle >= 315))  	return CardinalDirection.East;  //North  else if ((angle >= 45) && (angle < 135))  	return CardinalDirection.North;  //West  else if ((angle >= 135) && (angle < 225))  	return CardinalDirection.West;  //South  else if ((angle >= 225) && (angle < 315))  	return CardinalDirection.South;  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,GetDirection,The following statement contains a magic number: if (((angle >= 0) && (angle < 45)) || (angle >= 315))  	return CardinalDirection.East;  //North  else if ((angle >= 45) && (angle < 135))  	return CardinalDirection.North;  //West  else if ((angle >= 135) && (angle < 225))  	return CardinalDirection.West;  //South  else if ((angle >= 225) && (angle < 315))  	return CardinalDirection.South;  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,GetDirection,The following statement contains a magic number: if (((angle >= 0) && (angle < 45)) || (angle >= 315))  	return CardinalDirection.East;  //North  else if ((angle >= 45) && (angle < 135))  	return CardinalDirection.North;  //West  else if ((angle >= 135) && (angle < 225))  	return CardinalDirection.West;  //South  else if ((angle >= 225) && (angle < 315))  	return CardinalDirection.South;  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,GetDirection,The following statement contains a magic number: if (((angle >= 0) && (angle < 45)) || (angle >= 315))  	return CardinalDirection.East;  //North  else if ((angle >= 45) && (angle < 135))  	return CardinalDirection.North;  //West  else if ((angle >= 135) && (angle < 225))  	return CardinalDirection.West;  //South  else if ((angle >= 225) && (angle < 315))  	return CardinalDirection.South;  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,GetDirection,The following statement contains a magic number: if (((angle >= 0) && (angle < 45)) || (angle >= 315))  	return CardinalDirection.East;  //North  else if ((angle >= 45) && (angle < 135))  	return CardinalDirection.North;  //West  else if ((angle >= 135) && (angle < 225))  	return CardinalDirection.West;  //South  else if ((angle >= 225) && (angle < 315))  	return CardinalDirection.South;  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,GetDirection,The following statement contains a magic number: if (((angle >= 0) && (angle < 45)) || (angle >= 315))  	return CardinalDirection.East;  //North  else if ((angle >= 45) && (angle < 135))  	return CardinalDirection.North;  //West  else if ((angle >= 135) && (angle < 225))  	return CardinalDirection.West;  //South  else if ((angle >= 225) && (angle < 315))  	return CardinalDirection.South;  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,GetDirection,The following statement contains a magic number: if ((angle >= 45) && (angle < 135))  	return CardinalDirection.North;  //West  else if ((angle >= 135) && (angle < 225))  	return CardinalDirection.West;  //South  else if ((angle >= 225) && (angle < 315))  	return CardinalDirection.South;  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,GetDirection,The following statement contains a magic number: if ((angle >= 45) && (angle < 135))  	return CardinalDirection.North;  //West  else if ((angle >= 135) && (angle < 225))  	return CardinalDirection.West;  //South  else if ((angle >= 225) && (angle < 315))  	return CardinalDirection.South;  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,GetDirection,The following statement contains a magic number: if ((angle >= 45) && (angle < 135))  	return CardinalDirection.North;  //West  else if ((angle >= 135) && (angle < 225))  	return CardinalDirection.West;  //South  else if ((angle >= 225) && (angle < 315))  	return CardinalDirection.South;  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,GetDirection,The following statement contains a magic number: if ((angle >= 45) && (angle < 135))  	return CardinalDirection.North;  //West  else if ((angle >= 135) && (angle < 225))  	return CardinalDirection.West;  //South  else if ((angle >= 225) && (angle < 315))  	return CardinalDirection.South;  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,GetDirection,The following statement contains a magic number: if ((angle >= 45) && (angle < 135))  	return CardinalDirection.North;  //West  else if ((angle >= 135) && (angle < 225))  	return CardinalDirection.West;  //South  else if ((angle >= 225) && (angle < 315))  	return CardinalDirection.South;  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,GetDirection,The following statement contains a magic number: if ((angle >= 45) && (angle < 135))  	return CardinalDirection.North;  //West  else if ((angle >= 135) && (angle < 225))  	return CardinalDirection.West;  //South  else if ((angle >= 225) && (angle < 315))  	return CardinalDirection.South;  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,GetDirection,The following statement contains a magic number: if ((angle >= 135) && (angle < 225))  	return CardinalDirection.West;  //South  else if ((angle >= 225) && (angle < 315))  	return CardinalDirection.South;  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,GetDirection,The following statement contains a magic number: if ((angle >= 135) && (angle < 225))  	return CardinalDirection.West;  //South  else if ((angle >= 225) && (angle < 315))  	return CardinalDirection.South;  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,GetDirection,The following statement contains a magic number: if ((angle >= 135) && (angle < 225))  	return CardinalDirection.West;  //South  else if ((angle >= 225) && (angle < 315))  	return CardinalDirection.South;  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,GetDirection,The following statement contains a magic number: if ((angle >= 135) && (angle < 225))  	return CardinalDirection.West;  //South  else if ((angle >= 225) && (angle < 315))  	return CardinalDirection.South;  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,GetDirection,The following statement contains a magic number: if ((angle >= 225) && (angle < 315))  	return CardinalDirection.South;  
Magic Number,Dalssoft.DiagramNet,DiagramUtil,C:\repos\dalssoft_diagramnet\Control\DiagramUtil.cs,GetDirection,The following statement contains a magic number: if ((angle >= 225) && (angle < 315))  	return CardinalDirection.South;  
Magic Number,Dalssoft.DiagramNet,Document,C:\repos\dalssoft_diagramnet\Control\Document.cs,NeedDrawElement,The following statement contains a magic number: elRectangle.Inflate (5' 5);  
Magic Number,Dalssoft.DiagramNet,Document,C:\repos\dalssoft_diagramnet\Control\Document.cs,NeedDrawElement,The following statement contains a magic number: elRectangle.Inflate (5' 5);  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,StartEdit,The following statement contains a magic number: center.X = textBox.Location.X + (textBox.Size.Width / 2);  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,StartEdit,The following statement contains a magic number: center.Y = textBox.Location.Y + (textBox.Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,SetTextBoxLocation,The following statement contains a magic number: if (lab.Text.Length > 0) {  	tb.Location = lab.Location;  	tb.Size = lab.Size;  }  else {  	string tmpText = "XXXXXXX";  	Size sizeTmp = DiagramUtil.MeasureString (tmpText' lab.Font' lab.Size.Width' lab.Format);  	if (el is BaseLinkElement) {  		tb.Size = sizeTmp;  		tb.Location = new Point (el.Location.X + (el.Size.Width / 2) - (sizeTmp.Width / 2)' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  	}  	else {  		sizeTmp.Width = el.Size.Width;  		tb.Size = sizeTmp;  		tb.Location = new Point (el.Location.X' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  	}  }  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,SetTextBoxLocation,The following statement contains a magic number: if (lab.Text.Length > 0) {  	tb.Location = lab.Location;  	tb.Size = lab.Size;  }  else {  	string tmpText = "XXXXXXX";  	Size sizeTmp = DiagramUtil.MeasureString (tmpText' lab.Font' lab.Size.Width' lab.Format);  	if (el is BaseLinkElement) {  		tb.Size = sizeTmp;  		tb.Location = new Point (el.Location.X + (el.Size.Width / 2) - (sizeTmp.Width / 2)' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  	}  	else {  		sizeTmp.Width = el.Size.Width;  		tb.Size = sizeTmp;  		tb.Location = new Point (el.Location.X' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  	}  }  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,SetTextBoxLocation,The following statement contains a magic number: if (lab.Text.Length > 0) {  	tb.Location = lab.Location;  	tb.Size = lab.Size;  }  else {  	string tmpText = "XXXXXXX";  	Size sizeTmp = DiagramUtil.MeasureString (tmpText' lab.Font' lab.Size.Width' lab.Format);  	if (el is BaseLinkElement) {  		tb.Size = sizeTmp;  		tb.Location = new Point (el.Location.X + (el.Size.Width / 2) - (sizeTmp.Width / 2)' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  	}  	else {  		sizeTmp.Width = el.Size.Width;  		tb.Size = sizeTmp;  		tb.Location = new Point (el.Location.X' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  	}  }  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,SetTextBoxLocation,The following statement contains a magic number: if (lab.Text.Length > 0) {  	tb.Location = lab.Location;  	tb.Size = lab.Size;  }  else {  	string tmpText = "XXXXXXX";  	Size sizeTmp = DiagramUtil.MeasureString (tmpText' lab.Font' lab.Size.Width' lab.Format);  	if (el is BaseLinkElement) {  		tb.Size = sizeTmp;  		tb.Location = new Point (el.Location.X + (el.Size.Width / 2) - (sizeTmp.Width / 2)' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  	}  	else {  		sizeTmp.Width = el.Size.Width;  		tb.Size = sizeTmp;  		tb.Location = new Point (el.Location.X' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  	}  }  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,SetTextBoxLocation,The following statement contains a magic number: if (lab.Text.Length > 0) {  	tb.Location = lab.Location;  	tb.Size = lab.Size;  }  else {  	string tmpText = "XXXXXXX";  	Size sizeTmp = DiagramUtil.MeasureString (tmpText' lab.Font' lab.Size.Width' lab.Format);  	if (el is BaseLinkElement) {  		tb.Size = sizeTmp;  		tb.Location = new Point (el.Location.X + (el.Size.Width / 2) - (sizeTmp.Width / 2)' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  	}  	else {  		sizeTmp.Width = el.Size.Width;  		tb.Size = sizeTmp;  		tb.Location = new Point (el.Location.X' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  	}  }  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,SetTextBoxLocation,The following statement contains a magic number: if (lab.Text.Length > 0) {  	tb.Location = lab.Location;  	tb.Size = lab.Size;  }  else {  	string tmpText = "XXXXXXX";  	Size sizeTmp = DiagramUtil.MeasureString (tmpText' lab.Font' lab.Size.Width' lab.Format);  	if (el is BaseLinkElement) {  		tb.Size = sizeTmp;  		tb.Location = new Point (el.Location.X + (el.Size.Width / 2) - (sizeTmp.Width / 2)' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  	}  	else {  		sizeTmp.Width = el.Size.Width;  		tb.Size = sizeTmp;  		tb.Location = new Point (el.Location.X' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  	}  }  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,SetTextBoxLocation,The following statement contains a magic number: if (el is BaseLinkElement) {  	tb.Size = sizeTmp;  	tb.Location = new Point (el.Location.X + (el.Size.Width / 2) - (sizeTmp.Width / 2)' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  }  else {  	sizeTmp.Width = el.Size.Width;  	tb.Size = sizeTmp;  	tb.Location = new Point (el.Location.X' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  }  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,SetTextBoxLocation,The following statement contains a magic number: if (el is BaseLinkElement) {  	tb.Size = sizeTmp;  	tb.Location = new Point (el.Location.X + (el.Size.Width / 2) - (sizeTmp.Width / 2)' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  }  else {  	sizeTmp.Width = el.Size.Width;  	tb.Size = sizeTmp;  	tb.Location = new Point (el.Location.X' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  }  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,SetTextBoxLocation,The following statement contains a magic number: if (el is BaseLinkElement) {  	tb.Size = sizeTmp;  	tb.Location = new Point (el.Location.X + (el.Size.Width / 2) - (sizeTmp.Width / 2)' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  }  else {  	sizeTmp.Width = el.Size.Width;  	tb.Size = sizeTmp;  	tb.Location = new Point (el.Location.X' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  }  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,SetTextBoxLocation,The following statement contains a magic number: if (el is BaseLinkElement) {  	tb.Size = sizeTmp;  	tb.Location = new Point (el.Location.X + (el.Size.Width / 2) - (sizeTmp.Width / 2)' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  }  else {  	sizeTmp.Width = el.Size.Width;  	tb.Size = sizeTmp;  	tb.Location = new Point (el.Location.X' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  }  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,SetTextBoxLocation,The following statement contains a magic number: if (el is BaseLinkElement) {  	tb.Size = sizeTmp;  	tb.Location = new Point (el.Location.X + (el.Size.Width / 2) - (sizeTmp.Width / 2)' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  }  else {  	sizeTmp.Width = el.Size.Width;  	tb.Size = sizeTmp;  	tb.Location = new Point (el.Location.X' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  }  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,SetTextBoxLocation,The following statement contains a magic number: if (el is BaseLinkElement) {  	tb.Size = sizeTmp;  	tb.Location = new Point (el.Location.X + (el.Size.Width / 2) - (sizeTmp.Width / 2)' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  }  else {  	sizeTmp.Width = el.Size.Width;  	tb.Size = sizeTmp;  	tb.Location = new Point (el.Location.X' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  }  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,SetTextBoxLocation,The following statement contains a magic number: tb.Location = new Point (el.Location.X + (el.Size.Width / 2) - (sizeTmp.Width / 2)' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,SetTextBoxLocation,The following statement contains a magic number: tb.Location = new Point (el.Location.X + (el.Size.Width / 2) - (sizeTmp.Width / 2)' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,SetTextBoxLocation,The following statement contains a magic number: tb.Location = new Point (el.Location.X + (el.Size.Width / 2) - (sizeTmp.Width / 2)' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,SetTextBoxLocation,The following statement contains a magic number: tb.Location = new Point (el.Location.X + (el.Size.Width / 2) - (sizeTmp.Width / 2)' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,SetTextBoxLocation,The following statement contains a magic number: tb.Location = new Point (el.Location.X' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,SetTextBoxLocation,The following statement contains a magic number: tb.Location = new Point (el.Location.X' el.Location.Y + (el.Size.Height / 2) - (sizeTmp.Height / 2));  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,MeasureTextSize,The following statement contains a magic number: sizeTmp.Height += 30;  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,labelTextBox_KeyPress,The following statement contains a magic number: labelTextBox.Location = new Point (center.X - (size.Width / 2)' center.Y - (size.Height / 2));  
Magic Number,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,labelTextBox_KeyPress,The following statement contains a magic number: labelTextBox.Location = new Point (center.X - (size.Width / 2)' center.Y - (size.Height / 2));  
Magic Number,Dalssoft.DiagramNet,CommentBoxNode,C:\repos\dalssoft_diagramnet\Control\element\CommentBoxNode.cs,CommentBoxNode,The following statement contains a magic number: fillColor2 = Color.FromArgb (255' 255' 128);  
Magic Number,Dalssoft.DiagramNet,CommentBoxNode,C:\repos\dalssoft_diagramnet\Control\element\CommentBoxNode.cs,CommentBoxNode,The following statement contains a magic number: fillColor2 = Color.FromArgb (255' 255' 128);  
Magic Number,Dalssoft.DiagramNet,CommentBoxNode,C:\repos\dalssoft_diagramnet\Control\element\CommentBoxNode.cs,CommentBoxNode,The following statement contains a magic number: fillColor2 = Color.FromArgb (255' 255' 128);  
Magic Number,Dalssoft.DiagramNet,CommentBoxNode,C:\repos\dalssoft_diagramnet\Control\element\CommentBoxNode.cs,CommentBoxNode,The following statement contains a magic number: label.Opacity = 100;  
Magic Number,Dalssoft.DiagramNet,CommentBoxNode,C:\repos\dalssoft_diagramnet\Control\element\CommentBoxNode.cs,GetBrush,The following statement contains a magic number: if (opacity == 100) {  	fill1 = fillColor1;  	fill2 = fillColor2;  }  else {  	fill1 = Color.FromArgb ((int)(255.0f * (opacity / 100.0f))' fillColor1);  	fill2 = Color.FromArgb ((int)(255.0f * (opacity / 100.0f))' fillColor2);  }  
Magic Number,Dalssoft.DiagramNet,CommentBoxNode,C:\repos\dalssoft_diagramnet\Control\element\CommentBoxNode.cs,Draw,The following statement contains a magic number: points [2] = new Point (r.X + r.Width' r.Y + r.Height);  
Magic Number,Dalssoft.DiagramNet,CommentBoxNode,C:\repos\dalssoft_diagramnet\Control\element\CommentBoxNode.cs,Draw,The following statement contains a magic number: points [3] = new Point (r.X + r.Width' r.Y + foldSize.Height);  
Magic Number,Dalssoft.DiagramNet,CommentBoxNode,C:\repos\dalssoft_diagramnet\Control\element\CommentBoxNode.cs,Draw,The following statement contains a magic number: points [4] = new Point (r.X + r.Width - foldSize.Width' r.Y + 0);  
Magic Number,Dalssoft.DiagramNet,CommentBoxElement,C:\repos\dalssoft_diagramnet\Control\element\CommentBoxElement.cs,CommentBoxElement,The following statement contains a magic number: fillColor2 = Color.FromArgb (255' 255' 128);  
Magic Number,Dalssoft.DiagramNet,CommentBoxElement,C:\repos\dalssoft_diagramnet\Control\element\CommentBoxElement.cs,CommentBoxElement,The following statement contains a magic number: fillColor2 = Color.FromArgb (255' 255' 128);  
Magic Number,Dalssoft.DiagramNet,CommentBoxElement,C:\repos\dalssoft_diagramnet\Control\element\CommentBoxElement.cs,CommentBoxElement,The following statement contains a magic number: fillColor2 = Color.FromArgb (255' 255' 128);  
Magic Number,Dalssoft.DiagramNet,CommentBoxElement,C:\repos\dalssoft_diagramnet\Control\element\CommentBoxElement.cs,CommentBoxElement,The following statement contains a magic number: label.Opacity = 100;  
Magic Number,Dalssoft.DiagramNet,CommentBoxElement,C:\repos\dalssoft_diagramnet\Control\element\CommentBoxElement.cs,Draw,The following statement contains a magic number: points [2] = new Point (r.X + r.Width' r.Y + r.Height);  
Magic Number,Dalssoft.DiagramNet,CommentBoxElement,C:\repos\dalssoft_diagramnet\Control\element\CommentBoxElement.cs,Draw,The following statement contains a magic number: points [3] = new Point (r.X + r.Width' r.Y + foldSize.Height);  
Magic Number,Dalssoft.DiagramNet,CommentBoxElement,C:\repos\dalssoft_diagramnet\Control\element\CommentBoxElement.cs,Draw,The following statement contains a magic number: points [4] = new Point (r.X + r.Width - foldSize.Width' r.Y + 0);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,RectangleController,The following statement contains a magic number: for (int i = 0; i < selectionCorner.Length; i++) {  	selectionCorner [i] = new RectangleElement (0' 0' selCornerSize * 2' selCornerSize * 2);  	selectionCorner [i].BorderColor = Color.Black;  	selectionCorner [i].FillColor1 = Color.White;  	selectionCorner [i].FillColor2 = Color.Empty;  }  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,RectangleController,The following statement contains a magic number: for (int i = 0; i < selectionCorner.Length; i++) {  	selectionCorner [i] = new RectangleElement (0' 0' selCornerSize * 2' selCornerSize * 2);  	selectionCorner [i].BorderColor = Color.Black;  	selectionCorner [i].FillColor1 = Color.White;  	selectionCorner [i].FillColor2 = Color.Empty;  }  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,RectangleController,The following statement contains a magic number: selectionCorner [i] = new RectangleElement (0' 0' selCornerSize * 2' selCornerSize * 2);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,RectangleController,The following statement contains a magic number: selectionCorner [i] = new RectangleElement (0' 0' selCornerSize * 2' selCornerSize * 2);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,UpdateCornersPos,The following statement contains a magic number: selectionCorner [(int)CornerPosition.TopCenter].Location = new Point (rec.Location.X + rec.Size.Width / 2 - selCornerSize' rec.Location.Y - selCornerSize);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,UpdateCornersPos,The following statement contains a magic number: selectionCorner [(int)CornerPosition.BottomCenter].Location = new Point (rec.Location.X + rec.Size.Width / 2 - selCornerSize' rec.Location.Y + rec.Size.Height - selCornerSize);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,UpdateCornersPos,The following statement contains a magic number: selectionCorner [(int)CornerPosition.MiddleLeft].Location = new Point (rec.Location.X - selCornerSize' rec.Location.Y + rec.Size.Height / 2 - selCornerSize);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,UpdateCornersPos,The following statement contains a magic number: selectionCorner [(int)CornerPosition.MiddleCenter].Location = new Point (rec.Location.X + rec.Size.Width / 2 - selCornerSize' rec.Location.Y + rec.Size.Height / 2 - selCornerSize);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,UpdateCornersPos,The following statement contains a magic number: selectionCorner [(int)CornerPosition.MiddleCenter].Location = new Point (rec.Location.X + rec.Size.Width / 2 - selCornerSize' rec.Location.Y + rec.Size.Height / 2 - selCornerSize);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,UpdateCornersPos,The following statement contains a magic number: selectionCorner [(int)CornerPosition.MiddleRight].Location = new Point (rec.Location.X + rec.Size.Width - selCornerSize' rec.Location.Y + rec.Size.Height / 2 - selCornerSize);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: switch (selCorner) {  case CornerPosition.TopLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = loc;  	break;  case CornerPosition.TopCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.TopRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height - (loc.Y - el.Location.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.MiddleLeft:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.MiddleRight:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height);  	break;  case CornerPosition.BottomLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width - (loc.X - el.Location.X)' loc.Y - el.Location.Y);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.BottomCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' loc.Y - el.Location.Y);  	break;  case CornerPosition.BottomRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' loc.Y - el.Location.Y);  	break;  }  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: switch (selCorner) {  case CornerPosition.TopLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = loc;  	break;  case CornerPosition.TopCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.TopRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height - (loc.Y - el.Location.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.MiddleLeft:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.MiddleRight:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height);  	break;  case CornerPosition.BottomLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width - (loc.X - el.Location.X)' loc.Y - el.Location.Y);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.BottomCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' loc.Y - el.Location.Y);  	break;  case CornerPosition.BottomRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' loc.Y - el.Location.Y);  	break;  }  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: switch (selCorner) {  case CornerPosition.TopLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = loc;  	break;  case CornerPosition.TopCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.TopRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height - (loc.Y - el.Location.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.MiddleLeft:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.MiddleRight:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height);  	break;  case CornerPosition.BottomLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width - (loc.X - el.Location.X)' loc.Y - el.Location.Y);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.BottomCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' loc.Y - el.Location.Y);  	break;  case CornerPosition.BottomRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' loc.Y - el.Location.Y);  	break;  }  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: switch (selCorner) {  case CornerPosition.TopLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = loc;  	break;  case CornerPosition.TopCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.TopRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height - (loc.Y - el.Location.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.MiddleLeft:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.MiddleRight:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height);  	break;  case CornerPosition.BottomLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width - (loc.X - el.Location.X)' loc.Y - el.Location.Y);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.BottomCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' loc.Y - el.Location.Y);  	break;  case CornerPosition.BottomRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' loc.Y - el.Location.Y);  	break;  }  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: switch (selCorner) {  case CornerPosition.TopLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = loc;  	break;  case CornerPosition.TopCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.TopRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height - (loc.Y - el.Location.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.MiddleLeft:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.MiddleRight:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height);  	break;  case CornerPosition.BottomLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width - (loc.X - el.Location.X)' loc.Y - el.Location.Y);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.BottomCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' loc.Y - el.Location.Y);  	break;  case CornerPosition.BottomRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' loc.Y - el.Location.Y);  	break;  }  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: switch (selCorner) {  case CornerPosition.TopLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = loc;  	break;  case CornerPosition.TopCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.TopRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height - (loc.Y - el.Location.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.MiddleLeft:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.MiddleRight:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height);  	break;  case CornerPosition.BottomLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width - (loc.X - el.Location.X)' loc.Y - el.Location.Y);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.BottomCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' loc.Y - el.Location.Y);  	break;  case CornerPosition.BottomRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' loc.Y - el.Location.Y);  	break;  }  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: switch (selCorner) {  case CornerPosition.TopLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = loc;  	break;  case CornerPosition.TopCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.TopRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height - (loc.Y - el.Location.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.MiddleLeft:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.MiddleRight:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height);  	break;  case CornerPosition.BottomLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width - (loc.X - el.Location.X)' loc.Y - el.Location.Y);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.BottomCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' loc.Y - el.Location.Y);  	break;  case CornerPosition.BottomRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' loc.Y - el.Location.Y);  	break;  }  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: switch (selCorner) {  case CornerPosition.TopLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = loc;  	break;  case CornerPosition.TopCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.TopRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height - (loc.Y - el.Location.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.MiddleLeft:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.MiddleRight:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height);  	break;  case CornerPosition.BottomLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width - (loc.X - el.Location.X)' loc.Y - el.Location.Y);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.BottomCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' loc.Y - el.Location.Y);  	break;  case CornerPosition.BottomRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' loc.Y - el.Location.Y);  	break;  }  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: switch (selCorner) {  case CornerPosition.TopLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = loc;  	break;  case CornerPosition.TopCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.TopRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height - (loc.Y - el.Location.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.MiddleLeft:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.MiddleRight:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height);  	break;  case CornerPosition.BottomLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width - (loc.X - el.Location.X)' loc.Y - el.Location.Y);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.BottomCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' loc.Y - el.Location.Y);  	break;  case CornerPosition.BottomRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' loc.Y - el.Location.Y);  	break;  }  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: switch (selCorner) {  case CornerPosition.TopLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = loc;  	break;  case CornerPosition.TopCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.TopRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height - (loc.Y - el.Location.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.MiddleLeft:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.MiddleRight:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height);  	break;  case CornerPosition.BottomLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width - (loc.X - el.Location.X)' loc.Y - el.Location.Y);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.BottomCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' loc.Y - el.Location.Y);  	break;  case CornerPosition.BottomRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' loc.Y - el.Location.Y);  	break;  }  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: switch (selCorner) {  case CornerPosition.TopLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = loc;  	break;  case CornerPosition.TopCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.TopRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height - (loc.Y - el.Location.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.MiddleLeft:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.MiddleRight:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height);  	break;  case CornerPosition.BottomLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width - (loc.X - el.Location.X)' loc.Y - el.Location.Y);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.BottomCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' loc.Y - el.Location.Y);  	break;  case CornerPosition.BottomRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' loc.Y - el.Location.Y);  	break;  }  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: switch (selCorner) {  case CornerPosition.TopLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = loc;  	break;  case CornerPosition.TopCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.TopRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height - (loc.Y - el.Location.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.MiddleLeft:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.MiddleRight:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height);  	break;  case CornerPosition.BottomLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width - (loc.X - el.Location.X)' loc.Y - el.Location.Y);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.BottomCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' loc.Y - el.Location.Y);  	break;  case CornerPosition.BottomRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' loc.Y - el.Location.Y);  	break;  }  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: switch (selCorner) {  case CornerPosition.TopLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = loc;  	break;  case CornerPosition.TopCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.TopRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height - (loc.Y - el.Location.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.MiddleLeft:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.MiddleRight:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height);  	break;  case CornerPosition.BottomLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width - (loc.X - el.Location.X)' loc.Y - el.Location.Y);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.BottomCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' loc.Y - el.Location.Y);  	break;  case CornerPosition.BottomRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' loc.Y - el.Location.Y);  	break;  }  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: switch (selCorner) {  case CornerPosition.TopLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = loc;  	break;  case CornerPosition.TopCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.TopRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height - (loc.Y - el.Location.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.MiddleLeft:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.MiddleRight:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height);  	break;  case CornerPosition.BottomLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width - (loc.X - el.Location.X)' loc.Y - el.Location.Y);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.BottomCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' loc.Y - el.Location.Y);  	break;  case CornerPosition.BottomRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' loc.Y - el.Location.Y);  	break;  }  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: switch (selCorner) {  case CornerPosition.TopLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = loc;  	break;  case CornerPosition.TopCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.TopRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height - (loc.Y - el.Location.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.MiddleLeft:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.MiddleRight:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height);  	break;  case CornerPosition.BottomLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width - (loc.X - el.Location.X)' loc.Y - el.Location.Y);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.BottomCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' loc.Y - el.Location.Y);  	break;  case CornerPosition.BottomRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' loc.Y - el.Location.Y);  	break;  }  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: switch (selCorner) {  case CornerPosition.TopLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = loc;  	break;  case CornerPosition.TopCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.TopRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height - (loc.Y - el.Location.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.MiddleLeft:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.MiddleRight:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height);  	break;  case CornerPosition.BottomLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width - (loc.X - el.Location.X)' loc.Y - el.Location.Y);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.BottomCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' loc.Y - el.Location.Y);  	break;  case CornerPosition.BottomRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' loc.Y - el.Location.Y);  	break;  }  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following statement contains a magic number: loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkController,C:\repos\dalssoft_diagramnet\Control\element\controller\RightAngleLinkController.cs,RightAngleLinkController,The following statement contains a magic number: if (el.lines.Length == 3) {  	selectionCorner = new RectangleElement[1];  	selectionCorner [0] = new RectangleElement (0' 0' selCornerSize * 2' selCornerSize * 2);  	selectionCorner [0].BorderColor = Color.Black;  	selectionCorner [0].FillColor1 = Color.White;  	selectionCorner [0].FillColor2 = Color.Empty;  }  else {  	selectionCorner = new RectangleElement[0];  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkController,C:\repos\dalssoft_diagramnet\Control\element\controller\RightAngleLinkController.cs,RightAngleLinkController,The following statement contains a magic number: if (el.lines.Length == 3) {  	selectionCorner = new RectangleElement[1];  	selectionCorner [0] = new RectangleElement (0' 0' selCornerSize * 2' selCornerSize * 2);  	selectionCorner [0].BorderColor = Color.Black;  	selectionCorner [0].FillColor1 = Color.White;  	selectionCorner [0].FillColor2 = Color.Empty;  }  else {  	selectionCorner = new RectangleElement[0];  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkController,C:\repos\dalssoft_diagramnet\Control\element\controller\RightAngleLinkController.cs,RightAngleLinkController,The following statement contains a magic number: if (el.lines.Length == 3) {  	selectionCorner = new RectangleElement[1];  	selectionCorner [0] = new RectangleElement (0' 0' selCornerSize * 2' selCornerSize * 2);  	selectionCorner [0].BorderColor = Color.Black;  	selectionCorner [0].FillColor1 = Color.White;  	selectionCorner [0].FillColor2 = Color.Empty;  }  else {  	selectionCorner = new RectangleElement[0];  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkController,C:\repos\dalssoft_diagramnet\Control\element\controller\RightAngleLinkController.cs,RightAngleLinkController,The following statement contains a magic number: selectionCorner [0] = new RectangleElement (0' 0' selCornerSize * 2' selCornerSize * 2);  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkController,C:\repos\dalssoft_diagramnet\Control\element\controller\RightAngleLinkController.cs,RightAngleLinkController,The following statement contains a magic number: selectionCorner [0] = new RectangleElement (0' 0' selCornerSize * 2' selCornerSize * 2);  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkController,C:\repos\dalssoft_diagramnet\Control\element\controller\RightAngleLinkController.cs,UpdateCornersPos,The following statement contains a magic number: if (selectionCorner.Length == 1) {  	Point elLinePoint1 = el.lines [1].Point1;  	Point elLinePoint2 = el.lines [1].Point2;  	selectionCorner [0].Location = new Point (elLinePoint1.X + ((elLinePoint2.X - elLinePoint1.X) / 2) - selCornerSize' elLinePoint1.Y + ((elLinePoint2.Y - elLinePoint1.Y) / 2) - selCornerSize);  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkController,C:\repos\dalssoft_diagramnet\Control\element\controller\RightAngleLinkController.cs,UpdateCornersPos,The following statement contains a magic number: if (selectionCorner.Length == 1) {  	Point elLinePoint1 = el.lines [1].Point1;  	Point elLinePoint2 = el.lines [1].Point2;  	selectionCorner [0].Location = new Point (elLinePoint1.X + ((elLinePoint2.X - elLinePoint1.X) / 2) - selCornerSize' elLinePoint1.Y + ((elLinePoint2.Y - elLinePoint1.Y) / 2) - selCornerSize);  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkController,C:\repos\dalssoft_diagramnet\Control\element\controller\RightAngleLinkController.cs,UpdateCornersPos,The following statement contains a magic number: selectionCorner [0].Location = new Point (elLinePoint1.X + ((elLinePoint2.X - elLinePoint1.X) / 2) - selCornerSize' elLinePoint1.Y + ((elLinePoint2.Y - elLinePoint1.Y) / 2) - selCornerSize);  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkController,C:\repos\dalssoft_diagramnet\Control\element\controller\RightAngleLinkController.cs,UpdateCornersPos,The following statement contains a magic number: selectionCorner [0].Location = new Point (elLinePoint1.X + ((elLinePoint2.X - elLinePoint1.X) / 2) - selCornerSize' elLinePoint1.Y + ((elLinePoint2.Y - elLinePoint1.Y) / 2) - selCornerSize);  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkController,C:\repos\dalssoft_diagramnet\Control\element\controller\RightAngleLinkController.cs,Resize,The following statement contains a magic number: if (el.orientation == Orientation.Horizontal) {  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.lines [1].Point1 = new Point (loc.X' el.lines [1].Point1.Y);  	el.lines [1].Point2 = new Point (loc.X' el.lines [1].Point2.Y);  }  else {  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.lines [1].Point1 = new Point (el.lines [1].Point1.X' loc.Y);  	el.lines [1].Point2 = new Point (el.lines [1].Point2.X' loc.Y);  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkController,C:\repos\dalssoft_diagramnet\Control\element\controller\RightAngleLinkController.cs,Resize,The following statement contains a magic number: if (el.orientation == Orientation.Horizontal) {  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.lines [1].Point1 = new Point (loc.X' el.lines [1].Point1.Y);  	el.lines [1].Point2 = new Point (loc.X' el.lines [1].Point2.Y);  }  else {  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.lines [1].Point1 = new Point (el.lines [1].Point1.X' loc.Y);  	el.lines [1].Point2 = new Point (el.lines [1].Point2.X' loc.Y);  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkController,C:\repos\dalssoft_diagramnet\Control\element\controller\RightAngleLinkController.cs,Resize,The following statement contains a magic number: if (el.orientation == Orientation.Horizontal) {  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.lines [1].Point1 = new Point (loc.X' el.lines [1].Point1.Y);  	el.lines [1].Point2 = new Point (loc.X' el.lines [1].Point2.Y);  }  else {  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.lines [1].Point1 = new Point (el.lines [1].Point1.X' loc.Y);  	el.lines [1].Point2 = new Point (el.lines [1].Point2.X' loc.Y);  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkController,C:\repos\dalssoft_diagramnet\Control\element\controller\RightAngleLinkController.cs,Resize,The following statement contains a magic number: if (el.orientation == Orientation.Horizontal) {  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.lines [1].Point1 = new Point (loc.X' el.lines [1].Point1.Y);  	el.lines [1].Point2 = new Point (loc.X' el.lines [1].Point2.Y);  }  else {  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.lines [1].Point1 = new Point (el.lines [1].Point1.X' loc.Y);  	el.lines [1].Point2 = new Point (el.lines [1].Point2.X' loc.Y);  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkController,C:\repos\dalssoft_diagramnet\Control\element\controller\RightAngleLinkController.cs,Resize,The following statement contains a magic number: loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkController,C:\repos\dalssoft_diagramnet\Control\element\controller\RightAngleLinkController.cs,Resize,The following statement contains a magic number: loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkController,C:\repos\dalssoft_diagramnet\Control\element\controller\RightAngleLinkController.cs,Resize,The following statement contains a magic number: loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkController,C:\repos\dalssoft_diagramnet\Control\element\controller\RightAngleLinkController.cs,Resize,The following statement contains a magic number: loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkController,C:\repos\dalssoft_diagramnet\Control\element\controller\RightAngleLinkController.cs,Resize,The following statement contains a magic number: el.lines [2].Point1 = el.lines [1].Point2;  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkController,C:\repos\dalssoft_diagramnet\Control\element\controller\RightAngleLinkController.cs,SetLabelPosition,The following statement contains a magic number: if (el.Lines.Length == 2) {  	label.Location = el.Lines [0].Point2;  }  else  	label.PositionBySite (el.Lines [1]);  
Magic Number,Dalssoft.DiagramNet,ElipseElement,C:\repos\dalssoft_diagramnet\Control\element\ElipseElement.cs,Draw,The following statement contains a magic number: if (opacity == 100) {  	fill1 = fillColor1;  	fill2 = fillColor2;  }  else {  	fill1 = Color.FromArgb ((int)(255.0f * (opacity / 100.0f))' fillColor1);  	fill2 = Color.FromArgb ((int)(255.0f * (opacity / 100.0f))' fillColor2);  }  
Magic Number,Dalssoft.DiagramNet,LabelElement,C:\repos\dalssoft_diagramnet\Control\element\LabelElement.cs,GetBrushBackColor,The following statement contains a magic number: if (opacity == 100) {  	fill1 = backColor1;  	fill2 = backColor2;  }  else {  	fill1 = Color.FromArgb ((int)(255.0f * (opacity / 100.0f))' backColor1);  	fill2 = Color.FromArgb ((int)(255.0f * (opacity / 100.0f))' backColor2);  }  
Magic Number,Dalssoft.DiagramNet,LabelElement,C:\repos\dalssoft_diagramnet\Control\element\LabelElement.cs,GetBrushForeColor,The following statement contains a magic number: if (opacity == 100) {  	fill1 = foreColor1;  	fill2 = foreColor2;  }  else {  	fill1 = Color.FromArgb ((int)(255.0f * (opacity / 100.0f))' foreColor1);  	fill2 = Color.FromArgb ((int)(255.0f * (opacity / 100.0f))' foreColor2);  }  
Magic Number,Dalssoft.DiagramNet,LabelElement,C:\repos\dalssoft_diagramnet\Control\element\LabelElement.cs,PositionBySite,The following statement contains a magic number: newLocation.X = (siteLocation.X + (siteSize.Width / 2)) - (thisSize.Width / 2);  
Magic Number,Dalssoft.DiagramNet,LabelElement,C:\repos\dalssoft_diagramnet\Control\element\LabelElement.cs,PositionBySite,The following statement contains a magic number: newLocation.X = (siteLocation.X + (siteSize.Width / 2)) - (thisSize.Width / 2);  
Magic Number,Dalssoft.DiagramNet,LabelElement,C:\repos\dalssoft_diagramnet\Control\element\LabelElement.cs,PositionBySite,The following statement contains a magic number: newLocation.Y = (siteLocation.Y + (siteSize.Height / 2)) - (thisSize.Height / 2);  
Magic Number,Dalssoft.DiagramNet,LabelElement,C:\repos\dalssoft_diagramnet\Control\element\LabelElement.cs,PositionBySite,The following statement contains a magic number: newLocation.Y = (siteLocation.Y + (siteSize.Height / 2)) - (thisSize.Height / 2);  
Magic Number,Dalssoft.DiagramNet,LineElement,C:\repos\dalssoft_diagramnet\Control\element\LineElement.cs,Draw,The following statement contains a magic number: if (opacity == 100)  	borderColor1 = borderColor;  else  	borderColor1 = Color.FromArgb ((int)(255.0f * (opacity / 100.0f))' borderColor);  
Magic Number,Dalssoft.DiagramNet,NodeElement,C:\repos\dalssoft_diagramnet\Control\element\NodeElement.cs,InitConnectors,The following statement contains a magic number: connects [2] = new ConnectorElement (this);  
Magic Number,Dalssoft.DiagramNet,NodeElement,C:\repos\dalssoft_diagramnet\Control\element\NodeElement.cs,InitConnectors,The following statement contains a magic number: connects [3] = new ConnectorElement (this);  
Magic Number,Dalssoft.DiagramNet,NodeElement,C:\repos\dalssoft_diagramnet\Control\element\NodeElement.cs,UpdateConnectorsPosition,The following statement contains a magic number: loc = new Point (this.location.X + this.size.Width / 2' this.location.Y);  
Magic Number,Dalssoft.DiagramNet,NodeElement,C:\repos\dalssoft_diagramnet\Control\element\NodeElement.cs,UpdateConnectorsPosition,The following statement contains a magic number: connect.Size = new Size (connectSize * 2' connectSize * 2);  
Magic Number,Dalssoft.DiagramNet,NodeElement,C:\repos\dalssoft_diagramnet\Control\element\NodeElement.cs,UpdateConnectorsPosition,The following statement contains a magic number: connect.Size = new Size (connectSize * 2' connectSize * 2);  
Magic Number,Dalssoft.DiagramNet,NodeElement,C:\repos\dalssoft_diagramnet\Control\element\NodeElement.cs,UpdateConnectorsPosition,The following statement contains a magic number: loc = new Point (this.location.X + this.size.Width / 2' this.location.Y + this.size.Height);  
Magic Number,Dalssoft.DiagramNet,NodeElement,C:\repos\dalssoft_diagramnet\Control\element\NodeElement.cs,UpdateConnectorsPosition,The following statement contains a magic number: connect.Size = new Size (connectSize * 2' connectSize * 2);  
Magic Number,Dalssoft.DiagramNet,NodeElement,C:\repos\dalssoft_diagramnet\Control\element\NodeElement.cs,UpdateConnectorsPosition,The following statement contains a magic number: connect.Size = new Size (connectSize * 2' connectSize * 2);  
Magic Number,Dalssoft.DiagramNet,NodeElement,C:\repos\dalssoft_diagramnet\Control\element\NodeElement.cs,UpdateConnectorsPosition,The following statement contains a magic number: loc = new Point (this.location.X' this.location.Y + this.size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,NodeElement,C:\repos\dalssoft_diagramnet\Control\element\NodeElement.cs,UpdateConnectorsPosition,The following statement contains a magic number: connect = (ConnectorElement)connects [2];  
Magic Number,Dalssoft.DiagramNet,NodeElement,C:\repos\dalssoft_diagramnet\Control\element\NodeElement.cs,UpdateConnectorsPosition,The following statement contains a magic number: connect.Size = new Size (connectSize * 2' connectSize * 2);  
Magic Number,Dalssoft.DiagramNet,NodeElement,C:\repos\dalssoft_diagramnet\Control\element\NodeElement.cs,UpdateConnectorsPosition,The following statement contains a magic number: connect.Size = new Size (connectSize * 2' connectSize * 2);  
Magic Number,Dalssoft.DiagramNet,NodeElement,C:\repos\dalssoft_diagramnet\Control\element\NodeElement.cs,UpdateConnectorsPosition,The following statement contains a magic number: loc = new Point (this.location.X + this.size.Width' this.location.Y + this.size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,NodeElement,C:\repos\dalssoft_diagramnet\Control\element\NodeElement.cs,UpdateConnectorsPosition,The following statement contains a magic number: connect = (ConnectorElement)connects [3];  
Magic Number,Dalssoft.DiagramNet,NodeElement,C:\repos\dalssoft_diagramnet\Control\element\NodeElement.cs,UpdateConnectorsPosition,The following statement contains a magic number: connect.Size = new Size (connectSize * 2' connectSize * 2);  
Magic Number,Dalssoft.DiagramNet,NodeElement,C:\repos\dalssoft_diagramnet\Control\element\NodeElement.cs,UpdateConnectorsPosition,The following statement contains a magic number: connect.Size = new Size (connectSize * 2' connectSize * 2);  
Magic Number,Dalssoft.DiagramNet,RectangleElement,C:\repos\dalssoft_diagramnet\Control\element\RectangleElement.cs,GetBrush,The following statement contains a magic number: if (opacity == 100) {  	fill1 = fillColor1;  	fill2 = fillColor2;  }  else {  	fill1 = Color.FromArgb ((int)(255.0f * (opacity / 100.0f))' fillColor1);  	fill2 = Color.FromArgb ((int)(255.0f * (opacity / 100.0f))' fillColor2);  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,InitConnectors,The following statement contains a magic number: if ((((conn1Dir == CardinalDirection.North) || (conn1Dir == CardinalDirection.South)) && ((conn2Dir == CardinalDirection.East) || (conn2Dir == CardinalDirection.West))) || (((conn1Dir == CardinalDirection.East) || (conn1Dir == CardinalDirection.West)) && ((conn2Dir == CardinalDirection.North) || (conn2Dir == CardinalDirection.South)))) {  	lines = new LineElement[2];  	lines [0] = new LineElement (0' 0' 0' 0);  	lines [1] = new LineElement (0' 0' 0' 0);  }  else {  	lines = new LineElement[3];  	lines [0] = new LineElement (0' 0' 0' 0);  	lines [1] = new LineElement (0' 0' 0' 0);  	lines [2] = new LineElement (0' 0' 0' 0);  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,InitConnectors,The following statement contains a magic number: if ((((conn1Dir == CardinalDirection.North) || (conn1Dir == CardinalDirection.South)) && ((conn2Dir == CardinalDirection.East) || (conn2Dir == CardinalDirection.West))) || (((conn1Dir == CardinalDirection.East) || (conn1Dir == CardinalDirection.West)) && ((conn2Dir == CardinalDirection.North) || (conn2Dir == CardinalDirection.South)))) {  	lines = new LineElement[2];  	lines [0] = new LineElement (0' 0' 0' 0);  	lines [1] = new LineElement (0' 0' 0' 0);  }  else {  	lines = new LineElement[3];  	lines [0] = new LineElement (0' 0' 0' 0);  	lines [1] = new LineElement (0' 0' 0' 0);  	lines [2] = new LineElement (0' 0' 0' 0);  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,InitConnectors,The following statement contains a magic number: if ((((conn1Dir == CardinalDirection.North) || (conn1Dir == CardinalDirection.South)) && ((conn2Dir == CardinalDirection.East) || (conn2Dir == CardinalDirection.West))) || (((conn1Dir == CardinalDirection.East) || (conn1Dir == CardinalDirection.West)) && ((conn2Dir == CardinalDirection.North) || (conn2Dir == CardinalDirection.South)))) {  	lines = new LineElement[2];  	lines [0] = new LineElement (0' 0' 0' 0);  	lines [1] = new LineElement (0' 0' 0' 0);  }  else {  	lines = new LineElement[3];  	lines [0] = new LineElement (0' 0' 0' 0);  	lines [1] = new LineElement (0' 0' 0' 0);  	lines [2] = new LineElement (0' 0' 0' 0);  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,InitConnectors,The following statement contains a magic number: lines = new LineElement[2];  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,InitConnectors,The following statement contains a magic number: lines = new LineElement[3];  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,InitConnectors,The following statement contains a magic number: lines [2] = new LineElement (0' 0' 0' 0);  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkFirtTime,The following statement contains a magic number: lines [0].Point1 = new Point (connector1Location.X + connector1Size.Width / 2' connector1Location.Y + connector1Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkFirtTime,The following statement contains a magic number: lines [0].Point1 = new Point (connector1Location.X + connector1Size.Width / 2' connector1Location.Y + connector1Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkFirtTime,The following statement contains a magic number: lastLine.Point2 = new Point (connector2Location.X + connector2Size.Width / 2' connector2Location.Y + connector2Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkFirtTime,The following statement contains a magic number: lastLine.Point2 = new Point (connector2Location.X + connector2Size.Width / 2' connector2Location.Y + connector2Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkFirtTime,The following statement contains a magic number: if (lines.Length == 3) {  	Point lines0Point1 = lines [0].Point1;  	Point lastLinePoint2 = lastLine.Point2;  	if (orientation == Orientation.Horizontal) {  		lines [0].Point2 = new Point (lines0Point1.X + ((lastLinePoint2.X - lines0Point1.X) / 2)' lines0Point1.Y);  		lastLine.Point1 = new Point (lines0Point1.X + ((lastLinePoint2.X - lines0Point1.X) / 2)' lastLinePoint2.Y);  	}  	else if (orientation == Orientation.Vertical) {  		lines [0].Point2 = new Point (lines0Point1.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  		lastLine.Point1 = new Point (lastLinePoint2.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  	}  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkFirtTime,The following statement contains a magic number: if (lines.Length == 3) {  	Point lines0Point1 = lines [0].Point1;  	Point lastLinePoint2 = lastLine.Point2;  	if (orientation == Orientation.Horizontal) {  		lines [0].Point2 = new Point (lines0Point1.X + ((lastLinePoint2.X - lines0Point1.X) / 2)' lines0Point1.Y);  		lastLine.Point1 = new Point (lines0Point1.X + ((lastLinePoint2.X - lines0Point1.X) / 2)' lastLinePoint2.Y);  	}  	else if (orientation == Orientation.Vertical) {  		lines [0].Point2 = new Point (lines0Point1.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  		lastLine.Point1 = new Point (lastLinePoint2.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  	}  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkFirtTime,The following statement contains a magic number: if (lines.Length == 3) {  	Point lines0Point1 = lines [0].Point1;  	Point lastLinePoint2 = lastLine.Point2;  	if (orientation == Orientation.Horizontal) {  		lines [0].Point2 = new Point (lines0Point1.X + ((lastLinePoint2.X - lines0Point1.X) / 2)' lines0Point1.Y);  		lastLine.Point1 = new Point (lines0Point1.X + ((lastLinePoint2.X - lines0Point1.X) / 2)' lastLinePoint2.Y);  	}  	else if (orientation == Orientation.Vertical) {  		lines [0].Point2 = new Point (lines0Point1.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  		lastLine.Point1 = new Point (lastLinePoint2.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  	}  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkFirtTime,The following statement contains a magic number: if (lines.Length == 3) {  	Point lines0Point1 = lines [0].Point1;  	Point lastLinePoint2 = lastLine.Point2;  	if (orientation == Orientation.Horizontal) {  		lines [0].Point2 = new Point (lines0Point1.X + ((lastLinePoint2.X - lines0Point1.X) / 2)' lines0Point1.Y);  		lastLine.Point1 = new Point (lines0Point1.X + ((lastLinePoint2.X - lines0Point1.X) / 2)' lastLinePoint2.Y);  	}  	else if (orientation == Orientation.Vertical) {  		lines [0].Point2 = new Point (lines0Point1.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  		lastLine.Point1 = new Point (lastLinePoint2.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  	}  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkFirtTime,The following statement contains a magic number: if (lines.Length == 3) {  	Point lines0Point1 = lines [0].Point1;  	Point lastLinePoint2 = lastLine.Point2;  	if (orientation == Orientation.Horizontal) {  		lines [0].Point2 = new Point (lines0Point1.X + ((lastLinePoint2.X - lines0Point1.X) / 2)' lines0Point1.Y);  		lastLine.Point1 = new Point (lines0Point1.X + ((lastLinePoint2.X - lines0Point1.X) / 2)' lastLinePoint2.Y);  	}  	else if (orientation == Orientation.Vertical) {  		lines [0].Point2 = new Point (lines0Point1.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  		lastLine.Point1 = new Point (lastLinePoint2.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  	}  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkFirtTime,The following statement contains a magic number: if (orientation == Orientation.Horizontal) {  	lines [0].Point2 = new Point (lines0Point1.X + ((lastLinePoint2.X - lines0Point1.X) / 2)' lines0Point1.Y);  	lastLine.Point1 = new Point (lines0Point1.X + ((lastLinePoint2.X - lines0Point1.X) / 2)' lastLinePoint2.Y);  }  else if (orientation == Orientation.Vertical) {  	lines [0].Point2 = new Point (lines0Point1.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  	lastLine.Point1 = new Point (lastLinePoint2.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkFirtTime,The following statement contains a magic number: if (orientation == Orientation.Horizontal) {  	lines [0].Point2 = new Point (lines0Point1.X + ((lastLinePoint2.X - lines0Point1.X) / 2)' lines0Point1.Y);  	lastLine.Point1 = new Point (lines0Point1.X + ((lastLinePoint2.X - lines0Point1.X) / 2)' lastLinePoint2.Y);  }  else if (orientation == Orientation.Vertical) {  	lines [0].Point2 = new Point (lines0Point1.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  	lastLine.Point1 = new Point (lastLinePoint2.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkFirtTime,The following statement contains a magic number: if (orientation == Orientation.Horizontal) {  	lines [0].Point2 = new Point (lines0Point1.X + ((lastLinePoint2.X - lines0Point1.X) / 2)' lines0Point1.Y);  	lastLine.Point1 = new Point (lines0Point1.X + ((lastLinePoint2.X - lines0Point1.X) / 2)' lastLinePoint2.Y);  }  else if (orientation == Orientation.Vertical) {  	lines [0].Point2 = new Point (lines0Point1.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  	lastLine.Point1 = new Point (lastLinePoint2.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkFirtTime,The following statement contains a magic number: if (orientation == Orientation.Horizontal) {  	lines [0].Point2 = new Point (lines0Point1.X + ((lastLinePoint2.X - lines0Point1.X) / 2)' lines0Point1.Y);  	lastLine.Point1 = new Point (lines0Point1.X + ((lastLinePoint2.X - lines0Point1.X) / 2)' lastLinePoint2.Y);  }  else if (orientation == Orientation.Vertical) {  	lines [0].Point2 = new Point (lines0Point1.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  	lastLine.Point1 = new Point (lastLinePoint2.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkFirtTime,The following statement contains a magic number: lines [0].Point2 = new Point (lines0Point1.X + ((lastLinePoint2.X - lines0Point1.X) / 2)' lines0Point1.Y);  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkFirtTime,The following statement contains a magic number: lastLine.Point1 = new Point (lines0Point1.X + ((lastLinePoint2.X - lines0Point1.X) / 2)' lastLinePoint2.Y);  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkFirtTime,The following statement contains a magic number: if (orientation == Orientation.Vertical) {  	lines [0].Point2 = new Point (lines0Point1.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  	lastLine.Point1 = new Point (lastLinePoint2.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkFirtTime,The following statement contains a magic number: if (orientation == Orientation.Vertical) {  	lines [0].Point2 = new Point (lines0Point1.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  	lastLine.Point1 = new Point (lastLinePoint2.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkFirtTime,The following statement contains a magic number: lines [0].Point2 = new Point (lines0Point1.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkFirtTime,The following statement contains a magic number: lastLine.Point1 = new Point (lastLinePoint2.X' lines0Point1.Y + ((lastLinePoint2.Y - lines0Point1.Y) / 2));  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLink,The following statement contains a magic number: lines [0].Point1 = new Point (connector1Location.X + connector1Size.Width / 2' connector1Location.Y + connector1Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLink,The following statement contains a magic number: lines [0].Point1 = new Point (connector1Location.X + connector1Size.Width / 2' connector1Location.Y + connector1Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLink,The following statement contains a magic number: lastLine.Point2 = new Point (connector2Location.X + connector2Size.Width / 2' connector2Location.Y + connector2Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLink,The following statement contains a magic number: lastLine.Point2 = new Point (connector2Location.X + connector2Size.Width / 2' connector2Location.Y + connector2Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLink,The following statement contains a magic number: if (lines.Length == 3) {  	if (orientation == Orientation.Horizontal) {  		lines [0].Point2 = new Point (lines [0].Point2.X' lines [0].Point1.Y);  		lastLine.Point1 = new Point (lastLine.Point1.X' lastLine.Point2.Y);  		lines [1].Point1 = lines [0].Point2;  		lines [1].Point2 = lines [2].Point1;  	}  	else if (orientation == Orientation.Vertical) {  		lines [0].Point2 = new Point (lines [0].Point1.X' lines [0].Point2.Y);  		lastLine.Point1 = new Point (lastLine.Point2.X' lastLine.Point1.Y);  		lines [1].Point1 = lines [0].Point2;  		lines [1].Point2 = lines [2].Point1;  	}  }  else if (lines.Length == 2) {  	if ((conn1Dir == CardinalDirection.North) || (conn1Dir == CardinalDirection.South))  		lines [0].Point2 = new Point (lines [0].Point1.X' lastLine.Point2.Y);  	else  		lines [0].Point2 = new Point (lastLine.Point2.X' lines [0].Point1.Y);  	lastLine.Point1 = lines [0].Point2;  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLink,The following statement contains a magic number: if (lines.Length == 3) {  	if (orientation == Orientation.Horizontal) {  		lines [0].Point2 = new Point (lines [0].Point2.X' lines [0].Point1.Y);  		lastLine.Point1 = new Point (lastLine.Point1.X' lastLine.Point2.Y);  		lines [1].Point1 = lines [0].Point2;  		lines [1].Point2 = lines [2].Point1;  	}  	else if (orientation == Orientation.Vertical) {  		lines [0].Point2 = new Point (lines [0].Point1.X' lines [0].Point2.Y);  		lastLine.Point1 = new Point (lastLine.Point2.X' lastLine.Point1.Y);  		lines [1].Point1 = lines [0].Point2;  		lines [1].Point2 = lines [2].Point1;  	}  }  else if (lines.Length == 2) {  	if ((conn1Dir == CardinalDirection.North) || (conn1Dir == CardinalDirection.South))  		lines [0].Point2 = new Point (lines [0].Point1.X' lastLine.Point2.Y);  	else  		lines [0].Point2 = new Point (lastLine.Point2.X' lines [0].Point1.Y);  	lastLine.Point1 = lines [0].Point2;  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLink,The following statement contains a magic number: if (lines.Length == 3) {  	if (orientation == Orientation.Horizontal) {  		lines [0].Point2 = new Point (lines [0].Point2.X' lines [0].Point1.Y);  		lastLine.Point1 = new Point (lastLine.Point1.X' lastLine.Point2.Y);  		lines [1].Point1 = lines [0].Point2;  		lines [1].Point2 = lines [2].Point1;  	}  	else if (orientation == Orientation.Vertical) {  		lines [0].Point2 = new Point (lines [0].Point1.X' lines [0].Point2.Y);  		lastLine.Point1 = new Point (lastLine.Point2.X' lastLine.Point1.Y);  		lines [1].Point1 = lines [0].Point2;  		lines [1].Point2 = lines [2].Point1;  	}  }  else if (lines.Length == 2) {  	if ((conn1Dir == CardinalDirection.North) || (conn1Dir == CardinalDirection.South))  		lines [0].Point2 = new Point (lines [0].Point1.X' lastLine.Point2.Y);  	else  		lines [0].Point2 = new Point (lastLine.Point2.X' lines [0].Point1.Y);  	lastLine.Point1 = lines [0].Point2;  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLink,The following statement contains a magic number: if (lines.Length == 3) {  	if (orientation == Orientation.Horizontal) {  		lines [0].Point2 = new Point (lines [0].Point2.X' lines [0].Point1.Y);  		lastLine.Point1 = new Point (lastLine.Point1.X' lastLine.Point2.Y);  		lines [1].Point1 = lines [0].Point2;  		lines [1].Point2 = lines [2].Point1;  	}  	else if (orientation == Orientation.Vertical) {  		lines [0].Point2 = new Point (lines [0].Point1.X' lines [0].Point2.Y);  		lastLine.Point1 = new Point (lastLine.Point2.X' lastLine.Point1.Y);  		lines [1].Point1 = lines [0].Point2;  		lines [1].Point2 = lines [2].Point1;  	}  }  else if (lines.Length == 2) {  	if ((conn1Dir == CardinalDirection.North) || (conn1Dir == CardinalDirection.South))  		lines [0].Point2 = new Point (lines [0].Point1.X' lastLine.Point2.Y);  	else  		lines [0].Point2 = new Point (lastLine.Point2.X' lines [0].Point1.Y);  	lastLine.Point1 = lines [0].Point2;  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLink,The following statement contains a magic number: if (orientation == Orientation.Horizontal) {  	lines [0].Point2 = new Point (lines [0].Point2.X' lines [0].Point1.Y);  	lastLine.Point1 = new Point (lastLine.Point1.X' lastLine.Point2.Y);  	lines [1].Point1 = lines [0].Point2;  	lines [1].Point2 = lines [2].Point1;  }  else if (orientation == Orientation.Vertical) {  	lines [0].Point2 = new Point (lines [0].Point1.X' lines [0].Point2.Y);  	lastLine.Point1 = new Point (lastLine.Point2.X' lastLine.Point1.Y);  	lines [1].Point1 = lines [0].Point2;  	lines [1].Point2 = lines [2].Point1;  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLink,The following statement contains a magic number: if (orientation == Orientation.Horizontal) {  	lines [0].Point2 = new Point (lines [0].Point2.X' lines [0].Point1.Y);  	lastLine.Point1 = new Point (lastLine.Point1.X' lastLine.Point2.Y);  	lines [1].Point1 = lines [0].Point2;  	lines [1].Point2 = lines [2].Point1;  }  else if (orientation == Orientation.Vertical) {  	lines [0].Point2 = new Point (lines [0].Point1.X' lines [0].Point2.Y);  	lastLine.Point1 = new Point (lastLine.Point2.X' lastLine.Point1.Y);  	lines [1].Point1 = lines [0].Point2;  	lines [1].Point2 = lines [2].Point1;  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLink,The following statement contains a magic number: lines [1].Point2 = lines [2].Point1;  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLink,The following statement contains a magic number: if (orientation == Orientation.Vertical) {  	lines [0].Point2 = new Point (lines [0].Point1.X' lines [0].Point2.Y);  	lastLine.Point1 = new Point (lastLine.Point2.X' lastLine.Point1.Y);  	lines [1].Point1 = lines [0].Point2;  	lines [1].Point2 = lines [2].Point1;  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLink,The following statement contains a magic number: lines [1].Point2 = lines [2].Point1;  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLink,The following statement contains a magic number: if (lines.Length == 2) {  	if ((conn1Dir == CardinalDirection.North) || (conn1Dir == CardinalDirection.South))  		lines [0].Point2 = new Point (lines [0].Point1.X' lastLine.Point2.Y);  	else  		lines [0].Point2 = new Point (lastLine.Point2.X' lines [0].Point1.Y);  	lastLine.Point1 = lines [0].Point2;  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkLocation,The following statement contains a magic number: foreach (LineElement ln in lines) {  	points [i] = ln.Point1;  	points [i + 1] = ln.Point2;  	i += 2;  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkLocation,The following statement contains a magic number: i += 2;  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkSize,The following statement contains a magic number: if (lines.Length > 1) {  	Point[] points = new Point[lines.Length * 2];  	int i = 0;  	foreach (LineElement ln in lines) {  		points [i] = ln.Point1;  		points [i + 1] = ln.Point2;  		i += 2;  	}  	Point upper = DiagramUtil.GetUpperPoint (points);  	Point lower = DiagramUtil.GetLowerPoint (points);  	sizeTmp = new Size (lower.X - upper.X' lower.Y - upper.Y);  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkSize,The following statement contains a magic number: if (lines.Length > 1) {  	Point[] points = new Point[lines.Length * 2];  	int i = 0;  	foreach (LineElement ln in lines) {  		points [i] = ln.Point1;  		points [i + 1] = ln.Point2;  		i += 2;  	}  	Point upper = DiagramUtil.GetUpperPoint (points);  	Point lower = DiagramUtil.GetLowerPoint (points);  	sizeTmp = new Size (lower.X - upper.X' lower.Y - upper.Y);  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkSize,The following statement contains a magic number: foreach (LineElement ln in lines) {  	points [i] = ln.Point1;  	points [i + 1] = ln.Point2;  	i += 2;  }  
Magic Number,Dalssoft.DiagramNet,RightAngleLinkElement,C:\repos\dalssoft_diagramnet\Control\element\RightAngleLinkElement.cs,CalcLinkSize,The following statement contains a magic number: i += 2;  
Magic Number,Dalssoft.DiagramNet,StraightLinkElement,C:\repos\dalssoft_diagramnet\Control\element\StraightLinkElement.cs,CalcLink,The following statement contains a magic number: if (line1 != null) {  	Point connector1Location = connector1.Location;  	Point connector2Location = connector2.Location;  	Size connector1Size = connector1.Size;  	Size connector2Size = connector2.Size;  	line1.Point1 = new Point (connector1Location.X + connector1Size.Width / 2' connector1Location.Y + connector1Size.Height / 2);  	line1.Point2 = new Point (connector2Location.X + connector2Size.Width / 2' connector2Location.Y + connector2Size.Height / 2);  	line1.CalcLine ();  }  
Magic Number,Dalssoft.DiagramNet,StraightLinkElement,C:\repos\dalssoft_diagramnet\Control\element\StraightLinkElement.cs,CalcLink,The following statement contains a magic number: if (line1 != null) {  	Point connector1Location = connector1.Location;  	Point connector2Location = connector2.Location;  	Size connector1Size = connector1.Size;  	Size connector2Size = connector2.Size;  	line1.Point1 = new Point (connector1Location.X + connector1Size.Width / 2' connector1Location.Y + connector1Size.Height / 2);  	line1.Point2 = new Point (connector2Location.X + connector2Size.Width / 2' connector2Location.Y + connector2Size.Height / 2);  	line1.CalcLine ();  }  
Magic Number,Dalssoft.DiagramNet,StraightLinkElement,C:\repos\dalssoft_diagramnet\Control\element\StraightLinkElement.cs,CalcLink,The following statement contains a magic number: if (line1 != null) {  	Point connector1Location = connector1.Location;  	Point connector2Location = connector2.Location;  	Size connector1Size = connector1.Size;  	Size connector2Size = connector2.Size;  	line1.Point1 = new Point (connector1Location.X + connector1Size.Width / 2' connector1Location.Y + connector1Size.Height / 2);  	line1.Point2 = new Point (connector2Location.X + connector2Size.Width / 2' connector2Location.Y + connector2Size.Height / 2);  	line1.CalcLine ();  }  
Magic Number,Dalssoft.DiagramNet,StraightLinkElement,C:\repos\dalssoft_diagramnet\Control\element\StraightLinkElement.cs,CalcLink,The following statement contains a magic number: if (line1 != null) {  	Point connector1Location = connector1.Location;  	Point connector2Location = connector2.Location;  	Size connector1Size = connector1.Size;  	Size connector2Size = connector2.Size;  	line1.Point1 = new Point (connector1Location.X + connector1Size.Width / 2' connector1Location.Y + connector1Size.Height / 2);  	line1.Point2 = new Point (connector2Location.X + connector2Size.Width / 2' connector2Location.Y + connector2Size.Height / 2);  	line1.CalcLine ();  }  
Magic Number,Dalssoft.DiagramNet,StraightLinkElement,C:\repos\dalssoft_diagramnet\Control\element\StraightLinkElement.cs,CalcLink,The following statement contains a magic number: line1.Point1 = new Point (connector1Location.X + connector1Size.Width / 2' connector1Location.Y + connector1Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,StraightLinkElement,C:\repos\dalssoft_diagramnet\Control\element\StraightLinkElement.cs,CalcLink,The following statement contains a magic number: line1.Point1 = new Point (connector1Location.X + connector1Size.Width / 2' connector1Location.Y + connector1Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,StraightLinkElement,C:\repos\dalssoft_diagramnet\Control\element\StraightLinkElement.cs,CalcLink,The following statement contains a magic number: line1.Point2 = new Point (connector2Location.X + connector2Size.Width / 2' connector2Location.Y + connector2Size.Height / 2);  
Magic Number,Dalssoft.DiagramNet,StraightLinkElement,C:\repos\dalssoft_diagramnet\Control\element\StraightLinkElement.cs,CalcLink,The following statement contains a magic number: line1.Point2 = new Point (connector2Location.X + connector2Size.Width / 2' connector2Location.Y + connector2Size.Height / 2);  
Missing Default,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,OnMouseDown,The following switch statement is missing a default case: switch (document.Action) {  // SELECT  case DesignerAction.Connect:  case DesignerAction.Select:  	if (e.Button == MouseButtons.Left) {  		mousePoint = Gsc2Goc (new Point (e.X' e.Y));  		//Verify resize action  		StartResizeElement (mousePoint);  		if ((resizeAction != null) && (resizeAction.IsResizing))  			break;  		//Verify label editing  		if (isEditLabel) {  			EndEditLabel ();  		}  		// Search element by click  		selectedElement = document.FindElement (mousePoint);  		if (selectedElement != null) {  			//Events  			ElementMouseEventArgs eventMouseDownArg = new ElementMouseEventArgs (selectedElement' e.X' e.Y);  			OnElementMouseDown (eventMouseDownArg);  			// Double-click to edit Label  			if ((e.Clicks == 2) && (selectedElement is ILabelElement)) {  				selectedLabel = ((ILabelElement)selectedElement).Label;  				StartEditLabel ();  				break;  			}  			// Element selected  			if (selectedElement is ConnectorElement) {  				StartAddLink ((ConnectorElement)selectedElement' mousePoint);  				selectedElement = null;  			}  			else  				StartSelectElements (selectedElement' mousePoint);  		}  		else {  			// If click is on neutral area' clear selection  			document.ClearSelection ();  			Point p = Gsc2Goc (new Point (e.X' e.Y));  			;  			isMultiSelection = true;  			selectionArea.Visible = true;  			selectionArea.Location = p;  			selectionArea.Size = new Size (0' 0);  			if (resizeAction != null)  				resizeAction.ShowResizeCorner (false);  		}  		base.Invalidate ();  	}  	break;  // ADD  case DesignerAction.Add:  	if (e.Button == MouseButtons.Left) {  		mousePoint = Gsc2Goc (new Point (e.X' e.Y));  		StartAddElement (mousePoint);  	}  	break;  // DELETE  case DesignerAction.Delete:  	if (e.Button == MouseButtons.Left) {  		mousePoint = Gsc2Goc (new Point (e.X' e.Y));  		DeleteElement (mousePoint);  	}  	break;  }  
Missing Default,Dalssoft.DiagramNet,Designer,C:\repos\dalssoft_diagramnet\Control\Designer.cs,StartAddLink,The following switch statement is missing a default case: switch (document.LinkType) {  case (LinkType.Straight):  	linkLine = new StraightLinkElement (connStart' connEnd);  	break;  case (LinkType.RightAngle):  	linkLine = new RightAngleLinkElement (connStart' connEnd);  	break;  }  
Missing Default,Dalssoft.DiagramNet,EditLabelAction,C:\repos\dalssoft_diagramnet\Control\EditLabelAction.cs,StartEdit,The following switch statement is missing a default case: switch (labelElement.Alignment) {  case StringAlignment.Near:  	labelTextBox.TextAlign = HorizontalAlignment.Left;  	break;  case StringAlignment.Center:  	labelTextBox.TextAlign = HorizontalAlignment.Center;  	break;  case StringAlignment.Far:  	labelTextBox.TextAlign = HorizontalAlignment.Right;  	break;  }  
Missing Default,Dalssoft.DiagramNet,RectangleController,C:\repos\dalssoft_diagramnet\Control\element\controller\RectangleController.cs,Resize,The following switch statement is missing a default case: switch (selCorner) {  case CornerPosition.TopLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = loc;  	break;  case CornerPosition.TopCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' el.Size.Height + (el.Location.Y - loc.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.TopRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height - (loc.Y - el.Location.Y));  	el.Location = new Point (el.Location.X' loc.Y);  	break;  case CornerPosition.MiddleLeft:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width + (el.Location.X - loc.X)' el.Size.Height);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.MiddleRight:  	corner.Location = new Point (dragPointEl.X' corner.Location.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' el.Size.Height);  	break;  case CornerPosition.BottomLeft:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width - (loc.X - el.Location.X)' loc.Y - el.Location.Y);  	el.Location = new Point (loc.X' el.Location.Y);  	break;  case CornerPosition.BottomCenter:  	corner.Location = new Point (corner.Location.X' dragPointEl.Y);  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (el.Size.Width' loc.Y - el.Location.Y);  	break;  case CornerPosition.BottomRight:  	corner.Location = dragPointEl;  	loc = new Point (corner.Location.X + corner.Size.Width / 2' corner.Location.Y + corner.Size.Height / 2);  	el.Size = new Size (loc.X - el.Location.X' loc.Y - el.Location.Y);  	break;  }  
