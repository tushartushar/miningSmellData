Implementation smell,Namespace,Class,File,Method,Description
Complex Method,McGiv.AWS.SES,GetSendQuoteResponseParser,C:\repos\dmcgiv_AwsSesWrapper.Net\src\core\Commands\GetSendQuotaCommand.cs,InnerParse,Cyclomatic complexity of the method is 10
Complex Method,McGiv.AWS.SES,GetSendStatisticsResponseParser,C:\repos\dmcgiv_AwsSesWrapper.Net\src\core\Commands\GetSendStatisticsCommand.cs,InnerParse,Cyclomatic complexity of the method is 10
Complex Method,McGiv.AWS.SES,ErrorResponseParser,C:\repos\dmcgiv_AwsSesWrapper.Net\src\core\Response\ErrorResponse.cs,InnerParse,Cyclomatic complexity of the method is 12
Long Parameter List,McGiv.AWS.SES,TaskHelper,C:\repos\dmcgiv_AwsSesWrapper.Net\src\core\CommandProcessor.cs,CreatePostWebRequestTask,The method has 5 parameters.
Long Statement,McGiv.AWS.SES,TaskHelper,C:\repos\dmcgiv_AwsSesWrapper.Net\src\core\CommandProcessor.cs,CreatePostWebRequestTask,The length of the statement  "		Task getRequestStreamTask = Task.Factory.FromAsync<Stream> (request.BeginGetRequestStream' request.EndGetRequestStream' null).ContinueWith (task =>  { " is 150.
Long Statement,McGiv.AWS.SES,TaskHelper,C:\repos\dmcgiv_AwsSesWrapper.Net\src\core\CommandProcessor.cs,CreatePostWebRequestTask,The length of the statement  "			Task writterTask = Task.Factory.FromAsync (outStream.BeginWrite' outStream.EndWrite' data' 0' data.Length' outStream' TaskCreationOptions.AttachedToParent).ContinueWith (x => ((Stream)x.AsyncState).Close ()); " is 208.
Long Statement,McGiv.AWS.SES,TaskHelper,C:\repos\dmcgiv_AwsSesWrapper.Net\src\core\CommandProcessor.cs,CreatePostWebRequestTask,The length of the statement  "		Task requestTask = Task.Factory.FromAsync<WebResponse> (request.BeginGetResponse' request.EndGetResponse' null' TaskCreationOptions.AttachedToParent).ContinueWith (task =>  { " is 174.
Long Statement,McGiv.AWS.SES,TaskHelper,C:\repos\dmcgiv_AwsSesWrapper.Net\src\core\CommandProcessor.cs,GetResponseData,The length of the statement  "			Task readTask = Task<int>.Factory.FromAsync (inStream.BeginRead' inStream.EndRead' buffer' 0' buffer.Length' null' TaskCreationOptions.AttachedToParent).ContinueWith (task =>  { " is 177.
Magic Number,McGiv.AWS.SES,TaskHelper,C:\repos\dmcgiv_AwsSesWrapper.Net\src\core\CommandProcessor.cs,GetData,The following statement contains a magic number: using (response) {  	Stream inStream = response.GetResponseStream ();  	if (inStream != null) {  		using (inStream) {  			return GetResponseData (inStream' response.ContentLength > 0 ? response.ContentLength : 1024);  		}  	}  }  
Magic Number,McGiv.AWS.SES,TaskHelper,C:\repos\dmcgiv_AwsSesWrapper.Net\src\core\CommandProcessor.cs,GetData,The following statement contains a magic number: if (inStream != null) {  	using (inStream) {  		return GetResponseData (inStream' response.ContentLength > 0 ? response.ContentLength : 1024);  	}  }  
Magic Number,McGiv.AWS.SES,TaskHelper,C:\repos\dmcgiv_AwsSesWrapper.Net\src\core\CommandProcessor.cs,GetData,The following statement contains a magic number: using (inStream) {  	return GetResponseData (inStream' response.ContentLength > 0 ? response.ContentLength : 1024);  }  
Magic Number,McGiv.AWS.SES,TaskHelper,C:\repos\dmcgiv_AwsSesWrapper.Net\src\core\CommandProcessor.cs,GetData,The following statement contains a magic number: return GetResponseData (inStream' response.ContentLength > 0 ? response.ContentLength : 1024);  
Missing Default,McGiv.AWS.SES,SendRawEmailResponseParser,C:\repos\dmcgiv_AwsSesWrapper.Net\src\core\Commands\SendRawEmailCommand.cs,InnerParse,The following switch statement is missing a default case: switch (reader.Name) {  case "MessageId": {  	response.MessageID = GetNextValue (reader);  	break;  }  case "ResponseMetadata": {  	return;  }  }  
Missing Default,McGiv.AWS.SES,GetSendQuoteResponseParser,C:\repos\dmcgiv_AwsSesWrapper.Net\src\core\Commands\GetSendQuotaCommand.cs,InnerParse,The following switch statement is missing a default case: switch (reader.Name) {  case "SentLast24Hours": {  	response.SentLast24Hours = GetNextFloatValue (reader);  	break;  }  case "Max24HourSend": {  	response.Max24HourSend = GetNextFloatValue (reader);  	break;  }  case "MaxSendRate": {  	response.MaxSendRate = GetNextFloatValue (reader);  	break;  }  case "ResponseMetadata": {  	return;  }  }  
Missing Default,McGiv.AWS.SES,GetSendStatisticsResponseParser,C:\repos\dmcgiv_AwsSesWrapper.Net\src\core\Commands\GetSendStatisticsCommand.cs,InnerParse,The following switch statement is missing a default case: switch (reader.Name) {  case "GetSendStatisticsResponse":  case "GetSendStatisticsResult":  case "SendDataPoints": {  	break;  }  case "member": {  	list.Add (GetStat (reader));  	break;  }  case "ResponseMetadata": {  	goto completed;  }  }  
Missing Default,McGiv.AWS.SES,SendEmailResponseParser,C:\repos\dmcgiv_AwsSesWrapper.Net\src\core\Commands\SendEmailCommand.cs,InnerParse,The following switch statement is missing a default case: switch (reader.Name) {  case "MessageId": {  	response.MessageID = GetNextValue (reader);  	break;  }  case "ResponseMetadata": {  	return;  }  }  
Missing Default,McGiv.AWS.SES,RequestSigner,C:\repos\dmcgiv_AwsSesWrapper.Net\src\core\RequestSigner.cs,SignRequest,The following switch statement is missing a default case: switch (RequestSignerAlgorithm) {  case RequestSignerAlgorithm.HmacSha1: {  	sb.Append ("HmacSHA1");  	break;  }  case RequestSignerAlgorithm.HmacSha256: {  	sb.Append ("HmacSHA256");  	break;  }  }  
