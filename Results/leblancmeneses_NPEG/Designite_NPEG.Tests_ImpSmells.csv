Implementation smell,Namespace,Class,File,Method,Description
Long Method,NPEG.Tests,GrammarInterpreterTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\GrammarInterpreterTests.cs,PEGrammar_BooleanAlgebra,The method has 107 lines of code.
Long Method,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_LimitingRepetition,The method has 128 lines of code.
Long Method,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_BooleanAlgebra,The method has 199 lines of code.
Long Statement,NPEG.Tests,ByteInputIteratorTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\ByteInputIteratorTests.cs,Iterator_GetText_Limit,The length of the statement  "			Assert.IsTrue(Encoding.ASCII.GetBytes("0").SequenceEqual(iterator.Text(0' 0))' "Text unable to return first character."); " is 121.
Long Statement,NPEG.Tests,ByteInputIteratorTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\ByteInputIteratorTests.cs,Iterator_GetText_Limit,The length of the statement  "			Assert.IsTrue(Encoding.ASCII.GetBytes("9").SequenceEqual(iterator.Text(19' 19))' "Text unable to return last character."); " is 122.
Long Statement,NPEG.Tests,CompositeVisitorTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\CompositeVisitorTests.cs,CompositeVisitor_RecursiveParentheses,The length of the statement  "			Assert.IsTrue(node.Children[0].Children[0].Children[0].Children[0].Children[0].Children[0].Token.Name == "ENCLOSEDDIGITS"); " is 123.
Long Statement,NPEG.Tests,CompositeVisitorTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\CompositeVisitorTests.cs,CompositeVisitor_RecursiveParentheses,The length of the statement  "			Assert.IsTrue(node.Children[0].Children[0].Children[0].Children[0].Children[0].Children[0].Children[0].Token.Name == "DIGITS"); " is 127.
Long Statement,NPEG.Tests,CompositeVisitorTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\CompositeVisitorTests.cs,CompositeVisitor_RecursiveParentheses,The length of the statement  "			Assert.IsTrue(node.Children[0].Children[0].Children[0].Children[0].Children[0].Children[0].Children[0].Children.Count == 0); " is 124.
Long Statement,NPEG.Tests,GrammarInterpreterTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\GrammarInterpreterTests.cs,PEGrammar_DynamicBackReference_Xml,The length of the statement  "			throw new NotImplementedException("Refactoring - plan on changing backreferencing logic inside NPEGParser - just placeholder of failing test for now; conserve memory"); " is 168.
Long Statement,NPEG.Tests,NpegOptionTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\NpegOptionTests.cs,Compiled_Parse_Tree_Is_Faster,The length of the statement  "(?<Gherkin>): (((?<Line> s* (?<Key> 'Given'\i / 'When'\i / 'Then'\i / 'And'\i / 'But'\i ) (?<Statement> (!S .)+ ) ) W*) / Table)+; " is 130.
Long Statement,NPEG.Tests,NpegOptionTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\NpegOptionTests.cs,Compiled_Parse_Tree_Is_Faster,The length of the statement  "(?<ScenarioOutline>): TagLine* 'Scenario'\i s 'Outline'\i s* ':' (?<Title> (!S .)+ ) W* Gherkin? (?<Example> s* 'Examples:'\i S1 Table); " is 136.
Long Statement,NPEG.Tests,NpegOptionTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\NpegOptionTests.cs,Compiled_Parse_Tree_Is_Faster,The length of the statement  "			Console.WriteLine("total time: {0}"'  withNone.ElapsedMilliseconds + withCompiled.ElapsedMilliseconds + withNoneAfter.ElapsedMilliseconds); " is 139.
Long Statement,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_FATAL,The length of the statement  "			Assert.IsTrue(node.Children[0].Children[0].Token.ValueAsString(iterator) == "fatal message without single or double quotes"); " is 125.
Long Statement,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_FATAL,The length of the statement  "			Assert.IsTrue(node.Children[0].Children[0].Token.ValueAsString(iterator) == @"Fatal message quoteing \""some other message\"" using escapes"); " is 142.
Long Statement,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_WARN,The length of the statement  "			Assert.IsTrue(node.Children[0].Children[0].Token.ValueAsString(iterator) == "warning message without single or double quotes"); " is 127.
Long Statement,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_FATAL,The length of the statement  "			Assert.IsTrue(node.Children[0].Children[0].Token.ValueAsString(iterator) == "fatal message without single or double quotes"); " is 125.
Long Statement,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_FATAL,The length of the statement  "			Assert.IsTrue(node.Children[0].Children[0].Token.ValueAsString(iterator) == @"Fatal message quoteing \""some other message\"" using escapes"); " is 142.
Long Statement,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_WARN,The length of the statement  "			Assert.IsTrue(node.Children[0].Children[0].Token.ValueAsString(iterator) == "warning message without single or double quotes"); " is 127.
Long Statement,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_WARN,The length of the statement  "			Assert.IsTrue(node.Children[0].Children[0].Token.ValueAsString(iterator) == @"warning message quoteing \""some other message\"" using escapes"); " is 144.
Long Statement,NPEG.Tests,TerminalNodes,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\TerminalNodes.cs,Terminal_CodePoint_Hexadecimal,The length of the statement  "			Assert.IsTrue(visitor.IsMatch' "During incomplete byte boundaries 0 is expected to prefix input;  This would shift input to the right by 4 bits.  In this case it complete codepoint should be 0A = \n and letter a."); " is 215.
Long Statement,NPEG.Tests,TerminalNodes,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\TerminalNodes.cs,Terminal_CodePoint_Hexadecimal,The length of the statement  "			Assert.IsTrue(visitor.IsMatch' "During incomplete byte boundaries 0 is expected to prefix input;  This would shift input to the right by 4 bits.  In this case it complete codepoint should be 00 = \0 and letter a."); " is 215.
Long Statement,NPEG.Tests,TerminalNodes,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\TerminalNodes.cs,Terminal_CodePoint_Binary,The length of the statement  "			Assert.IsTrue(visitor.IsMatch' "During incomplete byte boundaries 0 is expected to prefix input;  This would shift input to the right by 4 bits.  In this case it complete codepoint should be null and letter a."); " is 212.
Long Statement,NPEG.Tests,TerminalNodes,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\TerminalNodes.cs,Terminal_CodePoint_Binary,The length of the statement  "			binary = new CapturingGroup("Binary"' new Sequence(new CodePoint {Match = "#b000"}' new CodePoint {Match = "#b01100001"})); " is 123.
Long Statement,NPEG.Tests,TerminalNodes,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\TerminalNodes.cs,Terminal_CodePoint_Binary,The length of the statement  "			              "During incomplete byte boundaries 0 is expected to prefix input;  This would shift input to the right by 4 bits.  In this case it complete codepoint should be null and letter a."); " is 181.
Empty Catch Block,NPEG.Tests,ByteInputIteratorTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\ByteInputIteratorTests.cs,Iterator_GetText_Limit,The method has an empty catch block.
Empty Catch Block,NPEG.Tests,StreamInputIteratorTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\StreamInputIteratorTests.cs,Iterator_GetText_Limit,The method has an empty catch block.
Magic Number,NPEG.Tests,BugRegression,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\BugRegression.cs,Recursive_Grammar_Used_In_Predicate_Should_Not_Append_To_Ast,The following statement contains a magic number: Assert.IsTrue(scenarios.Count == 2);
Magic Number,NPEG.Tests,ByteInputIteratorTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\ByteInputIteratorTests.cs,Iterator_Initialization,The following statement contains a magic number: Assert.IsTrue(iterator.Length == 20);
Magic Number,NPEG.Tests,ByteInputIteratorTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\ByteInputIteratorTests.cs,Iterator_Initialization,The following statement contains a magic number: Assert.IsTrue(bytes.SequenceEqual(iterator.Text(0' 19))' "Text unable to return complete input.");
Magic Number,NPEG.Tests,ByteInputIteratorTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\ByteInputIteratorTests.cs,Iterator_GetText_Limit,The following statement contains a magic number: Assert.IsTrue(Encoding.ASCII.GetBytes("9").SequenceEqual(iterator.Text(19' 19))' "Text unable to return last character.");
Magic Number,NPEG.Tests,ByteInputIteratorTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\ByteInputIteratorTests.cs,Iterator_GetText_Limit,The following statement contains a magic number: Assert.IsTrue(Encoding.ASCII.GetBytes("9").SequenceEqual(iterator.Text(19' 19))' "Text unable to return last character.");
Magic Number,NPEG.Tests,ByteInputIteratorTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\ByteInputIteratorTests.cs,Iterator_GetText_Limit,The following statement contains a magic number: iterator.Text(19' 0);
Magic Number,NPEG.Tests,CompositeVisitorTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\CompositeVisitorTests.cs,CompositeVisitor_CapturingGroup_SandBoxTest_PriorityChoice2,The following statement contains a magic number: Assert.IsTrue(node.Children.Count == 2);
Magic Number,NPEG.Tests,CompositeVisitorTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\CompositeVisitorTests.cs,CompositeVisitor_Recursiveness,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children.Count == 2);
Magic Number,NPEG.Tests,GrammarInterpreterTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\GrammarInterpreterTests.cs,PEGrammar_LimitingRepetition,The following statement contains a magic number: Assert.IsTrue(node.Children[2].Token.Name == "FourDigitCode");
Magic Number,NPEG.Tests,GrammarInterpreterTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\GrammarInterpreterTests.cs,PEGrammar_LimitingRepetition,The following statement contains a magic number: Assert.IsTrue(node.Children[2].Token.ValueAsString(iterator) == "7890");
Magic Number,NPEG.Tests,GrammarInterpreterTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\GrammarInterpreterTests.cs,PEGrammar_LimitingRepetition_VariableExpression,The following statement contains a magic number: Assert.IsTrue(node.Token.End == bytes.Length - 2);
Magic Number,NPEG.Tests,GrammarInterpreterTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\GrammarInterpreterTests.cs,PEGrammar_PhoneNumber,The following statement contains a magic number: Assert.IsTrue(node.Children[2].Token.Name == "FourDigitCode");
Magic Number,NPEG.Tests,GrammarInterpreterTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\GrammarInterpreterTests.cs,PEGrammar_PhoneNumber,The following statement contains a magic number: Assert.IsTrue(node.Children[2].Token.ValueAsString(iterator) == "7890");
Magic Number,NPEG.Tests,NpegOptionTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\NpegOptionTests.cs,Compiled_Parse_Tree_Is_Faster,The following statement contains a magic number: var withNone = Timing.TimedFor(() =>  			{  				PEGrammar.Load(grammar' NpegOptions.Optimize);  			}' 10);
Magic Number,NPEG.Tests,NpegOptionTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\NpegOptionTests.cs,Compiled_Parse_Tree_Is_Faster,The following statement contains a magic number: var withCompiled = Timing.TimedFor(() =>  			{  				PEGrammar.Load(grammar' NpegOptions.Cached | NpegOptions.Optimize);  			}' 10);
Magic Number,NPEG.Tests,NpegOptionTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\NpegOptionTests.cs,Compiled_Parse_Tree_Is_Faster,The following statement contains a magic number: var withNoneAfter = Timing.TimedFor(() =>  			{  				PEGrammar.Load(grammar' NpegOptions.Optimize);  			}' 10);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Sequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children.Count == 3);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Sequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[2].Token.Name == "AnyCharacter");
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Sequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[2].Token.ValueAsString(iterator) == ".");
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Sequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children.Count == 3);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Sequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[2].Token.Name == "AnyCharacter");
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Sequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[2].Token.ValueAsString(iterator) == ".");
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Sequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children.Count == 3);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Sequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[2].Token.Name == "AnyCharacter");
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Sequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[2].Token.ValueAsString(iterator) == ".");
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_PriorityChoice,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children.Count == 2);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_PriorityChoice,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children.Count == 2);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children.Count == 5);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[0].Children.Count == 3);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[1].Children.Count == 2);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[2].Token.Name == "Sequence");
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[2].Children.Count == 3);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[2].Children.Count == 3);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[3].Token.Name == "Sequence");
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[3].Children.Count == 2);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[3].Children.Count == 2);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[4].Token.Name == "Sequence");
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[4].Children.Count == 3);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[4].Children.Count == 3);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children.Count == 5);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[0].Children.Count == 3);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[1].Children.Count == 2);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[2].Token.Name == "Sequence");
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[2].Children.Count == 3);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[2].Children.Count == 3);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[3].Token.Name == "Sequence");
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[3].Children.Count == 2);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[3].Children.Count == 2);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[4].Token.Name == "Sequence");
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[4].Children.Count == 3);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Multiple_PriorityChoiceAndSequence,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[4].Children.Count == 3);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Terminal_AnyCharacter,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children.Count == 3);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_Terminal_AnyCharacter,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[2].Token.ValueAsString(iterator) == ".");
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_RecursionCall,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children.Count == 3);
Magic Number,NPEG.Tests,PEGrammarParserTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PEGrammarParserTests.cs,PEGrammarParser_ExpressionRoot_RecursionCall,The following statement contains a magic number: Assert.IsTrue(node.Children[0].Children[2].Children[0].Token.ValueAsString(iterator) == "AAvariaBle023_name");
Magic Number,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_BooleanAlgebra,The following statement contains a magic number: Assert.IsTrue(node.Children[2].Token.Name == "INVERTOR");
Magic Number,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_BooleanAlgebra,The following statement contains a magic number: Assert.IsTrue(node.Children[2].Children[0].Token.Name == "VARIABLE");
Magic Number,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_BooleanAlgebra,The following statement contains a magic number: Assert.IsTrue(node.Children[2].Children[0].Token.ValueAsString(iterator) == "B");
Magic Number,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_BooleanAlgebra,The following statement contains a magic number: Assert.IsTrue(node.Children[3].Token.Name == "GATE");
Magic Number,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_BooleanAlgebra,The following statement contains a magic number: Assert.IsTrue(node.Children[4].Token.Name == "INVERTOR");
Magic Number,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_BooleanAlgebra,The following statement contains a magic number: Assert.IsTrue(node.Children[4].Children[0].Token.Name == "VARIABLE");
Magic Number,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_BooleanAlgebra,The following statement contains a magic number: Assert.IsTrue(node.Children[4].Children[0].Token.ValueAsString(iterator) == "A");
Magic Number,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_BooleanAlgebra,The following statement contains a magic number: Assert.IsTrue(node.Children[5].Token.Name == "GATE");
Magic Number,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_BooleanAlgebra,The following statement contains a magic number: Assert.IsTrue(node.Children[6].Token.Name == "VARIABLE");
Magic Number,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_BooleanAlgebra,The following statement contains a magic number: Assert.IsTrue(node.Children[6].Token.ValueAsString(iterator) == "B");
Magic Number,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_BooleanAlgebra,The following statement contains a magic number: Assert.IsTrue(node.Children[2].Token.Name == "INVERTOR");
Magic Number,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_BooleanAlgebra,The following statement contains a magic number: Assert.IsTrue(node.Children[2].Children[0].Token.Name == "VARIABLE");
Magic Number,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_BooleanAlgebra,The following statement contains a magic number: Assert.IsTrue(node.Children[2].Children[0].Token.ValueAsString(iterator) == "bB");
Magic Number,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_BooleanAlgebra,The following statement contains a magic number: Assert.IsTrue(node.Children[3].Token.Name == "GATE");
Magic Number,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_BooleanAlgebra,The following statement contains a magic number: Assert.IsTrue(node.Children[4].Token.Name == "INVERTOR");
Magic Number,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_BooleanAlgebra,The following statement contains a magic number: Assert.IsTrue(node.Children[4].Children[0].Token.Name == "VARIABLE");
Magic Number,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_BooleanAlgebra,The following statement contains a magic number: Assert.IsTrue(node.Children[4].Children[0].Token.ValueAsString(iterator) == "aA");
Magic Number,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_BooleanAlgebra,The following statement contains a magic number: Assert.IsTrue(node.Children[5].Token.Name == "GATE");
Magic Number,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_BooleanAlgebra,The following statement contains a magic number: Assert.IsTrue(node.Children[6].Token.Name == "VARIABLE");
Magic Number,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_BooleanAlgebra,The following statement contains a magic number: Assert.IsTrue(node.Children[6].Token.ValueAsString(iterator) == "bB");
Magic Number,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_PhoneNumber,The following statement contains a magic number: Assert.IsTrue(node.Children[2].Token.Name == "FourDigitCode");
Magic Number,NPEG.Tests,PracticalExampleTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\PracticalExampleTests.cs,PracticalExample_PhoneNumber,The following statement contains a magic number: Assert.IsTrue(node.Children[2].Token.ValueAsString(iterator) == "7890");
Magic Number,NPEG.Tests,StreamInputIteratorTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\StreamInputIteratorTests.cs,Iterator_Initialization,The following statement contains a magic number: Assert.IsTrue(input.Length == 20);
Magic Number,NPEG.Tests,StreamInputIteratorTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\StreamInputIteratorTests.cs,Iterator_Initialization,The following statement contains a magic number: Assert.IsTrue(Encoding.ASCII.GetBytes(value).SequenceEqual(input.Text(0' 19))'  			              "Text unable to return complete input.");
Magic Number,NPEG.Tests,StreamInputIteratorTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\StreamInputIteratorTests.cs,Iterator_GetText_Limit,The following statement contains a magic number: Assert.IsTrue(Encoding.ASCII.GetBytes("9").SequenceEqual(input.Text(19' 19))' "Text unable to return last character.");
Magic Number,NPEG.Tests,StreamInputIteratorTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\StreamInputIteratorTests.cs,Iterator_GetText_Limit,The following statement contains a magic number: Assert.IsTrue(Encoding.ASCII.GetBytes("9").SequenceEqual(input.Text(19' 19))' "Text unable to return last character.");
Magic Number,NPEG.Tests,StreamInputIteratorTests,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\StreamInputIteratorTests.cs,Iterator_GetText_Limit,The following statement contains a magic number: input.Text(19' 0);
Magic Number,NPEG.Tests,TerminalNodes,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\TerminalNodes.cs,Terminal_Any,The following statement contains a magic number: Assert.IsTrue(iterator.Index == 2'  			              "Expected two characters to be consumed and Iterator updated by 2.  0' 1 .. points to 2");
Magic Number,NPEG.Tests,TerminalNodes,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\TerminalNodes.cs,Terminal_Any,The following statement contains a magic number: Assert.IsTrue(iterator.Index == 2'  			              "Expected two characters to be consumed and Iterator updated by 2.  0' 1 .. points to 2");
Magic Number,NPEG.Tests,TerminalNodes,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\TerminalNodes.cs,Terminal_CodePoint_Hexadecimal,The following statement contains a magic number: Assert.IsTrue((Byte) 'a' == 97);
Magic Number,NPEG.Tests,TerminalNodes,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\TerminalNodes.cs,Terminal_CodePoint_Binary,The following statement contains a magic number: Assert.IsTrue((Byte) 'a' == 97);
Magic Number,NPEG.Tests,TerminalNodes,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\TerminalNodes.cs,Terminal_LimitingRepetition,The following statement contains a magic number: var MinFalse = new CapturingGroup("MinFalse"'  			                                  new LimitingRepetition(Digits) {Min = 44}  				);
Magic Number,NPEG.Tests,TerminalNodes,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\TerminalNodes.cs,Terminal_LimitingRepetition,The following statement contains a magic number: var MinTrue5 = new CapturingGroup("MinTrue"'  			                                  new LimitingRepetition(Digits) {Min = 5}  				);
Magic Number,NPEG.Tests,TerminalNodes,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\TerminalNodes.cs,Terminal_LimitingRepetition,The following statement contains a magic number: var MaxTrue = new CapturingGroup("MaxTrue"'  			                                 new LimitingRepetition(Digits) {Max = 5}  				);
Magic Number,NPEG.Tests,TerminalNodes,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\TerminalNodes.cs,Terminal_LimitingRepetition,The following statement contains a magic number: var MinMax = new CapturingGroup("MinMax"'  			                                new LimitingRepetition(Digits) {Min = 5' Max = 6}  				);
Magic Number,NPEG.Tests,TerminalNodes,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\TerminalNodes.cs,Terminal_LimitingRepetition,The following statement contains a magic number: var MinMax = new CapturingGroup("MinMax"'  			                                new LimitingRepetition(Digits) {Min = 5' Max = 6}  				);
Magic Number,NPEG.Tests,TerminalNodes,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\TerminalNodes.cs,Terminal_LimitingRepetition,The following statement contains a magic number: var ExceptionMaxLessThanMin = new CapturingGroup("ExceptionMaxLessThanMin"'  			                                                 new LimitingRepetition(Digits) {Min = 5' Max = 0}  				);
Magic Number,NPEG.Tests,TerminalNodes,D:\research\architectureSmells\repos\leblancmeneses_NPEG\NPEG.Tests\TerminalNodes.cs,Terminal_LimitingRepetition,The following statement contains a magic number: Assert.IsTrue(exceptionCount == 2);
