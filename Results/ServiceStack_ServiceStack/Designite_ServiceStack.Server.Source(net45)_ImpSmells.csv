Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ServiceStack.Auth,OrmLiteAuthRepositoryBase<TUserAuth;TUserAuthDetails>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Auth\OrmLiteAuthRepository.cs,AssignRoles,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack,AutoQueryFeature,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\AutoQueryFeature.cs,Register,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack,AutoQueryFeature,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\AutoQueryFeature.cs,IncludeAggregates,Cyclomatic complexity of the method is 13
Complex Method,ServiceStack,AutoQuery,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\AutoQueryFeature.cs,ResponseFilter,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack,TypedQuery<QueryModel;From>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\AutoQueryFeature.cs,AddToQuery,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack,TypedQuery<QueryModel;From>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\AutoQueryFeature.cs,AddCondition,Cyclomatic complexity of the method is 18
Complex Method,ServiceStack,TypedQuery<QueryModel;From>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\AutoQueryFeature.cs,GetQueryMatch,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack,AutoQueryScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\AutoQueryScripts.cs,sendToAutoQuery,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack,RedisServerEvents,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\RedisServerEvents.cs,OnMessage,Cyclomatic complexity of the method is 14
Complex Method,ServiceStack.Messaging.Rcon,Client,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Rcon\Client.cs,ProcessReceive,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.Messaging.Rcon,Server,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Rcon\Server.cs,ProcessReceive,Cyclomatic complexity of the method is 10
Long Parameter List,ServiceStack.Auth,OrmLiteAuthRepositoryBase<TUserAuth;TUserAuthDetails>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Auth\OrmLiteAuthRepository.cs,TryAuthenticate,The method has 5 parameters. Parameters: digestHeaders' privateKey' nonceTimeOut' sequence' userAuth
Long Parameter List,ServiceStack,TypedQuery<QueryModel;From>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\AutoQueryFeature.cs,AppendTypedQueries,The method has 6 parameters. Parameters: q' dto' dynamicParams' defaultTerm' options' aliases
Long Parameter List,ServiceStack,TypedQuery<QueryModel;From>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\AutoQueryFeature.cs,AppendUntypedQueries,The method has 5 parameters. Parameters: q' dynamicParams' defaultTerm' options' aliases
Long Parameter List,ServiceStack,TypedQuery<QueryModel;From>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\AutoQueryFeature.cs,AddCondition,The method has 5 parameters. Parameters: q' defaultTerm' quotedColumn' value' implicitQuery
Long Parameter List,ServiceStack,RedisServerEvents,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\RedisServerEvents.cs,NotifySubscriptionAsync,The method has 5 parameters. Parameters: subscriptionId' selector' message' channel' token
Long Parameter List,ServiceStack,RedisServerEvents,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\RedisServerEvents.cs,NotifyUserIdAsync,The method has 5 parameters. Parameters: userId' selector' message' channel' token
Long Parameter List,ServiceStack,RedisServerEvents,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\RedisServerEvents.cs,NotifyUserNameAsync,The method has 5 parameters. Parameters: userName' selector' message' channel' token
Long Parameter List,ServiceStack,RedisServerEvents,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\RedisServerEvents.cs,NotifySessionAsync,The method has 5 parameters. Parameters: sessionId' selector' message' channel' token
Long Parameter List,ServiceStack,RedisServerEvents,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\RedisServerEvents.cs,NotifyRedisAsync,The method has 5 parameters. Parameters: key' selector' message' channel' token
Long Statement,ServiceStack.Auth,OrmLiteAuthRepositoryBase<TUserAuth;TUserAuthDetails>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Auth\OrmLiteAuthRepository.cs,GetUserAuthByUserName,The length of the statement  "                        throw new Exception("OrmLiteAuthRepository Db tables have not been initialized. Try calling 'InitSchema()' in your AppHost Configure method."); " is 143.
Long Statement,ServiceStack.Auth,OrmLiteAuthRepositoryBase<TUserAuth;TUserAuthDetails>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Auth\OrmLiteAuthRepository.cs,GetUserAuthDetails,The length of the statement  "                return db.Select<TUserAuthDetails>(q => q.UserAuthId == id).OrderBy(x => x.ModifiedDate).Cast<IUserAuthDetails>().ToList(); " is 123.
Long Statement,ServiceStack.Auth,OrmLiteAuthRepositoryBase<TUserAuth;TUserAuthDetails>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Auth\OrmLiteAuthRepository.cs,GetPermissions,The length of the statement  "                    return db.Select<UserAuthRole>(q => q.UserAuthId == int.Parse(userAuthId) && q.Permission != null).ConvertAll(x => x.Permission); " is 129.
Long Statement,ServiceStack.Auth,OrmLiteAuthRepositoryBase<TUserAuth;TUserAuthDetails>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Auth\OrmLiteAuthRepository.cs,AssignRoles,The length of the statement  "                    foreach (var missingPermission in permissions.Where(x => userAuth.Permissions == null || !userAuth.Permissions.Contains(x))) " is 124.
Long Statement,ServiceStack,TypedQuery<QueryModel;From>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\AutoQueryFeature.cs,GetQueryMatch,The length of the statement  "                ? q.FirstMatchingField(name) ?? (name.EndsWith(Pluralized) ? q.FirstMatchingField(name.Substring(0' name.Length - 1)) : null) " is 125.
Long Statement,ServiceStack,TypedQuery<QueryModel;From>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\AutoQueryFeature.cs,GetQueryMatch,The length of the statement  "                    match = q.FirstMatchingField(field) ?? (field.EndsWith(Pluralized) ? q.FirstMatchingField(field.Substring(0' field.Length - 1)) : null); " is 136.
Long Statement,ServiceStack,TypedQuery<QueryModel;From>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\AutoQueryFeature.cs,GetQueryMatch,The length of the statement  "                    match = q.FirstMatchingField(field) ?? (field.EndsWith(Pluralized) ? q.FirstMatchingField(field.Substring(0' field.Length - 1)) : null); " is 136.
Long Statement,ServiceStack,RedisServerEvents,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\RedisServerEvents.cs,StoreSubscriptionInfo,The length of the statement  "                trans.QueueCommand(r => r.AddItemToSortedSet(RedisIndex.ActiveSubscriptionsSet' id' RedisPubSub.CurrentServerTime.Ticks)); " is 122.
Long Statement,ServiceStack.Caching,OrmLiteCacheClient<TCacheEntry>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Caching\OrmLiteCacheClient.cs,RemoveByPattern,The length of the statement  "                db.Delete<TCacheEntry>(dialect.GetQuotedColumnName("Id") + " LIKE " + dialect.GetParam("dbPattern")' new { dbPattern }); " is 120.
Long Statement,ServiceStack.Messaging.Rcon,Client,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Rcon\Client.cs,ProcessReceive,The length of the statement  "                        e.SetBuffer(userToken.CompleteMessage' userToken.Header.Length' userToken.CompleteMessage.Length - userToken.Header.Length); " is 124.
Long Statement,ServiceStack.Messaging.Rcon,PacketCodec,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Rcon\PacketCodec.cs,EncodePacket,The length of the statement  "            var encodedPacketSize = BitConverter.GetBytes((uint)(encodedHeader.Length + encodedWordCount.Length + encodedWords.Length + 4));  //  +4 for the packet size indicator " is 166.
Long Statement,ServiceStack.Messaging.Rcon,Server,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Rcon\Server.cs,ProcessReceive,The length of the statement  "                        e.SetBuffer(userToken.CompleteMessage' userToken.Header.Length' userToken.CompleteMessage.Length - userToken.Header.Length); " is 124.
Long Statement,ServiceStack.Messaging.Redis,MessageHandlerWorker,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Redis\MessageHandlerWorker.cs,Run,The length of the statement  "            if (Interlocked.CompareExchange(ref status' WorkerStatus.Started' WorkerStatus.Starting) != WorkerStatus.Starting) return; " is 122.
Complex Conditional,ServiceStack,AutoQueryFeature,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\AutoQueryFeature.cs,IncludeAggregates,The conditional expression  "fieldRef.Item1 != q.ModelDef || fieldRef.Item2.Alias != null || needsRewrite || hasAlias"  is complex.
Complex Conditional,ServiceStack,TypedQuery<QueryModel;From>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\AutoQueryFeature.cs,AppendLimits,The conditional expression  "(dto.Skip != null || dto.Take != null)                  && (options != null && options.OrderByPrimaryKeyOnLimitQuery)"  is complex.
Empty Catch Block,ServiceStack.Messaging.Rcon,Client,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Rcon\Client.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,ServiceStack.Messaging.Rcon,Server,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Rcon\Server.cs,Dispose,The method has an empty catch block.
Empty Catch Block,ServiceStack.Messaging.Rcon,Server,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Rcon\Server.cs,ClientDisconnected,The method has an empty catch block.
Empty Catch Block,ServiceStack.Messaging.Rcon,Server,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Rcon\Server.cs,ClientDisconnected,The method has an empty catch block.
Magic Number,ServiceStack,RedisServerEvents,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\RedisServerEvents.cs,RedisServerEvents,The following statement contains a magic number: WaitBeforeNextRestart = TimeSpan.FromMilliseconds(2000);
Magic Number,ServiceStack,RedisServerEvents,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\RedisServerEvents.cs,OnMessage,The following statement contains a magic number: switch (cmd)              {                  case "notify":                      var notify = tokens[1];                      var who = tokens.Length > 2 ? tokens[2] : null;                      var body = parts[1].SplitOnFirst(' ');                      var selUri = body[0];                      var selParts = selUri.SplitOnFirst('@');                      var selector = selParts[0];                      var channel = selParts.Length > 1 ? selParts[1] : null;                      var msg = body.Length > 1 ? body[1] : null;                        switch (notify)                      {                          case "all":                              local.NotifyAll(selector' msg);                              break;                          case "channel":                              local.NotifyChannel(who' selector' msg);                              break;                          case "subscription":                              local.NotifySubscription(who' selector' msg' channel);                              break;                          case "userid":                              local.NotifyUserId(who' selector' msg' channel);                              break;                          case "username":                              local.NotifyUserName(who' selector' msg' channel);                              break;                          case "session":                              local.NotifySession(who' selector' msg' channel);                              break;                      }                      break;                    case "subscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.SubscribeToChannels(id' channelsList.Split('''));                      }                      break;                    case "unsubscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.UnsubscribeFromChannels(id' channelsList.Split('''));                      }                      break;                    case "unregister":                      var unregister = tokens[1];                      if (unregister == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.UnRegister(id);                      }                      break;                    case "pulse":                      var pulse = tokens[1];                      if (pulse == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.Pulse(id);                      }                      break;              }
Magic Number,ServiceStack,RedisServerEvents,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\RedisServerEvents.cs,OnMessage,The following statement contains a magic number: switch (cmd)              {                  case "notify":                      var notify = tokens[1];                      var who = tokens.Length > 2 ? tokens[2] : null;                      var body = parts[1].SplitOnFirst(' ');                      var selUri = body[0];                      var selParts = selUri.SplitOnFirst('@');                      var selector = selParts[0];                      var channel = selParts.Length > 1 ? selParts[1] : null;                      var msg = body.Length > 1 ? body[1] : null;                        switch (notify)                      {                          case "all":                              local.NotifyAll(selector' msg);                              break;                          case "channel":                              local.NotifyChannel(who' selector' msg);                              break;                          case "subscription":                              local.NotifySubscription(who' selector' msg' channel);                              break;                          case "userid":                              local.NotifyUserId(who' selector' msg' channel);                              break;                          case "username":                              local.NotifyUserName(who' selector' msg' channel);                              break;                          case "session":                              local.NotifySession(who' selector' msg' channel);                              break;                      }                      break;                    case "subscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.SubscribeToChannels(id' channelsList.Split('''));                      }                      break;                    case "unsubscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.UnsubscribeFromChannels(id' channelsList.Split('''));                      }                      break;                    case "unregister":                      var unregister = tokens[1];                      if (unregister == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.UnRegister(id);                      }                      break;                    case "pulse":                      var pulse = tokens[1];                      if (pulse == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.Pulse(id);                      }                      break;              }
Magic Number,ServiceStack,RedisServerEvents,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\RedisServerEvents.cs,OnMessage,The following statement contains a magic number: switch (cmd)              {                  case "notify":                      var notify = tokens[1];                      var who = tokens.Length > 2 ? tokens[2] : null;                      var body = parts[1].SplitOnFirst(' ');                      var selUri = body[0];                      var selParts = selUri.SplitOnFirst('@');                      var selector = selParts[0];                      var channel = selParts.Length > 1 ? selParts[1] : null;                      var msg = body.Length > 1 ? body[1] : null;                        switch (notify)                      {                          case "all":                              local.NotifyAll(selector' msg);                              break;                          case "channel":                              local.NotifyChannel(who' selector' msg);                              break;                          case "subscription":                              local.NotifySubscription(who' selector' msg' channel);                              break;                          case "userid":                              local.NotifyUserId(who' selector' msg' channel);                              break;                          case "username":                              local.NotifyUserName(who' selector' msg' channel);                              break;                          case "session":                              local.NotifySession(who' selector' msg' channel);                              break;                      }                      break;                    case "subscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.SubscribeToChannels(id' channelsList.Split('''));                      }                      break;                    case "unsubscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.UnsubscribeFromChannels(id' channelsList.Split('''));                      }                      break;                    case "unregister":                      var unregister = tokens[1];                      if (unregister == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.UnRegister(id);                      }                      break;                    case "pulse":                      var pulse = tokens[1];                      if (pulse == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.Pulse(id);                      }                      break;              }
Magic Number,ServiceStack,RedisServerEvents,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\RedisServerEvents.cs,OnMessage,The following statement contains a magic number: switch (cmd)              {                  case "notify":                      var notify = tokens[1];                      var who = tokens.Length > 2 ? tokens[2] : null;                      var body = parts[1].SplitOnFirst(' ');                      var selUri = body[0];                      var selParts = selUri.SplitOnFirst('@');                      var selector = selParts[0];                      var channel = selParts.Length > 1 ? selParts[1] : null;                      var msg = body.Length > 1 ? body[1] : null;                        switch (notify)                      {                          case "all":                              local.NotifyAll(selector' msg);                              break;                          case "channel":                              local.NotifyChannel(who' selector' msg);                              break;                          case "subscription":                              local.NotifySubscription(who' selector' msg' channel);                              break;                          case "userid":                              local.NotifyUserId(who' selector' msg' channel);                              break;                          case "username":                              local.NotifyUserName(who' selector' msg' channel);                              break;                          case "session":                              local.NotifySession(who' selector' msg' channel);                              break;                      }                      break;                    case "subscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.SubscribeToChannels(id' channelsList.Split('''));                      }                      break;                    case "unsubscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.UnsubscribeFromChannels(id' channelsList.Split('''));                      }                      break;                    case "unregister":                      var unregister = tokens[1];                      if (unregister == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.UnRegister(id);                      }                      break;                    case "pulse":                      var pulse = tokens[1];                      if (pulse == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.Pulse(id);                      }                      break;              }
Magic Number,ServiceStack,RedisServerEvents,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\RedisServerEvents.cs,OnMessage,The following statement contains a magic number: switch (cmd)              {                  case "notify":                      var notify = tokens[1];                      var who = tokens.Length > 2 ? tokens[2] : null;                      var body = parts[1].SplitOnFirst(' ');                      var selUri = body[0];                      var selParts = selUri.SplitOnFirst('@');                      var selector = selParts[0];                      var channel = selParts.Length > 1 ? selParts[1] : null;                      var msg = body.Length > 1 ? body[1] : null;                        switch (notify)                      {                          case "all":                              local.NotifyAll(selector' msg);                              break;                          case "channel":                              local.NotifyChannel(who' selector' msg);                              break;                          case "subscription":                              local.NotifySubscription(who' selector' msg' channel);                              break;                          case "userid":                              local.NotifyUserId(who' selector' msg' channel);                              break;                          case "username":                              local.NotifyUserName(who' selector' msg' channel);                              break;                          case "session":                              local.NotifySession(who' selector' msg' channel);                              break;                      }                      break;                    case "subscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.SubscribeToChannels(id' channelsList.Split('''));                      }                      break;                    case "unsubscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.UnsubscribeFromChannels(id' channelsList.Split('''));                      }                      break;                    case "unregister":                      var unregister = tokens[1];                      if (unregister == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.UnRegister(id);                      }                      break;                    case "pulse":                      var pulse = tokens[1];                      if (pulse == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.Pulse(id);                      }                      break;              }
Magic Number,ServiceStack,RedisServerEvents,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\RedisServerEvents.cs,OnMessage,The following statement contains a magic number: switch (cmd)              {                  case "notify":                      var notify = tokens[1];                      var who = tokens.Length > 2 ? tokens[2] : null;                      var body = parts[1].SplitOnFirst(' ');                      var selUri = body[0];                      var selParts = selUri.SplitOnFirst('@');                      var selector = selParts[0];                      var channel = selParts.Length > 1 ? selParts[1] : null;                      var msg = body.Length > 1 ? body[1] : null;                        switch (notify)                      {                          case "all":                              local.NotifyAll(selector' msg);                              break;                          case "channel":                              local.NotifyChannel(who' selector' msg);                              break;                          case "subscription":                              local.NotifySubscription(who' selector' msg' channel);                              break;                          case "userid":                              local.NotifyUserId(who' selector' msg' channel);                              break;                          case "username":                              local.NotifyUserName(who' selector' msg' channel);                              break;                          case "session":                              local.NotifySession(who' selector' msg' channel);                              break;                      }                      break;                    case "subscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.SubscribeToChannels(id' channelsList.Split('''));                      }                      break;                    case "unsubscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.UnsubscribeFromChannels(id' channelsList.Split('''));                      }                      break;                    case "unregister":                      var unregister = tokens[1];                      if (unregister == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.UnRegister(id);                      }                      break;                    case "pulse":                      var pulse = tokens[1];                      if (pulse == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.Pulse(id);                      }                      break;              }
Magic Number,ServiceStack,RedisServerEvents,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\RedisServerEvents.cs,OnMessage,The following statement contains a magic number: switch (cmd)              {                  case "notify":                      var notify = tokens[1];                      var who = tokens.Length > 2 ? tokens[2] : null;                      var body = parts[1].SplitOnFirst(' ');                      var selUri = body[0];                      var selParts = selUri.SplitOnFirst('@');                      var selector = selParts[0];                      var channel = selParts.Length > 1 ? selParts[1] : null;                      var msg = body.Length > 1 ? body[1] : null;                        switch (notify)                      {                          case "all":                              local.NotifyAll(selector' msg);                              break;                          case "channel":                              local.NotifyChannel(who' selector' msg);                              break;                          case "subscription":                              local.NotifySubscription(who' selector' msg' channel);                              break;                          case "userid":                              local.NotifyUserId(who' selector' msg' channel);                              break;                          case "username":                              local.NotifyUserName(who' selector' msg' channel);                              break;                          case "session":                              local.NotifySession(who' selector' msg' channel);                              break;                      }                      break;                    case "subscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.SubscribeToChannels(id' channelsList.Split('''));                      }                      break;                    case "unsubscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.UnsubscribeFromChannels(id' channelsList.Split('''));                      }                      break;                    case "unregister":                      var unregister = tokens[1];                      if (unregister == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.UnRegister(id);                      }                      break;                    case "pulse":                      var pulse = tokens[1];                      if (pulse == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.Pulse(id);                      }                      break;              }
Magic Number,ServiceStack,RedisServerEvents,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\RedisServerEvents.cs,OnMessage,The following statement contains a magic number: switch (cmd)              {                  case "notify":                      var notify = tokens[1];                      var who = tokens.Length > 2 ? tokens[2] : null;                      var body = parts[1].SplitOnFirst(' ');                      var selUri = body[0];                      var selParts = selUri.SplitOnFirst('@');                      var selector = selParts[0];                      var channel = selParts.Length > 1 ? selParts[1] : null;                      var msg = body.Length > 1 ? body[1] : null;                        switch (notify)                      {                          case "all":                              local.NotifyAll(selector' msg);                              break;                          case "channel":                              local.NotifyChannel(who' selector' msg);                              break;                          case "subscription":                              local.NotifySubscription(who' selector' msg' channel);                              break;                          case "userid":                              local.NotifyUserId(who' selector' msg' channel);                              break;                          case "username":                              local.NotifyUserName(who' selector' msg' channel);                              break;                          case "session":                              local.NotifySession(who' selector' msg' channel);                              break;                      }                      break;                    case "subscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.SubscribeToChannels(id' channelsList.Split('''));                      }                      break;                    case "unsubscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.UnsubscribeFromChannels(id' channelsList.Split('''));                      }                      break;                    case "unregister":                      var unregister = tokens[1];                      if (unregister == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.UnRegister(id);                      }                      break;                    case "pulse":                      var pulse = tokens[1];                      if (pulse == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.Pulse(id);                      }                      break;              }
Magic Number,ServiceStack,RedisServerEvents,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\RedisServerEvents.cs,OnMessage,The following statement contains a magic number: switch (cmd)              {                  case "notify":                      var notify = tokens[1];                      var who = tokens.Length > 2 ? tokens[2] : null;                      var body = parts[1].SplitOnFirst(' ');                      var selUri = body[0];                      var selParts = selUri.SplitOnFirst('@');                      var selector = selParts[0];                      var channel = selParts.Length > 1 ? selParts[1] : null;                      var msg = body.Length > 1 ? body[1] : null;                        switch (notify)                      {                          case "all":                              local.NotifyAll(selector' msg);                              break;                          case "channel":                              local.NotifyChannel(who' selector' msg);                              break;                          case "subscription":                              local.NotifySubscription(who' selector' msg' channel);                              break;                          case "userid":                              local.NotifyUserId(who' selector' msg' channel);                              break;                          case "username":                              local.NotifyUserName(who' selector' msg' channel);                              break;                          case "session":                              local.NotifySession(who' selector' msg' channel);                              break;                      }                      break;                    case "subscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.SubscribeToChannels(id' channelsList.Split('''));                      }                      break;                    case "unsubscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.UnsubscribeFromChannels(id' channelsList.Split('''));                      }                      break;                    case "unregister":                      var unregister = tokens[1];                      if (unregister == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.UnRegister(id);                      }                      break;                    case "pulse":                      var pulse = tokens[1];                      if (pulse == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.Pulse(id);                      }                      break;              }
Magic Number,ServiceStack,RedisServerEvents,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\RedisServerEvents.cs,OnMessage,The following statement contains a magic number: switch (cmd)              {                  case "notify":                      var notify = tokens[1];                      var who = tokens.Length > 2 ? tokens[2] : null;                      var body = parts[1].SplitOnFirst(' ');                      var selUri = body[0];                      var selParts = selUri.SplitOnFirst('@');                      var selector = selParts[0];                      var channel = selParts.Length > 1 ? selParts[1] : null;                      var msg = body.Length > 1 ? body[1] : null;                        switch (notify)                      {                          case "all":                              local.NotifyAll(selector' msg);                              break;                          case "channel":                              local.NotifyChannel(who' selector' msg);                              break;                          case "subscription":                              local.NotifySubscription(who' selector' msg' channel);                              break;                          case "userid":                              local.NotifyUserId(who' selector' msg' channel);                              break;                          case "username":                              local.NotifyUserName(who' selector' msg' channel);                              break;                          case "session":                              local.NotifySession(who' selector' msg' channel);                              break;                      }                      break;                    case "subscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.SubscribeToChannels(id' channelsList.Split('''));                      }                      break;                    case "unsubscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.UnsubscribeFromChannels(id' channelsList.Split('''));                      }                      break;                    case "unregister":                      var unregister = tokens[1];                      if (unregister == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.UnRegister(id);                      }                      break;                    case "pulse":                      var pulse = tokens[1];                      if (pulse == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.Pulse(id);                      }                      break;              }
Magic Number,ServiceStack,RedisServerEvents,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\RedisServerEvents.cs,OnMessage,The following statement contains a magic number: switch (cmd)              {                  case "notify":                      var notify = tokens[1];                      var who = tokens.Length > 2 ? tokens[2] : null;                      var body = parts[1].SplitOnFirst(' ');                      var selUri = body[0];                      var selParts = selUri.SplitOnFirst('@');                      var selector = selParts[0];                      var channel = selParts.Length > 1 ? selParts[1] : null;                      var msg = body.Length > 1 ? body[1] : null;                        switch (notify)                      {                          case "all":                              local.NotifyAll(selector' msg);                              break;                          case "channel":                              local.NotifyChannel(who' selector' msg);                              break;                          case "subscription":                              local.NotifySubscription(who' selector' msg' channel);                              break;                          case "userid":                              local.NotifyUserId(who' selector' msg' channel);                              break;                          case "username":                              local.NotifyUserName(who' selector' msg' channel);                              break;                          case "session":                              local.NotifySession(who' selector' msg' channel);                              break;                      }                      break;                    case "subscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.SubscribeToChannels(id' channelsList.Split('''));                      }                      break;                    case "unsubscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.UnsubscribeFromChannels(id' channelsList.Split('''));                      }                      break;                    case "unregister":                      var unregister = tokens[1];                      if (unregister == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.UnRegister(id);                      }                      break;                    case "pulse":                      var pulse = tokens[1];                      if (pulse == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.Pulse(id);                      }                      break;              }
Magic Number,ServiceStack,RedisServerEvents,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\RedisServerEvents.cs,OnMessage,The following statement contains a magic number: switch (cmd)              {                  case "notify":                      var notify = tokens[1];                      var who = tokens.Length > 2 ? tokens[2] : null;                      var body = parts[1].SplitOnFirst(' ');                      var selUri = body[0];                      var selParts = selUri.SplitOnFirst('@');                      var selector = selParts[0];                      var channel = selParts.Length > 1 ? selParts[1] : null;                      var msg = body.Length > 1 ? body[1] : null;                        switch (notify)                      {                          case "all":                              local.NotifyAll(selector' msg);                              break;                          case "channel":                              local.NotifyChannel(who' selector' msg);                              break;                          case "subscription":                              local.NotifySubscription(who' selector' msg' channel);                              break;                          case "userid":                              local.NotifyUserId(who' selector' msg' channel);                              break;                          case "username":                              local.NotifyUserName(who' selector' msg' channel);                              break;                          case "session":                              local.NotifySession(who' selector' msg' channel);                              break;                      }                      break;                    case "subscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.SubscribeToChannels(id' channelsList.Split('''));                      }                      break;                    case "unsubscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.UnsubscribeFromChannels(id' channelsList.Split('''));                      }                      break;                    case "unregister":                      var unregister = tokens[1];                      if (unregister == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.UnRegister(id);                      }                      break;                    case "pulse":                      var pulse = tokens[1];                      if (pulse == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.Pulse(id);                      }                      break;              }
Magic Number,ServiceStack.Messaging.Rcon,Client,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Rcon\Client.cs,ProcessReceive,The following statement contains a magic number: userToken.MessageLength = BitConverter.ToUInt32(userToken.Header' 4);
Magic Number,ServiceStack.Messaging.Rcon,Client,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Rcon\Client.cs,ProcessPacket,The following statement contains a magic number: packetObj.Words.Length < 3
Magic Number,ServiceStack.Messaging.Rcon,PacketCodec,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Rcon\PacketCodec.cs,DecodePacket,The following statement contains a magic number: idNumber = header[2];
Magic Number,ServiceStack.Messaging.Rcon,PacketCodec,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Rcon\PacketCodec.cs,DecodePacket,The following statement contains a magic number: header[2] > 0
Magic Number,ServiceStack.Messaging.Rcon,PacketCodec,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Rcon\PacketCodec.cs,DecodeWords,The following statement contains a magic number: var wordCount = BitConverter.ToUInt32(packet' 8);
Magic Number,ServiceStack.Messaging.Rcon,PacketCodec,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Rcon\PacketCodec.cs,DecodeWords,The following statement contains a magic number: int offset = 12;
Magic Number,ServiceStack.Messaging.Rcon,PacketCodec,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Rcon\PacketCodec.cs,DecodeWords,The following statement contains a magic number: word[j] = packet[offset + 4 + j];
Magic Number,ServiceStack.Messaging.Rcon,PacketCodec,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Rcon\PacketCodec.cs,DecodeWords,The following statement contains a magic number: offset += 5 + wordLen;
Magic Number,ServiceStack.Messaging.Rcon,PacketCodec,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Rcon\PacketCodec.cs,EncodePacket,The following statement contains a magic number: var encodedPacketSize = BitConverter.GetBytes((uint)(encodedHeader.Length + encodedWordCount.Length + encodedWords.Length + 4));
Magic Number,ServiceStack.Messaging.Rcon,Server,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Rcon\Server.cs,Start,The following statement contains a magic number: _listener.Listen(60);
Magic Number,ServiceStack.Messaging.Rcon,Server,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Rcon\Server.cs,ProcessReceive,The following statement contains a magic number: userToken.MessageLength = BitConverter.ToUInt32(userToken.Header' 4);
Magic Number,ServiceStack.Messaging.Redis,MessageHandlerWorker,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Redis\MessageHandlerWorker.cs,Stop,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,ServiceStack.Messaging.Redis,MessageHandlerWorker,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Redis\MessageHandlerWorker.cs,KillBgThreadIfExists,The following statement contains a magic number: !bgThread.Join(TimeSpan.FromSeconds(3))
Magic Number,ServiceStack.Messaging.Redis,MessageHandlerWorker,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Redis\MessageHandlerWorker.cs,KillBgThreadIfExists,The following statement contains a magic number: !bgThread.Join(500)
Magic Number,ServiceStack.Messaging.Redis,RedisMqServer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\Messaging\Redis\RedisMqServer.cs,RedisMqServer,The following statement contains a magic number: this.WaitBeforeNextRestart = TimeSpan.FromMilliseconds(2000);
Missing Default,ServiceStack,RedisServerEvents,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\RedisServerEvents.cs,OnMessage,The following switch statement is missing a default case: switch (cmd)              {                  case "notify":                      var notify = tokens[1];                      var who = tokens.Length > 2 ? tokens[2] : null;                      var body = parts[1].SplitOnFirst(' ');                      var selUri = body[0];                      var selParts = selUri.SplitOnFirst('@');                      var selector = selParts[0];                      var channel = selParts.Length > 1 ? selParts[1] : null;                      var msg = body.Length > 1 ? body[1] : null;                        switch (notify)                      {                          case "all":                              local.NotifyAll(selector' msg);                              break;                          case "channel":                              local.NotifyChannel(who' selector' msg);                              break;                          case "subscription":                              local.NotifySubscription(who' selector' msg' channel);                              break;                          case "userid":                              local.NotifyUserId(who' selector' msg' channel);                              break;                          case "username":                              local.NotifyUserName(who' selector' msg' channel);                              break;                          case "session":                              local.NotifySession(who' selector' msg' channel);                              break;                      }                      break;                    case "subscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.SubscribeToChannels(id' channelsList.Split('''));                      }                      break;                    case "unsubscribe":                      if (tokens[1] == "id" && parts.Length == 2)                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          var channelsList = parts[1].FromJson<string>();                          local.UnsubscribeFromChannels(id' channelsList.Split('''));                      }                      break;                    case "unregister":                      var unregister = tokens[1];                      if (unregister == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.UnRegister(id);                      }                      break;                    case "pulse":                      var pulse = tokens[1];                      if (pulse == "id")                      {                          var id = tokens.Length > 2 ? tokens[2] : null;                          local.Pulse(id);                      }                      break;              }
Missing Default,ServiceStack,RedisServerEvents,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Server\RedisServerEvents.cs,OnMessage,The following switch statement is missing a default case: switch (notify)                      {                          case "all":                              local.NotifyAll(selector' msg);                              break;                          case "channel":                              local.NotifyChannel(who' selector' msg);                              break;                          case "subscription":                              local.NotifySubscription(who' selector' msg' channel);                              break;                          case "userid":                              local.NotifyUserId(who' selector' msg' channel);                              break;                          case "username":                              local.NotifyUserName(who' selector' msg' channel);                              break;                          case "session":                              local.NotifySession(who' selector' msg' channel);                              break;                      }
