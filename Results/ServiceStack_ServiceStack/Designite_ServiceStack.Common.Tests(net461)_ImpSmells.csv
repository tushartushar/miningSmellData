Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ServiceStack.Common.Tests,PerfTestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\PerfTestBase.cs,CompareRuns,The method has 5 parameters. Parameters: iterations' run1Name' run1Action' run2Name' run2Action
Long Parameter List,ServiceStack.Common.Tests,TestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\TestBase.cs,ExecutePath,The method has 5 parameters. Parameters: httpMethod' pathInfo' queryString' formData' requestBody
Long Parameter List,ServiceStack.Common.Tests,TestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\TestBase.cs,ExecutePath,The method has 5 parameters. Parameters: httpMethod' pathInfo' queryString' formData' requestBody
Long Parameter List,ServiceStack.Common.Tests,TestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\TestBase.cs,GetRequest,The method has 5 parameters. Parameters: httpMethod' pathInfo' queryString' formData' requestBody
Long Parameter List,ServiceStack.Common.Tests,DirectServiceClient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\TestBase.cs,PostFileWithRequest,The method has 5 parameters. Parameters: relativeOrAbsoluteUrl' fileToUpload' fileName' request' fieldName
Long Parameter List,ServiceStack.Common.Tests.OAuth,MockAuthHttpGateway,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\OAuth\MockAuthHttpGateway.cs,DownloadTwitterUserInfo,The method has 5 parameters. Parameters: consumerKey' consumerSecret' accessToken' accessTokenSecret' twitterUserId
Long Parameter List,ServiceStack.Common.Tests.OAuth,MockAuthHttpGateway,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\OAuth\MockAuthHttpGateway.cs,VerifyTwitterAccessToken,The method has 6 parameters. Parameters: consumerKey' consumerSecret' accessToken' accessTokenSecret' userId' email
Long Statement,ServiceStack.Common.Tests,MessagingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\MessagingTests.cs,Can_deserialize_concrete_type_into_IOAuthSession,The length of the statement  "            var json = "{\"__type\":\"ServiceStack.Common.Tests.TestUserSession' ServiceStack.Common.Tests\"'\"ReferrerUrl\":\"http://localhost:4629/oauth\"'\"Id\":\"0412cc4654484111b2e7162a24a83753\"'\"RequestToken\":\"dw4U1RUBr8r5Bx1oBZfdmNiocsMrAtBmSoFHYCZrr4\"'\"RequestTokenSecret\":\"HNvCiD1a61CrutnxZoiJXQlLKNN1GAtWn7pRuafYN0\"'\"CreatedAt\":\"\\/Date(1320221243138+0000)\\/\"'\"LastModified\":\"\\/Date(1320221243138+0000)\\/\"'\"Items\":{}}"; " is 439.
Long Statement,ServiceStack.Common.Tests,NativeTypesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\NativeTypesTests.cs,AnnotatedDtoTypes_ApiMemberNonDefaultProperties_AreSorted,The length of the statement  "            StringAssert.Contains("[ApiMember(Description=\"ShouldBeFirstInGeneratedCode\"' IsRequired=true' Name=\"ShouldBeLastInGeneratedCode\")]"' stringResult); " is 152.
Long Statement,ServiceStack.Common.Tests,PerfTestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\PerfTestBase.cs,RunAction,The length of the statement  "            Log("{0} took {1}ms ({2} ticks)' avg: {3} ticks"' actionName' timeSpan.TotalMilliseconds' timeSpan.Ticks' (timeSpan.Ticks / iterations)); " is 137.
Long Statement,ServiceStack.Common.Tests,QueryStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\QueryStringSerializerTests.cs,Can_deserialize_TestRequest_QueryStringSerializer_output,The length of the statement  "                var httpReq = new MockHttpRequest("service"' "GET"' "application/json"' "service"' queryString' new MemoryStream()' new NameValueCollection()); " is 143.
Long Statement,ServiceStack.Common.Tests,QueryStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\QueryStringSerializerTests.cs,QueryStringSerializer_TestRequest_output,The length of the statement  "            var testRequest = new TestRequest { ListOfA = new List<A> { new A { ListOfB = new List<B> { new B { Property = "prop1" }' new B { Property = "prop2" } } } } }; " is 159.
Long Statement,ServiceStack.Common.Tests,ReflectionUtilTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\ReflectionUtilTests.cs,Can_PopulateTheVortex,The length of the statement  "            Console.WriteLine("Mindtwister = " + ServiceStack.Text.XmlSerializer.SerializeToString(obj)); // TypeSerializer and JsonSerializer blow up on this structure with a Null Reference Exception! " is 189.
Long Statement,ServiceStack.Common.Tests,ReflectionUtilTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\ReflectionUtilTests.cs,Can_PopulateObjectWithNonZeroEnumArray,The length of the statement  "            Assert.That(Enum.IsDefined(typeof(TestClassType)' obj.Data[0])' "Values in created array should be valid for the enum"); " is 120.
Long Statement,ServiceStack.Common.Tests,ReflectionUtilTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\ReflectionUtilTests.cs,PopulateObject_UsesDefinedEnum_OnNestedTypes,The length of the statement  "            var requestObj = (Dictionary<string' TestClass2>)AutoMappingUtils.CreateDefaultValue(typeof(Dictionary<string' TestClass2>)' new Dictionary<Type' int>()); " is 154.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Can_parse_commands,The length of the statement  "            Assert.That("COUNT(DISTINCT Name)".ParseCommands().Map(x => x.ToDebugString())' Is.EquivalentTo(new[] { "[COUNT:DISTINCT Name]" })); " is 132.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Can_parse_commands,The length of the statement  "            Assert.That("COUNT(\"Name\")".ParseCommands().Map(x => x.ToDebugString())' Is.EquivalentTo(new[] { "[COUNT:\"Name\"]" })); " is 122.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Can_parse_commands,The length of the statement  "            Assert.That("COUNT('N'a(m\"e')".ParseCommands().Map(x => x.ToDebugString())' Is.EquivalentTo(new[] { "[COUNT:'N'a(m\"e']" })); " is 126.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Can_parse_commands,The length of the statement  "            Assert.That("COUNT(*''foo''1)".ParseCommands().Map(x => x.ToDebugString())' Is.EquivalentTo(new[] { "[COUNT:*|'foo'|1]" })); " is 124.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Can_parse_commands,The length of the statement  "            Assert.That("COUNT( * ' 'foo' ' 1 )".ParseCommands().Map(x => x.ToDebugString())' Is.EquivalentTo(new[] { "[COUNT:*|'foo'|1]" })); " is 130.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Can_parse_commands,The length of the statement  "            Assert.That("Count(*'\"'\")' Min(Age'')')' Max(Age'1)' Sum(Id'Foo'2.0)".ParseCommands().Map(x => x.ToDebugString())' Is.EquivalentTo( " is 133.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Can_parse_commands,The length of the statement  "            Assert.That("Field1'Field2".ParseCommands().Map(x => x.ToDebugString())' Is.EquivalentTo(new[] { "[Field1:]"' "[Field2:]" })); " is 126.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Can_parse_commands_with_Aliases,The length of the statement  "            Assert.That("COUNT(*) Count".ParseCommands().Map(x => x.ToDebugString())' Is.EquivalentTo(new[] { "[COUNT:*] Count" })); " is 120.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Can_parse_commands_with_Aliases,The length of the statement  "            Assert.That("COUNT(DISTINCT LivingStatus) as UniqueStatus".ParseCommands().Map(x => x.ToDebugString())' Is.EquivalentTo(new[] { "[COUNT:DISTINCT LivingStatus] as UniqueStatus" })); " is 180.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Can_parse_commands_with_Aliases,The length of the statement  "            Assert.That("MIN(Age) MinAge".ParseCommands().Map(x => x.ToDebugString())' Is.EquivalentTo(new[] { "[MIN:Age] MinAge" })); " is 122.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Can_parse_commands_with_Aliases,The length of the statement  "            Assert.That("Count(*) count' Min(Age) min' Max(Age) max' Sum(Id) sum".ParseCommands().Map(x => x.ToDebugString())' Is.EquivalentTo(new[] { " is 138.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Does_parse_complex_arguments,The length of the statement  "            Assert.That(" add ( 1' add(2'3) ) ".ParseCommands().Map(x => x.ToDebugString())' Is.EqualTo(new[]{ "[add:1|add(2'3)]" })); " is 122.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Does_parse_complex_arguments,The length of the statement  "            Assert.That("cat('1''cat(\"2\"''3'))".ParseCommands().Map(x => x.ToDebugString())' Is.EqualTo(new[]{ "[cat:'1'|cat(\"2\"''3')]" })); " is 132.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Does_parse_complex_arguments,The length of the statement  "            Assert.That(" add ( 1' add(add(2'3)'4) ) ".ParseCommands().Map(x => x.ToDebugString())' Is.EqualTo(new[]{ "[add:1|add(add(2'3)'4)]" })); " is 136.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Does_preserve_js_literal_string,The length of the statement  "            Assert.That("li({ id:'id-{name}'' className:'cls'})".ParseCommands().Map(x => x.ToDebugString())' Is.EqualTo(new[]{ "[li:{ id:'id-{name}'' className:'cls'}]" })); " is 162.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Does_preserve_ternary_expression,The length of the statement  "            Assert.That("filter( true ? 'Y' : 'N' )".ParseCommands().Map(x => x.ToDebugString())' Is.EqualTo(new[]{ "[filter:true ? 'Y' : 'N']" })); " is 136.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Does_parse_binding_expressions,The length of the statement  "            Assert.That("var.prop[\"key\"]".ParseCommands().Map(x => x.ToDebugString())' Is.EqualTo(new[]{ "[var.prop[\"key\"]:]" })); " is 122.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Does_parse_binding_expressions,The length of the statement  "            Assert.That("fn(var.prop.p2.p3)".ParseCommands().Map(x => x.ToDebugString())' Is.EqualTo(new[]{ "[fn:var.prop.p2.p3]" })); " is 122.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Does_parse_binding_expressions,The length of the statement  "            Assert.That("fn(var.prop[key])".ParseCommands().Map(x => x.ToDebugString())' Is.EqualTo(new[]{ "[fn:var.prop[key]]" })); " is 120.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Does_parse_binding_expressions,The length of the statement  "            Assert.That("fn(var.prop['key'])".ParseCommands().Map(x => x.ToDebugString())' Is.EqualTo(new[]{ "[fn:var.prop['key']]" })); " is 124.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Does_parse_binding_expressions,The length of the statement  "            Assert.That("fn(var.prop[\"key\"])".ParseCommands().Map(x => x.ToDebugString())' Is.EqualTo(new[]{ "[fn:var.prop[\"key\"]]" })); " is 128.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Does_parse_binding_expressions,The length of the statement  "            Assert.That("fn(var.prop'var.prop)".ParseCommands().Map(x => x.ToDebugString())' Is.EqualTo(new[]{ "[fn:var.prop|var.prop]" })); " is 128.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Does_parse_binding_expressions,The length of the statement  "            Assert.That("fn(var.prop.p2.p3'var.prop.p2.p3)".ParseCommands().Map(x => x.ToDebugString())' Is.EqualTo(new[]{ "[fn:var.prop.p2.p3|var.prop.p2.p3]" })); " is 152.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Does_parse_binding_expressions,The length of the statement  "            Assert.That("fn(var.prop[key]'var.prop[key])".ParseCommands().Map(x => x.ToDebugString())' Is.EqualTo(new[]{ "[fn:var.prop[key]|var.prop[key]]" })); " is 148.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Does_parse_binding_expressions,The length of the statement  "            Assert.That("fn(var.prop['key']'var.prop['key'])".ParseCommands().Map(x => x.ToDebugString())' Is.EqualTo(new[]{ "[fn:var.prop['key']|var.prop['key']]" })); " is 156.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Does_parse_binding_expressions,The length of the statement  "            Assert.That("fn(var.prop[\"key\"]'var.prop[\"key\"])".ParseCommands().Map(x => x.ToDebugString())' Is.EqualTo(new[]{ "[fn:var.prop[\"key\"]|var.prop[\"key\"]]" })); " is 164.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Can_parse_SELECT_Expression_with_concatenation,The length of the statement  "            var sql = "\"UserName\"' \"Email\"' \"FirstName\" AS \"GivenName\"' \"LastName\" AS \"Surname\"' \"FirstName\" || @1 || \"LastName\" AS FullName"; " is 146.
Long Statement,ServiceStack.Common.Tests,StringExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringExtensionTests.cs,Can_parse_SELECT_Expression_with_nested_functions,The length of the statement  "            var sql = "CONCAT(CONCAT(\"FirstName\"' @1)' \"LastName\") AS FullName' \"FirstName\" AS \"GivenName\"' \"LastName\" AS \"Surname\"' \"Email\"' \"UserName\""; " is 158.
Long Statement,ServiceStack.Common.Tests,StringUtilsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringUtilsTests.cs,Does_replace_outside_of_quotes,The length of the statement  "            Assert.That("{it} `'{it}' {it}` {it}".ReplaceOutsideOfQuotes("{"' "{{"' "}"' "}}")' Is.EqualTo("{{it}} `'{it}' {it}` {{it}}")); " is 127.
Long Statement,ServiceStack.Common.Tests,StringUtilsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringUtilsTests.cs,Does_replace_outside_of_quotes,The length of the statement  "            Assert.That("{ '{0:00}' | fmt(it) }\n".ReplaceOutsideOfQuotes("{"' "{{"' "}"' "}}")' Is.EqualTo("{{ '{0:00}' | fmt(it) }}\n")); " is 127.
Long Statement,ServiceStack.Common.Tests,StringUtilsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringUtilsTests.cs,HtmlStrip_fixes_actual_production_example,The length of the statement  "            var encoded = @"Du tr&auml;umst von node.js und willst mithelfen einen Request in unter 50ms auszuliefern? PHP ist Deine Muttersprache und Dein Verstand schreit nach immer neuen Herausforderungen? Dann passt du zu uns. Bringe Deine Kompetenzen in ein Unternehmen ein' das Dir neben hervorragenden Arbeitsbedingungen wirklich etwas zu bieten hat: Perspektiven! " is 359.
Long Statement,ServiceStack.Common.Tests,StringUtilsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringUtilsTests.cs,HtmlStrip_fixes_actual_production_example,The length of the statement  "Werde Teil unseres Teams und gestalte aktiv die technische Zukunft der weltweit gr&ouml;&szlig;ten Online Hotelsuche mit. Arbeite mit neuesten Technologien in einem global aufgestellten Unternehmen. Nutze die Freiheit Bestehendes in Frage zu stellen' Deinen Horizont zu erweitern und Neues zu entwickeln."; " is 306.
Long Statement,ServiceStack.Common.Tests,StringUtilsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringUtilsTests.cs,HtmlStrip_fixes_actual_production_example,The length of the statement  "            var expected = @"Du träumst von node.js und willst mithelfen einen Request in unter 50ms auszuliefern? PHP ist Deine Muttersprache und Dein Verstand schreit nach immer neuen Herausforderungen? Dann passt du zu uns. Bringe Deine Kompetenzen in ein Unternehmen ein' das Dir neben hervorragenden Arbeitsbedingungen wirklich etwas zu bieten hat: Perspektiven! " is 355.
Long Statement,ServiceStack.Common.Tests,StringUtilsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\StringUtilsTests.cs,HtmlStrip_fixes_actual_production_example,The length of the statement  "Werde Teil unseres Teams und gestalte aktiv die technische Zukunft der weltweit größten Online Hotelsuche mit. Arbeite mit neuesten Technologien in einem global aufgestellten Unternehmen. Nutze die Freiheit Bestehendes in Frage zu stellen' Deinen Horizont zu erweitern und Neues zu entwickeln."; " is 295.
Long Statement,ServiceStack.Common.Tests,DirectServiceClient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\TestBase.cs,DeleteAsync,The length of the statement  "                    var response = parent.ExecutePath<TResponse>(HttpMethods.Delete' new UrlParts(relativeOrAbsoluteUrl)' default(TResponse)); " is 122.
Long Statement,ServiceStack.Common.Tests.Expressions,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Expressions\ExpressionTests.cs,MethodCallExpression_to_call_a_static_method,The length of the statement  "            //Expression<Func<int' int>> callAddMethodExpr = Expression.Lambda<Func<int' int>>(Expression.Call(null' (MethodInfo) methodof(ExpressionTests.StaticAdd)'  " is 154.
Long Statement,ServiceStack.Common.Tests.Expressions,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Expressions\ExpressionTests.cs,Dynamic_MethodCallExpression_to_call_a_static_method,The length of the statement  "            //MethodCallExpression.Call(Expression.Call(GetType().GetMethod("StaticAdd"' BindingFlags.Static | BindingFlags.Public)); " is 121.
Long Statement,ServiceStack.Common.Tests.FluentValidation,ErrorCodeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\FluentValidation\ErrorCodeTests.cs,LengthContainsPlaceholders,The length of the statement  "            Assert.IsTrue(Result.Errors.Where(f => f.ErrorCode == ValidationErrors.Length).Any(f => f.FormattedMessagePlaceholderValues.ContainsKey("MinLength"))); " is 151.
Long Statement,ServiceStack.Common.Tests.Models,AssetUpdate,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\DdnContentIngest.cs,BuildExternalRef,The length of the statement  "                        return String.Format("{0}/{1}/{2}/{3}/{4}/{5}"' this.AssetType' this.MasterSha256Checksum' externalOwnerRef' this.FileExtension.ToLower()' this.BitRateKbps ?? 0' this.DurationMs ?? 0).ToLower(); " is 194.
Long Statement,ServiceStack.Common.Tests.Models,AssetUpdate,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\DdnContentIngest.cs,BuildExternalRef,The length of the statement  "                        var message = String.Format("AssetType not supported: {0}-{1}-{2}"' AssetType' FileExtension.ToLower()' MasterSha256Checksum); " is 126.
Long Statement,ServiceStack.Common.Tests.Models,AssetTypeExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\DdnContentIngest.cs,IsMasterImage,The length of the statement  "            return assetType == AssetType.MasterCoverArt || assetType == AssetType.MasterArtistArt || assetType == AssetType.MasterLabelArt; " is 128.
Long Statement,ServiceStack.Common.Tests.Models,AssetTypeExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\DdnContentIngest.cs,IsResizedImage,The length of the statement  "            return assetType == AssetType.ResizedCoverArt || assetType == AssetType.ResizedArtistArt || assetType == AssetType.ResizedLabelArt; " is 131.
Long Statement,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfNullableTypes.cs,AssertIsEqual,The length of the statement  "                Assert.That(actual.NDateTime.Value.ToUniversalTime().RoundToSecond()' Is.EqualTo(expected.NDateTime.Value.ToUniversalTime().RoundToSecond())); " is 142.
Long Statement,ServiceStack.Common.Tests.Models,Movie,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\Movie.cs,Equals,The length of the statement  "            return Equals(other.Id' Id) && Equals(other.Title' Title) && other.Rating == Rating && Equals(other.Director' Director) && other.ReleaseDate.Equals(ReleaseDate) && Equals(other.TagLine' TagLine) && Genres.EquivalentTo(other.Genres); " is 232.
Long Statement,ServiceStack.Common.Tests.OAuth,OrmLiteUserAuthTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\OAuth\OrmLiteUserAuthTests.cs,GetUserAuth,The length of the statement  "            var jsv = "{Id:0'UserName:UserName'Email:as@if.com'PrimaryEmail:as@if.com'FirstName:FirstName'LastName:LastName'DisplayName:DisplayName'Salt:WMQi/g=='PasswordHash:oGdE40yKOprIgbXQzEMSYZe3vRCRlKGuqX2i045vx50='Roles:[]'Permissions:[]'CreatedDate:2012-03-20T07:53:48.8720739Z'ModifiedDate:2012-03-20T07:53:48.8720739Z}"; " is 317.
Long Statement,ServiceStack.Common.Tests.Perf,AdhocFastPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\AdhocFastPerfTests.cs,Compare_medium_ConvertBytes,The length of the statement  "            var byteArrayValue = ToByteArrayis 43481.
Long Statement,ServiceStack.Common.Tests.Perf,DateTimePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\DateTimePerf.cs,Compare_DateTime_Serializtion,The length of the statement  "                "XmlConvert.ToString(now' XmlDateTimeSerializationMode.Utc)"' () => XmlConvert.ToString(now' XmlDateTimeSerializationMode.Utc) " is 126.
Long Statement,ServiceStack.Common.Tests.Perf,DateTimePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\DateTimePerf.cs,Compare_DateTime_DeSerializtion,The length of the statement  "                "DateTime.ParseExact(utcNow' DateTimeFormat' null)"' () => DateTime.ParseExact(nowXmlExact' DateTimeSerializer.XsdDateTimeFormat' null)' " is 136.
Long Statement,ServiceStack.Common.Tests.Perf,DateTimePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\DateTimePerf.cs,Compare_Serialization,The length of the statement  "                "FromDateTimeString(ToDateTimeString(now))"' () => DateTimeSerializer.ParseDateTime(DateTimeSerializer.ToDateTimeString(now))' " is 126.
Long Statement,ServiceStack.Common.Tests.Perf,DateTimePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\DateTimePerf.cs,Compare_Serialization,The length of the statement  "                "FromDateOrDateTimeString(ToDateOrDateTimeString(now))"' () => DateTimeSerializer.ParseShortestXsdDateTime(DateTimeSerializer.ToShortestXsdDateTimeString(now)) " is 159.
Long Statement,ServiceStack.Common.Tests.Perf,DateTimePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\DateTimePerf.cs,Compare_Serialization,The length of the statement  "            Assert.That(now' Is.EqualTo(DateTimeSerializer.ParseShortestXsdDateTime(DateTimeSerializer.ToShortestXsdDateTimeString(now)))); " is 127.
Long Statement,ServiceStack.Common.Tests.Perf,DateTimePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\DateTimePerf.cs,Compare_Serialization,The length of the statement  "                "FromDateTimeString(ToDateTimeString(nowWithoutTime))"' () => DateTimeSerializer.ParseDateTime(DateTimeSerializer.ToDateTimeString(nowWithoutTime))' " is 148.
Long Statement,ServiceStack.Common.Tests.Perf,DateTimePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\DateTimePerf.cs,Compare_Serialization,The length of the statement  "                "FromDateOrDateTimeString(ToDateOrDateTimeString(nowWithoutTime))"' () => DateTimeSerializer.ParseShortestXsdDateTime(DateTimeSerializer.ToShortestXsdDateTimeString(nowWithoutTime)) " is 181.
Long Statement,ServiceStack.Common.Tests.Perf,DateTimePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\DateTimePerf.cs,Compare_Serialization,The length of the statement  "            Assert.That(nowWithoutTime' Is.EqualTo(DateTimeSerializer.ParseDateTime(DateTimeSerializer.ToDateTimeString(nowWithoutTime)))); " is 127.
Long Statement,ServiceStack.Common.Tests.Perf,DateTimePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\DateTimePerf.cs,Compare_Serialization,The length of the statement  "            Assert.That(nowWithoutTime' Is.EqualTo(DateTimeSerializer.ParseShortestXsdDateTime(DateTimeSerializer.ToShortestXsdDateTimeString(nowWithoutTime)))); " is 149.
Long Statement,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_GuidArray,The length of the statement  "            const string stringValues = "[8F403A5E-CDFC-4C6F-B0EB-C055C1C8BA60'5673BAC7-BAC5-4B3F-9B69-4180E6227508'B0CA730F-14C9-4D00-AC7F-07E7DE8D566E'4E26AF94-6B13-4F89-B192-36C6ABE73DAE'08491B16-2270-4DF9-8AEE-A8861A791C50]"; " is 217.
Long Statement,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_GuidList,The length of the statement  "            const string stringValues = "[8F403A5E-CDFC-4C6F-B0EB-C055C1C8BA60'5673BAC7-BAC5-4B3F-9B69-4180E6227508'B0CA730F-14C9-4D00-AC7F-07E7DE8D566E'4E26AF94-6B13-4F89-B192-36C6ABE73DAE'08491B16-2270-4DF9-8AEE-A8861A791C50]"; " is 217.
Long Statement,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_IntHashSet,The length of the statement  "                "new HashSet<int>(.Split(''').ConvertAll(x => int.Parse(x))"' () => new HashSet<int>(SplitList(stringValues).Map(int.Parse))' " is 125.
Long Statement,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_DoubleHashSet,The length of the statement  "                "new HashSet<double>(.ConvertAll(x => double.Parse(x)))"' () => new HashSet<double>(SplitList(stringValues).Map(double.Parse))' " is 127.
Long Statement,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_StringStringMap,The length of the statement  "                "mapValues.Split(''').ConvertAll"' () => SplitList(mapValues).Map(x => x.Split(':')).ForEach(y => map[y[0].FromCsvField()] = y[1].FromCsvField())' " is 146.
Long Statement,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_StringStringMap,The length of the statement  "                "SCU.Parse<Dictionary<string' string>>"' () => TypeSerializer.DeserializeFromString<Dictionary<string' string>>(mapValues) " is 122.
Long Statement,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_StringIntMap,The length of the statement  "                "mapValues.Split(''').ConvertAll"' () => SplitList(mapValues).Map(x => x.Split(':')).ForEach(y => map[y[0].FromCsvField()] = int.Parse(y[1]))' " is 142.
Long Statement,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_StringInt_SortedDictionary,The length of the statement  "                "mapValues.Split(''').ConvertAll"' () => SplitList(mapValues).Map(x => x.Split(':')).ForEach(y => map[y[0].FromCsvField()] = int.Parse(y[1]))' " is 142.
Long Statement,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_StringInt_SortedDictionary,The length of the statement  "                "SCU.Parse<Dictionary<string' int>>"' () => TypeSerializer.DeserializeFromString<SortedDictionary<string' int>>(mapValues) " is 122.
Long Statement,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The length of the statement  "            var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' }; " is 164.
Long Statement,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The length of the statement  "            var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' }; " is 164.
Long Statement,ServiceStack.Common.Tests.ServiceClient.Web,UrlExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\ServiceClient.Web\UrlExtensionsTests.cs,Can_expand_generic_List_and_Dictionary,The length of the statement  "            //System.Collections.Generic.Dictionary`2[[System.String' mscorlib' Version=4.0.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089]'[Namespace.Poco' Assembly.Name' Version=1.0.0.0' Culture=neutral' PublicKeyToken=null]] " is 222.
Virtual Method Call from Constructor,ServiceStack.Common.Tests,TestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\TestBase.cs,TestBase,The constructor "TestBase" calls a virtual method "Init".
Empty Catch Block,ServiceStack.Common.Tests.OAuth,OrmLiteSqlServerAuthUserSessionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\OAuth\AuthUserSessionTests.cs,CreateAuthRepo,The method has an empty catch block.
Empty Catch Block,ServiceStack.Common.Tests.OAuth,AuthUserSessionTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\OAuth\AuthUserSessionTestsBase.cs,InitTest,The method has an empty catch block.
Magic Number,ServiceStack.Common.Tests,ActionExecTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\ActionExecTests.cs,Can_run_blocking_options_in_parallel,The following statement contains a magic number: Action incrAndBlock = () => { Interlocked.Increment(ref i); Thread.Sleep(100); };
Magic Number,ServiceStack.Common.Tests,ActionExecTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\ActionExecTests.cs,Can_run_blocking_options_in_parallel,The following statement contains a magic number: actions.ExecAllAndWait(timeout:TimeSpan.FromSeconds(30));
Magic Number,ServiceStack.Common.Tests,ActionExecTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\ActionExecTests.cs,Can_run_blocking_options_in_parallel,The following statement contains a magic number: Assert.That(sw.ElapsedMilliseconds' Is.LessThan(400));
Magic Number,ServiceStack.Common.Tests,AttributeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\AttributeTests.cs,Normal_attribute_returns_all_in_AllAttributes,The following statement contains a magic number: Assert.That(o.GetType().AllAttributes<NormalAttribute>().Length' Is.EqualTo(2));
Magic Number,ServiceStack.Common.Tests,AttributeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\AttributeTests.cs,Normal_attribute_returns_all_in_AllAttributes,The following statement contains a magic number: Assert.That(o.GetType().AllAttributes<INormalAttribute>().Length' Is.EqualTo(2));
Magic Number,ServiceStack.Common.Tests,AttributeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\AttributeTests.cs,AttributeBase_attribute_returns_all_in_AllAttributes,The following statement contains a magic number: Assert.That(o.GetType().AllAttributes<BaseAttribute>().Length' Is.EqualTo(2));
Magic Number,ServiceStack.Common.Tests,AttributeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\AttributeTests.cs,AttributeBase_attribute_returns_all_in_AllAttributes,The following statement contains a magic number: Assert.That(o.GetType().AllAttributes<IBaseAttribute>().Length' Is.EqualTo(2));
Magic Number,ServiceStack.Common.Tests,AttributeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\AttributeTests.cs,Can_add_attributes_at_runtime_to_BaseAttribute,The following statement contains a magic number: Assert.That(o.GetType().AllAttributes<BaseAttribute>().Length' Is.EqualTo(3));
Magic Number,ServiceStack.Common.Tests,AttributeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\AttributeTests.cs,Can_add_attributes_at_runtime_to_BaseAttribute,The following statement contains a magic number: Assert.That(o.GetType().AllAttributes<IBaseAttribute>().Length' Is.EqualTo(3));
Magic Number,ServiceStack.Common.Tests,DictionarySettingsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Configuration\AppSettingsTests.cs,Does_work_with_ParseKeyValueText,The following statement contains a magic number: Assert.That(appSettings.Get("IntKey"' defaultValue: 1)' Is.EqualTo(42));
Magic Number,ServiceStack.Common.Tests,DictionarySettingsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Configuration\AppSettingsTests.cs,Does_work_with_ParseKeyValueText,The following statement contains a magic number: Assert.That(list' Has.Count.EqualTo(5));
Magic Number,ServiceStack.Common.Tests,DictionarySettingsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Configuration\AppSettingsTests.cs,Does_work_with_ParseKeyValueText,The following statement contains a magic number: Assert.That(map' Has.Count.EqualTo(5));
Magic Number,ServiceStack.Common.Tests,DictionarySettingsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Configuration\AppSettingsTests.cs,Does_work_with_ParseKeyValueText,The following statement contains a magic number: Assert.That(value.SomeOtherSetting' Is.EqualTo(12));
Magic Number,ServiceStack.Common.Tests,AppSettingsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Configuration\AppSettingsTests.cs,Get_Casts_To_Specified_Type,The following statement contains a magic number: Assert.That(value' Is.EqualTo(42));
Magic Number,ServiceStack.Common.Tests,AppSettingsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Configuration\AppSettingsTests.cs,Can_Get_List_From_Setting_using_generics,The following statement contains a magic number: Assert.That(value' Has.Count.EqualTo(5));
Magic Number,ServiceStack.Common.Tests,AppSettingsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Configuration\AppSettingsTests.cs,GetList_Parses_List_From_Setting,The following statement contains a magic number: Assert.That(value' Has.Count.EqualTo(5));
Magic Number,ServiceStack.Common.Tests,AppSettingsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Configuration\AppSettingsTests.cs,GetDictionary_Parses_Dictionary_From_Setting,The following statement contains a magic number: Assert.That(value' Has.Count.EqualTo(5));
Magic Number,ServiceStack.Common.Tests,AppSettingsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Configuration\AppSettingsTests.cs,GetKeyValuePairs_Parses_Dictionary_From_Setting,The following statement contains a magic number: Assert.That(kvps' Has.Count.EqualTo(5));
Magic Number,ServiceStack.Common.Tests,AppSettingsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Configuration\AppSettingsTests.cs,Get_Returns_ObjectNoLineFeed,The following statement contains a magic number: Assert.That(value.SomeOtherSetting' Is.EqualTo(12));
Magic Number,ServiceStack.Common.Tests,AppSettingsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Configuration\AppSettingsTests.cs,Get_Returns_ObjectNoLineFeed,The following statement contains a magic number: Assert.That(value.SomeOtherSetting' Is.EqualTo(12));
Magic Number,ServiceStack.Common.Tests,AppSettingsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Configuration\AppSettingsTests.cs,Get_Returns_ObjectWithLineFeed,The following statement contains a magic number: Assert.That(value.SomeOtherSetting' Is.EqualTo(12));
Magic Number,ServiceStack.Common.Tests,AppSettingsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Configuration\AppSettingsTests.cs,Get_Returns_ObjectWithLineFeed,The following statement contains a magic number: Assert.That(value.SomeOtherSetting' Is.EqualTo(12));
Magic Number,ServiceStack.Common.Tests,AppSettingsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Configuration\AppSettingsTests.cs,Can_write_to_AppSettings,The following statement contains a magic number: Assert.That(value' Is.EqualTo(42));
Magic Number,ServiceStack.Common.Tests,AppSettingsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Configuration\AppSettingsTests.cs,Can_write_to_AppSettings,The following statement contains a magic number: appSettings.Set("IntKey"' 99);
Magic Number,ServiceStack.Common.Tests,AppSettingsTest,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Configuration\AppSettingsTests.cs,Can_write_to_AppSettings,The following statement contains a magic number: Assert.That(value' Is.EqualTo(99));
Magic Number,ServiceStack.Common.Tests,ConfigUtilsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Configuration\ConfigUtilsTests.cs,Can_parse_AppConfig_AppSettings_with_XmlReader,The following statement contains a magic number: Assert.That(map.Count' Is.EqualTo(11));
Magic Number,ServiceStack.Common.Tests,EnumerableExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\EnumerableExtensionsTests.cs,Can_Skip,The following statement contains a magic number: Assert.That(EnumerableUtils.Skip(IntValues'1)' Is.EqualTo(new[]{ 2' 3 }));
Magic Number,ServiceStack.Common.Tests,EnumerableExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\EnumerableExtensionsTests.cs,Can_Skip,The following statement contains a magic number: Assert.That(EnumerableUtils.Skip(IntValues'1)' Is.EqualTo(new[]{ 2' 3 }));
Magic Number,ServiceStack.Common.Tests,EnumerableExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\EnumerableExtensionsTests.cs,Can_Take,The following statement contains a magic number: Assert.That(EnumerableUtils.Take(IntValues' 2)' Is.EqualTo(new[]{ 1' 2 }));
Magic Number,ServiceStack.Common.Tests,EnumerableExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\EnumerableExtensionsTests.cs,Can_Take,The following statement contains a magic number: Assert.That(EnumerableUtils.Take(IntValues' 2)' Is.EqualTo(new[]{ 1' 2 }));
Magic Number,ServiceStack.Common.Tests,EnumerableExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\EnumerableExtensionsTests.cs,EquivalentTo_Dictionary_Ordered,The following statement contains a magic number: var a = new Dictionary<string' int>              {                  {"A"'1}'                  {"B"'2}'                  {"C"'3}'              };
Magic Number,ServiceStack.Common.Tests,EnumerableExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\EnumerableExtensionsTests.cs,EquivalentTo_Dictionary_Ordered,The following statement contains a magic number: var a = new Dictionary<string' int>              {                  {"A"'1}'                  {"B"'2}'                  {"C"'3}'              };
Magic Number,ServiceStack.Common.Tests,EnumerableExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\EnumerableExtensionsTests.cs,EquivalentTo_Dictionary_Ordered,The following statement contains a magic number: b["B"] = 2;
Magic Number,ServiceStack.Common.Tests,EnumerableExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\EnumerableExtensionsTests.cs,EquivalentTo_Dictionary_Ordered,The following statement contains a magic number: b["C"] = 3;
Magic Number,ServiceStack.Common.Tests,EnumerableExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\EnumerableExtensionsTests.cs,EquivalentTo_Dictionary_Unordered,The following statement contains a magic number: var a = new Dictionary<string' int>              {                  {"A"'1}'                  {"B"'2}'                  {"C"'3}'              };
Magic Number,ServiceStack.Common.Tests,EnumerableExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\EnumerableExtensionsTests.cs,EquivalentTo_Dictionary_Unordered,The following statement contains a magic number: var a = new Dictionary<string' int>              {                  {"A"'1}'                  {"B"'2}'                  {"C"'3}'              };
Magic Number,ServiceStack.Common.Tests,EnumerableExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\EnumerableExtensionsTests.cs,EquivalentTo_Dictionary_Unordered,The following statement contains a magic number: var b = new Dictionary<string' int>              {                  {"C"'3}'                  {"A"'1}'                  {"B"'2}'              };
Magic Number,ServiceStack.Common.Tests,EnumerableExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\EnumerableExtensionsTests.cs,EquivalentTo_Dictionary_Unordered,The following statement contains a magic number: var b = new Dictionary<string' int>              {                  {"C"'3}'                  {"A"'1}'                  {"B"'2}'              };
Magic Number,ServiceStack.Common.Tests,ExpressionUtilsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\ExpressionUtilsTests.cs,Can_get_assigned_expressions,The following statement contains a magic number: 2.Times(i =>              {                  Assert.That(GetAssignmentExpression(() => new Poco { Name = i % 2 == 0 ? "Foo" : "Bar" }).AssignedValues()'                      Is.EquivalentTo(new Dictionary<string' object> {                          { "Name"' i % 2 == 0 ? "Foo" : "Bar" }                      }));              });
Magic Number,ServiceStack.Common.Tests,ExpressionUtilsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\ExpressionUtilsTests.cs,Can_get_assigned_expressions,The following statement contains a magic number: 2.Times(i =>              {                  Assert.That(GetAssignmentExpression(() => new Poco { Name = i % 2 == 0 ? "Foo" : "Bar" }).AssignedValues()'                      Is.EquivalentTo(new Dictionary<string' object> {                          { "Name"' i % 2 == 0 ? "Foo" : "Bar" }                      }));              });
Magic Number,ServiceStack.Common.Tests,ExpressionUtilsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\ExpressionUtilsTests.cs,Can_get_assigned_expressions,The following statement contains a magic number: 2.Times(i =>              {                  Assert.That(GetAssignmentExpression(() => new Poco { Name = i % 2 == 0 ? "Foo" : "Bar" }).AssignedValues()'                      Is.EquivalentTo(new Dictionary<string' object> {                          { "Name"' i % 2 == 0 ? "Foo" : "Bar" }                      }));              });
Magic Number,ServiceStack.Common.Tests,ExpressionUtilsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\ExpressionUtilsTests.cs,Can_get_assigned_ComplexTypes,The following statement contains a magic number: Assert.That(assignedValues.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Common.Tests,ManageRolesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\ManageRolesTests.cs,CreateNewUserRegistration,The following statement contains a magic number: var userId = Environment.TickCount % 10000;
Magic Number,ServiceStack.Common.Tests,MockRestGatewayTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\MockRestGatewayTests.cs,Can_Mock_RestGateway,The following statement contains a magic number: var postResponse = gateway.Post(new TestPostRequest { Id = 2 });
Magic Number,ServiceStack.Common.Tests,MockRestGatewayTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\MockRestGatewayTests.cs,Can_Mock_RestGateway,The following statement contains a magic number: Assert.That(postResponse.Id' Is.EqualTo(2));
Magic Number,ServiceStack.Common.Tests,PerfTestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\PerfTestBase.cs,PerfTestBase,The following statement contains a magic number: this.DefaultIterations = 10000;
Magic Number,ServiceStack.Common.Tests,PerfTestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\PerfTestBase.cs,PerfTestBase,The following statement contains a magic number: this.MultipleIterations = new List<int> { 1000' 10000' 100000' 1000000 };
Magic Number,ServiceStack.Common.Tests,PerfTestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\PerfTestBase.cs,PerfTestBase,The following statement contains a magic number: this.MultipleIterations = new List<int> { 1000' 10000' 100000' 1000000 };
Magic Number,ServiceStack.Common.Tests,PerfTestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\PerfTestBase.cs,PerfTestBase,The following statement contains a magic number: this.MultipleIterations = new List<int> { 1000' 10000' 100000' 1000000 };
Magic Number,ServiceStack.Common.Tests,PerfTestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\PerfTestBase.cs,PerfTestBase,The following statement contains a magic number: this.MultipleIterations = new List<int> { 1000' 10000' 100000' 1000000 };
Magic Number,ServiceStack.Common.Tests,PerfTestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\PerfTestBase.cs,CompareRuns,The following statement contains a magic number: Log("{0} was {1}ms or {2} times slower than {3}"'                  slowerRun' runDiffTime' Math.Round(runDiffAvg' 2)' fasterRun);
Magic Number,ServiceStack.Common.Tests,PerfUtilsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\PerfUtilsTests.cs,Measure_unique_collections,The following statement contains a magic number: var avgMicroSecs = PerfUtils.Measure(                  () => set.Add(rand.Next(0' 1000))' runForMs:2000);
Magic Number,ServiceStack.Common.Tests,PerfUtilsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\PerfUtilsTests.cs,Measure_unique_collections,The following statement contains a magic number: var avgMicroSecs = PerfUtils.Measure(                  () => set.Add(rand.Next(0' 1000))' runForMs:2000);
Magic Number,ServiceStack.Common.Tests,PerfUtilsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\PerfUtilsTests.cs,Measure_unique_collections,The following statement contains a magic number: avgMicroSecs = PerfUtils.Measure(                  () => {                      int i = rand.Next(0' 1000);                      if (!list.Contains(i))                          list.Add(i);                  }' runForMs: 2000);
Magic Number,ServiceStack.Common.Tests,PerfUtilsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\PerfUtilsTests.cs,Measure_unique_collections,The following statement contains a magic number: avgMicroSecs = PerfUtils.Measure(                  () => {                      int i = rand.Next(0' 1000);                      if (!list.Contains(i))                          list.Add(i);                  }' runForMs: 2000);
Magic Number,ServiceStack.Common.Tests,QueryStringSerializerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\QueryStringSerializerTests.cs,Can_deserialize_TestRequest_QueryStringSerializer_output,The following statement contains a magic number: Assert.That(request2.ListOfA.First().ListOfB.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Common.Tests,ReflectionUtilTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\ReflectionUtilTests.cs,Populate_Same_Objects,The following statement contains a magic number: var fromObj = ModelWithFieldsOfDifferentTypes.Create(2);
Magic Number,ServiceStack.Common.Tests,ReflectionUtilTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\ReflectionUtilTests.cs,Populate_Different_Objects_with_different_property_types,The following statement contains a magic number: Assert.That(obj3.Id' Is.EqualTo(2));
Magic Number,ServiceStack.Common.Tests,ReflectionUtilTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\ReflectionUtilTests.cs,Populate_From_Properties_With_Non_Default_Values,The following statement contains a magic number: var fromObj = ModelWithFieldsOfDifferentTypes.Create(2);
Magic Number,ServiceStack.Common.Tests,ReflectionUtilTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\ReflectionUtilTests.cs,Populate_From_Nullable_Properties_With_Non_Default_Values,The following statement contains a magic number: var fromObj = ModelWithFieldsOfDifferentTypesAsNullables.Create(2);
Magic Number,ServiceStack.Common.Tests,SessionExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\SessionExtensionTests.cs,Does_CreateRandomSessionId_without_url_unfriendly_chars,The following statement contains a magic number: 1000.Times(i =>              {                  var sessionId = SessionExtensions.CreateRandomSessionId();                  Assert.That(sessionId' Does.Not.Contain("+"));                  Assert.That(sessionId' Does.Not.Contain("/"));              });
Magic Number,ServiceStack.Common.Tests,SessionExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\SessionExtensionTests.cs,ToBase64UrlSafe_does_not_contain_unfriendly_chars,The following statement contains a magic number: var bytes = new byte[24];
Magic Number,ServiceStack.Common.Tests,SessionExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\SessionExtensionTests.cs,ToBase64UrlSafe_does_not_contain_unfriendly_chars,The following statement contains a magic number: 1000.Times(i =>              {                  SessionExtensions.PopulateWithSecureRandomBytes(bytes);                    var sessionId = bytes.ToBase64UrlSafe();                    Assert.That(sessionId' Does.Not.Contain("+"));                  Assert.That(sessionId' Does.Not.Contain("/"));                    if (lastSessionId != null)                      Assert.That(sessionId' Is.Not.EqualTo(lastSessionId));                  lastSessionId = sessionId;              });
Magic Number,ServiceStack.Common.Tests,SessionExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\SessionExtensionTests.cs,Does_CreateRandomBase62Id_16_byte_id_in_less_than_3_attempts_avg,The following statement contains a magic number: Assert.That(SessionExtensions.CreateRandomBase62Id(16).Length' Is.EqualTo(24));
Magic Number,ServiceStack.Common.Tests,SessionExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\SessionExtensionTests.cs,Does_CreateRandomBase62Id_16_byte_id_in_less_than_3_attempts_avg,The following statement contains a magic number: Assert.That(SessionExtensions.CreateRandomBase62Id(16).Length' Is.EqualTo(24));
Magic Number,ServiceStack.Common.Tests,SessionExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\SessionExtensionTests.cs,Does_CreateRandomBase62Id_16_byte_id_in_less_than_3_attempts_avg,The following statement contains a magic number: 1000.Times(i =>              {                  do                  {                      attempts++;                  } while (SessionExtensions.CreateRandomBase64Id(16).IndexOfAny(new[] {'+'' '/'}) >= 0);              });
Magic Number,ServiceStack.Common.Tests,SessionExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\SessionExtensionTests.cs,Does_CreateRandomBase62Id_16_byte_id_in_less_than_3_attempts_avg,The following statement contains a magic number: 1000.Times(i =>              {                  do                  {                      attempts++;                  } while (SessionExtensions.CreateRandomBase64Id(16).IndexOfAny(new[] {'+'' '/'}) >= 0);              });
Magic Number,ServiceStack.Common.Tests,SessionExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\SessionExtensionTests.cs,Does_CreateRandomBase62Id_16_byte_id_in_less_than_3_attempts_avg,The following statement contains a magic number: Assert.That(attempts' Is.LessThan(1000 * 3));
Magic Number,ServiceStack.Common.Tests,SessionExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\SessionExtensionTests.cs,Does_CreateRandomBase62Id_16_byte_id_in_less_than_3_attempts_avg,The following statement contains a magic number: Assert.That(attempts' Is.LessThan(1000 * 3));
Magic Number,ServiceStack.Common.Tests,SessionExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\SessionExtensionTests.cs,CreateRandomBase64Id_contains_url_unfriendly_chars,The following statement contains a magic number: Assert.Throws<ArgumentException>(() =>                  1000.Times(i =>                  {                      var sessionId = SessionExtensions.CreateRandomBase64Id();                      if (sessionId.ContainsAny("+"' "-"))                          throw new ArgumentException("Url Unfriendly Chars found");                  }));
Magic Number,ServiceStack.Common.Tests,DirectServiceClient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\TestBase.cs,Send,The following statement contains a magic number: var webEx = new WebServiceException(responseStatus.Message)                      {                          ResponseDto = response'                          StatusCode = responseStatus.Errors != null && responseStatus.Errors.Count > 0                              ? 400                              : 500'                      };
Magic Number,ServiceStack.Common.Tests,DirectServiceClient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\TestBase.cs,Send,The following statement contains a magic number: var webEx = new WebServiceException(responseStatus.Message)                      {                          ResponseDto = response'                          StatusCode = responseStatus.Errors != null && responseStatus.Errors.Count > 0                              ? 400                              : 500'                      };
Magic Number,ServiceStack.Common.Tests,UrlExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\UrlExtensionTests.cs,Can_create_url_with_ArrayIds,The following statement contains a magic number: var url = new ArrayIds(1' 2' 3).ToUrl("GET");
Magic Number,ServiceStack.Common.Tests,UrlExtensionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\UrlExtensionTests.cs,Can_create_url_with_ArrayIds,The following statement contains a magic number: var url = new ArrayIds(1' 2' 3).ToUrl("GET");
Magic Number,ServiceStack.Common.Tests.Expressions,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Expressions\ExpressionTests.cs,AddMethod,The following statement contains a magic number: return a + 4;
Magic Number,ServiceStack.Common.Tests.Expressions,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Expressions\ExpressionTests.cs,Simple_func_and_equivalent_expression_tests,The following statement contains a magic number: Assert.That(add(4)' Is.EqualTo(4 + 4));
Magic Number,ServiceStack.Common.Tests.Expressions,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Expressions\ExpressionTests.cs,Simple_func_and_equivalent_expression_tests,The following statement contains a magic number: Assert.That(add(4)' Is.EqualTo(4 + 4));
Magic Number,ServiceStack.Common.Tests.Expressions,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Expressions\ExpressionTests.cs,Simple_func_and_equivalent_expression_tests,The following statement contains a magic number: Assert.That(add(4)' Is.EqualTo(4 + 4));
Magic Number,ServiceStack.Common.Tests.Expressions,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Expressions\ExpressionTests.cs,Simple_func_and_equivalent_expression_tests,The following statement contains a magic number: Expression<Func<int' int>> addExpr = x => x + 4;
Magic Number,ServiceStack.Common.Tests.Expressions,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Expressions\ExpressionTests.cs,Simple_func_and_equivalent_expression_tests,The following statement contains a magic number: Assert.That(addFromExpr(4)' Is.EqualTo(add(4)));
Magic Number,ServiceStack.Common.Tests.Expressions,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Expressions\ExpressionTests.cs,Simple_func_and_equivalent_expression_tests,The following statement contains a magic number: Assert.That(addFromExpr(4)' Is.EqualTo(add(4)));
Magic Number,ServiceStack.Common.Tests.Expressions,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Expressions\ExpressionTests.cs,Simple_func_and_equivalent_expression_tests,The following statement contains a magic number: Assert.That(addMethod(4)' Is.EqualTo(add(4)));
Magic Number,ServiceStack.Common.Tests.Expressions,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Expressions\ExpressionTests.cs,Simple_func_and_equivalent_expression_tests,The following statement contains a magic number: Assert.That(addMethod(4)' Is.EqualTo(add(4)));
Magic Number,ServiceStack.Common.Tests.Expressions,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Expressions\ExpressionTests.cs,Simple_func_timing_tests,The following statement contains a magic number: Assert.That(add(4)' Is.EqualTo(4 + 4));
Magic Number,ServiceStack.Common.Tests.Expressions,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Expressions\ExpressionTests.cs,Simple_func_timing_tests,The following statement contains a magic number: Assert.That(add(4)' Is.EqualTo(4 + 4));
Magic Number,ServiceStack.Common.Tests.Expressions,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Expressions\ExpressionTests.cs,Simple_func_timing_tests,The following statement contains a magic number: Assert.That(add(4)' Is.EqualTo(4 + 4));
Magic Number,ServiceStack.Common.Tests.Expressions,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Expressions\ExpressionTests.cs,Simple_expression_timing_tests,The following statement contains a magic number: Expression<Func<int' int>> addExpr = x => x + 4;
Magic Number,ServiceStack.Common.Tests.Expressions,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Expressions\ExpressionTests.cs,Simple_expression_timing_tests,The following statement contains a magic number: Assert.That(addFromExpr(4)' Is.EqualTo(4 + 4));
Magic Number,ServiceStack.Common.Tests.Expressions,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Expressions\ExpressionTests.cs,Simple_expression_timing_tests,The following statement contains a magic number: Assert.That(addFromExpr(4)' Is.EqualTo(4 + 4));
Magic Number,ServiceStack.Common.Tests.Expressions,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Expressions\ExpressionTests.cs,Simple_expression_timing_tests,The following statement contains a magic number: Assert.That(addFromExpr(4)' Is.EqualTo(4 + 4));
Magic Number,ServiceStack.Common.Tests.Expressions,ExpressionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Expressions\ExpressionTests.cs,StaticAdd,The following statement contains a magic number: return a + 4;
Magic Number,ServiceStack.Common.Tests.FluentValidation,ErrorCodeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\FluentValidation\ErrorCodeTests.cs,SetUp,The following statement contains a magic number: var person = new Person()              {                  Firstname = "max"'                  CreditCard = "1asdf2"'                  Age = 10'                  Cars = new List<Car>()                  {                      new Car() { Manufacturer = "Audi"' Age = 100 }                  }              };
Magic Number,ServiceStack.Common.Tests.FluentValidation,ErrorCodeTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\FluentValidation\ErrorCodeTests.cs,SetUp,The following statement contains a magic number: var person = new Person()              {                  Firstname = "max"'                  CreditCard = "1asdf2"'                  Age = 10'                  Cars = new List<Car>()                  {                      new Car() { Manufacturer = "Audi"' Age = 100 }                  }              };
Magic Number,ServiceStack.Common.Tests.FluentValidation,PersonValidator,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\FluentValidation\ErrorCodeTests.cs,PersonValidator,The following statement contains a magic number: RuleFor(x => x.CreditCard).CreditCard().Length(10).EmailAddress().Equal("537")                      .ExclusiveBetween("asdlöfjasdf"' "asldfjlöakjdfsadf");
Magic Number,ServiceStack.Common.Tests.FluentValidation,PersonValidator,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\FluentValidation\ErrorCodeTests.cs,PersonValidator,The following statement contains a magic number: RuleFor(x => x.Age).GreaterThan(100).GreaterThanOrEqualTo(100).InclusiveBetween(100' 200).LessThan(10);
Magic Number,ServiceStack.Common.Tests.FluentValidation,PersonValidator,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\FluentValidation\ErrorCodeTests.cs,PersonValidator,The following statement contains a magic number: RuleFor(x => x.Age).GreaterThan(100).GreaterThanOrEqualTo(100).InclusiveBetween(100' 200).LessThan(10);
Magic Number,ServiceStack.Common.Tests.FluentValidation,PersonValidator,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\FluentValidation\ErrorCodeTests.cs,PersonValidator,The following statement contains a magic number: RuleFor(x => x.Age).GreaterThan(100).GreaterThanOrEqualTo(100).InclusiveBetween(100' 200).LessThan(10);
Magic Number,ServiceStack.Common.Tests.FluentValidation,PersonValidator,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\FluentValidation\ErrorCodeTests.cs,PersonValidator,The following statement contains a magic number: RuleFor(x => x.Age).GreaterThan(100).GreaterThanOrEqualTo(100).InclusiveBetween(100' 200).LessThan(10);
Magic Number,ServiceStack.Common.Tests.FluentValidation,PersonValidator,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\FluentValidation\ErrorCodeTests.cs,PersonValidator,The following statement contains a magic number: RuleFor(x => x.Age).GreaterThan(100).GreaterThanOrEqualTo(100).InclusiveBetween(100' 200).LessThan(10);
Magic Number,ServiceStack.Common.Tests.FluentValidation,CarValidator,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\FluentValidation\ErrorCodeTests.cs,CarValidator,The following statement contains a magic number: RuleFor(x => x.Age).LessThanOrEqualTo(20).NotEqual(100);
Magic Number,ServiceStack.Common.Tests.FluentValidation,CarValidator,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\FluentValidation\ErrorCodeTests.cs,CarValidator,The following statement contains a magic number: RuleFor(x => x.Age).LessThanOrEqualTo(20).NotEqual(100);
Magic Number,ServiceStack.Common.Tests.Messaging,MqServerAppHostTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Messaging\MqServerAppHostTests.cs,Can_Publish_to_PostTestMq_Service,The following statement contains a magic number: var request = new PostTestMq { Id = 2 };
Magic Number,ServiceStack.Common.Tests.Messaging,MqServerAppHostTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Messaging\MqServerAppHostTests.cs,SendOneWay_calls_AnyTestMq_Service_via_MQ,The following statement contains a magic number: var request = new AnyTestMq { Id = 3 };
Magic Number,ServiceStack.Common.Tests.Messaging,MqServerAppHostTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Messaging\MqServerAppHostTests.cs,SendOneWay_calls_PostTestMq_Service_via_MQ,The following statement contains a magic number: var request = new PostTestMq { Id = 4 };
Magic Number,ServiceStack.Common.Tests.Messaging,MqServerAppHostTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Messaging\MqServerAppHostTests.cs,Does_execute_validation_filters,The following statement contains a magic number: var request = new ValidateTestMq { Id = -10 };
Magic Number,ServiceStack.Common.Tests.Messaging,MqServerAppHostTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Messaging\MqServerAppHostTests.cs,Does_execute_validation_filters,The following statement contains a magic number: request = new ValidateTestMq { Id = 10 };
Magic Number,ServiceStack.Common.Tests.Messaging,MqServerAppHostTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Messaging\MqServerAppHostTests.cs,Does_execute_ReplyTo_validation_filters,The following statement contains a magic number: var request = new ValidateTestMq { Id = -10 };
Magic Number,ServiceStack.Common.Tests.Messaging,MqServerAppHostTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Messaging\MqServerAppHostTests.cs,Does_execute_ReplyTo_validation_filters,The following statement contains a magic number: request = new ValidateTestMq { Id = 10 };
Magic Number,ServiceStack.Common.Tests.Messaging,RabbitMqTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Messaging\RabbitMqTests.cs,Can_publish_messages_to_RabbitMQ,The following statement contains a magic number: 5.Times(i =>                  {                      byte[] payload = new HelloRabbit { Name = "World! #{0}".Fmt(i) }.ToJson().ToUtf8Bytes();                      var props = channel.CreateBasicProperties();                      props.Persistent = true;                        channel.BasicPublish(exchange: Exchange'                          routingKey: QueueNames<HelloRabbit>.In' basicProperties: props' body: payload);                        Console.WriteLine("Sent Message " + i);                      Thread.Sleep(1000);                  });
Magic Number,ServiceStack.Common.Tests.Messaging,RabbitMqTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Messaging\RabbitMqTests.cs,Can_publish_messages_to_RabbitMQ,The following statement contains a magic number: 5.Times(i =>                  {                      byte[] payload = new HelloRabbit { Name = "World! #{0}".Fmt(i) }.ToJson().ToUtf8Bytes();                      var props = channel.CreateBasicProperties();                      props.Persistent = true;                        channel.BasicPublish(exchange: Exchange'                          routingKey: QueueNames<HelloRabbit>.In' basicProperties: props' body: payload);                        Console.WriteLine("Sent Message " + i);                      Thread.Sleep(1000);                  });
Magic Number,ServiceStack.Common.Tests.Messaging,RabbitMqTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Messaging\RabbitMqTests.cs,Can_consume_messages_from_RabbitMQ_with_BasicGet,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,ServiceStack.Common.Tests.Messaging,RabbitMqTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Messaging\RabbitMqTests.cs,Can_consume_messages_from_RabbitMQ_with_BasicConsume,The following statement contains a magic number: ThreadPool.QueueUserWorkItem(_ =>                  {                      Thread.Sleep(100);                      PublishHelloRabbit(channel);                  });
Magic Number,ServiceStack.Common.Tests.Messaging,RabbitMqTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Messaging\RabbitMqTests.cs,Does_publish_to_dead_letter_exchange,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,ServiceStack.Common.Tests.Messaging,RabbitMqTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Messaging\RabbitMqTests.cs,Does_publish_to_dead_letter_exchange,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,ServiceStack.Common.Tests.Messaging,RabbitMqTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Messaging\RabbitMqTests.cs,Can_interrupt_BasicConsumer_in_bgthread_by_closing_channel,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,ServiceStack.Common.Tests.Messaging,RabbitMqTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Messaging\RabbitMqTests.cs,Can_interrupt_BasicConsumer_in_bgthread_by_closing_channel,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,ServiceStack.Common.Tests.Messaging,RabbitMqTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Messaging\RabbitMqTests.cs,Can_consume_messages_with_BasicConsumer,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,ServiceStack.Common.Tests.Models,Urn,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\DdnContentIngest.cs,IsValidUrn,The following statement contains a magic number: return (fields.Length == 3 || fields.Length == 4) && String.CompareOrdinal(fields[0]' "urn") == 0;
Magic Number,ServiceStack.Common.Tests.Models,Urn,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\DdnContentIngest.cs,IsValidUrn,The following statement contains a magic number: return (fields.Length == 3 || fields.Length == 4) && String.CompareOrdinal(fields[0]' "urn") == 0;
Magic Number,ServiceStack.Common.Tests.Models,Urn,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\DdnContentIngest.cs,TryParse,The following statement contains a magic number: urn = new Urn(fields[1]' fields[2]' fields[3]);
Magic Number,ServiceStack.Common.Tests.Models,Urn,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\DdnContentIngest.cs,TryParse,The following statement contains a magic number: urn = new Urn(fields[1]' fields[2]' fields[3]);
Magic Number,ServiceStack.Common.Tests.Models,Urn,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\DdnContentIngest.cs,TryParse,The following statement contains a magic number: fields.Length == 4
Magic Number,ServiceStack.Common.Tests.Models,Urn,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\DdnContentIngest.cs,TryParse,The following statement contains a magic number: (fields.Length == 3 || fields.Length == 4) && String.CompareOrdinal(fields[0]' "urn") == 0
Magic Number,ServiceStack.Common.Tests.Models,Urn,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\DdnContentIngest.cs,TryParse,The following statement contains a magic number: (fields.Length == 3 || fields.Length == 4) && String.CompareOrdinal(fields[0]' "urn") == 0
Magic Number,ServiceStack.Common.Tests.Models,Urn,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\DdnContentIngest.cs,Parse,The following statement contains a magic number: return fields.Length == 4 ? new Urn(fields[1]' fields[2]' fields[3]) : new Urn(fields[1]' fields[2]);
Magic Number,ServiceStack.Common.Tests.Models,Urn,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\DdnContentIngest.cs,Parse,The following statement contains a magic number: return fields.Length == 4 ? new Urn(fields[1]' fields[2]' fields[3]) : new Urn(fields[1]' fields[2]);
Magic Number,ServiceStack.Common.Tests.Models,Urn,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\DdnContentIngest.cs,Parse,The following statement contains a magic number: return fields.Length == 4 ? new Urn(fields[1]' fields[2]' fields[3]) : new Urn(fields[1]' fields[2]);
Magic Number,ServiceStack.Common.Tests.Models,Urn,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\DdnContentIngest.cs,Parse,The following statement contains a magic number: return fields.Length == 4 ? new Urn(fields[1]' fields[2]' fields[3]) : new Urn(fields[1]' fields[2]);
Magic Number,ServiceStack.Common.Tests.Models,Urn,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\DdnContentIngest.cs,Parse,The following statement contains a magic number: (fields.Length == 3 || fields.Length == 4) && String.CompareOrdinal(fields[0]' "urn") == 0
Magic Number,ServiceStack.Common.Tests.Models,Urn,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\DdnContentIngest.cs,Parse,The following statement contains a magic number: (fields.Length == 3 || fields.Length == 4) && String.CompareOrdinal(fields[0]' "urn") == 0
Magic Number,ServiceStack.Common.Tests.Models,ModelFactoryBase<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelFactoryBase.cs,CreateList,The following statement contains a magic number: return new List<T>              {                  CreateInstance(1)'                  CreateInstance(2)'                  CreateInstance(3)'                  CreateInstance(4)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelFactoryBase<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelFactoryBase.cs,CreateList,The following statement contains a magic number: return new List<T>              {                  CreateInstance(1)'                  CreateInstance(2)'                  CreateInstance(3)'                  CreateInstance(4)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelFactoryBase<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelFactoryBase.cs,CreateList,The following statement contains a magic number: return new List<T>              {                  CreateInstance(1)'                  CreateInstance(2)'                  CreateInstance(3)'                  CreateInstance(4)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelFactoryBase<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelFactoryBase.cs,CreateList2,The following statement contains a magic number: return new List<T>              {                  CreateInstance(5)'                  CreateInstance(6)'                  CreateInstance(7)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelFactoryBase<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelFactoryBase.cs,CreateList2,The following statement contains a magic number: return new List<T>              {                  CreateInstance(5)'                  CreateInstance(6)'                  CreateInstance(7)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelFactoryBase<T>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelFactoryBase.cs,CreateList2,The following statement contains a magic number: return new List<T>              {                  CreateInstance(5)'                  CreateInstance(6)'                  CreateInstance(7)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithComplexTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithComplexTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithComplexTypes              {                  Id = id'                  StringList = { "val" + id + 1' "val" + id + 2' "val" + id + 3 }'                  IntList = { id + 1' id + 2' id + 3 }'                  StringMap =                      {                          {"key" + id + 1' "val" + id + 1}'                          {"key" + id + 2' "val" + id + 2}'                          {"key" + id + 3' "val" + id + 3}'                      }'                  IntMap =                      {                          {id + 1' id + 2}'                          {id + 3' id + 4}'                          {id + 5' id + 6}'                      }'                  Child = new ModelWithComplexTypes { Id = id * 2 }'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentAndNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = Guid.NewGuid()'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentAndNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = Guid.NewGuid()'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentAndNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = Guid.NewGuid()'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentAndNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = Guid.NewGuid()'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentAndNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = Guid.NewGuid()'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentAndNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentAndNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentAndNullableTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Float = 1.11f + id'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "461D9D-47DB-4778-B3FA-458379AE9BDC")'                  LongId = 999 + id'                  Decimal = id + 0.5m'                  TimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = System.DateTime.Now.AddDays(id)'                  Double = 1.11d + id'                  Guid = System.Guid.NewGuid()'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = System.DateTime.Now.AddDays(id)'                  Double = 1.11d + id'                  Guid = System.Guid.NewGuid()'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = System.DateTime.Now.AddDays(id)'                  Double = 1.11d + id'                  Guid = System.Guid.NewGuid()'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypesAsNullables,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypesAsNullables              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Double = 1.11d + id'                  Guid = Guid.NewGuid()'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Double = 1.11d + id'                  Guid = Guid.NewGuid()'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = DateTime.Now.AddDays(id)'                  Double = 1.11d + id'                  Guid = Guid.NewGuid()'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfDifferentTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfDifferentTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfDifferentTypes              {                  Id = id'                  Bool = id % 2 == 0'                  DateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  Double = 1.11d + id'                  Guid = new Guid(((id % 240) + 16).ToString("X") + "726E3B-9983-40B4-A8CB-2F8ADA8C8760")'                  LongId = 999 + id'                  Name = "Name" + id              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = DateTime.Now.AddDays(id)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = Guid.NewGuid()'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = DateTime.Now.AddDays(id)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = Guid.NewGuid()'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = DateTime.Now.AddDays(id)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = Guid.NewGuid()'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = DateTime.Now.AddDays(id)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = Guid.NewGuid()'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfNullableTypes.cs,Create,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = DateTime.Now.AddDays(id)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = Guid.NewGuid()'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithFieldsOfNullableTypes,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithFieldsOfNullableTypes.cs,CreateConstant,The following statement contains a magic number: var row = new ModelWithFieldsOfNullableTypes              {                  Id = id'                  NId = id'                  NBool = id % 2 == 0'                  NDateTime = new DateTime(1979' (id % 12) + 1' (id % 28) + 1)'                  NFloat = 1.11f + id'                  NDouble = 1.11d + id'                  NGuid = new Guid(((id % 240) + 16).ToString("X") + "7DA519-73B6-4525-84BA-B57673B2360D")'                  NLongId = 999 + id'                  NDecimal = id + 0.5m'                  NTimeSpan = TimeSpan.FromSeconds(id)'              };
Magic Number,ServiceStack.Common.Tests.Models,ModelWithIdAndName,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ModelWithIdAndName.cs,GetHashCode,The following statement contains a magic number: return (Id * 397) ^ (Name != null ? Name.GetHashCode() : 0);
Magic Number,ServiceStack.Common.Tests.Models,Movie,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\Movie.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (Title != null ? Title.GetHashCode() : 0);
Magic Number,ServiceStack.Common.Tests.Models,Movie,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\Movie.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Rating.GetHashCode();
Magic Number,ServiceStack.Common.Tests.Models,Movie,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\Movie.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (Director != null ? Director.GetHashCode() : 0);
Magic Number,ServiceStack.Common.Tests.Models,Movie,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\Movie.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ ReleaseDate.GetHashCode();
Magic Number,ServiceStack.Common.Tests.Models,Movie,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\Movie.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (TagLine != null ? TagLine.GetHashCode() : 0);
Magic Number,ServiceStack.Common.Tests.Models,Movie,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\Movie.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (Genres != null ? Genres.GetHashCode() : 0);
Magic Number,ServiceStack.Common.Tests.Models,SampleOrderLine,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\SampleOrderLine.cs,Create,The following statement contains a magic number: return new SampleOrderLine              {                  Id = CreateUrn(userId' orderId' orderLineId)'                  CreatedDate = DateTime.Now'                  OrderId = orderId'                  OrderLineId = orderLineId'                  AlbumName = "AlbumName"'                  CashMixValueIncVat = 0.79m / 1.15m'                  TransactionValueExVat = 0.79m'                  ContentUrn = "urn:content:" + Guid.NewGuid().ToString("N")'              };
Magic Number,ServiceStack.Common.Tests.Models,SampleOrderLine,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\SampleOrderLine.cs,Create,The following statement contains a magic number: return new SampleOrderLine              {                  Id = CreateUrn(userId' orderId' orderLineId)'                  CreatedDate = DateTime.Now'                  OrderId = orderId'                  OrderLineId = orderLineId'                  AlbumName = "AlbumName"'                  CashMixValueIncVat = 0.79m / 1.15m'                  TransactionValueExVat = 0.79m'                  ContentUrn = "urn:content:" + Guid.NewGuid().ToString("N")'              };
Magic Number,ServiceStack.Common.Tests.Models,SampleOrderLine,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\SampleOrderLine.cs,Create,The following statement contains a magic number: return new SampleOrderLine              {                  Id = CreateUrn(userId' orderId' orderLineId)'                  CreatedDate = DateTime.Now'                  OrderId = orderId'                  OrderLineId = orderLineId'                  AlbumName = "AlbumName"'                  CashMixValueIncVat = 0.79m / 1.15m'                  TransactionValueExVat = 0.79m'                  ContentUrn = "urn:content:" + Guid.NewGuid().ToString("N")'              };
Magic Number,ServiceStack.Common.Tests.Models,ShipperFactory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ShipperFactory.cs,CreateInstance,The following statement contains a magic number: var hex = ((i % 240) + 16).ToString("X");
Magic Number,ServiceStack.Common.Tests.Models,ShipperFactory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ShipperFactory.cs,CreateInstance,The following statement contains a magic number: var hex = ((i % 240) + 16).ToString("X");
Magic Number,ServiceStack.Common.Tests.Models,ShipperFactory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ShipperFactory.cs,CreateInstance,The following statement contains a magic number: return new Shipper              {                  Id = i'                  CompanyName = "Shipper" + i'                  DateCreated = new DateTime(i + 1 % 3000' (i % 11) + 1' (i % 27) + 1' 0' 0' 0' DateTimeKind.Utc)'                  ShipperType = (ShipperType)(i % 3)'                  UniqueRef = new Guid(hex + "D148A5-E5F1-4E5A-8C60-52E5A80ACCC6")'              };
Magic Number,ServiceStack.Common.Tests.Models,ShipperFactory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ShipperFactory.cs,CreateInstance,The following statement contains a magic number: return new Shipper              {                  Id = i'                  CompanyName = "Shipper" + i'                  DateCreated = new DateTime(i + 1 % 3000' (i % 11) + 1' (i % 27) + 1' 0' 0' 0' DateTimeKind.Utc)'                  ShipperType = (ShipperType)(i % 3)'                  UniqueRef = new Guid(hex + "D148A5-E5F1-4E5A-8C60-52E5A80ACCC6")'              };
Magic Number,ServiceStack.Common.Tests.Models,ShipperFactory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ShipperFactory.cs,CreateInstance,The following statement contains a magic number: return new Shipper              {                  Id = i'                  CompanyName = "Shipper" + i'                  DateCreated = new DateTime(i + 1 % 3000' (i % 11) + 1' (i % 27) + 1' 0' 0' 0' DateTimeKind.Utc)'                  ShipperType = (ShipperType)(i % 3)'                  UniqueRef = new Guid(hex + "D148A5-E5F1-4E5A-8C60-52E5A80ACCC6")'              };
Magic Number,ServiceStack.Common.Tests.Models,ShipperFactory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Models\ShipperFactory.cs,CreateInstance,The following statement contains a magic number: return new Shipper              {                  Id = i'                  CompanyName = "Shipper" + i'                  DateCreated = new DateTime(i + 1 % 3000' (i % 11) + 1' (i % 27) + 1' 0' 0' 0' DateTimeKind.Utc)'                  ShipperType = (ShipperType)(i % 3)'                  UniqueRef = new Guid(hex + "D148A5-E5F1-4E5A-8C60-52E5A80ACCC6")'              };
Magic Number,ServiceStack.Common.Tests.OAuth,AuthUserSessionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\OAuth\AuthUserSessionTests.cs,Does_merge_FacebookOAuth_TwitterOAuth,The following statement contains a magic number: Assert.That(authProviders.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Common.Tests.OAuth,AuthUserSessionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\OAuth\AuthUserSessionTests.cs,Logging_in_pulls_all_AuthInfo_from_repo_after_logging_in_all_AuthProviders,The following statement contains a magic number: Assert.That(oAuthUserSession.ProviderOAuthAccess.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Common.Tests.OAuth,AuthUserSessionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\OAuth\AuthUserSessionTests.cs,Logging_in_pulls_all_AuthInfo_from_repo_after_logging_in_all_AuthProviders,The following statement contains a magic number: Assert.That(authProviders.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Common.Tests.OAuth,CredentialsServiceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\OAuth\CredentialsServiceTests.cs,Empty_request_invalidates_all_fields,The following statement contains a magic number: Assert.That(errors.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Common.Tests.OAuth,CredentialsServiceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\OAuth\CredentialsServiceTests.cs,Requires_UserName_and_Password,The following statement contains a magic number: Assert.That(errors.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Common.Tests.OAuth,OrmLiteUserAuthRepositoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\OAuth\OrmLiteUserAuthRepositoryTests.cs,Can_attempt_multiple_invalid_logins_without_being_locked_out,The following statement contains a magic number: 3.Times(() =>              {                  var response = appHost.ExecuteService(new Authenticate                  {                      UserName = "as@if.com"'                      Password = "wrongpassword"                  });              });
Magic Number,ServiceStack.Common.Tests.OAuth,OrmLiteUserAuthRepositoryTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\OAuth\OrmLiteUserAuthRepositoryTests.cs,Does_lockout_user_after_reaching_max_invalid_logins_limit,The following statement contains a magic number: feature.MaxLoginAttempts = 3;
Magic Number,ServiceStack.Common.Tests.OAuth,RegistrationServiceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\OAuth\RegistrationServiceTests.cs,Empty_Registration_is_invalid,The following statement contains a magic number: Assert.That(errors.Count' Is.EqualTo(3));
Magic Number,ServiceStack.Common.Tests.OAuth,RegistrationServiceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\OAuth\RegistrationServiceTests.cs,Empty_Registration_is_invalid,The following statement contains a magic number: Assert.That(errors[2].ErrorCode' Is.EqualTo("NotEmpty"));
Magic Number,ServiceStack.Common.Tests.OAuth,RegistrationServiceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\OAuth\RegistrationServiceTests.cs,Empty_Registration_is_invalid,The following statement contains a magic number: Assert.That(errors[2].FieldName' Is.EqualTo("Email"));
Magic Number,ServiceStack.Common.Tests.OAuth,RegistrationServiceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\OAuth\RegistrationServiceTests.cs,Empty_Registration_is_invalid_with_FullRegistrationValidator,The following statement contains a magic number: Assert.That(errors.Count' Is.EqualTo(4));
Magic Number,ServiceStack.Common.Tests.OAuth,RegistrationServiceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\OAuth\RegistrationServiceTests.cs,Empty_Registration_is_invalid_with_FullRegistrationValidator,The following statement contains a magic number: Assert.That(errors[2].ErrorCode' Is.EqualTo("NotEmpty"));
Magic Number,ServiceStack.Common.Tests.OAuth,RegistrationServiceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\OAuth\RegistrationServiceTests.cs,Empty_Registration_is_invalid_with_FullRegistrationValidator,The following statement contains a magic number: Assert.That(errors[2].FieldName' Is.EqualTo("Email"));
Magic Number,ServiceStack.Common.Tests.OAuth,RegistrationServiceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\OAuth\RegistrationServiceTests.cs,Empty_Registration_is_invalid_with_FullRegistrationValidator,The following statement contains a magic number: Assert.That(errors[3].ErrorCode' Is.EqualTo("NotEmpty"));
Magic Number,ServiceStack.Common.Tests.OAuth,RegistrationServiceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\OAuth\RegistrationServiceTests.cs,Empty_Registration_is_invalid_with_FullRegistrationValidator,The following statement contains a magic number: Assert.That(errors[3].FieldName' Is.EqualTo("DisplayName"));
Magic Number,ServiceStack.Common.Tests.OAuth,RegistrationServiceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\OAuth\RegistrationServiceTests.cs,Requires_unique_UserName_and_Email,The following statement contains a magic number: Assert.That(errors.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Common.Tests.OAuth,RegistrationServiceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\OAuth\RegistrationServiceTests.cs,Registration_with_Html_ContentType_And_Continue_returns_302_with_Location,The following statement contains a magic number: Assert.That(response.Status' Is.EqualTo(302));
Magic Number,ServiceStack.Common.Tests.Perf,AdhocFastPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\AdhocFastPerfTests.cs,AdhocFastPerfTests,The following statement contains a magic number: this.MultipleIterations = new List<int> { 10000 };
Magic Number,ServiceStack.Common.Tests.Perf,AdhocFastPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\AdhocFastPerfTests.cs,ToByteArray,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,ServiceStack.Common.Tests.Perf,AdhocFastPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\AdhocFastPerfTests.cs,ToByteArray,The following statement contains a magic number: bytes[i / 2] = Convert.ToByte(hexString.Substring(i' 2)' 16);
Magic Number,ServiceStack.Common.Tests.Perf,AdhocFastPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\AdhocFastPerfTests.cs,ToByteArray,The following statement contains a magic number: bytes[i / 2] = Convert.ToByte(hexString.Substring(i' 2)' 16);
Magic Number,ServiceStack.Common.Tests.Perf,AdhocFastPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\AdhocFastPerfTests.cs,ToByteArray,The following statement contains a magic number: bytes[i / 2] = Convert.ToByte(hexString.Substring(i' 2)' 16);
Magic Number,ServiceStack.Common.Tests.Perf,AdhocFastPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\AdhocFastPerfTests.cs,Compare_small_ConvertBytes,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,AdhocFastPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\AdhocFastPerfTests.cs,Compare_small_ConvertBytes,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,AdhocFastPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\AdhocFastPerfTests.cs,Compare_small_ConvertBytes,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,AdhocFastPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\AdhocFastPerfTests.cs,Compare_small_ConvertBytes,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,AdhocFastPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\AdhocFastPerfTests.cs,Compare_small_ConvertBytes,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,AdhocFastPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\AdhocFastPerfTests.cs,Compare_small_ConvertBytes,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,AdhocFastPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\AdhocFastPerfTests.cs,Compare_small_ConvertBytes,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,AdhocFastPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\AdhocFastPerfTests.cs,Compare_small_ConvertBytes,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,AdhocFastPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\AdhocFastPerfTests.cs,Compare_small_ConvertBytes,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,AdhocFastPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\AdhocFastPerfTests.cs,Compare_small_ConvertBytes,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,AdhocFastPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\AdhocFastPerfTests.cs,Compare_small_ConvertBytes,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,AdhocFastPerfTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\AdhocFastPerfTests.cs,Compare_small_ConvertBytes,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,DateTimePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\DateTimePerf.cs,DateTimePerf,The following statement contains a magic number: this.MultipleIterations = new List<int> { 10000 };
Magic Number,ServiceStack.Common.Tests.Perf,IdUtilsPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\IdUtilsPerf.cs,IdUtilsPerf,The following statement contains a magic number: this.MultipleIterations = new List<int> { 100000 };
Magic Number,ServiceStack.Common.Tests.Perf,ReflectionTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ReflectionTests.cs,ReflectionTests,The following statement contains a magic number: this.MultipleIterations = new List<int> { 100000000 };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,StringParsePerf,The following statement contains a magic number: this.MultipleIterations = new List<int> { 10000 };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,SplitList,The following statement contains a magic number: return listStr.Substring(1' listStr.Length - 2).Split(''');
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,StringParsePerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\StringParsePerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,ToStringPerf,The following statement contains a magic number: this.MultipleIterations = new List<int> { 10000 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_IntList,The following statement contains a magic number: var intList = new List<int> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_IntList,The following statement contains a magic number: var intList = new List<int> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_IntList,The following statement contains a magic number: var intList = new List<int> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_IntList,The following statement contains a magic number: var intList = new List<int> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_IntList,The following statement contains a magic number: var intList = new List<int> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_IntList,The following statement contains a magic number: var intList = new List<int> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_IntList,The following statement contains a magic number: var intList = new List<int> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_IntList,The following statement contains a magic number: var intList = new List<int> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_LongList,The following statement contains a magic number: var longList = new List<long> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_LongList,The following statement contains a magic number: var longList = new List<long> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_LongList,The following statement contains a magic number: var longList = new List<long> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_LongList,The following statement contains a magic number: var longList = new List<long> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_LongList,The following statement contains a magic number: var longList = new List<long> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_LongList,The following statement contains a magic number: var longList = new List<long> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_LongList,The following statement contains a magic number: var longList = new List<long> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_LongList,The following statement contains a magic number: var longList = new List<long> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_DoubleList,The following statement contains a magic number: var doubleList = new List<double> { 1.1' 2.2' 3.3' 4.4' 5.5' 6.6' 7.7' 8.8' 9.9' 0.1 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_DoubleList,The following statement contains a magic number: var doubleList = new List<double> { 1.1' 2.2' 3.3' 4.4' 5.5' 6.6' 7.7' 8.8' 9.9' 0.1 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_DoubleList,The following statement contains a magic number: var doubleList = new List<double> { 1.1' 2.2' 3.3' 4.4' 5.5' 6.6' 7.7' 8.8' 9.9' 0.1 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_DoubleList,The following statement contains a magic number: var doubleList = new List<double> { 1.1' 2.2' 3.3' 4.4' 5.5' 6.6' 7.7' 8.8' 9.9' 0.1 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_DoubleList,The following statement contains a magic number: var doubleList = new List<double> { 1.1' 2.2' 3.3' 4.4' 5.5' 6.6' 7.7' 8.8' 9.9' 0.1 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_DoubleList,The following statement contains a magic number: var doubleList = new List<double> { 1.1' 2.2' 3.3' 4.4' 5.5' 6.6' 7.7' 8.8' 9.9' 0.1 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_DoubleList,The following statement contains a magic number: var doubleList = new List<double> { 1.1' 2.2' 3.3' 4.4' 5.5' 6.6' 7.7' 8.8' 9.9' 0.1 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_DoubleList,The following statement contains a magic number: var doubleList = new List<double> { 1.1' 2.2' 3.3' 4.4' 5.5' 6.6' 7.7' 8.8' 9.9' 0.1 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_DoubleList,The following statement contains a magic number: var doubleList = new List<double> { 1.1' 2.2' 3.3' 4.4' 5.5' 6.6' 7.7' 8.8' 9.9' 0.1 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_DoubleList,The following statement contains a magic number: var doubleList = new List<double> { 1.1' 2.2' 3.3' 4.4' 5.5' 6.6' 7.7' 8.8' 9.9' 0.1 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_IntHashSet,The following statement contains a magic number: var intHashSet = new HashSet<int> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_IntHashSet,The following statement contains a magic number: var intHashSet = new HashSet<int> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_IntHashSet,The following statement contains a magic number: var intHashSet = new HashSet<int> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_IntHashSet,The following statement contains a magic number: var intHashSet = new HashSet<int> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_IntHashSet,The following statement contains a magic number: var intHashSet = new HashSet<int> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_IntHashSet,The following statement contains a magic number: var intHashSet = new HashSet<int> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_IntHashSet,The following statement contains a magic number: var intHashSet = new HashSet<int> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_IntHashSet,The following statement contains a magic number: var intHashSet = new HashSet<int> { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_DoubleHashSet,The following statement contains a magic number: var doubleHashSet = new HashSet<double> { 1.1' 2.2' 3.3' 4.4' 5.5' 6.6' 7.7' 8.8' 9.9' 0.1 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_DoubleHashSet,The following statement contains a magic number: var doubleHashSet = new HashSet<double> { 1.1' 2.2' 3.3' 4.4' 5.5' 6.6' 7.7' 8.8' 9.9' 0.1 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_DoubleHashSet,The following statement contains a magic number: var doubleHashSet = new HashSet<double> { 1.1' 2.2' 3.3' 4.4' 5.5' 6.6' 7.7' 8.8' 9.9' 0.1 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_DoubleHashSet,The following statement contains a magic number: var doubleHashSet = new HashSet<double> { 1.1' 2.2' 3.3' 4.4' 5.5' 6.6' 7.7' 8.8' 9.9' 0.1 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_DoubleHashSet,The following statement contains a magic number: var doubleHashSet = new HashSet<double> { 1.1' 2.2' 3.3' 4.4' 5.5' 6.6' 7.7' 8.8' 9.9' 0.1 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_DoubleHashSet,The following statement contains a magic number: var doubleHashSet = new HashSet<double> { 1.1' 2.2' 3.3' 4.4' 5.5' 6.6' 7.7' 8.8' 9.9' 0.1 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_DoubleHashSet,The following statement contains a magic number: var doubleHashSet = new HashSet<double> { 1.1' 2.2' 3.3' 4.4' 5.5' 6.6' 7.7' 8.8' 9.9' 0.1 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_DoubleHashSet,The following statement contains a magic number: var doubleHashSet = new HashSet<double> { 1.1' 2.2' 3.3' 4.4' 5.5' 6.6' 7.7' 8.8' 9.9' 0.1 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_DoubleHashSet,The following statement contains a magic number: var doubleHashSet = new HashSet<double> { 1.1' 2.2' 3.3' 4.4' 5.5' 6.6' 7.7' 8.8' 9.9' 0.1 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_DoubleHashSet,The following statement contains a magic number: var doubleHashSet = new HashSet<double> { 1.1' 2.2' 3.3' 4.4' 5.5' 6.6' 7.7' 8.8' 9.9' 0.1 };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_StringIntMap,The following statement contains a magic number: var map = new Dictionary<string' int> {                    {"A"' 1}'{"B"' 2}'{"C"' 3}'{"D"' 4}'{"E"' 5}'                    {"F"' 6}'{"G"' 7}'{"H"' 8}'{"I"' 9}'{"j"' 10}'                };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_StringIntMap,The following statement contains a magic number: var map = new Dictionary<string' int> {                    {"A"' 1}'{"B"' 2}'{"C"' 3}'{"D"' 4}'{"E"' 5}'                    {"F"' 6}'{"G"' 7}'{"H"' 8}'{"I"' 9}'{"j"' 10}'                };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_StringIntMap,The following statement contains a magic number: var map = new Dictionary<string' int> {                    {"A"' 1}'{"B"' 2}'{"C"' 3}'{"D"' 4}'{"E"' 5}'                    {"F"' 6}'{"G"' 7}'{"H"' 8}'{"I"' 9}'{"j"' 10}'                };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_StringIntMap,The following statement contains a magic number: var map = new Dictionary<string' int> {                    {"A"' 1}'{"B"' 2}'{"C"' 3}'{"D"' 4}'{"E"' 5}'                    {"F"' 6}'{"G"' 7}'{"H"' 8}'{"I"' 9}'{"j"' 10}'                };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_StringIntMap,The following statement contains a magic number: var map = new Dictionary<string' int> {                    {"A"' 1}'{"B"' 2}'{"C"' 3}'{"D"' 4}'{"E"' 5}'                    {"F"' 6}'{"G"' 7}'{"H"' 8}'{"I"' 9}'{"j"' 10}'                };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_StringIntMap,The following statement contains a magic number: var map = new Dictionary<string' int> {                    {"A"' 1}'{"B"' 2}'{"C"' 3}'{"D"' 4}'{"E"' 5}'                    {"F"' 6}'{"G"' 7}'{"H"' 8}'{"I"' 9}'{"j"' 10}'                };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_StringIntMap,The following statement contains a magic number: var map = new Dictionary<string' int> {                    {"A"' 1}'{"B"' 2}'{"C"' 3}'{"D"' 4}'{"E"' 5}'                    {"F"' 6}'{"G"' 7}'{"H"' 8}'{"I"' 9}'{"j"' 10}'                };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_StringIntMap,The following statement contains a magic number: var map = new Dictionary<string' int> {                    {"A"' 1}'{"B"' 2}'{"C"' 3}'{"D"' 4}'{"E"' 5}'                    {"F"' 6}'{"G"' 7}'{"H"' 8}'{"I"' 9}'{"j"' 10}'                };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_StringIntMap,The following statement contains a magic number: var map = new Dictionary<string' int> {                    {"A"' 1}'{"B"' 2}'{"C"' 3}'{"D"' 4}'{"E"' 5}'                    {"F"' 6}'{"G"' 7}'{"H"' 8}'{"I"' 9}'{"j"' 10}'                };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_StringInt_SortedDictionary,The following statement contains a magic number: var map = new SortedDictionary<string' int>{                    {"A"' 1}'{"B"' 2}'{"C"' 3}'{"D"' 4}'{"E"' 5}'                    {"F"' 6}'{"G"' 7}'{"H"' 8}'{"I"' 9}'{"j"' 10}'                };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_StringInt_SortedDictionary,The following statement contains a magic number: var map = new SortedDictionary<string' int>{                    {"A"' 1}'{"B"' 2}'{"C"' 3}'{"D"' 4}'{"E"' 5}'                    {"F"' 6}'{"G"' 7}'{"H"' 8}'{"I"' 9}'{"j"' 10}'                };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_StringInt_SortedDictionary,The following statement contains a magic number: var map = new SortedDictionary<string' int>{                    {"A"' 1}'{"B"' 2}'{"C"' 3}'{"D"' 4}'{"E"' 5}'                    {"F"' 6}'{"G"' 7}'{"H"' 8}'{"I"' 9}'{"j"' 10}'                };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_StringInt_SortedDictionary,The following statement contains a magic number: var map = new SortedDictionary<string' int>{                    {"A"' 1}'{"B"' 2}'{"C"' 3}'{"D"' 4}'{"E"' 5}'                    {"F"' 6}'{"G"' 7}'{"H"' 8}'{"I"' 9}'{"j"' 10}'                };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_StringInt_SortedDictionary,The following statement contains a magic number: var map = new SortedDictionary<string' int>{                    {"A"' 1}'{"B"' 2}'{"C"' 3}'{"D"' 4}'{"E"' 5}'                    {"F"' 6}'{"G"' 7}'{"H"' 8}'{"I"' 9}'{"j"' 10}'                };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_StringInt_SortedDictionary,The following statement contains a magic number: var map = new SortedDictionary<string' int>{                    {"A"' 1}'{"B"' 2}'{"C"' 3}'{"D"' 4}'{"E"' 5}'                    {"F"' 6}'{"G"' 7}'{"H"' 8}'{"I"' 9}'{"j"' 10}'                };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_StringInt_SortedDictionary,The following statement contains a magic number: var map = new SortedDictionary<string' int>{                    {"A"' 1}'{"B"' 2}'{"C"' 3}'{"D"' 4}'{"E"' 5}'                    {"F"' 6}'{"G"' 7}'{"H"' 8}'{"I"' 9}'{"j"' 10}'                };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_StringInt_SortedDictionary,The following statement contains a magic number: var map = new SortedDictionary<string' int>{                    {"A"' 1}'{"B"' 2}'{"C"' 3}'{"D"' 4}'{"E"' 5}'                    {"F"' 6}'{"G"' 7}'{"H"' 8}'{"I"' 9}'{"j"' 10}'                };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_StringInt_SortedDictionary,The following statement contains a magic number: var map = new SortedDictionary<string' int>{                    {"A"' 1}'{"B"' 2}'{"C"' 3}'{"D"' 4}'{"E"' 5}'                    {"F"' 6}'{"G"' 7}'{"H"' 8}'{"I"' 9}'{"j"' 10}'                };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Perf,ToStringPerf,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Perf\ToStringPerf.cs,Compare_ByteArray,The following statement contains a magic number: var byteArrayValue = new byte[] { 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' 0' 65' 97' 255' };
Magic Number,ServiceStack.Common.Tests.Reflection,InvokerMethodTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Reflection\InvokerMethodTests.cs,Can_use_MethodInvoker_to_call_Add_with_runtime_type,The following statement contains a magic number: Assert.That(invoker(instance' 2.0)' Is.EqualTo(3.0));
Magic Number,ServiceStack.Common.Tests.Reflection,InvokerMethodTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Reflection\InvokerMethodTests.cs,Can_use_MethodInvoker_to_call_Add_with_runtime_type,The following statement contains a magic number: Assert.That(invoker(instance' 2.0)' Is.EqualTo(3.0));
Magic Number,ServiceStack.Common.Tests.Reflection,InvokerMethodTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Reflection\InvokerMethodTests.cs,Can_use_MethodInvoker_to_call_Add_with_runtime_type,The following statement contains a magic number: Assert.That(invoker(instance' 2)' Is.EqualTo(3.0));
Magic Number,ServiceStack.Common.Tests.Reflection,InvokerMethodTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Reflection\InvokerMethodTests.cs,Can_use_MethodInvoker_to_call_Add_with_runtime_type,The following statement contains a magic number: Assert.That(invoker(instance' 2)' Is.EqualTo(3.0));
Magic Number,ServiceStack.Common.Tests.Reflection,InvokerMethodTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Reflection\InvokerMethodTests.cs,Can_use_MethodInvoker_to_call_Add_with_runtime_type,The following statement contains a magic number: Assert.That(invoker(instance' "2")' Is.EqualTo(3.0));
Magic Number,ServiceStack.Common.Tests.Reflection,PropertyAccessorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Reflection\PropertyAccessorTests.cs,Can_access_ModelWithIdAndName,The following statement contains a magic number: accessor.GetPublicSetter("Id")(obj' 2);
Magic Number,ServiceStack.Common.Tests.Reflection,PropertyAccessorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Reflection\PropertyAccessorTests.cs,Can_access_ModelWithIdAndName,The following statement contains a magic number: Assert.That(obj.Id' Is.EqualTo(2));
Magic Number,ServiceStack.Common.Tests.Reflection,PropertyAccessorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Reflection\PropertyAccessorTests.cs,Can_access_ModelWithFieldsOfDifferentTypes,The following statement contains a magic number: Assert.That(doubleAccessor.PublicGetter(original)' Is.EqualTo(original.Double).Within(0.1));
Magic Number,ServiceStack.Common.Tests.Reflection,PropertyAccessorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Reflection\PropertyAccessorTests.cs,Can_access_ModelWithFieldsOfDifferentTypes,The following statement contains a magic number: var to = ModelWithFieldsOfDifferentTypesFactory.Instance.CreateInstance(2);
Magic Number,ServiceStack.Common.Tests.Reflection,PropertyAccessorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Reflection\PropertyAccessorTests.cs,Can_access_ModelWithComplexTypes,The following statement contains a magic number: var to = ModelWithComplexTypesFactory.Instance.CreateInstance(2);
Magic Number,ServiceStack.Common.Tests.Reflection,PropertyAccessorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Reflection\PropertyAccessorTests.cs,Can_access_ModelWithFieldsOfDifferentAndNullableTypes,The following statement contains a magic number: var to = ModelWithFieldsOfNullableTypesFactory.Instance.CreateInstance(2);
Magic Number,ServiceStack.Common.Tests.ServiceClient.Web,UrlExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\ServiceClient.Web\UrlExtensionsTests.cs,Can_use_nested_classes_as_Request_DTOs,The following statement contains a magic number: var nested = (Root.Nested)appHost.ExecuteService(new Root.Nested { Id = 2 });
Magic Number,ServiceStack.Common.Tests.ServiceClient.Web,UrlExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\ServiceClient.Web\UrlExtensionsTests.cs,Can_use_nested_classes_as_Request_DTOs,The following statement contains a magic number: Assert.That(nested.Id' Is.EqualTo(2));
Magic Number,ServiceStack.Common.Tests.ServiceClient.Web,UrlExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\ServiceClient.Web\UrlExtensionsTests.cs,Can_parse_generic_List_Dictionary_of_String_and_Poco,The following statement contains a magic number: Assert.That(textNode.Children[0].Children.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Common.Tests.ServiceClient.Web,UrlExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\ServiceClient.Web\UrlExtensionsTests.cs,Can_parse_generic_List_Dictionary_of_Dictionary_of_String_and_Poco,The following statement contains a magic number: Assert.That(textNode.Children[0].Children.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Common.Tests.ServiceClient.Web,UrlExtensionsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\ServiceClient.Web\UrlExtensionsTests.cs,Can_parse_generic_List_Dictionary_of_Dictionary_of_String_and_Poco,The following statement contains a magic number: Assert.That(textNode.Children[0].Children[1].Children.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Common.Tests.Text,AdhocJsTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\Text\AdhocJsTests.cs,Can_Serialize_Array_with_nulls,The following statement contains a magic number: var t = new {                      Name = "MyName"'                      Number = (int?)null'                      Data = new object[] { 5' null' "text" }                  };
Missing Default,ServiceStack.Common.Tests,RsaUtilTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Common.Tests\RsaUtilTests.cs,ExtractRsaParameters,The following switch statement is missing a default case: switch (el.Name.LocalName)                      {                          case "Modulus":                              csp.Modulus = Convert.FromBase64String(el.Value);                              break;                          case "Exponent":                              csp.Exponent = Convert.FromBase64String(el.Value);                              break;                          case "P":                              csp.P = Convert.FromBase64String(el.Value);                              break;                          case "Q":                              csp.Q = Convert.FromBase64String(el.Value);                              break;                          case "DP":                              csp.DP = Convert.FromBase64String(el.Value);                              break;                          case "DQ":                              csp.DQ = Convert.FromBase64String(el.Value);                              break;                          case "InverseQ":                              csp.InverseQ = Convert.FromBase64String(el.Value);                              break;                          case "D":                              csp.D = Convert.FromBase64String(el.Value);                              break;                      }
