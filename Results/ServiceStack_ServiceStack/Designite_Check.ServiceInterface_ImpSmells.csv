Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Check.ServiceInterface,ErrorsService,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\Check.ServiceInterface\ErrorsService.cs,Any,Cyclomatic complexity of the method is 11
Magic Number,Check.ServiceInterface,CustomFieldHttpErrorService,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\Check.ServiceInterface\ErrorServices.cs,Any,The following statement contains a magic number: throw new HttpError(new CustomFieldHttpErrorResponse              {                  Custom = "Ignored"'                  ResponseStatus = new ResponseStatus("StatusErrorCode"' "StatusErrorMessage")              }'              500'              "HeaderErrorCode");
Magic Number,Check.ServiceInterface,ErrorsService,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\Check.ServiceInterface\ErrorsService.cs,Any,The following statement contains a magic number: switch (request.Type ?? "Exception")              {                  case "Exception":                      throw new Exception(request.Message ?? "Server Error");                  case "NotFound":                      throw HttpError.NotFound(request.Message ?? "What you're looking for isn't here");                  case "Unauthorized":                      throw HttpError.Unauthorized(request.Message ?? "You shall not pass!");                  case "Conflict":                      throw HttpError.Conflict(request.Message ?? "We haz Conflict!");                  case "NotImplementedException":                      throw new NotImplementedException(request.Message ?? "Not implemented yet' try again later");                  case "ArgumentException":                      throw new ArgumentException(request.Message ?? "Client Argument Error");                  case "AuthenticationException":                      throw new AuthenticationException(request.Message ?? "We haz issue Authenticating");                  case "UnauthorizedAccessException":                      throw new UnauthorizedAccessException(request.Message ?? "You shall not pass!");                  case "OptimisticConcurrencyException":                      throw new OptimisticConcurrencyException(request.Message ?? "Sorry too optimistic");                  case "UnhandledException":                      throw new FileNotFoundException(request.Message ?? "File was never here");                  case "RawResponse":                      Response.StatusCode = 418;                      Response.StatusDescription = request.Message ?? "On a tea break";                      Response.EndRequest();                      break;              }
Magic Number,Check.ServiceInterface,ThrowValidationValidator,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\Check.ServiceInterface\ErrorsService.cs,ThrowValidationValidator,The following statement contains a magic number: RuleFor(x => x.Age).InclusiveBetween(1' 120);
Magic Number,Check.ServiceInterface,TimestampService,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\Check.ServiceInterface\TestErrorService.cs,Get,The following statement contains a magic number: return new TimestampData { Timestamp = 635980054734850470 };
Magic Number,Check.ServiceInterface,TestProfilerService,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\Check.ServiceInterface\TestProfilerService.cs,Any,The following statement contains a magic number: var results = sqlServer.SqlList<DummyTable>("EXEC DummyTable @Times"' new { Times = 10 });
Missing Default,Check.ServiceInterface,ErrorsService,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\Check.ServiceInterface\ErrorsService.cs,Any,The following switch statement is missing a default case: switch (request.Type ?? "Exception")              {                  case "Exception":                      throw new Exception(request.Message ?? "Server Error");                  case "NotFound":                      throw HttpError.NotFound(request.Message ?? "What you're looking for isn't here");                  case "Unauthorized":                      throw HttpError.Unauthorized(request.Message ?? "You shall not pass!");                  case "Conflict":                      throw HttpError.Conflict(request.Message ?? "We haz Conflict!");                  case "NotImplementedException":                      throw new NotImplementedException(request.Message ?? "Not implemented yet' try again later");                  case "ArgumentException":                      throw new ArgumentException(request.Message ?? "Client Argument Error");                  case "AuthenticationException":                      throw new AuthenticationException(request.Message ?? "We haz issue Authenticating");                  case "UnauthorizedAccessException":                      throw new UnauthorizedAccessException(request.Message ?? "You shall not pass!");                  case "OptimisticConcurrencyException":                      throw new OptimisticConcurrencyException(request.Message ?? "Sorry too optimistic");                  case "UnhandledException":                      throw new FileNotFoundException(request.Message ?? "File was never here");                  case "RawResponse":                      Response.StatusCode = 418;                      Response.StatusDescription = request.Message ?? "On a tea break";                      Response.EndRequest();                      break;              }
