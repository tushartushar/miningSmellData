Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ServiceStack.Server.Tests.Messaging,MqRequestReplyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\MqRequestReplyTests.cs,Can_send_message_with_custom_Header,The length of the statement  "                    new Message<HelloIntroResponse>(new HelloIntroResponse { Result = "Hello' {0}!".Fmt(m.GetBody().Name) }) { Meta = m.Meta }); " is 124.
Long Statement,ServiceStack.Server.Tests.Messaging,MqRequestReplyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\MqRequestReplyTests.cs,Can_send_message_with_custom_Tag,The length of the statement  "                    new Message<HelloIntroResponse>(new HelloIntroResponse { Result = "Hello' {0}!".Fmt(m.GetBody().Name) }) { Tag = m.Tag }); " is 122.
Long Statement,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_retry_messages_with_errors_by_RetryCount,The length of the statement  "                mqHost.RegisterHandler<Reverse>(x => { Interlocked.Increment(ref reverseCalled); return x.GetBody().Value.Reverse(); }); " is 120.
Long Statement,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_process_messages_sent_before_it_was_started,The length of the statement  "                mqServer.RegisterHandler<Reverse>(x => { Interlocked.Increment(ref reverseCalled); return x.GetBody().Value.Reverse(); }); " is 122.
Long Statement,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_process_messages_sent_before_it_was_started,The length of the statement  "            mqHost.RegisterHandler<Reverse>(x => { Interlocked.Increment(ref reverseCalled); return x.GetBody().Value.Reverse(); }); " is 120.
Long Statement,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The length of the statement  "            mqHost.RegisterHandler<Reverse>(x => { Interlocked.Increment(ref reverseCalled); return x.GetBody().Value.Reverse(); }); " is 120.
Long Statement,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_retry_messages_with_errors_by_RetryCount,The length of the statement  "            mqHost.RegisterHandler<Reverse>(x => { Interlocked.Increment(ref reverseCalled); return x.GetBody().Value.Reverse(); }); " is 120.
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Auth,ApiKeyAuthTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\ApiKeyAuthTests.cs,ApiKeyAuthTests,The constructor "ApiKeyAuthTests" calls a virtual method "Start".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Auth,ApiKeyAuthTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\ApiKeyAuthTests.cs,ApiKeyAuthTests,The constructor "ApiKeyAuthTests" calls a virtual method "Init".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Auth,ApiKeyAuthTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\ApiKeyAuthTests.cs,ApiKeyAuthTests,The constructor "ApiKeyAuthTests" calls a virtual method "Post".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Auth,ApiKeyAuthTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\ApiKeyAuthTests.cs,ApiKeyAuthTests,The constructor "ApiKeyAuthTests" calls a virtual method "Resolve".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Auth,StatelessAuthRazorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthRazorTests.cs,StatelessAuthRazorTests,The constructor "StatelessAuthRazorTests" calls a virtual method "Start".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Auth,StatelessAuthRazorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthRazorTests.cs,StatelessAuthRazorTests,The constructor "StatelessAuthRazorTests" calls a virtual method "Init".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Auth,StatelessAuthRazorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthRazorTests.cs,StatelessAuthRazorTests,The constructor "StatelessAuthRazorTests" calls a virtual method "CreateAppHost".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Auth,StatelessAuthRazorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthRazorTests.cs,StatelessAuthRazorTests,The constructor "StatelessAuthRazorTests" calls a virtual method "GetClient".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Auth,StatelessAuthRazorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthRazorTests.cs,StatelessAuthRazorTests,The constructor "StatelessAuthRazorTests" calls a virtual method "Resolve".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Auth,StatelessAuthRazorTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthRazorTests.cs,StatelessAuthRazorTests,The constructor "StatelessAuthRazorTests" calls a virtual method "GetClientWithUserPassword".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Auth,FallbackAuthKeyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,FallbackAuthKeyTests,The constructor "FallbackAuthKeyTests" calls a virtual method "Start".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Auth,FallbackAuthKeyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,FallbackAuthKeyTests,The constructor "FallbackAuthKeyTests" calls a virtual method "Init".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Auth,JwtAuthProviderReaderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,JwtAuthProviderReaderTests,The constructor "JwtAuthProviderReaderTests" calls a virtual method "Start".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Auth,JwtAuthProviderReaderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,JwtAuthProviderReaderTests,The constructor "JwtAuthProviderReaderTests" calls a virtual method "Init".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Auth,StatelessAuthTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,StatelessAuthTests,The constructor "StatelessAuthTests" calls a virtual method "Start".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Auth,StatelessAuthTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,StatelessAuthTests,The constructor "StatelessAuthTests" calls a virtual method "Init".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Auth,StatelessAuthTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,StatelessAuthTests,The constructor "StatelessAuthTests" calls a virtual method "CreateAppHost".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Auth,StatelessAuthTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,StatelessAuthTests,The constructor "StatelessAuthTests" calls a virtual method "GetClient".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Auth,StatelessAuthTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,StatelessAuthTests,The constructor "StatelessAuthTests" calls a virtual method "Resolve".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Auth,StatelessAuthTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,StatelessAuthTests,The constructor "StatelessAuthTests" calls a virtual method "GetClientWithUserPassword".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Auth,StatelessAuthTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,StatelessAuthTests,The constructor "StatelessAuthTests" calls a virtual method "GetClientWithUserPassword".
Virtual Method Call from Constructor,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,ProxyFeatureTests,The constructor "ProxyFeatureTests" calls a virtual method "Start".
Virtual Method Call from Constructor,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,ProxyFeatureTests,The constructor "ProxyFeatureTests" calls a virtual method "Init".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Messaging,MqAppHostTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\MqAppHostTests.cs,MqAppHostTests,The constructor "MqAppHostTests" calls a virtual method "Start".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Messaging,MqAppHostTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\MqAppHostTests.cs,MqAppHostTests,The constructor "MqAppHostTests" calls a virtual method "Init".
Virtual Method Call from Constructor,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,CacheClientTestsBase,The constructor "CacheClientTestsBase" calls a virtual method "CreateClient".
Empty Catch Block,ServiceStack.Server.Tests.Messaging,AppHost,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\MqServerIntroTests.cs,Configure,The method has an empty catch block.
Empty Catch Block,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Cannot_Start_a_Disposed_MqHost,The method has an empty catch block.
Empty Catch Block,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Cannot_Stop_a_Disposed_MqHost,The method has an empty catch block.
Empty Catch Block,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Cannot_Start_a_Disposed_MqHost,The method has an empty catch block.
Empty Catch Block,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Cannot_Stop_a_Disposed_MqHost,The method has an empty catch block.
Magic Number,ServiceStack.Server.Tests.Auth,AppHost,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\ApiKeyAuthTests.cs,Configure,The following statement contains a magic number: db.Insert(new Rockstar(1' "Test"' "Database"' 27));
Magic Number,ServiceStack.Server.Tests.Auth,RockstarsService,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\AppHost.cs,Any,The following statement contains a magic number: return new PartialModel              {                  Items = 5.Times(x => new PartialChildModel                  {                      SomeProperty = "value " + x                  })              };
Magic Number,ServiceStack.Server.Tests.Auth,FallbackAuthKeyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,Can_authenticate_with_HM256_token_created_from_fallback_AuthKey,The following statement contains a magic number: var payload = JwtAuthProvider.CreateJwtPayload(new AuthUserSession              {                  UserAuthId = "1"'                  DisplayName = "Test"'                  Email = "as@if.com"              }' "external-jwt"' TimeSpan.FromDays(14));
Magic Number,ServiceStack.Server.Tests.Auth,RsaJwtWithEncryptedPayloadsStatelessAuthTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,Can_populate_entire_session_using_JWE_Token,The following statement contains a magic number: var payload = JwtAuthProvider.CreateJwtPayload(new AuthUserSession              {                  UserAuthId = "1"'                  DisplayName = "Test"'                  Email = "as@if.com"'                  Roles = new List<string> { "TheRole"' "Role 2" }'                  Permissions = new List<string> { "ThePermission"' "Perm 2" }'                  ProfileUrl = "http://example.org/profile.jpg"              }' "external-jwt"' TimeSpan.FromDays(14));
Magic Number,ServiceStack.Server.Tests.Auth,JwtAuthProviderReaderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,Can_authenticate_with_RSA_token_created_from_external_source,The following statement contains a magic number: var payload = JwtAuthProvider.CreateJwtPayload(new AuthUserSession              {                  UserAuthId = "1"'                  DisplayName = "Test"'                  Email = "as@if.com"              }' "external-jwt"' TimeSpan.FromDays(14));
Magic Number,ServiceStack.Server.Tests.Auth,JwtAuthProviderReaderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,Can_authenticate_with_RSA_token_created_from_fallback_PrivateKey,The following statement contains a magic number: var payload = JwtAuthProvider.CreateJwtPayload(new AuthUserSession              {                  UserAuthId = "1"'                  DisplayName = "Test"'                  Email = "as@if.com"              }' "external-jwt"' TimeSpan.FromDays(14));
Magic Number,ServiceStack.Server.Tests.Auth,JwtAuthProviderReaderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,Token_without_roles_or_permssions_cannot_access_SecuredBy_Role_or_Permission,The following statement contains a magic number: var payload = JwtAuthProvider.CreateJwtPayload(new AuthUserSession              {                  UserAuthId = "1"'                  DisplayName = "Test"'                  Email = "as@if.com"'              }' "external-jwt"' TimeSpan.FromDays(14));
Magic Number,ServiceStack.Server.Tests.Auth,JwtAuthProviderReaderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,Token_with_roles_and_permssions_can_access_SecuredBy_Role_or_Permission,The following statement contains a magic number: var payload = JwtAuthProvider.CreateJwtPayload(new AuthUserSession              {                  UserAuthId = "1"'                  DisplayName = "Test"'                  Email = "as@if.com"'                  Roles = new List<string> { "TheRole"' "Role 2" }'                  Permissions = new List<string> { "ThePermission"' "Perm 2" }'              }' "external-jwt"' TimeSpan.FromDays(14));
Magic Number,ServiceStack.Server.Tests.Auth,JwtAuthProviderReaderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,Can_populate_entire_session_using_JWT_Token,The following statement contains a magic number: var payload = JwtAuthProvider.CreateJwtPayload(new AuthUserSession              {                  UserAuthId = "1"'                  DisplayName = "Test"'                  Email = "as@if.com"'                  Roles = new List<string> { "TheRole" }'                  Permissions = new List<string> { "ThePermission" }'                  ProfileUrl = "http://example.org/profile.jpg"              }' "external-jwt"' TimeSpan.FromDays(14));
Magic Number,ServiceStack.Server.Tests.Auth,JwtAuthProviderReaderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,AssertAdditionalMetadataWasPopulated,The following statement contains a magic number: Assert.That(session.BirthDate' Is.EqualTo(new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)));
Magic Number,ServiceStack.Server.Tests.Auth,JwtAuthProviderReaderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,AssertAdditionalMetadataWasPopulated,The following statement contains a magic number: Assert.That(session.CreatedAt' Is.EqualTo(new DateTime(2010' 1' 1' 0' 0' 0' DateTimeKind.Utc)));
Magic Number,ServiceStack.Server.Tests.Auth,JwtAuthProviderReaderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,AssertAdditionalMetadataWasPopulated,The following statement contains a magic number: Assert.That(session.LastModified' Is.EqualTo(new DateTime(2016' 1' 1' 0' 0' 0' DateTimeKind.Utc)));
Magic Number,ServiceStack.Server.Tests.Auth,JwtAuthProviderReaderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,PopulateWithAdditionalMetadata,The following statement contains a magic number: payload["BirthDate"] = new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc).ToUnixTime().ToString();
Magic Number,ServiceStack.Server.Tests.Auth,JwtAuthProviderReaderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,PopulateWithAdditionalMetadata,The following statement contains a magic number: payload["CreatedAt"] = new DateTime(2010' 1' 1' 0' 0' 0' DateTimeKind.Utc).ToUnixTime().ToString();
Magic Number,ServiceStack.Server.Tests.Auth,JwtAuthProviderReaderTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,PopulateWithAdditionalMetadata,The following statement contains a magic number: payload["LastModified"] = new DateTime(2016' 1' 1' 0' 0' 0' DateTimeKind.Utc).ToUnixTime().ToString();
Magic Number,ServiceStack.Server.Tests.Auth,StatelessAuthTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,RunFor10Mins,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromMinutes(10));
Magic Number,ServiceStack.Server.Tests.Auth,StatelessAuthTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Auth\StatelessAuthTests.cs,Can_Authenticate_with_ApiKeyAuth_SessionCacheDuration,The following statement contains a magic number: apiProvider.SessionCacheDuration = TimeSpan.FromSeconds(60);
Magic Number,ServiceStack.Server.Tests.Benchmarks,RedisMqServerBenchmarks,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Benchmarks\RedisMqServerBenchmarks.cs,Can_receive_and_process_same_reply_responses,The following statement contains a magic number: Thread.Sleep(10000);
Magic Number,ServiceStack.Server.Tests.Benchmarks,RedisMqServerBenchmarks,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Benchmarks\RedisMqServerBenchmarks.cs,Can_receive_and_process_same_reply_responses_blocking,The following statement contains a magic number: mqHost.RegisterHandler<IncrBlocking>(m =>              {                  called++;                  mqHost.CreateMessageQueueClient().Publish(new IncrBlocking { Value = m.GetBody().Value + 1 });                  Thread.Sleep(100);                  return null;              });
Magic Number,ServiceStack.Server.Tests.Benchmarks,RedisMqServerBenchmarks,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Benchmarks\RedisMqServerBenchmarks.cs,Can_receive_and_process_same_reply_responses_blocking,The following statement contains a magic number: Thread.Sleep(10000);
Magic Number,ServiceStack.Server.Tests.Benchmarks,RedisMqServerServerBenchmarks,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Benchmarks\RedisMqServerServerBenchmarks.cs,Can_receive_and_process_same_reply_responses,The following statement contains a magic number: mqHost.RegisterHandler<Incr>(m =>              {                  called++;                  return new Incr { Value = m.GetBody().Value + 1 };              }' noOfThreads: 3);
Magic Number,ServiceStack.Server.Tests.Benchmarks,RedisMqServerServerBenchmarks,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Benchmarks\RedisMqServerServerBenchmarks.cs,Can_receive_and_process_same_reply_responses,The following statement contains a magic number: Thread.Sleep(10000);
Magic Number,ServiceStack.Server.Tests.Benchmarks,RedisMqServerServerBenchmarks,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Benchmarks\RedisMqServerServerBenchmarks.cs,Can_receive_and_process_same_reply_responses_blocking,The following statement contains a magic number: mqHost.RegisterHandler<IncrBlocking>(m =>              {                  called++;                  mqHost.CreateMessageQueueClient().Publish(new IncrBlocking { Value = m.GetBody().Value + 1 });                  Thread.Sleep(100);                  return null;              }' noOfThreads:5);
Magic Number,ServiceStack.Server.Tests.Benchmarks,RedisMqServerServerBenchmarks,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Benchmarks\RedisMqServerServerBenchmarks.cs,Can_receive_and_process_same_reply_responses_blocking,The following statement contains a magic number: mqHost.RegisterHandler<IncrBlocking>(m =>              {                  called++;                  mqHost.CreateMessageQueueClient().Publish(new IncrBlocking { Value = m.GetBody().Value + 1 });                  Thread.Sleep(100);                  return null;              }' noOfThreads:5);
Magic Number,ServiceStack.Server.Tests.Benchmarks,RedisMqServerServerBenchmarks,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Benchmarks\RedisMqServerServerBenchmarks.cs,Can_receive_and_process_same_reply_responses_blocking,The following statement contains a magic number: Thread.Sleep(10000);
Magic Number,ServiceStack.Server.Tests.Benchmarks,RedisMqServerServerBenchmarks,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Benchmarks\RedisMqServerServerBenchmarks.cs,Can_receive_and_process_same_reply_responses_blocking_and_non_blocking,The following statement contains a magic number: mqHost.RegisterHandler<IncrBlocking>(m =>              {                  blocking++;                  mqHost.CreateMessageQueueClient().Publish(new IncrBlocking { Value = m.GetBody().Value + 1 });                  Thread.Sleep(100);                  return null;              }' 5);
Magic Number,ServiceStack.Server.Tests.Benchmarks,RedisMqServerServerBenchmarks,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Benchmarks\RedisMqServerServerBenchmarks.cs,Can_receive_and_process_same_reply_responses_blocking_and_non_blocking,The following statement contains a magic number: mqHost.RegisterHandler<IncrBlocking>(m =>              {                  blocking++;                  mqHost.CreateMessageQueueClient().Publish(new IncrBlocking { Value = m.GetBody().Value + 1 });                  Thread.Sleep(100);                  return null;              }' 5);
Magic Number,ServiceStack.Server.Tests.Benchmarks,RedisMqServerServerBenchmarks,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Benchmarks\RedisMqServerServerBenchmarks.cs,Can_receive_and_process_same_reply_responses_blocking_and_non_blocking,The following statement contains a magic number: Thread.Sleep(10000);
Magic Number,ServiceStack.Server.Tests.Benchmarks,RedisMqServerServerBenchmarks,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Benchmarks\RedisMqServerServerBenchmarks.cs,Test_Blocking_messages_throughput,The following statement contains a magic number: const int BlockFor = 100;
Magic Number,ServiceStack.Server.Tests.Benchmarks,RedisMqServerServerBenchmarks,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Benchmarks\RedisMqServerServerBenchmarks.cs,Test_Blocking_messages_throughput,The following statement contains a magic number: const int NoOfThreads = 5;
Magic Number,ServiceStack.Server.Tests.Benchmarks,RedisMqServerServerBenchmarks,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Benchmarks\RedisMqServerServerBenchmarks.cs,Test_Blocking_messages_throughput,The following statement contains a magic number: const int SendEvery = BlockFor / NoOfThreads / 4;
Magic Number,ServiceStack.Server.Tests.Benchmarks,RedisMqServerServerBenchmarks,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Benchmarks\RedisMqServerServerBenchmarks.cs,Test_Blocking_messages_throughput,The following statement contains a magic number: DateTime.Now - startedAt < TimeSpan.FromSeconds(10)
Magic Number,ServiceStack.Server.Tests.Benchmarks,RedisMqServerServerBenchmarks,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Benchmarks\RedisMqServerServerBenchmarks.cs,Test_Blocking_and_NonBlocking_messages_throughput,The following statement contains a magic number: const int BlockFor = 100;
Magic Number,ServiceStack.Server.Tests.Benchmarks,RedisMqServerServerBenchmarks,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Benchmarks\RedisMqServerServerBenchmarks.cs,Test_Blocking_and_NonBlocking_messages_throughput,The following statement contains a magic number: const int NoOfThreads = 5;
Magic Number,ServiceStack.Server.Tests.Benchmarks,RedisMqServerServerBenchmarks,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Benchmarks\RedisMqServerServerBenchmarks.cs,Test_Blocking_and_NonBlocking_messages_throughput,The following statement contains a magic number: const int SendBlockingMsgEvery = BlockFor / NoOfThreads / 4;
Magic Number,ServiceStack.Server.Tests.Benchmarks,RedisMqServerServerBenchmarks,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Benchmarks\RedisMqServerServerBenchmarks.cs,Test_Blocking_and_NonBlocking_messages_throughput,The following statement contains a magic number: mqHost.RegisterHandler<Incr>(m =>              {                  nonBlocking++;                  return null;              }' 3);
Magic Number,ServiceStack.Server.Tests.Benchmarks,RedisMqServerServerBenchmarks,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Benchmarks\RedisMqServerServerBenchmarks.cs,Test_Blocking_and_NonBlocking_messages_throughput,The following statement contains a magic number: stopWatch.ElapsedMilliseconds < 10 * 1000
Magic Number,ServiceStack.Server.Tests.Benchmarks,RedisMqServerServerBenchmarks,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Benchmarks\RedisMqServerServerBenchmarks.cs,Test_Blocking_and_NonBlocking_messages_throughput,The following statement contains a magic number: stopWatch.ElapsedMilliseconds < 10 * 1000
Magic Number,ServiceStack.Server.Tests.Caching,MemoryCacheClientTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Caching\CacheClientTests.cs,Increments_are_Atomic,The following statement contains a magic number: var numThreads = 20;
Magic Number,ServiceStack.Server.Tests.Caching,MemoryCacheClientTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Caching\CacheClientTests.cs,Increments_are_Atomic,The following statement contains a magic number: var numIncr = 10000;
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_proxy_to_test_servicestack,The following statement contains a magic number: var request = new EchoTypes              {                  Byte = 1'                  Short = 2'                  Int = 3'                  Long = 4'                  Float = 1.1f'                  String = "foo"              };
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_proxy_to_test_servicestack,The following statement contains a magic number: var request = new EchoTypes              {                  Byte = 1'                  Short = 2'                  Int = 3'                  Long = 4'                  Float = 1.1f'                  String = "foo"              };
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_proxy_to_test_servicestack,The following statement contains a magic number: var request = new EchoTypes              {                  Byte = 1'                  Short = 2'                  Int = 3'                  Long = 4'                  Float = 1.1f'                  String = "foo"              };
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_proxy_to_test_servicestack,The following statement contains a magic number: var request = new EchoTypes              {                  Byte = 1'                  Short = 2'                  Int = 3'                  Long = 4'                  Float = 1.1f'                  String = "foo"              };
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_proxy_to_test_servicestack,The following statement contains a magic number: Assert.That(response.Short' Is.EqualTo(2));
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_proxy_to_test_servicestack,The following statement contains a magic number: Assert.That(response.Int' Is.EqualTo(3));
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_proxy_to_test_servicestack,The following statement contains a magic number: Assert.That(response.Long' Is.EqualTo(4));
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_proxy_to_test_servicestack,The following statement contains a magic number: Assert.That(response.Float' Is.EqualTo(1.1f));
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_proxy_to_test_servicestack_Async,The following statement contains a magic number: var request = new EchoTypes              {                  Byte = 1'                  Short = 2'                  Int = 3'                  Long = 4'                  Float = 1.1f'                  String = "foo"              };
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_proxy_to_test_servicestack_Async,The following statement contains a magic number: var request = new EchoTypes              {                  Byte = 1'                  Short = 2'                  Int = 3'                  Long = 4'                  Float = 1.1f'                  String = "foo"              };
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_proxy_to_test_servicestack_Async,The following statement contains a magic number: var request = new EchoTypes              {                  Byte = 1'                  Short = 2'                  Int = 3'                  Long = 4'                  Float = 1.1f'                  String = "foo"              };
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_proxy_to_test_servicestack_Async,The following statement contains a magic number: var request = new EchoTypes              {                  Byte = 1'                  Short = 2'                  Int = 3'                  Long = 4'                  Float = 1.1f'                  String = "foo"              };
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_proxy_to_test_servicestack_Async,The following statement contains a magic number: Assert.That(response.Short' Is.EqualTo(2));
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_proxy_to_test_servicestack_Async,The following statement contains a magic number: Assert.That(response.Int' Is.EqualTo(3));
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_proxy_to_test_servicestack_Async,The following statement contains a magic number: Assert.That(response.Long' Is.EqualTo(4));
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_proxy_to_test_servicestack_Async,The following statement contains a magic number: Assert.That(response.Float' Is.EqualTo(1.1f));
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_TransformRequest_when_proxying_to_test,The following statement contains a magic number: var request = new EchoTypes              {                  Byte = 1'                  Short = 2'                  Int = 3'                  Long = 4'                  Float = 1.1f'                  String = "foo"              };
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_TransformRequest_when_proxying_to_test,The following statement contains a magic number: var request = new EchoTypes              {                  Byte = 1'                  Short = 2'                  Int = 3'                  Long = 4'                  Float = 1.1f'                  String = "foo"              };
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_TransformRequest_when_proxying_to_test,The following statement contains a magic number: var request = new EchoTypes              {                  Byte = 1'                  Short = 2'                  Int = 3'                  Long = 4'                  Float = 1.1f'                  String = "foo"              };
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_TransformRequest_when_proxying_to_test,The following statement contains a magic number: var request = new EchoTypes              {                  Byte = 1'                  Short = 2'                  Int = 3'                  Long = 4'                  Float = 1.1f'                  String = "foo"              };
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_TransformRequest_when_proxying_to_test,The following statement contains a magic number: Assert.That(response.Short' Is.EqualTo(2));
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_TransformRequest_when_proxying_to_test,The following statement contains a magic number: Assert.That(response.Int' Is.EqualTo(3));
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_TransformRequest_when_proxying_to_test,The following statement contains a magic number: Assert.That(response.Long' Is.EqualTo(4));
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_TransformRequest_when_proxying_to_test,The following statement contains a magic number: Assert.That(response.Float' Is.EqualTo(1.1f));
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_TransformResponse_when_proxying_to_test,The following statement contains a magic number: var request = new EchoTypes              {                  Byte = 1'                  Short = 2'                  Int = 3'                  Long = 4'                  Float = 1.1f'                  String = "foo"              };
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_TransformResponse_when_proxying_to_test,The following statement contains a magic number: var request = new EchoTypes              {                  Byte = 1'                  Short = 2'                  Int = 3'                  Long = 4'                  Float = 1.1f'                  String = "foo"              };
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_TransformResponse_when_proxying_to_test,The following statement contains a magic number: var request = new EchoTypes              {                  Byte = 1'                  Short = 2'                  Int = 3'                  Long = 4'                  Float = 1.1f'                  String = "foo"              };
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_TransformResponse_when_proxying_to_test,The following statement contains a magic number: var request = new EchoTypes              {                  Byte = 1'                  Short = 2'                  Int = 3'                  Long = 4'                  Float = 1.1f'                  String = "foo"              };
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_TransformResponse_when_proxying_to_test,The following statement contains a magic number: Assert.That(response.Short' Is.EqualTo(2));
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_TransformResponse_when_proxying_to_test,The following statement contains a magic number: Assert.That(response.Int' Is.EqualTo(3));
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_TransformResponse_when_proxying_to_test,The following statement contains a magic number: Assert.That(response.Long' Is.EqualTo(4));
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_TransformResponse_when_proxying_to_test,The following statement contains a magic number: Assert.That(response.Float' Is.EqualTo(1.1f));
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Try_connect_to_ServerEvents_over_proxy,The following statement contains a magic number: client = new ServerEventsClient(proxyBaseUrl)              {                  OnConnect = async c =>                  {                      var proxyUrl = ListeningOn + c.HeartbeatUrl.Replace("http://chat.servicestack.net"' "chat");                      client.ConnectionInfo.HeartbeatIntervalMs = 1000;                      client.ConnectionInfo.HeartbeatUrl = proxyUrl;                      var response = await proxyUrl.GetStringFromUrlAsync();                      Assert.That(response' Is.Empty);                  }'                  OnHeartbeat = () =>                  {                      "Received Heartbeat".Print();                  }'                  OnException = ex =>                  {                      ex.Message.Print();                  }              };
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Try_connect_to_ServerEvents_over_proxy,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromSeconds(120));
Magic Number,ServiceStack.Server.Tests,ProxyFeatureTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\ProxyFeatureTests.cs,Can_proxy_chunked_encoding_responses,The following statement contains a magic number: Assert.That(html.Length' Is.GreaterThan(1000));
Magic Number,ServiceStack.Server.Tests,TransientServiceMessagingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\TransientServiceMessagingTests.cs,AlwaysFailsService_ends_up_in_dlq_after_3_attempts,The following statement contains a magic number: Assert.That(service.TimesCalled' Is.EqualTo(3));
Magic Number,ServiceStack.Server.Tests.Messaging,InspectingMqTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\InspectingMqTests.cs,TestFixtureSetUp,The following statement contains a magic number: mqService = new RedisMqServer(redisManager' 2' null);
Magic Number,ServiceStack.Server.Tests.Messaging,MqAppHostTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\MqAppHostTests.cs,Can_handle_custom_exception,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,ServiceStack.Server.Tests.Messaging,MqAppHostTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\MqAppHostTests.cs,Can_handle_custom_exception,The following statement contains a magic number: Assert.That(MqAppHostServices.TimesCalled' Is.EqualTo(2));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqRequestReplyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\MqRequestReplyTests.cs,Can_expire_temp_queues,The following statement contains a magic number: 100.Times(i =>                      client.AddItemToList(QueueNames.GetTempQueueName()' i.ToString()));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqRequestReplyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\MqRequestReplyTests.cs,Can_expire_temp_queues,The following statement contains a magic number: var itemsToExpire = mqServer.ExpireTemporaryQueues(afterMs: 100);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqRequestReplyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\MqRequestReplyTests.cs,Can_expire_temp_queues,The following statement contains a magic number: Assert.That(itemsToExpire' Is.EqualTo(100));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqRequestReplyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\MqRequestReplyTests.cs,Can_expire_temp_queues,The following statement contains a magic number: Assert.That(client.SearchKeys(tmpWildCard).Count' Is.EqualTo(100));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqRequestReplyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\MqRequestReplyTests.cs,Can_expire_temp_queues,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,ServiceStack.Server.Tests.Messaging,MqRequestReplyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\MqRequestReplyTests.cs,Can_handle_multiple_rpc_clients,The following statement contains a magic number: int NoOfClients = 10;
Magic Number,ServiceStack.Server.Tests.Messaging,MqRequestReplyTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\MqRequestReplyTests.cs,Can_handle_multiple_rpc_clients,The following statement contains a magic number: int TimeMs = 5000;
Magic Number,ServiceStack.Server.Tests.Messaging,MqServerIntroTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\MqServerIntroTests.cs,Message_with_exceptions_are_retried_then_published_to_Request_dlq,The following statement contains a magic number: Assert.That(called' Is.EqualTo(2));
Magic Number,ServiceStack.Server.Tests.Messaging,MqServerIntroTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\MqServerIntroTests.cs,Message_with_ReplyTo_that_throw_exceptions_are_retried_then_published_to_Request_dlq,The following statement contains a magic number: Assert.That(called' Is.EqualTo(2));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Only_allows_1_BgThread_to_run_at_a_time,The following statement contains a magic number: 5.Times(x => ThreadPool.QueueUserWorkItem(y => mqHost.Start()));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Only_allows_1_BgThread_to_run_at_a_time,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                  {                      Assert.That(mqHost.GetStatus()' Is.EqualTo("Started"));                      Assert.That(mqHost.BgThreadCount' Is.EqualTo(1));                      Thread.Sleep(100);                  }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Only_allows_1_BgThread_to_run_at_a_time,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                  {                      Assert.That(mqHost.GetStatus()' Is.EqualTo("Started"));                      Assert.That(mqHost.BgThreadCount' Is.EqualTo(1));                      Thread.Sleep(100);                  }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Only_allows_1_BgThread_to_run_at_a_time,The following statement contains a magic number: 10.Times(x => ThreadPool.QueueUserWorkItem(y => mqHost.Stop()));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Only_allows_1_BgThread_to_run_at_a_time,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                  {                      Assert.That(mqHost.GetStatus()' Is.EqualTo("Stopped"));                      Thread.Sleep(100);                  }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Only_allows_1_BgThread_to_run_at_a_time,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                  {                      Assert.That(mqHost.GetStatus()' Is.EqualTo("Stopped"));                      Thread.Sleep(100);                  }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Only_allows_1_BgThread_to_run_at_a_time,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                  {                      Assert.That(mqHost.GetStatus()' Is.EqualTo("Started"));                      Assert.That(mqHost.BgThreadCount' Is.EqualTo(2));                      Thread.Sleep(100);                  }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Only_allows_1_BgThread_to_run_at_a_time,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                  {                      Assert.That(mqHost.GetStatus()' Is.EqualTo("Started"));                      Assert.That(mqHost.BgThreadCount' Is.EqualTo(2));                      Thread.Sleep(100);                  }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Only_allows_1_BgThread_to_run_at_a_time,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                  {                      Assert.That(mqHost.GetStatus()' Is.EqualTo("Started"));                      Assert.That(mqHost.BgThreadCount' Is.EqualTo(2));                      Thread.Sleep(100);                  }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Cannot_Stop_a_Disposed_MqHost,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Can_receive_and_process_same_reply_responses,The following statement contains a magic number: var incr = new Incr { Value = 5 };
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Can_receive_and_process_same_reply_responses,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                  {                      Assert.That(called' Is.EqualTo(1 + incr.Value));                      Thread.Sleep(100);                  }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Can_receive_and_process_same_reply_responses,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                  {                      Assert.That(called' Is.EqualTo(1 + incr.Value));                      Thread.Sleep(100);                  }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Can_receive_and_process_standard_request_reply_combo,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                      {                          Assert.That(messageReceived' Is.EqualTo("Hello' ServiceStack"));                          Thread.Sleep(100);                      }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Can_receive_and_process_standard_request_reply_combo,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                      {                          Assert.That(messageReceived' Is.EqualTo("Hello' ServiceStack"));                          Thread.Sleep(100);                      }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Can_handle_requests_concurrently_in_4_threads,The following statement contains a magic number: RunHandlerOnMultipleThreads(noOfThreads: 4' msgs: 10);
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Can_handle_requests_concurrently_in_4_threads,The following statement contains a magic number: RunHandlerOnMultipleThreads(noOfThreads: 4' msgs: 10);
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,RunHandlerOnMultipleThreads,The following statement contains a magic number: var dto = new Wait { ForMs = 100 };
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,RunHandlerOnMultipleThreads,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                      {                          Assert.That(timesCalled' Is.EqualTo(msgs));                          Thread.Sleep(100);                      }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,RunHandlerOnMultipleThreads,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                      {                          Assert.That(timesCalled' Is.EqualTo(msgs));                          Thread.Sleep(100);                      }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Can_filter_published_and_received_messages,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Messages_with_null_Response_is_published_to_OutMQ,The following statement contains a magic number: var msg = mqClient.Get<HelloNull>(QueueNames<HelloNull>.Out' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Messages_with_null_Response_is_published_to_OutMQ,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Messages_with_null_responses_are_not_published_when_DisablePublishingToOutq,The following statement contains a magic number: var msg = mqClient.Get<HelloNull>(QueueNames<HelloNull>.Out' TimeSpan.FromSeconds(2));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Messages_with_null_Response_is_published_to_ReplyMQ,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                      {                          Assert.That(mqHost.GetStatus()' Is.EqualTo("Started"));                          Assert.That(mqHost.GetStats().TotalMessagesProcessed' Is.EqualTo(3));                          Thread.Sleep(100);                      }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                      {                          Assert.That(mqHost.GetStatus()' Is.EqualTo("Started"));                          Assert.That(mqHost.GetStats().TotalMessagesProcessed' Is.EqualTo(3));                          Thread.Sleep(100);                      }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                      {                          Assert.That(mqHost.GetStatus()' Is.EqualTo("Started"));                          Assert.That(mqHost.GetStats().TotalMessagesProcessed' Is.EqualTo(3));                          Thread.Sleep(100);                      }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: 10.Times(x => ThreadPool.QueueUserWorkItem(y => mqHost.Start()));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: 5.Times(x => ThreadPool.QueueUserWorkItem(y => mqHost.Stop()));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                      {                          Assert.That(mqHost.GetStatus()' Is.EqualTo("Stopped"));                          Thread.Sleep(100);                      }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                      {                          Assert.That(mqHost.GetStatus()' Is.EqualTo("Stopped"));                          Thread.Sleep(100);                      }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: 10.Times(x => ThreadPool.QueueUserWorkItem(y => mqHost.Start()));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                      {                          Assert.That(mqHost.GetStatus()' Is.EqualTo("Started"));                          Thread.Sleep(100);                      }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                      {                          Assert.That(mqHost.GetStatus()' Is.EqualTo("Started"));                          Thread.Sleep(100);                      }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: Assert.That(mqHost.GetStats().TotalMessagesProcessed' Is.GreaterThanOrEqualTo(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: Assert.That(reverseCalled' Is.EqualTo(3));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: Assert.That(rot13Called' Is.EqualTo(2));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_retry_messages_with_errors_by_RetryCount,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                      {                          Assert.That(mqHost.GetStats().TotalMessagesFailed' Is.EqualTo(1 * totalRetries));                          Assert.That(mqHost.GetStats().TotalMessagesProcessed' Is.EqualTo(2 + 1));                          Thread.Sleep(100);                      }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_retry_messages_with_errors_by_RetryCount,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                      {                          Assert.That(mqHost.GetStats().TotalMessagesFailed' Is.EqualTo(1 * totalRetries));                          Assert.That(mqHost.GetStats().TotalMessagesProcessed' Is.EqualTo(2 + 1));                          Thread.Sleep(100);                      }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_retry_messages_with_errors_by_RetryCount,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                      {                          Assert.That(mqHost.GetStats().TotalMessagesFailed' Is.EqualTo(1 * totalRetries));                          Assert.That(mqHost.GetStats().TotalMessagesProcessed' Is.EqualTo(2 + 1));                          Thread.Sleep(100);                      }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_retry_messages_with_errors_by_RetryCount,The following statement contains a magic number: 5.Times(x => mqClient.Publish(new AlwaysThrows { Value = "#" + x }));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_retry_messages_with_errors_by_RetryCount,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                  {                      Assert.That(mqHost.GetStats().TotalMessagesFailed' Is.EqualTo((1 + 5) * totalRetries));                      Assert.That(mqHost.GetStats().TotalMessagesProcessed' Is.EqualTo(6));                        Assert.That(reverseCalled' Is.EqualTo(2 + 2));                      Assert.That(rot13Called' Is.EqualTo(1 + 1));                        Thread.Sleep(100);                  }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_retry_messages_with_errors_by_RetryCount,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                  {                      Assert.That(mqHost.GetStats().TotalMessagesFailed' Is.EqualTo((1 + 5) * totalRetries));                      Assert.That(mqHost.GetStats().TotalMessagesProcessed' Is.EqualTo(6));                        Assert.That(reverseCalled' Is.EqualTo(2 + 2));                      Assert.That(rot13Called' Is.EqualTo(1 + 1));                        Thread.Sleep(100);                  }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_retry_messages_with_errors_by_RetryCount,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                  {                      Assert.That(mqHost.GetStats().TotalMessagesFailed' Is.EqualTo((1 + 5) * totalRetries));                      Assert.That(mqHost.GetStats().TotalMessagesProcessed' Is.EqualTo(6));                        Assert.That(reverseCalled' Is.EqualTo(2 + 2));                      Assert.That(rot13Called' Is.EqualTo(1 + 1));                        Thread.Sleep(100);                  }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_retry_messages_with_errors_by_RetryCount,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                  {                      Assert.That(mqHost.GetStats().TotalMessagesFailed' Is.EqualTo((1 + 5) * totalRetries));                      Assert.That(mqHost.GetStats().TotalMessagesProcessed' Is.EqualTo(6));                        Assert.That(reverseCalled' Is.EqualTo(2 + 2));                      Assert.That(rot13Called' Is.EqualTo(1 + 1));                        Thread.Sleep(100);                  }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_retry_messages_with_errors_by_RetryCount,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                  {                      Assert.That(mqHost.GetStats().TotalMessagesFailed' Is.EqualTo((1 + 5) * totalRetries));                      Assert.That(mqHost.GetStats().TotalMessagesProcessed' Is.EqualTo(6));                        Assert.That(reverseCalled' Is.EqualTo(2 + 2));                      Assert.That(rot13Called' Is.EqualTo(1 + 1));                        Thread.Sleep(100);                  }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_retry_messages_with_errors_by_RetryCount,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                  {                      Assert.That(mqHost.GetStats().TotalMessagesFailed' Is.EqualTo((1 + 5) * totalRetries));                      Assert.That(mqHost.GetStats().TotalMessagesProcessed' Is.EqualTo(6));                        Assert.That(reverseCalled' Is.EqualTo(2 + 2));                      Assert.That(rot13Called' Is.EqualTo(1 + 1));                        Thread.Sleep(100);                  }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_process_messages_sent_before_it_was_started,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                      {                          Assert.That(mqServer.GetStats().TotalMessagesProcessed' Is.EqualTo(4));                          Assert.That(reverseCalled' Is.EqualTo(4));                          Thread.Sleep(100);                      }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_process_messages_sent_before_it_was_started,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                      {                          Assert.That(mqServer.GetStats().TotalMessagesProcessed' Is.EqualTo(4));                          Assert.That(reverseCalled' Is.EqualTo(4));                          Thread.Sleep(100);                      }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_process_messages_sent_before_it_was_started,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                      {                          Assert.That(mqServer.GetStats().TotalMessagesProcessed' Is.EqualTo(4));                          Assert.That(reverseCalled' Is.EqualTo(4));                          Thread.Sleep(100);                      }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RabbitMqServerFragileTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RabbitMqServerTests.cs,Does_process_messages_sent_before_it_was_started,The following statement contains a magic number: ExecUtils.RetryOnException(() =>                      {                          Assert.That(mqServer.GetStats().TotalMessagesProcessed' Is.EqualTo(4));                          Assert.That(reverseCalled' Is.EqualTo(4));                          Thread.Sleep(100);                      }' TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisFailoverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisFailoverTests.cs,Can_recover_from_server_terminated_client_connection,The following statement contains a magic number: const int SleepHoldingClientMs = 5;
Magic Number,ServiceStack.Server.Tests.Messaging,RedisFailoverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisFailoverTests.cs,Can_recover_from_server_terminated_client_connection,The following statement contains a magic number: const int loop = 1000;
Magic Number,ServiceStack.Server.Tests.Messaging,RedisFailoverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisFailoverTests.cs,Can_recover_from_server_terminated_client_connection,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisFailoverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisFailoverTests.cs,Can_MqServer_recover_from_server_terminated_client_connections,The following statement contains a magic number: var mqHost = new RedisMqServer(clientManager' retryCount: 2);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisFailoverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisFailoverTests.cs,Can_MqServer_recover_from_server_terminated_client_connections,The following statement contains a magic number: 10.Times(i =>                  {                      ThreadPool.QueueUserWorkItem(x => {                           using (var client = mqHost.CreateMessageQueueClient())                          {                              "Publish: {0}...".Print(i);                              client.Publish(new Incr { Value = i });                                                            Thread.Sleep(10);                          }                      });              });
Magic Number,ServiceStack.Server.Tests.Messaging,RedisFailoverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisFailoverTests.cs,Can_MqServer_recover_from_server_terminated_client_connections,The following statement contains a magic number: 10.Times(i =>                  {                      ThreadPool.QueueUserWorkItem(x => {                           using (var client = mqHost.CreateMessageQueueClient())                          {                              "Publish: {0}...".Print(i);                              client.Publish(new Incr { Value = i });                                                            Thread.Sleep(10);                          }                      });              });
Magic Number,ServiceStack.Server.Tests.Messaging,RedisFailoverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisFailoverTests.cs,Can_MqServer_recover_from_server_terminated_client_connections,The following statement contains a magic number: 20.Times(i =>              {                  using (var client = mqHost.CreateMessageQueueClient())                  {                      "Publish: {0}...".Print(i);                      client.Publish(new Incr { Value = i });                  }                    Thread.Sleep(2000);              });
Magic Number,ServiceStack.Server.Tests.Messaging,RedisFailoverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisFailoverTests.cs,Can_MqServer_recover_from_server_terminated_client_connections,The following statement contains a magic number: 20.Times(i =>              {                  using (var client = mqHost.CreateMessageQueueClient())                  {                      "Publish: {0}...".Print(i);                      client.Publish(new Incr { Value = i });                  }                    Thread.Sleep(2000);              });
Magic Number,ServiceStack.Server.Tests.Messaging,RedisFailoverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisFailoverTests.cs,Can_failover_at_runtime,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisFailoverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisFailoverTests.cs,Can_failover_at_runtime,The following statement contains a magic number: Assert.That(localIncr + failoverIncr' Is.EqualTo(100));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisFailoverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisFailoverTests.cs,RunInLoop,The following statement contains a magic number: 10.Times(i =>              {                  ThreadPool.QueueUserWorkItem(_ =>                  {                      while (Interlocked.Decrement(ref iterations) >= 0)                      {                          using (var client = clientManager.GetClient())                          {                              try                              {                                  var result = client.Increment("test:failover"' 1);                                  Interlocked.Increment(ref count);                                  if (count % (iterations / 10) == 0)                                      lock (clientManager)                                          Console.WriteLine("count: {0}' errors: {1}"' count' errors);                              }                              catch (Exception)                              {                                  Interlocked.Increment(ref errors);                              }                              Thread.Sleep(sleepMs);                          }                      }                        if (callback != null)                      {                          callback();                          callback = null;                      }                  });              });
Magic Number,ServiceStack.Server.Tests.Messaging,RedisFailoverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisFailoverTests.cs,RunInLoop,The following statement contains a magic number: 10.Times(i =>              {                  ThreadPool.QueueUserWorkItem(_ =>                  {                      while (Interlocked.Decrement(ref iterations) >= 0)                      {                          using (var client = clientManager.GetClient())                          {                              try                              {                                  var result = client.Increment("test:failover"' 1);                                  Interlocked.Increment(ref count);                                  if (count % (iterations / 10) == 0)                                      lock (clientManager)                                          Console.WriteLine("count: {0}' errors: {1}"' count' errors);                              }                              catch (Exception)                              {                                  Interlocked.Increment(ref errors);                              }                              Thread.Sleep(sleepMs);                          }                      }                        if (callback != null)                      {                          callback();                          callback = null;                      }                  });              });
Magic Number,ServiceStack.Server.Tests.Messaging,RedisFailoverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisFailoverTests.cs,Can_failover_MqServer_at_runtime,The following statement contains a magic number: const int iterations = 100;
Magic Number,ServiceStack.Server.Tests.Messaging,RedisFailoverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisFailoverTests.cs,Can_failover_MqServer_at_runtime,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisFailoverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisFailoverTests.cs,Can_failover_MqServer_at_runtime,The following statement contains a magic number: Assert.That(received' Is.EqualTo(100));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisFailoverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisFailoverTests.cs,Can_failover_MqServer_at_runtime,The following statement contains a magic number: Assert.That(map.Count' Is.EqualTo(2));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisFailoverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisFailoverTests.cs,RunMqInLoop,The following statement contains a magic number: 10.Times(i =>              {                  ThreadPool.QueueUserWorkItem(_ =>                  {                      while (Interlocked.Decrement(ref iterations) >= 0)                      {                          using (var client = mqServer.CreateMessageQueueClient())                          {                              try                              {                                  var redis = (RedisNativeClient)((RedisMessageQueueClient)client).ReadWriteClient;                                    client.Publish(new Msg { Host = redis.Host + ":" + redis.Port });                                  Interlocked.Increment(ref count);                                  if (count % (iterations / 10) == 0)                                      lock (mqServer)                                          "count: {0}' errors: {1}".Print(count' errors);                              }                              catch (Exception)                              {                                  Interlocked.Increment(ref errors);                              }                              Thread.Sleep(sleepMs);                          }                      }                        lock (mqServer)                      {                          if (callback != null)                          {                              callback();                              callback = null;                          }                      }                  });              });
Magic Number,ServiceStack.Server.Tests.Messaging,RedisFailoverTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisFailoverTests.cs,RunMqInLoop,The following statement contains a magic number: 10.Times(i =>              {                  ThreadPool.QueueUserWorkItem(_ =>                  {                      while (Interlocked.Decrement(ref iterations) >= 0)                      {                          using (var client = mqServer.CreateMessageQueueClient())                          {                              try                              {                                  var redis = (RedisNativeClient)((RedisMessageQueueClient)client).ReadWriteClient;                                    client.Publish(new Msg { Host = redis.Host + ":" + redis.Port });                                  Interlocked.Increment(ref count);                                  if (count % (iterations / 10) == 0)                                      lock (mqServer)                                          "count: {0}' errors: {1}".Print(count' errors);                              }                              catch (Exception)                              {                                  Interlocked.Increment(ref errors);                              }                              Thread.Sleep(sleepMs);                          }                      }                        lock (mqServer)                      {                          if (callback != null)                          {                              callback();                              callback = null;                          }                      }                  });              });
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerSleepServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerSleepServerTests.cs,CreateServer,The following statement contains a magic number: mqServer.RegisterHandler<Sleep10>(m => {                  Thread.Sleep(10);                  return new Sleep10 { Id = Interlocked.Increment(ref counter.Sleep10) };              });
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerSleepServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerSleepServerTests.cs,CreateServer,The following statement contains a magic number: mqServer.RegisterHandler<Sleep100>(m => {                  Thread.Sleep(100);                  return new Sleep100 { Id = Interlocked.Increment(ref counter.Sleep100) };              });
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerSleepServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerSleepServerTests.cs,CreateServer,The following statement contains a magic number: mqServer.RegisterHandler<Sleep1000>(m => {                  Thread.Sleep(1000);                  return new Sleep1000 { Id = Interlocked.Increment(ref counter.Sleep1000) };              });
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerSleepServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerSleepServerTests.cs,Run_for_5_seconds,The following statement contains a magic number: RunFor(TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerSleepServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerSleepServerTests.cs,Run_for_10_seconds,The following statement contains a magic number: RunFor(TimeSpan.FromSeconds(10));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerSleepServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerSleepServerTests.cs,Run_for_30_seconds,The following statement contains a magic number: RunFor(TimeSpan.FromSeconds(30));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerSpinServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerSpinServerTests.cs,CreateServer,The following statement contains a magic number: mqServer.RegisterHandler<Spin10>(m => {                  var sw = Stopwatch.StartNew();                  SpinWait.SpinUntil(() => sw.ElapsedMilliseconds < 10);                  return new Spin10 { Id = Interlocked.Increment(ref counter.Spin10) };              });
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerSpinServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerSpinServerTests.cs,CreateServer,The following statement contains a magic number: mqServer.RegisterHandler<Spin100>(m => {                  var sw = Stopwatch.StartNew();                  SpinWait.SpinUntil(() => sw.ElapsedMilliseconds < 100);                  return new Spin100 { Id = Interlocked.Increment(ref counter.Spin100) };              });
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerSpinServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerSpinServerTests.cs,CreateServer,The following statement contains a magic number: mqServer.RegisterHandler<Spin1000>(m => {                  var sw = Stopwatch.StartNew();                  SpinWait.SpinUntil(() => sw.ElapsedMilliseconds < 1000);                  return new Spin1000 { Id = Interlocked.Increment(ref counter.Spin1000) };              });
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerSpinServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerSpinServerTests.cs,Run_for_5_seconds,The following statement contains a magic number: RunFor(TimeSpan.FromSeconds(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerSpinServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerSpinServerTests.cs,Run_for_10_seconds,The following statement contains a magic number: RunFor(TimeSpan.FromSeconds(10));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerSpinServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerSpinServerTests.cs,Run_for_30_seconds,The following statement contains a magic number: RunFor(TimeSpan.FromSeconds(30));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Utils_publish_Reverse_messages,The following statement contains a magic number: var mqHost = new RedisMqServer(TestConfig.BasicClientManger' 2);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Utils_publish_Rot13_messages,The following statement contains a magic number: var mqHost = new RedisMqServer(TestConfig.BasicClientManger' 2);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_process_messages_sent_before_it_was_started,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_process_messages_sent_before_it_was_started,The following statement contains a magic number: Assert.That(mqHost.GetStats().TotalMessagesProcessed' Is.EqualTo(4));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_process_messages_sent_before_it_was_started,The following statement contains a magic number: Assert.That(reverseCalled' Is.EqualTo(4));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: Assert.That(mqHost.GetStats().TotalMessagesProcessed' Is.EqualTo(3));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: 10.Times(x => ThreadPool.QueueUserWorkItem(y => mqHost.Start()));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: 5.Times(x => ThreadPool.QueueUserWorkItem(y => mqHost.Stop()));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: 10.Times(x => ThreadPool.QueueUserWorkItem(y => mqHost.Start()));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: Assert.That(mqHost.GetStats().TotalMessagesProcessed' Is.EqualTo(5));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: Assert.That(reverseCalled' Is.EqualTo(3));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing,The following statement contains a magic number: Assert.That(rot13Called' Is.EqualTo(2));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Only_allows_1_BgThread_to_run_at_a_time,The following statement contains a magic number: 5.Times(x => ThreadPool.QueueUserWorkItem(y => mqHost.Start()));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Only_allows_1_BgThread_to_run_at_a_time,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Only_allows_1_BgThread_to_run_at_a_time,The following statement contains a magic number: 10.Times(x => ThreadPool.QueueUserWorkItem(y => mqHost.Stop()));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Only_allows_1_BgThread_to_run_at_a_time,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Only_allows_1_BgThread_to_run_at_a_time,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Only_allows_1_BgThread_to_run_at_a_time,The following statement contains a magic number: Assert.That(redisPubSub.BgThreadCount' Is.EqualTo(2));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Cannot_Stop_a_Disposed_MqHost,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_retry_messages_with_errors_by_RetryCount,The following statement contains a magic number: var retryCount = 3;
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_retry_messages_with_errors_by_RetryCount,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_retry_messages_with_errors_by_RetryCount,The following statement contains a magic number: Assert.That(mqHost.GetStats().TotalMessagesProcessed' Is.EqualTo(2 + 1));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_retry_messages_with_errors_by_RetryCount,The following statement contains a magic number: 5.Times(x => mqClient.Publish(new AlwaysThrows { Value = "#" + x }));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_retry_messages_with_errors_by_RetryCount,The following statement contains a magic number: Thread.Sleep(5000);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_retry_messages_with_errors_by_RetryCount,The following statement contains a magic number: Assert.That(mqHost.GetStats().TotalMessagesFailed' Is.EqualTo((1 + 5) * totalRetries));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_retry_messages_with_errors_by_RetryCount,The following statement contains a magic number: Assert.That(mqHost.GetStats().TotalMessagesProcessed' Is.EqualTo(6));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_retry_messages_with_errors_by_RetryCount,The following statement contains a magic number: Assert.That(reverseCalled' Is.EqualTo(2 + 2));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Does_retry_messages_with_errors_by_RetryCount,The following statement contains a magic number: Assert.That(reverseCalled' Is.EqualTo(2 + 2));
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Can_receive_and_process_same_reply_responses,The following statement contains a magic number: var incr = new Incr { Value = 5 };
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Can_receive_and_process_same_reply_responses,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Can_receive_and_process_standard_request_reply_combo,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Can_BlockingPop_from_multiple_queues,The following statement contains a magic number: const int noOf = 5;
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Can_BlockingPop_from_multiple_queues,The following statement contains a magic number: ThreadPool.QueueUserWorkItem(state => {                  Thread.Sleep(100);                  var i = 0;                  var client = RedisClient.New();                  foreach (var queueName in queueNames)                  {                      var msgName = "msg:" + Interlocked.Increment(ref i);                      Debug.WriteLine("SEND " + msgName);                      client.PrependItemToList(queueName' msgName);                  }              });
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Can_BlockingPop_from_multiple_queues,The following statement contains a magic number: noOf.Times(x => {                  Debug.WriteLine("Blocking... " + x);                  var result = server.BlockingDequeueItemFromLists(queueNames' TimeSpan.FromSeconds(3));                  Debug.WriteLine("RECV: " + result.Dump());              });
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Can_handle_requests_concurrently_in_2_threads,The following statement contains a magic number: RunHandlerOnMultipleThreads(noOfThreads: 2' msgs: 10);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Can_handle_requests_concurrently_in_2_threads,The following statement contains a magic number: RunHandlerOnMultipleThreads(noOfThreads: 2' msgs: 10);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Can_handle_requests_concurrently_in_3_threads,The following statement contains a magic number: RunHandlerOnMultipleThreads(noOfThreads: 3' msgs: 10);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Can_handle_requests_concurrently_in_3_threads,The following statement contains a magic number: RunHandlerOnMultipleThreads(noOfThreads: 3' msgs: 10);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Can_handle_requests_concurrently_in_4_threads,The following statement contains a magic number: RunHandlerOnMultipleThreads(noOfThreads: 4' msgs: 10);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,Can_handle_requests_concurrently_in_4_threads,The following statement contains a magic number: RunHandlerOnMultipleThreads(noOfThreads: 4' msgs: 10);
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,RunHandlerOnMultipleThreads,The following statement contains a magic number: var dto = new Wait { ForMs = 100 };
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,RunHandlerOnMultipleThreads,The following statement contains a magic number: const double buffer = 1.1;
Magic Number,ServiceStack.Server.Tests.Messaging,RedisMqServerTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Messaging\RedisMqServerTests.cs,RunHandlerOnMultipleThreads,The following statement contains a magic number: var sleepForMs = (int)((msgs * 100 / (double)noOfThreads) * buffer);
Magic Number,ServiceStack.Server.Tests.Shared,Item,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,GetHashCode,The following statement contains a magic number: return (Id * 397) ^ (Name != null ? Name.GetHashCode() : 0);
Magic Number,ServiceStack.Server.Tests.Shared,AllFields,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ NullableId.GetHashCode();
Magic Number,ServiceStack.Server.Tests.Shared,AllFields,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Byte.GetHashCode();
Magic Number,ServiceStack.Server.Tests.Shared,AllFields,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Short.GetHashCode();
Magic Number,ServiceStack.Server.Tests.Shared,AllFields,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Int;
Magic Number,ServiceStack.Server.Tests.Shared,AllFields,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Long.GetHashCode();
Magic Number,ServiceStack.Server.Tests.Shared,AllFields,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ UShort.GetHashCode();
Magic Number,ServiceStack.Server.Tests.Shared,AllFields,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (int)UInt;
Magic Number,ServiceStack.Server.Tests.Shared,AllFields,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ ULong.GetHashCode();
Magic Number,ServiceStack.Server.Tests.Shared,AllFields,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Float.GetHashCode();
Magic Number,ServiceStack.Server.Tests.Shared,AllFields,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Double.GetHashCode();
Magic Number,ServiceStack.Server.Tests.Shared,AllFields,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Decimal.GetHashCode();
Magic Number,ServiceStack.Server.Tests.Shared,AllFields,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (String != null ? String.GetHashCode() : 0);
Magic Number,ServiceStack.Server.Tests.Shared,AllFields,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ DateTime.GetHashCode();
Magic Number,ServiceStack.Server.Tests.Shared,AllFields,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ TimeSpan.GetHashCode();
Magic Number,ServiceStack.Server.Tests.Shared,AllFields,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Guid.GetHashCode();
Magic Number,ServiceStack.Server.Tests.Shared,AllFields,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ NullableDateTime.GetHashCode();
Magic Number,ServiceStack.Server.Tests.Shared,AllFields,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ NullableTimeSpan.GetHashCode();
Magic Number,ServiceStack.Server.Tests.Shared,AllFields,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ NullableGuid.GetHashCode();
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Does_flush_all,The following statement contains a magic number: 3.Times(i =>                  Cache.Set(i.ToUrn<Item>()' new Item { Id = i' Name = "Name" + i }));
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_update_existing_entry,The following statement contains a magic number: Cache.Set(key' new Item { Id = 2' Name = "Updated" });
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_update_existing_entry,The following statement contains a magic number: Assert.That(item.Id' Is.EqualTo(2));
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Does_SetAll_and_GetAll,The following statement contains a magic number: var map = 3.Times(i => new Item { Id = i' Name = "Name" + i })                  .ToSafeDictionary(x => x.ToUrn());
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Does_not_return_expired_items,The following statement contains a magic number: Cache.Set(key' new Item { Id = 1' Name = "Foo" }' TimeSpan.FromMilliseconds(100));
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Does_not_return_expired_items,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Does_not_return_expired_items,The following statement contains a magic number: Cache.Set(key' new Item { Id = 1' Name = "Foo" }' DateTime.UtcNow.AddMilliseconds(200));
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Does_not_return_expired_items,The following statement contains a magic number: Thread.Sleep(300);
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Expired_item_returns_correct_GetTimeToLive,The following statement contains a magic number: var value = Cache.GetOrCreate(key' TimeSpan.FromMilliseconds(100)' () => 1);
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Expired_item_returns_correct_GetTimeToLive,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_increment_and_decrement_values,The following statement contains a magic number: Assert.That(Cache.Increment("incr:a"' 2)' Is.EqualTo(2));
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_increment_and_decrement_values,The following statement contains a magic number: Assert.That(Cache.Increment("incr:a"' 2)' Is.EqualTo(2));
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_increment_and_decrement_values,The following statement contains a magic number: Assert.That(Cache.Increment("incr:a"' 3)' Is.EqualTo(5));
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_increment_and_decrement_values,The following statement contains a magic number: Assert.That(Cache.Increment("incr:a"' 3)' Is.EqualTo(5));
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_increment_and_decrement_values,The following statement contains a magic number: Assert.That(Cache.Decrement("decr:a"' 2)' Is.EqualTo(-2));
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_increment_and_decrement_values,The following statement contains a magic number: Assert.That(Cache.Decrement("decr:a"' 2)' Is.EqualTo(-2));
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_increment_and_decrement_values,The following statement contains a magic number: Assert.That(Cache.Decrement("decr:a"' 3)' Is.EqualTo(-5));
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_increment_and_decrement_values,The following statement contains a magic number: Assert.That(Cache.Decrement("decr:a"' 3)' Is.EqualTo(-5));
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_increment_and_reset_values,The following statement contains a magic number: Assert.That(Cache.Increment("incr:counter"' 10)' Is.EqualTo(10));
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_increment_and_reset_values,The following statement contains a magic number: Assert.That(Cache.Increment("incr:counter"' 10)' Is.EqualTo(10));
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_increment_and_reset_values,The following statement contains a magic number: Assert.That(Cache.Increment("incr:counter"' 10)' Is.EqualTo(10));
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_increment_and_reset_values,The following statement contains a magic number: Assert.That(Cache.Increment("incr:counter"' 10)' Is.EqualTo(10));
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_remove_multiple_items,The following statement contains a magic number: var map = 5.Times(i => new Item { Id = i' Name = "Name" + i })                  .ToSafeDictionary(x => x.ToUrn());
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_remove_multiple_items,The following statement contains a magic number: Assert.That(cacheMap.Count' Is.EqualTo(5));
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_cache_multiple_items_in_parallel,The following statement contains a magic number: var fns = 10.Times(i => (Action)(() =>              {                  cache.Set("concurrent-test"' "Data: {0}".Fmt(i));              }));
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_set_get_and_remove_ISession,The following statement contains a magic number: 3.Times(i =>              {                  sessionA.Set("key" + i' "value" + i);                  sessionB.Set("key" + i' "value" + i);              });
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_GetKeysByPattern,The following statement contains a magic number: 5.Times(i =>              {                  IAuthSession session = new CustomAuthSession                  {                      Id = "sess-" + i'                      UserAuthId = i.ToString()'                      Custom = "custom" + i                  };                    var sessionKey = SessionFeature.GetSessionKey(session.Id);                  Cache.Set(sessionKey' session' SessionFeature.DefaultSessionExpiry);                  Cache.Set("otherkey" + i' i);              });
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_GetKeysByPattern,The following statement contains a magic number: Assert.That(sessionKeys.Count' Is.EqualTo(5));
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_GetKeysByPattern,The following statement contains a magic number: Assert.That(allKeys.Count' Is.EqualTo(10));
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_Cache_AllFields,The following statement contains a magic number: var dto = new AllFields              {                  Id = 1'                  NullableId = 2'                  Byte = 3'                  Short = 4'                  Int = 5'                  Long = 6'                  UShort = 7'                  UInt = 8'                  Float = 1.1f'                  Double = 2.2d'                  Decimal = 3.3m'                  String = "String"'                  DateTime = DateTime.Now'                  TimeSpan = new TimeSpan(1' 1' 1' 1' 1)'                  Guid = Guid.NewGuid()'                  NullableTimeSpan = new TimeSpan(2' 2' 2)'                  NullableGuid = new Guid("4B6BB8AE-57B5-4B5B-8632-0C35AF0B3168")'              };
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_Cache_AllFields,The following statement contains a magic number: var dto = new AllFields              {                  Id = 1'                  NullableId = 2'                  Byte = 3'                  Short = 4'                  Int = 5'                  Long = 6'                  UShort = 7'                  UInt = 8'                  Float = 1.1f'                  Double = 2.2d'                  Decimal = 3.3m'                  String = "String"'                  DateTime = DateTime.Now'                  TimeSpan = new TimeSpan(1' 1' 1' 1' 1)'                  Guid = Guid.NewGuid()'                  NullableTimeSpan = new TimeSpan(2' 2' 2)'                  NullableGuid = new Guid("4B6BB8AE-57B5-4B5B-8632-0C35AF0B3168")'              };
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_Cache_AllFields,The following statement contains a magic number: var dto = new AllFields              {                  Id = 1'                  NullableId = 2'                  Byte = 3'                  Short = 4'                  Int = 5'                  Long = 6'                  UShort = 7'                  UInt = 8'                  Float = 1.1f'                  Double = 2.2d'                  Decimal = 3.3m'                  String = "String"'                  DateTime = DateTime.Now'                  TimeSpan = new TimeSpan(1' 1' 1' 1' 1)'                  Guid = Guid.NewGuid()'                  NullableTimeSpan = new TimeSpan(2' 2' 2)'                  NullableGuid = new Guid("4B6BB8AE-57B5-4B5B-8632-0C35AF0B3168")'              };
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_Cache_AllFields,The following statement contains a magic number: var dto = new AllFields              {                  Id = 1'                  NullableId = 2'                  Byte = 3'                  Short = 4'                  Int = 5'                  Long = 6'                  UShort = 7'                  UInt = 8'                  Float = 1.1f'                  Double = 2.2d'                  Decimal = 3.3m'                  String = "String"'                  DateTime = DateTime.Now'                  TimeSpan = new TimeSpan(1' 1' 1' 1' 1)'                  Guid = Guid.NewGuid()'                  NullableTimeSpan = new TimeSpan(2' 2' 2)'                  NullableGuid = new Guid("4B6BB8AE-57B5-4B5B-8632-0C35AF0B3168")'              };
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_Cache_AllFields,The following statement contains a magic number: var dto = new AllFields              {                  Id = 1'                  NullableId = 2'                  Byte = 3'                  Short = 4'                  Int = 5'                  Long = 6'                  UShort = 7'                  UInt = 8'                  Float = 1.1f'                  Double = 2.2d'                  Decimal = 3.3m'                  String = "String"'                  DateTime = DateTime.Now'                  TimeSpan = new TimeSpan(1' 1' 1' 1' 1)'                  Guid = Guid.NewGuid()'                  NullableTimeSpan = new TimeSpan(2' 2' 2)'                  NullableGuid = new Guid("4B6BB8AE-57B5-4B5B-8632-0C35AF0B3168")'              };
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_Cache_AllFields,The following statement contains a magic number: var dto = new AllFields              {                  Id = 1'                  NullableId = 2'                  Byte = 3'                  Short = 4'                  Int = 5'                  Long = 6'                  UShort = 7'                  UInt = 8'                  Float = 1.1f'                  Double = 2.2d'                  Decimal = 3.3m'                  String = "String"'                  DateTime = DateTime.Now'                  TimeSpan = new TimeSpan(1' 1' 1' 1' 1)'                  Guid = Guid.NewGuid()'                  NullableTimeSpan = new TimeSpan(2' 2' 2)'                  NullableGuid = new Guid("4B6BB8AE-57B5-4B5B-8632-0C35AF0B3168")'              };
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_Cache_AllFields,The following statement contains a magic number: var dto = new AllFields              {                  Id = 1'                  NullableId = 2'                  Byte = 3'                  Short = 4'                  Int = 5'                  Long = 6'                  UShort = 7'                  UInt = 8'                  Float = 1.1f'                  Double = 2.2d'                  Decimal = 3.3m'                  String = "String"'                  DateTime = DateTime.Now'                  TimeSpan = new TimeSpan(1' 1' 1' 1' 1)'                  Guid = Guid.NewGuid()'                  NullableTimeSpan = new TimeSpan(2' 2' 2)'                  NullableGuid = new Guid("4B6BB8AE-57B5-4B5B-8632-0C35AF0B3168")'              };
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_Cache_AllFields,The following statement contains a magic number: var dto = new AllFields              {                  Id = 1'                  NullableId = 2'                  Byte = 3'                  Short = 4'                  Int = 5'                  Long = 6'                  UShort = 7'                  UInt = 8'                  Float = 1.1f'                  Double = 2.2d'                  Decimal = 3.3m'                  String = "String"'                  DateTime = DateTime.Now'                  TimeSpan = new TimeSpan(1' 1' 1' 1' 1)'                  Guid = Guid.NewGuid()'                  NullableTimeSpan = new TimeSpan(2' 2' 2)'                  NullableGuid = new Guid("4B6BB8AE-57B5-4B5B-8632-0C35AF0B3168")'              };
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_Cache_AllFields,The following statement contains a magic number: var dto = new AllFields              {                  Id = 1'                  NullableId = 2'                  Byte = 3'                  Short = 4'                  Int = 5'                  Long = 6'                  UShort = 7'                  UInt = 8'                  Float = 1.1f'                  Double = 2.2d'                  Decimal = 3.3m'                  String = "String"'                  DateTime = DateTime.Now'                  TimeSpan = new TimeSpan(1' 1' 1' 1' 1)'                  Guid = Guid.NewGuid()'                  NullableTimeSpan = new TimeSpan(2' 2' 2)'                  NullableGuid = new Guid("4B6BB8AE-57B5-4B5B-8632-0C35AF0B3168")'              };
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_Cache_AllFields,The following statement contains a magic number: var dto = new AllFields              {                  Id = 1'                  NullableId = 2'                  Byte = 3'                  Short = 4'                  Int = 5'                  Long = 6'                  UShort = 7'                  UInt = 8'                  Float = 1.1f'                  Double = 2.2d'                  Decimal = 3.3m'                  String = "String"'                  DateTime = DateTime.Now'                  TimeSpan = new TimeSpan(1' 1' 1' 1' 1)'                  Guid = Guid.NewGuid()'                  NullableTimeSpan = new TimeSpan(2' 2' 2)'                  NullableGuid = new Guid("4B6BB8AE-57B5-4B5B-8632-0C35AF0B3168")'              };
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_Cache_AllFields,The following statement contains a magic number: var dto = new AllFields              {                  Id = 1'                  NullableId = 2'                  Byte = 3'                  Short = 4'                  Int = 5'                  Long = 6'                  UShort = 7'                  UInt = 8'                  Float = 1.1f'                  Double = 2.2d'                  Decimal = 3.3m'                  String = "String"'                  DateTime = DateTime.Now'                  TimeSpan = new TimeSpan(1' 1' 1' 1' 1)'                  Guid = Guid.NewGuid()'                  NullableTimeSpan = new TimeSpan(2' 2' 2)'                  NullableGuid = new Guid("4B6BB8AE-57B5-4B5B-8632-0C35AF0B3168")'              };
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_Cache_AllFields,The following statement contains a magic number: var dto = new AllFields              {                  Id = 1'                  NullableId = 2'                  Byte = 3'                  Short = 4'                  Int = 5'                  Long = 6'                  UShort = 7'                  UInt = 8'                  Float = 1.1f'                  Double = 2.2d'                  Decimal = 3.3m'                  String = "String"'                  DateTime = DateTime.Now'                  TimeSpan = new TimeSpan(1' 1' 1' 1' 1)'                  Guid = Guid.NewGuid()'                  NullableTimeSpan = new TimeSpan(2' 2' 2)'                  NullableGuid = new Guid("4B6BB8AE-57B5-4B5B-8632-0C35AF0B3168")'              };
Magic Number,ServiceStack.Server.Tests.Shared,CacheClientTestsBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.Server.Tests\Shared\CacheClientTestsBase.cs,Can_Cache_AllFields,The following statement contains a magic number: var dto = new AllFields              {                  Id = 1'                  NullableId = 2'                  Byte = 3'                  Short = 4'                  Int = 5'                  Long = 6'                  UShort = 7'                  UInt = 8'                  Float = 1.1f'                  Double = 2.2d'                  Decimal = 3.3m'                  String = "String"'                  DateTime = DateTime.Now'                  TimeSpan = new TimeSpan(1' 1' 1' 1' 1)'                  Guid = Guid.NewGuid()'                  NullableTimeSpan = new TimeSpan(2' 2' 2)'                  NullableGuid = new Guid("4B6BB8AE-57B5-4B5B-8632-0C35AF0B3168")'              };
