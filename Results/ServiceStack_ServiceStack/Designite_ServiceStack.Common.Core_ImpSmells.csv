Implementation smell,Namespace,Class,File,Method,Description
Long Method,ServiceStack,StringUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\StringUtils.cs,ParseCommands,The method has 117 lines of code.
Long Method,ServiceStack,StringUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\StringUtils.cs,ParseArguments,The method has 107 lines of code.
Long Method,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,FormControl,The method has 207 lines of code.
Long Method,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,BundleAsset,The method has 174 lines of code.
Long Method,ServiceStack.Script,JsCallExpression,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsCallExpression.cs,Evaluate,The method has 124 lines of code.
Long Method,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsToken,The method has 212 lines of code.
Long Method,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsBinaryOperator,The method has 119 lines of code.
Long Method,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,TextDump,The method has 150 lines of code.
Long Method,ServiceStack.Script,HtmlScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\HtmlScripts.cs,HtmlDump,The method has 128 lines of code.
Long Method,ServiceStack.Script,ProtectedScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\ProtectedScripts.cs,typeof,The method has 141 lines of code.
Long Method,ServiceStack.Script,PageResult,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageResult.cs,EvaluateAsync,The method has 217 lines of code.
Long Method,ServiceStack.Script,ScriptCodeUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Code.cs,ParseCodeStatements,The method has 113 lines of code.
Long Method,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The method has 590 lines of code.
Long Method,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,Eval,The method has 249 lines of code.
Long Method,ServiceStack.Script,Reader,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,ParseExpression,The method has 109 lines of code.
Long Method,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,ParseTemplate,The method has 140 lines of code.
Long Method,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,CreateBindingExpression,The method has 124 lines of code.
Complex Method,ServiceStack,EnumerableExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\EnumerableExtensions.cs,EquivalentTo,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack,ExpressionUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ExpressionUtils.cs,GetFieldNames,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack,GistLink,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\GitHubGateway.cs,Parse,Cyclomatic complexity of the method is 13
Complex Method,ServiceStack,JSON,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\JSON.cs,parseSpan,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack,RequestExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\RequestExtensions.cs,GetRequestParams,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack,StringUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\StringUtils.cs,ParseCommands,Cyclomatic complexity of the method is 22
Complex Method,ServiceStack,StringUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\StringUtils.cs,ParseArguments,Cyclomatic complexity of the method is 28
Complex Method,ServiceStack,StringUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\StringUtils.cs,ReplaceOutsideOfQuotes,Cyclomatic complexity of the method is 14
Complex Method,ServiceStack,StringUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\StringUtils.cs,ParseTypeIntoNodes,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack,TypeExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\TypeExtensions.cs,AddReferencedTypes,Cyclomatic complexity of the method is 14
Complex Method,ServiceStack,NavDefaults,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,OverrideDefaults,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,NavLink,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,FormControl,Cyclomatic complexity of the method is 42
Complex Method,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,GetBundleFiles,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,BundleAsset,Cyclomatic complexity of the method is 24
Complex Method,ServiceStack.Script,EachScriptBlock,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Blocks\EachScriptBlock.cs,WriteAsync,Cyclomatic complexity of the method is 14
Complex Method,ServiceStack.Script,EachScriptBlock,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Blocks\EachScriptBlock.cs,ParseArgument,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.Script,ScriptHtmlBlock,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Blocks\HtmlScriptBlocks.cs,WriteAsync,Cyclomatic complexity of the method is 16
Complex Method,ServiceStack.Script,JsCallExpression,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsCallExpression.cs,InvokeDelegate,Cyclomatic complexity of the method is 13
Complex Method,ServiceStack.Script,JsCallExpression,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsCallExpression.cs,Evaluate,Cyclomatic complexity of the method is 19
Complex Method,ServiceStack.Script,JsExpressionUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsExpressionUtils.cs,ParseJsExpression,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.Script,JsExpressionUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsExpressionUtils.cs,ParseBinaryExpression,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.Script,JsMemberExpression,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsMemberExpression.cs,GetValue,Cyclomatic complexity of the method is 16
Complex Method,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsToken,Cyclomatic complexity of the method is 36
Complex Method,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsMemberExpression,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsBinaryOperator,Cyclomatic complexity of the method is 28
Complex Method,ServiceStack.Script,CallExpressionUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseArguments,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,addToArgs,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,TryAddToCollection,Cyclomatic complexity of the method is 16
Complex Method,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,toKeys,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,toValues,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,scopeVars,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,selectFields,Cyclomatic complexity of the method is 12
Complex Method,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,selectPartial,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,remove,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,applyInternal,Cyclomatic complexity of the method is 14
Complex Method,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,zip,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,let,Cyclomatic complexity of the method is 14
Complex Method,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,groupBy,Cyclomatic complexity of the method is 12
Complex Method,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,get,Cyclomatic complexity of the method is 13
Complex Method,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,textStyle,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,TextList,Cyclomatic complexity of the method is 12
Complex Method,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,TextDump,Cyclomatic complexity of the method is 19
Complex Method,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,ConvertDumpType,Cyclomatic complexity of the method is 12
Complex Method,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,GetScalarText,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,toQueryString,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,MatchesStringValue,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.Script,MarkdownTable,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Text.cs,Render,Cyclomatic complexity of the method is 14
Complex Method,ServiceStack.Script,HtmlScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\HtmlScripts.cs,HtmlList,Cyclomatic complexity of the method is 17
Complex Method,ServiceStack.Script,HtmlScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\HtmlScripts.cs,HtmlDump,Cyclomatic complexity of the method is 21
Complex Method,ServiceStack.Script,HtmlScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\HtmlScripts.cs,GetScalarHtml,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.Script,HtmlScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\HtmlScripts.cs,htmlClassList,Cyclomatic complexity of the method is 12
Complex Method,ServiceStack.Script,HtmlScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\HtmlScripts.cs,htmlOptions,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.Script,ProtectedScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\ProtectedScripts.cs,ResolveConstructor,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.Script,ProtectedScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\ProtectedScripts.cs,ResolveMethod,Cyclomatic complexity of the method is 19
Complex Method,ServiceStack.Script,PageResult,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageResult.cs,WriteToAsyncInternal,Cyclomatic complexity of the method is 14
Complex Method,ServiceStack.Script,PageResult,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageResult.cs,Init,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack.Script,PageResult,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageResult.cs,WriteVarAsync,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.Script,PageResult,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageResult.cs,EvaluateAsync,Cyclomatic complexity of the method is 24
Complex Method,ServiceStack.Script,ScriptContext,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptContext.cs,Init,Cyclomatic complexity of the method is 23
Complex Method,ServiceStack.Script,ScriptContext,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptContext.cs,ScanType,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.Script,ScriptCode,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Code.cs,WriteStatementAsync,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.Script,ScriptCodeUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Code.cs,ParseCodeStatements,Cyclomatic complexity of the method is 16
Complex Method,ServiceStack.Script,ScriptCodeUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Code.cs,ParseCodeBody,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.Script,ScriptCodeUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Code.cs,ParseCodeElseBlock,Cyclomatic complexity of the method is 10
Complex Method,ServiceStack.Script,Lisp,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,MakeArgTable,Cyclomatic complexity of the method is 12
Complex Method,ServiceStack.Script,Lisp,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,QqExpand1,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack.Script,Lisp,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,Str4,Cyclomatic complexity of the method is 18
Complex Method,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,lispContents,Cyclomatic complexity of the method is 20
Complex Method,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,Eval,Cyclomatic complexity of the method is 54
Complex Method,ServiceStack.Script,ObjectComparer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,GetComparer,Cyclomatic complexity of the method is 8
Complex Method,ServiceStack.Script,Reader,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,ParseExpression,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack.Script,Reader,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,ReadToken,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,ParseTemplateBody,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,ParseTemplateElseBlock,Cyclomatic complexity of the method is 11
Complex Method,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,ParseTemplate,Cyclomatic complexity of the method is 25
Complex Method,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,CreateBindingExpression,Cyclomatic complexity of the method is 16
Complex Method,ServiceStack.Script,TemplateFilterUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptMethods.cs,CreateNewContext,Cyclomatic complexity of the method is 13
Complex Method,ServiceStack.Script,ScriptPreprocessors,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptPreprocessors.cs,TransformCodeBlocks,Cyclomatic complexity of the method is 13
Complex Method,ServiceStack.Script,SharpPage,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\SharpPage.cs,Load,Cyclomatic complexity of the method is 16
Complex Method,ServiceStack.Script,SharpPages,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\SharpPages.cs,GetPage,Cyclomatic complexity of the method is 12
Complex Method,ServiceStack.Script,SharpPages,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\SharpPages.cs,GetLastModifiedPage,Cyclomatic complexity of the method is 16
Complex Method,ServiceStack.VirtualPath,AbstractVirtualPathProviderBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\VirtualPath\AbstractVirtualPathProviderBase.cs,WriteFile,Cyclomatic complexity of the method is 9
Complex Method,ServiceStack.VirtualPath,AbstractVirtualPathProviderBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\VirtualPath\AbstractVirtualPathProviderBase.cs,AppendFile,Cyclomatic complexity of the method is 9
Long Parameter List,ServiceStack,MetadataTypesConfig,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\MetadataTypes.cs,MetadataTypesConfig,The method has 21 parameters. Parameters: baseUrl' makePartial' makeVirtual' addReturnMarker' convertDescriptionToComments' addDataContractAttributes' addIndexesToDataMembers' addGeneratedCodeAttributes' addDefaultXmlNamespace' baseClass' package' addResponseStatus' addServiceStackTypes' addModelExtensions' addPropertyAccessors' excludeGenericBaseTypes' settersReturnThis' makePropertiesOptional' makeDataContractsExtensible' initializeCollections' addImplicitVersion
Long Parameter List,ServiceStack,PerfUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\PerfUtils.cs,Measure,The method has 6 parameters. Parameters: fn' times' runForMs' setup' warmup' teardown
Long Parameter List,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,ResolveWriteVfs,The method has 6 parameters. Parameters: filterName' webVfs' contentVfs' outFile' toDisk' useOutFile
Long Parameter List,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,ResolveVfsAndSource,The method has 6 parameters. Parameters: filterName' webVfs' contentVfs' source' useVfs' useSource
Long Parameter List,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,GetBundleFiles,The method has 5 parameters. Parameters: filterName' webVfs' contentVfs' virtualPaths' assetExt
Long Parameter List,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,BundleJs,The method has 5 parameters. Parameters: filterName' webVfs' contentVfs' jsCompressor' options
Long Parameter List,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,BundleCss,The method has 5 parameters. Parameters: filterName' webVfs' contentVfs' cssCompressor' options
Long Parameter List,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,BundleHtml,The method has 5 parameters. Parameters: filterName' webVfs' contentVfs' htmlCompressor' options
Long Parameter List,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,BundleAsset,The method has 9 parameters. Parameters: filterName' webVfs' contentVfs' jsCompressor' options' origOutFile' outWebPath' htmlTagFmt' assetExt
Long Parameter List,ServiceStack.MiniProfiler.Data,ProfiledDbDataReader,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\MiniProfiler\Data\ProfiledDbDataReader.cs,GetBytes,The method has 5 parameters. Parameters: ordinal' dataOffset' buffer' bufferOffset' length
Long Parameter List,ServiceStack.MiniProfiler.Data,ProfiledDbDataReader,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\MiniProfiler\Data\ProfiledDbDataReader.cs,GetChars,The method has 5 parameters. Parameters: ordinal' dataOffset' buffer' bufferOffset' length
Long Parameter List,ServiceStack.Script,EachArg,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Blocks\EachScriptBlock.cs,EachArg,The method has 8 parameters. Parameters: binding' hasExplicitBinding' source' where' orderBy' orderByDescending' skip' take
Long Parameter List,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,useFmt,The method has 5 parameters. Parameters: ignoreTarget' format' arg1' arg2' arg3
Long Parameter List,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,showFmt,The method has 5 parameters. Parameters: ignoreTarget' format' arg1' arg2' arg3
Long Parameter List,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,showFmtRaw,The method has 5 parameters. Parameters: ignoreTarget' format' arg1' arg2' arg3
Long Parameter List,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,prependToArgs,The method has 5 parameters. Parameters: scope' filterName' value' argExpr' args
Long Parameter List,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,appendToArgs,The method has 5 parameters. Parameters: scope' filterName' value' argExpr' args
Long Parameter List,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,addToStartArgs,The method has 5 parameters. Parameters: scope' filterName' value' argExpr' args
Long Parameter List,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,addToArgs,The method has 5 parameters. Parameters: scope' filterName' value' argExprOrCollection' args
Long Parameter List,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,date,The method has 6 parameters. Parameters: year' month' day' hour' min' secs
Long Parameter List,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,ifThrowArgumentException,The method has 5 parameters. Parameters: scope' test' message' paramName' options
Long Parameter List,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,applyInternal,The method has 6 parameters. Parameters: filterName' scope' target' expression' scopeOptions' fn
Long Parameter List,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,orderByInternal,The method has 5 parameters. Parameters: filterName' scope' target' expression' scopeOptions
Long Parameter List,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,thenByInternal,The method has 5 parameters. Parameters: filterName' scope' target' expression' scopeOptions
Long Parameter List,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,appendFmt,The method has 5 parameters. Parameters: target' format' arg0' arg1' arg2
Long Parameter List,ServiceStack.Script,ProtectedScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\ProtectedScripts.cs,ResolveMethod,The method has 5 parameters. Parameters: type' methodName' argTypes' argsCount' invokerDelegate
Long Parameter List,ServiceStack.Script,PageBlockFragment,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageFragment.cs,PageBlockFragment,The method has 5 parameters. Parameters: originalText' name' argument' body' elseStatements
Long Parameter List,ServiceStack.Script,PageBlockFragment,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageFragment.cs,PageBlockFragment,The method has 5 parameters. Parameters: originalText' name' argument' body' elseStatements
Long Parameter List,ServiceStack.Script,PageBlockFragment,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageFragment.cs,PageBlockFragment,The method has 5 parameters. Parameters: originalText' name' argument' body' elseStatements
Long Parameter List,ServiceStack.Script,PageBlockFragment,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageFragment.cs,PageBlockFragment,The method has 5 parameters. Parameters: originalText' name' argument' body' elseStatements
Long Parameter List,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,GetCachedContents,The method has 5 parameters. Parameters: scope' url' cachePrefix' vfsCache' cachedPath
Long Parameter List,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,CreateStringIndexExpression,The method has 5 parameters. Parameters: body' binding' scope' valueExpr' currType
Long Parameter List,ServiceStack.Script,TemplateFilterUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptMethods.cs,AssertExpression,The method has 5 parameters. Parameters: scope' filterName' expression' scopeOptions' itemBinding
Long Parameter List,ServiceStack.Script,TemplateFilterUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptMethods.cs,GetParamsWithItemBinding,The method has 5 parameters. Parameters: scope' filterName' page' scopedParams' itemBinding
Long Parameter List,ServiceStack.Script,TemplateFilterUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptMethods.cs,GetParamsWithItemBindingOnly,The method has 5 parameters. Parameters: scope' filterName' page' scopedParams' itemBinding
Long Parameter List,ServiceStack.Script,ScriptScopeContextUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptScopeContext.cs,TryGetMethod,The method has 6 parameters. Parameters: scope' name' fnArgValuesCount' fn' scriptMethod' requiresScope
Long Parameter List,ServiceStack.Script,ScriptScopeContextUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptScopeContext.cs,WritePageAsync,The method has 5 parameters. Parameters: scope' page' codePage' pageParams' token
Long Parameter List,ServiceStack.Script,SharpPartialPage,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\SharpPage.cs,SharpPartialPage,The method has 5 parameters. Parameters: context' name' body' format' args
Long Parameter List,ServiceStack.VirtualPath,ResourceVirtualDirectory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\VirtualPath\ResourceVirtualDirectory.cs,ResourceVirtualDirectory,The method has 5 parameters. Parameters: owningProvider' parentDir' backingAsm' lastModified' rootNamespace
Long Parameter List,ServiceStack.VirtualPath,ResourceVirtualDirectory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\VirtualPath\ResourceVirtualDirectory.cs,ResourceVirtualDirectory,The method has 7 parameters. Parameters: owningProvider' parentDir' backingAsm' lastModified' rootNamespace' directoryName' manifestResourceNames
Long Identifier,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,,The length of the parameter ValidationSummaryCssClassNames is 30.
Long Identifier,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,,The length of the parameter ValidationSuccessCssClassNames is 30.
Long Identifier,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,,The length of the parameter EvaluateWhenSkippingFilterExecution is 35.
Long Identifier,ServiceStack.Script,HtmlScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\HtmlScripts.cs,,The length of the parameter EvaluateWhenSkippingFilterExecution is 35.
Long Statement,ServiceStack,CachedExpressionCompiler,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\CachedExpressionCompiler.cs,Wrap,The length of the statement  "            Expression<Func<object' object>> lambdaExpr = Expression.Lambda<Func<object' object>>(Expression.Convert(arg' typeof(object))' _unusedParameterExpr); " is 149.
Long Statement,ServiceStack,IdUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\IdUtils.cs,CreateCacheKeyPath,The length of the statement  "            var path = $"{rootDir}{PclExport.Instance.DirSep}{dir1}{PclExport.Instance.DirSep}{dir2}{PclExport.Instance.DirSep}{idValue}"; " is 126.
Long Statement,ServiceStack,SimpleContainer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\SimpleContainer.cs,RequiredResolve,The length of the statement  "                throw new Exception($"Required Type of '{type.Name}' in '{ownerType.Name}' constructor was not registered in '{GetType().Name}'"); " is 130.
Long Statement,ServiceStack,SimpleContainer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\SimpleContainer.cs,CreateFactory,The length of the statement  "                        Expression.TypeAs(Expression.Call(containerParam' GetType().GetMethod(nameof(Resolve))' Expression.Constant(x.PropertyType))' x.PropertyType) " is 141.
Long Statement,ServiceStack,SimpleContainer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\SimpleContainer.cs,CreateFactory,The length of the statement  "                    Expression.TypeAs(Expression.Call(containerParam' GetType().GetMethod(nameof(RequiredResolve))' Expression.Constant(x.ParameterType)' Expression.Constant(type))' x.ParameterType) " is 178.
Long Statement,ServiceStack,StringUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\StringUtils.cs,ReplacePairs,The length of the statement  "                throw new ArgumentException("Replacement pairs must be an even number of old and new value pairs"' nameof(replaceStringsPairs)); " is 128.
Long Statement,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,HtmlHiddenInputs,The length of the statement  "                    sb.AppendLine($"<input type=\"hidden\" name=\"{entry.Key.HtmlEncode()}\" value=\"{entry.Value?.ToString().HtmlEncode()}\">"); " is 125.
Long Statement,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,FormControl,The length of the statement  "                        sbInput.AppendLine($"  <input type=\"radio\" id=\"{inputId}\" name=\"{name}\" value=\"{kvp.Key}\" class=\"custom-control-input\"{selected}>"); " is 142.
Long Statement,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,FormControl,The length of the statement  "                else throw new NotSupportedException($"input type=radio requires 'values' inputOption containing a collection of Key/Value Pairs"); " is 131.
Long Statement,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,FormControl,The length of the statement  "                        sbInput.AppendLine($"  <input type=\"checkbox\" id=\"{inputId}\" name=\"{name}\" value=\"{kvp.Key}\" class=\"form-check-input\"{selected}>"); " is 141.
Long Statement,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,FormControl,The length of the statement  "                    throw new NotSupportedException($"<select> requires either 'values' inputOption containing a collection of Key/Value Pairs or 'html' argument containing innerHTML <option>'s"); " is 176.
Long Statement,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,ResolveVfsAndSource,The length of the statement  "                            : throw new NotSupportedException($"Unknown Virtual File System provider '{name}' used in '{filterName}'. Valid providers: web'content'filesystem'memory"); " is 155.
Long Statement,ServiceStack.ExpressionUtil,Compiler<TIn;TOut>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\CachedExpressionCompiler.cs,CompileFromFingerprint,The length of the statement  "                ExpressionFingerprintChain fingerprint = FingerprintingExpressionVisitor.GetFingerprintChain(expr' out capturedConstants); " is 122.
Long Statement,ServiceStack.ExpressionUtil,HoistingExpressionVisitor<TIn;TOut>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\CachedExpressionCompiler.cs,Hoist,The length of the statement  "            var rewrittenLambdaExpr = Expression.Lambda<Hoisted<TIn' TOut>>(rewrittenBodyExpr' expr.Parameters[0]' _hoistedConstantsParamExpr); " is 131.
Long Statement,ServiceStack.ExpressionUtil,HoistingExpressionVisitor<TIn;TOut>,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\CachedExpressionCompiler.cs,VisitConstant,The length of the statement  "            return Expression.Convert(Expression.Property(_hoistedConstantsParamExpr' "Item"' Expression.Constant(_numConstantsProcessed++))' node.Type); " is 141.
Long Statement,ServiceStack.IO,GistVirtualFiles,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\IO\GistVirtualFiles.cs,FromBase64String,The length of the statement  "                    $"Could not convert Base 64 contents of '{path}'' length: {base64String.Length}' starting with: {base64String.SafeSubstring(50)}"' " is 130.
Long Statement,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,EvaluateToBool,The length of the statement  "            oAsyncResult.ContinueWith(t => tcs.SetResult(!DefaultScripts.isFalsy(t.Result))' TaskContinuationOptions.OnlyOnRanToCompletion); " is 128.
Long Statement,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsToken,The length of the statement  "                    throw new SyntaxErrorException($"Expected ')' but instead found {literal.DebugFirstChar()} near: {literal.DebugLiteral()}"); " is 124.
Long Statement,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsToken,The length of the statement  "                        throw new SyntaxErrorException($"Expected identifier but was instead '{arg.DebugToken()}'' near: {literal.DebugLiteral()}"); " is 124.
Long Statement,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsToken,The length of the statement  "                        throw new SyntaxErrorException($"Expected ''' or ')' but was instead '{literal.DebugFirstChar()}'' near: {literal.DebugLiteral()}"); " is 132.
Long Statement,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsToken,The length of the statement  "                        if (!(mapKeyToken is JsLiteral) && !(mapKeyToken is JsTemplateLiteral) && !(mapKeyToken is JsIdentifier) && !(mapKeyToken is JsMemberExpression))  " is 145.
Long Statement,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsToken,The length of the statement  "                            throw new SyntaxErrorException($"{mapKeyToken.DebugToken()} is not a valid Object key' expected literal' identifier or member expression."); " is 140.
Long Statement,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsTemplateLiteral,The length of the statement  "                    throw new SyntaxErrorException($"Expected end of template literal expression '}}' but was instead {literal.DebugFirstChar()}"); " is 127.
Long Statement,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseArrowExpressionBody,The length of the statement  "                throw new SyntaxErrorException($"Expected '=>' but instead found {literal.DebugFirstChar()} near: {literal.DebugLiteral()}"); " is 125.
Long Statement,ServiceStack.Script,CallExpressionUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseWhitespaceArgument,The length of the statement  "                throw new SyntaxErrorException($"Whitespace sensitive syntax did not find a '\\n' new line to mark the end of the statement' near {literal.DebugLiteral()}"); " is 157.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,addToStartArgs,The length of the statement  "                else throw new NotSupportedException(nameof(addToStart) + " can only add to an IEnumerable not a " + collection.GetType().Name); " is 128.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,addToArgs,The length of the statement  "                else throw new NotSupportedException(filterName + " can only add to an IEnumerable not a " + collection.GetType().Name); " is 120.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,addItem,The length of the statement  "                throw new NotSupportedException($"{nameof(addItem)} can only add to an ICollection not a '{collection.GetType().Name}'"); " is 121.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,GetVarNameFromStringOrArrowExpression,The length of the statement  "            throw new NotSupportedException($"{filterName} requires a string or expression identifier but was instead '{argExpr.GetType().Name}'"); " is 135.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,selectEach,The length of the statement  "                throw new ArgumentException($"{nameof(selectEach)} in '{scope.Page.VirtualPath}' requires an IEnumerable' but received a '{items.GetType().Name}' instead"); " is 156.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,toKeys,The length of the statement  "            throw new NotSupportedException(nameof(toKeys) + " expects an IDictionary or List of KeyValuePairs but received: " + target.GetType().Name); " is 140.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,toValues,The length of the statement  "            throw new NotSupportedException(nameof(toValues) + " expects an IDictionary or List of KeyValuePairs but received: " + target.GetType().Name); " is 142.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,AssertWithinMaxQuota,The length of the statement  "                throw new NotSupportedException($"{value} exceeds Max Quota of {maxQuota}. \nMaxQuota can be changed in `ScriptContext.MaxQuota`."); " is 132.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,scopeVars,The length of the statement  "            throw new NotSupportedException($"'{nameof(scopeVars)}' expects a Dictionary but received a '{target.GetType().Name}'"); " is 120.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,selectFields,The length of the statement  "                throw new NotSupportedException(nameof(selectFields) + " requires an IEnumerable' IDictionary or POCO Target' received instead: " + target.GetType().Name); " is 155.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,selectFields,The length of the statement  "                throw new NotSupportedException(nameof(selectFields) + " requires a string or [string] or property names' received instead: " + names.GetType().Name); " is 150.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,withKeys,The length of the statement  "                    : throw new NotSupportedException($"{nameof(withoutKeys)} expects a collection of key names but received ${keys.GetType().Name}"); " is 130.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,withoutKeys,The length of the statement  "                    : throw new NotSupportedException($"{nameof(withoutKeys)} expects a collection of key names but received ${keys.GetType().Name}"); " is 130.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,ensureAllArgsNotNull,The length of the statement  "                throw new NotSupportedException($"'{nameof(ensureAllArgsNotNull)}' expects an Object Dictionary but received a '{args.GetType().Name}'"); " is 137.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,ensureAnyArgsNotNull,The length of the statement  "                throw new NotSupportedException($"'{nameof(ensureAnyArgsNotNull)}' expects an Object Dictionary but received a '{args.GetType().Name}'"); " is 137.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,ensureAllArgsNotEmpty,The length of the statement  "                throw new NotSupportedException($"'{nameof(ensureAllArgsNotEmpty)}' expects an Object Dictionary but received a '{args.GetType().Name}'"); " is 138.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,ensureAnyArgsNotEmpty,The length of the statement  "                throw new NotSupportedException($"'{nameof(ensureAnyArgsNotEmpty)}' expects an Object Dictionary but received a '{args.GetType().Name}'"); " is 138.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,contains,The length of the statement  "            throw new NotSupportedException($"'{nameof(contains)}' requires a string or IEnumerable but received a '{target.GetType()?.Name}' instead"); " is 140.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,reduce,The length of the statement  "                throw new NotSupportedException($"{nameof(reduce)} expects an arrow expression but was instead '{expression.GetType().Name}'"); " is 127.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,zip,The length of the statement  "                        throw new ArgumentException($"{nameof(zip)} in '{scope.Page.VirtualPath}' requires '{literal}' to evaluate to an IEnumerable' but evaluated to a '{bindValue.GetType().Name}' instead"); " is 184.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,let,The length of the statement  "                                throw new NotSupportedException($"'{nameof(let)}' in '{scope.Page.VirtualPath}' expects a string Expression for its value but received '{entry.Value}' instead"); " is 161.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,let,The length of the statement  "                throw new NotSupportedException($"'{nameof(let)}' in '{scope.Page.VirtualPath}' requires an IEnumerable but received a '{target.GetType()?.Name}' instead"); " is 156.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,GetComparer,The length of the statement  "                        $"'{filterName}' in '{scope.Page.VirtualPath}' expects a IComparer but received a '{oComparer.GetType()?.Name}' instead"); " is 122.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,orderByInternal,The length of the statement  "            var comparer = GetComparer(filterName' scope' scopeOptions as Dictionary<string' object> ?? new Dictionary<string' object>()); " is 126.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,thenByInternal,The length of the statement  "                throw new NotSupportedException($"'{filterName}' in '{scope.Page.VirtualPath}' requires an IOrderedEnumerable but received a '{target?.GetType()?.Name}' instead"); " is 163.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,thenByInternal,The length of the statement  "            var comparer = GetComparer(filterName' scope' scopeOptions as Dictionary<string' object> ?? new Dictionary<string' object>()); " is 126.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,groupBy,The length of the statement  "                            $"'{nameof(groupBy)}' in '{scope.Page.VirtualPath}' expects a IEqualityComparer but received a '{oComparer.GetType()?.Name}' instead"); " is 135.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,get,The length of the statement  "            else if (target is IEnumerable e && DynamicNumber.IsNumber(key.GetType())) // IGrouping<TKey'TElement> is IEnumerable & can ref 'Key' property " is 142.
Long Statement,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,toQueryString,The length of the statement  "            else throw new NotSupportedException($"{nameof(toQueryString)} expects a collection of KeyValuePair's but was '{keyValuePairs.GetType().Name}'"); " is 145.
Long Statement,ServiceStack.Script,HtmlScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\HtmlScripts.cs,htmlClassList,The length of the statement  "                throw new NotSupportedException($"{nameof(htmlClass)} expects a Dictionary' List or String argument but was '{target.GetType().Name}'"); " is 136.
Long Statement,ServiceStack.Script,HtmlScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\HtmlScripts.cs,htmlTag,The length of the statement  "            return htmlTag(new Dictionary<string' object>(attrs ?? TypeConstants.EmptyObjectDictionary) { ["html"] = innerHtml }' tag); " is 123.
Long Statement,ServiceStack.Script,ProtectedScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\ProtectedScripts.cs,resolve,The length of the statement  "                        : throw new NotSupportedException($"{nameof(resolve)} requires a Type or Type Name' received '{type.GetType().Name}'")); " is 120.
Long Statement,ServiceStack.Script,ProtectedScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\ProtectedScripts.cs,ResolveMethod,The length of the statement  "                    && ((genericArgs.Count == 0 && !x.IsGenericMethod) || (x.IsGenericMethod && x.GetGenericArguments().Length == genericArgsCount))) " is 129.
Long Statement,ServiceStack.Script,ProtectedScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\ProtectedScripts.cs,includeUrlWithCache,The length of the statement  "                throw new NotSupportedException($"Only GET requests can be used in {nameof(includeUrlWithCache)} filters in page '{scope.Page.VirtualPath}'"); " is 142.
Long Statement,ServiceStack.Script,ProtectedScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\ProtectedScripts.cs,includeUrlWithCache,The length of the statement  "                throw new NotSupportedException($"'data' is not supported in {nameof(includeUrlWithCache)} filters in page '{scope.Page.VirtualPath}'"); " is 136.
Long Statement,ServiceStack.Script,HtmlPageFormat,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageFormat.cs,HtmlResolveLayout,The length of the statement  "            var isCompletePage = page.BodyContents.Span.StartsWithIgnoreCase("<!DOCTYPE HTML>".AsSpan()) || page.BodyContents.Span.StartsWithIgnoreCase("<html".AsSpan()); " is 158.
Long Statement,ServiceStack.Script,HtmlPageFormat,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageFormat.cs,HtmlExpressionException,The length of the statement  "                return ("<div class='error'><span>" + (ex.GetType().Name + ": " + ex.Message).HtmlEncode() + "</span></div>").ToRawString(); " is 124.
Long Statement,ServiceStack.Script,PageResult,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageResult.cs,AssertNextEvaluation,The length of the statement  "                throw new NotSupportedException($"Exceeded Max Evaluations of {Context.MaxEvaluations}. \nMaxEvaluations can be changed in `ScriptContext.MaxEvaluations`."); " is 157.
Long Statement,ServiceStack.Script,PageResult,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageResult.cs,Init,The length of the statement  "                throw new NotSupportedException($"{Context.GetType().Name} has not been initialized. Call 'Init()' to initialize Script Context."); " is 131.
Long Statement,ServiceStack.Script,PageResult,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageResult.cs,WriteVarAsync,The length of the statement  "                stackTrace.Push($"Expression ({var.InitialValue.GetType().Name}): " + toDebugString(var.InitialValue).SubstringWithEllipsis(0' 200)); " is 133.
Long Statement,ServiceStack.Script,PageResult,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageResult.cs,EvaluateAsync,The length of the statement  "                                        contextBlockInvoker = GetContextBlockInvoker(var.FilterExpressions[exprIndex].Name' 1 + var.FilterExpressions[exprIndex].Arguments.Length' out filter); " is 151.
Long Statement,ServiceStack.Script,PageResult,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageResult.cs,EvaluateAsync,The length of the statement  "                                                throw new NotSupportedException($"Could not find FilterTransformer '{var.FilterExpressions[exprIndex].Name}' in page '{Page.VirtualPath}'"); " is 140.
Long Statement,ServiceStack.Script,PageResult,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageResult.cs,EvaluateAsync,The length of the statement  "                    throw new TargetInvocationException($"Failed to invoke filter '{filterName}': {ex.InnerException.Message}"' ex.InnerException); " is 127.
Long Statement,ServiceStack.Script,ScriptCode,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Code.cs,Parse,The length of the statement  "                    throw new NotSupportedException($"Unknown modifier '{modifiers.ToString()}'' expected 'code|q'' 'code|quiet' or 'code|mute'"); " is 126.
Long Statement,ServiceStack.Script,ScriptCode,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Code.cs,WriteStatementAsync,The length of the statement  "                if (value != null && !ReferenceEquals(value' JsNull.Value) && value != StopExecution.Value && value != IgnoreResult.Value) " is 122.
Long Statement,ServiceStack.Script,ScriptCodeUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Code.cs,AssertCode,The length of the statement  "                throw new NotSupportedException($"ScriptCode.Language is not registered in {context.GetType().Name}.{nameof(context.ScriptLanguages)}"); " is 136.
Long Statement,ServiceStack.Script,ScriptCodeUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Code.cs,ParseCodeStatements,The length of the statement  "                        throw new SyntaxErrorException($"Unexpected syntax after expression: {afterExpr.ToString()}' near {line.DebugLiteral()}"); " is 122.
Long Statement,ServiceStack.Script,ScriptLisp,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,Parse,The length of the statement  "                    throw new NotSupportedException($"Unknown modifier '{modifiers.ToString()}'' expected 'code|q'' 'code|quiet' or 'code|mute'"); " is 126.
Long Statement,ServiceStack.Script,ScriptLispUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,AssertLisp,The length of the statement  "                throw new NotSupportedException($"ScriptLisp.Language is not registered in {context.GetType().Name}.{nameof(context.ScriptLanguages)}"); " is 136.
Long Statement,ServiceStack.Script,Utils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,unwrapDataListArgs,The length of the statement  "            if (arg.Car is Lisp.Cell c && c.Car == Lisp.LIST) // allow clojure data list [] for fn args list by unwrapping (list ...) => ... " is 128.
Long Statement,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The length of the statement  "                Def("to-dictionary"' 2' (I' a) => EnumerableUtils.ToList(a[1].assertEnumerable()).ToDictionary(resolve1ArgFn(a[0]' I))); " is 120.
Long Statement,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The length of the statement  "                Def("rest"' 1' body: a => a[0] is Cell c ? c.Cdr : EnumerableUtils.NullIfEmpty(EnumerableUtils.Skip(a[0].assertEnumerable()' 1))); " is 130.
Long Statement,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The length of the statement  "                Def("enumerator"' 1' a => a[0] == null ? TypeConstants.EmptyObjectArray.GetEnumerator() : a[0].assertEnumerable().GetEnumerator()); " is 131.
Long Statement,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The length of the statement  "                Def("map-where"' 3' (I' a) => EnumerableUtils.ToList(a[2]?.assertEnumerable()).Where(resolvePredicate(a[0]' I)).Map(resolve1ArgFn(a[1]' I))); " is 141.
Long Statement,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The length of the statement  "                    throw new LispEvalException("syntax: (group-by keyFn list) (group-by keyFn { :map mapFn :comparer comparer } list)"' varArgs.Last()); " is 133.
Long Statement,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The length of the statement  "                Def("string-upcase"' 1' a => (a[0] is string s) ? s.ToUpper() : a[0] != null ? throw new LispEvalException("not a string"' a[0]) : ""); " is 135.
Long Statement,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The length of the statement  "                Def("instance?"' 2' (I' a) => I.AssertScope().Context.DefaultMethods.instanceOf(a[1]' a[0] is Sym s ? s.Name : a[0]) ? TRUE : null); " is 132.
Long Statement,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The length of the statement  "                            I.Scope.Value.Context.DefaultMethods.write(I.Scope.Value' I.Scope.Value.Context.DefaultMethods.htmlEncode(Str(x' false))); " is 122.
Long Statement,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,Eval,The length of the statement  "                                        var ret = scope.Context.AssertProtectedMethods().call(a[0]' symName.Substring(1).Replace('+''''')' TypeConstants.EmptyObjectList); " is 130.
Long Statement,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,Eval,The length of the statement  "                                else if (symName[symName.Length - 1] == '.') // constructor (Type. arg) https://clojure.org/reference/java_interop#_the_dot_special_form " is 136.
Long Statement,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,Eval,The length of the statement  "                                        if ((isScriptMethod || fnName[0].IsValidVarNameChar()) && scope.TryGetMethod(isScriptMethod ? fnName.Substring(1) : fnName' argLength' " is 134.
Long Statement,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,Eval,The length of the statement  "                                        else if (fnName[fnName.Length - 1] == '.') // constructor (Type. arg) https://clojure.org/reference/java_interop#_the_dot_special_form " is 134.
Long Statement,ServiceStack.Script,Reader,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,ParseExpression,The length of the statement  "                else if (Token == HASH) // #(+ 1 %) Clojure's anonymous function syntax https://clojure.org/guides/weird_characters#_anonymous_function " is 135.
Long Statement,ServiceStack.Script,Reader,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,ParseMapBody,The length of the statement  "                        ? (sym.Name[0] == ':' ? sym.Name.Substring(1) : throw new LispEvalException("Expected Key Symbol with ':' prefix"' symKey)) " is 123.
Long Statement,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,ParseTemplate,The length of the statement  "                if (text.Span.SafeCharEquals(varStartPos - 1' '|')) // lang expression syntax {|lang ... |} https://flow.org/en/docs/types/objects/#toc-exact-object-types " is 154.
Long Statement,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,CompileAssign,The length of the statement  "                throw new BindingExpressionException($"Assignment expression for '{expr}' not supported yet"' "valueToAssign"' expr.ToString()); " is 128.
Long Statement,ServiceStack.Script,TemplateFilterUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptMethods.cs,AssertOptions,The length of the statement  "                    $"{filterName} in '{scope.PageResult.VirtualPath}' only accepts an Object dictionary as an argument but received a '{scopedParams.GetType().Name}' instead"); " is 157.
Long Statement,ServiceStack.Script,TemplateFilterUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptMethods.cs,AssertOptions,The length of the statement  "                    $"{filterName} only accepts an Object dictionary as an argument but received a '{scopedParams.GetType().Name}' instead"); " is 121.
Long Statement,ServiceStack.Script,TemplateFilterUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptMethods.cs,AssertExpression,The length of the statement  "                throw new NotSupportedException($"'{filterName}' in '{scope.PageResult.VirtualPath}' requires a string Expression but received a '{expression?.GetType()?.Name}' instead"); " is 171.
Long Statement,ServiceStack.Script,TemplateFilterUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptMethods.cs,GetParamsWithItemBindingOnly,The length of the statement  "                throw new NotSupportedException($"'it' option in filter '{filterName}' should contain the name to bind to but contained a '{bindingName.GetType().Name}' instead"); " is 163.
Long Statement,ServiceStack.VirtualPath,ResourceVirtualDirectory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\VirtualPath\ResourceVirtualDirectory.cs,CreateVirtualDirectory,The length of the statement  "                VirtualPathProvider' this' backingAssembly' LastModified' rootNamespace' subResources.Key' remainingResourceNames.ToList()); " is 124.
Complex Conditional,ServiceStack,GitHubGateway,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\GitHubGateway.cs,GetSourceZipUrl,The conditional expression  "response is List<object> releases && releases.Count > 0 &&                  releases[0] is Dictionary<string' object> release &&                  release.TryGetValue("zipball_url"' out var zipUrl)"  is complex.
Complex Conditional,ServiceStack,JSON,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\JSON.cs,parseSpan,The conditional expression  "firstChar == 't' && json[1] == 'r' && json[2] == 'u' && json[3] == 'e'"  is complex.
Complex Conditional,ServiceStack,JSON,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\JSON.cs,parseSpan,The conditional expression  "firstChar == 'n' && json[1] == 'u' && json[2] == 'l' && json[3] == 'l'"  is complex.
Complex Conditional,ServiceStack,JSON,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\JSON.cs,parseSpan,The conditional expression  "json.Length == 5 && firstChar == 'f' && json[1] == 'a' && json[2] == 'l' && json[3] == 's' && json[4] == 'e'"  is complex.
Complex Conditional,ServiceStack.Script,EachScriptBlock,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Blocks\EachScriptBlock.cs,WriteAsync,The conditional expression  "cache.Where != null || cache.OrderBy != null || cache.OrderByDescending != null ||                      cache.Skip != null || cache.Take != null"  is complex.
Complex Conditional,ServiceStack.Script,JsExpressionUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsExpressionUtils.cs,ParseJsExpression,The conditional expression  "(char1 == '|' && char2 != '|') || (char1 == '}' && char2 == '}')"  is complex.
Complex Conditional,ServiceStack.Script,JsExpressionUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsExpressionUtils.cs,ParseBinaryExpression,The conditional expression  "filterExpression && literal.Length > 2 && (literal[0] == '|' && literal[1] != '|')"  is complex.
Complex Conditional,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,JsTokenUtils,The conditional expression  "i >= 'A' && i <= 'Z' || i >= 'a' && i <= 'z' || i >= '0' && i <= '9' || i == '_'"  is complex.
Complex Conditional,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsToken,The conditional expression  "firstChar == '\'' || firstChar == '"' || firstChar == '`' || firstChar == '′'"  is complex.
Complex Conditional,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsToken,The conditional expression  "i < literal.Length && IsNumericChar(c = literal[i]) ||                         (hasExponent = (c == 'e' || c == 'E'))"  is complex.
Complex Conditional,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsToken,The conditional expression  "!(mapKeyToken is JsLiteral) && !(mapKeyToken is JsTemplateLiteral) && !(mapKeyToken is JsIdentifier) && !(mapKeyToken is JsMemberExpression)"  is complex.
Complex Conditional,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsMemberExpression,The conditional expression  "c == '.' || c == '[' || c == '(' || (filterExpression && c == ':')"  is complex.
Complex Conditional,ServiceStack.Script,PageResult,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageResult.cs,EvaluateAsync,The conditional expression  "invoker == null && contextFilterInvoker == null && contextBlockInvoker == null && delegateInvoker == null"  is complex.
Complex Conditional,ServiceStack.Script,ScriptCode,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Code.cs,WriteStatementAsync,The conditional expression  "value != null && !ReferenceEquals(value' JsNull.Value) && value != StopExecution.Value && value != IgnoreResult.Value"  is complex.
Complex Conditional,ServiceStack.Script,ScriptLanguage,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.cs,UnwrapValue,The conditional expression  "value == null || value == JsNull.Value || value == StopExecution.Value || value == IgnoreResult.Value"  is complex.
Complex Conditional,ServiceStack.Script,ScriptLisp,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,WriteStatementAsync,The conditional expression  "value != null && value != JsNull.Value && value != StopExecution.Value && value != IgnoreResult.Value"  is complex.
Complex Conditional,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The conditional expression  "(DynamicNumber.CompareTo(x' 0) < 0 && DynamicNumber.CompareTo(y' 0) > 0)                              || (DynamicNumber.CompareTo(x' 0) > 0 && DynamicNumber.CompareTo(y' 0) < 0)"  is complex.
Complex Conditional,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,ExpandMacros,The conditional expression  "k == QUOTE || k == LAMBDA || k == FN || k == MACRO"  is complex.
Empty Catch Block,ServiceStack,IPAddressExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\IPAddressExtensions.cs,GetAllNetworkInterfaceIpv4Addresses,The method has an empty catch block.
Empty Catch Block,ServiceStack,IPAddressExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\IPAddressExtensions.cs,GetAllNetworkInterfaceIpv6Addresses,The method has an empty catch block.
Empty Catch Block,ServiceStack,JSON,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\JSON.cs,parseSpan,The method has an empty catch block.
Empty Catch Block,ServiceStack,SimpleContainer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\SimpleContainer.cs,Dispose,The method has an empty catch block.
Empty Catch Block,ServiceStack.IO,FileSystemVirtualFiles,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\IO\FileSystemVirtualFiles.cs,DeleteFile,The method has an empty catch block.
Empty Catch Block,ServiceStack.Script,ProtectedScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\ProtectedScripts.cs,typeof,The method has an empty catch block.
Empty Catch Block,ServiceStack.Script,ProtectedScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\ProtectedScripts.cs,exePath,The method has an empty catch block.
Magic Number,ServiceStack,GitHubGateway,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\GitHubGateway.cs,ParseLinkUrls,The following statement contains a magic number: keyValueParts.Length < 2
Magic Number,ServiceStack,IdUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\IdUtils.cs,CreateCacheKeyPath,The following statement contains a magic number: idValue = idValue.PadLeft(4' '0');
Magic Number,ServiceStack,IdUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\IdUtils.cs,CreateCacheKeyPath,The following statement contains a magic number: idValue.Length < 4
Magic Number,ServiceStack,IdUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\IdUtils.cs,CreateCacheKeyPath,The following statement contains a magic number: var dir1 = idValue.Substring(0' 2);
Magic Number,ServiceStack,IdUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\IdUtils.cs,CreateCacheKeyPath,The following statement contains a magic number: var dir2 = idValue.Substring(2' 2);
Magic Number,ServiceStack,IdUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\IdUtils.cs,CreateCacheKeyPath,The following statement contains a magic number: var dir2 = idValue.Substring(2' 2);
Magic Number,ServiceStack,IPAddressExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\IPAddressExtensions.cs,GetBroadcastAddress,The following statement contains a magic number: broadcastAddress[i] = (byte)(ipAdressBytes[i] | (subnetMaskBytes[i] ^ 255));
Magic Number,ServiceStack,IPAddressExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\IPAddressExtensions.cs,IsInSameIpv6Subnet,The following statement contains a magic number: i < 8
Magic Number,ServiceStack,PerfUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\PerfUtils.cs,MeasureFor,The following statement contains a magic number: return 1000.0 * elapsed / iter;
Magic Number,ServiceStack,PerfUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\PerfUtils.cs,Measure,The following statement contains a magic number: MeasureFor(() => warmup()' 100);
Magic Number,ServiceStack,StringUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\StringUtils.cs,ReplacePairs,The following statement contains a magic number: replaceStringsPairs.Length < 2 || replaceStringsPairs.Length % 2 != 0
Magic Number,ServiceStack,StringUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\StringUtils.cs,ReplacePairs,The following statement contains a magic number: replaceStringsPairs.Length < 2 || replaceStringsPairs.Length % 2 != 0
Magic Number,ServiceStack,StringUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\StringUtils.cs,ToEscapedString,The following statement contains a magic number: var sb = new StringBuilder(input.Length + 2);
Magic Number,ServiceStack,StringUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\StringUtils.cs,ConvertHtmlCodeToCharacter,The following statement contains a magic number: string decimalString = match.Groups[3].Value;
Magic Number,ServiceStack,StringUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\StringUtils.cs,ConvertHtmlCodeToCharacter,The following statement contains a magic number: match.Groups[2].Success
Magic Number,ServiceStack,UrnId,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\UrnId.cs,Parse,The following statement contains a magic number: return new UrnId { TypeName = urnParts[1]' IdFieldValue = urnParts[2] };
Magic Number,ServiceStack,UrnId,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\UrnId.cs,Parse,The following statement contains a magic number: return new UrnId { TypeName = urnParts[1]' IdFieldName = urnParts[2]' IdFieldValue = urnParts[3] };
Magic Number,ServiceStack,UrnId,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\UrnId.cs,Parse,The following statement contains a magic number: return new UrnId { TypeName = urnParts[1]' IdFieldName = urnParts[2]' IdFieldValue = urnParts[3] };
Magic Number,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,ResolveVfsAndSource,The following statement contains a magic number: parts.Length != 2
Magic Number,ServiceStack,VirtualPathUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\VirtualPathUtils.cs,GroupByFirstToken,The following statement contains a magic number: return resourceNames.Select(n => n.Split(new[] { pathSeparator }' 2))                  .GroupBy(t => t[0]);
Magic Number,ServiceStack,VirtualPathUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\VirtualPathUtils.cs,SleepBackOffMultiplier,The following statement contains a magic number: var nextTryMs = (2 ^ i) * 50;
Magic Number,ServiceStack,VirtualPathUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\VirtualPathUtils.cs,SleepBackOffMultiplier,The following statement contains a magic number: var nextTryMs = (2 ^ i) * 50;
Magic Number,ServiceStack.ExpressionUtil,HashCodeCombiner,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\CachedExpressionCompiler.cs,AddInt32,The following statement contains a magic number: _combinedHash64 = ((_combinedHash64 << 5) + _combinedHash64) ^ i;
Magic Number,ServiceStack.Script,EachScriptBlock,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Blocks\EachScriptBlock.cs,ParseArgument,The following statement contains a magic number: literal = literal.Advance(3);
Magic Number,ServiceStack.Script,JsBinaryExpression,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsBinaryExpression.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Left != null ? Left.GetHashCode() : 0);
Magic Number,ServiceStack.Script,JsBinaryExpression,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsBinaryExpression.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Right != null ? Right.GetHashCode() : 0);
Magic Number,ServiceStack.Script,JsCallExpression,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsCallExpression.cs,Evaluate,The following statement contains a magic number: invoker = result.GetContextFilterInvoker(name' 2' out filter);
Magic Number,ServiceStack.Script,JsCallExpression,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsCallExpression.cs,EvaluateArgumentValues,The following statement contains a magic number: var fnArgValues = new List<object>(args.Length + 2);
Magic Number,ServiceStack.Script,JsCallExpression,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsCallExpression.cs,GetHashCode,The following statement contains a magic number: return ((Callee != null ? Callee.GetHashCode() : 0) * 397) ^                         (Arguments != null ? Arguments.GetHashCode() : 0);
Magic Number,ServiceStack.Script,JsConditionalExpression,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsConditionalExpression.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Consequent != null ? Consequent.GetHashCode() : 0);
Magic Number,ServiceStack.Script,JsConditionalExpression,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsConditionalExpression.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Alternate != null ? Alternate.GetHashCode() : 0);
Magic Number,ServiceStack.Script,JsProperty,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsExpression.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Value != null ? Value.GetHashCode() : 0);
Magic Number,ServiceStack.Script,JsProperty,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsExpression.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Shorthand.GetHashCode();
Magic Number,ServiceStack.Script,JsArrowFunctionExpression,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsExpression.cs,GetHashCode,The following statement contains a magic number: return ((Params != null ? Params.GetHashCode() : 0) * 397) ^ (Body != null ? Body.GetHashCode() : 0);
Magic Number,ServiceStack.Script,JsExpressionUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsExpressionUtils.cs,ParseJsExpression,The following statement contains a magic number: filterExpression && peekLiteral.Length > 2
Magic Number,ServiceStack.Script,JsLogicalExpression,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsLogicalExpression.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Left != null ? Left.GetHashCode() : 0);
Magic Number,ServiceStack.Script,JsLogicalExpression,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsLogicalExpression.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Right != null ? Right.GetHashCode() : 0);
Magic Number,ServiceStack.Script,JsMemberExpression,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsMemberExpression.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Property != null ? Property.GetHashCode() : 0);
Magic Number,ServiceStack.Script,JsMemberExpression,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsMemberExpression.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Computed.GetHashCode();
Magic Number,ServiceStack.Script,JsTemplateLiteral,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsTemplateLiteral.cs,GetHashCode,The following statement contains a magic number: return ((Quasis != null ? Quasis.GetHashCode() : 0) * 397) ^ (Expressions != null ? Expressions.GetHashCode() : 0);
Magic Number,ServiceStack.Script,JsTemplateElement,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsTemplateLiteral.cs,GetHashCode,The following statement contains a magic number: return ((Value != null ? Value.GetHashCode() : 0) * 397) ^ Tail.GetHashCode();
Magic Number,ServiceStack.Script,JsTemplateElementValue,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsTemplateLiteral.cs,GetHashCode,The following statement contains a magic number: return (Raw.GetHashCode() * 397) ^ Cooked.GetHashCode();
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,JsTokenUtils,The following statement contains a magic number: NewLineUtf8 = new byte[] { 10 };
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ChopNewLine,The following statement contains a magic number: return literal.Span.SafeCharEquals(literal.Length - 2' '\r')                      ? literal.Slice(0' literal.Length - 2)                      : literal.Slice(0' literal.Length - 1);
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ChopNewLine,The following statement contains a magic number: return literal.Span.SafeCharEquals(literal.Length - 2' '\r')                      ? literal.Slice(0' literal.Length - 2)                      : literal.Slice(0' literal.Length - 1);
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsToken,The following statement contains a magic number: i += 2;
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsToken,The following statement contains a magic number: literal = literal.Advance(3);
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,IndexOfQuotedString,The following statement contains a magic number: !literal.SafeCharEquals(i - 1' '\\') ||                          (literal.SafeCharEquals(i - 2' '\\') && !literal.SafeCharEquals(i - 3' '\\'))
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,IndexOfQuotedString,The following statement contains a magic number: !literal.SafeCharEquals(i - 1' '\\') ||                          (literal.SafeCharEquals(i - 2' '\\') && !literal.SafeCharEquals(i - 3' '\\'))
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsTemplateLiteral,The following statement contains a magic number: var isExpr = c == '$' && literal.CountPrecedingOccurrences(i - 1' '\\') % 2 != 1 && literal.SafeGetChar(i + 1) == '{';
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsTemplateLiteral,The following statement contains a magic number: var exprStart = literal.Slice(i + 2);
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseArrowExpressionBody,The following statement contains a magic number: literal = literal.Advance(2);
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsBinaryOperator,The following statement contains a magic number: return literal.Advance(3);
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsBinaryOperator,The following statement contains a magic number: return literal.Advance(3);
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsBinaryOperator,The following statement contains a magic number: return literal.Advance(2);
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsBinaryOperator,The following statement contains a magic number: return literal.Advance(2);
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsBinaryOperator,The following statement contains a magic number: return literal.Advance(2);
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsBinaryOperator,The following statement contains a magic number: return literal.Advance(2);
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsBinaryOperator,The following statement contains a magic number: return literal.Advance(2);
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsBinaryOperator,The following statement contains a magic number: return literal.Advance(2);
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsBinaryOperator,The following statement contains a magic number: return literal.Advance(2);
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsBinaryOperator,The following statement contains a magic number: return literal.Advance(2);
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsBinaryOperator,The following statement contains a magic number: return literal.Advance(2);
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsBinaryOperator,The following statement contains a magic number: return literal.Advance(3);
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsBinaryOperator,The following statement contains a magic number: literal.StartsWith("and") && literal.SafeGetChar(3).IsWhiteSpace()
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsBinaryOperator,The following statement contains a magic number: return literal.Advance(2);
Magic Number,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseJsBinaryOperator,The following statement contains a magic number: literal.StartsWith("or") && literal.SafeGetChar(2).IsWhiteSpace()
Magic Number,ServiceStack.Script,CallExpressionUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,ParseArguments,The following statement contains a magic number: literal = literal.Advance(3);
Magic Number,ServiceStack.Script,JsUnaryExpression,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsUnaryExpression.cs,GetHashCode,The following statement contains a magic number: return ((Operator != null ? Operator.GetHashCode() : 0) * 397) ^ (Argument != null ? Argument.GetHashCode() : 0);
Magic Number,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,forEach,The following statement contains a magic number: var arrayBinding = arrowExpr.Params.Length > 2 ? arrowExpr.Params[2].Name : null;
Magic Number,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,forEach,The following statement contains a magic number: var arrayBinding = arrowExpr.Params.Length > 2 ? arrowExpr.Params[2].Name : null;
Magic Number,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,reduce,The following statement contains a magic number: arrowExpr.Params.Length != 2
Magic Number,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,generateSlug,The following statement contains a magic number: str = str.Substring(0' str.Length <= 100 ? str.Length : 100).Trim();
Magic Number,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,generateSlug,The following statement contains a magic number: str = str.Substring(0' str.Length <= 100 ? str.Length : 100).Trim();
Magic Number,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,TextDump,The following statement contains a magic number: s.AppendLine(writeCaption != null                                  ? $"| {writeCaption.PadRight(keySize + valuesSize + 2' ' ')} ||"                                  : $"|||");
Magic Number,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,GetScalarText,The following statement contains a magic number: var isMoney = dec == Math.Floor(dec * 100);
Magic Number,ServiceStack.Script,HtmlScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\HtmlScripts.cs,GetScalarHtml,The following statement contains a magic number: var isMoney = dec == Math.Floor(dec * 100);
Magic Number,ServiceStack.Script,ProtectedScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\ProtectedScripts.cs,typeof,The following statement contains a magic number: _typeName = _typeName.Substring(0' _typeName.Length - 2);
Magic Number,ServiceStack.Script,PageVariableFragment,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageFragment.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Expression != null ? Expression.GetHashCode() : 0);
Magic Number,ServiceStack.Script,PageVariableFragment,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageFragment.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (FilterExpressions != null ? FilterExpressions.GetHashCode() : 0);
Magic Number,ServiceStack.Script,PageBlockFragment,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageFragment.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Argument.GetHashCode();
Magic Number,ServiceStack.Script,PageBlockFragment,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageFragment.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Body != null ? Body.GetHashCode() : 0);
Magic Number,ServiceStack.Script,PageBlockFragment,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageFragment.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (ElseBlocks != null ? ElseBlocks.GetHashCode() : 0);
Magic Number,ServiceStack.Script,PageElseBlock,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageFragment.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Body != null ? Body.GetHashCode() : 0);
Magic Number,ServiceStack.Script,PageResult,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageResult.cs,EvaluateAsync,The following statement contains a magic number: var contextFilterInvoker = invoker == null                          ? GetContextFilterInvoker(filterName' 2 + fnArgsLength' out filter)                          : null;
Magic Number,ServiceStack.Script,PageResult,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageResult.cs,EvaluateAsync,The following statement contains a magic number: var contextBlockInvoker = invoker == null && contextFilterInvoker == null                          ? GetContextBlockInvoker(filterName' 2 + fnArgsLength' out filter)                          : null;
Magic Number,ServiceStack.Script,PageResult,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\PageResult.cs,CreateMissingFilterErrorMessage,The following statement contains a magic number: var normalFilters = similarNonMatchingFilters                      .OrderBy(x => x.GetParameters().Length + (x.ReturnType == typeof(Task) ? 10 : 1))                      .ToArray();
Magic Number,ServiceStack.Script,ScriptBlock,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptBlock.cs,WriteElseAsync,The following statement contains a magic number: argument = argument.Advance(3);
Magic Number,ServiceStack.Script,ScriptCodeUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Code.cs,ParseCodeStatements,The following statement contains a magic number: cursorPos = endPos + 3;
Magic Number,ServiceStack.Script,ScriptCodeUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Code.cs,ParseCodeStatements,The following statement contains a magic number: var literal = fromLineStart.Slice(3);
Magic Number,ServiceStack.Script,ScriptCodeUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Code.cs,ParseCodeStatements,The following statement contains a magic number: firstChar == '{' && line.Span.SafeCharEquals(1' '{') && line.Span.SafeCharEquals(2' '#')
Magic Number,ServiceStack.Script,ScriptCodeUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Code.cs,ParseCodeStatements,The following statement contains a magic number: const int delim = 2;
Magic Number,ServiceStack.Script,ScriptCodeUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Code.cs,ParseCodeStatements,The following statement contains a magic number: var CRLF = code.Span.SafeCharEquals(cursorPos - 2' '\r') ? 2 : 1;
Magic Number,ServiceStack.Script,ScriptCodeUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Code.cs,ParseCodeStatements,The following statement contains a magic number: var CRLF = code.Span.SafeCharEquals(cursorPos - 2' '\r') ? 2 : 1;
Magic Number,ServiceStack.Script,ScriptCodeUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Code.cs,ToLineStart,The following statement contains a magic number: var CLRF = literal.Span.SafeCharEquals(cursorPos - 2' '\r');
Magic Number,ServiceStack.Script,Lisp,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,Str,The following statement contains a magic number: return Str4(x' quoteString' 4' null);
Magic Number,ServiceStack.Script,Lisp,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,StrListBody,The following statement contains a magic number: count = 4;
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("to-dictionary"' 2' (I' a) => EnumerableUtils.ToList(a[1].assertEnumerable()).ToDictionary(resolve1ArgFn(a[0]' I)));
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("nth"' 2' a => {                      if (a[0] == null)                          return null;                      if (!(a[1] is int i))                          throw new LispEvalException("not integer"' a[1]);                      if (a[0] is IList c)                          return c[i];                      return a[0].assertEnumerable().Cast<object>().ElementAt(i);                  });
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("third"' 1' a => EnumerableUtils.ElementAt(a[0].assertEnumerable()' 2));
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("skip"' 2' a => EnumerableUtils.Skip(a[1].assertEnumerable()' DynamicInt.Instance.Convert(a[0])));
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("take"' 2' a => EnumerableUtils.Take(a[1].assertEnumerable()' DynamicInt.Instance.Convert(a[0])));
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("map"' 2' (I' a) => a[1]?.assertEnumerable().Map(resolve1ArgFn(a[0]' I)));
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("map-where"' 3' (I' a) => EnumerableUtils.ToList(a[2]?.assertEnumerable()).Where(resolvePredicate(a[0]' I)).Map(resolve1ArgFn(a[1]' I)));
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("map-where"' 3' (I' a) => EnumerableUtils.ToList(a[2]?.assertEnumerable()).Where(resolvePredicate(a[0]' I)).Map(resolve1ArgFn(a[1]' I)));
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("where"' 2' (I' a) => EnumerableUtils.ToList(a[1]?.assertEnumerable()).Where(resolvePredicate(a[0]' I)).ToList());
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("reduce"' -2' (I' a) => {                      var fn = resolve2ArgFn(a[0]' I);                      var varArgs = EnumerableUtils.ToList(a[1].assertEnumerable());                      if (varArgs.Count == 1) // (reduce fn L)                      {                          var list = EnumerableUtils.ToList(varArgs[0].assertEnumerable());                          return list.Aggregate(fn);                      }                      else // (reduce fn L seed)                      {                          var list = EnumerableUtils.ToList(varArgs[0].assertEnumerable());                          var seed = varArgs[1];                          return list.Aggregate(seed' fn);                      }                  });
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("sort-by"' -2' (I' a) => {                      var keyFn = resolve1ArgFn(a[0]' I);                      var varArgs = EnumerableUtils.ToList(a[1].assertEnumerable());                      if (varArgs.Count == 1) // (sort-by keyfn list)                      {                          var list = EnumerableUtils.ToList(varArgs[0].assertEnumerable()).ToArray();                          Array.Sort(list' (x'y) => keyFn(x).compareTo(keyFn(y)));                          return list;                      }                      else // (sort-by keyfn comparer list)                      {                          if (!(varArgs[0] is IComparer comparer))                              throw new LispEvalException("not IComparable"' varArgs[1]);                            var results = EnumerableUtils.ToList(varArgs[1].assertEnumerable()).OrderBy(keyFn' new ObjectComparer(comparer));                          return results;                      }                  });
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("order-by"' 2' (I' a) => {                      var keyFns = EnumerableUtils.ToList(a[0].assertEnumerable());                                            var list = a[1].assertEnumerable().Cast<object>();                      if (keyFns.Count == 0)                          return list;                        IOrderedEnumerable<object> seq = null;                        for (var i = 0; i < keyFns.Count; i++)                      {                          var keyFn = keyFns[i];                          if (keyFn is Dictionary<string' object> obj)                          {                              var fn = obj.TryGetValue("key"' out var oKey)                                  ? resolve1ArgFn(oKey' I)                                  : x => x;                              var comparer = obj.TryGetValue("comparer"' out var oComparer)                                  ? ObjectComparer.GetComparer(oComparer' I)                                  : Comparer<object>.Default;                              var desc = obj.TryGetValue("desc"' out var oDesc)                                   && oDesc != null && (oDesc == TRUE || (bool) oDesc);                                                            if (seq == null)                                  seq = desc                                       ? list.OrderByDescending(fn' comparer)                                      : list.OrderBy(fn' comparer);                              else                                  seq = desc                                      ? seq.ThenByDescending(fn' comparer)                                      : seq.ThenBy(fn' comparer);                           }                          else                          {                              var fn = resolve1ArgFn(keyFn' I);                              if (seq == null)                                  seq = list.OrderBy(fn);                              else                                  seq = seq.ThenBy(fn);                          }                      }                        return EnumerableUtils.ToList(seq);                  });
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("group-by"' -2' (I' a) => {                                            var keyFn = resolve1ArgFn(a[0]' I);                      var varArgs = EnumerableUtils.ToList(a[1].assertEnumerable());                        if (varArgs.Count == 1) // (group-by #(mod % 5) numbers)                      {                          var list = EnumerableUtils.ToList(varArgs[0].assertEnumerable());                          var ret = list.GroupBy(keyFn);                          return ret;                      }                      if (varArgs.Count == 2 && varArgs[0] is Dictionary<string' object> obj)                      {                          var mapFn = obj.TryGetValue("map"' out var oKey)                              ? resolve1ArgFn(oKey' I)                              : x => x;                          var comparer = obj.TryGetValue("comparer"' out var oComparer)                              ? ObjectComparer.GetEqualityComparer(oComparer' I)                              : EqualityComparer<object>.Default;                                                    var list = EnumerableUtils.ToList(varArgs[1].assertEnumerable());                          var ret = list.GroupBy(                              keyFn'                               mapFn'                               comparer);                          return ret;                      }                                            throw new LispEvalException("syntax: (group-by keyFn list) (group-by keyFn { :map mapFn :comparer comparer } list)"' varArgs.Last());                  });
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("group-by"' -2' (I' a) => {                                            var keyFn = resolve1ArgFn(a[0]' I);                      var varArgs = EnumerableUtils.ToList(a[1].assertEnumerable());                        if (varArgs.Count == 1) // (group-by #(mod % 5) numbers)                      {                          var list = EnumerableUtils.ToList(varArgs[0].assertEnumerable());                          var ret = list.GroupBy(keyFn);                          return ret;                      }                      if (varArgs.Count == 2 && varArgs[0] is Dictionary<string' object> obj)                      {                          var mapFn = obj.TryGetValue("map"' out var oKey)                              ? resolve1ArgFn(oKey' I)                              : x => x;                          var comparer = obj.TryGetValue("comparer"' out var oComparer)                              ? ObjectComparer.GetEqualityComparer(oComparer' I)                              : EqualityComparer<object>.Default;                                                    var list = EnumerableUtils.ToList(varArgs[1].assertEnumerable());                          var ret = list.GroupBy(                              keyFn'                               mapFn'                               comparer);                          return ret;                      }                                            throw new LispEvalException("syntax: (group-by keyFn list) (group-by keyFn { :map mapFn :comparer comparer } list)"' varArgs.Last());                  });
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("cons"' 2' a => new Cell(a[0]' a[1]));
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("eq"' 2' a => (a[0] == a[1]) ? TRUE : null);
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("rplaca"' 2' a => { ((Cell) a[0]).Car = a[1]; return a[1]; });
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("rplacd"' 2' a => { ((Cell) a[0]).Cdr = a[1]; return a[1]; });
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("instance?"' 2' (I' a) => I.AssertScope().Context.DefaultMethods.instanceOf(a[1]' a[0] is Sym s ? s.Name : a[0]) ? TRUE : null);
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("eql"' 2' a => a[0] == null                       ? a[1] == null                           ? TRUE : null                           : a[0].Equals(a[1])                           ? TRUE : null);
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("<"' 2' a => a[0].compareTo(a[1]) < 0 ? TRUE : null);
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("%"' 2' a =>  DynamicNumber.Mod(a[0]' a[1]));
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("mod"' 2' a => {                          var x = a[0];                          var y = a[1];                          if ((DynamicNumber.CompareTo(x' 0) < 0 && DynamicNumber.CompareTo(y' 0) > 0)                              || (DynamicNumber.CompareTo(x' 0) > 0 && DynamicNumber.CompareTo(y' 0) < 0))                              return DynamicNumber.Mod(x' DynamicNumber.Add(y' y));                          return DynamicNumber.Mod(x' y);                      });
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("remove"' 2' a => {                      var oNeedle = a[0];                      if (oNeedle is string needle)                          return a[1].ToString().Replace(needle'"");                      else if (a[1] is Cell c)                      {                          var j = c;                          while (j != null) {                              var prev = j;                              j = (Cell) j.Cdr;                              if (j != null && Equals(j.Car'oNeedle))                                  prev.Cdr = j.Cdr;                          }                          return c;                      }                      if (a[1] is IEnumerable e)                      {                          var to = new List<object>();                          var find = a[1];                          foreach (var x in e)                          {                              if (x == find)                                  continue;                              to.Add(x);                          }                          return to;                       }                                            throw new LispEvalException("not IEnumerable"' a[1]);                  });
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("glob"' 2' (I' a) => {                      var search = a[0];                      if (!(search is string pattern))                          throw new LispEvalException("syntax: (glob <search> <list>)"' a[0]);                      var to = new List<object>();                      foreach (var item in a[1].assertEnumerable())                      {                          if (item.ToString().Glob(pattern))                              to.Add(item);                      }                      return to;                  });
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("subseq"' -2' a => {                      var c = (Cell) a[1];                      var startPos = c.Car != null ? DynamicInt.Instance.Convert(c.Car) : 0;                      var endPos = c.Cdr is Cell c2 ? DynamicInt.Instance.Convert(c2.Car) : -1;                      if (a[0] is string s)                          return endPos >= 0 ? s.Substring(startPos' endPos - startPos) : s.Substring(startPos);                      if (a[0] is IEnumerable e)                          return (endPos >= 0 ? e.Map(x => x).Skip(startPos).Take(endPos - startPos) : e.Map(x => x).Skip(startPos));                                             throw new Exception("not an IEnumerable");                  });
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("truncate"' -2' a => fnMathDivisor(a' x => Math.Truncate(DynamicDouble.Instance.Convert(x))));
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("ceiling"' -2' a => fnMathDivisor(a' x => Math.Ceiling(DynamicDouble.Instance.Convert(x))));
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("floor"' -2' a => fnMathDivisor(a' x => Math.Floor(DynamicDouble.Instance.Convert(x))));
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("round"' -2' a => fnMathDivisor(a' x => Math.Round(DynamicDouble.Instance.Convert(x))));
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("expt"' 2' a => Math.Pow(DynamicDouble.Instance.Convert(a[0])' DynamicDouble.Instance.Convert(a[1])));
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,InitGlobals,The following statement contains a magic number: Def("apply"' 2' a => a[1] is Cell c                       ? Eval(new Cell(a[0]' MapCar(c' QqQuote))' null)                      : Eval(new Cell(a[0]' MapCar(ToCons(a[1].assertEnumerable())' QqQuote))' null));
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,Eval,The following statement contains a magic number: switch (x) {                          case Arg xarg:                              return xarg.GetValue(env);                          case Sym xsym:                              if (Globals.TryGetValue(xsym' out value))                                  return value;                              if (hasScope)                              {                                  var symName = xsym.Name;                                  if (scope.TryGetValue(symName' out value))                                      return value;                                                                    const int argsCount = 1;                                  // ScriptMethod or arg Delegate                                  var isScriptMethod = symName[0] == '/';                                   if ((isScriptMethod || symName[0].IsValidVarNameChar()) &&                                       scope.TryGetMethod(symName.Substring(1)' argsCount' out var fnDel' out var scriptMethod' out var requiresScope))                                  {                                      return (StaticMethodInvoker)(a =>                                       {                                          var scriptMethodArgs = requiresScope                                              ? new List<object> {scope}                                              : new List<object>();                                          scriptMethodArgs.AddRange(a);                                          return JsCallExpression.InvokeDelegate(fnDel' scriptMethod' isMemberExpr: false' scriptMethodArgs).unwrapScriptValue();                                      });                                  }                                  if (symName[0] == ':')                                  {                                      return (StaticMethodInvoker) (a => {                                          var name = symName.Substring(1);                                          var key = int.TryParse(name' out var index)                                              ? (object) index                                              : name;                                          var ret = scope.Context.DefaultMethods.get(a[0]' key);                                          return ret.unwrapScriptValue();                                      });                                  }                                  if (symName[0] == '.')                                  {                                      return (StaticMethodInvoker) (a => {                                                                                    var ret = scope.Context.AssertProtectedMethods().call(a[0]' symName.Substring(1).Replace('+''''')' TypeConstants.EmptyObjectList);                                          return ret.unwrapScriptValue();                                      });                                  }                                  if (symName.IndexOf('/') >= 0)                                  {                                      var fnNet = scope.Context.AssertProtectedMethods().Function(                                          symName.Replace('/'' '.').Replace('+'''''));                                      if (fnNet != null)                                      {                                          return (StaticMethodInvoker) (a =>                                               JsCallExpression.InvokeDelegate(fnNet' null' isMemberExpr: false' new List<object>(a)).unwrapScriptValue());                                      }                                  }                                  else if (symName[symName.Length - 1] == '.') // constructor (Type. arg) https://clojure.org/reference/java_interop#_the_dot_special_form                                  {                                      var typeName = symName.Substring(0' symName.Length - 1);                                      var fnCtor = scope.Context.AssertProtectedMethods().Constructor(typeName);                                      if (fnCtor != null)                                      {                                          return (StaticMethodInvoker) (a =>                                               JsCallExpression.InvokeDelegate(fnCtor' null' isMemberExpr: false' new List<object>(a)).unwrapScriptValue());                                      }                                      throw new NotSupportedException(ProtectedScripts.TypeNotFoundErrorMessage(typeName));                                  }                              }                              throw new LispEvalException("void variable"' x);                          case Cell xcell:                              var fn = xcell.Car;                              Cell arg = CdrCell(xcell);                              if (fn is Keyword) {                                  if (fn == QUOTE) {                                      if (arg != null && arg.Cdr == null)                                          return arg.Car;                                      throw new LispEvalException("bad quote"' x);                                  } else if (fn == PROGN) {                                      x = EvalProgN(arg' env);                                  } else if (fn == COND) {                                      x = EvalCond(arg' env);                                  } else if (fn == SETQ) {                                      return EvalSetQ(arg' env);                                  } else if (fn == EXPORT) {                                      return EvalExport(arg' env' scope);                                  } else if (fn == LAMBDA || fn == FN) {                                      return Compile(arg.unwrapDataListArgs()' env' Closure.Make);                                  } else if (fn == MACRO) {                                      if (env != null)                                          throw new LispEvalException("nested macro"' x);                                      return Compile(arg' null' Macro.Make);                                  } else if (fn == QUASIQUOTE) {                                      if (arg != null && arg.Cdr == null)                                          x = QqExpand(arg.Car);                                      else                                          throw new LispEvalException ("bad quasiquote"'                                                                   x);                                  } else {                                      throw new LispEvalException("bad keyword"' fn);                                  }                              } else { // Application of a function                                  if (fn is Sym fnsym)                                   {                                      if (fnsym == BOUND)                                      {                                          foreach (var name in arg)                                          {                                              if (!(name is Sym checksym))                                                  throw new LispEvalException("not Sym"' name);                                                var ret = Globals.ContainsKey(checksym) || hasScope && scope.TryGetValue(checksym.Name' out _);                                              if (!ret)                                                  return null;                                          }                                          return TRUE;                                      }                                                                            // Expand fn = Eval(fn' env) here for speed.                                      if (Globals.TryGetValue(fnsym' out value))                                      {                                          fn = value;                                      }                                      else if (hasScope)                                      {                                          var fnName = fnsym.Name;                                          var fnArgs = EvalArgs(arg' this' env);                                          var argLength = arg?.Length ?? 0;                                            // ScriptMethod or arg Delegate                                          var isScriptMethod = fnName[0] == '/';                                           if ((isScriptMethod || fnName[0].IsValidVarNameChar()) && scope.TryGetMethod(isScriptMethod ? fnName.Substring(1) : fnName' argLength'                                              out var fnDel' out var scriptMethod' out var requiresScope))                                          {                                              var scriptMethodArgs = requiresScope                                                  ? new List<object> {scope}                                                  : new List<object>();                                              scriptMethodArgs.AddRange(fnArgs);                                                var ret = JsCallExpression.InvokeDelegate(fnDel' scriptMethod' isMemberExpr: false' scriptMethodArgs);                                              return ret.unwrapScriptValue();                                          }                                          if (isScriptMethod)                                              throw new NotSupportedException($"Could not resolve #Script method '{fnName.Substring(1)}'");                                                                                    if (fnName[0] == ':')                                          {                                              var name = fnArgs.Length == 1                                                  ? fnName.Substring(1)                                                  : fnArgs.Length == 2 && fnArgs[0] is string s                                                    ? s                                                    : throw new NotSupportedException(":index access requires 1 instance target or a string key");                                                                                                      var target = fnArgs[fnArgs.Length - 1];                                              if (target == null)                                                  return null;                                              var key = int.TryParse(name' out var index)                                                  ? (object) index                                                  : name;                                              var ret = scope.Context.DefaultMethods.get(target' key);                                              return ret.unwrapScriptValue();                                          }                                          if (fnName[0] == '.') // member method https://clojure.org/reference/java_interop#_member_access                                          {                                              if (fnArgs.Length == 0)                                                  throw new NotSupportedException(".memberAccess requires an instance target");                                                                                                var target = fnArgs[0];                                              if (target == null)                                                  return null;                                              var methodArgs = new List<object>();                                              for (var i=1; i<fnArgs.Length; i++)                                                  methodArgs.Add(fnArgs[i]);                                                                                            var ret = scope.Context.AssertProtectedMethods().call(target' fnName.Substring(1)' methodArgs);                                              return ret.unwrapScriptValue();                                          }                                          if (fnName.IndexOf('/') >= 0) // static method https://clojure.org/reference/java_interop#_member_access                                          {                                              var fnArgsList = new List<object>(fnArgs);                                              var fnNet = scope.Context.AssertProtectedMethods().Function(                                                  fnName.Replace('/'' '.').Replace('+''''')' fnArgsList);                                                                                                if (fnNet != null)                                              {                                                  var ret = JsCallExpression.InvokeDelegate(fnNet' null' isMemberExpr: false' fnArgsList);                                                  return ret.unwrapScriptValue();                                              }                                          }                                          else if (fnName[fnName.Length - 1] == '.') // constructor (Type. arg) https://clojure.org/reference/java_interop#_the_dot_special_form                                          {                                              var typeName = fnName.Substring(0' fnName.Length - 1);                                              var ret = scope.Context.AssertProtectedMethods().@new(typeName' new List<object>(fnArgs));                                              if (ret == null)                                                  throw new NotSupportedException(ProtectedScripts.TypeNotFoundErrorMessage(typeName));                                                                                                return ret;                                          }                                      }                                      if (fn == null)                                           throw new LispEvalException("undefined"' fnsym);                                   } else {                                      fn = Eval(fn' env);                                  }                                  switch (fn) {                                  case Closure fnclosure:                                      env = fnclosure.MakeEnv(this' arg' env);                                      x = EvalProgN(fnclosure.Body' env);                                      break;                                  case Macro fnmacro:                                      x = fnmacro.ExpandWith(this' arg);                                      break;                                  case BuiltInFunc fnbulitin:                                      return fnbulitin.EvalWith(this' arg' env);                                  case Delegate fnDel:                                      var scriptMethodArgs = new List<object>(EvalArgs(arg' this' env));                                      var ret = JsCallExpression.InvokeDelegate(fnDel' null' isMemberExpr: false' scriptMethodArgs);                                      return ret.unwrapScriptValue();                                  default:                                      throw new LispEvalException("not applicable"' fn);                                  }                              }                              break;                          case Lambda xlambda:                              return new Closure(xlambda' env);                          default:                              return x; // numbers' strings' null etc.                          }
Magic Number,ServiceStack.Script,Interpreter,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,Compile,The following statement contains a magic number: body = ExpandMacros(body' 20' env) as Cell;
Magic Number,ServiceStack.Script,Reader,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,ReadToken,The following statement contains a magic number: tokens.Add(Sym.New(literal.Slice(0' 2).ToString()));
Magic Number,ServiceStack.Script,Reader,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Lisp.cs,ReadToken,The following statement contains a magic number: literal = literal.Advance(2);
Magic Number,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,ParseTemplateBody,The following statement contains a magic number: var c = literal.SafeGetChar(pos + 2);
Magic Number,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,ParseTemplateBody,The following statement contains a magic number: pos = literal.IndexOf("}}"' pos) + 2;
Magic Number,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,ParseTemplateBody,The following statement contains a magic number: literal.Slice(pos + 2 + 1).ParseVarName(out var name);
Magic Number,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,ParseTemplateBody,The following statement contains a magic number: pos += 2;
Magic Number,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,ParseTemplateElseBlock,The following statement contains a magic number: var c = literal.SafeGetChar(pos + 2);
Magic Number,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,ParseTemplateElseBlock,The following statement contains a magic number: pos = literal.IndexOf("}}"' pos) + 2;
Magic Number,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,ParseTemplateElseBlock,The following statement contains a magic number: pos += 2;
Magic Number,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,ParseScript,The following statement contains a magic number: const int delim = 3;
Magic Number,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,ParseScript,The following statement contains a magic number: var delimLen = text.Span.SafeCharEquals(cursorPos - 2' '\r') ? 2 : 1;
Magic Number,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,ParseScript,The following statement contains a magic number: var delimLen = text.Span.SafeCharEquals(cursorPos - 2' '\r') ? 2 : 1;
Magic Number,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,ParseTemplate,The following statement contains a magic number: var varStartPos = pos + 2;
Magic Number,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,ParseTemplate,The following statement contains a magic number: var nextLastPos = text.IndexOf("|}"' varStartPos) + 2;
Magic Number,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,ParseTemplate,The following statement contains a magic number: lastPos = text.IndexOf("|}"' varStartPos) + 2;
Magic Number,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,ParseTemplate,The following statement contains a magic number: lastPos = text.IndexOf("*}}"' varStartPos) + 3;
Magic Number,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,ParseTemplateScriptBlock,The following statement contains a magic number: literal = literal.Advance(endExprPos + 2);
Magic Number,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,ParseTemplateScriptBlock,The following statement contains a magic number: literal = literal.Advance(2 + 1 + blockName.Length + 2);
Magic Number,ServiceStack.Script,ScriptTemplateUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\ScriptLanguage.Template.cs,ParseTemplateScriptBlock,The following statement contains a magic number: literal = literal.Advance(2 + 1 + blockName.Length + 2);
Missing Default,ServiceStack,ExpressionUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ExpressionUtils.cs,GetValue,The following switch statement is missing a default case: switch (binding.BindingType)              {                  case MemberBindingType.Assignment:                      var assign = (MemberAssignment)binding;                      if (assign.Expression is ConstantExpression constant)                          return constant.Value;                        try                      {                          return CachedExpressionCompiler.Evaluate(assign.Expression);                      }                      catch (Exception ex)                      {                          Log.Error("Error compiling expression in MemberBinding.GetValue()"' ex);                            //Fallback to compile and execute                          var member = Expression.Convert(assign.Expression' typeof(object));                          var lambda = Expression.Lambda<Func<object>>(member);                          var getter = lambda.Compile();                          return getter();                      }              }
Missing Default,ServiceStack,StringUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\StringUtils.cs,ParseCommands,The following switch statement is missing a default case: switch (c)                      {                          case '"':                              inDoubleQuotes = true;                              continue;                          case '\'':                              inSingleQuotes = true;                              continue;                          case '`':                              inBackTickQuotes = true;                              continue;                          case '′':                              inPrimeQuotes = true;                              continue;                      }
Missing Default,ServiceStack,StringUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\StringUtils.cs,ParseArguments,The following switch statement is missing a default case: switch (c)                  {                      case '"':                          inDoubleQuotes = true;                          continue;                      case '\'':                          inSingleQuotes = true;                          continue;                      case '`':                          inBackTickQuotes = true;                          continue;                      case '′':                          inPrimeQuotes = true;                          continue;                      case '[':                          inBrackets++;                          continue;                      case '{':                          inBraces++;                          continue;                      case '(':                          inParens++;                          continue;                      case ''':                      {                          var arg = argsString.Slice(lastPos' i - lastPos).Trim();                          to.Add(arg);                          lastPos = i + 1;                          continue;                      }                      case ')':                      {                          var arg = argsString.Slice(lastPos' i - lastPos).Trim();                          if (!arg.IsNullOrEmpty())                          {                              to.Add(arg);                          }                            args = to;                          return argsString.Advance(i);                      }                  }
Missing Default,ServiceStack,StringUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\StringUtils.cs,ReplaceOutsideOfQuotes,The following switch statement is missing a default case: switch (str[i-1])                       {                          case '"':                          case '\'':                          case '`':                          case '′':                              continue;                      }
Missing Default,ServiceStack,StringUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\StringUtils.cs,ReplaceOutsideOfQuotes,The following switch statement is missing a default case: switch (c)                   {                      case '"':                      case '\'':                      case '`':                      case '′':                          var prevChunk = str.Substring(chunkLastPos' i-chunkLastPos);                          sb.Append(ReplacePairs(prevChunk' replaceStringsPairs));                          chunkLastPos = i;                          quoteStartPos = i;                          switch (c)                          {                              case '"':                                  inDoubleQuotes = true;                                  continue;                              case '\'':                                  inSingleQuotes = true;                                  continue;                              case '`':                                  inBackTickQuotes = true;                                  continue;                              case '′':                                  inPrimeQuotes = true;                                  continue;                          }                          continue;                  }
Missing Default,ServiceStack,StringUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\StringUtils.cs,ReplaceOutsideOfQuotes,The following switch statement is missing a default case: switch (c)                          {                              case '"':                                  inDoubleQuotes = true;                                  continue;                              case '\'':                                  inSingleQuotes = true;                                  continue;                              case '`':                                  inBackTickQuotes = true;                                  continue;                              case '′':                                  inPrimeQuotes = true;                                  continue;                          }
Missing Default,ServiceStack,StringUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\StringUtils.cs,SplitGenericArgs,The following switch statement is missing a default case: switch (argChar)                  {                      case ''':                          if (blockCount == 0)                          {                              var arg = argList.Substring(lastPos' i - lastPos);                              to.Add(arg);                              lastPos = i + 1;                          }                          break;                      case '<':                          blockCount++;                          break;                      case '>':                          blockCount--;                          break;                  }
Missing Default,ServiceStack,ViewUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\ViewUtils.cs,StyleText,The following switch statement is missing a default case: switch (textStyle)              {                  case TextStyle.SplitCase:                      return DefaultScripts.splitCase(text);                  case TextStyle.Humanize:                      return DefaultScripts.humanize(text);                  case TextStyle.TitleCase:                      return DefaultScripts.titleCase(text);                  case TextStyle.PascalCase:                      return DefaultScripts.pascalCase(text);                  case TextStyle.CamelCase:                      return DefaultScripts.camelCase(text);              }
Missing Default,ServiceStack.Script,JsTokenUtils,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\JsToken.cs,GetUnaryOperator,The following switch statement is missing a default case: switch (c)              {                  case '-':                      return JsMinus.Operator;                  case '+':                      return JsPlus.Operator;                  case '!':                      return JsNot.Operator;                  case '~':                      return JsBitwiseNot.Operator;              }
Missing Default,ServiceStack.Script,DefaultScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\DefaultScripts.Array.cs,textStyle,The following switch statement is missing a default case: switch (headerStyle)              {                  case nameof(splitCase):                      return splitCase(text);                  case nameof(humanize):                      return humanize(text);                  case nameof(titleCase):                      return titleCase(text);                  case nameof(pascalCase):                      return pascalCase(text);                  case nameof(camelCase):                      return camelCase(text);                  case nameof(snakeCase):                      return snakeCase(text);                  case nameof(kebabCase):                      return kebabCase(text);              }
Missing Default,ServiceStack.Script,ProtectedScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\ProtectedScripts.cs,typeof,The following switch statement is missing a default case: switch (_typeName)                      {                          case "bool":                              return !isArray ? typeof(bool) : typeof(bool[]);                          case "byte":                              return !isArray ? typeof(byte) : typeof(byte[]);                          case "sbyte":                              return !isArray ? typeof(sbyte) : typeof(sbyte[]);                          case "char":                              return !isArray ? typeof(char) : typeof(char[]);                          case "decimal":                              return !isArray ? typeof(decimal) : typeof(decimal[]);                          case "double":                              return !isArray ? typeof(double) : typeof(double[]);                          case "float":                              return !isArray ? typeof(float) : typeof(float[]);                          case "int":                              return !isArray ? typeof(int) : typeof(int[]);                          case "uint":                              return !isArray ? typeof(uint) : typeof(uint[]);                          case "long":                              return !isArray ? typeof(long) : typeof(long[]);                          case "ulong":                              return !isArray ? typeof(ulong) : typeof(ulong[]);                          case "object":                              return !isArray ? typeof(object) : typeof(object[]);                          case "short":                              return !isArray ? typeof(short) : typeof(short[]);                          case "ushort":                              return !isArray ? typeof(ushort) : typeof(ushort[]);                          case "string":                              return !isArray ? typeof(string) : typeof(string[]);                      }
Missing Default,ServiceStack.Script,ProtectedScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\ProtectedScripts.cs,ConvertDataTypeToContentType,The following switch statement is missing a default case: switch (dataType)              {                  case "json":                      return MimeTypes.Json;                  case "jsv":                      return MimeTypes.Jsv;                  case "csv":                      return MimeTypes.Csv;                  case "xml":                      return MimeTypes.Xml;                  case "text":                      return MimeTypes.PlainText;                  case "form":                      return MimeTypes.FormUrlEncoded;              }
Missing Default,ServiceStack.Script,ProtectedScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\ProtectedScripts.cs,ConvertDataToString,The following switch statement is missing a default case: switch (contentType)              {                  case MimeTypes.PlainText:                      return data.ToString();                  case MimeTypes.Json:                      return data.ToJson();                  case MimeTypes.Csv:                      return data.ToCsv();                  case MimeTypes.Jsv:                      return data.ToJsv();                  case MimeTypes.Xml:                      return data.ToXml();                  case MimeTypes.FormUrlEncoded:                      WriteComplexTypeDelegate holdQsStrategy = QueryStringStrategy.FormUrlEncoded;                      QueryStringSerializer.ComplexTypeStrategy = QueryStringStrategy.FormUrlEncoded;                      var urlEncodedBody = QueryStringSerializer.SerializeToString(data);                      QueryStringSerializer.ComplexTypeStrategy = holdQsStrategy;                      return urlEncodedBody;              }
Missing Default,ServiceStack.Script,ProtectedScripts,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.Common\Script\Methods\ProtectedScripts.cs,GetCache,The following switch statement is missing a default case: switch (cacheName)              {                  case nameof(ScriptContext.Cache):                      return Context.Cache;                  case nameof(ScriptContext.CacheMemory):                      return Context.CacheMemory;                  case nameof(ScriptContext.ExpiringCache):                      return Context.ExpiringCache;                  case nameof(ScriptTemplateUtils.BinderCache):                      return ScriptTemplateUtils.BinderCache;                  case nameof(ScriptContext.JsTokenCache):                      return Context.JsTokenCache;                  case nameof(ScriptContext.AssignExpressionCache):                      return Context.AssignExpressionCache;                  case nameof(ScriptContext.PathMappings):                      return Context.PathMappings;              }
