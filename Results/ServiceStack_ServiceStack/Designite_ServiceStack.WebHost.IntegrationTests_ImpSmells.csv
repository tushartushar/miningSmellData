Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ServiceStack.WebHost.IntegrationTests.Tests,AsyncRestClientTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\AsyncRestClientTests.cs,Can_call_PostAsync_to_add_new_Movie_using_RestClientAsync,The length of the statement  "                TagLine = "A fisherman' a smuggler' and a syndicate of businessmen match wits over the possession of a priceless diamond."' " is 123.
Long Statement,ServiceStack.WebHost.IntegrationTests.Tests,AsyncRestClientTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\AsyncRestClientTests.cs,Can_call_DeleteAsync_to_delete_Movie_using_RestClientAsync,The length of the statement  "                TagLine = "A fisherman' a smuggler' and a syndicate of businessmen match wits over the possession of a priceless diamond."' " is 123.
Long Statement,ServiceStack.WebHost.IntegrationTests.Tests,ExceptionHandlingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\ExceptionHandlingTests.cs,Returns_no_body_when_NoResponseDto,The length of the statement  "                Assert.That(body' Does.StartWith("{\"responseStatus\":{\"errorCode\":\"CustomException\"'\"message\":\"User Defined Error\"")); " is 127.
Long Statement,ServiceStack.WebHost.IntegrationTests.Tests,FileUploadTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\FileUploadTests.cs,UploadFile,The length of the statement  "            string headerTemplate = "\r\n--" + boundary + "\r\nContent-Disposition: form-data; name=\"{0}\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n"; " is 144.
Long Statement,ServiceStack.WebHost.IntegrationTests.Tests,FileUploadTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\FileUploadTests.cs,Can_GET_upload_file,The length of the statement  "            var webRequest = (HttpWebRequest)WebRequest.Create(base.ServiceClientBaseUri + "/fileuploads/TestExistingDir/upload.html"); " is 123.
Long Statement,ServiceStack.WebHost.IntegrationTests.Tests,FileUploadTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\FileUploadTests.cs,Can_POST_upload_file_using_ServiceClient_with_request,The length of the statement  "            var response = client.PostFileWithRequest<FileUploadResponse>(Config.ServiceStackBaseUri + "/fileuploads"' uploadFile' request); " is 128.
Long Statement,ServiceStack.WebHost.IntegrationTests.Tests,HelloWorldRawHttpPostTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\HelloWorldRawHttpPostTests.cs,Post_XML_to_HelloWorld,The length of the statement  "                Assert.That(stream.ReadToEnd()' Is.EqualTo("<?xml version=\"1.0\" encoding=\"utf-8\"?><HelloResponse xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://schemas.servicestack.net/types\"><Result>Hello' World!</Result></HelloResponse>")); " is 253.
Long Statement,ServiceStack.WebHost.IntegrationTests.Tests,RestWebServiceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\RestWebServiceTests.cs,Can_POST_new_movie_with_FormData,The length of the statement  "            const string formData = "Id=0&ImdbId=tt0110912&Title=Pulp+Fiction&Rating=8.9&Director=Quentin+Tarantino&ReleaseDate=1994-11-24&TagLine=Girls+like+me+don't+make+invitations+like+this+to+just+anyone!&Genres=Crime%2CDrama%2CThriller"; " is 231.
Long Statement,ServiceStack.WebHost.IntegrationTests.Tests,Soap12IntegrationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\WebServicesTests.cs,Sending_invalid_request_returns_invalid_response,The length of the statement  "                var response = (AddIntsResponse)Serialization.DataContractSerializer.Instance.DeserializeFromString(bodyXml' responseType); " is 123.
Magic Number,ServiceStack.WebHost.IntegrationTests.Services,GetFactorialAsyncService,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Services\AsyncTaskServices.cs,Any,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,ServiceStack.WebHost.IntegrationTests.Services,HelloImage3Service,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Services\HelloImage.cs,Any,The following statement contains a magic number: var image = new Bitmap(10' 10);
Magic Number,ServiceStack.WebHost.IntegrationTests.Services,HelloImage3Service,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Services\HelloImage.cs,Any,The following statement contains a magic number: var image = new Bitmap(10' 10);
Magic Number,ServiceStack.WebHost.IntegrationTests.Services,CustomersValidator,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Services\CustomerService.cs,CustomersValidator,The following statement contains a magic number: RuleSet(ApplyTo.Post | ApplyTo.Put' () => {  				RuleFor(x => x.LastName).NotEmpty().WithErrorCode("ShouldNotBeEmpty");  				RuleFor(x => x.FirstName).NotEmpty().WithMessage("Please specify a first name");  				RuleFor(x => x.Company).NotNull();  				RuleFor(x => x.Discount).NotEqual(0).When(x => x.HasDiscount);  				RuleFor(x => x.Address).NotNull().Length(20' 250);  				RuleFor(x => x.Postcode).Must(BeAValidPostcode).WithMessage("Please specify a valid postcode");  			});
Magic Number,ServiceStack.WebHost.IntegrationTests.Services,CustomersValidator,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Services\CustomerService.cs,CustomersValidator,The following statement contains a magic number: RuleSet(ApplyTo.Post | ApplyTo.Put' () => {  				RuleFor(x => x.LastName).NotEmpty().WithErrorCode("ShouldNotBeEmpty");  				RuleFor(x => x.FirstName).NotEmpty().WithMessage("Please specify a first name");  				RuleFor(x => x.Company).NotNull();  				RuleFor(x => x.Discount).NotEqual(0).When(x => x.HasDiscount);  				RuleFor(x => x.Address).NotNull().Length(20' 250);  				RuleFor(x => x.Postcode).Must(BeAValidPostcode).WithMessage("Please specify a valid postcode");  			});
Magic Number,ServiceStack.Shared.Tests,IocService,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Shared\IocService.cs,Any,The following statement contains a magic number: await Task.Delay(10);
Magic Number,ServiceStack.Shared.Tests,IocService,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Shared\IocService.cs,Any,The following statement contains a magic number: await Task.Delay(10);
Magic Number,ServiceStack.Shared.Tests,IocScopeService,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Shared\IocService.cs,Any,The following statement contains a magic number: await Task.Delay(10);
Magic Number,ServiceStack.Shared.Tests,IocDisposableService,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Shared\IocService.cs,Any,The following statement contains a magic number: await Task.Delay(10);
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,AsyncProgressTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\AsyncProgressTests.cs,Can_report_progress_when_downloading_async,The following statement contains a magic number: AsyncServiceClient.BufferSize = 100;
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,AsyncProgressTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\AsyncProgressTests.cs,AsyncDownloadWithProgress,The following statement contains a magic number: AsyncServiceClient.BufferSize = 100;
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,AsyncRestClientTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\AsyncRestClientTests.cs,Can_call_GetAsync_on_GetFactorial_using_RestClientAsync,The following statement contains a magic number: Assert.That(response.Result' Is.EqualTo(GetFactorialService.GetFactorial(3)));
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,AsyncRestClientTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\AsyncRestClientTests.cs,Can_call_PostAsync_to_add_new_Movie_using_RestClientAsync,The following statement contains a magic number: var newMovie = new Movie              {                  ImdbId = "tt0450259"'                  Title = "Blood Diamond"'                  Rating = 8.0m'                  Director = "Edward Zwick"'                  ReleaseDate = new DateTime(2007' 1' 26)'                  TagLine = "A fisherman' a smuggler' and a syndicate of businessmen match wits over the possession of a priceless diamond."'                  Genres = new List<string> { "Adventure"' "Drama"' "Thriller" }'              };
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,AsyncRestClientTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\AsyncRestClientTests.cs,Can_call_PostAsync_to_add_new_Movie_using_RestClientAsync,The following statement contains a magic number: var newMovie = new Movie              {                  ImdbId = "tt0450259"'                  Title = "Blood Diamond"'                  Rating = 8.0m'                  Director = "Edward Zwick"'                  ReleaseDate = new DateTime(2007' 1' 26)'                  TagLine = "A fisherman' a smuggler' and a syndicate of businessmen match wits over the possession of a priceless diamond."'                  Genres = new List<string> { "Adventure"' "Drama"' "Thriller" }'              };
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,AsyncRestClientTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\AsyncRestClientTests.cs,Can_call_PostAsync_to_add_new_Movie_using_RestClientAsync,The following statement contains a magic number: var newMovie = new Movie              {                  ImdbId = "tt0450259"'                  Title = "Blood Diamond"'                  Rating = 8.0m'                  Director = "Edward Zwick"'                  ReleaseDate = new DateTime(2007' 1' 26)'                  TagLine = "A fisherman' a smuggler' and a syndicate of businessmen match wits over the possession of a priceless diamond."'                  Genres = new List<string> { "Adventure"' "Drama"' "Thriller" }'              };
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,AsyncRestClientTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\AsyncRestClientTests.cs,Can_call_DeleteAsync_to_delete_Movie_using_RestClientAsync,The following statement contains a magic number: var newMovie = new Movie              {                  ImdbId = "tt0450259"'                  Title = "Blood Diamond"'                  Rating = 8.0m'                  Director = "Edward Zwick"'                  ReleaseDate = new DateTime(2007' 1' 26)'                  TagLine = "A fisherman' a smuggler' and a syndicate of businessmen match wits over the possession of a priceless diamond."'                  Genres = new List<string> { "Adventure"' "Drama"' "Thriller" }'              };
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,AsyncRestClientTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\AsyncRestClientTests.cs,Can_call_DeleteAsync_to_delete_Movie_using_RestClientAsync,The following statement contains a magic number: var newMovie = new Movie              {                  ImdbId = "tt0450259"'                  Title = "Blood Diamond"'                  Rating = 8.0m'                  Director = "Edward Zwick"'                  ReleaseDate = new DateTime(2007' 1' 26)'                  TagLine = "A fisherman' a smuggler' and a syndicate of businessmen match wits over the possession of a priceless diamond."'                  Genres = new List<string> { "Adventure"' "Drama"' "Thriller" }'              };
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,AsyncRestClientTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\AsyncRestClientTests.cs,Can_call_DeleteAsync_to_delete_Movie_using_RestClientAsync,The following statement contains a magic number: var newMovie = new Movie              {                  ImdbId = "tt0450259"'                  Title = "Blood Diamond"'                  Rating = 8.0m'                  Director = "Edward Zwick"'                  ReleaseDate = new DateTime(2007' 1' 26)'                  TagLine = "A fisherman' a smuggler' and a syndicate of businessmen match wits over the possession of a priceless diamond."'                  Genres = new List<string> { "Adventure"' "Drama"' "Thriller" }'              };
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,BinarySerializedTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\BinarySerializedTests.cs,RandomString,The following statement contains a magic number: tmp.Append(Convert.ToChar(((byte)rnd.Next(254))).ToString());
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,BinarySerializedTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\BinarySerializedTests.cs,Can_serialize_RandomString,The following statement contains a magic number: var rand = RandomString(32);
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,BinarySerializedTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\BinarySerializedTests.cs,Can_call_cached_WebService_with_Protobuf,The following statement contains a magic number: var fromEmail = RandomString(32);
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,BinarySerializedTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\BinarySerializedTests.cs,Can_call_WebService_with_Protobuf,The following statement contains a magic number: var fromEmail = RandomString(32);
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,AsyncLoadTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\AsyncTaskTests.cs,Load_test_GetFactorialSync_sync,The following statement contains a magic number: var response = client.Get(new GetFactorialSync { ForNumber = 3 });
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,AsyncLoadTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\AsyncTaskTests.cs,Load_test_GetFactorialSync_sync,The following statement contains a magic number: i % 100 == 0
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,AsyncLoadTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\AsyncTaskTests.cs,Load_test_GetFactorialSync_async,The following statement contains a magic number: var fetchTasks = NoOfTimes.Times(() =>                  client.GetAsync(new GetFactorialSync { ForNumber = 3 })                  .ContinueWith(t =>                  {                      if (++i % 100 == 0)                      {                          "{0}: {1}".Print(i' t.Result.Result);                      }                  }));
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,AsyncLoadTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\AsyncTaskTests.cs,Load_test_GetFactorialSync_async,The following statement contains a magic number: var fetchTasks = NoOfTimes.Times(() =>                  client.GetAsync(new GetFactorialSync { ForNumber = 3 })                  .ContinueWith(t =>                  {                      if (++i % 100 == 0)                      {                          "{0}: {1}".Print(i' t.Result.Result);                      }                  }));
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,AsyncLoadTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\AsyncTaskTests.cs,Load_test_GetFactorialGenericAsync_sync,The following statement contains a magic number: var response = client.Get(new GetFactorialGenericAsync { ForNumber = 3 });
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,AsyncLoadTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\AsyncTaskTests.cs,Load_test_GetFactorialGenericAsync_sync,The following statement contains a magic number: i % 100 == 0
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,AsyncLoadTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\AsyncTaskTests.cs,Load_test_GetFactorialGenericAsync_async,The following statement contains a magic number: var fetchTasks = NoOfTimes.Times(() =>                  client.GetAsync(new GetFactorialGenericAsync { ForNumber = 3 })                  .ContinueWith(t =>                  {                      if (++i % 100 == 0)                      {                          "{0}: {1}".Print(i' t.Result.Result);                      }                  }));
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,AsyncLoadTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\AsyncTaskTests.cs,Load_test_GetFactorialGenericAsync_async,The following statement contains a magic number: var fetchTasks = NoOfTimes.Times(() =>                  client.GetAsync(new GetFactorialGenericAsync { ForNumber = 3 })                  .ContinueWith(t =>                  {                      if (++i % 100 == 0)                      {                          "{0}: {1}".Print(i' t.Result.Result);                      }                  }));
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,LoadTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\LoadTests.cs,Load_test_download_async_pdf,The following statement contains a magic number: const int NoOfTimes = 1000;
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,ImagingServiceWithHighTimeout,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\LoadTests.cs,ImagingServiceWithHighTimeout,The following statement contains a magic number: Timeout = new TimeSpan(0' 3' 0);
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,CustomFieldHttpErrorService,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\ExceptionHandlingTests.cs,Any,The following statement contains a magic number: throw new HttpError(new CustomFieldHttpErrorResponse              {                  Custom = "Ignored"'                  ResponseStatus = new ResponseStatus("StatusErrorCode"' "StatusErrorMessage")              }'              500'              "HeaderErrorCode");
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,ExceptionHandlingTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\ExceptionHandlingTests.cs,Returns_custom_Status_and_Description_with_CustomHttpError,The following statement contains a magic number: var json = PredefinedJsonUrl<CustomHttpError>()                      .AddQueryParam("StatusCode"' 406)                      .AddQueryParam("StatusDescription"' "CustomDescription")                      .GetJsonFromUrl();
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,ProtoBufEmail,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\ProtoBufServiceTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (FromAddress != null ? FromAddress.GetHashCode() : 0);
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,ProtoBufEmail,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\ProtoBufServiceTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (Subject != null ? Subject.GetHashCode() : 0);
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,ProtoBufEmail,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\ProtoBufServiceTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (Body != null ? Body.GetHashCode() : 0);
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,ProtoBufEmail,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\ProtoBufServiceTests.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (AttachmentData != null ? AttachmentData.GetHashCode() : 0);
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,AssertValidAccessTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\AssertValidAccessTests.cs,RegisterNewUser,The following statement contains a magic number: var userId = Environment.TickCount % 10000;
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,CustomerServiceValidationTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\CustomerServiceValidationTests.cs,SetUp,The following statement contains a magic number: validRequest = new Customers              {                  Id = 1'                  FirstName = "FirstName"'                  LastName = "LastName"'                  Address = "12345 Address St' New York"'                  Company = "Company"'                  Discount = 10'                  HasDiscount = true'                  Postcode = "11215"'              };
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,FileUploadTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\FileUploadTests.cs,Can_POST_upload_file_using_ServiceClient_with_request,The following statement contains a magic number: var request = new FileUpload { CustomerId = 123' CustomerName = "Foo'Bar" };
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,FileUploadTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\FileUploadTests.cs,Can_POST_upload_file_using_ServiceClient_with_request,The following statement contains a magic number: Assert.That(response.CustomerId' Is.EqualTo(123));
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,FileUploadTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\FileUploadTests.cs,Can_POST_upload_file_using_ServiceClient_with_request_and_QueryString,The following statement contains a magic number: Assert.That(response.CustomerId' Is.EqualTo(123));
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,RestPathResolutionUnitTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\RestPathResolutionUnitTests.cs,Can_call_EchoRequest_with_QueryString,The following statement contains a magic number: Assert.That(request.Long' Is.EqualTo(2));
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,RestsTestBase,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\RestsTestBase.cs,AssertResponse,The following statement contains a magic number: Assert.That(statusCode' Is.LessThan(400));
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,RestWebServiceTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\RestWebServiceTests.cs,Can_call_EchoRequest_with_QueryString,The following statement contains a magic number: AssertResponse<EchoRequest>(response' MimeTypes.Json' x =>              {                  Assert.That(x.Id' Is.EqualTo(1));                  Assert.That(x.String' Is.EqualTo("One"));                  Assert.That(x.Long' Is.EqualTo(2));                  Assert.That(x.Bool' Is.EqualTo(true));              });
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,SoapTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\SoapTests.cs,Soap12_Service_does_not_return_BOM,The following statement contains a magic number: Assert.That(firstByte' Is.Not.EqualTo(239));
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,UniqueRequestTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\UniqueRequestTests.cs,Can_handle_collections_with_ServiceClient,The following statement contains a magic number: var request = new Collections              {                  Ids = new[] { 1' 2' 3 }'                  Names = new List<string> { "A"' "B"' "C" }'              };
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,UniqueRequestTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\UniqueRequestTests.cs,Can_handle_collections_with_ServiceClient,The following statement contains a magic number: var request = new Collections              {                  Ids = new[] { 1' 2' 3 }'                  Names = new List<string> { "A"' "B"' "C" }'              };
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,UniqueRequestTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\UniqueRequestTests.cs,Can_handle_collections_with_HttpClient,The following statement contains a magic number: Assert.That(response.Ids' Is.EquivalentTo(new[] { 1' 2' 3 }));
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,UniqueRequestTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\UniqueRequestTests.cs,Can_handle_collections_with_HttpClient,The following statement contains a magic number: Assert.That(response.Ids' Is.EquivalentTo(new[] { 1' 2' 3 }));
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,UniqueRequestTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\UniqueRequestTests.cs,Can_handle_collections_with_HttpClient,The following statement contains a magic number: Assert.That(response.Ids' Is.EquivalentTo(new[] { 1' 2' 3 }));
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,UniqueRequestTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\UniqueRequestTests.cs,Can_handle_collections_with_HttpClient,The following statement contains a magic number: Assert.That(response.Ids' Is.EquivalentTo(new[] { 1' 2' 3 }));
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,UniqueRequestTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\UniqueRequestTests.cs,Can_handle_collections_with_HttpClient_on_predefined_route,The following statement contains a magic number: Assert.That(response.Ids' Is.EquivalentTo(new[] { 1' 2' 3 }));
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,UniqueRequestTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\UniqueRequestTests.cs,Can_handle_collections_with_HttpClient_on_predefined_route,The following statement contains a magic number: Assert.That(response.Ids' Is.EquivalentTo(new[] { 1' 2' 3 }));
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,UniqueRequestTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\UniqueRequestTests.cs,Can_handle_collections_with_HttpClient_on_predefined_route,The following statement contains a magic number: Assert.That(response.Ids' Is.EquivalentTo(new[] { 1' 2' 3 }));
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,UniqueRequestTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\UniqueRequestTests.cs,Can_handle_collections_with_HttpClient_on_predefined_route,The following statement contains a magic number: Assert.That(response.Ids' Is.EquivalentTo(new[] { 1' 2' 3 }));
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,WebServicesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\WebServicesTests.cs,Does_Execute_AddInts,The following statement contains a magic number: var response = client.Send<AddIntsResponse>(new AddInts { A = 1' B = 2 });
Magic Number,ServiceStack.WebHost.IntegrationTests.Tests,WebServicesTests,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Tests\WebServicesTests.cs,Does_Execute_AddInts,The following statement contains a magic number: Assert.That(response.Result' Is.EqualTo(3));
Magic Number,ServiceStack.WebHost.IntegrationTests,AppHost,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\ServiceStack.WebHost.IntegrationTests\Global.asax.cs,Configure,The following statement contains a magic number: Plugins.Add(new AutoQueryFeature { MaxLimit = 100 });
