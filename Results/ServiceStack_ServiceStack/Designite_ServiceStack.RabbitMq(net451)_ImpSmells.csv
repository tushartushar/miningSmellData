Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ServiceStack.RabbitMq,RabbitMqExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.RabbitMq\RabbitMqExtensions.cs,ToMessage,Cyclomatic complexity of the method is 10
Long Parameter List,ServiceStack.RabbitMq,RabbitMqBasicConsumer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.RabbitMq\RabbitMqBasicConsumer.cs,HandleBasicDeliver,The method has 7 parameters. Parameters: consumerTag' deliveryTag' redelivered' exchange' routingKey' properties' body
Long Parameter List,ServiceStack.RabbitMq,RabbitMqWorker,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.RabbitMq\RabbitMqWorker.cs,RabbitMqWorker,The method has 5 parameters. Parameters: mqFactory' messageHandler' queueName' errorHandler' autoConnect
Long Statement,ServiceStack.RabbitMq,RabbitMqExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.RabbitMq\RabbitMqExtensions.cs,RegisterDirectExchange,The length of the statement  "            channel.ExchangeDeclare(exchangeName ?? QueueNames.Exchange' "direct"' durable: true' autoDelete: false' arguments: null); " is 122.
Long Statement,ServiceStack.RabbitMq,RabbitMqExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.RabbitMq\RabbitMqExtensions.cs,RegisterDlqExchange,The length of the statement  "            channel.ExchangeDeclare(exchangeName ?? QueueNames.ExchangeDlq' "direct"' durable: true' autoDelete: false' arguments:null); " is 124.
Long Statement,ServiceStack.RabbitMq,RabbitMqExtensions,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.RabbitMq\RabbitMqExtensions.cs,RegisterTopicExchange,The length of the statement  "            channel.ExchangeDeclare(exchangeName ?? QueueNames.ExchangeTopic' "topic"' durable: false' autoDelete: false' arguments: null); " is 127.
Long Statement,ServiceStack.RabbitMq,RabbitMqProducer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.RabbitMq\RabbitMqProducer.cs,PublishMessage,The length of the statement  "                    // In case of server named queues (client declared queue with channel.declare())' assume queue already exists (redeclaration would result in error anyway since queue was marked as exclusive) and publish to default exchange " is 222.
Long Statement,ServiceStack.RabbitMq,RabbitMqServer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.RabbitMq\RabbitMqServer.cs,RunLoop,The length of the statement  "            if (Interlocked.CompareExchange(ref status' WorkerStatus.Started' WorkerStatus.Starting) != WorkerStatus.Starting) return; " is 122.
Long Statement,ServiceStack.RabbitMq,RabbitMqWorker,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.RabbitMq\RabbitMqWorker.cs,Run,The length of the statement  "            if (Interlocked.CompareExchange(ref status' WorkerStatus.Started' WorkerStatus.Starting) != WorkerStatus.Starting) return; " is 122.
Empty Catch Block,ServiceStack.RabbitMq,RabbitMqWorker,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.RabbitMq\RabbitMqWorker.cs,Run,The method has an empty catch block.
Magic Number,ServiceStack.RabbitMq,RabbitMqMessageFactory,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.RabbitMq\RabbitMqMessageFactory.cs,RabbitMqMessageFactory,The following statement contains a magic number: ConnectionFactory = new ConnectionFactory {                  RequestedHeartbeat = 10'              };
Magic Number,ServiceStack.RabbitMq,RabbitMqQueueClient,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.RabbitMq\RabbitMqQueueClient.cs,Get,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,ServiceStack.RabbitMq,RabbitMqServer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.RabbitMq\RabbitMqServer.cs,KillBgThreadIfExists,The following statement contains a magic number: !bgThread.Join(TimeSpan.FromSeconds(3))
Magic Number,ServiceStack.RabbitMq,RabbitMqServer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.RabbitMq\RabbitMqServer.cs,KillBgThreadIfExists,The following statement contains a magic number: !bgThread.Join(500)
Magic Number,ServiceStack.RabbitMq,RabbitMqServer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.RabbitMq\RabbitMqServer.cs,Dispose,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,ServiceStack.RabbitMq,RabbitMqWorker,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.RabbitMq\RabbitMqWorker.cs,Stop,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,ServiceStack.RabbitMq,RabbitMqWorker,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.RabbitMq\RabbitMqWorker.cs,KillBgThreadIfExists,The following statement contains a magic number: !bgThread.Join(TimeSpan.FromSeconds(3))
Magic Number,ServiceStack.RabbitMq,RabbitMqWorker,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.RabbitMq\RabbitMqWorker.cs,KillBgThreadIfExists,The following statement contains a magic number: !bgThread.Join(500)
Missing Default,ServiceStack.RabbitMq,RabbitMqServer,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\src\ServiceStack.RabbitMq\RabbitMqServer.cs,RunLoop,The following switch statement is missing a default case: switch (op)                          {                              case WorkerOperation.Stop:                                  Log.Debug("Stop Command Issued");                                    Interlocked.CompareExchange(ref status' WorkerStatus.Stopping' WorkerStatus.Started);                                  try                                  {                                      StopWorkerThreads();                                  }                                  finally                                  {                                      Interlocked.CompareExchange(ref status' WorkerStatus.Stopped' WorkerStatus.Stopping);                                  }                                  return; //exits                                case WorkerOperation.Restart:                                  Log.Debug("Restart Command Issued");                                    Interlocked.CompareExchange(ref status' WorkerStatus.Stopping' WorkerStatus.Started);                                  try                                  {                                      StopWorkerThreads();                                  }                                  finally                                  {                                      Interlocked.CompareExchange(ref status' WorkerStatus.Stopped' WorkerStatus.Stopping);                                  }                                    StartWorkerThreads();                                  Interlocked.CompareExchange(ref status' WorkerStatus.Started' WorkerStatus.Stopped);                                  break; //continues                          }
