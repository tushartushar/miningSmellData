Implementation smell,Namespace,Class,File,Method,Description
Long Method,CheckMvcIdentityCore.Migrations,CreateCheckMvcCoreIdentitySchema,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\20190211044606_CreateCheckMvcCoreIdentitySchema.cs,Up,The method has 172 lines of code.
Long Method,CheckMvcIdentityCore.Migrations,CreateCheckMvcCoreIdentitySchema,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\20190211044606_CreateCheckMvcCoreIdentitySchema.cs,BuildTargetModel,The method has 150 lines of code.
Long Method,CheckMvcIdentityCore.Migrations,ApplicationDbContextModelSnapshot,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\ApplicationDbContextModelSnapshot.cs,BuildModel,The method has 150 lines of code.
Long Parameter List,IdentityDemo.Controllers,ManageController,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Controllers\ManageController.cs,ManageController,The method has 5 parameters. Parameters: userManager' signInManager' emailSender' logger' urlEncoder
Long Statement,IdentityDemo.Controllers,AccountController,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Controllers\AccountController.cs,Login,The length of the statement  "                var result = await _signInManager.PasswordSignInAsync(model.Email' model.Password' model.RememberMe' lockoutOnFailure: false); " is 126.
Long Statement,IdentityDemo.Controllers,AccountController,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Controllers\AccountController.cs,LoginWith2fa,The length of the statement  "            var result = await _signInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode' rememberMe' model.RememberMachine); " is 122.
Long Statement,IdentityDemo.Controllers,AccountController,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Controllers\AccountController.cs,ExternalLoginCallback,The length of the statement  "            var result = await _signInManager.ExternalLoginSignInAsync(info.LoginProvider' info.ProviderKey' isPersistent: false' bypassTwoFactor: true); " is 141.
Long Statement,IdentityDemo.Controllers,ManageController,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Controllers\ManageController.cs,LinkLogin,The length of the statement  "            var properties = _signInManager.ConfigureExternalAuthenticationProperties(provider' redirectUrl' _userManager.GetUserId(User)); " is 127.
Long Statement,IdentityDemo.Controllers,ManageController,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Controllers\ManageController.cs,GenerateRecoveryCodesWarning,The length of the statement  "                throw new ApplicationException($"Cannot generate recovery codes for user with ID '{user.Id}' because they do not have 2FA enabled."); " is 133.
Long Statement,IdentityDemo.Controllers,ManageController,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Controllers\ManageController.cs,GenerateRecoveryCodes,The length of the statement  "                throw new ApplicationException($"Cannot generate recovery codes for user with ID '{user.Id}' as they do not have 2FA enabled."); " is 128.
Magic Number,IdentityDemo.Controllers,ManageController,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Controllers\ManageController.cs,EnableAuthenticator,The following statement contains a magic number: var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user' 10);
Magic Number,IdentityDemo.Controllers,ManageController,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Controllers\ManageController.cs,GenerateRecoveryCodes,The following statement contains a magic number: var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user' 10);
Magic Number,IdentityDemo.Controllers,ManageController,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Controllers\ManageController.cs,FormatKey,The following statement contains a magic number: result.Append(unformattedKey.Substring(currentPosition' 4)).Append(" ");
Magic Number,IdentityDemo.Controllers,ManageController,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Controllers\ManageController.cs,FormatKey,The following statement contains a magic number: currentPosition += 4;
Magic Number,IdentityDemo.Controllers,ManageController,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Controllers\ManageController.cs,FormatKey,The following statement contains a magic number: currentPosition + 4 < unformattedKey.Length
Magic Number,CheckMvcIdentityCore.Migrations,CreateCheckMvcCoreIdentitySchema,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\20190211044606_CreateCheckMvcCoreIdentitySchema.cs,Up,The following statement contains a magic number: migrationBuilder.CreateTable(                  name: "AspNetRoles"'                  columns: table => new                  {                      Id = table.Column<string>(nullable: false)'                      Name = table.Column<string>(maxLength: 256' nullable: true)'                      NormalizedName = table.Column<string>(maxLength: 256' nullable: true)'                      ConcurrencyStamp = table.Column<string>(nullable: true)                  }'                  constraints: table =>                  {                      table.PrimaryKey("PK_AspNetRoles"' x => x.Id);                  });
Magic Number,CheckMvcIdentityCore.Migrations,CreateCheckMvcCoreIdentitySchema,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\20190211044606_CreateCheckMvcCoreIdentitySchema.cs,Up,The following statement contains a magic number: migrationBuilder.CreateTable(                  name: "AspNetRoles"'                  columns: table => new                  {                      Id = table.Column<string>(nullable: false)'                      Name = table.Column<string>(maxLength: 256' nullable: true)'                      NormalizedName = table.Column<string>(maxLength: 256' nullable: true)'                      ConcurrencyStamp = table.Column<string>(nullable: true)                  }'                  constraints: table =>                  {                      table.PrimaryKey("PK_AspNetRoles"' x => x.Id);                  });
Magic Number,CheckMvcIdentityCore.Migrations,CreateCheckMvcCoreIdentitySchema,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\20190211044606_CreateCheckMvcCoreIdentitySchema.cs,Up,The following statement contains a magic number: migrationBuilder.CreateTable(                  name: "AspNetUsers"'                  columns: table => new                  {                      Id = table.Column<string>(nullable: false)'                      UserName = table.Column<string>(maxLength: 256' nullable: true)'                      NormalizedUserName = table.Column<string>(maxLength: 256' nullable: true)'                      Email = table.Column<string>(maxLength: 256' nullable: true)'                      NormalizedEmail = table.Column<string>(maxLength: 256' nullable: true)'                      EmailConfirmed = table.Column<bool>(nullable: false)'                      PasswordHash = table.Column<string>(nullable: true)'                      SecurityStamp = table.Column<string>(nullable: true)'                      ConcurrencyStamp = table.Column<string>(nullable: true)'                      PhoneNumber = table.Column<string>(nullable: true)'                      PhoneNumberConfirmed = table.Column<bool>(nullable: false)'                      TwoFactorEnabled = table.Column<bool>(nullable: false)'                      LockoutEnd = table.Column<DateTimeOffset>(nullable: true)'                      LockoutEnabled = table.Column<bool>(nullable: false)'                      AccessFailedCount = table.Column<int>(nullable: false)                  }'                  constraints: table =>                  {                      table.PrimaryKey("PK_AspNetUsers"' x => x.Id);                  });
Magic Number,CheckMvcIdentityCore.Migrations,CreateCheckMvcCoreIdentitySchema,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\20190211044606_CreateCheckMvcCoreIdentitySchema.cs,Up,The following statement contains a magic number: migrationBuilder.CreateTable(                  name: "AspNetUsers"'                  columns: table => new                  {                      Id = table.Column<string>(nullable: false)'                      UserName = table.Column<string>(maxLength: 256' nullable: true)'                      NormalizedUserName = table.Column<string>(maxLength: 256' nullable: true)'                      Email = table.Column<string>(maxLength: 256' nullable: true)'                      NormalizedEmail = table.Column<string>(maxLength: 256' nullable: true)'                      EmailConfirmed = table.Column<bool>(nullable: false)'                      PasswordHash = table.Column<string>(nullable: true)'                      SecurityStamp = table.Column<string>(nullable: true)'                      ConcurrencyStamp = table.Column<string>(nullable: true)'                      PhoneNumber = table.Column<string>(nullable: true)'                      PhoneNumberConfirmed = table.Column<bool>(nullable: false)'                      TwoFactorEnabled = table.Column<bool>(nullable: false)'                      LockoutEnd = table.Column<DateTimeOffset>(nullable: true)'                      LockoutEnabled = table.Column<bool>(nullable: false)'                      AccessFailedCount = table.Column<int>(nullable: false)                  }'                  constraints: table =>                  {                      table.PrimaryKey("PK_AspNetUsers"' x => x.Id);                  });
Magic Number,CheckMvcIdentityCore.Migrations,CreateCheckMvcCoreIdentitySchema,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\20190211044606_CreateCheckMvcCoreIdentitySchema.cs,Up,The following statement contains a magic number: migrationBuilder.CreateTable(                  name: "AspNetUsers"'                  columns: table => new                  {                      Id = table.Column<string>(nullable: false)'                      UserName = table.Column<string>(maxLength: 256' nullable: true)'                      NormalizedUserName = table.Column<string>(maxLength: 256' nullable: true)'                      Email = table.Column<string>(maxLength: 256' nullable: true)'                      NormalizedEmail = table.Column<string>(maxLength: 256' nullable: true)'                      EmailConfirmed = table.Column<bool>(nullable: false)'                      PasswordHash = table.Column<string>(nullable: true)'                      SecurityStamp = table.Column<string>(nullable: true)'                      ConcurrencyStamp = table.Column<string>(nullable: true)'                      PhoneNumber = table.Column<string>(nullable: true)'                      PhoneNumberConfirmed = table.Column<bool>(nullable: false)'                      TwoFactorEnabled = table.Column<bool>(nullable: false)'                      LockoutEnd = table.Column<DateTimeOffset>(nullable: true)'                      LockoutEnabled = table.Column<bool>(nullable: false)'                      AccessFailedCount = table.Column<int>(nullable: false)                  }'                  constraints: table =>                  {                      table.PrimaryKey("PK_AspNetUsers"' x => x.Id);                  });
Magic Number,CheckMvcIdentityCore.Migrations,CreateCheckMvcCoreIdentitySchema,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\20190211044606_CreateCheckMvcCoreIdentitySchema.cs,Up,The following statement contains a magic number: migrationBuilder.CreateTable(                  name: "AspNetUsers"'                  columns: table => new                  {                      Id = table.Column<string>(nullable: false)'                      UserName = table.Column<string>(maxLength: 256' nullable: true)'                      NormalizedUserName = table.Column<string>(maxLength: 256' nullable: true)'                      Email = table.Column<string>(maxLength: 256' nullable: true)'                      NormalizedEmail = table.Column<string>(maxLength: 256' nullable: true)'                      EmailConfirmed = table.Column<bool>(nullable: false)'                      PasswordHash = table.Column<string>(nullable: true)'                      SecurityStamp = table.Column<string>(nullable: true)'                      ConcurrencyStamp = table.Column<string>(nullable: true)'                      PhoneNumber = table.Column<string>(nullable: true)'                      PhoneNumberConfirmed = table.Column<bool>(nullable: false)'                      TwoFactorEnabled = table.Column<bool>(nullable: false)'                      LockoutEnd = table.Column<DateTimeOffset>(nullable: true)'                      LockoutEnabled = table.Column<bool>(nullable: false)'                      AccessFailedCount = table.Column<int>(nullable: false)                  }'                  constraints: table =>                  {                      table.PrimaryKey("PK_AspNetUsers"' x => x.Id);                  });
Magic Number,CheckMvcIdentityCore.Migrations,CreateCheckMvcCoreIdentitySchema,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\20190211044606_CreateCheckMvcCoreIdentitySchema.cs,BuildTargetModel,The following statement contains a magic number: modelBuilder                  .HasAnnotation("ProductVersion"' "2.2.1-servicing-10028")                  .HasAnnotation("Relational:MaxIdentifierLength"' 128)                  .HasAnnotation("SqlServer:ValueGenerationStrategy"' SqlServerValueGenerationStrategy.IdentityColumn);
Magic Number,CheckMvcIdentityCore.Migrations,CreateCheckMvcCoreIdentitySchema,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\20190211044606_CreateCheckMvcCoreIdentitySchema.cs,BuildTargetModel,The following statement contains a magic number: modelBuilder.Entity("IdentityDemo.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id")                          .ValueGeneratedOnAdd();                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasMaxLength(256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasMaxLength(256);                        b.Property<string>("NormalizedUserName")                          .HasMaxLength(256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasMaxLength(256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasName("EmailIndex");                        b.HasIndex("NormalizedUserName")                          .IsUnique()                          .HasName("UserNameIndex")                          .HasFilter("[NormalizedUserName] IS NOT NULL");                        b.ToTable("AspNetUsers");                  });
Magic Number,CheckMvcIdentityCore.Migrations,CreateCheckMvcCoreIdentitySchema,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\20190211044606_CreateCheckMvcCoreIdentitySchema.cs,BuildTargetModel,The following statement contains a magic number: modelBuilder.Entity("IdentityDemo.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id")                          .ValueGeneratedOnAdd();                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasMaxLength(256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasMaxLength(256);                        b.Property<string>("NormalizedUserName")                          .HasMaxLength(256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasMaxLength(256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasName("EmailIndex");                        b.HasIndex("NormalizedUserName")                          .IsUnique()                          .HasName("UserNameIndex")                          .HasFilter("[NormalizedUserName] IS NOT NULL");                        b.ToTable("AspNetUsers");                  });
Magic Number,CheckMvcIdentityCore.Migrations,CreateCheckMvcCoreIdentitySchema,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\20190211044606_CreateCheckMvcCoreIdentitySchema.cs,BuildTargetModel,The following statement contains a magic number: modelBuilder.Entity("IdentityDemo.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id")                          .ValueGeneratedOnAdd();                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasMaxLength(256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasMaxLength(256);                        b.Property<string>("NormalizedUserName")                          .HasMaxLength(256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasMaxLength(256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasName("EmailIndex");                        b.HasIndex("NormalizedUserName")                          .IsUnique()                          .HasName("UserNameIndex")                          .HasFilter("[NormalizedUserName] IS NOT NULL");                        b.ToTable("AspNetUsers");                  });
Magic Number,CheckMvcIdentityCore.Migrations,CreateCheckMvcCoreIdentitySchema,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\20190211044606_CreateCheckMvcCoreIdentitySchema.cs,BuildTargetModel,The following statement contains a magic number: modelBuilder.Entity("IdentityDemo.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id")                          .ValueGeneratedOnAdd();                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasMaxLength(256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasMaxLength(256);                        b.Property<string>("NormalizedUserName")                          .HasMaxLength(256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasMaxLength(256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasName("EmailIndex");                        b.HasIndex("NormalizedUserName")                          .IsUnique()                          .HasName("UserNameIndex")                          .HasFilter("[NormalizedUserName] IS NOT NULL");                        b.ToTable("AspNetUsers");                  });
Magic Number,CheckMvcIdentityCore.Migrations,CreateCheckMvcCoreIdentitySchema,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\20190211044606_CreateCheckMvcCoreIdentitySchema.cs,BuildTargetModel,The following statement contains a magic number: modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole"' b =>                  {                      b.Property<string>("Id")                          .ValueGeneratedOnAdd();                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Name")                          .HasMaxLength(256);                        b.Property<string>("NormalizedName")                          .HasMaxLength(256);                        b.HasKey("Id");                        b.HasIndex("NormalizedName")                          .IsUnique()                          .HasName("RoleNameIndex")                          .HasFilter("[NormalizedName] IS NOT NULL");                        b.ToTable("AspNetRoles");                  });
Magic Number,CheckMvcIdentityCore.Migrations,CreateCheckMvcCoreIdentitySchema,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\20190211044606_CreateCheckMvcCoreIdentitySchema.cs,BuildTargetModel,The following statement contains a magic number: modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole"' b =>                  {                      b.Property<string>("Id")                          .ValueGeneratedOnAdd();                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Name")                          .HasMaxLength(256);                        b.Property<string>("NormalizedName")                          .HasMaxLength(256);                        b.HasKey("Id");                        b.HasIndex("NormalizedName")                          .IsUnique()                          .HasName("RoleNameIndex")                          .HasFilter("[NormalizedName] IS NOT NULL");                        b.ToTable("AspNetRoles");                  });
Magic Number,CheckMvcIdentityCore.Migrations,ApplicationDbContextModelSnapshot,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\ApplicationDbContextModelSnapshot.cs,BuildModel,The following statement contains a magic number: modelBuilder                  .HasAnnotation("ProductVersion"' "2.2.1-servicing-10028")                  .HasAnnotation("Relational:MaxIdentifierLength"' 128)                  .HasAnnotation("SqlServer:ValueGenerationStrategy"' SqlServerValueGenerationStrategy.IdentityColumn);
Magic Number,CheckMvcIdentityCore.Migrations,ApplicationDbContextModelSnapshot,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\ApplicationDbContextModelSnapshot.cs,BuildModel,The following statement contains a magic number: modelBuilder.Entity("IdentityDemo.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id")                          .ValueGeneratedOnAdd();                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasMaxLength(256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasMaxLength(256);                        b.Property<string>("NormalizedUserName")                          .HasMaxLength(256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasMaxLength(256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasName("EmailIndex");                        b.HasIndex("NormalizedUserName")                          .IsUnique()                          .HasName("UserNameIndex")                          .HasFilter("[NormalizedUserName] IS NOT NULL");                        b.ToTable("AspNetUsers");                  });
Magic Number,CheckMvcIdentityCore.Migrations,ApplicationDbContextModelSnapshot,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\ApplicationDbContextModelSnapshot.cs,BuildModel,The following statement contains a magic number: modelBuilder.Entity("IdentityDemo.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id")                          .ValueGeneratedOnAdd();                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasMaxLength(256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasMaxLength(256);                        b.Property<string>("NormalizedUserName")                          .HasMaxLength(256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasMaxLength(256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasName("EmailIndex");                        b.HasIndex("NormalizedUserName")                          .IsUnique()                          .HasName("UserNameIndex")                          .HasFilter("[NormalizedUserName] IS NOT NULL");                        b.ToTable("AspNetUsers");                  });
Magic Number,CheckMvcIdentityCore.Migrations,ApplicationDbContextModelSnapshot,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\ApplicationDbContextModelSnapshot.cs,BuildModel,The following statement contains a magic number: modelBuilder.Entity("IdentityDemo.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id")                          .ValueGeneratedOnAdd();                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasMaxLength(256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasMaxLength(256);                        b.Property<string>("NormalizedUserName")                          .HasMaxLength(256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasMaxLength(256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasName("EmailIndex");                        b.HasIndex("NormalizedUserName")                          .IsUnique()                          .HasName("UserNameIndex")                          .HasFilter("[NormalizedUserName] IS NOT NULL");                        b.ToTable("AspNetUsers");                  });
Magic Number,CheckMvcIdentityCore.Migrations,ApplicationDbContextModelSnapshot,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\ApplicationDbContextModelSnapshot.cs,BuildModel,The following statement contains a magic number: modelBuilder.Entity("IdentityDemo.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id")                          .ValueGeneratedOnAdd();                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasMaxLength(256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasMaxLength(256);                        b.Property<string>("NormalizedUserName")                          .HasMaxLength(256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasMaxLength(256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasName("EmailIndex");                        b.HasIndex("NormalizedUserName")                          .IsUnique()                          .HasName("UserNameIndex")                          .HasFilter("[NormalizedUserName] IS NOT NULL");                        b.ToTable("AspNetUsers");                  });
Magic Number,CheckMvcIdentityCore.Migrations,ApplicationDbContextModelSnapshot,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\ApplicationDbContextModelSnapshot.cs,BuildModel,The following statement contains a magic number: modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole"' b =>                  {                      b.Property<string>("Id")                          .ValueGeneratedOnAdd();                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Name")                          .HasMaxLength(256);                        b.Property<string>("NormalizedName")                          .HasMaxLength(256);                        b.HasKey("Id");                        b.HasIndex("NormalizedName")                          .IsUnique()                          .HasName("RoleNameIndex")                          .HasFilter("[NormalizedName] IS NOT NULL");                        b.ToTable("AspNetRoles");                  });
Magic Number,CheckMvcIdentityCore.Migrations,ApplicationDbContextModelSnapshot,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Migrations\ApplicationDbContextModelSnapshot.cs,BuildModel,The following statement contains a magic number: modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole"' b =>                  {                      b.Property<string>("Id")                          .ValueGeneratedOnAdd();                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Name")                          .HasMaxLength(256);                        b.Property<string>("NormalizedName")                          .HasMaxLength(256);                        b.HasKey("Id");                        b.HasIndex("NormalizedName")                          .IsUnique()                          .HasName("RoleNameIndex")                          .HasFilter("[NormalizedName] IS NOT NULL");                        b.ToTable("AspNetRoles");                  });
Magic Number,IdentityDemo,Startup,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Startup.cs,ConfigureServices,The following statement contains a magic number: services.Configure<IdentityOptions>(options =>              {                  // Strict Password settings                  // options.Password.RequireDigit = true;                  // options.Password.RequiredLength = 8;                  // options.Password.RequireNonAlphanumeric = false;                  // options.Password.RequireUppercase = true;                  // options.Password.RequireLowercase = false;                  // options.Password.RequiredUniqueChars = 6;                    // Relaxed Password settings                  options.Password.RequireDigit = false;                  options.Password.RequiredLength = 4;                  options.Password.RequireNonAlphanumeric = false;                  options.Password.RequireUppercase = false;                  options.Password.RequireLowercase = false;                  options.Password.RequiredUniqueChars = 2;                      // Lockout settings                  options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(30);                  options.Lockout.MaxFailedAccessAttempts = 10;                  options.Lockout.AllowedForNewUsers = true;                    // User settings                  options.User.RequireUniqueEmail = true;              });
Magic Number,IdentityDemo,Startup,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Startup.cs,ConfigureServices,The following statement contains a magic number: services.Configure<IdentityOptions>(options =>              {                  // Strict Password settings                  // options.Password.RequireDigit = true;                  // options.Password.RequiredLength = 8;                  // options.Password.RequireNonAlphanumeric = false;                  // options.Password.RequireUppercase = true;                  // options.Password.RequireLowercase = false;                  // options.Password.RequiredUniqueChars = 6;                    // Relaxed Password settings                  options.Password.RequireDigit = false;                  options.Password.RequiredLength = 4;                  options.Password.RequireNonAlphanumeric = false;                  options.Password.RequireUppercase = false;                  options.Password.RequireLowercase = false;                  options.Password.RequiredUniqueChars = 2;                      // Lockout settings                  options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(30);                  options.Lockout.MaxFailedAccessAttempts = 10;                  options.Lockout.AllowedForNewUsers = true;                    // User settings                  options.User.RequireUniqueEmail = true;              });
Magic Number,IdentityDemo,Startup,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Startup.cs,ConfigureServices,The following statement contains a magic number: services.Configure<IdentityOptions>(options =>              {                  // Strict Password settings                  // options.Password.RequireDigit = true;                  // options.Password.RequiredLength = 8;                  // options.Password.RequireNonAlphanumeric = false;                  // options.Password.RequireUppercase = true;                  // options.Password.RequireLowercase = false;                  // options.Password.RequiredUniqueChars = 6;                    // Relaxed Password settings                  options.Password.RequireDigit = false;                  options.Password.RequiredLength = 4;                  options.Password.RequireNonAlphanumeric = false;                  options.Password.RequireUppercase = false;                  options.Password.RequireLowercase = false;                  options.Password.RequiredUniqueChars = 2;                      // Lockout settings                  options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(30);                  options.Lockout.MaxFailedAccessAttempts = 10;                  options.Lockout.AllowedForNewUsers = true;                    // User settings                  options.User.RequireUniqueEmail = true;              });
Magic Number,IdentityDemo,Startup,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Startup.cs,ConfigureServices,The following statement contains a magic number: services.Configure<IdentityOptions>(options =>              {                  // Strict Password settings                  // options.Password.RequireDigit = true;                  // options.Password.RequiredLength = 8;                  // options.Password.RequireNonAlphanumeric = false;                  // options.Password.RequireUppercase = true;                  // options.Password.RequireLowercase = false;                  // options.Password.RequiredUniqueChars = 6;                    // Relaxed Password settings                  options.Password.RequireDigit = false;                  options.Password.RequiredLength = 4;                  options.Password.RequireNonAlphanumeric = false;                  options.Password.RequireUppercase = false;                  options.Password.RequireLowercase = false;                  options.Password.RequiredUniqueChars = 2;                      // Lockout settings                  options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(30);                  options.Lockout.MaxFailedAccessAttempts = 10;                  options.Lockout.AllowedForNewUsers = true;                    // User settings                  options.User.RequireUniqueEmail = true;              });
Magic Number,IdentityDemo,Startup,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Startup.cs,ConfigureServices,The following statement contains a magic number: services.ConfigureApplicationCookie(options =>              {                  // Cookie settings                  options.Cookie.HttpOnly = true;                  options.Cookie.Expiration = TimeSpan.FromDays(150);                  // If the LoginPath isn't set' ASP.NET Core defaults                   // the path to /Account/Login.                  options.LoginPath = "/Account/Login";                  // If the AccessDeniedPath isn't set' ASP.NET Core defaults                   // the path to /Account/AccessDenied.                  options.AccessDeniedPath = "/Account/AccessDenied";                  options.SlidingExpiration = true;              });
Magic Number,IdentityDemo,AppHost,D:\research\architectureSmells\repos1\ServiceStack_ServiceStack\tests\CheckMvcIdentityCore\Startup.cs,Configure,The following statement contains a magic number: Plugins.Add(new AuthFeature(() => new AuthUserSession()'                   new IAuthProvider[] {                      new CredentialsAuthProvider(AppSettings)'                       new NetCoreIdentityAuthProvider(AppSettings)                       {                          PopulateSessionFilter = (session' principal' req) =>                           {                              //Example of populating ServiceStack Session Roles for EF Identity DB  //                            var userManager = req.TryResolve<UserManager<ApplicationUser>>();  //                            var user = userManager.FindByIdAsync(session.Id).Result;  //                            var roles = userManager.GetRolesAsync(user).Result;                                var user = ApplicationServices.DbExec(db =>                                   db.GetIdentityUserById<ApplicationUser>(session.Id));                                session.Roles = req.GetMemoryCacheClient().GetOrCreate(                                  IdUtils.CreateUrn(nameof(session.Roles)' session.Id)'                                  TimeSpan.FromMinutes(20)'                                  () => ApplicationServices.DbExec(db =>                                       db.GetIdentityUserRolesById(session.Id)));                          }                      }'                   }));
