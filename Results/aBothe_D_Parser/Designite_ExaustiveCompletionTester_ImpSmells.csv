Implementation smell,Namespace,Class,File,Method,Description
Long Method,ExaustiveCompletionTester,FileProcessingData,D:\research\architectureSmells\repos\aBothe_D_Parser\ExaustiveCompletionTester\FileProcessingData.cs,Process,The method has 208 lines of code.
Complex Method,ExaustiveCompletionTester,Program,D:\research\architectureSmells\repos\aBothe_D_Parser\ExaustiveCompletionTester\Program.cs,Main,Cyclomatic complexity of the method is 21
Complex Method,ExaustiveCompletionTester,FileProcessingData,D:\research\architectureSmells\repos\aBothe_D_Parser\ExaustiveCompletionTester\FileProcessingData.cs,Process,Cyclomatic complexity of the method is 29
Long Statement,ExaustiveCompletionTester,CompletionFacilities,D:\research\architectureSmells\repos\aBothe_D_Parser\ExaustiveCompletionTester\CompletionFacilities.cs,UpdateEditorData,The length of the statement  "			var pack = (ed.ParseCache as LegacyParseCacheView).EnumRootPackagesSurroundingModule(null).First() as MutableRootPackage; " is 121.
Long Statement,ExaustiveCompletionTester,Program,D:\research\architectureSmells\repos\aBothe_D_Parser\ExaustiveCompletionTester\Program.cs,Main,The length of the statement  "			Console.WriteLine("Started at {0} with {1} workers and {2} files blacklisted"' DateTime.Now' workerCount' filesToExclude.Count); " is 128.
Long Statement,ExaustiveCompletionTester,Program,D:\research\architectureSmells\repos\aBothe_D_Parser\ExaustiveCompletionTester\Program.cs,Main,The length of the statement  "								File.WriteAllText(ExceptionsDirectory + "\\" + curFile.ShortFilePath.Replace('\\'' '_') + "-" + i.ToString() + ".txt"' curFile.str.Substring(0' excI.Item1)); " is 157.
Long Statement,ExaustiveCompletionTester,Program,D:\research\architectureSmells\repos\aBothe_D_Parser\ExaustiveCompletionTester\Program.cs,Main,The length of the statement  "								File.WriteAllText(ExceptionsDirectory + "\\" + curFile.ShortFilePath.Replace('\\'' '_') + "-" + i.ToString() + ".trace.txt"' excI.Item2); " is 137.
Long Statement,ExaustiveCompletionTester,Program,D:\research\architectureSmells\repos\aBothe_D_Parser\ExaustiveCompletionTester\Program.cs,Main,The length of the statement  "							File.WriteAllText(TimeoutsDirectory + "\\" + curFile.ShortFilePath.Replace('\\'' '_') + "-" + to.ToString() + ".txt"' curFile.str.Substring(0' to)); " is 148.
Long Statement,ExaustiveCompletionTester,Program,D:\research\architectureSmells\repos\aBothe_D_Parser\ExaustiveCompletionTester\Program.cs,Main,The length of the statement  "						WriteFromLeft(v.FileID' String.Format("Thread {0} {1}/{2} ({3}%)"' v.WorkerID' v.i.ToString().PadLeft(v.lengthString.Length' ' ')' v.lengthString' ((int)((v.i / (double)v.FileLength) * 100)).ToString().PadLeft(3' ' '))); " is 220.
Long Statement,ExaustiveCompletionTester,FileProcessingData,D:\research\architectureSmells\repos\aBothe_D_Parser\ExaustiveCompletionTester\FileProcessingData.cs,Process,The length of the statement  "				File.WriteAllText(Program.TesterErrorsDirectory + "\\" + ShortFilePath.Replace('\\'' '_') + "-" + i.ToString() + ".txt"' e.Message + "\r\nStack Trace:\r\n" + e.StackTrace); " is 172.
Magic Number,ExaustiveCompletionTester,Program,D:\research\architectureSmells\repos\aBothe_D_Parser\ExaustiveCompletionTester\Program.cs,Main,The following statement contains a magic number: const int threadStackSize = 64 * 1024 * 1024;
Magic Number,ExaustiveCompletionTester,Program,D:\research\architectureSmells\repos\aBothe_D_Parser\ExaustiveCompletionTester\Program.cs,Main,The following statement contains a magic number: const int threadStackSize = 64 * 1024 * 1024;
Magic Number,ExaustiveCompletionTester,Program,D:\research\architectureSmells\repos\aBothe_D_Parser\ExaustiveCompletionTester\Program.cs,Main,The following statement contains a magic number: const int threadStackSize = 64 * 1024 * 1024;
Magic Number,ExaustiveCompletionTester,Program,D:\research\architectureSmells\repos\aBothe_D_Parser\ExaustiveCompletionTester\Program.cs,Main,The following statement contains a magic number: WriteFromLeft(v.FileID' String.Format("Thread {0} {1}/{2} ({3}%)"' v.WorkerID' v.i.ToString().PadLeft(v.lengthString.Length' ' ')' v.lengthString' ((int)((v.i / (double)v.FileLength) * 100)).ToString().PadLeft(3' ' ')));
Magic Number,ExaustiveCompletionTester,Program,D:\research\architectureSmells\repos\aBothe_D_Parser\ExaustiveCompletionTester\Program.cs,Main,The following statement contains a magic number: WriteFromLeft(v.FileID' String.Format("Thread {0} {1}/{2} ({3}%)"' v.WorkerID' v.i.ToString().PadLeft(v.lengthString.Length' ' ')' v.lengthString' ((int)((v.i / (double)v.FileLength) * 100)).ToString().PadLeft(3' ' ')));
Magic Number,ExaustiveCompletionTester,Program,D:\research\architectureSmells\repos\aBothe_D_Parser\ExaustiveCompletionTester\Program.cs,Main,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,ExaustiveCompletionTester,FileProcessingData,D:\research\architectureSmells\repos\aBothe_D_Parser\ExaustiveCompletionTester\FileProcessingData.cs,Process,The following statement contains a magic number: switch(str[i])  							{  								case ' ':  								case '\t':  									i++;  									while (i < str.Length && (str[i] == ' ' || str[i] == '\t'))  										i++;  									goto BreakLoop;  								case '\n':  									line++;  									lineStart = i + 1;  									i++;  									continue;  								case '"':  									// Basic string  									i++;  									while (i < str.Length && str[i] != '"')  									{  										if (str[i] == '\\')  											i++;  										i++;  									}  									i++;  									goto BreakLoop;  								case '/':  									if (i + 1 >= str.Length)  										goto default;  									if (str[i + 1] == '/')  									{  										// Line Comment  										i += 2;  										while (i < str.Length && str[i] != '\n')  											i++;  										goto BreakLoop;  									}  									else if (str[i + 1] == '*')  									{  										// Block Comment  										i += 2;  										while (i < str.Length)  										{  											if (str[i] == '*' && i + 1 < str.Length && str[i + 1] == '/')  											{  												i += 2;  												break;  											}  											else if (str[i] == '\n')  											{  												line++;  												lineStart = i + 1;  											}  											i++;  										}  										goto BreakLoop;  									}  									else if (str[i + 1] == '+')  									{  										// Nesting Block Comment  										i += 2;  										int nestDepth = 1;  										while (i < str.Length)  										{  											if (str[i] == '+' && i + 1 < str.Length && str[i + 1] == '/')  											{  												i++;  												nestDepth--;  												if (nestDepth == 0)  												{  													i++;  													break;  												}  											}  											else if (str[i] == '/' && i + 1 < str.Length && str[i + 1] == '+')  											{  												i++;  												nestDepth++;  											}  											else if (str[i] == '\n')  											{  												line++;  												lineStart = i + 1;  											}  											i++;  										}  										goto BreakLoop;  									}  									goto default;  								case '0':  								case '1':  								case '2':  								case '3':  								case '4':  								case '5':  								case '6':  								case '7':  								case '8':  								case '9':  									i++;  									while (i < str.Length && IsDigit(str[i]))  										i++;  									goto BreakLoop;  								case 'a':  								case 'b':  								case 'c':  								case 'd':  								case 'e':  								case 'f':  								case 'g':  								case 'h':  								case 'i':  								case 'j':  								case 'k':  								case 'l':  								case 'm':  								case 'n':  								case 'o':  								case 'p':  								case 'q':  								case 'r':  								case 's':  								case 't':  								case 'u':  								case 'v':  								case 'w':  								case 'x':  								case 'y':  								case 'z':  								case 'A':  								case 'B':  								case 'C':  								case 'D':  								case 'E':  								case 'F':  								case 'G':  								case 'H':  								case 'I':  								case 'J':  								case 'K':  								case 'L':  								case 'M':  								case 'N':  								case 'O':  								case 'P':  								case 'Q':  								case 'R':  								case 'S':  								case 'T':  								case 'U':  								case 'V':  								case 'W':  								case 'X':  								case 'Y':  								case 'Z':  								case '_':  									i++;  									while (i < str.Length && (IsIdentifierChar(str[i]) || IsDigit(str[i])))  										i++;  									goto BreakLoop;  								default:  									goto BreakLoop;  							}
Magic Number,ExaustiveCompletionTester,FileProcessingData,D:\research\architectureSmells\repos\aBothe_D_Parser\ExaustiveCompletionTester\FileProcessingData.cs,Process,The following statement contains a magic number: switch(str[i])  							{  								case ' ':  								case '\t':  									i++;  									while (i < str.Length && (str[i] == ' ' || str[i] == '\t'))  										i++;  									goto BreakLoop;  								case '\n':  									line++;  									lineStart = i + 1;  									i++;  									continue;  								case '"':  									// Basic string  									i++;  									while (i < str.Length && str[i] != '"')  									{  										if (str[i] == '\\')  											i++;  										i++;  									}  									i++;  									goto BreakLoop;  								case '/':  									if (i + 1 >= str.Length)  										goto default;  									if (str[i + 1] == '/')  									{  										// Line Comment  										i += 2;  										while (i < str.Length && str[i] != '\n')  											i++;  										goto BreakLoop;  									}  									else if (str[i + 1] == '*')  									{  										// Block Comment  										i += 2;  										while (i < str.Length)  										{  											if (str[i] == '*' && i + 1 < str.Length && str[i + 1] == '/')  											{  												i += 2;  												break;  											}  											else if (str[i] == '\n')  											{  												line++;  												lineStart = i + 1;  											}  											i++;  										}  										goto BreakLoop;  									}  									else if (str[i + 1] == '+')  									{  										// Nesting Block Comment  										i += 2;  										int nestDepth = 1;  										while (i < str.Length)  										{  											if (str[i] == '+' && i + 1 < str.Length && str[i + 1] == '/')  											{  												i++;  												nestDepth--;  												if (nestDepth == 0)  												{  													i++;  													break;  												}  											}  											else if (str[i] == '/' && i + 1 < str.Length && str[i + 1] == '+')  											{  												i++;  												nestDepth++;  											}  											else if (str[i] == '\n')  											{  												line++;  												lineStart = i + 1;  											}  											i++;  										}  										goto BreakLoop;  									}  									goto default;  								case '0':  								case '1':  								case '2':  								case '3':  								case '4':  								case '5':  								case '6':  								case '7':  								case '8':  								case '9':  									i++;  									while (i < str.Length && IsDigit(str[i]))  										i++;  									goto BreakLoop;  								case 'a':  								case 'b':  								case 'c':  								case 'd':  								case 'e':  								case 'f':  								case 'g':  								case 'h':  								case 'i':  								case 'j':  								case 'k':  								case 'l':  								case 'm':  								case 'n':  								case 'o':  								case 'p':  								case 'q':  								case 'r':  								case 's':  								case 't':  								case 'u':  								case 'v':  								case 'w':  								case 'x':  								case 'y':  								case 'z':  								case 'A':  								case 'B':  								case 'C':  								case 'D':  								case 'E':  								case 'F':  								case 'G':  								case 'H':  								case 'I':  								case 'J':  								case 'K':  								case 'L':  								case 'M':  								case 'N':  								case 'O':  								case 'P':  								case 'Q':  								case 'R':  								case 'S':  								case 'T':  								case 'U':  								case 'V':  								case 'W':  								case 'X':  								case 'Y':  								case 'Z':  								case '_':  									i++;  									while (i < str.Length && (IsIdentifierChar(str[i]) || IsDigit(str[i])))  										i++;  									goto BreakLoop;  								default:  									goto BreakLoop;  							}
Magic Number,ExaustiveCompletionTester,FileProcessingData,D:\research\architectureSmells\repos\aBothe_D_Parser\ExaustiveCompletionTester\FileProcessingData.cs,Process,The following statement contains a magic number: switch(str[i])  							{  								case ' ':  								case '\t':  									i++;  									while (i < str.Length && (str[i] == ' ' || str[i] == '\t'))  										i++;  									goto BreakLoop;  								case '\n':  									line++;  									lineStart = i + 1;  									i++;  									continue;  								case '"':  									// Basic string  									i++;  									while (i < str.Length && str[i] != '"')  									{  										if (str[i] == '\\')  											i++;  										i++;  									}  									i++;  									goto BreakLoop;  								case '/':  									if (i + 1 >= str.Length)  										goto default;  									if (str[i + 1] == '/')  									{  										// Line Comment  										i += 2;  										while (i < str.Length && str[i] != '\n')  											i++;  										goto BreakLoop;  									}  									else if (str[i + 1] == '*')  									{  										// Block Comment  										i += 2;  										while (i < str.Length)  										{  											if (str[i] == '*' && i + 1 < str.Length && str[i + 1] == '/')  											{  												i += 2;  												break;  											}  											else if (str[i] == '\n')  											{  												line++;  												lineStart = i + 1;  											}  											i++;  										}  										goto BreakLoop;  									}  									else if (str[i + 1] == '+')  									{  										// Nesting Block Comment  										i += 2;  										int nestDepth = 1;  										while (i < str.Length)  										{  											if (str[i] == '+' && i + 1 < str.Length && str[i + 1] == '/')  											{  												i++;  												nestDepth--;  												if (nestDepth == 0)  												{  													i++;  													break;  												}  											}  											else if (str[i] == '/' && i + 1 < str.Length && str[i + 1] == '+')  											{  												i++;  												nestDepth++;  											}  											else if (str[i] == '\n')  											{  												line++;  												lineStart = i + 1;  											}  											i++;  										}  										goto BreakLoop;  									}  									goto default;  								case '0':  								case '1':  								case '2':  								case '3':  								case '4':  								case '5':  								case '6':  								case '7':  								case '8':  								case '9':  									i++;  									while (i < str.Length && IsDigit(str[i]))  										i++;  									goto BreakLoop;  								case 'a':  								case 'b':  								case 'c':  								case 'd':  								case 'e':  								case 'f':  								case 'g':  								case 'h':  								case 'i':  								case 'j':  								case 'k':  								case 'l':  								case 'm':  								case 'n':  								case 'o':  								case 'p':  								case 'q':  								case 'r':  								case 's':  								case 't':  								case 'u':  								case 'v':  								case 'w':  								case 'x':  								case 'y':  								case 'z':  								case 'A':  								case 'B':  								case 'C':  								case 'D':  								case 'E':  								case 'F':  								case 'G':  								case 'H':  								case 'I':  								case 'J':  								case 'K':  								case 'L':  								case 'M':  								case 'N':  								case 'O':  								case 'P':  								case 'Q':  								case 'R':  								case 'S':  								case 'T':  								case 'U':  								case 'V':  								case 'W':  								case 'X':  								case 'Y':  								case 'Z':  								case '_':  									i++;  									while (i < str.Length && (IsIdentifierChar(str[i]) || IsDigit(str[i])))  										i++;  									goto BreakLoop;  								default:  									goto BreakLoop;  							}
Magic Number,ExaustiveCompletionTester,FileProcessingData,D:\research\architectureSmells\repos\aBothe_D_Parser\ExaustiveCompletionTester\FileProcessingData.cs,Process,The following statement contains a magic number: switch(str[i])  							{  								case ' ':  								case '\t':  									i++;  									while (i < str.Length && (str[i] == ' ' || str[i] == '\t'))  										i++;  									goto BreakLoop;  								case '\n':  									line++;  									lineStart = i + 1;  									i++;  									continue;  								case '"':  									// Basic string  									i++;  									while (i < str.Length && str[i] != '"')  									{  										if (str[i] == '\\')  											i++;  										i++;  									}  									i++;  									goto BreakLoop;  								case '/':  									if (i + 1 >= str.Length)  										goto default;  									if (str[i + 1] == '/')  									{  										// Line Comment  										i += 2;  										while (i < str.Length && str[i] != '\n')  											i++;  										goto BreakLoop;  									}  									else if (str[i + 1] == '*')  									{  										// Block Comment  										i += 2;  										while (i < str.Length)  										{  											if (str[i] == '*' && i + 1 < str.Length && str[i + 1] == '/')  											{  												i += 2;  												break;  											}  											else if (str[i] == '\n')  											{  												line++;  												lineStart = i + 1;  											}  											i++;  										}  										goto BreakLoop;  									}  									else if (str[i + 1] == '+')  									{  										// Nesting Block Comment  										i += 2;  										int nestDepth = 1;  										while (i < str.Length)  										{  											if (str[i] == '+' && i + 1 < str.Length && str[i + 1] == '/')  											{  												i++;  												nestDepth--;  												if (nestDepth == 0)  												{  													i++;  													break;  												}  											}  											else if (str[i] == '/' && i + 1 < str.Length && str[i + 1] == '+')  											{  												i++;  												nestDepth++;  											}  											else if (str[i] == '\n')  											{  												line++;  												lineStart = i + 1;  											}  											i++;  										}  										goto BreakLoop;  									}  									goto default;  								case '0':  								case '1':  								case '2':  								case '3':  								case '4':  								case '5':  								case '6':  								case '7':  								case '8':  								case '9':  									i++;  									while (i < str.Length && IsDigit(str[i]))  										i++;  									goto BreakLoop;  								case 'a':  								case 'b':  								case 'c':  								case 'd':  								case 'e':  								case 'f':  								case 'g':  								case 'h':  								case 'i':  								case 'j':  								case 'k':  								case 'l':  								case 'm':  								case 'n':  								case 'o':  								case 'p':  								case 'q':  								case 'r':  								case 's':  								case 't':  								case 'u':  								case 'v':  								case 'w':  								case 'x':  								case 'y':  								case 'z':  								case 'A':  								case 'B':  								case 'C':  								case 'D':  								case 'E':  								case 'F':  								case 'G':  								case 'H':  								case 'I':  								case 'J':  								case 'K':  								case 'L':  								case 'M':  								case 'N':  								case 'O':  								case 'P':  								case 'Q':  								case 'R':  								case 'S':  								case 'T':  								case 'U':  								case 'V':  								case 'W':  								case 'X':  								case 'Y':  								case 'Z':  								case '_':  									i++;  									while (i < str.Length && (IsIdentifierChar(str[i]) || IsDigit(str[i])))  										i++;  									goto BreakLoop;  								default:  									goto BreakLoop;  							}
