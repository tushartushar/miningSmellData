Implementation smell,Namespace,Class,File,Method,Description
Long Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The method has 110 lines of code.
Long Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,AddNodes,The method has 118 lines of code.
Long Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,AddNode,The method has 121 lines of code.
Long Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Main_OnEntryEvent,The method has 214 lines of code.
Long Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,DoStartup,The method has 182 lines of code.
Long Method,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The method has 323 lines of code.
Long Method,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,DoExisting,The method has 172 lines of code.
Complex Method,Party_Buffalo,Cache,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Static Functions.cs,CheckCache,Cyclomatic complexity of the method is 9
Complex Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,m_OpenDump_Click,Cyclomatic complexity of the method is 8
Complex Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,c_Extract_Click,Cyclomatic complexity of the method is 8
Complex Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_DragDrop,Cyclomatic complexity of the method is 8
Complex Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,Cyclomatic complexity of the method is 21
Complex Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_Delete_Click,Cyclomatic complexity of the method is 10
Complex Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,treeView1_AfterSelect,Cyclomatic complexity of the method is 22
Complex Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,treeView1_AfterLabelEdit,Cyclomatic complexity of the method is 17
Complex Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,treeview_ContextMenu_Popup,Cyclomatic complexity of the method is 17
Complex Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,LoadDrive,Cyclomatic complexity of the method is 21
Complex Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,AddNodes,Cyclomatic complexity of the method is 22
Complex Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,AddNode,Cyclomatic complexity of the method is 17
Complex Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,DoStartup,Cyclomatic complexity of the method is 50
Complex Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,ListviewLabelUpdate,Cyclomatic complexity of the method is 10
Complex Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Reload,Cyclomatic complexity of the method is 10
Complex Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem9_Click,Cyclomatic complexity of the method is 13
Complex Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,c_Move_Click,Cyclomatic complexity of the method is 12
Complex Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem14_Click_1,Cyclomatic complexity of the method is 10
Complex Method,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,m_CheckForUpdates_Click,Cyclomatic complexity of the method is 9
Complex Method,Party_Buffalo,ListViewExtensions,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\ListviewStuff.cs,SetSortIcon,Cyclomatic complexity of the method is 10
Complex Method,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,Cyclomatic complexity of the method is 21
Complex Method,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,DoExisting,Cyclomatic complexity of the method is 30
Complex Method,Party_Buffalo.Forms,SearchForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\SearchForm.cs,Search,Cyclomatic complexity of the method is 15
Long Parameter List,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem7_Click,The method has 8 parameters.
Long Parameter List,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_NewFolder_Click,The method has 6 parameters.
Long Parameter List,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,lCached_Click,The method has 6 parameters.
Long Parameter List,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,tCached_Click,The method has 6 parameters.
Long Parameter List,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,m_CheckForUpdates_Click,The method has 6 parameters.
Long Parameter List,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,DownloadUpdate,The method has 5 parameters.
Long Parameter List,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,ExceptionHandler,The method has 5 parameters.
Long Parameter List,Party_Buffalo.Forms,SearchForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\SearchForm.cs,Search,The method has 6 parameters.
Long Statement,Party_Buffalo,Cache,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Static Functions.cs,AddIcon,The length of the statement  "	string FolderPath = Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData) + "\\Party Buffalo Drive Explorer"; " is 125.
Long Statement,Party_Buffalo,Cache,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Static Functions.cs,GetIcon,The length of the statement  "		string FolderPath = Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData) + "\\Party Buffalo Drive Explorer\\Cached Icons"; " is 139.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Watcher_Created,The length of the statement  "		Forms.EntryAction ea = new Party_Buffalo.Forms.EntryAction (entries.ToArray ()' Party_Buffalo.Forms.EntryAction.Method.Extract' OutputDirectory); " is 145.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem2_Click,The length of the statement  "				Forms.EntryAction ea = new Party_Buffalo.Forms.EntryAction (Partitions.ToArray ()' Party_Buffalo.Forms.EntryAction.Method.Extract' cb.FoldersToSkip' fbd.SelectedPath); " is 167.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem2_Click,The length of the statement  "				Forms.EntryAction ea = new Party_Buffalo.Forms.EntryAction (Partitions.ToArray ()' Party_Buffalo.Forms.EntryAction.Method.Extract' cb.FoldersToSkip' cfd.FileName); " is 163.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,m_QuickAdd_Click,The length of the statement  "		Forms.EntryAction ea = new Party_Buffalo.Forms.EntryAction (ofd.FileNames' Drive' Party_Buffalo.Forms.EntryAction.Method.Inject); " is 129.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,m_BackupImage_Click,The length of the statement  "		Forms.EntryAction ea = new Party_Buffalo.Forms.EntryAction (Drive' Party_Buffalo.Forms.EntryAction.Method.Backup' sfd.FileName); " is 128.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,m_RestoreImage_Click,The length of the statement  "		Forms.EntryAction ea = new Party_Buffalo.Forms.EntryAction (Drive' Party_Buffalo.Forms.EntryAction.Method.Restore' ofd.FileName); " is 129.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,m_ExtractSecuritySector_Click,The length of the statement  "		Forms.EntryAction ea = new Party_Buffalo.Forms.EntryAction (Drive' Party_Buffalo.Forms.EntryAction.Method.ExtractSS' sfd.FileName); " is 131.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,m_ExtractJosh_Click,The length of the statement  "		Forms.EntryAction ea = new Party_Buffalo.Forms.EntryAction (Drive' Party_Buffalo.Forms.EntryAction.Method.ExtractJ' sfd.FileName); " is 130.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem30_Click,The length of the statement  "	string FolderPath = Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData) + "\\Party Buffalo Drive Explorer\\Cached Icons"; " is 139.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem7_Click,The length of the statement  "	string Text = "Party Buffalo was created by CLK Rebellion (Lander Griffith) with help from gabe_k.  You may contact me at clkxu5@gmail.com\r\n\r\nThis application is not affiliated with Microsoft Corp. \"Microsoft\"' \"Xbox\"' \"Xbox 360\" and \"Xbox LIVE\" are registered trademarks of Microsoft Corp."; " is 304.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem7_Click,The length of the statement  "	string Thanks = "skitzo' gabe_k' Cody' hippie' Rickshaw' Cheater912' unknown_v2' sonic-iso' XeNoN.7\r\n\r\nCaboose (Nyan Cat progress bar)' Mathieulh (stealing credit cards)' idc \"Looks like a list of attendees for a furry convention to me\"' roofus & angerwound for the first Xbox 360 FATX explorer which still keeps people satisfied..."; " is 340.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem7_Click,The length of the statement  "		Microsoft.WindowsAPICodePack.Dialogs.TaskDialogButton Donate = new Microsoft.WindowsAPICodePack.Dialogs.TaskDialogButton ("Donate"' "Donate"); " is 142.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem7_Click,The length of the statement  "			System.Diagnostics.Process.Start ("https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=JWATGN6RETA5Y&lc=US&item_name=Party%20Buffalo%20Drive%20Explorer&currency_code=USD&bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHosted"); " is 238.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem7_Click,The length of the statement  "		//Microsoft.WindowsAPICodePack.Dialogs.TaskDialogButton Visit = new Microsoft.WindowsAPICodePack.Dialogs.TaskDialogButton("Visit"' "Visit CLKXU5.com"); " is 151.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem7_Click,The length of the statement  "		Microsoft.WindowsAPICodePack.Dialogs.TaskDialogButton Close = new Microsoft.WindowsAPICodePack.Dialogs.TaskDialogButton ("Close"' "Close"); " is 139.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem7_Click,The length of the statement  "		td.FooterText = "Thank you for using Party Buffalo Drive Explorer\r\n" + Version + "\r\n<a href=\"http://clkxu5.com\">Visit the Development Blog</a> - <a href=\"http://free60.org/FATX\">FATX Research</a>"; " is 205.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem7_Click,The length of the statement  "		if (MessageBox.Show (Text + "\r\n" + Thanks + "\r\n" + Version + "\r\nWould you like to donate?"' "About Party Buffalo"' MessageBoxButtons.YesNo) == DialogResult.Yes) { " is 168.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem7_Click,The length of the statement  "			System.Diagnostics.Process.Start ("https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=JWATGN6RETA5Y&lc=US&item_name=Party%20Buffalo%20Drive%20Explorer&currency_code=USD&bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHosted"); " is 238.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,c_Extract_Click,The length of the statement  "				Forms.EntryAction ea = new Party_Buffalo.Forms.EntryAction (entries.ToArray ()' Party_Buffalo.Forms.EntryAction.Method.Extract' fbd.SelectedPath); " is 146.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,c_Extract_Click,The length of the statement  "				Forms.EntryAction ea = new Party_Buffalo.Forms.EntryAction (entries.ToArray ()' Party_Buffalo.Forms.EntryAction.Method.Extract' cfd.FileName); " is 142.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,c_Delete_Click,The length of the statement  "		dr = MessageBox.Show (string.Format ("Are you sure you want to delete the selected{0}?"' (listView1.SelectedItems.Count > 1) ? " " + listView1.SelectedItems.Count.ToString () + " items" : " item")' "Confirm Deletion"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning); " is 267.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,c_Delete_Click,The length of the statement  "		td.Text = string.Format ("Are you sure you want to delete the selected{0}?"' (listView1.SelectedItems.Count > 1) ? " " + listView1.SelectedItems.Count.ToString () + " items" : " item"); " is 185.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,c_Delete_Click,The length of the statement  "		Forms.EntryAction ea = new Party_Buffalo.Forms.EntryAction (items.ToArray ()' Party_Buffalo.Forms.EntryAction.Method.Delete' ""); " is 129.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,c_InjectFile_Click,The length of the statement  "		Forms.EntryAction ea = new Party_Buffalo.Forms.EntryAction (ofd.FileNames' ((Folder)treeView1.SelectedNode.Tag)' Party_Buffalo.Forms.EntryAction.Method.Inject); " is 160.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,c_InjectFolder_Click,The length of the statement  "			Forms.EntryAction ea = new Party_Buffalo.Forms.EntryAction (cfd.FileNames.ToArray ()' (Folder)treeView1.SelectedNode.Tag' Party_Buffalo.Forms.EntryAction.Method.Inject); " is 169.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_InjectFile_Click,The length of the statement  "		Forms.EntryAction ea = new Party_Buffalo.Forms.EntryAction (ofd.FileNames' ((Folder)rightClickedNode.Tag)' Party_Buffalo.Forms.EntryAction.Method.Inject); " is 154.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_InjectFolder_Click,The length of the statement  "			Forms.EntryAction ea = new Party_Buffalo.Forms.EntryAction (cfd.FileNames.ToArray ()' (Folder)rightClickedNode.Tag' Party_Buffalo.Forms.EntryAction.Method.Inject); " is 163.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_NewFolder_Click,The length of the statement  "			MessageBox.Show ("An exception was thrown: " + x.Message + "\r\n\r\nIf this appears to be a bug' press CTRL + C to copy the stack trace' then please email it to me at clkxu5@gmail.com:\r\n" + x.StackTrace); " is 206.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_NewFolder_Click,The length of the statement  "			td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message); " is 163.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_Delete_Click,The length of the statement  "		dr = MessageBox.Show ("Are you sure you want to delete the selected folder?"' "Confirm Deletion"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning); " is 147.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_Delete_Click,The length of the statement  "		Forms.EntryAction ea = new Party_Buffalo.Forms.EntryAction (items.ToArray ()' Party_Buffalo.Forms.EntryAction.Method.Delete' ""); " is 129.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,treeView1_AfterSelect,The length of the statement  "				else if (Files [i].Parent.FullPath == Files [i].Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (Files [i].Name.Substring (0' 2))) { " is 171.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,AddNodes,The length of the statement  "			if (Properties.Settings.Default.SaveIcons && (!Folders [i].IsKnownFolder || Folders [i].Name.ToLower () == "fffe07d1")) { " is 121.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Main_OnEntryEvent,The length of the statement  "		AddNode (eg.ParentFolder' treeView1.NodeFromPath (((eg.FullParentPath.Contains ('\\')) ? eg.FullParentPath.Remove (eg.FullParentPath.LastIndexOf ('\\')) : eg.FullParentPath))' ListViewCreateItem.DecideForMeNigga); " is 213.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Main_OnEntryEvent,The length of the statement  "					else if (((File)eg.ModifiedEntry).Parent.FullPath == ((File)eg.ModifiedEntry).Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (((File)eg.ModifiedEntry).Name.Substring (0' 2))) { " is 216.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Main_OnEntryEvent,The length of the statement  "				if (!n.Text.Contains (" | ") && ((File)eg.ModifiedEntry).Parent.Parent.IsTitleIDFolder && !((File)eg.ModifiedEntry).Parent.Parent.IsKnownFolder) { " is 146.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,DoStartup,The length of the statement  "		                Party_Buffalo.Update.UpdateInfo ud = u.CheckForUpdates(new Uri("http://clkxu5.com/drivexplore/coolapplicationstuff.xml"));" is 122.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,DoStartup,The length of the statement  "				TaskDialogCommandLink Download = new TaskDialogCommandLink ("Download"' "Download Party Buffalo version " + ud.UpdateVersion' ""); " is 130.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,DoStartup,The length of the statement  "				TaskDialogCommandLink DontDownload = new TaskDialogCommandLink ("DontDownload"' "Let me go about my business and I'll download this stuff later..."' ""); " is 153.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,DoStartup,The length of the statement  "	treeView1.ImageList.ImageSize = new Size (Properties.Settings.Default.treeViewIconWidthHeight' Properties.Settings.Default.treeViewIconWidthHeight); " is 148.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,ListviewLabelUpdate,The length of the statement  "		l_selectedItems.Text = Files.ToString () + " " + f + " selected for a total of " + VariousFunctions.ByteConversion (size); " is 122.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,ListviewLabelUpdate,The length of the statement  "		l_selectedItems.Text = Folders.ToString () + " " + folder + " and " + Files.ToString () + " " + file + " selected for a total of " + VariousFunctions.ByteConversion (size); " is 172.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,lCached_Click,The length of the statement  "				MessageBox.Show ("An exception was thrown: " + x.Message + "\r\n\r\nIf this appears to be a bug' press CTRL + C to copy the stack trace' then please email it to me at clkxu5@gmail.com:\r\n" + x.StackTrace); " is 206.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,lCached_Click,The length of the statement  "				td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message); " is 163.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,tCached_Click,The length of the statement  "				MessageBox.Show ("An exception was thrown: " + x.Message + "\r\n\r\nIf this appears to be a bug' press CTRL + C to copy the stack trace' then please email it to me at clkxu5@gmail.com:\r\n" + x.StackTrace); " is 206.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,tCached_Click,The length of the statement  "				td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message); " is 163.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_AddLabel_Click,The length of the statement  "	Forms.AddLabel al = new Party_Buffalo.Forms.AddLabel (((Folder)rightClickedNode.Tag).FullPath' ((rightClickedNode.Text.Contains ('|')) ? rightClickedNode.GameName () : rightClickedNode.Name)); " is 192.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem9_Click,The length of the statement  "				MessageBox.Show ("The selected path doesn't contain a valid USB backup/dump."' "Files Not Valid"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 142.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,size16_Click,The length of the statement  "	treeView1.ImageList.ImageSize = new Size (Properties.Settings.Default.treeViewIconWidthHeight' Properties.Settings.Default.treeViewIconWidthHeight); " is 148.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,size24_Click,The length of the statement  "	treeView1.ImageList.ImageSize = new Size (Properties.Settings.Default.treeViewIconWidthHeight' Properties.Settings.Default.treeViewIconWidthHeight); " is 148.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,size32_Click,The length of the statement  "	treeView1.ImageList.ImageSize = new Size (Properties.Settings.Default.treeViewIconWidthHeight' Properties.Settings.Default.treeViewIconWidthHeight); " is 148.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,size64_Click,The length of the statement  "	treeView1.ImageList.ImageSize = new Size (Properties.Settings.Default.treeViewIconWidthHeight' Properties.Settings.Default.treeViewIconWidthHeight); " is 148.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,c_Move_Click,The length of the statement  "			Forms.FolderSelector fs = new Party_Buffalo.Forms.FolderSelector (treeView1' treeView1.Nodes [0].Nodes.Find (treeView1.SelectedNode.RealPath ().Split ('\\') [0]' false) [0]); " is 174.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,c_Move_Click,The length of the statement  "						MessageBox.Show ("Moving Error"' UnableToWrite + "\r\n\r\n" + BadEntries' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 124.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem14_Click_1,The length of the statement  "		Forms.FolderSelector fs = new Party_Buffalo.Forms.FolderSelector (treeView1' treeView1.Nodes [0].Nodes.Find (treeView1.SelectedNode.RealPath ().Split ('\\') [0]' false) [0]); " is 174.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem14_Click_1,The length of the statement  "					MessageBox.Show ("Moving Error"' UnableToWrite + "\r\n\r\n" + BadEntries' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 124.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,reCache_Click,The length of the statement  "			foreach (System.IO.FileInfo fi in new System.IO.DirectoryInfo (Cache.ImageCachePath).GetFiles ().Where (name => name.Name.Length == 12)) { " is 138.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,reCache_Click,The length of the statement  "					System.Net.HttpWebRequest wr = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (string.Format ("http://avatar.xboxlive.com/global/t.{0}/icon/0/8000"' TitleID)); " is 168.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,reCache_Click,The length of the statement  "				if (!new System.IO.DirectoryInfo (Cache.ImageCachePath).GetFiles ().Contains (new System.IO.FileInfo (Cache.ImageCachePath + "\\" + s + ".png"))) { " is 147.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,reCache_Click,The length of the statement  "						System.Net.HttpWebRequest wr = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (string.Format ("http://avatar.xboxlive.com/global/t.{0}/icon/0/8000"' TitleID)); " is 168.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,m_CheckForUpdates_Click,The length of the statement  "	            Party_Buffalo.Update.UpdateInfo ud = u.CheckForUpdates(new Uri("http://clkxu5.com/drivexplore/coolapplicationstuff.xml"));" is 122.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,m_CheckForUpdates_Click,The length of the statement  "			TaskDialogCommandLink Download = new TaskDialogCommandLink ("Download"' "Download Party Buffalo version " + ud.UpdateVersion' ""); " is 130.
Long Statement,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,m_CheckForUpdates_Click,The length of the statement  "			TaskDialogCommandLink DontDownload = new TaskDialogCommandLink ("DontDownload"' "Let me go about my business and I'll download this stuff later..."' ""); " is 153.
Long Statement,Party_Buffalo,ListViewColumnSorter,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\ListviewStuff.cs,Compare,The length of the statement  "		compareResult = DateTime.Compare (DateTime.Parse (listviewX.SubItems [ColumnToSort].Text)' DateTime.Parse (listviewY.SubItems [ColumnToSort].Text)); " is 148.
Long Statement,Party_Buffalo,Program,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Program.cs,Main,The length of the statement  "		if ((System.IO.File.Exists (Application.StartupPath + "\\Party Buffalo Drive Explorer.exe") || System.IO.File.Exists (Application.StartupPath + "\\Party Buffalo.exe")) && System.IO.Path.GetFileName (Application.ExecutablePath).Contains ("new")) { " is 246.
Long Statement,Party_Buffalo,Program,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Program.cs,Main,The length of the statement  "			string Existing = (System.IO.File.Exists (Application.StartupPath + "\\Party Buffalo Drive Explorer.exe")) ? Application.StartupPath + "\\Party Buffalo Drive Explorer.exe" : Application.StartupPath + "\\Party Buffalo.exe"; " is 222.
Long Statement,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,DownloadUpdate,The length of the statement  "		//System.IO.File.Move(System.Windows.Forms.Application.ExecutablePath' System.Windows.Forms.Application.StartupPath + "\\Party Buffalo_old.exe"); " is 145.
Long Statement,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The length of the statement  "			webBrowser1.Url = new Uri ("http://clkxu5.com/drivexplore/ad/ad" + Properties.Settings.Default.loadedAd.ToString () + ".html"); " is 127.
Long Statement,Party_Buffalo.Forms,Cache,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Cache.cs,button3_Click,The length of the statement  "		System.IO.BinaryWriter bw = new System.IO.BinaryWriter (new System.IO.FileStream (sfd.FileName' System.IO.FileMode.CreateNew)); " is 127.
Long Statement,Party_Buffalo.Forms,Cache,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Cache.cs,button3_Click,The length of the statement  "		if (MessageBox.Show ("Would you like to use friendly formatting? (Title ID: xxx Game Name: xxx)"' "Use Friendly Formatting?"' MessageBoxButtons.YesNo) == DialogResult.No) { " is 172.
Long Statement,Party_Buffalo.Forms,Cache,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Cache.cs,button3_Click,The length of the statement  "				byte[] toWrite = Encoding.ASCII.GetBytes ("Title ID: " + Properties.Settings.Default.cachedID [i] + " Game Name: " + Properties.Settings.Default.correspondingIDName [i] + "\r\n"); " is 179.
Long Statement,Party_Buffalo.Forms,Cache,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Cache.cs,button3_Click,The length of the statement  "			byte[] toWrite = Encoding.ASCII.GetBytes (Properties.Settings.Default.cachedID [i] + " " + Properties.Settings.Default.correspondingIDName [i] + "\r\n"); " is 153.
Long Statement,Party_Buffalo.Forms,Cache,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Cache.cs,menuItem1_Click,The length of the statement  "			Clipboard.SetDataObject ("Title ID: " + listView1.SelectedItems [0].SubItems [1].Text + " Game Name: " + listView1.SelectedItems [0].Text' true' 5' 250); " is 153.
Long Statement,Party_Buffalo.Forms,CustomBackupViewer,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\CustomBackupViewer.cs,AfterSelect,The length of the statement  "		CLKsFATXLib.Streams.Reader br = new CLKsFATXLib.Streams.Reader (new System.IO.FileStream (fi.FullName' System.IO.FileMode.Open)); " is 129.
Long Statement,Party_Buffalo.Forms,CustomBackupViewer,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\CustomBackupViewer.cs,menuItem2_Click,The length of the statement  "			System.Diagnostics.Process.Start (system' ((string)rightClicked.Parent.Tag) + "\\" + ((rightClicked.Text.Contains (" | ")) ? rightClicked.Name.Remove (rightClicked.Text.IndexOf (" | ")) : rightClicked.Text)); " is 208.
Long Statement,Party_Buffalo.Forms,CustomBackupViewer,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\CustomBackupViewer.cs,menuItem3_Click,The length of the statement  "		System.Diagnostics.Process.Start (system' "/select'" + ((string)treeView1.SelectedNode.Tag + "\\" + listView1.FocusedItem.Text)); " is 129.
Long Statement,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The length of the statement  "		//while (true)//(!this.IsHandleCreated || !progressBar1.IsHandleCreated || !label1.IsHandleCreated || !lPercent.IsHandleCreated || !button1.IsHandleCreated) " is 156.
Long Statement,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The length of the statement  "				CLKsFATXLib.Streams.Writer w = new CLKsFATXLib.Streams.Writer (new System.IO.FileStream (OutPath' System.IO.FileMode.Create)); " is 126.
Long Statement,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The length of the statement  "				CLKsFATXLib.Streams.Writer bw = new CLKsFATXLib.Streams.Writer (new System.IO.FileStream (OutPath' System.IO.FileMode.Create)); " is 127.
Long Statement,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The length of the statement  "				CLKsFATXLib.Streams.Writer bw2 = new CLKsFATXLib.Streams.Writer (new System.IO.FileStream (OutPath' System.IO.FileMode.Create)); " is 128.
Long Statement,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The length of the statement  "				if (MessageBox.Show ("WARNING: Restoring a drive that does not match your current one can cause for data to not be read correctly by the Xbox 360' or for other unforseen problems!  Please make sure you know what you're doing before continuing.  Are you sure you want to continue?"' "WARNING AND STUFF"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.Yes) { " is 374.
Long Statement,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The length of the statement  "					if (MessageBox.Show ("This is your last chance to stop!  Are you POSITIVE you want to continue?"' "Last Chance!"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.Yes) { " is 185.
Long Statement,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The length of the statement  "						CLKsFATXLib.Streams.Reader r2 = new CLKsFATXLib.Streams.Reader (new System.IO.FileStream (OutPath' System.IO.FileMode.Open)); " is 125.
Long Statement,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,ExceptionHandler,The length of the statement  "		MessageBox.Show ("An exception was thrown: " + x.Message + "\r\n\r\nPress CTRL + C to copy the stack trace:\r\n" + x.StackTrace); " is 129.
Long Statement,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,ExceptionHandler,The length of the statement  "			td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message); " is 163.
Long Statement,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,DoExisting,The length of the statement  "				td.Text = "A " + ((Folders [i].Existing.IsFolder) ? "folder " : "file ") + "named \"" + Folders [i].Existing.Name + "\" already exists in the directory \"" + Folders [i].Existing.Parent.FullPath + "\".  Would you like to " + ((Folders [i].Existing.IsFolder) ? "merge the already existing folder with the new one?" : "overwrite the currently existing file to write the new folder?"); " is 382.
Long Statement,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,DoExisting,The length of the statement  "					td.Text = "A file named \"" + Files [i].Existing.Name + "\" already exists in the directory \"" + Files [i].Existing.Parent.FullPath + "\".  Would you like to overwrite the currently existing file to write the new file?"; " is 221.
Long Statement,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_FolderAction,The length of the statement  "				lPercent.Text = (p == 0 || (((decimal)p / (decimal)m) * 100).ToString ("#") == "0") ? "" : (((decimal)p / (decimal)m) * 100).ToString ("#") + "%"; " is 146.
Long Statement,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_FileAction,The length of the statement  "			lPercent.Text = (p == 0 || (((decimal)p / (decimal)m) * 100).ToString ("#") == "0") ? "" : (((decimal)p / (decimal)m) * 100).ToString ("#") + "%"; " is 146.
Long Statement,Party_Buffalo.Forms,InjectDialog,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\InjectDialog.cs,InjectDialog_Load,The length of the statement  "		this.l_Description.Text = "A folder with the name \"" + exEntry.Existing.Name + "\" already exists in the folder \"" + exEntry.Existing.Parent.Name + "\""; " is 155.
Long Statement,Party_Buffalo.Forms,InjectDialog,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\InjectDialog.cs,InjectDialog_Load,The length of the statement  "		l_Description.Text = "A file with the name \"" + exEntry.Existing.Name + "\" already exists in the folder \"" + exEntry.Existing.Parent.Name + "\""; " is 148.
Long Statement,Party_Buffalo.Forms,InjectDialog,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\InjectDialog.cs,InjectDialog_Load,The length of the statement  "	//        this.l_Description.Text = "A folder with the name \"" + WR.Entry.Name + "\" already exists in the folder \"" + WR.Entry.Parent.Name + "\""; " is 149.
Long Statement,Party_Buffalo.Forms,InjectDialog,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\InjectDialog.cs,InjectDialog_Load,The length of the statement  "	//        l_Description.Text = "A file with the name \"" + WR.Entry.Name + "\" already exists in the folder \"" + WR.Entry.Parent.Name + "\""; " is 142.
Long Statement,Party_Buffalo.Forms,NewKnownFolder,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\NewKnownFolder.cs,NewKnownFolder_HelpButtonClicked,The length of the statement  "	MessageBox.Show ("The reason why there may be whitespace here is because the icons either haven't been cached' or there is no available icon for the game based off of previous loadings.\r\n\r\nTo make sure that you are caching the icons' click the \"Drive\" menu' go down to loading options' and select to automatically cache game icons.  This will make loading a little slower at first' but will speed up over time."); " is 419.
Long Statement,Party_Buffalo.Forms,NewKnownFolder,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\NewKnownFolder.cs,GetIcon,The length of the statement  "	string FolderPath = Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData) + "\\Party Buffalo Drive Explorer\\Cached Icons"; " is 139.
Long Statement,Party_Buffalo.Forms,Drive_Properties,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\DriveProperties.cs,Drive_Properties_Load,The length of the statement  "	l_drivePath.Text = (xDrive.DriveType == CLKsFATXLib.DriveType.HardDisk) ? @"\\.\PhysicalDrive" + xDrive.DeviceIndex.ToString () : ((xDrive.DriveType == CLKsFATXLib.DriveType.USB) ? System.IO.Path.GetPathRoot (xDrive.USBPaths [0]) : xDrive.FilePath); " is 249.
Long Statement,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,LoadGeneral,The length of the statement  "		l_size.Text = "0x" + ((File)xFile).Size.ToString ("X") + " (" + CLKsFATXLib.VariousFunctions.ByteConversion (((File)xFile).Size) + ")"; " is 135.
Long Statement,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,LoadGeneral,The length of the statement  "		l_sizeOnDisk.Text = "0x" + CLKsFATXLib.VariousFunctions.UpToNearestCluster (((File)xFile).Size' xFile.PartitionInfo.ClusterSize).ToString ("X") + " (" + CLKsFATXLib.VariousFunctions.ByteConversion (CLKsFATXLib.VariousFunctions.UpToNearestCluster (((File)xFile).Size' xFile.PartitionInfo.ClusterSize)) + ")"; " is 307.
Long Statement,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,button1_Click,The length of the statement  "	//System.Security.Cryptography.MD5CryptoServiceProvider m = new System.Security.Cryptography.MD5CryptoServiceProvider(); " is 120.
Long Statement,Party_Buffalo.Forms,SearchForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\SearchForm.cs,Search,The length of the statement  "			if (file.Name.ToLower ().Contains (SearchTerm.ToLower ()) || file.SizeFriendly.ToLower ().Contains (SearchTerm.ToLower ())) { " is 125.
Long Statement,Party_Buffalo.Forms,SearchForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\SearchForm.cs,Search,The length of the statement  "				if (file.TitleName ().ToLower ().Contains (SearchTerm.ToLower ()) || file.TitleID ().ToString ("X").ToLower ().Contains (SearchTerm.ToLower ()) || file.ContentName ().ToLower ().Contains (SearchTerm.ToLower ()) || file.DeviceID ().ToHexString ().ToLower ().Contains (SearchTerm.ToLower ()) || file.ProfileID ().ToHexString ().ToLower ().Contains (SearchTerm.ToLower ()) || file.ConsoleID ().ToHexString ().ToLower ().Contains (SearchTerm.ToLower ())) { " is 452.
Long Statement,Party_Buffalo.Forms,SearchForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\SearchForm.cs,AddFolder,The length of the statement  "						ListViewItem.ListViewSubItem lsi = new ListViewItem.ListViewSubItem (li' CLKsFATXLib.VariousFunctions.KnownEquivilent [i]); " is 123.
Complex Conditional,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The conditional expression  "xDrive != null && m == Method.Backup || m == Method.ExtractJ || m == Method.ExtractSS || m == Method.Restore"  is complex.
Complex Conditional,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_FolderAction,The conditional expression  "p == 0 && m == 0 && file == null && filepath == null && Progress.Cancel != false"  is complex.
Complex Conditional,Party_Buffalo.Forms,SearchForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\SearchForm.cs,Search,The conditional expression  "file.TitleName ().ToLower ().Contains (SearchTerm.ToLower ()) || file.TitleID ().ToString ("X").ToLower ().Contains (SearchTerm.ToLower ()) || file.ContentName ().ToLower ().Contains (SearchTerm.ToLower ()) || file.DeviceID ().ToHexString ().ToLower ().Contains (SearchTerm.ToLower ()) || file.ProfileID ().ToHexString ().ToLower ().Contains (SearchTerm.ToLower ()) || file.ConsoleID ().ToHexString ().ToLower ().Contains (SearchTerm.ToLower ())"  is complex.
Empty Catch Block,Party_Buffalo,Cache,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Static Functions.cs,AddIcon,The method has an empty catch block.
Empty Catch Block,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_Delete_Click,The method has an empty catch block.
Empty Catch Block,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,treeView1_AfterSelect,The method has an empty catch block.
Empty Catch Block,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Main_OnEntryEvent,The method has an empty catch block.
Empty Catch Block,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,BookmarkRemove,The method has an empty catch block.
Empty Catch Block,Party_Buffalo,Program,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,Party_Buffalo.Forms,Cache,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Cache.cs,menuItem1_Click,The method has an empty catch block.
Empty Catch Block,Party_Buffalo.Forms,Clone,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Clone.cs,button1_Click,The method has an empty catch block.
Empty Catch Block,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The method has an empty catch block.
Empty Catch Block,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The method has an empty catch block.
Empty Catch Block,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_FolderAction,The method has an empty catch block.
Empty Catch Block,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_FolderAction,The method has an empty catch block.
Empty Catch Block,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_FileAction,The method has an empty catch block.
Empty Catch Block,Party_Buffalo.Forms,Drive_Properties,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\DriveProperties.cs,Drive_Properties_FormClosing,The method has an empty catch block.
Empty Catch Block,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,LoadSTFS,The method has an empty catch block.
Empty Catch Block,Party_Buffalo.Forms,SearchForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\SearchForm.cs,listView1_DoubleClick,The method has an empty catch block.
Empty Catch Block,Party_Buffalo.Forms,SearchForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\SearchForm.cs,button1_Click,The method has an empty catch block.
Magic Number,Party_Buffalo,Cache,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Static Functions.cs,IsTitleIDFolder,The following statement contains a magic number: if (Name.Length != 8) {  	return false;  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Main,The following statement contains a magic number: if (Environment.OSVersion.Version.Build >= 6000) {  	Aero = true;  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_ItemDrag,The following statement contains a magic number: if (e.Button == MouseButtons.Left) {  	/* So' here's the ghetto method I'm doing that I sort of jacked from Le Fluffie's method                  *                   * Extract file to temp directory                  * Do the "DoDragDrop" thing to make the system move a temp file                  * Use the FileSystemWatcher to see where the file was moved to                  *                   */string Temp = System.IO.Path.GetTempPath () + "\\Party Buffalo";  	if (!System.IO.Directory.Exists (Temp))  		System.IO.Directory.CreateDirectory (Temp);  	int Random = new Random ().Next (0' 1000);  	string TempName = "\\partytempfile.tmp" + Random.ToString ();  	if (!System.IO.File.Exists (Temp + TempName)) {  		// Create the temp file  		System.IO.File.Create (Temp + TempName).Dispose ();  		// Set the attributes to hidden and temporary so they can be cleaned up later  		System.IO.File.SetAttributes (Temp + TempName' System.IO.FileAttributes.Hidden | System.IO.FileAttributes.Temporary);  	}  	// Get the drag/drop data object  	DataObject file = new DataObject (DataFormats.FileDrop' new string[] {  		Temp + TempName  	});  	// Set the data  	file.SetData (DataFormats.StringFormat' Temp + TempName);  	// Now mess with the FileSystemWatchers so they will only see this file  	foreach (System.IO.FileSystemWatcher Watcher in Watchers) {  		Watcher.Filter = TempName.Replace ("\\"' "");  		Watcher.NotifyFilter = System.IO.NotifyFilters.FileName;  		Watcher.EnableRaisingEvents = true;  		Watcher.IncludeSubdirectories = true;  	}  	// Do the drag/drop stuff  	DoDragDrop (file' DragDropEffects.Move);  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Watcher_Created,The following statement contains a magic number: try {  	System.IO.File.Delete (e.FullPath);  }  catch {  	System.Threading.Thread.Sleep (500);  	System.IO.File.Delete (e.FullPath);  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Watcher_Created,The following statement contains a magic number: System.Threading.Thread.Sleep (500);  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,m_OpenDump_Click,The following statement contains a magic number: if (ofd.ShowDialog () == DialogResult.OK) {  	if (Drive != null) {  		Drive.Close ();  	}  	Drive = new Drive (ofd.FileName);  	LoadDrive ();  	if (Properties.Settings.Default.recentFiles == null) {  		Properties.Settings.Default.recentFiles = new System.Collections.Specialized.StringCollection ();  	}  	bool exists = false;  	foreach (string s in Properties.Settings.Default.recentFiles) {  		if (s == ofd.FileName) {  			exists = true;  		}  	}  	if (!exists) {  		//string shell32DllPath = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\" + "shell32.dll";  		Properties.Settings.Default.recentFiles.Insert (0' ofd.FileName);  		// Change the jumplist  		//Windows7.DesktopIntegration.JumpListManager jm = this.CreateJumpListManager();  		if (Properties.Settings.Default.recentFiles.Count == 6) {  			Properties.Settings.Default.recentFiles.RemoveAt (5);  		}  		Properties.Settings.Default.Save ();  		MenuItem i = new MenuItem (ofd.FileName);  		i.Click += new EventHandler (RecentFileHandler);  		m_Open.MenuItems.Add (4' i);  		//jm.AddCustomDestination(new ShellLink  		//{  		//    Path = ofd.FileName'  		//    Title = Drive.Name'  		//    Category = "Recent Files"'  		//    IconLocation = shell32DllPath'  		//    IconIndex = 1  		//});  		//jm.AddToRecent(Properties.Settings.Default.recentFiles[0]);  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,m_OpenDump_Click,The following statement contains a magic number: if (ofd.ShowDialog () == DialogResult.OK) {  	if (Drive != null) {  		Drive.Close ();  	}  	Drive = new Drive (ofd.FileName);  	LoadDrive ();  	if (Properties.Settings.Default.recentFiles == null) {  		Properties.Settings.Default.recentFiles = new System.Collections.Specialized.StringCollection ();  	}  	bool exists = false;  	foreach (string s in Properties.Settings.Default.recentFiles) {  		if (s == ofd.FileName) {  			exists = true;  		}  	}  	if (!exists) {  		//string shell32DllPath = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\" + "shell32.dll";  		Properties.Settings.Default.recentFiles.Insert (0' ofd.FileName);  		// Change the jumplist  		//Windows7.DesktopIntegration.JumpListManager jm = this.CreateJumpListManager();  		if (Properties.Settings.Default.recentFiles.Count == 6) {  			Properties.Settings.Default.recentFiles.RemoveAt (5);  		}  		Properties.Settings.Default.Save ();  		MenuItem i = new MenuItem (ofd.FileName);  		i.Click += new EventHandler (RecentFileHandler);  		m_Open.MenuItems.Add (4' i);  		//jm.AddCustomDestination(new ShellLink  		//{  		//    Path = ofd.FileName'  		//    Title = Drive.Name'  		//    Category = "Recent Files"'  		//    IconLocation = shell32DllPath'  		//    IconIndex = 1  		//});  		//jm.AddToRecent(Properties.Settings.Default.recentFiles[0]);  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,m_OpenDump_Click,The following statement contains a magic number: if (ofd.ShowDialog () == DialogResult.OK) {  	if (Drive != null) {  		Drive.Close ();  	}  	Drive = new Drive (ofd.FileName);  	LoadDrive ();  	if (Properties.Settings.Default.recentFiles == null) {  		Properties.Settings.Default.recentFiles = new System.Collections.Specialized.StringCollection ();  	}  	bool exists = false;  	foreach (string s in Properties.Settings.Default.recentFiles) {  		if (s == ofd.FileName) {  			exists = true;  		}  	}  	if (!exists) {  		//string shell32DllPath = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\" + "shell32.dll";  		Properties.Settings.Default.recentFiles.Insert (0' ofd.FileName);  		// Change the jumplist  		//Windows7.DesktopIntegration.JumpListManager jm = this.CreateJumpListManager();  		if (Properties.Settings.Default.recentFiles.Count == 6) {  			Properties.Settings.Default.recentFiles.RemoveAt (5);  		}  		Properties.Settings.Default.Save ();  		MenuItem i = new MenuItem (ofd.FileName);  		i.Click += new EventHandler (RecentFileHandler);  		m_Open.MenuItems.Add (4' i);  		//jm.AddCustomDestination(new ShellLink  		//{  		//    Path = ofd.FileName'  		//    Title = Drive.Name'  		//    Category = "Recent Files"'  		//    IconLocation = shell32DllPath'  		//    IconIndex = 1  		//});  		//jm.AddToRecent(Properties.Settings.Default.recentFiles[0]);  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,m_OpenDump_Click,The following statement contains a magic number: if (!exists) {  	//string shell32DllPath = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\" + "shell32.dll";  	Properties.Settings.Default.recentFiles.Insert (0' ofd.FileName);  	// Change the jumplist  	//Windows7.DesktopIntegration.JumpListManager jm = this.CreateJumpListManager();  	if (Properties.Settings.Default.recentFiles.Count == 6) {  		Properties.Settings.Default.recentFiles.RemoveAt (5);  	}  	Properties.Settings.Default.Save ();  	MenuItem i = new MenuItem (ofd.FileName);  	i.Click += new EventHandler (RecentFileHandler);  	m_Open.MenuItems.Add (4' i);  	//jm.AddCustomDestination(new ShellLink  	//{  	//    Path = ofd.FileName'  	//    Title = Drive.Name'  	//    Category = "Recent Files"'  	//    IconLocation = shell32DllPath'  	//    IconIndex = 1  	//});  	//jm.AddToRecent(Properties.Settings.Default.recentFiles[0]);  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,m_OpenDump_Click,The following statement contains a magic number: if (!exists) {  	//string shell32DllPath = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\" + "shell32.dll";  	Properties.Settings.Default.recentFiles.Insert (0' ofd.FileName);  	// Change the jumplist  	//Windows7.DesktopIntegration.JumpListManager jm = this.CreateJumpListManager();  	if (Properties.Settings.Default.recentFiles.Count == 6) {  		Properties.Settings.Default.recentFiles.RemoveAt (5);  	}  	Properties.Settings.Default.Save ();  	MenuItem i = new MenuItem (ofd.FileName);  	i.Click += new EventHandler (RecentFileHandler);  	m_Open.MenuItems.Add (4' i);  	//jm.AddCustomDestination(new ShellLink  	//{  	//    Path = ofd.FileName'  	//    Title = Drive.Name'  	//    Category = "Recent Files"'  	//    IconLocation = shell32DllPath'  	//    IconIndex = 1  	//});  	//jm.AddToRecent(Properties.Settings.Default.recentFiles[0]);  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,m_OpenDump_Click,The following statement contains a magic number: if (!exists) {  	//string shell32DllPath = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\" + "shell32.dll";  	Properties.Settings.Default.recentFiles.Insert (0' ofd.FileName);  	// Change the jumplist  	//Windows7.DesktopIntegration.JumpListManager jm = this.CreateJumpListManager();  	if (Properties.Settings.Default.recentFiles.Count == 6) {  		Properties.Settings.Default.recentFiles.RemoveAt (5);  	}  	Properties.Settings.Default.Save ();  	MenuItem i = new MenuItem (ofd.FileName);  	i.Click += new EventHandler (RecentFileHandler);  	m_Open.MenuItems.Add (4' i);  	//jm.AddCustomDestination(new ShellLink  	//{  	//    Path = ofd.FileName'  	//    Title = Drive.Name'  	//    Category = "Recent Files"'  	//    IconLocation = shell32DllPath'  	//    IconIndex = 1  	//});  	//jm.AddToRecent(Properties.Settings.Default.recentFiles[0]);  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,m_OpenDump_Click,The following statement contains a magic number: if (Properties.Settings.Default.recentFiles.Count == 6) {  	Properties.Settings.Default.recentFiles.RemoveAt (5);  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,m_OpenDump_Click,The following statement contains a magic number: if (Properties.Settings.Default.recentFiles.Count == 6) {  	Properties.Settings.Default.recentFiles.RemoveAt (5);  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,m_OpenDump_Click,The following statement contains a magic number: Properties.Settings.Default.recentFiles.RemoveAt (5);  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,m_OpenDump_Click,The following statement contains a magic number: m_Open.MenuItems.Add (4' i);  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: if (ye.IsFolder) {  	Folder f = (Folder)ye;  	TreeNode tn = treeView1.SelectedNode.Nodes.Find (listView1.Items [e.Item].Name' false) [0];  	listView1.Items [e.Item].Name = e.Label;  	tn.Name = e.Label;  	tn.Text = tn.Name;  	string Label = Cache.CheckCache (f.FullPath);  	if (Label != null) {  		tn.Text += " | " + Label;  		if (listView1.Items [e.Item].SubItems.Count == 0x4) {  			listView1.Items [e.Item].SubItems.Add (Label);  		}  		else {  			listView1.Items [e.Item].SubItems [4].Text = Label;  		}  	}  	if (f.IsTitleIDFolder) {  		if (Properties.Settings.Default.loadTIDNames) {  			if (Cache.CheckCache (f.Name) != null) {  				tn.Text += " | " + Cache.CheckCache (f.Name);  				if (listView1.Items [e.Item].SubItems.Count == 0x4) {  					listView1.Items [e.Item].SubItems.Add (tn.GameName ());  				}  				else {  					listView1.Items [e.Item].SubItems [4].Text = tn.GameName ();  				}  			}  			// Didn't find it' need to grab that shit  			else if (!f.IsKnownFolder) {  				if (f.GameName () != null && f.GameName () != "") {  					if (!f.IsKnownFolder) {  						Cache.AddID (f.Name' f.GameName ());  					}  					tn.Text += " | " + f.GameName ();  					listView1.Items [e.Item].SubItems [4].Text = f.GameName ();  				}  			}  		}  		if (Properties.Settings.Default.SaveIcons) {  			// Getting the icon  			if (!f.IsKnownFolder || f.Name.ToLower () == "FFFE07D1".ToLower ()) {  				if (!siL.Images.Keys.Contains (f.Name.ToUpper ())) {  					// Check the cache for the icon  					if (Cache.GetIcon (f.Name) != null) {  						treeView1.Invoke ((MethodInvoker)delegate {  							siL.Images.Add (f.Name.ToUpper ()' Cache.GetIcon (f.Name));  							liL.Images.Add (f.Name.ToUpper ()' Cache.GetIcon (f.Name));  							tn.ImageKey = f.Name.ToUpper ();  							tn.SelectedImageKey = tn.ImageKey;  							listView1.Items [e.Item].ImageKey = tn.ImageKey;  						});  					}  					else {  						if (f.GameIcon () != null) {  							Cache.AddIcon (f.GameIcon ()' f.Name);  							treeView1.Invoke ((MethodInvoker)delegate {  								siL.Images.Add (f.Name.ToUpper ()' f.GameIcon ());  								liL.Images.Add (f.Name.ToUpper ()' f.GameIcon ());  								//treeView1.ImageList = SmallListForFATX;  								//listView1.SmallImageList = SmallListForFATX;  								//listView1.LargeImageList = LargeListForFATX;  								tn.ImageKey = f.Name.ToUpper ();  								tn.SelectedImageKey = tn.ImageKey;  								listView1.Items [e.Item].ImageKey = tn.ImageKey;  							});  						}  					}  				}  				else {  					tn.ImageKey = f.Name.ToUpper ();  					tn.SelectedImageKey = tn.ImageKey;  					listView1.Items [e.Item].ImageKey = tn.ImageKey;  				}  			}  		}  	}  	else {  		if (listView1.Items [e.Item].SubItems.Count == 5) {  			listView1.Items [e.Item].SubItems [4].Text = "";  		}  		tn.ImageKey = "";  		tn.SelectedImageKey = "";  		if (ye.IsFolder) {  			listView1.Items [e.Item].ImageIndex = 0;  		}  		else {  			listView1.Items [e.Item].ImageIndex = 1;  		}  	}  	tn.Tag = f;  }  else {  	listView1.Items [e.Item].Name = e.Label;  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: if (ye.IsFolder) {  	Folder f = (Folder)ye;  	TreeNode tn = treeView1.SelectedNode.Nodes.Find (listView1.Items [e.Item].Name' false) [0];  	listView1.Items [e.Item].Name = e.Label;  	tn.Name = e.Label;  	tn.Text = tn.Name;  	string Label = Cache.CheckCache (f.FullPath);  	if (Label != null) {  		tn.Text += " | " + Label;  		if (listView1.Items [e.Item].SubItems.Count == 0x4) {  			listView1.Items [e.Item].SubItems.Add (Label);  		}  		else {  			listView1.Items [e.Item].SubItems [4].Text = Label;  		}  	}  	if (f.IsTitleIDFolder) {  		if (Properties.Settings.Default.loadTIDNames) {  			if (Cache.CheckCache (f.Name) != null) {  				tn.Text += " | " + Cache.CheckCache (f.Name);  				if (listView1.Items [e.Item].SubItems.Count == 0x4) {  					listView1.Items [e.Item].SubItems.Add (tn.GameName ());  				}  				else {  					listView1.Items [e.Item].SubItems [4].Text = tn.GameName ();  				}  			}  			// Didn't find it' need to grab that shit  			else if (!f.IsKnownFolder) {  				if (f.GameName () != null && f.GameName () != "") {  					if (!f.IsKnownFolder) {  						Cache.AddID (f.Name' f.GameName ());  					}  					tn.Text += " | " + f.GameName ();  					listView1.Items [e.Item].SubItems [4].Text = f.GameName ();  				}  			}  		}  		if (Properties.Settings.Default.SaveIcons) {  			// Getting the icon  			if (!f.IsKnownFolder || f.Name.ToLower () == "FFFE07D1".ToLower ()) {  				if (!siL.Images.Keys.Contains (f.Name.ToUpper ())) {  					// Check the cache for the icon  					if (Cache.GetIcon (f.Name) != null) {  						treeView1.Invoke ((MethodInvoker)delegate {  							siL.Images.Add (f.Name.ToUpper ()' Cache.GetIcon (f.Name));  							liL.Images.Add (f.Name.ToUpper ()' Cache.GetIcon (f.Name));  							tn.ImageKey = f.Name.ToUpper ();  							tn.SelectedImageKey = tn.ImageKey;  							listView1.Items [e.Item].ImageKey = tn.ImageKey;  						});  					}  					else {  						if (f.GameIcon () != null) {  							Cache.AddIcon (f.GameIcon ()' f.Name);  							treeView1.Invoke ((MethodInvoker)delegate {  								siL.Images.Add (f.Name.ToUpper ()' f.GameIcon ());  								liL.Images.Add (f.Name.ToUpper ()' f.GameIcon ());  								//treeView1.ImageList = SmallListForFATX;  								//listView1.SmallImageList = SmallListForFATX;  								//listView1.LargeImageList = LargeListForFATX;  								tn.ImageKey = f.Name.ToUpper ();  								tn.SelectedImageKey = tn.ImageKey;  								listView1.Items [e.Item].ImageKey = tn.ImageKey;  							});  						}  					}  				}  				else {  					tn.ImageKey = f.Name.ToUpper ();  					tn.SelectedImageKey = tn.ImageKey;  					listView1.Items [e.Item].ImageKey = tn.ImageKey;  				}  			}  		}  	}  	else {  		if (listView1.Items [e.Item].SubItems.Count == 5) {  			listView1.Items [e.Item].SubItems [4].Text = "";  		}  		tn.ImageKey = "";  		tn.SelectedImageKey = "";  		if (ye.IsFolder) {  			listView1.Items [e.Item].ImageIndex = 0;  		}  		else {  			listView1.Items [e.Item].ImageIndex = 1;  		}  	}  	tn.Tag = f;  }  else {  	listView1.Items [e.Item].Name = e.Label;  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: if (ye.IsFolder) {  	Folder f = (Folder)ye;  	TreeNode tn = treeView1.SelectedNode.Nodes.Find (listView1.Items [e.Item].Name' false) [0];  	listView1.Items [e.Item].Name = e.Label;  	tn.Name = e.Label;  	tn.Text = tn.Name;  	string Label = Cache.CheckCache (f.FullPath);  	if (Label != null) {  		tn.Text += " | " + Label;  		if (listView1.Items [e.Item].SubItems.Count == 0x4) {  			listView1.Items [e.Item].SubItems.Add (Label);  		}  		else {  			listView1.Items [e.Item].SubItems [4].Text = Label;  		}  	}  	if (f.IsTitleIDFolder) {  		if (Properties.Settings.Default.loadTIDNames) {  			if (Cache.CheckCache (f.Name) != null) {  				tn.Text += " | " + Cache.CheckCache (f.Name);  				if (listView1.Items [e.Item].SubItems.Count == 0x4) {  					listView1.Items [e.Item].SubItems.Add (tn.GameName ());  				}  				else {  					listView1.Items [e.Item].SubItems [4].Text = tn.GameName ();  				}  			}  			// Didn't find it' need to grab that shit  			else if (!f.IsKnownFolder) {  				if (f.GameName () != null && f.GameName () != "") {  					if (!f.IsKnownFolder) {  						Cache.AddID (f.Name' f.GameName ());  					}  					tn.Text += " | " + f.GameName ();  					listView1.Items [e.Item].SubItems [4].Text = f.GameName ();  				}  			}  		}  		if (Properties.Settings.Default.SaveIcons) {  			// Getting the icon  			if (!f.IsKnownFolder || f.Name.ToLower () == "FFFE07D1".ToLower ()) {  				if (!siL.Images.Keys.Contains (f.Name.ToUpper ())) {  					// Check the cache for the icon  					if (Cache.GetIcon (f.Name) != null) {  						treeView1.Invoke ((MethodInvoker)delegate {  							siL.Images.Add (f.Name.ToUpper ()' Cache.GetIcon (f.Name));  							liL.Images.Add (f.Name.ToUpper ()' Cache.GetIcon (f.Name));  							tn.ImageKey = f.Name.ToUpper ();  							tn.SelectedImageKey = tn.ImageKey;  							listView1.Items [e.Item].ImageKey = tn.ImageKey;  						});  					}  					else {  						if (f.GameIcon () != null) {  							Cache.AddIcon (f.GameIcon ()' f.Name);  							treeView1.Invoke ((MethodInvoker)delegate {  								siL.Images.Add (f.Name.ToUpper ()' f.GameIcon ());  								liL.Images.Add (f.Name.ToUpper ()' f.GameIcon ());  								//treeView1.ImageList = SmallListForFATX;  								//listView1.SmallImageList = SmallListForFATX;  								//listView1.LargeImageList = LargeListForFATX;  								tn.ImageKey = f.Name.ToUpper ();  								tn.SelectedImageKey = tn.ImageKey;  								listView1.Items [e.Item].ImageKey = tn.ImageKey;  							});  						}  					}  				}  				else {  					tn.ImageKey = f.Name.ToUpper ();  					tn.SelectedImageKey = tn.ImageKey;  					listView1.Items [e.Item].ImageKey = tn.ImageKey;  				}  			}  		}  	}  	else {  		if (listView1.Items [e.Item].SubItems.Count == 5) {  			listView1.Items [e.Item].SubItems [4].Text = "";  		}  		tn.ImageKey = "";  		tn.SelectedImageKey = "";  		if (ye.IsFolder) {  			listView1.Items [e.Item].ImageIndex = 0;  		}  		else {  			listView1.Items [e.Item].ImageIndex = 1;  		}  	}  	tn.Tag = f;  }  else {  	listView1.Items [e.Item].Name = e.Label;  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: if (ye.IsFolder) {  	Folder f = (Folder)ye;  	TreeNode tn = treeView1.SelectedNode.Nodes.Find (listView1.Items [e.Item].Name' false) [0];  	listView1.Items [e.Item].Name = e.Label;  	tn.Name = e.Label;  	tn.Text = tn.Name;  	string Label = Cache.CheckCache (f.FullPath);  	if (Label != null) {  		tn.Text += " | " + Label;  		if (listView1.Items [e.Item].SubItems.Count == 0x4) {  			listView1.Items [e.Item].SubItems.Add (Label);  		}  		else {  			listView1.Items [e.Item].SubItems [4].Text = Label;  		}  	}  	if (f.IsTitleIDFolder) {  		if (Properties.Settings.Default.loadTIDNames) {  			if (Cache.CheckCache (f.Name) != null) {  				tn.Text += " | " + Cache.CheckCache (f.Name);  				if (listView1.Items [e.Item].SubItems.Count == 0x4) {  					listView1.Items [e.Item].SubItems.Add (tn.GameName ());  				}  				else {  					listView1.Items [e.Item].SubItems [4].Text = tn.GameName ();  				}  			}  			// Didn't find it' need to grab that shit  			else if (!f.IsKnownFolder) {  				if (f.GameName () != null && f.GameName () != "") {  					if (!f.IsKnownFolder) {  						Cache.AddID (f.Name' f.GameName ());  					}  					tn.Text += " | " + f.GameName ();  					listView1.Items [e.Item].SubItems [4].Text = f.GameName ();  				}  			}  		}  		if (Properties.Settings.Default.SaveIcons) {  			// Getting the icon  			if (!f.IsKnownFolder || f.Name.ToLower () == "FFFE07D1".ToLower ()) {  				if (!siL.Images.Keys.Contains (f.Name.ToUpper ())) {  					// Check the cache for the icon  					if (Cache.GetIcon (f.Name) != null) {  						treeView1.Invoke ((MethodInvoker)delegate {  							siL.Images.Add (f.Name.ToUpper ()' Cache.GetIcon (f.Name));  							liL.Images.Add (f.Name.ToUpper ()' Cache.GetIcon (f.Name));  							tn.ImageKey = f.Name.ToUpper ();  							tn.SelectedImageKey = tn.ImageKey;  							listView1.Items [e.Item].ImageKey = tn.ImageKey;  						});  					}  					else {  						if (f.GameIcon () != null) {  							Cache.AddIcon (f.GameIcon ()' f.Name);  							treeView1.Invoke ((MethodInvoker)delegate {  								siL.Images.Add (f.Name.ToUpper ()' f.GameIcon ());  								liL.Images.Add (f.Name.ToUpper ()' f.GameIcon ());  								//treeView1.ImageList = SmallListForFATX;  								//listView1.SmallImageList = SmallListForFATX;  								//listView1.LargeImageList = LargeListForFATX;  								tn.ImageKey = f.Name.ToUpper ();  								tn.SelectedImageKey = tn.ImageKey;  								listView1.Items [e.Item].ImageKey = tn.ImageKey;  							});  						}  					}  				}  				else {  					tn.ImageKey = f.Name.ToUpper ();  					tn.SelectedImageKey = tn.ImageKey;  					listView1.Items [e.Item].ImageKey = tn.ImageKey;  				}  			}  		}  	}  	else {  		if (listView1.Items [e.Item].SubItems.Count == 5) {  			listView1.Items [e.Item].SubItems [4].Text = "";  		}  		tn.ImageKey = "";  		tn.SelectedImageKey = "";  		if (ye.IsFolder) {  			listView1.Items [e.Item].ImageIndex = 0;  		}  		else {  			listView1.Items [e.Item].ImageIndex = 1;  		}  	}  	tn.Tag = f;  }  else {  	listView1.Items [e.Item].Name = e.Label;  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: if (ye.IsFolder) {  	Folder f = (Folder)ye;  	TreeNode tn = treeView1.SelectedNode.Nodes.Find (listView1.Items [e.Item].Name' false) [0];  	listView1.Items [e.Item].Name = e.Label;  	tn.Name = e.Label;  	tn.Text = tn.Name;  	string Label = Cache.CheckCache (f.FullPath);  	if (Label != null) {  		tn.Text += " | " + Label;  		if (listView1.Items [e.Item].SubItems.Count == 0x4) {  			listView1.Items [e.Item].SubItems.Add (Label);  		}  		else {  			listView1.Items [e.Item].SubItems [4].Text = Label;  		}  	}  	if (f.IsTitleIDFolder) {  		if (Properties.Settings.Default.loadTIDNames) {  			if (Cache.CheckCache (f.Name) != null) {  				tn.Text += " | " + Cache.CheckCache (f.Name);  				if (listView1.Items [e.Item].SubItems.Count == 0x4) {  					listView1.Items [e.Item].SubItems.Add (tn.GameName ());  				}  				else {  					listView1.Items [e.Item].SubItems [4].Text = tn.GameName ();  				}  			}  			// Didn't find it' need to grab that shit  			else if (!f.IsKnownFolder) {  				if (f.GameName () != null && f.GameName () != "") {  					if (!f.IsKnownFolder) {  						Cache.AddID (f.Name' f.GameName ());  					}  					tn.Text += " | " + f.GameName ();  					listView1.Items [e.Item].SubItems [4].Text = f.GameName ();  				}  			}  		}  		if (Properties.Settings.Default.SaveIcons) {  			// Getting the icon  			if (!f.IsKnownFolder || f.Name.ToLower () == "FFFE07D1".ToLower ()) {  				if (!siL.Images.Keys.Contains (f.Name.ToUpper ())) {  					// Check the cache for the icon  					if (Cache.GetIcon (f.Name) != null) {  						treeView1.Invoke ((MethodInvoker)delegate {  							siL.Images.Add (f.Name.ToUpper ()' Cache.GetIcon (f.Name));  							liL.Images.Add (f.Name.ToUpper ()' Cache.GetIcon (f.Name));  							tn.ImageKey = f.Name.ToUpper ();  							tn.SelectedImageKey = tn.ImageKey;  							listView1.Items [e.Item].ImageKey = tn.ImageKey;  						});  					}  					else {  						if (f.GameIcon () != null) {  							Cache.AddIcon (f.GameIcon ()' f.Name);  							treeView1.Invoke ((MethodInvoker)delegate {  								siL.Images.Add (f.Name.ToUpper ()' f.GameIcon ());  								liL.Images.Add (f.Name.ToUpper ()' f.GameIcon ());  								//treeView1.ImageList = SmallListForFATX;  								//listView1.SmallImageList = SmallListForFATX;  								//listView1.LargeImageList = LargeListForFATX;  								tn.ImageKey = f.Name.ToUpper ();  								tn.SelectedImageKey = tn.ImageKey;  								listView1.Items [e.Item].ImageKey = tn.ImageKey;  							});  						}  					}  				}  				else {  					tn.ImageKey = f.Name.ToUpper ();  					tn.SelectedImageKey = tn.ImageKey;  					listView1.Items [e.Item].ImageKey = tn.ImageKey;  				}  			}  		}  	}  	else {  		if (listView1.Items [e.Item].SubItems.Count == 5) {  			listView1.Items [e.Item].SubItems [4].Text = "";  		}  		tn.ImageKey = "";  		tn.SelectedImageKey = "";  		if (ye.IsFolder) {  			listView1.Items [e.Item].ImageIndex = 0;  		}  		else {  			listView1.Items [e.Item].ImageIndex = 1;  		}  	}  	tn.Tag = f;  }  else {  	listView1.Items [e.Item].Name = e.Label;  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: if (Label != null) {  	tn.Text += " | " + Label;  	if (listView1.Items [e.Item].SubItems.Count == 0x4) {  		listView1.Items [e.Item].SubItems.Add (Label);  	}  	else {  		listView1.Items [e.Item].SubItems [4].Text = Label;  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: if (listView1.Items [e.Item].SubItems.Count == 0x4) {  	listView1.Items [e.Item].SubItems.Add (Label);  }  else {  	listView1.Items [e.Item].SubItems [4].Text = Label;  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: listView1.Items [e.Item].SubItems [4].Text = Label;  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: if (f.IsTitleIDFolder) {  	if (Properties.Settings.Default.loadTIDNames) {  		if (Cache.CheckCache (f.Name) != null) {  			tn.Text += " | " + Cache.CheckCache (f.Name);  			if (listView1.Items [e.Item].SubItems.Count == 0x4) {  				listView1.Items [e.Item].SubItems.Add (tn.GameName ());  			}  			else {  				listView1.Items [e.Item].SubItems [4].Text = tn.GameName ();  			}  		}  		// Didn't find it' need to grab that shit  		else if (!f.IsKnownFolder) {  			if (f.GameName () != null && f.GameName () != "") {  				if (!f.IsKnownFolder) {  					Cache.AddID (f.Name' f.GameName ());  				}  				tn.Text += " | " + f.GameName ();  				listView1.Items [e.Item].SubItems [4].Text = f.GameName ();  			}  		}  	}  	if (Properties.Settings.Default.SaveIcons) {  		// Getting the icon  		if (!f.IsKnownFolder || f.Name.ToLower () == "FFFE07D1".ToLower ()) {  			if (!siL.Images.Keys.Contains (f.Name.ToUpper ())) {  				// Check the cache for the icon  				if (Cache.GetIcon (f.Name) != null) {  					treeView1.Invoke ((MethodInvoker)delegate {  						siL.Images.Add (f.Name.ToUpper ()' Cache.GetIcon (f.Name));  						liL.Images.Add (f.Name.ToUpper ()' Cache.GetIcon (f.Name));  						tn.ImageKey = f.Name.ToUpper ();  						tn.SelectedImageKey = tn.ImageKey;  						listView1.Items [e.Item].ImageKey = tn.ImageKey;  					});  				}  				else {  					if (f.GameIcon () != null) {  						Cache.AddIcon (f.GameIcon ()' f.Name);  						treeView1.Invoke ((MethodInvoker)delegate {  							siL.Images.Add (f.Name.ToUpper ()' f.GameIcon ());  							liL.Images.Add (f.Name.ToUpper ()' f.GameIcon ());  							//treeView1.ImageList = SmallListForFATX;  							//listView1.SmallImageList = SmallListForFATX;  							//listView1.LargeImageList = LargeListForFATX;  							tn.ImageKey = f.Name.ToUpper ();  							tn.SelectedImageKey = tn.ImageKey;  							listView1.Items [e.Item].ImageKey = tn.ImageKey;  						});  					}  				}  			}  			else {  				tn.ImageKey = f.Name.ToUpper ();  				tn.SelectedImageKey = tn.ImageKey;  				listView1.Items [e.Item].ImageKey = tn.ImageKey;  			}  		}  	}  }  else {  	if (listView1.Items [e.Item].SubItems.Count == 5) {  		listView1.Items [e.Item].SubItems [4].Text = "";  	}  	tn.ImageKey = "";  	tn.SelectedImageKey = "";  	if (ye.IsFolder) {  		listView1.Items [e.Item].ImageIndex = 0;  	}  	else {  		listView1.Items [e.Item].ImageIndex = 1;  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: if (f.IsTitleIDFolder) {  	if (Properties.Settings.Default.loadTIDNames) {  		if (Cache.CheckCache (f.Name) != null) {  			tn.Text += " | " + Cache.CheckCache (f.Name);  			if (listView1.Items [e.Item].SubItems.Count == 0x4) {  				listView1.Items [e.Item].SubItems.Add (tn.GameName ());  			}  			else {  				listView1.Items [e.Item].SubItems [4].Text = tn.GameName ();  			}  		}  		// Didn't find it' need to grab that shit  		else if (!f.IsKnownFolder) {  			if (f.GameName () != null && f.GameName () != "") {  				if (!f.IsKnownFolder) {  					Cache.AddID (f.Name' f.GameName ());  				}  				tn.Text += " | " + f.GameName ();  				listView1.Items [e.Item].SubItems [4].Text = f.GameName ();  			}  		}  	}  	if (Properties.Settings.Default.SaveIcons) {  		// Getting the icon  		if (!f.IsKnownFolder || f.Name.ToLower () == "FFFE07D1".ToLower ()) {  			if (!siL.Images.Keys.Contains (f.Name.ToUpper ())) {  				// Check the cache for the icon  				if (Cache.GetIcon (f.Name) != null) {  					treeView1.Invoke ((MethodInvoker)delegate {  						siL.Images.Add (f.Name.ToUpper ()' Cache.GetIcon (f.Name));  						liL.Images.Add (f.Name.ToUpper ()' Cache.GetIcon (f.Name));  						tn.ImageKey = f.Name.ToUpper ();  						tn.SelectedImageKey = tn.ImageKey;  						listView1.Items [e.Item].ImageKey = tn.ImageKey;  					});  				}  				else {  					if (f.GameIcon () != null) {  						Cache.AddIcon (f.GameIcon ()' f.Name);  						treeView1.Invoke ((MethodInvoker)delegate {  							siL.Images.Add (f.Name.ToUpper ()' f.GameIcon ());  							liL.Images.Add (f.Name.ToUpper ()' f.GameIcon ());  							//treeView1.ImageList = SmallListForFATX;  							//listView1.SmallImageList = SmallListForFATX;  							//listView1.LargeImageList = LargeListForFATX;  							tn.ImageKey = f.Name.ToUpper ();  							tn.SelectedImageKey = tn.ImageKey;  							listView1.Items [e.Item].ImageKey = tn.ImageKey;  						});  					}  				}  			}  			else {  				tn.ImageKey = f.Name.ToUpper ();  				tn.SelectedImageKey = tn.ImageKey;  				listView1.Items [e.Item].ImageKey = tn.ImageKey;  			}  		}  	}  }  else {  	if (listView1.Items [e.Item].SubItems.Count == 5) {  		listView1.Items [e.Item].SubItems [4].Text = "";  	}  	tn.ImageKey = "";  	tn.SelectedImageKey = "";  	if (ye.IsFolder) {  		listView1.Items [e.Item].ImageIndex = 0;  	}  	else {  		listView1.Items [e.Item].ImageIndex = 1;  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: if (f.IsTitleIDFolder) {  	if (Properties.Settings.Default.loadTIDNames) {  		if (Cache.CheckCache (f.Name) != null) {  			tn.Text += " | " + Cache.CheckCache (f.Name);  			if (listView1.Items [e.Item].SubItems.Count == 0x4) {  				listView1.Items [e.Item].SubItems.Add (tn.GameName ());  			}  			else {  				listView1.Items [e.Item].SubItems [4].Text = tn.GameName ();  			}  		}  		// Didn't find it' need to grab that shit  		else if (!f.IsKnownFolder) {  			if (f.GameName () != null && f.GameName () != "") {  				if (!f.IsKnownFolder) {  					Cache.AddID (f.Name' f.GameName ());  				}  				tn.Text += " | " + f.GameName ();  				listView1.Items [e.Item].SubItems [4].Text = f.GameName ();  			}  		}  	}  	if (Properties.Settings.Default.SaveIcons) {  		// Getting the icon  		if (!f.IsKnownFolder || f.Name.ToLower () == "FFFE07D1".ToLower ()) {  			if (!siL.Images.Keys.Contains (f.Name.ToUpper ())) {  				// Check the cache for the icon  				if (Cache.GetIcon (f.Name) != null) {  					treeView1.Invoke ((MethodInvoker)delegate {  						siL.Images.Add (f.Name.ToUpper ()' Cache.GetIcon (f.Name));  						liL.Images.Add (f.Name.ToUpper ()' Cache.GetIcon (f.Name));  						tn.ImageKey = f.Name.ToUpper ();  						tn.SelectedImageKey = tn.ImageKey;  						listView1.Items [e.Item].ImageKey = tn.ImageKey;  					});  				}  				else {  					if (f.GameIcon () != null) {  						Cache.AddIcon (f.GameIcon ()' f.Name);  						treeView1.Invoke ((MethodInvoker)delegate {  							siL.Images.Add (f.Name.ToUpper ()' f.GameIcon ());  							liL.Images.Add (f.Name.ToUpper ()' f.GameIcon ());  							//treeView1.ImageList = SmallListForFATX;  							//listView1.SmallImageList = SmallListForFATX;  							//listView1.LargeImageList = LargeListForFATX;  							tn.ImageKey = f.Name.ToUpper ();  							tn.SelectedImageKey = tn.ImageKey;  							listView1.Items [e.Item].ImageKey = tn.ImageKey;  						});  					}  				}  			}  			else {  				tn.ImageKey = f.Name.ToUpper ();  				tn.SelectedImageKey = tn.ImageKey;  				listView1.Items [e.Item].ImageKey = tn.ImageKey;  			}  		}  	}  }  else {  	if (listView1.Items [e.Item].SubItems.Count == 5) {  		listView1.Items [e.Item].SubItems [4].Text = "";  	}  	tn.ImageKey = "";  	tn.SelectedImageKey = "";  	if (ye.IsFolder) {  		listView1.Items [e.Item].ImageIndex = 0;  	}  	else {  		listView1.Items [e.Item].ImageIndex = 1;  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: if (f.IsTitleIDFolder) {  	if (Properties.Settings.Default.loadTIDNames) {  		if (Cache.CheckCache (f.Name) != null) {  			tn.Text += " | " + Cache.CheckCache (f.Name);  			if (listView1.Items [e.Item].SubItems.Count == 0x4) {  				listView1.Items [e.Item].SubItems.Add (tn.GameName ());  			}  			else {  				listView1.Items [e.Item].SubItems [4].Text = tn.GameName ();  			}  		}  		// Didn't find it' need to grab that shit  		else if (!f.IsKnownFolder) {  			if (f.GameName () != null && f.GameName () != "") {  				if (!f.IsKnownFolder) {  					Cache.AddID (f.Name' f.GameName ());  				}  				tn.Text += " | " + f.GameName ();  				listView1.Items [e.Item].SubItems [4].Text = f.GameName ();  			}  		}  	}  	if (Properties.Settings.Default.SaveIcons) {  		// Getting the icon  		if (!f.IsKnownFolder || f.Name.ToLower () == "FFFE07D1".ToLower ()) {  			if (!siL.Images.Keys.Contains (f.Name.ToUpper ())) {  				// Check the cache for the icon  				if (Cache.GetIcon (f.Name) != null) {  					treeView1.Invoke ((MethodInvoker)delegate {  						siL.Images.Add (f.Name.ToUpper ()' Cache.GetIcon (f.Name));  						liL.Images.Add (f.Name.ToUpper ()' Cache.GetIcon (f.Name));  						tn.ImageKey = f.Name.ToUpper ();  						tn.SelectedImageKey = tn.ImageKey;  						listView1.Items [e.Item].ImageKey = tn.ImageKey;  					});  				}  				else {  					if (f.GameIcon () != null) {  						Cache.AddIcon (f.GameIcon ()' f.Name);  						treeView1.Invoke ((MethodInvoker)delegate {  							siL.Images.Add (f.Name.ToUpper ()' f.GameIcon ());  							liL.Images.Add (f.Name.ToUpper ()' f.GameIcon ());  							//treeView1.ImageList = SmallListForFATX;  							//listView1.SmallImageList = SmallListForFATX;  							//listView1.LargeImageList = LargeListForFATX;  							tn.ImageKey = f.Name.ToUpper ();  							tn.SelectedImageKey = tn.ImageKey;  							listView1.Items [e.Item].ImageKey = tn.ImageKey;  						});  					}  				}  			}  			else {  				tn.ImageKey = f.Name.ToUpper ();  				tn.SelectedImageKey = tn.ImageKey;  				listView1.Items [e.Item].ImageKey = tn.ImageKey;  			}  		}  	}  }  else {  	if (listView1.Items [e.Item].SubItems.Count == 5) {  		listView1.Items [e.Item].SubItems [4].Text = "";  	}  	tn.ImageKey = "";  	tn.SelectedImageKey = "";  	if (ye.IsFolder) {  		listView1.Items [e.Item].ImageIndex = 0;  	}  	else {  		listView1.Items [e.Item].ImageIndex = 1;  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: if (Properties.Settings.Default.loadTIDNames) {  	if (Cache.CheckCache (f.Name) != null) {  		tn.Text += " | " + Cache.CheckCache (f.Name);  		if (listView1.Items [e.Item].SubItems.Count == 0x4) {  			listView1.Items [e.Item].SubItems.Add (tn.GameName ());  		}  		else {  			listView1.Items [e.Item].SubItems [4].Text = tn.GameName ();  		}  	}  	// Didn't find it' need to grab that shit  	else if (!f.IsKnownFolder) {  		if (f.GameName () != null && f.GameName () != "") {  			if (!f.IsKnownFolder) {  				Cache.AddID (f.Name' f.GameName ());  			}  			tn.Text += " | " + f.GameName ();  			listView1.Items [e.Item].SubItems [4].Text = f.GameName ();  		}  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: if (Properties.Settings.Default.loadTIDNames) {  	if (Cache.CheckCache (f.Name) != null) {  		tn.Text += " | " + Cache.CheckCache (f.Name);  		if (listView1.Items [e.Item].SubItems.Count == 0x4) {  			listView1.Items [e.Item].SubItems.Add (tn.GameName ());  		}  		else {  			listView1.Items [e.Item].SubItems [4].Text = tn.GameName ();  		}  	}  	// Didn't find it' need to grab that shit  	else if (!f.IsKnownFolder) {  		if (f.GameName () != null && f.GameName () != "") {  			if (!f.IsKnownFolder) {  				Cache.AddID (f.Name' f.GameName ());  			}  			tn.Text += " | " + f.GameName ();  			listView1.Items [e.Item].SubItems [4].Text = f.GameName ();  		}  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: if (Cache.CheckCache (f.Name) != null) {  	tn.Text += " | " + Cache.CheckCache (f.Name);  	if (listView1.Items [e.Item].SubItems.Count == 0x4) {  		listView1.Items [e.Item].SubItems.Add (tn.GameName ());  	}  	else {  		listView1.Items [e.Item].SubItems [4].Text = tn.GameName ();  	}  }  // Didn't find it' need to grab that shit  else if (!f.IsKnownFolder) {  	if (f.GameName () != null && f.GameName () != "") {  		if (!f.IsKnownFolder) {  			Cache.AddID (f.Name' f.GameName ());  		}  		tn.Text += " | " + f.GameName ();  		listView1.Items [e.Item].SubItems [4].Text = f.GameName ();  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: if (Cache.CheckCache (f.Name) != null) {  	tn.Text += " | " + Cache.CheckCache (f.Name);  	if (listView1.Items [e.Item].SubItems.Count == 0x4) {  		listView1.Items [e.Item].SubItems.Add (tn.GameName ());  	}  	else {  		listView1.Items [e.Item].SubItems [4].Text = tn.GameName ();  	}  }  // Didn't find it' need to grab that shit  else if (!f.IsKnownFolder) {  	if (f.GameName () != null && f.GameName () != "") {  		if (!f.IsKnownFolder) {  			Cache.AddID (f.Name' f.GameName ());  		}  		tn.Text += " | " + f.GameName ();  		listView1.Items [e.Item].SubItems [4].Text = f.GameName ();  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: if (listView1.Items [e.Item].SubItems.Count == 0x4) {  	listView1.Items [e.Item].SubItems.Add (tn.GameName ());  }  else {  	listView1.Items [e.Item].SubItems [4].Text = tn.GameName ();  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: listView1.Items [e.Item].SubItems [4].Text = tn.GameName ();  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: if (!f.IsKnownFolder) {  	if (f.GameName () != null && f.GameName () != "") {  		if (!f.IsKnownFolder) {  			Cache.AddID (f.Name' f.GameName ());  		}  		tn.Text += " | " + f.GameName ();  		listView1.Items [e.Item].SubItems [4].Text = f.GameName ();  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: if (f.GameName () != null && f.GameName () != "") {  	if (!f.IsKnownFolder) {  		Cache.AddID (f.Name' f.GameName ());  	}  	tn.Text += " | " + f.GameName ();  	listView1.Items [e.Item].SubItems [4].Text = f.GameName ();  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: listView1.Items [e.Item].SubItems [4].Text = f.GameName ();  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: if (listView1.Items [e.Item].SubItems.Count == 5) {  	listView1.Items [e.Item].SubItems [4].Text = "";  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: if (listView1.Items [e.Item].SubItems.Count == 5) {  	listView1.Items [e.Item].SubItems [4].Text = "";  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,listView1_AfterLabelEdit,The following statement contains a magic number: listView1.Items [e.Item].SubItems [4].Text = "";  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_NewFolder_Click,The following statement contains a magic number: try {  	((Folder)rightClickedNode.Tag).CreateNewFolder (GetNewFolderName ((Folder)rightClickedNode.Tag));  }  catch (Exception x) {  	if (!Aero) {  		MessageBox.Show ("An exception was thrown: " + x.Message + "\r\n\r\nIf this appears to be a bug' press CTRL + C to copy the stack trace' then please email it to me at clkxu5@gmail.com:\r\n" + x.StackTrace);  	}  	else {  		TaskDialog td = new TaskDialog ();  		td.Caption = "Unhandled Exception";  		td.InstructionText = "An Unhandled Exception was Thrown";  		td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message);  		td.DetailsCollapsedLabel = "Details";  		td.DetailsExpandedLabel = "Details";  		td.DetailsExpandedText = x.StackTrace;  		TaskDialogButton Copy = new TaskDialogButton ("Copy"' "Copy Details to Clipboard");  		Copy.Click += (o' f) =>  {  			Clipboard.SetDataObject (x.Message + "\r\n\r\n" + x.StackTrace' true' 10' 200);  		};  		TaskDialogButton Close = new TaskDialogButton ("Close"' "Close");  		Close.Click += (o' f) =>  {  			td.Close ();  		};  		td.Controls.Add (Copy);  		td.Controls.Add (Close);  		td.ShowDialog (this.Handle);  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_NewFolder_Click,The following statement contains a magic number: try {  	((Folder)rightClickedNode.Tag).CreateNewFolder (GetNewFolderName ((Folder)rightClickedNode.Tag));  }  catch (Exception x) {  	if (!Aero) {  		MessageBox.Show ("An exception was thrown: " + x.Message + "\r\n\r\nIf this appears to be a bug' press CTRL + C to copy the stack trace' then please email it to me at clkxu5@gmail.com:\r\n" + x.StackTrace);  	}  	else {  		TaskDialog td = new TaskDialog ();  		td.Caption = "Unhandled Exception";  		td.InstructionText = "An Unhandled Exception was Thrown";  		td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message);  		td.DetailsCollapsedLabel = "Details";  		td.DetailsExpandedLabel = "Details";  		td.DetailsExpandedText = x.StackTrace;  		TaskDialogButton Copy = new TaskDialogButton ("Copy"' "Copy Details to Clipboard");  		Copy.Click += (o' f) =>  {  			Clipboard.SetDataObject (x.Message + "\r\n\r\n" + x.StackTrace' true' 10' 200);  		};  		TaskDialogButton Close = new TaskDialogButton ("Close"' "Close");  		Close.Click += (o' f) =>  {  			td.Close ();  		};  		td.Controls.Add (Copy);  		td.Controls.Add (Close);  		td.ShowDialog (this.Handle);  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_NewFolder_Click,The following statement contains a magic number: if (!Aero) {  	MessageBox.Show ("An exception was thrown: " + x.Message + "\r\n\r\nIf this appears to be a bug' press CTRL + C to copy the stack trace' then please email it to me at clkxu5@gmail.com:\r\n" + x.StackTrace);  }  else {  	TaskDialog td = new TaskDialog ();  	td.Caption = "Unhandled Exception";  	td.InstructionText = "An Unhandled Exception was Thrown";  	td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message);  	td.DetailsCollapsedLabel = "Details";  	td.DetailsExpandedLabel = "Details";  	td.DetailsExpandedText = x.StackTrace;  	TaskDialogButton Copy = new TaskDialogButton ("Copy"' "Copy Details to Clipboard");  	Copy.Click += (o' f) =>  {  		Clipboard.SetDataObject (x.Message + "\r\n\r\n" + x.StackTrace' true' 10' 200);  	};  	TaskDialogButton Close = new TaskDialogButton ("Close"' "Close");  	Close.Click += (o' f) =>  {  		td.Close ();  	};  	td.Controls.Add (Copy);  	td.Controls.Add (Close);  	td.ShowDialog (this.Handle);  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_NewFolder_Click,The following statement contains a magic number: if (!Aero) {  	MessageBox.Show ("An exception was thrown: " + x.Message + "\r\n\r\nIf this appears to be a bug' press CTRL + C to copy the stack trace' then please email it to me at clkxu5@gmail.com:\r\n" + x.StackTrace);  }  else {  	TaskDialog td = new TaskDialog ();  	td.Caption = "Unhandled Exception";  	td.InstructionText = "An Unhandled Exception was Thrown";  	td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message);  	td.DetailsCollapsedLabel = "Details";  	td.DetailsExpandedLabel = "Details";  	td.DetailsExpandedText = x.StackTrace;  	TaskDialogButton Copy = new TaskDialogButton ("Copy"' "Copy Details to Clipboard");  	Copy.Click += (o' f) =>  {  		Clipboard.SetDataObject (x.Message + "\r\n\r\n" + x.StackTrace' true' 10' 200);  	};  	TaskDialogButton Close = new TaskDialogButton ("Close"' "Close");  	Close.Click += (o' f) =>  {  		td.Close ();  	};  	td.Controls.Add (Copy);  	td.Controls.Add (Close);  	td.ShowDialog (this.Handle);  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_NewFolder_Click,The following statement contains a magic number: Copy.Click += (o' f) =>  {  	Clipboard.SetDataObject (x.Message + "\r\n\r\n" + x.StackTrace' true' 10' 200);  };  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_NewFolder_Click,The following statement contains a magic number: Copy.Click += (o' f) =>  {  	Clipboard.SetDataObject (x.Message + "\r\n\r\n" + x.StackTrace' true' 10' 200);  };  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_NewFolder_Click,The following statement contains a magic number: Clipboard.SetDataObject (x.Message + "\r\n\r\n" + x.StackTrace' true' 10' 200);  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_NewFolder_Click,The following statement contains a magic number: Clipboard.SetDataObject (x.Message + "\r\n\r\n" + x.StackTrace' true' 10' 200);  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_CopyPath_Click,The following statement contains a magic number: Clipboard.SetDataObject (rightClickedNode.RealPath ()' true' 10' 200);  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_CopyPath_Click,The following statement contains a magic number: Clipboard.SetDataObject (rightClickedNode.RealPath ()' true' 10' 200);  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,treeView1_AfterSelect,The following statement contains a magic number: if (treeView1.SelectedNode != null && treeView1.SelectedNode != treeView1.Nodes [0]) {  	foreach (MenuItem i in listview_ContextMenu.MenuItems) {  		i.Enabled = true;  	}  	listView1.Items.Clear ();  	/* --Folders-- */AddNodes (treeView1.SelectedNode' (Folder)treeView1.SelectedNode.Tag' false' true);  	treeView1.SelectedNode.Expand ();  	List<ListViewItem> lvi = new List<ListViewItem> ();  	/* --Files-- */File[] Files = ((Folder)treeView1.SelectedNode.Tag).Files ();  	for (int i = 0; i < Files.Length; i++) {  		ListViewItem li = new ListViewItem (Files [i].Name);  		li.SubItems.Add (Files [i].EntryType);  		li.SubItems.Add (VariousFunctions.ByteConversion (Files [i].Size));  		li.SubItems.Add (Files [i].ModifiedDate.ToString ());  		if (Properties.Settings.Default.loadSTFS) {  			if (Files [i].IsSTFSPackage ()) {  				li.SubItems.Add (Files [i].ContentName ());  			}  			else if (Files [i].Parent.FullPath == Files [i].Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (Files [i].Name.Substring (0' 2))) {  				for (int j = 0; j < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; j++) {  					if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [j] == Files [i].Name.Substring (0' 2)) {  						li.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [j]);  						break;  					}  				}  			}  		}  		li.Tag = Files [i];  		li.Name = Files [i].Name;  		if (Properties.Settings.Default.cacheContentIcons) {  			if (listView1.LargeImageList.Images.ContainsKey (Files [i].Name)) {  				li.ImageKey = Files [i].Name;  			}  			else {  				// Check if there's an icon for this guy cached  				if (Cache.GetIcon (Files [i].Name) != null) {  					Image Icon = Cache.GetIcon (Files [i].Name);  					treeView1.ImageList.Images.Add (Files [i].Name' Icon);  					listView1.LargeImageList.Images.Add (Files [i].Name' Icon);  					listView1.SmallImageList.Images.Add (Files [i].Name' Icon);  					li.ImageKey = Files [i].Name;  				}  				// Check if the file is an STFS package' and if it is blahblahblah  				else if (Files [i].IsSTFSPackage ()) {  					Image Icon = Files [i].ContentIcon ();  					if (Icon != null) {  						Cache.AddIcon (Icon' Files [i].Name);  						treeView1.ImageList.Images.Add (Files [i].Name' Icon);  						listView1.LargeImageList.Images.Add (Files [i].Name' Icon);  						listView1.SmallImageList.Images.Add (Files [i].Name' Icon);  						li.ImageKey = Files [i].Name;  					}  				}  			}  		}  		if (li.ImageKey == "") {  			li.ImageIndex = 1;  		}  		lvi.Add (li);  	}  	listView1.Items.AddRange (lvi.ToArray ());  	//MessageBox.Show(sw.Elapsed.Seconds + "\r\n" + sw.Elapsed.Milliseconds.ToString());  	//sw.Stop();  	CurrentPath = treeView1.SelectedNode.FullPath.Remove (0' treeView1.Nodes [0].Text.Length + 1);  	string[] split = CurrentPath.Split ('\\');  	CurrentPath = "";  	for (int i = 0; i < split.Length; i++) {  		if (split [i].Contains (" | ")) {  			split [i] = split [i].Remove (split [i].IndexOf (" | "));  		}  		CurrentPath += (i != split.Length - 1) ? split [i] + "\\" : split [i];  	}  	if (!DirectionButtonPressed) {  		try {  			if (CurrentPathIndex != BrowsedPaths.Count - 1) {  				BrowsedPaths.RemoveRange (CurrentPathIndex + 1' BrowsedPaths.Count - (CurrentPathIndex + 1));  			}  		}  		catch {  		}  	}  	pathBar.Text = CurrentPath;  	if (!DirectionButtonPressed) {  		BrowsedPaths.Add (CurrentPath);  		CurrentPathIndex = BrowsedPaths.Count - 1;  		b_Back.Enabled = true;  		b_Forward.Enabled = false;  	}  	DirectionButtonPressed = false;  }  else {  	foreach (MenuItem i in listview_ContextMenu.MenuItems) {  		i.Enabled = false;  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,treeView1_AfterSelect,The following statement contains a magic number: if (treeView1.SelectedNode != null && treeView1.SelectedNode != treeView1.Nodes [0]) {  	foreach (MenuItem i in listview_ContextMenu.MenuItems) {  		i.Enabled = true;  	}  	listView1.Items.Clear ();  	/* --Folders-- */AddNodes (treeView1.SelectedNode' (Folder)treeView1.SelectedNode.Tag' false' true);  	treeView1.SelectedNode.Expand ();  	List<ListViewItem> lvi = new List<ListViewItem> ();  	/* --Files-- */File[] Files = ((Folder)treeView1.SelectedNode.Tag).Files ();  	for (int i = 0; i < Files.Length; i++) {  		ListViewItem li = new ListViewItem (Files [i].Name);  		li.SubItems.Add (Files [i].EntryType);  		li.SubItems.Add (VariousFunctions.ByteConversion (Files [i].Size));  		li.SubItems.Add (Files [i].ModifiedDate.ToString ());  		if (Properties.Settings.Default.loadSTFS) {  			if (Files [i].IsSTFSPackage ()) {  				li.SubItems.Add (Files [i].ContentName ());  			}  			else if (Files [i].Parent.FullPath == Files [i].Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (Files [i].Name.Substring (0' 2))) {  				for (int j = 0; j < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; j++) {  					if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [j] == Files [i].Name.Substring (0' 2)) {  						li.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [j]);  						break;  					}  				}  			}  		}  		li.Tag = Files [i];  		li.Name = Files [i].Name;  		if (Properties.Settings.Default.cacheContentIcons) {  			if (listView1.LargeImageList.Images.ContainsKey (Files [i].Name)) {  				li.ImageKey = Files [i].Name;  			}  			else {  				// Check if there's an icon for this guy cached  				if (Cache.GetIcon (Files [i].Name) != null) {  					Image Icon = Cache.GetIcon (Files [i].Name);  					treeView1.ImageList.Images.Add (Files [i].Name' Icon);  					listView1.LargeImageList.Images.Add (Files [i].Name' Icon);  					listView1.SmallImageList.Images.Add (Files [i].Name' Icon);  					li.ImageKey = Files [i].Name;  				}  				// Check if the file is an STFS package' and if it is blahblahblah  				else if (Files [i].IsSTFSPackage ()) {  					Image Icon = Files [i].ContentIcon ();  					if (Icon != null) {  						Cache.AddIcon (Icon' Files [i].Name);  						treeView1.ImageList.Images.Add (Files [i].Name' Icon);  						listView1.LargeImageList.Images.Add (Files [i].Name' Icon);  						listView1.SmallImageList.Images.Add (Files [i].Name' Icon);  						li.ImageKey = Files [i].Name;  					}  				}  			}  		}  		if (li.ImageKey == "") {  			li.ImageIndex = 1;  		}  		lvi.Add (li);  	}  	listView1.Items.AddRange (lvi.ToArray ());  	//MessageBox.Show(sw.Elapsed.Seconds + "\r\n" + sw.Elapsed.Milliseconds.ToString());  	//sw.Stop();  	CurrentPath = treeView1.SelectedNode.FullPath.Remove (0' treeView1.Nodes [0].Text.Length + 1);  	string[] split = CurrentPath.Split ('\\');  	CurrentPath = "";  	for (int i = 0; i < split.Length; i++) {  		if (split [i].Contains (" | ")) {  			split [i] = split [i].Remove (split [i].IndexOf (" | "));  		}  		CurrentPath += (i != split.Length - 1) ? split [i] + "\\" : split [i];  	}  	if (!DirectionButtonPressed) {  		try {  			if (CurrentPathIndex != BrowsedPaths.Count - 1) {  				BrowsedPaths.RemoveRange (CurrentPathIndex + 1' BrowsedPaths.Count - (CurrentPathIndex + 1));  			}  		}  		catch {  		}  	}  	pathBar.Text = CurrentPath;  	if (!DirectionButtonPressed) {  		BrowsedPaths.Add (CurrentPath);  		CurrentPathIndex = BrowsedPaths.Count - 1;  		b_Back.Enabled = true;  		b_Forward.Enabled = false;  	}  	DirectionButtonPressed = false;  }  else {  	foreach (MenuItem i in listview_ContextMenu.MenuItems) {  		i.Enabled = false;  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,treeView1_AfterSelect,The following statement contains a magic number: for (int i = 0; i < Files.Length; i++) {  	ListViewItem li = new ListViewItem (Files [i].Name);  	li.SubItems.Add (Files [i].EntryType);  	li.SubItems.Add (VariousFunctions.ByteConversion (Files [i].Size));  	li.SubItems.Add (Files [i].ModifiedDate.ToString ());  	if (Properties.Settings.Default.loadSTFS) {  		if (Files [i].IsSTFSPackage ()) {  			li.SubItems.Add (Files [i].ContentName ());  		}  		else if (Files [i].Parent.FullPath == Files [i].Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (Files [i].Name.Substring (0' 2))) {  			for (int j = 0; j < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; j++) {  				if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [j] == Files [i].Name.Substring (0' 2)) {  					li.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [j]);  					break;  				}  			}  		}  	}  	li.Tag = Files [i];  	li.Name = Files [i].Name;  	if (Properties.Settings.Default.cacheContentIcons) {  		if (listView1.LargeImageList.Images.ContainsKey (Files [i].Name)) {  			li.ImageKey = Files [i].Name;  		}  		else {  			// Check if there's an icon for this guy cached  			if (Cache.GetIcon (Files [i].Name) != null) {  				Image Icon = Cache.GetIcon (Files [i].Name);  				treeView1.ImageList.Images.Add (Files [i].Name' Icon);  				listView1.LargeImageList.Images.Add (Files [i].Name' Icon);  				listView1.SmallImageList.Images.Add (Files [i].Name' Icon);  				li.ImageKey = Files [i].Name;  			}  			// Check if the file is an STFS package' and if it is blahblahblah  			else if (Files [i].IsSTFSPackage ()) {  				Image Icon = Files [i].ContentIcon ();  				if (Icon != null) {  					Cache.AddIcon (Icon' Files [i].Name);  					treeView1.ImageList.Images.Add (Files [i].Name' Icon);  					listView1.LargeImageList.Images.Add (Files [i].Name' Icon);  					listView1.SmallImageList.Images.Add (Files [i].Name' Icon);  					li.ImageKey = Files [i].Name;  				}  			}  		}  	}  	if (li.ImageKey == "") {  		li.ImageIndex = 1;  	}  	lvi.Add (li);  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,treeView1_AfterSelect,The following statement contains a magic number: for (int i = 0; i < Files.Length; i++) {  	ListViewItem li = new ListViewItem (Files [i].Name);  	li.SubItems.Add (Files [i].EntryType);  	li.SubItems.Add (VariousFunctions.ByteConversion (Files [i].Size));  	li.SubItems.Add (Files [i].ModifiedDate.ToString ());  	if (Properties.Settings.Default.loadSTFS) {  		if (Files [i].IsSTFSPackage ()) {  			li.SubItems.Add (Files [i].ContentName ());  		}  		else if (Files [i].Parent.FullPath == Files [i].Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (Files [i].Name.Substring (0' 2))) {  			for (int j = 0; j < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; j++) {  				if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [j] == Files [i].Name.Substring (0' 2)) {  					li.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [j]);  					break;  				}  			}  		}  	}  	li.Tag = Files [i];  	li.Name = Files [i].Name;  	if (Properties.Settings.Default.cacheContentIcons) {  		if (listView1.LargeImageList.Images.ContainsKey (Files [i].Name)) {  			li.ImageKey = Files [i].Name;  		}  		else {  			// Check if there's an icon for this guy cached  			if (Cache.GetIcon (Files [i].Name) != null) {  				Image Icon = Cache.GetIcon (Files [i].Name);  				treeView1.ImageList.Images.Add (Files [i].Name' Icon);  				listView1.LargeImageList.Images.Add (Files [i].Name' Icon);  				listView1.SmallImageList.Images.Add (Files [i].Name' Icon);  				li.ImageKey = Files [i].Name;  			}  			// Check if the file is an STFS package' and if it is blahblahblah  			else if (Files [i].IsSTFSPackage ()) {  				Image Icon = Files [i].ContentIcon ();  				if (Icon != null) {  					Cache.AddIcon (Icon' Files [i].Name);  					treeView1.ImageList.Images.Add (Files [i].Name' Icon);  					listView1.LargeImageList.Images.Add (Files [i].Name' Icon);  					listView1.SmallImageList.Images.Add (Files [i].Name' Icon);  					li.ImageKey = Files [i].Name;  				}  			}  		}  	}  	if (li.ImageKey == "") {  		li.ImageIndex = 1;  	}  	lvi.Add (li);  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,treeView1_AfterSelect,The following statement contains a magic number: if (Properties.Settings.Default.loadSTFS) {  	if (Files [i].IsSTFSPackage ()) {  		li.SubItems.Add (Files [i].ContentName ());  	}  	else if (Files [i].Parent.FullPath == Files [i].Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (Files [i].Name.Substring (0' 2))) {  		for (int j = 0; j < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; j++) {  			if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [j] == Files [i].Name.Substring (0' 2)) {  				li.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [j]);  				break;  			}  		}  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,treeView1_AfterSelect,The following statement contains a magic number: if (Properties.Settings.Default.loadSTFS) {  	if (Files [i].IsSTFSPackage ()) {  		li.SubItems.Add (Files [i].ContentName ());  	}  	else if (Files [i].Parent.FullPath == Files [i].Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (Files [i].Name.Substring (0' 2))) {  		for (int j = 0; j < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; j++) {  			if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [j] == Files [i].Name.Substring (0' 2)) {  				li.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [j]);  				break;  			}  		}  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,treeView1_AfterSelect,The following statement contains a magic number: if (Files [i].IsSTFSPackage ()) {  	li.SubItems.Add (Files [i].ContentName ());  }  else if (Files [i].Parent.FullPath == Files [i].Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (Files [i].Name.Substring (0' 2))) {  	for (int j = 0; j < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; j++) {  		if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [j] == Files [i].Name.Substring (0' 2)) {  			li.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [j]);  			break;  		}  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,treeView1_AfterSelect,The following statement contains a magic number: if (Files [i].IsSTFSPackage ()) {  	li.SubItems.Add (Files [i].ContentName ());  }  else if (Files [i].Parent.FullPath == Files [i].Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (Files [i].Name.Substring (0' 2))) {  	for (int j = 0; j < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; j++) {  		if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [j] == Files [i].Name.Substring (0' 2)) {  			li.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [j]);  			break;  		}  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,treeView1_AfterSelect,The following statement contains a magic number: if (Files [i].Parent.FullPath == Files [i].Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (Files [i].Name.Substring (0' 2))) {  	for (int j = 0; j < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; j++) {  		if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [j] == Files [i].Name.Substring (0' 2)) {  			li.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [j]);  			break;  		}  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,treeView1_AfterSelect,The following statement contains a magic number: if (Files [i].Parent.FullPath == Files [i].Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (Files [i].Name.Substring (0' 2))) {  	for (int j = 0; j < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; j++) {  		if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [j] == Files [i].Name.Substring (0' 2)) {  			li.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [j]);  			break;  		}  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,treeView1_AfterSelect,The following statement contains a magic number: for (int j = 0; j < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; j++) {  	if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [j] == Files [i].Name.Substring (0' 2)) {  		li.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [j]);  		break;  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,treeView1_AfterSelect,The following statement contains a magic number: if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [j] == Files [i].Name.Substring (0' 2)) {  	li.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [j]);  	break;  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Clear,The following statement contains a magic number: treeView1.Nodes [0].ImageIndex = 2;  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Clear,The following statement contains a magic number: treeView1.Nodes [0].ImageIndex = 2;  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Clear,The following statement contains a magic number: treeView1.Nodes [0].SelectedImageIndex = 2;  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,LoadDrive,The following statement contains a magic number: if (Drive != null) {  	foreach (MenuItem i in listview_ContextMenu.MenuItems) {  		i.Enabled = true;  	}  	Drive d = Drive;  	Clear ();  	System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch ();  	sw.Start ();  	d.Open ();  	ts_Close.Enabled = true;  	m_CloseDrive.Enabled = true;  	switch (d.DriveType) {  	case DriveType.HardDisk:  		treeView1.Nodes [0].ImageIndex = 3;  		treeView1.Nodes [0].SelectedImageIndex = treeView1.Nodes [0].ImageIndex;  		break;  	case DriveType.USB:  		treeView1.Nodes [0].ImageIndex = 4;  		treeView1.Nodes [0].SelectedImageIndex = treeView1.Nodes [0].ImageIndex;  		break;  	case DriveType.Backup:  		treeView1.Nodes [0].ImageIndex = 5;  		treeView1.Nodes [0].SelectedImageIndex = treeView1.Nodes [0].ImageIndex;  		break;  	}  	treeView1.Nodes [0].Text = d.Name;  	m_drive.Enabled = true;  	m_Search.Enabled = true;  	m_Bookmarks.Enabled = true;  	Drive = d;  	Drive.EntryWatcher += new CLKsFATXLib.Structs.OnEntryEvent (Main_OnEntryEvent);  	// Grab the cached title names from the drive  	foreach (CLKsFATXLib.Structs.CachedTitleName ctn in Drive.CachedTitleNames ()) {  		string Result = Cache.CheckCache (ctn.ID.ToString ("X"));  		if (Result == null) {  			Cache.AddID (ctn.ID.ToString ("X")' ctn.Name);  		}  		// If we have this one cached but it doesn't equal  		// what it should be  		else if (Result != ctn.Name) {  			for (int i = 0; i < Properties.Settings.Default.cachedID.Count; i++) {  				if (Properties.Settings.Default.cachedID [i].ToLower () == ctn.ID.ToString ("X").ToLower ()) {  					Properties.Settings.Default.cachedID.RemoveAt (i);  					Properties.Settings.Default.correspondingIDName.RemoveAt (i);  					Properties.Settings.Default.Save ();  					Cache.AddID (ctn.ID.ToString ("X")' ctn.Name);  				}  			}  		}  	}  	for (int i = 0; i < Drive.Partitions.Length; i++) {  		TreeNode tn = new TreeNode (Drive.Partitions [i].Name);  		tn.Tag = Drive.Partitions [i];  		tn.Name = tn.Text;  		//((Folder)tn.Tag).EntryEvent += new CLKsFATXLib.Structs.OnEntryEvent(Main_OnEntryEvent);  		((Folder)tn.Tag).ReturnDeletedEntries = m_DeletionMode.Checked;  		if (Properties.Settings.Default.loadEntireDrive) {  			AddNodes (tn' Drive.Partitions [i]' true' false);  		}  		treeView1.Nodes [0].Nodes.Add (tn);  		Console.WriteLine (Drive.Partitions [i].Name + ": " + Drive.PartitionTimeStamp (Drive.Partitions [i].PartitionInfo));  	}  	treeView1.Nodes [0].Expand ();  	sw.Stop ();  	l_selectedItems.Text = d.Name + " loaded in " + sw.Elapsed.ToString ();  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,LoadDrive,The following statement contains a magic number: if (Drive != null) {  	foreach (MenuItem i in listview_ContextMenu.MenuItems) {  		i.Enabled = true;  	}  	Drive d = Drive;  	Clear ();  	System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch ();  	sw.Start ();  	d.Open ();  	ts_Close.Enabled = true;  	m_CloseDrive.Enabled = true;  	switch (d.DriveType) {  	case DriveType.HardDisk:  		treeView1.Nodes [0].ImageIndex = 3;  		treeView1.Nodes [0].SelectedImageIndex = treeView1.Nodes [0].ImageIndex;  		break;  	case DriveType.USB:  		treeView1.Nodes [0].ImageIndex = 4;  		treeView1.Nodes [0].SelectedImageIndex = treeView1.Nodes [0].ImageIndex;  		break;  	case DriveType.Backup:  		treeView1.Nodes [0].ImageIndex = 5;  		treeView1.Nodes [0].SelectedImageIndex = treeView1.Nodes [0].ImageIndex;  		break;  	}  	treeView1.Nodes [0].Text = d.Name;  	m_drive.Enabled = true;  	m_Search.Enabled = true;  	m_Bookmarks.Enabled = true;  	Drive = d;  	Drive.EntryWatcher += new CLKsFATXLib.Structs.OnEntryEvent (Main_OnEntryEvent);  	// Grab the cached title names from the drive  	foreach (CLKsFATXLib.Structs.CachedTitleName ctn in Drive.CachedTitleNames ()) {  		string Result = Cache.CheckCache (ctn.ID.ToString ("X"));  		if (Result == null) {  			Cache.AddID (ctn.ID.ToString ("X")' ctn.Name);  		}  		// If we have this one cached but it doesn't equal  		// what it should be  		else if (Result != ctn.Name) {  			for (int i = 0; i < Properties.Settings.Default.cachedID.Count; i++) {  				if (Properties.Settings.Default.cachedID [i].ToLower () == ctn.ID.ToString ("X").ToLower ()) {  					Properties.Settings.Default.cachedID.RemoveAt (i);  					Properties.Settings.Default.correspondingIDName.RemoveAt (i);  					Properties.Settings.Default.Save ();  					Cache.AddID (ctn.ID.ToString ("X")' ctn.Name);  				}  			}  		}  	}  	for (int i = 0; i < Drive.Partitions.Length; i++) {  		TreeNode tn = new TreeNode (Drive.Partitions [i].Name);  		tn.Tag = Drive.Partitions [i];  		tn.Name = tn.Text;  		//((Folder)tn.Tag).EntryEvent += new CLKsFATXLib.Structs.OnEntryEvent(Main_OnEntryEvent);  		((Folder)tn.Tag).ReturnDeletedEntries = m_DeletionMode.Checked;  		if (Properties.Settings.Default.loadEntireDrive) {  			AddNodes (tn' Drive.Partitions [i]' true' false);  		}  		treeView1.Nodes [0].Nodes.Add (tn);  		Console.WriteLine (Drive.Partitions [i].Name + ": " + Drive.PartitionTimeStamp (Drive.Partitions [i].PartitionInfo));  	}  	treeView1.Nodes [0].Expand ();  	sw.Stop ();  	l_selectedItems.Text = d.Name + " loaded in " + sw.Elapsed.ToString ();  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,LoadDrive,The following statement contains a magic number: if (Drive != null) {  	foreach (MenuItem i in listview_ContextMenu.MenuItems) {  		i.Enabled = true;  	}  	Drive d = Drive;  	Clear ();  	System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch ();  	sw.Start ();  	d.Open ();  	ts_Close.Enabled = true;  	m_CloseDrive.Enabled = true;  	switch (d.DriveType) {  	case DriveType.HardDisk:  		treeView1.Nodes [0].ImageIndex = 3;  		treeView1.Nodes [0].SelectedImageIndex = treeView1.Nodes [0].ImageIndex;  		break;  	case DriveType.USB:  		treeView1.Nodes [0].ImageIndex = 4;  		treeView1.Nodes [0].SelectedImageIndex = treeView1.Nodes [0].ImageIndex;  		break;  	case DriveType.Backup:  		treeView1.Nodes [0].ImageIndex = 5;  		treeView1.Nodes [0].SelectedImageIndex = treeView1.Nodes [0].ImageIndex;  		break;  	}  	treeView1.Nodes [0].Text = d.Name;  	m_drive.Enabled = true;  	m_Search.Enabled = true;  	m_Bookmarks.Enabled = true;  	Drive = d;  	Drive.EntryWatcher += new CLKsFATXLib.Structs.OnEntryEvent (Main_OnEntryEvent);  	// Grab the cached title names from the drive  	foreach (CLKsFATXLib.Structs.CachedTitleName ctn in Drive.CachedTitleNames ()) {  		string Result = Cache.CheckCache (ctn.ID.ToString ("X"));  		if (Result == null) {  			Cache.AddID (ctn.ID.ToString ("X")' ctn.Name);  		}  		// If we have this one cached but it doesn't equal  		// what it should be  		else if (Result != ctn.Name) {  			for (int i = 0; i < Properties.Settings.Default.cachedID.Count; i++) {  				if (Properties.Settings.Default.cachedID [i].ToLower () == ctn.ID.ToString ("X").ToLower ()) {  					Properties.Settings.Default.cachedID.RemoveAt (i);  					Properties.Settings.Default.correspondingIDName.RemoveAt (i);  					Properties.Settings.Default.Save ();  					Cache.AddID (ctn.ID.ToString ("X")' ctn.Name);  				}  			}  		}  	}  	for (int i = 0; i < Drive.Partitions.Length; i++) {  		TreeNode tn = new TreeNode (Drive.Partitions [i].Name);  		tn.Tag = Drive.Partitions [i];  		tn.Name = tn.Text;  		//((Folder)tn.Tag).EntryEvent += new CLKsFATXLib.Structs.OnEntryEvent(Main_OnEntryEvent);  		((Folder)tn.Tag).ReturnDeletedEntries = m_DeletionMode.Checked;  		if (Properties.Settings.Default.loadEntireDrive) {  			AddNodes (tn' Drive.Partitions [i]' true' false);  		}  		treeView1.Nodes [0].Nodes.Add (tn);  		Console.WriteLine (Drive.Partitions [i].Name + ": " + Drive.PartitionTimeStamp (Drive.Partitions [i].PartitionInfo));  	}  	treeView1.Nodes [0].Expand ();  	sw.Stop ();  	l_selectedItems.Text = d.Name + " loaded in " + sw.Elapsed.ToString ();  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,LoadDrive,The following statement contains a magic number: switch (d.DriveType) {  case DriveType.HardDisk:  	treeView1.Nodes [0].ImageIndex = 3;  	treeView1.Nodes [0].SelectedImageIndex = treeView1.Nodes [0].ImageIndex;  	break;  case DriveType.USB:  	treeView1.Nodes [0].ImageIndex = 4;  	treeView1.Nodes [0].SelectedImageIndex = treeView1.Nodes [0].ImageIndex;  	break;  case DriveType.Backup:  	treeView1.Nodes [0].ImageIndex = 5;  	treeView1.Nodes [0].SelectedImageIndex = treeView1.Nodes [0].ImageIndex;  	break;  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,LoadDrive,The following statement contains a magic number: switch (d.DriveType) {  case DriveType.HardDisk:  	treeView1.Nodes [0].ImageIndex = 3;  	treeView1.Nodes [0].SelectedImageIndex = treeView1.Nodes [0].ImageIndex;  	break;  case DriveType.USB:  	treeView1.Nodes [0].ImageIndex = 4;  	treeView1.Nodes [0].SelectedImageIndex = treeView1.Nodes [0].ImageIndex;  	break;  case DriveType.Backup:  	treeView1.Nodes [0].ImageIndex = 5;  	treeView1.Nodes [0].SelectedImageIndex = treeView1.Nodes [0].ImageIndex;  	break;  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,LoadDrive,The following statement contains a magic number: switch (d.DriveType) {  case DriveType.HardDisk:  	treeView1.Nodes [0].ImageIndex = 3;  	treeView1.Nodes [0].SelectedImageIndex = treeView1.Nodes [0].ImageIndex;  	break;  case DriveType.USB:  	treeView1.Nodes [0].ImageIndex = 4;  	treeView1.Nodes [0].SelectedImageIndex = treeView1.Nodes [0].ImageIndex;  	break;  case DriveType.Backup:  	treeView1.Nodes [0].ImageIndex = 5;  	treeView1.Nodes [0].SelectedImageIndex = treeView1.Nodes [0].ImageIndex;  	break;  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,LoadDrive,The following statement contains a magic number: treeView1.Nodes [0].ImageIndex = 3;  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,LoadDrive,The following statement contains a magic number: treeView1.Nodes [0].ImageIndex = 4;  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,LoadDrive,The following statement contains a magic number: treeView1.Nodes [0].ImageIndex = 5;  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Main_OnEntryEvent,The following statement contains a magic number: if (eg.ModifiedEntry.IsFolder) {  	AddNode ((Folder)eg.ModifiedEntry' n' ListViewCreateItem.DecideForMeNigga);  }  // If we're dealing with a file  else {  	this.Invoke ((MethodInvoker)delegate {  		// If the parent folder to this file is the selected path  		if (((Folder)n.Tag).FullPath == treeView1.SelectedNode.RealPath ()) {  			// Add all the listview shit  			ListViewItem li2 = null;  			bool ExistsAlready = false;  			if (listView1.Items.Find (((File)eg.ModifiedEntry).Name' false).Length != 0) {  				li2 = listView1.Items.Find (((File)eg.ModifiedEntry).Name' false) [0];  				foreach (ListViewItem.ListViewSubItem subitem in li2.SubItems) {  					li2.SubItems.Remove (subitem);  				}  				ExistsAlready = true;  			}  			else {  				li2 = new ListViewItem (((File)eg.ModifiedEntry).Name);  			}  			li2.SubItems.Add (((File)eg.ModifiedEntry).EntryType);  			li2.SubItems.Add (VariousFunctions.ByteConversion (((File)eg.ModifiedEntry).Size));  			li2.SubItems.Add (((File)eg.ModifiedEntry).ModifiedDate.ToString ());  			if (Properties.Settings.Default.loadSTFS) {  				if (((File)eg.ModifiedEntry).IsSTFSPackage ()) {  					li2.SubItems.Add (((File)eg.ModifiedEntry).ContentName ());  				}  				else if (((File)eg.ModifiedEntry).Parent.FullPath == ((File)eg.ModifiedEntry).Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (((File)eg.ModifiedEntry).Name.Substring (0' 2))) {  					for (int i = 0; i < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; i++) {  						if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [i] == ((File)eg.ModifiedEntry).Name.Substring (0' 2)) {  							li2.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [i]);  							break;  						}  					}  				}  			}  			li2.Tag = ((File)eg.ModifiedEntry);  			li2.Name = ((File)eg.ModifiedEntry).Name;  			if (Properties.Settings.Default.cacheContentIcons) {  				if (listView1.LargeImageList.Images.ContainsKey (((File)eg.ModifiedEntry).Name)) {  					li2.ImageKey = ((File)eg.ModifiedEntry).Name;  				}  				else {  					// Check if there's an icon for this guy cached  					if (Cache.GetIcon (((File)eg.ModifiedEntry).Name) != null) {  						Image Icon = Cache.GetIcon (((File)eg.ModifiedEntry).Name);  						treeView1.ImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  						listView1.Invoke ((MethodInvoker)delegate {  							listView1.LargeImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  							listView1.SmallImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  						});  						li2.ImageKey = ((File)eg.ModifiedEntry).Name;  					}  					// Check if the file is an STFS package' and if it is blahblahblah  					else if (((File)eg.ModifiedEntry).IsSTFSPackage ()) {  						Image Icon = ((File)eg.ModifiedEntry).ContentIcon ();  						if (Icon != null) {  							Cache.AddIcon (Icon' ((File)eg.ModifiedEntry).Name);  							treeView1.ImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  							listView1.Invoke ((MethodInvoker)delegate {  								listView1.LargeImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  								listView1.SmallImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  							});  							li2.ImageKey = ((File)eg.ModifiedEntry).Name;  						}  					}  				}  			}  			if (li2.ImageKey == "") {  				li2.ImageIndex = 1;  			}  			if (!ExistsAlready) {  				listView1.Invoke ((MethodInvoker)delegate {  					listView1.Items.Add (li2);  				});  			}  		}  		/* Here we'll check to see if this is the first file added                      * to the folder.  If it is' grab the icon/name */if (((File)eg.ModifiedEntry).Parent.Files ().Length == 1) {  			if (Cache.IsTitleIDFolder (n.Name) && VariousFunctions.Known.Contains (n.Name)) {  				n = n.Parent;  			}  			File f = ((File)eg.ModifiedEntry).Parent.Files () [0];  			// It was the first file' do the name and icon stuff  			if (!n.Text.Contains (" | ") && ((File)eg.ModifiedEntry).Parent.Parent.IsTitleIDFolder && !((File)eg.ModifiedEntry).Parent.Parent.IsKnownFolder) {  				((File)eg.ModifiedEntry).Parent.Parent.ForceGameName = true;  				string Name = ((File)eg.ModifiedEntry).Parent.Parent.GameName ();  				((File)eg.ModifiedEntry).Parent.Parent.ForceGameName = false;  				if (Name != null && Name != "") {  					n.Text += " | " + ((File)eg.ModifiedEntry).Parent.Parent.GameName ();  				}  				// If there is no image assigned to the node  				if (n.ImageKey == "") {  					if (Properties.Settings.Default.SaveIcons) {  						Image Icon = ((File)eg.ModifiedEntry).Parent.Parent.GameIcon ();  						if (Icon != null) {  							treeView1.Invoke ((MethodInvoker)delegate {  								siL.Images.Add (((File)eg.ModifiedEntry).Name.ToUpper ()' Icon);  								liL.Images.Add (((File)eg.ModifiedEntry).Name.ToUpper ()' Icon);  								n.ImageKey = ((File)eg.ModifiedEntry).Name.ToUpper ();  								n.SelectedImageKey = n.ImageKey;  							});  						}  					}  				}  				// Now check to see if the parent folder is being displayed in the listview...  				if (n.Parent.RealPath () == ((File)eg.ModifiedEntry).Parent.Parent.Parent.Parent.FullPath) {  					// OH SHIT IT IS  					// Change the STFS name and imagekey  					ListViewItem li = listView1.Items.Find (n.Name' false) [0];  					if (Name != null) {  						li.SubItems.Add (Name);  					}  					if (n.ImageKey != "" && li.ImageKey == "") {  						li.ImageKey = n.ImageKey;  					}  				}  			}  			// For profile folders...  			if (n.Name.ToLower () == "fffe07d1" && n.Parent.ImageKey == "" && Properties.Settings.Default.SaveIcons) {  				n = n.Parent;  				Folder ProfileFolder = ((File)eg.ModifiedEntry).Parent.Parent.Parent;  				// Treeview Handling  				Image I = Cache.GetIcon (ProfileFolder.Name);  				{  					if (I != null) {  						treeView1.Invoke ((MethodInvoker)delegate {  							if (!siL.Images.ContainsKey (ProfileFolder.Name.ToUpper ())) {  								siL.Images.Add (ProfileFolder.Name.ToUpper ()' I);  								liL.Images.Add (ProfileFolder.Name.ToUpper ()' I);  							}  							n.ImageKey = ProfileFolder.Name.ToUpper ();  							n.SelectedImageKey = n.ImageKey;  						});  					}  					else {  						File FILE = ProfileFolder.IsProfileFolder ();  						if (FILE != null) {  							I = FILE.ContentIcon ();  							if (I != null) {  								Cache.AddIcon (I' ProfileFolder.Name);  								if (!siL.Images.ContainsKey (ProfileFolder.Name.ToUpper ())) {  									siL.Images.Add (ProfileFolder.Name.ToUpper ()' I);  									liL.Images.Add (ProfileFolder.Name.ToUpper ()' I);  								}  								n.ImageKey = (ProfileFolder.Name.ToUpper ());  								n.SelectedImageKey = n.ImageKey;  							}  						}  					}  				// Listview handling  				}  				if (I != null && n.Parent.RealPath () == ProfileFolder.Parent.FullPath) {  					ListViewItem li = listView1.Items.Find (n.Name' false) [0];  					if (n.ImageKey != "" && li.ImageKey == "") {  						li.ImageKey = n.ImageKey;  					}  				}  			}  		}  	});  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Main_OnEntryEvent,The following statement contains a magic number: if (eg.ModifiedEntry.IsFolder) {  	AddNode ((Folder)eg.ModifiedEntry' n' ListViewCreateItem.DecideForMeNigga);  }  // If we're dealing with a file  else {  	this.Invoke ((MethodInvoker)delegate {  		// If the parent folder to this file is the selected path  		if (((Folder)n.Tag).FullPath == treeView1.SelectedNode.RealPath ()) {  			// Add all the listview shit  			ListViewItem li2 = null;  			bool ExistsAlready = false;  			if (listView1.Items.Find (((File)eg.ModifiedEntry).Name' false).Length != 0) {  				li2 = listView1.Items.Find (((File)eg.ModifiedEntry).Name' false) [0];  				foreach (ListViewItem.ListViewSubItem subitem in li2.SubItems) {  					li2.SubItems.Remove (subitem);  				}  				ExistsAlready = true;  			}  			else {  				li2 = new ListViewItem (((File)eg.ModifiedEntry).Name);  			}  			li2.SubItems.Add (((File)eg.ModifiedEntry).EntryType);  			li2.SubItems.Add (VariousFunctions.ByteConversion (((File)eg.ModifiedEntry).Size));  			li2.SubItems.Add (((File)eg.ModifiedEntry).ModifiedDate.ToString ());  			if (Properties.Settings.Default.loadSTFS) {  				if (((File)eg.ModifiedEntry).IsSTFSPackage ()) {  					li2.SubItems.Add (((File)eg.ModifiedEntry).ContentName ());  				}  				else if (((File)eg.ModifiedEntry).Parent.FullPath == ((File)eg.ModifiedEntry).Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (((File)eg.ModifiedEntry).Name.Substring (0' 2))) {  					for (int i = 0; i < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; i++) {  						if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [i] == ((File)eg.ModifiedEntry).Name.Substring (0' 2)) {  							li2.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [i]);  							break;  						}  					}  				}  			}  			li2.Tag = ((File)eg.ModifiedEntry);  			li2.Name = ((File)eg.ModifiedEntry).Name;  			if (Properties.Settings.Default.cacheContentIcons) {  				if (listView1.LargeImageList.Images.ContainsKey (((File)eg.ModifiedEntry).Name)) {  					li2.ImageKey = ((File)eg.ModifiedEntry).Name;  				}  				else {  					// Check if there's an icon for this guy cached  					if (Cache.GetIcon (((File)eg.ModifiedEntry).Name) != null) {  						Image Icon = Cache.GetIcon (((File)eg.ModifiedEntry).Name);  						treeView1.ImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  						listView1.Invoke ((MethodInvoker)delegate {  							listView1.LargeImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  							listView1.SmallImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  						});  						li2.ImageKey = ((File)eg.ModifiedEntry).Name;  					}  					// Check if the file is an STFS package' and if it is blahblahblah  					else if (((File)eg.ModifiedEntry).IsSTFSPackage ()) {  						Image Icon = ((File)eg.ModifiedEntry).ContentIcon ();  						if (Icon != null) {  							Cache.AddIcon (Icon' ((File)eg.ModifiedEntry).Name);  							treeView1.ImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  							listView1.Invoke ((MethodInvoker)delegate {  								listView1.LargeImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  								listView1.SmallImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  							});  							li2.ImageKey = ((File)eg.ModifiedEntry).Name;  						}  					}  				}  			}  			if (li2.ImageKey == "") {  				li2.ImageIndex = 1;  			}  			if (!ExistsAlready) {  				listView1.Invoke ((MethodInvoker)delegate {  					listView1.Items.Add (li2);  				});  			}  		}  		/* Here we'll check to see if this is the first file added                      * to the folder.  If it is' grab the icon/name */if (((File)eg.ModifiedEntry).Parent.Files ().Length == 1) {  			if (Cache.IsTitleIDFolder (n.Name) && VariousFunctions.Known.Contains (n.Name)) {  				n = n.Parent;  			}  			File f = ((File)eg.ModifiedEntry).Parent.Files () [0];  			// It was the first file' do the name and icon stuff  			if (!n.Text.Contains (" | ") && ((File)eg.ModifiedEntry).Parent.Parent.IsTitleIDFolder && !((File)eg.ModifiedEntry).Parent.Parent.IsKnownFolder) {  				((File)eg.ModifiedEntry).Parent.Parent.ForceGameName = true;  				string Name = ((File)eg.ModifiedEntry).Parent.Parent.GameName ();  				((File)eg.ModifiedEntry).Parent.Parent.ForceGameName = false;  				if (Name != null && Name != "") {  					n.Text += " | " + ((File)eg.ModifiedEntry).Parent.Parent.GameName ();  				}  				// If there is no image assigned to the node  				if (n.ImageKey == "") {  					if (Properties.Settings.Default.SaveIcons) {  						Image Icon = ((File)eg.ModifiedEntry).Parent.Parent.GameIcon ();  						if (Icon != null) {  							treeView1.Invoke ((MethodInvoker)delegate {  								siL.Images.Add (((File)eg.ModifiedEntry).Name.ToUpper ()' Icon);  								liL.Images.Add (((File)eg.ModifiedEntry).Name.ToUpper ()' Icon);  								n.ImageKey = ((File)eg.ModifiedEntry).Name.ToUpper ();  								n.SelectedImageKey = n.ImageKey;  							});  						}  					}  				}  				// Now check to see if the parent folder is being displayed in the listview...  				if (n.Parent.RealPath () == ((File)eg.ModifiedEntry).Parent.Parent.Parent.Parent.FullPath) {  					// OH SHIT IT IS  					// Change the STFS name and imagekey  					ListViewItem li = listView1.Items.Find (n.Name' false) [0];  					if (Name != null) {  						li.SubItems.Add (Name);  					}  					if (n.ImageKey != "" && li.ImageKey == "") {  						li.ImageKey = n.ImageKey;  					}  				}  			}  			// For profile folders...  			if (n.Name.ToLower () == "fffe07d1" && n.Parent.ImageKey == "" && Properties.Settings.Default.SaveIcons) {  				n = n.Parent;  				Folder ProfileFolder = ((File)eg.ModifiedEntry).Parent.Parent.Parent;  				// Treeview Handling  				Image I = Cache.GetIcon (ProfileFolder.Name);  				{  					if (I != null) {  						treeView1.Invoke ((MethodInvoker)delegate {  							if (!siL.Images.ContainsKey (ProfileFolder.Name.ToUpper ())) {  								siL.Images.Add (ProfileFolder.Name.ToUpper ()' I);  								liL.Images.Add (ProfileFolder.Name.ToUpper ()' I);  							}  							n.ImageKey = ProfileFolder.Name.ToUpper ();  							n.SelectedImageKey = n.ImageKey;  						});  					}  					else {  						File FILE = ProfileFolder.IsProfileFolder ();  						if (FILE != null) {  							I = FILE.ContentIcon ();  							if (I != null) {  								Cache.AddIcon (I' ProfileFolder.Name);  								if (!siL.Images.ContainsKey (ProfileFolder.Name.ToUpper ())) {  									siL.Images.Add (ProfileFolder.Name.ToUpper ()' I);  									liL.Images.Add (ProfileFolder.Name.ToUpper ()' I);  								}  								n.ImageKey = (ProfileFolder.Name.ToUpper ());  								n.SelectedImageKey = n.ImageKey;  							}  						}  					}  				// Listview handling  				}  				if (I != null && n.Parent.RealPath () == ProfileFolder.Parent.FullPath) {  					ListViewItem li = listView1.Items.Find (n.Name' false) [0];  					if (n.ImageKey != "" && li.ImageKey == "") {  						li.ImageKey = n.ImageKey;  					}  				}  			}  		}  	});  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Main_OnEntryEvent,The following statement contains a magic number: this.Invoke ((MethodInvoker)delegate {  	// If the parent folder to this file is the selected path  	if (((Folder)n.Tag).FullPath == treeView1.SelectedNode.RealPath ()) {  		// Add all the listview shit  		ListViewItem li2 = null;  		bool ExistsAlready = false;  		if (listView1.Items.Find (((File)eg.ModifiedEntry).Name' false).Length != 0) {  			li2 = listView1.Items.Find (((File)eg.ModifiedEntry).Name' false) [0];  			foreach (ListViewItem.ListViewSubItem subitem in li2.SubItems) {  				li2.SubItems.Remove (subitem);  			}  			ExistsAlready = true;  		}  		else {  			li2 = new ListViewItem (((File)eg.ModifiedEntry).Name);  		}  		li2.SubItems.Add (((File)eg.ModifiedEntry).EntryType);  		li2.SubItems.Add (VariousFunctions.ByteConversion (((File)eg.ModifiedEntry).Size));  		li2.SubItems.Add (((File)eg.ModifiedEntry).ModifiedDate.ToString ());  		if (Properties.Settings.Default.loadSTFS) {  			if (((File)eg.ModifiedEntry).IsSTFSPackage ()) {  				li2.SubItems.Add (((File)eg.ModifiedEntry).ContentName ());  			}  			else if (((File)eg.ModifiedEntry).Parent.FullPath == ((File)eg.ModifiedEntry).Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (((File)eg.ModifiedEntry).Name.Substring (0' 2))) {  				for (int i = 0; i < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; i++) {  					if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [i] == ((File)eg.ModifiedEntry).Name.Substring (0' 2)) {  						li2.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [i]);  						break;  					}  				}  			}  		}  		li2.Tag = ((File)eg.ModifiedEntry);  		li2.Name = ((File)eg.ModifiedEntry).Name;  		if (Properties.Settings.Default.cacheContentIcons) {  			if (listView1.LargeImageList.Images.ContainsKey (((File)eg.ModifiedEntry).Name)) {  				li2.ImageKey = ((File)eg.ModifiedEntry).Name;  			}  			else {  				// Check if there's an icon for this guy cached  				if (Cache.GetIcon (((File)eg.ModifiedEntry).Name) != null) {  					Image Icon = Cache.GetIcon (((File)eg.ModifiedEntry).Name);  					treeView1.ImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  					listView1.Invoke ((MethodInvoker)delegate {  						listView1.LargeImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  						listView1.SmallImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  					});  					li2.ImageKey = ((File)eg.ModifiedEntry).Name;  				}  				// Check if the file is an STFS package' and if it is blahblahblah  				else if (((File)eg.ModifiedEntry).IsSTFSPackage ()) {  					Image Icon = ((File)eg.ModifiedEntry).ContentIcon ();  					if (Icon != null) {  						Cache.AddIcon (Icon' ((File)eg.ModifiedEntry).Name);  						treeView1.ImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  						listView1.Invoke ((MethodInvoker)delegate {  							listView1.LargeImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  							listView1.SmallImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  						});  						li2.ImageKey = ((File)eg.ModifiedEntry).Name;  					}  				}  			}  		}  		if (li2.ImageKey == "") {  			li2.ImageIndex = 1;  		}  		if (!ExistsAlready) {  			listView1.Invoke ((MethodInvoker)delegate {  				listView1.Items.Add (li2);  			});  		}  	}  	/* Here we'll check to see if this is the first file added                      * to the folder.  If it is' grab the icon/name */if (((File)eg.ModifiedEntry).Parent.Files ().Length == 1) {  		if (Cache.IsTitleIDFolder (n.Name) && VariousFunctions.Known.Contains (n.Name)) {  			n = n.Parent;  		}  		File f = ((File)eg.ModifiedEntry).Parent.Files () [0];  		// It was the first file' do the name and icon stuff  		if (!n.Text.Contains (" | ") && ((File)eg.ModifiedEntry).Parent.Parent.IsTitleIDFolder && !((File)eg.ModifiedEntry).Parent.Parent.IsKnownFolder) {  			((File)eg.ModifiedEntry).Parent.Parent.ForceGameName = true;  			string Name = ((File)eg.ModifiedEntry).Parent.Parent.GameName ();  			((File)eg.ModifiedEntry).Parent.Parent.ForceGameName = false;  			if (Name != null && Name != "") {  				n.Text += " | " + ((File)eg.ModifiedEntry).Parent.Parent.GameName ();  			}  			// If there is no image assigned to the node  			if (n.ImageKey == "") {  				if (Properties.Settings.Default.SaveIcons) {  					Image Icon = ((File)eg.ModifiedEntry).Parent.Parent.GameIcon ();  					if (Icon != null) {  						treeView1.Invoke ((MethodInvoker)delegate {  							siL.Images.Add (((File)eg.ModifiedEntry).Name.ToUpper ()' Icon);  							liL.Images.Add (((File)eg.ModifiedEntry).Name.ToUpper ()' Icon);  							n.ImageKey = ((File)eg.ModifiedEntry).Name.ToUpper ();  							n.SelectedImageKey = n.ImageKey;  						});  					}  				}  			}  			// Now check to see if the parent folder is being displayed in the listview...  			if (n.Parent.RealPath () == ((File)eg.ModifiedEntry).Parent.Parent.Parent.Parent.FullPath) {  				// OH SHIT IT IS  				// Change the STFS name and imagekey  				ListViewItem li = listView1.Items.Find (n.Name' false) [0];  				if (Name != null) {  					li.SubItems.Add (Name);  				}  				if (n.ImageKey != "" && li.ImageKey == "") {  					li.ImageKey = n.ImageKey;  				}  			}  		}  		// For profile folders...  		if (n.Name.ToLower () == "fffe07d1" && n.Parent.ImageKey == "" && Properties.Settings.Default.SaveIcons) {  			n = n.Parent;  			Folder ProfileFolder = ((File)eg.ModifiedEntry).Parent.Parent.Parent;  			// Treeview Handling  			Image I = Cache.GetIcon (ProfileFolder.Name);  			{  				if (I != null) {  					treeView1.Invoke ((MethodInvoker)delegate {  						if (!siL.Images.ContainsKey (ProfileFolder.Name.ToUpper ())) {  							siL.Images.Add (ProfileFolder.Name.ToUpper ()' I);  							liL.Images.Add (ProfileFolder.Name.ToUpper ()' I);  						}  						n.ImageKey = ProfileFolder.Name.ToUpper ();  						n.SelectedImageKey = n.ImageKey;  					});  				}  				else {  					File FILE = ProfileFolder.IsProfileFolder ();  					if (FILE != null) {  						I = FILE.ContentIcon ();  						if (I != null) {  							Cache.AddIcon (I' ProfileFolder.Name);  							if (!siL.Images.ContainsKey (ProfileFolder.Name.ToUpper ())) {  								siL.Images.Add (ProfileFolder.Name.ToUpper ()' I);  								liL.Images.Add (ProfileFolder.Name.ToUpper ()' I);  							}  							n.ImageKey = (ProfileFolder.Name.ToUpper ());  							n.SelectedImageKey = n.ImageKey;  						}  					}  				}  			// Listview handling  			}  			if (I != null && n.Parent.RealPath () == ProfileFolder.Parent.FullPath) {  				ListViewItem li = listView1.Items.Find (n.Name' false) [0];  				if (n.ImageKey != "" && li.ImageKey == "") {  					li.ImageKey = n.ImageKey;  				}  			}  		}  	}  });  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Main_OnEntryEvent,The following statement contains a magic number: this.Invoke ((MethodInvoker)delegate {  	// If the parent folder to this file is the selected path  	if (((Folder)n.Tag).FullPath == treeView1.SelectedNode.RealPath ()) {  		// Add all the listview shit  		ListViewItem li2 = null;  		bool ExistsAlready = false;  		if (listView1.Items.Find (((File)eg.ModifiedEntry).Name' false).Length != 0) {  			li2 = listView1.Items.Find (((File)eg.ModifiedEntry).Name' false) [0];  			foreach (ListViewItem.ListViewSubItem subitem in li2.SubItems) {  				li2.SubItems.Remove (subitem);  			}  			ExistsAlready = true;  		}  		else {  			li2 = new ListViewItem (((File)eg.ModifiedEntry).Name);  		}  		li2.SubItems.Add (((File)eg.ModifiedEntry).EntryType);  		li2.SubItems.Add (VariousFunctions.ByteConversion (((File)eg.ModifiedEntry).Size));  		li2.SubItems.Add (((File)eg.ModifiedEntry).ModifiedDate.ToString ());  		if (Properties.Settings.Default.loadSTFS) {  			if (((File)eg.ModifiedEntry).IsSTFSPackage ()) {  				li2.SubItems.Add (((File)eg.ModifiedEntry).ContentName ());  			}  			else if (((File)eg.ModifiedEntry).Parent.FullPath == ((File)eg.ModifiedEntry).Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (((File)eg.ModifiedEntry).Name.Substring (0' 2))) {  				for (int i = 0; i < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; i++) {  					if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [i] == ((File)eg.ModifiedEntry).Name.Substring (0' 2)) {  						li2.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [i]);  						break;  					}  				}  			}  		}  		li2.Tag = ((File)eg.ModifiedEntry);  		li2.Name = ((File)eg.ModifiedEntry).Name;  		if (Properties.Settings.Default.cacheContentIcons) {  			if (listView1.LargeImageList.Images.ContainsKey (((File)eg.ModifiedEntry).Name)) {  				li2.ImageKey = ((File)eg.ModifiedEntry).Name;  			}  			else {  				// Check if there's an icon for this guy cached  				if (Cache.GetIcon (((File)eg.ModifiedEntry).Name) != null) {  					Image Icon = Cache.GetIcon (((File)eg.ModifiedEntry).Name);  					treeView1.ImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  					listView1.Invoke ((MethodInvoker)delegate {  						listView1.LargeImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  						listView1.SmallImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  					});  					li2.ImageKey = ((File)eg.ModifiedEntry).Name;  				}  				// Check if the file is an STFS package' and if it is blahblahblah  				else if (((File)eg.ModifiedEntry).IsSTFSPackage ()) {  					Image Icon = ((File)eg.ModifiedEntry).ContentIcon ();  					if (Icon != null) {  						Cache.AddIcon (Icon' ((File)eg.ModifiedEntry).Name);  						treeView1.ImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  						listView1.Invoke ((MethodInvoker)delegate {  							listView1.LargeImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  							listView1.SmallImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  						});  						li2.ImageKey = ((File)eg.ModifiedEntry).Name;  					}  				}  			}  		}  		if (li2.ImageKey == "") {  			li2.ImageIndex = 1;  		}  		if (!ExistsAlready) {  			listView1.Invoke ((MethodInvoker)delegate {  				listView1.Items.Add (li2);  			});  		}  	}  	/* Here we'll check to see if this is the first file added                      * to the folder.  If it is' grab the icon/name */if (((File)eg.ModifiedEntry).Parent.Files ().Length == 1) {  		if (Cache.IsTitleIDFolder (n.Name) && VariousFunctions.Known.Contains (n.Name)) {  			n = n.Parent;  		}  		File f = ((File)eg.ModifiedEntry).Parent.Files () [0];  		// It was the first file' do the name and icon stuff  		if (!n.Text.Contains (" | ") && ((File)eg.ModifiedEntry).Parent.Parent.IsTitleIDFolder && !((File)eg.ModifiedEntry).Parent.Parent.IsKnownFolder) {  			((File)eg.ModifiedEntry).Parent.Parent.ForceGameName = true;  			string Name = ((File)eg.ModifiedEntry).Parent.Parent.GameName ();  			((File)eg.ModifiedEntry).Parent.Parent.ForceGameName = false;  			if (Name != null && Name != "") {  				n.Text += " | " + ((File)eg.ModifiedEntry).Parent.Parent.GameName ();  			}  			// If there is no image assigned to the node  			if (n.ImageKey == "") {  				if (Properties.Settings.Default.SaveIcons) {  					Image Icon = ((File)eg.ModifiedEntry).Parent.Parent.GameIcon ();  					if (Icon != null) {  						treeView1.Invoke ((MethodInvoker)delegate {  							siL.Images.Add (((File)eg.ModifiedEntry).Name.ToUpper ()' Icon);  							liL.Images.Add (((File)eg.ModifiedEntry).Name.ToUpper ()' Icon);  							n.ImageKey = ((File)eg.ModifiedEntry).Name.ToUpper ();  							n.SelectedImageKey = n.ImageKey;  						});  					}  				}  			}  			// Now check to see if the parent folder is being displayed in the listview...  			if (n.Parent.RealPath () == ((File)eg.ModifiedEntry).Parent.Parent.Parent.Parent.FullPath) {  				// OH SHIT IT IS  				// Change the STFS name and imagekey  				ListViewItem li = listView1.Items.Find (n.Name' false) [0];  				if (Name != null) {  					li.SubItems.Add (Name);  				}  				if (n.ImageKey != "" && li.ImageKey == "") {  					li.ImageKey = n.ImageKey;  				}  			}  		}  		// For profile folders...  		if (n.Name.ToLower () == "fffe07d1" && n.Parent.ImageKey == "" && Properties.Settings.Default.SaveIcons) {  			n = n.Parent;  			Folder ProfileFolder = ((File)eg.ModifiedEntry).Parent.Parent.Parent;  			// Treeview Handling  			Image I = Cache.GetIcon (ProfileFolder.Name);  			{  				if (I != null) {  					treeView1.Invoke ((MethodInvoker)delegate {  						if (!siL.Images.ContainsKey (ProfileFolder.Name.ToUpper ())) {  							siL.Images.Add (ProfileFolder.Name.ToUpper ()' I);  							liL.Images.Add (ProfileFolder.Name.ToUpper ()' I);  						}  						n.ImageKey = ProfileFolder.Name.ToUpper ();  						n.SelectedImageKey = n.ImageKey;  					});  				}  				else {  					File FILE = ProfileFolder.IsProfileFolder ();  					if (FILE != null) {  						I = FILE.ContentIcon ();  						if (I != null) {  							Cache.AddIcon (I' ProfileFolder.Name);  							if (!siL.Images.ContainsKey (ProfileFolder.Name.ToUpper ())) {  								siL.Images.Add (ProfileFolder.Name.ToUpper ()' I);  								liL.Images.Add (ProfileFolder.Name.ToUpper ()' I);  							}  							n.ImageKey = (ProfileFolder.Name.ToUpper ());  							n.SelectedImageKey = n.ImageKey;  						}  					}  				}  			// Listview handling  			}  			if (I != null && n.Parent.RealPath () == ProfileFolder.Parent.FullPath) {  				ListViewItem li = listView1.Items.Find (n.Name' false) [0];  				if (n.ImageKey != "" && li.ImageKey == "") {  					li.ImageKey = n.ImageKey;  				}  			}  		}  	}  });  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Main_OnEntryEvent,The following statement contains a magic number: if (((Folder)n.Tag).FullPath == treeView1.SelectedNode.RealPath ()) {  	// Add all the listview shit  	ListViewItem li2 = null;  	bool ExistsAlready = false;  	if (listView1.Items.Find (((File)eg.ModifiedEntry).Name' false).Length != 0) {  		li2 = listView1.Items.Find (((File)eg.ModifiedEntry).Name' false) [0];  		foreach (ListViewItem.ListViewSubItem subitem in li2.SubItems) {  			li2.SubItems.Remove (subitem);  		}  		ExistsAlready = true;  	}  	else {  		li2 = new ListViewItem (((File)eg.ModifiedEntry).Name);  	}  	li2.SubItems.Add (((File)eg.ModifiedEntry).EntryType);  	li2.SubItems.Add (VariousFunctions.ByteConversion (((File)eg.ModifiedEntry).Size));  	li2.SubItems.Add (((File)eg.ModifiedEntry).ModifiedDate.ToString ());  	if (Properties.Settings.Default.loadSTFS) {  		if (((File)eg.ModifiedEntry).IsSTFSPackage ()) {  			li2.SubItems.Add (((File)eg.ModifiedEntry).ContentName ());  		}  		else if (((File)eg.ModifiedEntry).Parent.FullPath == ((File)eg.ModifiedEntry).Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (((File)eg.ModifiedEntry).Name.Substring (0' 2))) {  			for (int i = 0; i < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; i++) {  				if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [i] == ((File)eg.ModifiedEntry).Name.Substring (0' 2)) {  					li2.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [i]);  					break;  				}  			}  		}  	}  	li2.Tag = ((File)eg.ModifiedEntry);  	li2.Name = ((File)eg.ModifiedEntry).Name;  	if (Properties.Settings.Default.cacheContentIcons) {  		if (listView1.LargeImageList.Images.ContainsKey (((File)eg.ModifiedEntry).Name)) {  			li2.ImageKey = ((File)eg.ModifiedEntry).Name;  		}  		else {  			// Check if there's an icon for this guy cached  			if (Cache.GetIcon (((File)eg.ModifiedEntry).Name) != null) {  				Image Icon = Cache.GetIcon (((File)eg.ModifiedEntry).Name);  				treeView1.ImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  				listView1.Invoke ((MethodInvoker)delegate {  					listView1.LargeImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  					listView1.SmallImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  				});  				li2.ImageKey = ((File)eg.ModifiedEntry).Name;  			}  			// Check if the file is an STFS package' and if it is blahblahblah  			else if (((File)eg.ModifiedEntry).IsSTFSPackage ()) {  				Image Icon = ((File)eg.ModifiedEntry).ContentIcon ();  				if (Icon != null) {  					Cache.AddIcon (Icon' ((File)eg.ModifiedEntry).Name);  					treeView1.ImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  					listView1.Invoke ((MethodInvoker)delegate {  						listView1.LargeImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  						listView1.SmallImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  					});  					li2.ImageKey = ((File)eg.ModifiedEntry).Name;  				}  			}  		}  	}  	if (li2.ImageKey == "") {  		li2.ImageIndex = 1;  	}  	if (!ExistsAlready) {  		listView1.Invoke ((MethodInvoker)delegate {  			listView1.Items.Add (li2);  		});  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Main_OnEntryEvent,The following statement contains a magic number: if (((Folder)n.Tag).FullPath == treeView1.SelectedNode.RealPath ()) {  	// Add all the listview shit  	ListViewItem li2 = null;  	bool ExistsAlready = false;  	if (listView1.Items.Find (((File)eg.ModifiedEntry).Name' false).Length != 0) {  		li2 = listView1.Items.Find (((File)eg.ModifiedEntry).Name' false) [0];  		foreach (ListViewItem.ListViewSubItem subitem in li2.SubItems) {  			li2.SubItems.Remove (subitem);  		}  		ExistsAlready = true;  	}  	else {  		li2 = new ListViewItem (((File)eg.ModifiedEntry).Name);  	}  	li2.SubItems.Add (((File)eg.ModifiedEntry).EntryType);  	li2.SubItems.Add (VariousFunctions.ByteConversion (((File)eg.ModifiedEntry).Size));  	li2.SubItems.Add (((File)eg.ModifiedEntry).ModifiedDate.ToString ());  	if (Properties.Settings.Default.loadSTFS) {  		if (((File)eg.ModifiedEntry).IsSTFSPackage ()) {  			li2.SubItems.Add (((File)eg.ModifiedEntry).ContentName ());  		}  		else if (((File)eg.ModifiedEntry).Parent.FullPath == ((File)eg.ModifiedEntry).Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (((File)eg.ModifiedEntry).Name.Substring (0' 2))) {  			for (int i = 0; i < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; i++) {  				if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [i] == ((File)eg.ModifiedEntry).Name.Substring (0' 2)) {  					li2.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [i]);  					break;  				}  			}  		}  	}  	li2.Tag = ((File)eg.ModifiedEntry);  	li2.Name = ((File)eg.ModifiedEntry).Name;  	if (Properties.Settings.Default.cacheContentIcons) {  		if (listView1.LargeImageList.Images.ContainsKey (((File)eg.ModifiedEntry).Name)) {  			li2.ImageKey = ((File)eg.ModifiedEntry).Name;  		}  		else {  			// Check if there's an icon for this guy cached  			if (Cache.GetIcon (((File)eg.ModifiedEntry).Name) != null) {  				Image Icon = Cache.GetIcon (((File)eg.ModifiedEntry).Name);  				treeView1.ImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  				listView1.Invoke ((MethodInvoker)delegate {  					listView1.LargeImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  					listView1.SmallImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  				});  				li2.ImageKey = ((File)eg.ModifiedEntry).Name;  			}  			// Check if the file is an STFS package' and if it is blahblahblah  			else if (((File)eg.ModifiedEntry).IsSTFSPackage ()) {  				Image Icon = ((File)eg.ModifiedEntry).ContentIcon ();  				if (Icon != null) {  					Cache.AddIcon (Icon' ((File)eg.ModifiedEntry).Name);  					treeView1.ImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  					listView1.Invoke ((MethodInvoker)delegate {  						listView1.LargeImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  						listView1.SmallImageList.Images.Add (((File)eg.ModifiedEntry).Name' Icon);  					});  					li2.ImageKey = ((File)eg.ModifiedEntry).Name;  				}  			}  		}  	}  	if (li2.ImageKey == "") {  		li2.ImageIndex = 1;  	}  	if (!ExistsAlready) {  		listView1.Invoke ((MethodInvoker)delegate {  			listView1.Items.Add (li2);  		});  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Main_OnEntryEvent,The following statement contains a magic number: if (Properties.Settings.Default.loadSTFS) {  	if (((File)eg.ModifiedEntry).IsSTFSPackage ()) {  		li2.SubItems.Add (((File)eg.ModifiedEntry).ContentName ());  	}  	else if (((File)eg.ModifiedEntry).Parent.FullPath == ((File)eg.ModifiedEntry).Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (((File)eg.ModifiedEntry).Name.Substring (0' 2))) {  		for (int i = 0; i < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; i++) {  			if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [i] == ((File)eg.ModifiedEntry).Name.Substring (0' 2)) {  				li2.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [i]);  				break;  			}  		}  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Main_OnEntryEvent,The following statement contains a magic number: if (Properties.Settings.Default.loadSTFS) {  	if (((File)eg.ModifiedEntry).IsSTFSPackage ()) {  		li2.SubItems.Add (((File)eg.ModifiedEntry).ContentName ());  	}  	else if (((File)eg.ModifiedEntry).Parent.FullPath == ((File)eg.ModifiedEntry).Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (((File)eg.ModifiedEntry).Name.Substring (0' 2))) {  		for (int i = 0; i < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; i++) {  			if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [i] == ((File)eg.ModifiedEntry).Name.Substring (0' 2)) {  				li2.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [i]);  				break;  			}  		}  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Main_OnEntryEvent,The following statement contains a magic number: if (((File)eg.ModifiedEntry).IsSTFSPackage ()) {  	li2.SubItems.Add (((File)eg.ModifiedEntry).ContentName ());  }  else if (((File)eg.ModifiedEntry).Parent.FullPath == ((File)eg.ModifiedEntry).Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (((File)eg.ModifiedEntry).Name.Substring (0' 2))) {  	for (int i = 0; i < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; i++) {  		if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [i] == ((File)eg.ModifiedEntry).Name.Substring (0' 2)) {  			li2.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [i]);  			break;  		}  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Main_OnEntryEvent,The following statement contains a magic number: if (((File)eg.ModifiedEntry).IsSTFSPackage ()) {  	li2.SubItems.Add (((File)eg.ModifiedEntry).ContentName ());  }  else if (((File)eg.ModifiedEntry).Parent.FullPath == ((File)eg.ModifiedEntry).Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (((File)eg.ModifiedEntry).Name.Substring (0' 2))) {  	for (int i = 0; i < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; i++) {  		if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [i] == ((File)eg.ModifiedEntry).Name.Substring (0' 2)) {  			li2.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [i]);  			break;  		}  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Main_OnEntryEvent,The following statement contains a magic number: if (((File)eg.ModifiedEntry).Parent.FullPath == ((File)eg.ModifiedEntry).Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (((File)eg.ModifiedEntry).Name.Substring (0' 2))) {  	for (int i = 0; i < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; i++) {  		if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [i] == ((File)eg.ModifiedEntry).Name.Substring (0' 2)) {  			li2.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [i]);  			break;  		}  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Main_OnEntryEvent,The following statement contains a magic number: if (((File)eg.ModifiedEntry).Parent.FullPath == ((File)eg.ModifiedEntry).Drive.CacheFolderPath && CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Contains (((File)eg.ModifiedEntry).Name.Substring (0' 2))) {  	for (int i = 0; i < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; i++) {  		if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [i] == ((File)eg.ModifiedEntry).Name.Substring (0' 2)) {  			li2.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [i]);  			break;  		}  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Main_OnEntryEvent,The following statement contains a magic number: for (int i = 0; i < CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes.Length; i++) {  	if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [i] == ((File)eg.ModifiedEntry).Name.Substring (0' 2)) {  		li2.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [i]);  		break;  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Main_OnEntryEvent,The following statement contains a magic number: if (CLKsFATXLib.Geometry.CacheFilePrefixes.CachePrefixes [i] == ((File)eg.ModifiedEntry).Name.Substring (0' 2)) {  	li2.SubItems.Add (CLKsFATXLib.Geometry.CacheFilePrefixes.PrefixNames [i]);  	break;  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,DoStartup,The following statement contains a magic number: if (Properties.Settings.Default.width > 50 && Properties.Settings.Default.height > 50) {  	this.Height = Properties.Settings.Default.height;  	this.Width = Properties.Settings.Default.width;  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,DoStartup,The following statement contains a magic number: if (Properties.Settings.Default.width > 50 && Properties.Settings.Default.height > 50) {  	this.Height = Properties.Settings.Default.height;  	this.Width = Properties.Settings.Default.width;  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,DoStartup,The following statement contains a magic number: switch (Properties.Settings.Default.treeViewIconWidthHeight) {  case 16:  	size16.Checked = true;  	break;  case 24:  	size24.Checked = true;  	break;  case 32:  	size32.Checked = true;  	break;  case 64:  	size64.Checked = true;  	break;  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,DoStartup,The following statement contains a magic number: switch (Properties.Settings.Default.treeViewIconWidthHeight) {  case 16:  	size16.Checked = true;  	break;  case 24:  	size24.Checked = true;  	break;  case 32:  	size32.Checked = true;  	break;  case 64:  	size64.Checked = true;  	break;  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,DoStartup,The following statement contains a magic number: switch (Properties.Settings.Default.treeViewIconWidthHeight) {  case 16:  	size16.Checked = true;  	break;  case 24:  	size24.Checked = true;  	break;  case 32:  	size32.Checked = true;  	break;  case 64:  	size64.Checked = true;  	break;  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,DoStartup,The following statement contains a magic number: switch (Properties.Settings.Default.treeViewIconWidthHeight) {  case 16:  	size16.Checked = true;  	break;  case 24:  	size24.Checked = true;  	break;  case 32:  	size32.Checked = true;  	break;  case 64:  	size64.Checked = true;  	break;  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,lCached_Click,The following statement contains a magic number: if (n.ShowDialog () == DialogResult.OK) {  	try {  		Folder f = (Folder)treeView1.SelectedNode.Tag;  		if (f.IsDeleted) {  			return;  		}  		foreach (Folder Fol in f.Folders ()) {  			if (Fol.Name.ToLower () == (n.Selected.ToLower ())) {  				MessageBox.Show ("Folder already exists!"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  			}  		}  		f.CreateNewFolder (n.Selected);  		treeView1.SelectedNode.Tag = f;  	}  	catch (Exception x) {  		if (!Aero) {  			MessageBox.Show ("An exception was thrown: " + x.Message + "\r\n\r\nIf this appears to be a bug' press CTRL + C to copy the stack trace' then please email it to me at clkxu5@gmail.com:\r\n" + x.StackTrace);  		}  		else {  			TaskDialog td = new TaskDialog ();  			td.Caption = "Unhandled Exception";  			td.InstructionText = "An Unhandled Exception was Thrown";  			td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message);  			td.DetailsCollapsedLabel = "Details";  			td.DetailsExpandedLabel = "Details";  			td.DetailsExpandedText = x.StackTrace;  			TaskDialogButton Copy = new TaskDialogButton ("Copy"' "Copy Details to Clipboard");  			Copy.Click += (o' f) =>  {  				Clipboard.SetDataObject (x.StackTrace' true' 10' 200);  			};  			TaskDialogButton Close = new TaskDialogButton ("Close"' "Close");  			Close.Click += (o' f) =>  {  				td.Close ();  			};  			td.Controls.Add (Copy);  			td.Controls.Add (Close);  		}  		Clear ();  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,lCached_Click,The following statement contains a magic number: if (n.ShowDialog () == DialogResult.OK) {  	try {  		Folder f = (Folder)treeView1.SelectedNode.Tag;  		if (f.IsDeleted) {  			return;  		}  		foreach (Folder Fol in f.Folders ()) {  			if (Fol.Name.ToLower () == (n.Selected.ToLower ())) {  				MessageBox.Show ("Folder already exists!"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  			}  		}  		f.CreateNewFolder (n.Selected);  		treeView1.SelectedNode.Tag = f;  	}  	catch (Exception x) {  		if (!Aero) {  			MessageBox.Show ("An exception was thrown: " + x.Message + "\r\n\r\nIf this appears to be a bug' press CTRL + C to copy the stack trace' then please email it to me at clkxu5@gmail.com:\r\n" + x.StackTrace);  		}  		else {  			TaskDialog td = new TaskDialog ();  			td.Caption = "Unhandled Exception";  			td.InstructionText = "An Unhandled Exception was Thrown";  			td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message);  			td.DetailsCollapsedLabel = "Details";  			td.DetailsExpandedLabel = "Details";  			td.DetailsExpandedText = x.StackTrace;  			TaskDialogButton Copy = new TaskDialogButton ("Copy"' "Copy Details to Clipboard");  			Copy.Click += (o' f) =>  {  				Clipboard.SetDataObject (x.StackTrace' true' 10' 200);  			};  			TaskDialogButton Close = new TaskDialogButton ("Close"' "Close");  			Close.Click += (o' f) =>  {  				td.Close ();  			};  			td.Controls.Add (Copy);  			td.Controls.Add (Close);  		}  		Clear ();  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,lCached_Click,The following statement contains a magic number: try {  	Folder f = (Folder)treeView1.SelectedNode.Tag;  	if (f.IsDeleted) {  		return;  	}  	foreach (Folder Fol in f.Folders ()) {  		if (Fol.Name.ToLower () == (n.Selected.ToLower ())) {  			MessageBox.Show ("Folder already exists!"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  		}  	}  	f.CreateNewFolder (n.Selected);  	treeView1.SelectedNode.Tag = f;  }  catch (Exception x) {  	if (!Aero) {  		MessageBox.Show ("An exception was thrown: " + x.Message + "\r\n\r\nIf this appears to be a bug' press CTRL + C to copy the stack trace' then please email it to me at clkxu5@gmail.com:\r\n" + x.StackTrace);  	}  	else {  		TaskDialog td = new TaskDialog ();  		td.Caption = "Unhandled Exception";  		td.InstructionText = "An Unhandled Exception was Thrown";  		td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message);  		td.DetailsCollapsedLabel = "Details";  		td.DetailsExpandedLabel = "Details";  		td.DetailsExpandedText = x.StackTrace;  		TaskDialogButton Copy = new TaskDialogButton ("Copy"' "Copy Details to Clipboard");  		Copy.Click += (o' f) =>  {  			Clipboard.SetDataObject (x.StackTrace' true' 10' 200);  		};  		TaskDialogButton Close = new TaskDialogButton ("Close"' "Close");  		Close.Click += (o' f) =>  {  			td.Close ();  		};  		td.Controls.Add (Copy);  		td.Controls.Add (Close);  	}  	Clear ();  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,lCached_Click,The following statement contains a magic number: try {  	Folder f = (Folder)treeView1.SelectedNode.Tag;  	if (f.IsDeleted) {  		return;  	}  	foreach (Folder Fol in f.Folders ()) {  		if (Fol.Name.ToLower () == (n.Selected.ToLower ())) {  			MessageBox.Show ("Folder already exists!"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  		}  	}  	f.CreateNewFolder (n.Selected);  	treeView1.SelectedNode.Tag = f;  }  catch (Exception x) {  	if (!Aero) {  		MessageBox.Show ("An exception was thrown: " + x.Message + "\r\n\r\nIf this appears to be a bug' press CTRL + C to copy the stack trace' then please email it to me at clkxu5@gmail.com:\r\n" + x.StackTrace);  	}  	else {  		TaskDialog td = new TaskDialog ();  		td.Caption = "Unhandled Exception";  		td.InstructionText = "An Unhandled Exception was Thrown";  		td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message);  		td.DetailsCollapsedLabel = "Details";  		td.DetailsExpandedLabel = "Details";  		td.DetailsExpandedText = x.StackTrace;  		TaskDialogButton Copy = new TaskDialogButton ("Copy"' "Copy Details to Clipboard");  		Copy.Click += (o' f) =>  {  			Clipboard.SetDataObject (x.StackTrace' true' 10' 200);  		};  		TaskDialogButton Close = new TaskDialogButton ("Close"' "Close");  		Close.Click += (o' f) =>  {  			td.Close ();  		};  		td.Controls.Add (Copy);  		td.Controls.Add (Close);  	}  	Clear ();  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,lCached_Click,The following statement contains a magic number: if (!Aero) {  	MessageBox.Show ("An exception was thrown: " + x.Message + "\r\n\r\nIf this appears to be a bug' press CTRL + C to copy the stack trace' then please email it to me at clkxu5@gmail.com:\r\n" + x.StackTrace);  }  else {  	TaskDialog td = new TaskDialog ();  	td.Caption = "Unhandled Exception";  	td.InstructionText = "An Unhandled Exception was Thrown";  	td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message);  	td.DetailsCollapsedLabel = "Details";  	td.DetailsExpandedLabel = "Details";  	td.DetailsExpandedText = x.StackTrace;  	TaskDialogButton Copy = new TaskDialogButton ("Copy"' "Copy Details to Clipboard");  	Copy.Click += (o' f) =>  {  		Clipboard.SetDataObject (x.StackTrace' true' 10' 200);  	};  	TaskDialogButton Close = new TaskDialogButton ("Close"' "Close");  	Close.Click += (o' f) =>  {  		td.Close ();  	};  	td.Controls.Add (Copy);  	td.Controls.Add (Close);  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,lCached_Click,The following statement contains a magic number: if (!Aero) {  	MessageBox.Show ("An exception was thrown: " + x.Message + "\r\n\r\nIf this appears to be a bug' press CTRL + C to copy the stack trace' then please email it to me at clkxu5@gmail.com:\r\n" + x.StackTrace);  }  else {  	TaskDialog td = new TaskDialog ();  	td.Caption = "Unhandled Exception";  	td.InstructionText = "An Unhandled Exception was Thrown";  	td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message);  	td.DetailsCollapsedLabel = "Details";  	td.DetailsExpandedLabel = "Details";  	td.DetailsExpandedText = x.StackTrace;  	TaskDialogButton Copy = new TaskDialogButton ("Copy"' "Copy Details to Clipboard");  	Copy.Click += (o' f) =>  {  		Clipboard.SetDataObject (x.StackTrace' true' 10' 200);  	};  	TaskDialogButton Close = new TaskDialogButton ("Close"' "Close");  	Close.Click += (o' f) =>  {  		td.Close ();  	};  	td.Controls.Add (Copy);  	td.Controls.Add (Close);  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,lCached_Click,The following statement contains a magic number: Copy.Click += (o' f) =>  {  	Clipboard.SetDataObject (x.StackTrace' true' 10' 200);  };  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,lCached_Click,The following statement contains a magic number: Copy.Click += (o' f) =>  {  	Clipboard.SetDataObject (x.StackTrace' true' 10' 200);  };  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,lCached_Click,The following statement contains a magic number: Clipboard.SetDataObject (x.StackTrace' true' 10' 200);  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,lCached_Click,The following statement contains a magic number: Clipboard.SetDataObject (x.StackTrace' true' 10' 200);  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,tCached_Click,The following statement contains a magic number: if (n.ShowDialog () == DialogResult.OK) {  	try {  		Folder f = (Folder)rightClickedNode.Tag;  		if (!f.IsDeleted) {  			foreach (Folder Fol in f.Folders ()) {  				if (Fol.Name.ToLower () == (n.Selected.ToLower ())) {  					MessageBox.Show ("Folder already exists!"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  				}  			}  			f.CreateNewFolder (n.Selected);  			rightClickedNode.Tag = f;  		}  	}  	catch (Exception x) {  		if (!Aero) {  			MessageBox.Show ("An exception was thrown: " + x.Message + "\r\n\r\nIf this appears to be a bug' press CTRL + C to copy the stack trace' then please email it to me at clkxu5@gmail.com:\r\n" + x.StackTrace);  		}  		else {  			TaskDialog td = new TaskDialog ();  			td.Caption = "Unhandled Exception";  			td.InstructionText = "An Unhandled Exception was Thrown";  			td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message);  			td.DetailsCollapsedLabel = "Details";  			td.DetailsExpandedLabel = "Details";  			td.DetailsExpandedText = x.StackTrace;  			TaskDialogButton Copy = new TaskDialogButton ("Copy"' "Copy Details to Clipboard");  			Copy.Click += (o' f) =>  {  				Clipboard.SetDataObject (x.StackTrace' true' 10' 200);  			};  			TaskDialogButton Close = new TaskDialogButton ("Close"' "Close");  			Close.Click += (o' f) =>  {  				td.Close ();  			};  			td.Controls.Add (Copy);  			td.Controls.Add (Close);  		}  		Clear ();  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,tCached_Click,The following statement contains a magic number: if (n.ShowDialog () == DialogResult.OK) {  	try {  		Folder f = (Folder)rightClickedNode.Tag;  		if (!f.IsDeleted) {  			foreach (Folder Fol in f.Folders ()) {  				if (Fol.Name.ToLower () == (n.Selected.ToLower ())) {  					MessageBox.Show ("Folder already exists!"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  				}  			}  			f.CreateNewFolder (n.Selected);  			rightClickedNode.Tag = f;  		}  	}  	catch (Exception x) {  		if (!Aero) {  			MessageBox.Show ("An exception was thrown: " + x.Message + "\r\n\r\nIf this appears to be a bug' press CTRL + C to copy the stack trace' then please email it to me at clkxu5@gmail.com:\r\n" + x.StackTrace);  		}  		else {  			TaskDialog td = new TaskDialog ();  			td.Caption = "Unhandled Exception";  			td.InstructionText = "An Unhandled Exception was Thrown";  			td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message);  			td.DetailsCollapsedLabel = "Details";  			td.DetailsExpandedLabel = "Details";  			td.DetailsExpandedText = x.StackTrace;  			TaskDialogButton Copy = new TaskDialogButton ("Copy"' "Copy Details to Clipboard");  			Copy.Click += (o' f) =>  {  				Clipboard.SetDataObject (x.StackTrace' true' 10' 200);  			};  			TaskDialogButton Close = new TaskDialogButton ("Close"' "Close");  			Close.Click += (o' f) =>  {  				td.Close ();  			};  			td.Controls.Add (Copy);  			td.Controls.Add (Close);  		}  		Clear ();  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,tCached_Click,The following statement contains a magic number: try {  	Folder f = (Folder)rightClickedNode.Tag;  	if (!f.IsDeleted) {  		foreach (Folder Fol in f.Folders ()) {  			if (Fol.Name.ToLower () == (n.Selected.ToLower ())) {  				MessageBox.Show ("Folder already exists!"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  			}  		}  		f.CreateNewFolder (n.Selected);  		rightClickedNode.Tag = f;  	}  }  catch (Exception x) {  	if (!Aero) {  		MessageBox.Show ("An exception was thrown: " + x.Message + "\r\n\r\nIf this appears to be a bug' press CTRL + C to copy the stack trace' then please email it to me at clkxu5@gmail.com:\r\n" + x.StackTrace);  	}  	else {  		TaskDialog td = new TaskDialog ();  		td.Caption = "Unhandled Exception";  		td.InstructionText = "An Unhandled Exception was Thrown";  		td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message);  		td.DetailsCollapsedLabel = "Details";  		td.DetailsExpandedLabel = "Details";  		td.DetailsExpandedText = x.StackTrace;  		TaskDialogButton Copy = new TaskDialogButton ("Copy"' "Copy Details to Clipboard");  		Copy.Click += (o' f) =>  {  			Clipboard.SetDataObject (x.StackTrace' true' 10' 200);  		};  		TaskDialogButton Close = new TaskDialogButton ("Close"' "Close");  		Close.Click += (o' f) =>  {  			td.Close ();  		};  		td.Controls.Add (Copy);  		td.Controls.Add (Close);  	}  	Clear ();  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,tCached_Click,The following statement contains a magic number: try {  	Folder f = (Folder)rightClickedNode.Tag;  	if (!f.IsDeleted) {  		foreach (Folder Fol in f.Folders ()) {  			if (Fol.Name.ToLower () == (n.Selected.ToLower ())) {  				MessageBox.Show ("Folder already exists!"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  			}  		}  		f.CreateNewFolder (n.Selected);  		rightClickedNode.Tag = f;  	}  }  catch (Exception x) {  	if (!Aero) {  		MessageBox.Show ("An exception was thrown: " + x.Message + "\r\n\r\nIf this appears to be a bug' press CTRL + C to copy the stack trace' then please email it to me at clkxu5@gmail.com:\r\n" + x.StackTrace);  	}  	else {  		TaskDialog td = new TaskDialog ();  		td.Caption = "Unhandled Exception";  		td.InstructionText = "An Unhandled Exception was Thrown";  		td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message);  		td.DetailsCollapsedLabel = "Details";  		td.DetailsExpandedLabel = "Details";  		td.DetailsExpandedText = x.StackTrace;  		TaskDialogButton Copy = new TaskDialogButton ("Copy"' "Copy Details to Clipboard");  		Copy.Click += (o' f) =>  {  			Clipboard.SetDataObject (x.StackTrace' true' 10' 200);  		};  		TaskDialogButton Close = new TaskDialogButton ("Close"' "Close");  		Close.Click += (o' f) =>  {  			td.Close ();  		};  		td.Controls.Add (Copy);  		td.Controls.Add (Close);  	}  	Clear ();  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,tCached_Click,The following statement contains a magic number: if (!Aero) {  	MessageBox.Show ("An exception was thrown: " + x.Message + "\r\n\r\nIf this appears to be a bug' press CTRL + C to copy the stack trace' then please email it to me at clkxu5@gmail.com:\r\n" + x.StackTrace);  }  else {  	TaskDialog td = new TaskDialog ();  	td.Caption = "Unhandled Exception";  	td.InstructionText = "An Unhandled Exception was Thrown";  	td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message);  	td.DetailsCollapsedLabel = "Details";  	td.DetailsExpandedLabel = "Details";  	td.DetailsExpandedText = x.StackTrace;  	TaskDialogButton Copy = new TaskDialogButton ("Copy"' "Copy Details to Clipboard");  	Copy.Click += (o' f) =>  {  		Clipboard.SetDataObject (x.StackTrace' true' 10' 200);  	};  	TaskDialogButton Close = new TaskDialogButton ("Close"' "Close");  	Close.Click += (o' f) =>  {  		td.Close ();  	};  	td.Controls.Add (Copy);  	td.Controls.Add (Close);  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,tCached_Click,The following statement contains a magic number: if (!Aero) {  	MessageBox.Show ("An exception was thrown: " + x.Message + "\r\n\r\nIf this appears to be a bug' press CTRL + C to copy the stack trace' then please email it to me at clkxu5@gmail.com:\r\n" + x.StackTrace);  }  else {  	TaskDialog td = new TaskDialog ();  	td.Caption = "Unhandled Exception";  	td.InstructionText = "An Unhandled Exception was Thrown";  	td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message);  	td.DetailsCollapsedLabel = "Details";  	td.DetailsExpandedLabel = "Details";  	td.DetailsExpandedText = x.StackTrace;  	TaskDialogButton Copy = new TaskDialogButton ("Copy"' "Copy Details to Clipboard");  	Copy.Click += (o' f) =>  {  		Clipboard.SetDataObject (x.StackTrace' true' 10' 200);  	};  	TaskDialogButton Close = new TaskDialogButton ("Close"' "Close");  	Close.Click += (o' f) =>  {  		td.Close ();  	};  	td.Controls.Add (Copy);  	td.Controls.Add (Close);  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,tCached_Click,The following statement contains a magic number: Copy.Click += (o' f) =>  {  	Clipboard.SetDataObject (x.StackTrace' true' 10' 200);  };  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,tCached_Click,The following statement contains a magic number: Copy.Click += (o' f) =>  {  	Clipboard.SetDataObject (x.StackTrace' true' 10' 200);  };  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,tCached_Click,The following statement contains a magic number: Clipboard.SetDataObject (x.StackTrace' true' 10' 200);  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,tCached_Click,The following statement contains a magic number: Clipboard.SetDataObject (x.StackTrace' true' 10' 200);  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_AddLabel_Click,The following statement contains a magic number: if (al.ShowDialog () == DialogResult.OK) {  	rightClickedNode.Text = rightClickedNode.Name + " | " + al.Label;  	if (rightClickedNode.Parent == treeView1.SelectedNode) {  		ListViewItem li = listView1.Items.Find (rightClickedNode.Name' false) [0];  		if (li.SubItems.Count == 5) {  			li.SubItems [4].Text = al.Label;  		}  		else {  			li.SubItems.Add (al.Label);  		}  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_AddLabel_Click,The following statement contains a magic number: if (al.ShowDialog () == DialogResult.OK) {  	rightClickedNode.Text = rightClickedNode.Name + " | " + al.Label;  	if (rightClickedNode.Parent == treeView1.SelectedNode) {  		ListViewItem li = listView1.Items.Find (rightClickedNode.Name' false) [0];  		if (li.SubItems.Count == 5) {  			li.SubItems [4].Text = al.Label;  		}  		else {  			li.SubItems.Add (al.Label);  		}  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_AddLabel_Click,The following statement contains a magic number: if (rightClickedNode.Parent == treeView1.SelectedNode) {  	ListViewItem li = listView1.Items.Find (rightClickedNode.Name' false) [0];  	if (li.SubItems.Count == 5) {  		li.SubItems [4].Text = al.Label;  	}  	else {  		li.SubItems.Add (al.Label);  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_AddLabel_Click,The following statement contains a magic number: if (rightClickedNode.Parent == treeView1.SelectedNode) {  	ListViewItem li = listView1.Items.Find (rightClickedNode.Name' false) [0];  	if (li.SubItems.Count == 5) {  		li.SubItems [4].Text = al.Label;  	}  	else {  		li.SubItems.Add (al.Label);  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_AddLabel_Click,The following statement contains a magic number: if (li.SubItems.Count == 5) {  	li.SubItems [4].Text = al.Label;  }  else {  	li.SubItems.Add (al.Label);  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_AddLabel_Click,The following statement contains a magic number: if (li.SubItems.Count == 5) {  	li.SubItems [4].Text = al.Label;  }  else {  	li.SubItems.Add (al.Label);  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,t_AddLabel_Click,The following statement contains a magic number: li.SubItems [4].Text = al.Label;  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem9_Click,The following statement contains a magic number: if (dr == DialogResult.OK) {  	List<string> filePaths = new List<string> ();  	for (int i = 0; i < 10000; i++) {  		string extra = "";  		if (i < 10) {  			extra = "000";  		}  		else if (i < 100) {  			extra = "00";  		}  		else if (i < 1000) {  			extra = "0";  		}  		if (System.IO.File.Exists (Path + "\\Data" + extra + i.ToString ())) {  			filePaths.Add (Path + "\\Data" + extra + i.ToString ());  		}  		else {  			break;  		}  	}  	Drive d = new Drive (filePaths.ToArray ());  	if (filePaths.Count < 3 || !d.IsFATXDrive ()) {  		if (Aero) {  			Microsoft.WindowsAPICodePack.Dialogs.TaskDialog td = new Microsoft.WindowsAPICodePack.Dialogs.TaskDialog ();  			td.Caption = "Files not valid";  			td.Text = "The selected path doesn't contain a valid USB backup/dump.";  			td.InstructionText = "Files Not Valid";  			td.Icon = TaskDialogStandardIcon.Error;  			td.ShowDialog (this.Handle);  		}  		else {  			MessageBox.Show ("The selected path doesn't contain a valid USB backup/dump."' "Files Not Valid"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  	}  	else {  		if (Drive != null) {  			Drive.Close ();  		}  		Drive = d;  		LoadDrive ();  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem9_Click,The following statement contains a magic number: if (dr == DialogResult.OK) {  	List<string> filePaths = new List<string> ();  	for (int i = 0; i < 10000; i++) {  		string extra = "";  		if (i < 10) {  			extra = "000";  		}  		else if (i < 100) {  			extra = "00";  		}  		else if (i < 1000) {  			extra = "0";  		}  		if (System.IO.File.Exists (Path + "\\Data" + extra + i.ToString ())) {  			filePaths.Add (Path + "\\Data" + extra + i.ToString ());  		}  		else {  			break;  		}  	}  	Drive d = new Drive (filePaths.ToArray ());  	if (filePaths.Count < 3 || !d.IsFATXDrive ()) {  		if (Aero) {  			Microsoft.WindowsAPICodePack.Dialogs.TaskDialog td = new Microsoft.WindowsAPICodePack.Dialogs.TaskDialog ();  			td.Caption = "Files not valid";  			td.Text = "The selected path doesn't contain a valid USB backup/dump.";  			td.InstructionText = "Files Not Valid";  			td.Icon = TaskDialogStandardIcon.Error;  			td.ShowDialog (this.Handle);  		}  		else {  			MessageBox.Show ("The selected path doesn't contain a valid USB backup/dump."' "Files Not Valid"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  	}  	else {  		if (Drive != null) {  			Drive.Close ();  		}  		Drive = d;  		LoadDrive ();  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem9_Click,The following statement contains a magic number: if (dr == DialogResult.OK) {  	List<string> filePaths = new List<string> ();  	for (int i = 0; i < 10000; i++) {  		string extra = "";  		if (i < 10) {  			extra = "000";  		}  		else if (i < 100) {  			extra = "00";  		}  		else if (i < 1000) {  			extra = "0";  		}  		if (System.IO.File.Exists (Path + "\\Data" + extra + i.ToString ())) {  			filePaths.Add (Path + "\\Data" + extra + i.ToString ());  		}  		else {  			break;  		}  	}  	Drive d = new Drive (filePaths.ToArray ());  	if (filePaths.Count < 3 || !d.IsFATXDrive ()) {  		if (Aero) {  			Microsoft.WindowsAPICodePack.Dialogs.TaskDialog td = new Microsoft.WindowsAPICodePack.Dialogs.TaskDialog ();  			td.Caption = "Files not valid";  			td.Text = "The selected path doesn't contain a valid USB backup/dump.";  			td.InstructionText = "Files Not Valid";  			td.Icon = TaskDialogStandardIcon.Error;  			td.ShowDialog (this.Handle);  		}  		else {  			MessageBox.Show ("The selected path doesn't contain a valid USB backup/dump."' "Files Not Valid"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  	}  	else {  		if (Drive != null) {  			Drive.Close ();  		}  		Drive = d;  		LoadDrive ();  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem9_Click,The following statement contains a magic number: if (dr == DialogResult.OK) {  	List<string> filePaths = new List<string> ();  	for (int i = 0; i < 10000; i++) {  		string extra = "";  		if (i < 10) {  			extra = "000";  		}  		else if (i < 100) {  			extra = "00";  		}  		else if (i < 1000) {  			extra = "0";  		}  		if (System.IO.File.Exists (Path + "\\Data" + extra + i.ToString ())) {  			filePaths.Add (Path + "\\Data" + extra + i.ToString ());  		}  		else {  			break;  		}  	}  	Drive d = new Drive (filePaths.ToArray ());  	if (filePaths.Count < 3 || !d.IsFATXDrive ()) {  		if (Aero) {  			Microsoft.WindowsAPICodePack.Dialogs.TaskDialog td = new Microsoft.WindowsAPICodePack.Dialogs.TaskDialog ();  			td.Caption = "Files not valid";  			td.Text = "The selected path doesn't contain a valid USB backup/dump.";  			td.InstructionText = "Files Not Valid";  			td.Icon = TaskDialogStandardIcon.Error;  			td.ShowDialog (this.Handle);  		}  		else {  			MessageBox.Show ("The selected path doesn't contain a valid USB backup/dump."' "Files Not Valid"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  	}  	else {  		if (Drive != null) {  			Drive.Close ();  		}  		Drive = d;  		LoadDrive ();  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem9_Click,The following statement contains a magic number: if (dr == DialogResult.OK) {  	List<string> filePaths = new List<string> ();  	for (int i = 0; i < 10000; i++) {  		string extra = "";  		if (i < 10) {  			extra = "000";  		}  		else if (i < 100) {  			extra = "00";  		}  		else if (i < 1000) {  			extra = "0";  		}  		if (System.IO.File.Exists (Path + "\\Data" + extra + i.ToString ())) {  			filePaths.Add (Path + "\\Data" + extra + i.ToString ());  		}  		else {  			break;  		}  	}  	Drive d = new Drive (filePaths.ToArray ());  	if (filePaths.Count < 3 || !d.IsFATXDrive ()) {  		if (Aero) {  			Microsoft.WindowsAPICodePack.Dialogs.TaskDialog td = new Microsoft.WindowsAPICodePack.Dialogs.TaskDialog ();  			td.Caption = "Files not valid";  			td.Text = "The selected path doesn't contain a valid USB backup/dump.";  			td.InstructionText = "Files Not Valid";  			td.Icon = TaskDialogStandardIcon.Error;  			td.ShowDialog (this.Handle);  		}  		else {  			MessageBox.Show ("The selected path doesn't contain a valid USB backup/dump."' "Files Not Valid"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  	}  	else {  		if (Drive != null) {  			Drive.Close ();  		}  		Drive = d;  		LoadDrive ();  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem9_Click,The following statement contains a magic number: for (int i = 0; i < 10000; i++) {  	string extra = "";  	if (i < 10) {  		extra = "000";  	}  	else if (i < 100) {  		extra = "00";  	}  	else if (i < 1000) {  		extra = "0";  	}  	if (System.IO.File.Exists (Path + "\\Data" + extra + i.ToString ())) {  		filePaths.Add (Path + "\\Data" + extra + i.ToString ());  	}  	else {  		break;  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem9_Click,The following statement contains a magic number: for (int i = 0; i < 10000; i++) {  	string extra = "";  	if (i < 10) {  		extra = "000";  	}  	else if (i < 100) {  		extra = "00";  	}  	else if (i < 1000) {  		extra = "0";  	}  	if (System.IO.File.Exists (Path + "\\Data" + extra + i.ToString ())) {  		filePaths.Add (Path + "\\Data" + extra + i.ToString ());  	}  	else {  		break;  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem9_Click,The following statement contains a magic number: for (int i = 0; i < 10000; i++) {  	string extra = "";  	if (i < 10) {  		extra = "000";  	}  	else if (i < 100) {  		extra = "00";  	}  	else if (i < 1000) {  		extra = "0";  	}  	if (System.IO.File.Exists (Path + "\\Data" + extra + i.ToString ())) {  		filePaths.Add (Path + "\\Data" + extra + i.ToString ());  	}  	else {  		break;  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem9_Click,The following statement contains a magic number: for (int i = 0; i < 10000; i++) {  	string extra = "";  	if (i < 10) {  		extra = "000";  	}  	else if (i < 100) {  		extra = "00";  	}  	else if (i < 1000) {  		extra = "0";  	}  	if (System.IO.File.Exists (Path + "\\Data" + extra + i.ToString ())) {  		filePaths.Add (Path + "\\Data" + extra + i.ToString ());  	}  	else {  		break;  	}  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem9_Click,The following statement contains a magic number: if (i < 10) {  	extra = "000";  }  else if (i < 100) {  	extra = "00";  }  else if (i < 1000) {  	extra = "0";  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem9_Click,The following statement contains a magic number: if (i < 10) {  	extra = "000";  }  else if (i < 100) {  	extra = "00";  }  else if (i < 1000) {  	extra = "0";  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem9_Click,The following statement contains a magic number: if (i < 10) {  	extra = "000";  }  else if (i < 100) {  	extra = "00";  }  else if (i < 1000) {  	extra = "0";  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem9_Click,The following statement contains a magic number: if (i < 100) {  	extra = "00";  }  else if (i < 1000) {  	extra = "0";  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem9_Click,The following statement contains a magic number: if (i < 100) {  	extra = "00";  }  else if (i < 1000) {  	extra = "0";  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem9_Click,The following statement contains a magic number: if (i < 1000) {  	extra = "0";  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,menuItem9_Click,The following statement contains a magic number: if (filePaths.Count < 3 || !d.IsFATXDrive ()) {  	if (Aero) {  		Microsoft.WindowsAPICodePack.Dialogs.TaskDialog td = new Microsoft.WindowsAPICodePack.Dialogs.TaskDialog ();  		td.Caption = "Files not valid";  		td.Text = "The selected path doesn't contain a valid USB backup/dump.";  		td.InstructionText = "Files Not Valid";  		td.Icon = TaskDialogStandardIcon.Error;  		td.ShowDialog (this.Handle);  	}  	else {  		MessageBox.Show ("The selected path doesn't contain a valid USB backup/dump."' "Files Not Valid"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  else {  	if (Drive != null) {  		Drive.Close ();  	}  	Drive = d;  	LoadDrive ();  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,size16_Click,The following statement contains a magic number: Properties.Settings.Default.treeViewIconWidthHeight = 16;  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,size24_Click,The following statement contains a magic number: Properties.Settings.Default.treeViewIconWidthHeight = 24;  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,size32_Click,The following statement contains a magic number: Properties.Settings.Default.treeViewIconWidthHeight = 64;  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,size64_Click,The following statement contains a magic number: Properties.Settings.Default.treeViewIconWidthHeight = 64;  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,reCache_Click,The following statement contains a magic number: if (new System.IO.DirectoryInfo (Cache.ImageCachePath).GetFiles ().Length > 0) {  	System.Threading.Thread t = new System.Threading.Thread ((System.Threading.ThreadStart)delegate {  		Image rootImage = treeView1.ImageList.Images [0];  		string rootKey = treeView1.ImageList.Images.Keys [0];  		List<string> UsedImages = new List<string> ();  		this.Invoke ((MethodInvoker)delegate {  			for (int i = 6; i < treeView1.ImageList.Images.Count; i++) {  				UsedImages.Add (treeView1.ImageList.Images.Keys [i]);  			}  			// Clear the set imagelists so we don't get an error about how the file is being used...  			treeView1.ImageList = SmallListForFATX;  			listView1.LargeImageList = LargeListForFATX;  			listView1.SmallImageList = SmallListForFATX;  		});  		foreach (System.IO.FileInfo fi in new System.IO.DirectoryInfo (Cache.ImageCachePath).GetFiles ().Where (name => name.Name.Length == 12)) {  			// Get the title ID  			string TitleID = System.IO.Path.GetFileNameWithoutExtension (fi.FullName);  			if (!Cache.IsTitleIDFolder (TitleID)) {  				continue;  			}  			// Create a webrequest for the image  			try {  				this.Invoke ((MethodInvoker)delegate {  					l_selectedItems.Text = "Downloading " + System.IO.Path.GetFileNameWithoutExtension (fi.Name) + "...";  				});  				System.Net.HttpWebRequest wr = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (string.Format ("http://avatar.xboxlive.com/global/t.{0}/icon/0/8000"' TitleID));  				// Get the image  				Image i = Image.FromStream (wr.GetResponse ().GetResponseStream ());  				// Delete the file  				fi.Delete ();  				// Save the image  				Cache.AddIcon (i' TitleID);  			}  			catch (Exception E) {  				continue;  			}  		}  		// Cache ones that have no icon as well  		foreach (string s in Properties.Settings.Default.cachedID) {  			if (!new System.IO.DirectoryInfo (Cache.ImageCachePath).GetFiles ().Contains (new System.IO.FileInfo (Cache.ImageCachePath + "\\" + s + ".png"))) {  				// Get the title ID  				string TitleID = s;  				// Create a webrequest for the image  				try {  					this.Invoke ((MethodInvoker)delegate {  						l_selectedItems.Text = "Downloading " + System.IO.Path.GetFileNameWithoutExtension (s + ".png") + "...";  					});  					System.Net.HttpWebRequest wr = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (string.Format ("http://avatar.xboxlive.com/global/t.{0}/icon/0/8000"' TitleID));  					// Get the image  					Image i = Image.FromStream (wr.GetResponse ().GetResponseStream ());  					// Save the image  					Cache.AddIcon (i' s.ToUpper ());  					UsedImages.Add (s);  				}  				catch (Exception E) {  					continue;  				}  			}  		}  		// Reset the imagelists  		foreach (string s in UsedImages) {  			Image i = Cache.GetIcon (s);  			this.Invoke ((MethodInvoker)delegate {  				treeView1.ImageList.Images.Add (s' i);  				listView1.SmallImageList.Images.Add (s' i);  				listView1.LargeImageList.Images.Add (s' i);  			});  		}  		treeView1.ImageList.Images [0] = rootImage;  		treeView1.ImageList.Images.Keys [0] = rootKey;  		this.Invoke ((MethodInvoker)delegate {  			l_selectedItems.Text = "Image re-caching complete!";  		});  	});  	t.Start ();  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,reCache_Click,The following statement contains a magic number: if (new System.IO.DirectoryInfo (Cache.ImageCachePath).GetFiles ().Length > 0) {  	System.Threading.Thread t = new System.Threading.Thread ((System.Threading.ThreadStart)delegate {  		Image rootImage = treeView1.ImageList.Images [0];  		string rootKey = treeView1.ImageList.Images.Keys [0];  		List<string> UsedImages = new List<string> ();  		this.Invoke ((MethodInvoker)delegate {  			for (int i = 6; i < treeView1.ImageList.Images.Count; i++) {  				UsedImages.Add (treeView1.ImageList.Images.Keys [i]);  			}  			// Clear the set imagelists so we don't get an error about how the file is being used...  			treeView1.ImageList = SmallListForFATX;  			listView1.LargeImageList = LargeListForFATX;  			listView1.SmallImageList = SmallListForFATX;  		});  		foreach (System.IO.FileInfo fi in new System.IO.DirectoryInfo (Cache.ImageCachePath).GetFiles ().Where (name => name.Name.Length == 12)) {  			// Get the title ID  			string TitleID = System.IO.Path.GetFileNameWithoutExtension (fi.FullName);  			if (!Cache.IsTitleIDFolder (TitleID)) {  				continue;  			}  			// Create a webrequest for the image  			try {  				this.Invoke ((MethodInvoker)delegate {  					l_selectedItems.Text = "Downloading " + System.IO.Path.GetFileNameWithoutExtension (fi.Name) + "...";  				});  				System.Net.HttpWebRequest wr = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (string.Format ("http://avatar.xboxlive.com/global/t.{0}/icon/0/8000"' TitleID));  				// Get the image  				Image i = Image.FromStream (wr.GetResponse ().GetResponseStream ());  				// Delete the file  				fi.Delete ();  				// Save the image  				Cache.AddIcon (i' TitleID);  			}  			catch (Exception E) {  				continue;  			}  		}  		// Cache ones that have no icon as well  		foreach (string s in Properties.Settings.Default.cachedID) {  			if (!new System.IO.DirectoryInfo (Cache.ImageCachePath).GetFiles ().Contains (new System.IO.FileInfo (Cache.ImageCachePath + "\\" + s + ".png"))) {  				// Get the title ID  				string TitleID = s;  				// Create a webrequest for the image  				try {  					this.Invoke ((MethodInvoker)delegate {  						l_selectedItems.Text = "Downloading " + System.IO.Path.GetFileNameWithoutExtension (s + ".png") + "...";  					});  					System.Net.HttpWebRequest wr = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (string.Format ("http://avatar.xboxlive.com/global/t.{0}/icon/0/8000"' TitleID));  					// Get the image  					Image i = Image.FromStream (wr.GetResponse ().GetResponseStream ());  					// Save the image  					Cache.AddIcon (i' s.ToUpper ());  					UsedImages.Add (s);  				}  				catch (Exception E) {  					continue;  				}  			}  		}  		// Reset the imagelists  		foreach (string s in UsedImages) {  			Image i = Cache.GetIcon (s);  			this.Invoke ((MethodInvoker)delegate {  				treeView1.ImageList.Images.Add (s' i);  				listView1.SmallImageList.Images.Add (s' i);  				listView1.LargeImageList.Images.Add (s' i);  			});  		}  		treeView1.ImageList.Images [0] = rootImage;  		treeView1.ImageList.Images.Keys [0] = rootKey;  		this.Invoke ((MethodInvoker)delegate {  			l_selectedItems.Text = "Image re-caching complete!";  		});  	});  	t.Start ();  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,reCache_Click,The following statement contains a magic number: this.Invoke ((MethodInvoker)delegate {  	for (int i = 6; i < treeView1.ImageList.Images.Count; i++) {  		UsedImages.Add (treeView1.ImageList.Images.Keys [i]);  	}  	// Clear the set imagelists so we don't get an error about how the file is being used...  	treeView1.ImageList = SmallListForFATX;  	listView1.LargeImageList = LargeListForFATX;  	listView1.SmallImageList = SmallListForFATX;  });  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,reCache_Click,The following statement contains a magic number: for (int i = 6; i < treeView1.ImageList.Images.Count; i++) {  	UsedImages.Add (treeView1.ImageList.Images.Keys [i]);  }  
Magic Number,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,reCache_Click,The following statement contains a magic number: foreach (System.IO.FileInfo fi in new System.IO.DirectoryInfo (Cache.ImageCachePath).GetFiles ().Where (name => name.Name.Length == 12)) {  	// Get the title ID  	string TitleID = System.IO.Path.GetFileNameWithoutExtension (fi.FullName);  	if (!Cache.IsTitleIDFolder (TitleID)) {  		continue;  	}  	// Create a webrequest for the image  	try {  		this.Invoke ((MethodInvoker)delegate {  			l_selectedItems.Text = "Downloading " + System.IO.Path.GetFileNameWithoutExtension (fi.Name) + "...";  		});  		System.Net.HttpWebRequest wr = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (string.Format ("http://avatar.xboxlive.com/global/t.{0}/icon/0/8000"' TitleID));  		// Get the image  		Image i = Image.FromStream (wr.GetResponse ().GetResponseStream ());  		// Delete the file  		fi.Delete ();  		// Save the image  		Cache.AddIcon (i' TitleID);  	}  	catch (Exception E) {  		continue;  	}  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: try {  	System.Net.HttpWebRequest wr = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (relativeURL.ToString ());  	wr.UserAgent = "PARTY BUFFALO\r\n";  	System.Net.WebResponse response = wr.GetResponse ();  	Stream responseStream = response.GetResponseStream ();  	System.Xml.XmlTextReader r = new System.Xml.XmlTextReader (responseStream);  	while (r.Read ()) {  		if (r.NodeType == System.Xml.XmlNodeType.Element) {  			// If we're getting the current version that's available  			if (r.Name == "CurrentVersion") {  				// Set the update version to the inner text  				info.UpdateVersion = r.ReadInnerXml ();  				// Split it at every instance of a period so that  				// we can compare each number individually  				CurrentVersion = info.UpdateVersion.Split ('.');  				// Get our current version' split that as well  				string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  				// Create new int arrays that contain the current &  				// updated versions  				int[] Current = new int[4];  				int[] App = new int[4];  				// Set their indexes accordingly  				for (int i = 0; i < Current.Length; i++) {  					Current [i] = Convert.ToInt32 (CurrentVersion [i]);  					App [i] = Convert.ToInt32 (AppVersion [i]);  				}  				// If the major is larger than current' there's an update  				if (Current [0] > App [0]) {  					info.Update = true;  					return info;  				}  				else if (Current [0] < App [0]) {  					return info;  				}  				// If the minor is larger than the current' there's an update :O  				if (Current [1] > App [1]) {  					info.Update = true;  					return info;  				}  				else if (Current [1] < App [1]) {  					return info;  				}  				// Same for build  				if (Current [2] > App [2]) {  					info.Update = true;  					return info;  				}  				else if (Current [2] < App [2]) {  					return info;  				}  				// Same for revision  				if (Current [3] > App [3]) {  					info.Update = true;  					return info;  				}  				else if (Current [3] < App [3]) {  					return info;  				}  				// None of those guys returned anything -- they must have  				// the current version' return our info  				return info;  			}  			if (r.Name == "UpdateFixes") {  				info.UpdateText = r.ReadInnerXml ();  			}  			if (r.Name == "UpdatePath") {  				info.UpdatePath = r.ReadInnerXml ();  			}  			if (r.Name == "UpdateDLLPath") {  				info.UpdateDLLPath = r.ReadInnerXml ();  			}  			if (r.Name == "DLLNeeded") {  				if (r.ReadInnerXml () == "true") {  					info.DLLNeeded = true;  				}  				else {  					info.DLLNeeded = false;  				}  			}  			if (r.Name == "QuickMessage") {  				info.QuickMessage = r.ReadInnerXml ();  			}  		}  	}  }  catch {  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: try {  	System.Net.HttpWebRequest wr = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (relativeURL.ToString ());  	wr.UserAgent = "PARTY BUFFALO\r\n";  	System.Net.WebResponse response = wr.GetResponse ();  	Stream responseStream = response.GetResponseStream ();  	System.Xml.XmlTextReader r = new System.Xml.XmlTextReader (responseStream);  	while (r.Read ()) {  		if (r.NodeType == System.Xml.XmlNodeType.Element) {  			// If we're getting the current version that's available  			if (r.Name == "CurrentVersion") {  				// Set the update version to the inner text  				info.UpdateVersion = r.ReadInnerXml ();  				// Split it at every instance of a period so that  				// we can compare each number individually  				CurrentVersion = info.UpdateVersion.Split ('.');  				// Get our current version' split that as well  				string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  				// Create new int arrays that contain the current &  				// updated versions  				int[] Current = new int[4];  				int[] App = new int[4];  				// Set their indexes accordingly  				for (int i = 0; i < Current.Length; i++) {  					Current [i] = Convert.ToInt32 (CurrentVersion [i]);  					App [i] = Convert.ToInt32 (AppVersion [i]);  				}  				// If the major is larger than current' there's an update  				if (Current [0] > App [0]) {  					info.Update = true;  					return info;  				}  				else if (Current [0] < App [0]) {  					return info;  				}  				// If the minor is larger than the current' there's an update :O  				if (Current [1] > App [1]) {  					info.Update = true;  					return info;  				}  				else if (Current [1] < App [1]) {  					return info;  				}  				// Same for build  				if (Current [2] > App [2]) {  					info.Update = true;  					return info;  				}  				else if (Current [2] < App [2]) {  					return info;  				}  				// Same for revision  				if (Current [3] > App [3]) {  					info.Update = true;  					return info;  				}  				else if (Current [3] < App [3]) {  					return info;  				}  				// None of those guys returned anything -- they must have  				// the current version' return our info  				return info;  			}  			if (r.Name == "UpdateFixes") {  				info.UpdateText = r.ReadInnerXml ();  			}  			if (r.Name == "UpdatePath") {  				info.UpdatePath = r.ReadInnerXml ();  			}  			if (r.Name == "UpdateDLLPath") {  				info.UpdateDLLPath = r.ReadInnerXml ();  			}  			if (r.Name == "DLLNeeded") {  				if (r.ReadInnerXml () == "true") {  					info.DLLNeeded = true;  				}  				else {  					info.DLLNeeded = false;  				}  			}  			if (r.Name == "QuickMessage") {  				info.QuickMessage = r.ReadInnerXml ();  			}  		}  	}  }  catch {  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: try {  	System.Net.HttpWebRequest wr = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (relativeURL.ToString ());  	wr.UserAgent = "PARTY BUFFALO\r\n";  	System.Net.WebResponse response = wr.GetResponse ();  	Stream responseStream = response.GetResponseStream ();  	System.Xml.XmlTextReader r = new System.Xml.XmlTextReader (responseStream);  	while (r.Read ()) {  		if (r.NodeType == System.Xml.XmlNodeType.Element) {  			// If we're getting the current version that's available  			if (r.Name == "CurrentVersion") {  				// Set the update version to the inner text  				info.UpdateVersion = r.ReadInnerXml ();  				// Split it at every instance of a period so that  				// we can compare each number individually  				CurrentVersion = info.UpdateVersion.Split ('.');  				// Get our current version' split that as well  				string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  				// Create new int arrays that contain the current &  				// updated versions  				int[] Current = new int[4];  				int[] App = new int[4];  				// Set their indexes accordingly  				for (int i = 0; i < Current.Length; i++) {  					Current [i] = Convert.ToInt32 (CurrentVersion [i]);  					App [i] = Convert.ToInt32 (AppVersion [i]);  				}  				// If the major is larger than current' there's an update  				if (Current [0] > App [0]) {  					info.Update = true;  					return info;  				}  				else if (Current [0] < App [0]) {  					return info;  				}  				// If the minor is larger than the current' there's an update :O  				if (Current [1] > App [1]) {  					info.Update = true;  					return info;  				}  				else if (Current [1] < App [1]) {  					return info;  				}  				// Same for build  				if (Current [2] > App [2]) {  					info.Update = true;  					return info;  				}  				else if (Current [2] < App [2]) {  					return info;  				}  				// Same for revision  				if (Current [3] > App [3]) {  					info.Update = true;  					return info;  				}  				else if (Current [3] < App [3]) {  					return info;  				}  				// None of those guys returned anything -- they must have  				// the current version' return our info  				return info;  			}  			if (r.Name == "UpdateFixes") {  				info.UpdateText = r.ReadInnerXml ();  			}  			if (r.Name == "UpdatePath") {  				info.UpdatePath = r.ReadInnerXml ();  			}  			if (r.Name == "UpdateDLLPath") {  				info.UpdateDLLPath = r.ReadInnerXml ();  			}  			if (r.Name == "DLLNeeded") {  				if (r.ReadInnerXml () == "true") {  					info.DLLNeeded = true;  				}  				else {  					info.DLLNeeded = false;  				}  			}  			if (r.Name == "QuickMessage") {  				info.QuickMessage = r.ReadInnerXml ();  			}  		}  	}  }  catch {  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: try {  	System.Net.HttpWebRequest wr = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (relativeURL.ToString ());  	wr.UserAgent = "PARTY BUFFALO\r\n";  	System.Net.WebResponse response = wr.GetResponse ();  	Stream responseStream = response.GetResponseStream ();  	System.Xml.XmlTextReader r = new System.Xml.XmlTextReader (responseStream);  	while (r.Read ()) {  		if (r.NodeType == System.Xml.XmlNodeType.Element) {  			// If we're getting the current version that's available  			if (r.Name == "CurrentVersion") {  				// Set the update version to the inner text  				info.UpdateVersion = r.ReadInnerXml ();  				// Split it at every instance of a period so that  				// we can compare each number individually  				CurrentVersion = info.UpdateVersion.Split ('.');  				// Get our current version' split that as well  				string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  				// Create new int arrays that contain the current &  				// updated versions  				int[] Current = new int[4];  				int[] App = new int[4];  				// Set their indexes accordingly  				for (int i = 0; i < Current.Length; i++) {  					Current [i] = Convert.ToInt32 (CurrentVersion [i]);  					App [i] = Convert.ToInt32 (AppVersion [i]);  				}  				// If the major is larger than current' there's an update  				if (Current [0] > App [0]) {  					info.Update = true;  					return info;  				}  				else if (Current [0] < App [0]) {  					return info;  				}  				// If the minor is larger than the current' there's an update :O  				if (Current [1] > App [1]) {  					info.Update = true;  					return info;  				}  				else if (Current [1] < App [1]) {  					return info;  				}  				// Same for build  				if (Current [2] > App [2]) {  					info.Update = true;  					return info;  				}  				else if (Current [2] < App [2]) {  					return info;  				}  				// Same for revision  				if (Current [3] > App [3]) {  					info.Update = true;  					return info;  				}  				else if (Current [3] < App [3]) {  					return info;  				}  				// None of those guys returned anything -- they must have  				// the current version' return our info  				return info;  			}  			if (r.Name == "UpdateFixes") {  				info.UpdateText = r.ReadInnerXml ();  			}  			if (r.Name == "UpdatePath") {  				info.UpdatePath = r.ReadInnerXml ();  			}  			if (r.Name == "UpdateDLLPath") {  				info.UpdateDLLPath = r.ReadInnerXml ();  			}  			if (r.Name == "DLLNeeded") {  				if (r.ReadInnerXml () == "true") {  					info.DLLNeeded = true;  				}  				else {  					info.DLLNeeded = false;  				}  			}  			if (r.Name == "QuickMessage") {  				info.QuickMessage = r.ReadInnerXml ();  			}  		}  	}  }  catch {  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: try {  	System.Net.HttpWebRequest wr = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (relativeURL.ToString ());  	wr.UserAgent = "PARTY BUFFALO\r\n";  	System.Net.WebResponse response = wr.GetResponse ();  	Stream responseStream = response.GetResponseStream ();  	System.Xml.XmlTextReader r = new System.Xml.XmlTextReader (responseStream);  	while (r.Read ()) {  		if (r.NodeType == System.Xml.XmlNodeType.Element) {  			// If we're getting the current version that's available  			if (r.Name == "CurrentVersion") {  				// Set the update version to the inner text  				info.UpdateVersion = r.ReadInnerXml ();  				// Split it at every instance of a period so that  				// we can compare each number individually  				CurrentVersion = info.UpdateVersion.Split ('.');  				// Get our current version' split that as well  				string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  				// Create new int arrays that contain the current &  				// updated versions  				int[] Current = new int[4];  				int[] App = new int[4];  				// Set their indexes accordingly  				for (int i = 0; i < Current.Length; i++) {  					Current [i] = Convert.ToInt32 (CurrentVersion [i]);  					App [i] = Convert.ToInt32 (AppVersion [i]);  				}  				// If the major is larger than current' there's an update  				if (Current [0] > App [0]) {  					info.Update = true;  					return info;  				}  				else if (Current [0] < App [0]) {  					return info;  				}  				// If the minor is larger than the current' there's an update :O  				if (Current [1] > App [1]) {  					info.Update = true;  					return info;  				}  				else if (Current [1] < App [1]) {  					return info;  				}  				// Same for build  				if (Current [2] > App [2]) {  					info.Update = true;  					return info;  				}  				else if (Current [2] < App [2]) {  					return info;  				}  				// Same for revision  				if (Current [3] > App [3]) {  					info.Update = true;  					return info;  				}  				else if (Current [3] < App [3]) {  					return info;  				}  				// None of those guys returned anything -- they must have  				// the current version' return our info  				return info;  			}  			if (r.Name == "UpdateFixes") {  				info.UpdateText = r.ReadInnerXml ();  			}  			if (r.Name == "UpdatePath") {  				info.UpdatePath = r.ReadInnerXml ();  			}  			if (r.Name == "UpdateDLLPath") {  				info.UpdateDLLPath = r.ReadInnerXml ();  			}  			if (r.Name == "DLLNeeded") {  				if (r.ReadInnerXml () == "true") {  					info.DLLNeeded = true;  				}  				else {  					info.DLLNeeded = false;  				}  			}  			if (r.Name == "QuickMessage") {  				info.QuickMessage = r.ReadInnerXml ();  			}  		}  	}  }  catch {  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: try {  	System.Net.HttpWebRequest wr = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (relativeURL.ToString ());  	wr.UserAgent = "PARTY BUFFALO\r\n";  	System.Net.WebResponse response = wr.GetResponse ();  	Stream responseStream = response.GetResponseStream ();  	System.Xml.XmlTextReader r = new System.Xml.XmlTextReader (responseStream);  	while (r.Read ()) {  		if (r.NodeType == System.Xml.XmlNodeType.Element) {  			// If we're getting the current version that's available  			if (r.Name == "CurrentVersion") {  				// Set the update version to the inner text  				info.UpdateVersion = r.ReadInnerXml ();  				// Split it at every instance of a period so that  				// we can compare each number individually  				CurrentVersion = info.UpdateVersion.Split ('.');  				// Get our current version' split that as well  				string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  				// Create new int arrays that contain the current &  				// updated versions  				int[] Current = new int[4];  				int[] App = new int[4];  				// Set their indexes accordingly  				for (int i = 0; i < Current.Length; i++) {  					Current [i] = Convert.ToInt32 (CurrentVersion [i]);  					App [i] = Convert.ToInt32 (AppVersion [i]);  				}  				// If the major is larger than current' there's an update  				if (Current [0] > App [0]) {  					info.Update = true;  					return info;  				}  				else if (Current [0] < App [0]) {  					return info;  				}  				// If the minor is larger than the current' there's an update :O  				if (Current [1] > App [1]) {  					info.Update = true;  					return info;  				}  				else if (Current [1] < App [1]) {  					return info;  				}  				// Same for build  				if (Current [2] > App [2]) {  					info.Update = true;  					return info;  				}  				else if (Current [2] < App [2]) {  					return info;  				}  				// Same for revision  				if (Current [3] > App [3]) {  					info.Update = true;  					return info;  				}  				else if (Current [3] < App [3]) {  					return info;  				}  				// None of those guys returned anything -- they must have  				// the current version' return our info  				return info;  			}  			if (r.Name == "UpdateFixes") {  				info.UpdateText = r.ReadInnerXml ();  			}  			if (r.Name == "UpdatePath") {  				info.UpdatePath = r.ReadInnerXml ();  			}  			if (r.Name == "UpdateDLLPath") {  				info.UpdateDLLPath = r.ReadInnerXml ();  			}  			if (r.Name == "DLLNeeded") {  				if (r.ReadInnerXml () == "true") {  					info.DLLNeeded = true;  				}  				else {  					info.DLLNeeded = false;  				}  			}  			if (r.Name == "QuickMessage") {  				info.QuickMessage = r.ReadInnerXml ();  			}  		}  	}  }  catch {  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: try {  	System.Net.HttpWebRequest wr = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (relativeURL.ToString ());  	wr.UserAgent = "PARTY BUFFALO\r\n";  	System.Net.WebResponse response = wr.GetResponse ();  	Stream responseStream = response.GetResponseStream ();  	System.Xml.XmlTextReader r = new System.Xml.XmlTextReader (responseStream);  	while (r.Read ()) {  		if (r.NodeType == System.Xml.XmlNodeType.Element) {  			// If we're getting the current version that's available  			if (r.Name == "CurrentVersion") {  				// Set the update version to the inner text  				info.UpdateVersion = r.ReadInnerXml ();  				// Split it at every instance of a period so that  				// we can compare each number individually  				CurrentVersion = info.UpdateVersion.Split ('.');  				// Get our current version' split that as well  				string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  				// Create new int arrays that contain the current &  				// updated versions  				int[] Current = new int[4];  				int[] App = new int[4];  				// Set their indexes accordingly  				for (int i = 0; i < Current.Length; i++) {  					Current [i] = Convert.ToInt32 (CurrentVersion [i]);  					App [i] = Convert.ToInt32 (AppVersion [i]);  				}  				// If the major is larger than current' there's an update  				if (Current [0] > App [0]) {  					info.Update = true;  					return info;  				}  				else if (Current [0] < App [0]) {  					return info;  				}  				// If the minor is larger than the current' there's an update :O  				if (Current [1] > App [1]) {  					info.Update = true;  					return info;  				}  				else if (Current [1] < App [1]) {  					return info;  				}  				// Same for build  				if (Current [2] > App [2]) {  					info.Update = true;  					return info;  				}  				else if (Current [2] < App [2]) {  					return info;  				}  				// Same for revision  				if (Current [3] > App [3]) {  					info.Update = true;  					return info;  				}  				else if (Current [3] < App [3]) {  					return info;  				}  				// None of those guys returned anything -- they must have  				// the current version' return our info  				return info;  			}  			if (r.Name == "UpdateFixes") {  				info.UpdateText = r.ReadInnerXml ();  			}  			if (r.Name == "UpdatePath") {  				info.UpdatePath = r.ReadInnerXml ();  			}  			if (r.Name == "UpdateDLLPath") {  				info.UpdateDLLPath = r.ReadInnerXml ();  			}  			if (r.Name == "DLLNeeded") {  				if (r.ReadInnerXml () == "true") {  					info.DLLNeeded = true;  				}  				else {  					info.DLLNeeded = false;  				}  			}  			if (r.Name == "QuickMessage") {  				info.QuickMessage = r.ReadInnerXml ();  			}  		}  	}  }  catch {  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: try {  	System.Net.HttpWebRequest wr = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (relativeURL.ToString ());  	wr.UserAgent = "PARTY BUFFALO\r\n";  	System.Net.WebResponse response = wr.GetResponse ();  	Stream responseStream = response.GetResponseStream ();  	System.Xml.XmlTextReader r = new System.Xml.XmlTextReader (responseStream);  	while (r.Read ()) {  		if (r.NodeType == System.Xml.XmlNodeType.Element) {  			// If we're getting the current version that's available  			if (r.Name == "CurrentVersion") {  				// Set the update version to the inner text  				info.UpdateVersion = r.ReadInnerXml ();  				// Split it at every instance of a period so that  				// we can compare each number individually  				CurrentVersion = info.UpdateVersion.Split ('.');  				// Get our current version' split that as well  				string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  				// Create new int arrays that contain the current &  				// updated versions  				int[] Current = new int[4];  				int[] App = new int[4];  				// Set their indexes accordingly  				for (int i = 0; i < Current.Length; i++) {  					Current [i] = Convert.ToInt32 (CurrentVersion [i]);  					App [i] = Convert.ToInt32 (AppVersion [i]);  				}  				// If the major is larger than current' there's an update  				if (Current [0] > App [0]) {  					info.Update = true;  					return info;  				}  				else if (Current [0] < App [0]) {  					return info;  				}  				// If the minor is larger than the current' there's an update :O  				if (Current [1] > App [1]) {  					info.Update = true;  					return info;  				}  				else if (Current [1] < App [1]) {  					return info;  				}  				// Same for build  				if (Current [2] > App [2]) {  					info.Update = true;  					return info;  				}  				else if (Current [2] < App [2]) {  					return info;  				}  				// Same for revision  				if (Current [3] > App [3]) {  					info.Update = true;  					return info;  				}  				else if (Current [3] < App [3]) {  					return info;  				}  				// None of those guys returned anything -- they must have  				// the current version' return our info  				return info;  			}  			if (r.Name == "UpdateFixes") {  				info.UpdateText = r.ReadInnerXml ();  			}  			if (r.Name == "UpdatePath") {  				info.UpdatePath = r.ReadInnerXml ();  			}  			if (r.Name == "UpdateDLLPath") {  				info.UpdateDLLPath = r.ReadInnerXml ();  			}  			if (r.Name == "DLLNeeded") {  				if (r.ReadInnerXml () == "true") {  					info.DLLNeeded = true;  				}  				else {  					info.DLLNeeded = false;  				}  			}  			if (r.Name == "QuickMessage") {  				info.QuickMessage = r.ReadInnerXml ();  			}  		}  	}  }  catch {  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: try {  	System.Net.HttpWebRequest wr = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (relativeURL.ToString ());  	wr.UserAgent = "PARTY BUFFALO\r\n";  	System.Net.WebResponse response = wr.GetResponse ();  	Stream responseStream = response.GetResponseStream ();  	System.Xml.XmlTextReader r = new System.Xml.XmlTextReader (responseStream);  	while (r.Read ()) {  		if (r.NodeType == System.Xml.XmlNodeType.Element) {  			// If we're getting the current version that's available  			if (r.Name == "CurrentVersion") {  				// Set the update version to the inner text  				info.UpdateVersion = r.ReadInnerXml ();  				// Split it at every instance of a period so that  				// we can compare each number individually  				CurrentVersion = info.UpdateVersion.Split ('.');  				// Get our current version' split that as well  				string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  				// Create new int arrays that contain the current &  				// updated versions  				int[] Current = new int[4];  				int[] App = new int[4];  				// Set their indexes accordingly  				for (int i = 0; i < Current.Length; i++) {  					Current [i] = Convert.ToInt32 (CurrentVersion [i]);  					App [i] = Convert.ToInt32 (AppVersion [i]);  				}  				// If the major is larger than current' there's an update  				if (Current [0] > App [0]) {  					info.Update = true;  					return info;  				}  				else if (Current [0] < App [0]) {  					return info;  				}  				// If the minor is larger than the current' there's an update :O  				if (Current [1] > App [1]) {  					info.Update = true;  					return info;  				}  				else if (Current [1] < App [1]) {  					return info;  				}  				// Same for build  				if (Current [2] > App [2]) {  					info.Update = true;  					return info;  				}  				else if (Current [2] < App [2]) {  					return info;  				}  				// Same for revision  				if (Current [3] > App [3]) {  					info.Update = true;  					return info;  				}  				else if (Current [3] < App [3]) {  					return info;  				}  				// None of those guys returned anything -- they must have  				// the current version' return our info  				return info;  			}  			if (r.Name == "UpdateFixes") {  				info.UpdateText = r.ReadInnerXml ();  			}  			if (r.Name == "UpdatePath") {  				info.UpdatePath = r.ReadInnerXml ();  			}  			if (r.Name == "UpdateDLLPath") {  				info.UpdateDLLPath = r.ReadInnerXml ();  			}  			if (r.Name == "DLLNeeded") {  				if (r.ReadInnerXml () == "true") {  					info.DLLNeeded = true;  				}  				else {  					info.DLLNeeded = false;  				}  			}  			if (r.Name == "QuickMessage") {  				info.QuickMessage = r.ReadInnerXml ();  			}  		}  	}  }  catch {  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: try {  	System.Net.HttpWebRequest wr = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (relativeURL.ToString ());  	wr.UserAgent = "PARTY BUFFALO\r\n";  	System.Net.WebResponse response = wr.GetResponse ();  	Stream responseStream = response.GetResponseStream ();  	System.Xml.XmlTextReader r = new System.Xml.XmlTextReader (responseStream);  	while (r.Read ()) {  		if (r.NodeType == System.Xml.XmlNodeType.Element) {  			// If we're getting the current version that's available  			if (r.Name == "CurrentVersion") {  				// Set the update version to the inner text  				info.UpdateVersion = r.ReadInnerXml ();  				// Split it at every instance of a period so that  				// we can compare each number individually  				CurrentVersion = info.UpdateVersion.Split ('.');  				// Get our current version' split that as well  				string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  				// Create new int arrays that contain the current &  				// updated versions  				int[] Current = new int[4];  				int[] App = new int[4];  				// Set their indexes accordingly  				for (int i = 0; i < Current.Length; i++) {  					Current [i] = Convert.ToInt32 (CurrentVersion [i]);  					App [i] = Convert.ToInt32 (AppVersion [i]);  				}  				// If the major is larger than current' there's an update  				if (Current [0] > App [0]) {  					info.Update = true;  					return info;  				}  				else if (Current [0] < App [0]) {  					return info;  				}  				// If the minor is larger than the current' there's an update :O  				if (Current [1] > App [1]) {  					info.Update = true;  					return info;  				}  				else if (Current [1] < App [1]) {  					return info;  				}  				// Same for build  				if (Current [2] > App [2]) {  					info.Update = true;  					return info;  				}  				else if (Current [2] < App [2]) {  					return info;  				}  				// Same for revision  				if (Current [3] > App [3]) {  					info.Update = true;  					return info;  				}  				else if (Current [3] < App [3]) {  					return info;  				}  				// None of those guys returned anything -- they must have  				// the current version' return our info  				return info;  			}  			if (r.Name == "UpdateFixes") {  				info.UpdateText = r.ReadInnerXml ();  			}  			if (r.Name == "UpdatePath") {  				info.UpdatePath = r.ReadInnerXml ();  			}  			if (r.Name == "UpdateDLLPath") {  				info.UpdateDLLPath = r.ReadInnerXml ();  			}  			if (r.Name == "DLLNeeded") {  				if (r.ReadInnerXml () == "true") {  					info.DLLNeeded = true;  				}  				else {  					info.DLLNeeded = false;  				}  			}  			if (r.Name == "QuickMessage") {  				info.QuickMessage = r.ReadInnerXml ();  			}  		}  	}  }  catch {  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: while (r.Read ()) {  	if (r.NodeType == System.Xml.XmlNodeType.Element) {  		// If we're getting the current version that's available  		if (r.Name == "CurrentVersion") {  			// Set the update version to the inner text  			info.UpdateVersion = r.ReadInnerXml ();  			// Split it at every instance of a period so that  			// we can compare each number individually  			CurrentVersion = info.UpdateVersion.Split ('.');  			// Get our current version' split that as well  			string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  			// Create new int arrays that contain the current &  			// updated versions  			int[] Current = new int[4];  			int[] App = new int[4];  			// Set their indexes accordingly  			for (int i = 0; i < Current.Length; i++) {  				Current [i] = Convert.ToInt32 (CurrentVersion [i]);  				App [i] = Convert.ToInt32 (AppVersion [i]);  			}  			// If the major is larger than current' there's an update  			if (Current [0] > App [0]) {  				info.Update = true;  				return info;  			}  			else if (Current [0] < App [0]) {  				return info;  			}  			// If the minor is larger than the current' there's an update :O  			if (Current [1] > App [1]) {  				info.Update = true;  				return info;  			}  			else if (Current [1] < App [1]) {  				return info;  			}  			// Same for build  			if (Current [2] > App [2]) {  				info.Update = true;  				return info;  			}  			else if (Current [2] < App [2]) {  				return info;  			}  			// Same for revision  			if (Current [3] > App [3]) {  				info.Update = true;  				return info;  			}  			else if (Current [3] < App [3]) {  				return info;  			}  			// None of those guys returned anything -- they must have  			// the current version' return our info  			return info;  		}  		if (r.Name == "UpdateFixes") {  			info.UpdateText = r.ReadInnerXml ();  		}  		if (r.Name == "UpdatePath") {  			info.UpdatePath = r.ReadInnerXml ();  		}  		if (r.Name == "UpdateDLLPath") {  			info.UpdateDLLPath = r.ReadInnerXml ();  		}  		if (r.Name == "DLLNeeded") {  			if (r.ReadInnerXml () == "true") {  				info.DLLNeeded = true;  			}  			else {  				info.DLLNeeded = false;  			}  		}  		if (r.Name == "QuickMessage") {  			info.QuickMessage = r.ReadInnerXml ();  		}  	}  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: while (r.Read ()) {  	if (r.NodeType == System.Xml.XmlNodeType.Element) {  		// If we're getting the current version that's available  		if (r.Name == "CurrentVersion") {  			// Set the update version to the inner text  			info.UpdateVersion = r.ReadInnerXml ();  			// Split it at every instance of a period so that  			// we can compare each number individually  			CurrentVersion = info.UpdateVersion.Split ('.');  			// Get our current version' split that as well  			string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  			// Create new int arrays that contain the current &  			// updated versions  			int[] Current = new int[4];  			int[] App = new int[4];  			// Set their indexes accordingly  			for (int i = 0; i < Current.Length; i++) {  				Current [i] = Convert.ToInt32 (CurrentVersion [i]);  				App [i] = Convert.ToInt32 (AppVersion [i]);  			}  			// If the major is larger than current' there's an update  			if (Current [0] > App [0]) {  				info.Update = true;  				return info;  			}  			else if (Current [0] < App [0]) {  				return info;  			}  			// If the minor is larger than the current' there's an update :O  			if (Current [1] > App [1]) {  				info.Update = true;  				return info;  			}  			else if (Current [1] < App [1]) {  				return info;  			}  			// Same for build  			if (Current [2] > App [2]) {  				info.Update = true;  				return info;  			}  			else if (Current [2] < App [2]) {  				return info;  			}  			// Same for revision  			if (Current [3] > App [3]) {  				info.Update = true;  				return info;  			}  			else if (Current [3] < App [3]) {  				return info;  			}  			// None of those guys returned anything -- they must have  			// the current version' return our info  			return info;  		}  		if (r.Name == "UpdateFixes") {  			info.UpdateText = r.ReadInnerXml ();  		}  		if (r.Name == "UpdatePath") {  			info.UpdatePath = r.ReadInnerXml ();  		}  		if (r.Name == "UpdateDLLPath") {  			info.UpdateDLLPath = r.ReadInnerXml ();  		}  		if (r.Name == "DLLNeeded") {  			if (r.ReadInnerXml () == "true") {  				info.DLLNeeded = true;  			}  			else {  				info.DLLNeeded = false;  			}  		}  		if (r.Name == "QuickMessage") {  			info.QuickMessage = r.ReadInnerXml ();  		}  	}  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: while (r.Read ()) {  	if (r.NodeType == System.Xml.XmlNodeType.Element) {  		// If we're getting the current version that's available  		if (r.Name == "CurrentVersion") {  			// Set the update version to the inner text  			info.UpdateVersion = r.ReadInnerXml ();  			// Split it at every instance of a period so that  			// we can compare each number individually  			CurrentVersion = info.UpdateVersion.Split ('.');  			// Get our current version' split that as well  			string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  			// Create new int arrays that contain the current &  			// updated versions  			int[] Current = new int[4];  			int[] App = new int[4];  			// Set their indexes accordingly  			for (int i = 0; i < Current.Length; i++) {  				Current [i] = Convert.ToInt32 (CurrentVersion [i]);  				App [i] = Convert.ToInt32 (AppVersion [i]);  			}  			// If the major is larger than current' there's an update  			if (Current [0] > App [0]) {  				info.Update = true;  				return info;  			}  			else if (Current [0] < App [0]) {  				return info;  			}  			// If the minor is larger than the current' there's an update :O  			if (Current [1] > App [1]) {  				info.Update = true;  				return info;  			}  			else if (Current [1] < App [1]) {  				return info;  			}  			// Same for build  			if (Current [2] > App [2]) {  				info.Update = true;  				return info;  			}  			else if (Current [2] < App [2]) {  				return info;  			}  			// Same for revision  			if (Current [3] > App [3]) {  				info.Update = true;  				return info;  			}  			else if (Current [3] < App [3]) {  				return info;  			}  			// None of those guys returned anything -- they must have  			// the current version' return our info  			return info;  		}  		if (r.Name == "UpdateFixes") {  			info.UpdateText = r.ReadInnerXml ();  		}  		if (r.Name == "UpdatePath") {  			info.UpdatePath = r.ReadInnerXml ();  		}  		if (r.Name == "UpdateDLLPath") {  			info.UpdateDLLPath = r.ReadInnerXml ();  		}  		if (r.Name == "DLLNeeded") {  			if (r.ReadInnerXml () == "true") {  				info.DLLNeeded = true;  			}  			else {  				info.DLLNeeded = false;  			}  		}  		if (r.Name == "QuickMessage") {  			info.QuickMessage = r.ReadInnerXml ();  		}  	}  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: while (r.Read ()) {  	if (r.NodeType == System.Xml.XmlNodeType.Element) {  		// If we're getting the current version that's available  		if (r.Name == "CurrentVersion") {  			// Set the update version to the inner text  			info.UpdateVersion = r.ReadInnerXml ();  			// Split it at every instance of a period so that  			// we can compare each number individually  			CurrentVersion = info.UpdateVersion.Split ('.');  			// Get our current version' split that as well  			string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  			// Create new int arrays that contain the current &  			// updated versions  			int[] Current = new int[4];  			int[] App = new int[4];  			// Set their indexes accordingly  			for (int i = 0; i < Current.Length; i++) {  				Current [i] = Convert.ToInt32 (CurrentVersion [i]);  				App [i] = Convert.ToInt32 (AppVersion [i]);  			}  			// If the major is larger than current' there's an update  			if (Current [0] > App [0]) {  				info.Update = true;  				return info;  			}  			else if (Current [0] < App [0]) {  				return info;  			}  			// If the minor is larger than the current' there's an update :O  			if (Current [1] > App [1]) {  				info.Update = true;  				return info;  			}  			else if (Current [1] < App [1]) {  				return info;  			}  			// Same for build  			if (Current [2] > App [2]) {  				info.Update = true;  				return info;  			}  			else if (Current [2] < App [2]) {  				return info;  			}  			// Same for revision  			if (Current [3] > App [3]) {  				info.Update = true;  				return info;  			}  			else if (Current [3] < App [3]) {  				return info;  			}  			// None of those guys returned anything -- they must have  			// the current version' return our info  			return info;  		}  		if (r.Name == "UpdateFixes") {  			info.UpdateText = r.ReadInnerXml ();  		}  		if (r.Name == "UpdatePath") {  			info.UpdatePath = r.ReadInnerXml ();  		}  		if (r.Name == "UpdateDLLPath") {  			info.UpdateDLLPath = r.ReadInnerXml ();  		}  		if (r.Name == "DLLNeeded") {  			if (r.ReadInnerXml () == "true") {  				info.DLLNeeded = true;  			}  			else {  				info.DLLNeeded = false;  			}  		}  		if (r.Name == "QuickMessage") {  			info.QuickMessage = r.ReadInnerXml ();  		}  	}  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: while (r.Read ()) {  	if (r.NodeType == System.Xml.XmlNodeType.Element) {  		// If we're getting the current version that's available  		if (r.Name == "CurrentVersion") {  			// Set the update version to the inner text  			info.UpdateVersion = r.ReadInnerXml ();  			// Split it at every instance of a period so that  			// we can compare each number individually  			CurrentVersion = info.UpdateVersion.Split ('.');  			// Get our current version' split that as well  			string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  			// Create new int arrays that contain the current &  			// updated versions  			int[] Current = new int[4];  			int[] App = new int[4];  			// Set their indexes accordingly  			for (int i = 0; i < Current.Length; i++) {  				Current [i] = Convert.ToInt32 (CurrentVersion [i]);  				App [i] = Convert.ToInt32 (AppVersion [i]);  			}  			// If the major is larger than current' there's an update  			if (Current [0] > App [0]) {  				info.Update = true;  				return info;  			}  			else if (Current [0] < App [0]) {  				return info;  			}  			// If the minor is larger than the current' there's an update :O  			if (Current [1] > App [1]) {  				info.Update = true;  				return info;  			}  			else if (Current [1] < App [1]) {  				return info;  			}  			// Same for build  			if (Current [2] > App [2]) {  				info.Update = true;  				return info;  			}  			else if (Current [2] < App [2]) {  				return info;  			}  			// Same for revision  			if (Current [3] > App [3]) {  				info.Update = true;  				return info;  			}  			else if (Current [3] < App [3]) {  				return info;  			}  			// None of those guys returned anything -- they must have  			// the current version' return our info  			return info;  		}  		if (r.Name == "UpdateFixes") {  			info.UpdateText = r.ReadInnerXml ();  		}  		if (r.Name == "UpdatePath") {  			info.UpdatePath = r.ReadInnerXml ();  		}  		if (r.Name == "UpdateDLLPath") {  			info.UpdateDLLPath = r.ReadInnerXml ();  		}  		if (r.Name == "DLLNeeded") {  			if (r.ReadInnerXml () == "true") {  				info.DLLNeeded = true;  			}  			else {  				info.DLLNeeded = false;  			}  		}  		if (r.Name == "QuickMessage") {  			info.QuickMessage = r.ReadInnerXml ();  		}  	}  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: while (r.Read ()) {  	if (r.NodeType == System.Xml.XmlNodeType.Element) {  		// If we're getting the current version that's available  		if (r.Name == "CurrentVersion") {  			// Set the update version to the inner text  			info.UpdateVersion = r.ReadInnerXml ();  			// Split it at every instance of a period so that  			// we can compare each number individually  			CurrentVersion = info.UpdateVersion.Split ('.');  			// Get our current version' split that as well  			string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  			// Create new int arrays that contain the current &  			// updated versions  			int[] Current = new int[4];  			int[] App = new int[4];  			// Set their indexes accordingly  			for (int i = 0; i < Current.Length; i++) {  				Current [i] = Convert.ToInt32 (CurrentVersion [i]);  				App [i] = Convert.ToInt32 (AppVersion [i]);  			}  			// If the major is larger than current' there's an update  			if (Current [0] > App [0]) {  				info.Update = true;  				return info;  			}  			else if (Current [0] < App [0]) {  				return info;  			}  			// If the minor is larger than the current' there's an update :O  			if (Current [1] > App [1]) {  				info.Update = true;  				return info;  			}  			else if (Current [1] < App [1]) {  				return info;  			}  			// Same for build  			if (Current [2] > App [2]) {  				info.Update = true;  				return info;  			}  			else if (Current [2] < App [2]) {  				return info;  			}  			// Same for revision  			if (Current [3] > App [3]) {  				info.Update = true;  				return info;  			}  			else if (Current [3] < App [3]) {  				return info;  			}  			// None of those guys returned anything -- they must have  			// the current version' return our info  			return info;  		}  		if (r.Name == "UpdateFixes") {  			info.UpdateText = r.ReadInnerXml ();  		}  		if (r.Name == "UpdatePath") {  			info.UpdatePath = r.ReadInnerXml ();  		}  		if (r.Name == "UpdateDLLPath") {  			info.UpdateDLLPath = r.ReadInnerXml ();  		}  		if (r.Name == "DLLNeeded") {  			if (r.ReadInnerXml () == "true") {  				info.DLLNeeded = true;  			}  			else {  				info.DLLNeeded = false;  			}  		}  		if (r.Name == "QuickMessage") {  			info.QuickMessage = r.ReadInnerXml ();  		}  	}  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: while (r.Read ()) {  	if (r.NodeType == System.Xml.XmlNodeType.Element) {  		// If we're getting the current version that's available  		if (r.Name == "CurrentVersion") {  			// Set the update version to the inner text  			info.UpdateVersion = r.ReadInnerXml ();  			// Split it at every instance of a period so that  			// we can compare each number individually  			CurrentVersion = info.UpdateVersion.Split ('.');  			// Get our current version' split that as well  			string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  			// Create new int arrays that contain the current &  			// updated versions  			int[] Current = new int[4];  			int[] App = new int[4];  			// Set their indexes accordingly  			for (int i = 0; i < Current.Length; i++) {  				Current [i] = Convert.ToInt32 (CurrentVersion [i]);  				App [i] = Convert.ToInt32 (AppVersion [i]);  			}  			// If the major is larger than current' there's an update  			if (Current [0] > App [0]) {  				info.Update = true;  				return info;  			}  			else if (Current [0] < App [0]) {  				return info;  			}  			// If the minor is larger than the current' there's an update :O  			if (Current [1] > App [1]) {  				info.Update = true;  				return info;  			}  			else if (Current [1] < App [1]) {  				return info;  			}  			// Same for build  			if (Current [2] > App [2]) {  				info.Update = true;  				return info;  			}  			else if (Current [2] < App [2]) {  				return info;  			}  			// Same for revision  			if (Current [3] > App [3]) {  				info.Update = true;  				return info;  			}  			else if (Current [3] < App [3]) {  				return info;  			}  			// None of those guys returned anything -- they must have  			// the current version' return our info  			return info;  		}  		if (r.Name == "UpdateFixes") {  			info.UpdateText = r.ReadInnerXml ();  		}  		if (r.Name == "UpdatePath") {  			info.UpdatePath = r.ReadInnerXml ();  		}  		if (r.Name == "UpdateDLLPath") {  			info.UpdateDLLPath = r.ReadInnerXml ();  		}  		if (r.Name == "DLLNeeded") {  			if (r.ReadInnerXml () == "true") {  				info.DLLNeeded = true;  			}  			else {  				info.DLLNeeded = false;  			}  		}  		if (r.Name == "QuickMessage") {  			info.QuickMessage = r.ReadInnerXml ();  		}  	}  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: while (r.Read ()) {  	if (r.NodeType == System.Xml.XmlNodeType.Element) {  		// If we're getting the current version that's available  		if (r.Name == "CurrentVersion") {  			// Set the update version to the inner text  			info.UpdateVersion = r.ReadInnerXml ();  			// Split it at every instance of a period so that  			// we can compare each number individually  			CurrentVersion = info.UpdateVersion.Split ('.');  			// Get our current version' split that as well  			string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  			// Create new int arrays that contain the current &  			// updated versions  			int[] Current = new int[4];  			int[] App = new int[4];  			// Set their indexes accordingly  			for (int i = 0; i < Current.Length; i++) {  				Current [i] = Convert.ToInt32 (CurrentVersion [i]);  				App [i] = Convert.ToInt32 (AppVersion [i]);  			}  			// If the major is larger than current' there's an update  			if (Current [0] > App [0]) {  				info.Update = true;  				return info;  			}  			else if (Current [0] < App [0]) {  				return info;  			}  			// If the minor is larger than the current' there's an update :O  			if (Current [1] > App [1]) {  				info.Update = true;  				return info;  			}  			else if (Current [1] < App [1]) {  				return info;  			}  			// Same for build  			if (Current [2] > App [2]) {  				info.Update = true;  				return info;  			}  			else if (Current [2] < App [2]) {  				return info;  			}  			// Same for revision  			if (Current [3] > App [3]) {  				info.Update = true;  				return info;  			}  			else if (Current [3] < App [3]) {  				return info;  			}  			// None of those guys returned anything -- they must have  			// the current version' return our info  			return info;  		}  		if (r.Name == "UpdateFixes") {  			info.UpdateText = r.ReadInnerXml ();  		}  		if (r.Name == "UpdatePath") {  			info.UpdatePath = r.ReadInnerXml ();  		}  		if (r.Name == "UpdateDLLPath") {  			info.UpdateDLLPath = r.ReadInnerXml ();  		}  		if (r.Name == "DLLNeeded") {  			if (r.ReadInnerXml () == "true") {  				info.DLLNeeded = true;  			}  			else {  				info.DLLNeeded = false;  			}  		}  		if (r.Name == "QuickMessage") {  			info.QuickMessage = r.ReadInnerXml ();  		}  	}  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: while (r.Read ()) {  	if (r.NodeType == System.Xml.XmlNodeType.Element) {  		// If we're getting the current version that's available  		if (r.Name == "CurrentVersion") {  			// Set the update version to the inner text  			info.UpdateVersion = r.ReadInnerXml ();  			// Split it at every instance of a period so that  			// we can compare each number individually  			CurrentVersion = info.UpdateVersion.Split ('.');  			// Get our current version' split that as well  			string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  			// Create new int arrays that contain the current &  			// updated versions  			int[] Current = new int[4];  			int[] App = new int[4];  			// Set their indexes accordingly  			for (int i = 0; i < Current.Length; i++) {  				Current [i] = Convert.ToInt32 (CurrentVersion [i]);  				App [i] = Convert.ToInt32 (AppVersion [i]);  			}  			// If the major is larger than current' there's an update  			if (Current [0] > App [0]) {  				info.Update = true;  				return info;  			}  			else if (Current [0] < App [0]) {  				return info;  			}  			// If the minor is larger than the current' there's an update :O  			if (Current [1] > App [1]) {  				info.Update = true;  				return info;  			}  			else if (Current [1] < App [1]) {  				return info;  			}  			// Same for build  			if (Current [2] > App [2]) {  				info.Update = true;  				return info;  			}  			else if (Current [2] < App [2]) {  				return info;  			}  			// Same for revision  			if (Current [3] > App [3]) {  				info.Update = true;  				return info;  			}  			else if (Current [3] < App [3]) {  				return info;  			}  			// None of those guys returned anything -- they must have  			// the current version' return our info  			return info;  		}  		if (r.Name == "UpdateFixes") {  			info.UpdateText = r.ReadInnerXml ();  		}  		if (r.Name == "UpdatePath") {  			info.UpdatePath = r.ReadInnerXml ();  		}  		if (r.Name == "UpdateDLLPath") {  			info.UpdateDLLPath = r.ReadInnerXml ();  		}  		if (r.Name == "DLLNeeded") {  			if (r.ReadInnerXml () == "true") {  				info.DLLNeeded = true;  			}  			else {  				info.DLLNeeded = false;  			}  		}  		if (r.Name == "QuickMessage") {  			info.QuickMessage = r.ReadInnerXml ();  		}  	}  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: while (r.Read ()) {  	if (r.NodeType == System.Xml.XmlNodeType.Element) {  		// If we're getting the current version that's available  		if (r.Name == "CurrentVersion") {  			// Set the update version to the inner text  			info.UpdateVersion = r.ReadInnerXml ();  			// Split it at every instance of a period so that  			// we can compare each number individually  			CurrentVersion = info.UpdateVersion.Split ('.');  			// Get our current version' split that as well  			string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  			// Create new int arrays that contain the current &  			// updated versions  			int[] Current = new int[4];  			int[] App = new int[4];  			// Set their indexes accordingly  			for (int i = 0; i < Current.Length; i++) {  				Current [i] = Convert.ToInt32 (CurrentVersion [i]);  				App [i] = Convert.ToInt32 (AppVersion [i]);  			}  			// If the major is larger than current' there's an update  			if (Current [0] > App [0]) {  				info.Update = true;  				return info;  			}  			else if (Current [0] < App [0]) {  				return info;  			}  			// If the minor is larger than the current' there's an update :O  			if (Current [1] > App [1]) {  				info.Update = true;  				return info;  			}  			else if (Current [1] < App [1]) {  				return info;  			}  			// Same for build  			if (Current [2] > App [2]) {  				info.Update = true;  				return info;  			}  			else if (Current [2] < App [2]) {  				return info;  			}  			// Same for revision  			if (Current [3] > App [3]) {  				info.Update = true;  				return info;  			}  			else if (Current [3] < App [3]) {  				return info;  			}  			// None of those guys returned anything -- they must have  			// the current version' return our info  			return info;  		}  		if (r.Name == "UpdateFixes") {  			info.UpdateText = r.ReadInnerXml ();  		}  		if (r.Name == "UpdatePath") {  			info.UpdatePath = r.ReadInnerXml ();  		}  		if (r.Name == "UpdateDLLPath") {  			info.UpdateDLLPath = r.ReadInnerXml ();  		}  		if (r.Name == "DLLNeeded") {  			if (r.ReadInnerXml () == "true") {  				info.DLLNeeded = true;  			}  			else {  				info.DLLNeeded = false;  			}  		}  		if (r.Name == "QuickMessage") {  			info.QuickMessage = r.ReadInnerXml ();  		}  	}  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (r.NodeType == System.Xml.XmlNodeType.Element) {  	// If we're getting the current version that's available  	if (r.Name == "CurrentVersion") {  		// Set the update version to the inner text  		info.UpdateVersion = r.ReadInnerXml ();  		// Split it at every instance of a period so that  		// we can compare each number individually  		CurrentVersion = info.UpdateVersion.Split ('.');  		// Get our current version' split that as well  		string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  		// Create new int arrays that contain the current &  		// updated versions  		int[] Current = new int[4];  		int[] App = new int[4];  		// Set their indexes accordingly  		for (int i = 0; i < Current.Length; i++) {  			Current [i] = Convert.ToInt32 (CurrentVersion [i]);  			App [i] = Convert.ToInt32 (AppVersion [i]);  		}  		// If the major is larger than current' there's an update  		if (Current [0] > App [0]) {  			info.Update = true;  			return info;  		}  		else if (Current [0] < App [0]) {  			return info;  		}  		// If the minor is larger than the current' there's an update :O  		if (Current [1] > App [1]) {  			info.Update = true;  			return info;  		}  		else if (Current [1] < App [1]) {  			return info;  		}  		// Same for build  		if (Current [2] > App [2]) {  			info.Update = true;  			return info;  		}  		else if (Current [2] < App [2]) {  			return info;  		}  		// Same for revision  		if (Current [3] > App [3]) {  			info.Update = true;  			return info;  		}  		else if (Current [3] < App [3]) {  			return info;  		}  		// None of those guys returned anything -- they must have  		// the current version' return our info  		return info;  	}  	if (r.Name == "UpdateFixes") {  		info.UpdateText = r.ReadInnerXml ();  	}  	if (r.Name == "UpdatePath") {  		info.UpdatePath = r.ReadInnerXml ();  	}  	if (r.Name == "UpdateDLLPath") {  		info.UpdateDLLPath = r.ReadInnerXml ();  	}  	if (r.Name == "DLLNeeded") {  		if (r.ReadInnerXml () == "true") {  			info.DLLNeeded = true;  		}  		else {  			info.DLLNeeded = false;  		}  	}  	if (r.Name == "QuickMessage") {  		info.QuickMessage = r.ReadInnerXml ();  	}  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (r.NodeType == System.Xml.XmlNodeType.Element) {  	// If we're getting the current version that's available  	if (r.Name == "CurrentVersion") {  		// Set the update version to the inner text  		info.UpdateVersion = r.ReadInnerXml ();  		// Split it at every instance of a period so that  		// we can compare each number individually  		CurrentVersion = info.UpdateVersion.Split ('.');  		// Get our current version' split that as well  		string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  		// Create new int arrays that contain the current &  		// updated versions  		int[] Current = new int[4];  		int[] App = new int[4];  		// Set their indexes accordingly  		for (int i = 0; i < Current.Length; i++) {  			Current [i] = Convert.ToInt32 (CurrentVersion [i]);  			App [i] = Convert.ToInt32 (AppVersion [i]);  		}  		// If the major is larger than current' there's an update  		if (Current [0] > App [0]) {  			info.Update = true;  			return info;  		}  		else if (Current [0] < App [0]) {  			return info;  		}  		// If the minor is larger than the current' there's an update :O  		if (Current [1] > App [1]) {  			info.Update = true;  			return info;  		}  		else if (Current [1] < App [1]) {  			return info;  		}  		// Same for build  		if (Current [2] > App [2]) {  			info.Update = true;  			return info;  		}  		else if (Current [2] < App [2]) {  			return info;  		}  		// Same for revision  		if (Current [3] > App [3]) {  			info.Update = true;  			return info;  		}  		else if (Current [3] < App [3]) {  			return info;  		}  		// None of those guys returned anything -- they must have  		// the current version' return our info  		return info;  	}  	if (r.Name == "UpdateFixes") {  		info.UpdateText = r.ReadInnerXml ();  	}  	if (r.Name == "UpdatePath") {  		info.UpdatePath = r.ReadInnerXml ();  	}  	if (r.Name == "UpdateDLLPath") {  		info.UpdateDLLPath = r.ReadInnerXml ();  	}  	if (r.Name == "DLLNeeded") {  		if (r.ReadInnerXml () == "true") {  			info.DLLNeeded = true;  		}  		else {  			info.DLLNeeded = false;  		}  	}  	if (r.Name == "QuickMessage") {  		info.QuickMessage = r.ReadInnerXml ();  	}  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (r.NodeType == System.Xml.XmlNodeType.Element) {  	// If we're getting the current version that's available  	if (r.Name == "CurrentVersion") {  		// Set the update version to the inner text  		info.UpdateVersion = r.ReadInnerXml ();  		// Split it at every instance of a period so that  		// we can compare each number individually  		CurrentVersion = info.UpdateVersion.Split ('.');  		// Get our current version' split that as well  		string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  		// Create new int arrays that contain the current &  		// updated versions  		int[] Current = new int[4];  		int[] App = new int[4];  		// Set their indexes accordingly  		for (int i = 0; i < Current.Length; i++) {  			Current [i] = Convert.ToInt32 (CurrentVersion [i]);  			App [i] = Convert.ToInt32 (AppVersion [i]);  		}  		// If the major is larger than current' there's an update  		if (Current [0] > App [0]) {  			info.Update = true;  			return info;  		}  		else if (Current [0] < App [0]) {  			return info;  		}  		// If the minor is larger than the current' there's an update :O  		if (Current [1] > App [1]) {  			info.Update = true;  			return info;  		}  		else if (Current [1] < App [1]) {  			return info;  		}  		// Same for build  		if (Current [2] > App [2]) {  			info.Update = true;  			return info;  		}  		else if (Current [2] < App [2]) {  			return info;  		}  		// Same for revision  		if (Current [3] > App [3]) {  			info.Update = true;  			return info;  		}  		else if (Current [3] < App [3]) {  			return info;  		}  		// None of those guys returned anything -- they must have  		// the current version' return our info  		return info;  	}  	if (r.Name == "UpdateFixes") {  		info.UpdateText = r.ReadInnerXml ();  	}  	if (r.Name == "UpdatePath") {  		info.UpdatePath = r.ReadInnerXml ();  	}  	if (r.Name == "UpdateDLLPath") {  		info.UpdateDLLPath = r.ReadInnerXml ();  	}  	if (r.Name == "DLLNeeded") {  		if (r.ReadInnerXml () == "true") {  			info.DLLNeeded = true;  		}  		else {  			info.DLLNeeded = false;  		}  	}  	if (r.Name == "QuickMessage") {  		info.QuickMessage = r.ReadInnerXml ();  	}  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (r.NodeType == System.Xml.XmlNodeType.Element) {  	// If we're getting the current version that's available  	if (r.Name == "CurrentVersion") {  		// Set the update version to the inner text  		info.UpdateVersion = r.ReadInnerXml ();  		// Split it at every instance of a period so that  		// we can compare each number individually  		CurrentVersion = info.UpdateVersion.Split ('.');  		// Get our current version' split that as well  		string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  		// Create new int arrays that contain the current &  		// updated versions  		int[] Current = new int[4];  		int[] App = new int[4];  		// Set their indexes accordingly  		for (int i = 0; i < Current.Length; i++) {  			Current [i] = Convert.ToInt32 (CurrentVersion [i]);  			App [i] = Convert.ToInt32 (AppVersion [i]);  		}  		// If the major is larger than current' there's an update  		if (Current [0] > App [0]) {  			info.Update = true;  			return info;  		}  		else if (Current [0] < App [0]) {  			return info;  		}  		// If the minor is larger than the current' there's an update :O  		if (Current [1] > App [1]) {  			info.Update = true;  			return info;  		}  		else if (Current [1] < App [1]) {  			return info;  		}  		// Same for build  		if (Current [2] > App [2]) {  			info.Update = true;  			return info;  		}  		else if (Current [2] < App [2]) {  			return info;  		}  		// Same for revision  		if (Current [3] > App [3]) {  			info.Update = true;  			return info;  		}  		else if (Current [3] < App [3]) {  			return info;  		}  		// None of those guys returned anything -- they must have  		// the current version' return our info  		return info;  	}  	if (r.Name == "UpdateFixes") {  		info.UpdateText = r.ReadInnerXml ();  	}  	if (r.Name == "UpdatePath") {  		info.UpdatePath = r.ReadInnerXml ();  	}  	if (r.Name == "UpdateDLLPath") {  		info.UpdateDLLPath = r.ReadInnerXml ();  	}  	if (r.Name == "DLLNeeded") {  		if (r.ReadInnerXml () == "true") {  			info.DLLNeeded = true;  		}  		else {  			info.DLLNeeded = false;  		}  	}  	if (r.Name == "QuickMessage") {  		info.QuickMessage = r.ReadInnerXml ();  	}  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (r.NodeType == System.Xml.XmlNodeType.Element) {  	// If we're getting the current version that's available  	if (r.Name == "CurrentVersion") {  		// Set the update version to the inner text  		info.UpdateVersion = r.ReadInnerXml ();  		// Split it at every instance of a period so that  		// we can compare each number individually  		CurrentVersion = info.UpdateVersion.Split ('.');  		// Get our current version' split that as well  		string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  		// Create new int arrays that contain the current &  		// updated versions  		int[] Current = new int[4];  		int[] App = new int[4];  		// Set their indexes accordingly  		for (int i = 0; i < Current.Length; i++) {  			Current [i] = Convert.ToInt32 (CurrentVersion [i]);  			App [i] = Convert.ToInt32 (AppVersion [i]);  		}  		// If the major is larger than current' there's an update  		if (Current [0] > App [0]) {  			info.Update = true;  			return info;  		}  		else if (Current [0] < App [0]) {  			return info;  		}  		// If the minor is larger than the current' there's an update :O  		if (Current [1] > App [1]) {  			info.Update = true;  			return info;  		}  		else if (Current [1] < App [1]) {  			return info;  		}  		// Same for build  		if (Current [2] > App [2]) {  			info.Update = true;  			return info;  		}  		else if (Current [2] < App [2]) {  			return info;  		}  		// Same for revision  		if (Current [3] > App [3]) {  			info.Update = true;  			return info;  		}  		else if (Current [3] < App [3]) {  			return info;  		}  		// None of those guys returned anything -- they must have  		// the current version' return our info  		return info;  	}  	if (r.Name == "UpdateFixes") {  		info.UpdateText = r.ReadInnerXml ();  	}  	if (r.Name == "UpdatePath") {  		info.UpdatePath = r.ReadInnerXml ();  	}  	if (r.Name == "UpdateDLLPath") {  		info.UpdateDLLPath = r.ReadInnerXml ();  	}  	if (r.Name == "DLLNeeded") {  		if (r.ReadInnerXml () == "true") {  			info.DLLNeeded = true;  		}  		else {  			info.DLLNeeded = false;  		}  	}  	if (r.Name == "QuickMessage") {  		info.QuickMessage = r.ReadInnerXml ();  	}  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (r.NodeType == System.Xml.XmlNodeType.Element) {  	// If we're getting the current version that's available  	if (r.Name == "CurrentVersion") {  		// Set the update version to the inner text  		info.UpdateVersion = r.ReadInnerXml ();  		// Split it at every instance of a period so that  		// we can compare each number individually  		CurrentVersion = info.UpdateVersion.Split ('.');  		// Get our current version' split that as well  		string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  		// Create new int arrays that contain the current &  		// updated versions  		int[] Current = new int[4];  		int[] App = new int[4];  		// Set their indexes accordingly  		for (int i = 0; i < Current.Length; i++) {  			Current [i] = Convert.ToInt32 (CurrentVersion [i]);  			App [i] = Convert.ToInt32 (AppVersion [i]);  		}  		// If the major is larger than current' there's an update  		if (Current [0] > App [0]) {  			info.Update = true;  			return info;  		}  		else if (Current [0] < App [0]) {  			return info;  		}  		// If the minor is larger than the current' there's an update :O  		if (Current [1] > App [1]) {  			info.Update = true;  			return info;  		}  		else if (Current [1] < App [1]) {  			return info;  		}  		// Same for build  		if (Current [2] > App [2]) {  			info.Update = true;  			return info;  		}  		else if (Current [2] < App [2]) {  			return info;  		}  		// Same for revision  		if (Current [3] > App [3]) {  			info.Update = true;  			return info;  		}  		else if (Current [3] < App [3]) {  			return info;  		}  		// None of those guys returned anything -- they must have  		// the current version' return our info  		return info;  	}  	if (r.Name == "UpdateFixes") {  		info.UpdateText = r.ReadInnerXml ();  	}  	if (r.Name == "UpdatePath") {  		info.UpdatePath = r.ReadInnerXml ();  	}  	if (r.Name == "UpdateDLLPath") {  		info.UpdateDLLPath = r.ReadInnerXml ();  	}  	if (r.Name == "DLLNeeded") {  		if (r.ReadInnerXml () == "true") {  			info.DLLNeeded = true;  		}  		else {  			info.DLLNeeded = false;  		}  	}  	if (r.Name == "QuickMessage") {  		info.QuickMessage = r.ReadInnerXml ();  	}  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (r.NodeType == System.Xml.XmlNodeType.Element) {  	// If we're getting the current version that's available  	if (r.Name == "CurrentVersion") {  		// Set the update version to the inner text  		info.UpdateVersion = r.ReadInnerXml ();  		// Split it at every instance of a period so that  		// we can compare each number individually  		CurrentVersion = info.UpdateVersion.Split ('.');  		// Get our current version' split that as well  		string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  		// Create new int arrays that contain the current &  		// updated versions  		int[] Current = new int[4];  		int[] App = new int[4];  		// Set their indexes accordingly  		for (int i = 0; i < Current.Length; i++) {  			Current [i] = Convert.ToInt32 (CurrentVersion [i]);  			App [i] = Convert.ToInt32 (AppVersion [i]);  		}  		// If the major is larger than current' there's an update  		if (Current [0] > App [0]) {  			info.Update = true;  			return info;  		}  		else if (Current [0] < App [0]) {  			return info;  		}  		// If the minor is larger than the current' there's an update :O  		if (Current [1] > App [1]) {  			info.Update = true;  			return info;  		}  		else if (Current [1] < App [1]) {  			return info;  		}  		// Same for build  		if (Current [2] > App [2]) {  			info.Update = true;  			return info;  		}  		else if (Current [2] < App [2]) {  			return info;  		}  		// Same for revision  		if (Current [3] > App [3]) {  			info.Update = true;  			return info;  		}  		else if (Current [3] < App [3]) {  			return info;  		}  		// None of those guys returned anything -- they must have  		// the current version' return our info  		return info;  	}  	if (r.Name == "UpdateFixes") {  		info.UpdateText = r.ReadInnerXml ();  	}  	if (r.Name == "UpdatePath") {  		info.UpdatePath = r.ReadInnerXml ();  	}  	if (r.Name == "UpdateDLLPath") {  		info.UpdateDLLPath = r.ReadInnerXml ();  	}  	if (r.Name == "DLLNeeded") {  		if (r.ReadInnerXml () == "true") {  			info.DLLNeeded = true;  		}  		else {  			info.DLLNeeded = false;  		}  	}  	if (r.Name == "QuickMessage") {  		info.QuickMessage = r.ReadInnerXml ();  	}  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (r.NodeType == System.Xml.XmlNodeType.Element) {  	// If we're getting the current version that's available  	if (r.Name == "CurrentVersion") {  		// Set the update version to the inner text  		info.UpdateVersion = r.ReadInnerXml ();  		// Split it at every instance of a period so that  		// we can compare each number individually  		CurrentVersion = info.UpdateVersion.Split ('.');  		// Get our current version' split that as well  		string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  		// Create new int arrays that contain the current &  		// updated versions  		int[] Current = new int[4];  		int[] App = new int[4];  		// Set their indexes accordingly  		for (int i = 0; i < Current.Length; i++) {  			Current [i] = Convert.ToInt32 (CurrentVersion [i]);  			App [i] = Convert.ToInt32 (AppVersion [i]);  		}  		// If the major is larger than current' there's an update  		if (Current [0] > App [0]) {  			info.Update = true;  			return info;  		}  		else if (Current [0] < App [0]) {  			return info;  		}  		// If the minor is larger than the current' there's an update :O  		if (Current [1] > App [1]) {  			info.Update = true;  			return info;  		}  		else if (Current [1] < App [1]) {  			return info;  		}  		// Same for build  		if (Current [2] > App [2]) {  			info.Update = true;  			return info;  		}  		else if (Current [2] < App [2]) {  			return info;  		}  		// Same for revision  		if (Current [3] > App [3]) {  			info.Update = true;  			return info;  		}  		else if (Current [3] < App [3]) {  			return info;  		}  		// None of those guys returned anything -- they must have  		// the current version' return our info  		return info;  	}  	if (r.Name == "UpdateFixes") {  		info.UpdateText = r.ReadInnerXml ();  	}  	if (r.Name == "UpdatePath") {  		info.UpdatePath = r.ReadInnerXml ();  	}  	if (r.Name == "UpdateDLLPath") {  		info.UpdateDLLPath = r.ReadInnerXml ();  	}  	if (r.Name == "DLLNeeded") {  		if (r.ReadInnerXml () == "true") {  			info.DLLNeeded = true;  		}  		else {  			info.DLLNeeded = false;  		}  	}  	if (r.Name == "QuickMessage") {  		info.QuickMessage = r.ReadInnerXml ();  	}  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (r.NodeType == System.Xml.XmlNodeType.Element) {  	// If we're getting the current version that's available  	if (r.Name == "CurrentVersion") {  		// Set the update version to the inner text  		info.UpdateVersion = r.ReadInnerXml ();  		// Split it at every instance of a period so that  		// we can compare each number individually  		CurrentVersion = info.UpdateVersion.Split ('.');  		// Get our current version' split that as well  		string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  		// Create new int arrays that contain the current &  		// updated versions  		int[] Current = new int[4];  		int[] App = new int[4];  		// Set their indexes accordingly  		for (int i = 0; i < Current.Length; i++) {  			Current [i] = Convert.ToInt32 (CurrentVersion [i]);  			App [i] = Convert.ToInt32 (AppVersion [i]);  		}  		// If the major is larger than current' there's an update  		if (Current [0] > App [0]) {  			info.Update = true;  			return info;  		}  		else if (Current [0] < App [0]) {  			return info;  		}  		// If the minor is larger than the current' there's an update :O  		if (Current [1] > App [1]) {  			info.Update = true;  			return info;  		}  		else if (Current [1] < App [1]) {  			return info;  		}  		// Same for build  		if (Current [2] > App [2]) {  			info.Update = true;  			return info;  		}  		else if (Current [2] < App [2]) {  			return info;  		}  		// Same for revision  		if (Current [3] > App [3]) {  			info.Update = true;  			return info;  		}  		else if (Current [3] < App [3]) {  			return info;  		}  		// None of those guys returned anything -- they must have  		// the current version' return our info  		return info;  	}  	if (r.Name == "UpdateFixes") {  		info.UpdateText = r.ReadInnerXml ();  	}  	if (r.Name == "UpdatePath") {  		info.UpdatePath = r.ReadInnerXml ();  	}  	if (r.Name == "UpdateDLLPath") {  		info.UpdateDLLPath = r.ReadInnerXml ();  	}  	if (r.Name == "DLLNeeded") {  		if (r.ReadInnerXml () == "true") {  			info.DLLNeeded = true;  		}  		else {  			info.DLLNeeded = false;  		}  	}  	if (r.Name == "QuickMessage") {  		info.QuickMessage = r.ReadInnerXml ();  	}  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (r.NodeType == System.Xml.XmlNodeType.Element) {  	// If we're getting the current version that's available  	if (r.Name == "CurrentVersion") {  		// Set the update version to the inner text  		info.UpdateVersion = r.ReadInnerXml ();  		// Split it at every instance of a period so that  		// we can compare each number individually  		CurrentVersion = info.UpdateVersion.Split ('.');  		// Get our current version' split that as well  		string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  		// Create new int arrays that contain the current &  		// updated versions  		int[] Current = new int[4];  		int[] App = new int[4];  		// Set their indexes accordingly  		for (int i = 0; i < Current.Length; i++) {  			Current [i] = Convert.ToInt32 (CurrentVersion [i]);  			App [i] = Convert.ToInt32 (AppVersion [i]);  		}  		// If the major is larger than current' there's an update  		if (Current [0] > App [0]) {  			info.Update = true;  			return info;  		}  		else if (Current [0] < App [0]) {  			return info;  		}  		// If the minor is larger than the current' there's an update :O  		if (Current [1] > App [1]) {  			info.Update = true;  			return info;  		}  		else if (Current [1] < App [1]) {  			return info;  		}  		// Same for build  		if (Current [2] > App [2]) {  			info.Update = true;  			return info;  		}  		else if (Current [2] < App [2]) {  			return info;  		}  		// Same for revision  		if (Current [3] > App [3]) {  			info.Update = true;  			return info;  		}  		else if (Current [3] < App [3]) {  			return info;  		}  		// None of those guys returned anything -- they must have  		// the current version' return our info  		return info;  	}  	if (r.Name == "UpdateFixes") {  		info.UpdateText = r.ReadInnerXml ();  	}  	if (r.Name == "UpdatePath") {  		info.UpdatePath = r.ReadInnerXml ();  	}  	if (r.Name == "UpdateDLLPath") {  		info.UpdateDLLPath = r.ReadInnerXml ();  	}  	if (r.Name == "DLLNeeded") {  		if (r.ReadInnerXml () == "true") {  			info.DLLNeeded = true;  		}  		else {  			info.DLLNeeded = false;  		}  	}  	if (r.Name == "QuickMessage") {  		info.QuickMessage = r.ReadInnerXml ();  	}  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (r.Name == "CurrentVersion") {  	// Set the update version to the inner text  	info.UpdateVersion = r.ReadInnerXml ();  	// Split it at every instance of a period so that  	// we can compare each number individually  	CurrentVersion = info.UpdateVersion.Split ('.');  	// Get our current version' split that as well  	string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  	// Create new int arrays that contain the current &  	// updated versions  	int[] Current = new int[4];  	int[] App = new int[4];  	// Set their indexes accordingly  	for (int i = 0; i < Current.Length; i++) {  		Current [i] = Convert.ToInt32 (CurrentVersion [i]);  		App [i] = Convert.ToInt32 (AppVersion [i]);  	}  	// If the major is larger than current' there's an update  	if (Current [0] > App [0]) {  		info.Update = true;  		return info;  	}  	else if (Current [0] < App [0]) {  		return info;  	}  	// If the minor is larger than the current' there's an update :O  	if (Current [1] > App [1]) {  		info.Update = true;  		return info;  	}  	else if (Current [1] < App [1]) {  		return info;  	}  	// Same for build  	if (Current [2] > App [2]) {  		info.Update = true;  		return info;  	}  	else if (Current [2] < App [2]) {  		return info;  	}  	// Same for revision  	if (Current [3] > App [3]) {  		info.Update = true;  		return info;  	}  	else if (Current [3] < App [3]) {  		return info;  	}  	// None of those guys returned anything -- they must have  	// the current version' return our info  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (r.Name == "CurrentVersion") {  	// Set the update version to the inner text  	info.UpdateVersion = r.ReadInnerXml ();  	// Split it at every instance of a period so that  	// we can compare each number individually  	CurrentVersion = info.UpdateVersion.Split ('.');  	// Get our current version' split that as well  	string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  	// Create new int arrays that contain the current &  	// updated versions  	int[] Current = new int[4];  	int[] App = new int[4];  	// Set their indexes accordingly  	for (int i = 0; i < Current.Length; i++) {  		Current [i] = Convert.ToInt32 (CurrentVersion [i]);  		App [i] = Convert.ToInt32 (AppVersion [i]);  	}  	// If the major is larger than current' there's an update  	if (Current [0] > App [0]) {  		info.Update = true;  		return info;  	}  	else if (Current [0] < App [0]) {  		return info;  	}  	// If the minor is larger than the current' there's an update :O  	if (Current [1] > App [1]) {  		info.Update = true;  		return info;  	}  	else if (Current [1] < App [1]) {  		return info;  	}  	// Same for build  	if (Current [2] > App [2]) {  		info.Update = true;  		return info;  	}  	else if (Current [2] < App [2]) {  		return info;  	}  	// Same for revision  	if (Current [3] > App [3]) {  		info.Update = true;  		return info;  	}  	else if (Current [3] < App [3]) {  		return info;  	}  	// None of those guys returned anything -- they must have  	// the current version' return our info  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (r.Name == "CurrentVersion") {  	// Set the update version to the inner text  	info.UpdateVersion = r.ReadInnerXml ();  	// Split it at every instance of a period so that  	// we can compare each number individually  	CurrentVersion = info.UpdateVersion.Split ('.');  	// Get our current version' split that as well  	string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  	// Create new int arrays that contain the current &  	// updated versions  	int[] Current = new int[4];  	int[] App = new int[4];  	// Set their indexes accordingly  	for (int i = 0; i < Current.Length; i++) {  		Current [i] = Convert.ToInt32 (CurrentVersion [i]);  		App [i] = Convert.ToInt32 (AppVersion [i]);  	}  	// If the major is larger than current' there's an update  	if (Current [0] > App [0]) {  		info.Update = true;  		return info;  	}  	else if (Current [0] < App [0]) {  		return info;  	}  	// If the minor is larger than the current' there's an update :O  	if (Current [1] > App [1]) {  		info.Update = true;  		return info;  	}  	else if (Current [1] < App [1]) {  		return info;  	}  	// Same for build  	if (Current [2] > App [2]) {  		info.Update = true;  		return info;  	}  	else if (Current [2] < App [2]) {  		return info;  	}  	// Same for revision  	if (Current [3] > App [3]) {  		info.Update = true;  		return info;  	}  	else if (Current [3] < App [3]) {  		return info;  	}  	// None of those guys returned anything -- they must have  	// the current version' return our info  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (r.Name == "CurrentVersion") {  	// Set the update version to the inner text  	info.UpdateVersion = r.ReadInnerXml ();  	// Split it at every instance of a period so that  	// we can compare each number individually  	CurrentVersion = info.UpdateVersion.Split ('.');  	// Get our current version' split that as well  	string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  	// Create new int arrays that contain the current &  	// updated versions  	int[] Current = new int[4];  	int[] App = new int[4];  	// Set their indexes accordingly  	for (int i = 0; i < Current.Length; i++) {  		Current [i] = Convert.ToInt32 (CurrentVersion [i]);  		App [i] = Convert.ToInt32 (AppVersion [i]);  	}  	// If the major is larger than current' there's an update  	if (Current [0] > App [0]) {  		info.Update = true;  		return info;  	}  	else if (Current [0] < App [0]) {  		return info;  	}  	// If the minor is larger than the current' there's an update :O  	if (Current [1] > App [1]) {  		info.Update = true;  		return info;  	}  	else if (Current [1] < App [1]) {  		return info;  	}  	// Same for build  	if (Current [2] > App [2]) {  		info.Update = true;  		return info;  	}  	else if (Current [2] < App [2]) {  		return info;  	}  	// Same for revision  	if (Current [3] > App [3]) {  		info.Update = true;  		return info;  	}  	else if (Current [3] < App [3]) {  		return info;  	}  	// None of those guys returned anything -- they must have  	// the current version' return our info  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (r.Name == "CurrentVersion") {  	// Set the update version to the inner text  	info.UpdateVersion = r.ReadInnerXml ();  	// Split it at every instance of a period so that  	// we can compare each number individually  	CurrentVersion = info.UpdateVersion.Split ('.');  	// Get our current version' split that as well  	string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  	// Create new int arrays that contain the current &  	// updated versions  	int[] Current = new int[4];  	int[] App = new int[4];  	// Set their indexes accordingly  	for (int i = 0; i < Current.Length; i++) {  		Current [i] = Convert.ToInt32 (CurrentVersion [i]);  		App [i] = Convert.ToInt32 (AppVersion [i]);  	}  	// If the major is larger than current' there's an update  	if (Current [0] > App [0]) {  		info.Update = true;  		return info;  	}  	else if (Current [0] < App [0]) {  		return info;  	}  	// If the minor is larger than the current' there's an update :O  	if (Current [1] > App [1]) {  		info.Update = true;  		return info;  	}  	else if (Current [1] < App [1]) {  		return info;  	}  	// Same for build  	if (Current [2] > App [2]) {  		info.Update = true;  		return info;  	}  	else if (Current [2] < App [2]) {  		return info;  	}  	// Same for revision  	if (Current [3] > App [3]) {  		info.Update = true;  		return info;  	}  	else if (Current [3] < App [3]) {  		return info;  	}  	// None of those guys returned anything -- they must have  	// the current version' return our info  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (r.Name == "CurrentVersion") {  	// Set the update version to the inner text  	info.UpdateVersion = r.ReadInnerXml ();  	// Split it at every instance of a period so that  	// we can compare each number individually  	CurrentVersion = info.UpdateVersion.Split ('.');  	// Get our current version' split that as well  	string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  	// Create new int arrays that contain the current &  	// updated versions  	int[] Current = new int[4];  	int[] App = new int[4];  	// Set their indexes accordingly  	for (int i = 0; i < Current.Length; i++) {  		Current [i] = Convert.ToInt32 (CurrentVersion [i]);  		App [i] = Convert.ToInt32 (AppVersion [i]);  	}  	// If the major is larger than current' there's an update  	if (Current [0] > App [0]) {  		info.Update = true;  		return info;  	}  	else if (Current [0] < App [0]) {  		return info;  	}  	// If the minor is larger than the current' there's an update :O  	if (Current [1] > App [1]) {  		info.Update = true;  		return info;  	}  	else if (Current [1] < App [1]) {  		return info;  	}  	// Same for build  	if (Current [2] > App [2]) {  		info.Update = true;  		return info;  	}  	else if (Current [2] < App [2]) {  		return info;  	}  	// Same for revision  	if (Current [3] > App [3]) {  		info.Update = true;  		return info;  	}  	else if (Current [3] < App [3]) {  		return info;  	}  	// None of those guys returned anything -- they must have  	// the current version' return our info  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (r.Name == "CurrentVersion") {  	// Set the update version to the inner text  	info.UpdateVersion = r.ReadInnerXml ();  	// Split it at every instance of a period so that  	// we can compare each number individually  	CurrentVersion = info.UpdateVersion.Split ('.');  	// Get our current version' split that as well  	string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  	// Create new int arrays that contain the current &  	// updated versions  	int[] Current = new int[4];  	int[] App = new int[4];  	// Set their indexes accordingly  	for (int i = 0; i < Current.Length; i++) {  		Current [i] = Convert.ToInt32 (CurrentVersion [i]);  		App [i] = Convert.ToInt32 (AppVersion [i]);  	}  	// If the major is larger than current' there's an update  	if (Current [0] > App [0]) {  		info.Update = true;  		return info;  	}  	else if (Current [0] < App [0]) {  		return info;  	}  	// If the minor is larger than the current' there's an update :O  	if (Current [1] > App [1]) {  		info.Update = true;  		return info;  	}  	else if (Current [1] < App [1]) {  		return info;  	}  	// Same for build  	if (Current [2] > App [2]) {  		info.Update = true;  		return info;  	}  	else if (Current [2] < App [2]) {  		return info;  	}  	// Same for revision  	if (Current [3] > App [3]) {  		info.Update = true;  		return info;  	}  	else if (Current [3] < App [3]) {  		return info;  	}  	// None of those guys returned anything -- they must have  	// the current version' return our info  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (r.Name == "CurrentVersion") {  	// Set the update version to the inner text  	info.UpdateVersion = r.ReadInnerXml ();  	// Split it at every instance of a period so that  	// we can compare each number individually  	CurrentVersion = info.UpdateVersion.Split ('.');  	// Get our current version' split that as well  	string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  	// Create new int arrays that contain the current &  	// updated versions  	int[] Current = new int[4];  	int[] App = new int[4];  	// Set their indexes accordingly  	for (int i = 0; i < Current.Length; i++) {  		Current [i] = Convert.ToInt32 (CurrentVersion [i]);  		App [i] = Convert.ToInt32 (AppVersion [i]);  	}  	// If the major is larger than current' there's an update  	if (Current [0] > App [0]) {  		info.Update = true;  		return info;  	}  	else if (Current [0] < App [0]) {  		return info;  	}  	// If the minor is larger than the current' there's an update :O  	if (Current [1] > App [1]) {  		info.Update = true;  		return info;  	}  	else if (Current [1] < App [1]) {  		return info;  	}  	// Same for build  	if (Current [2] > App [2]) {  		info.Update = true;  		return info;  	}  	else if (Current [2] < App [2]) {  		return info;  	}  	// Same for revision  	if (Current [3] > App [3]) {  		info.Update = true;  		return info;  	}  	else if (Current [3] < App [3]) {  		return info;  	}  	// None of those guys returned anything -- they must have  	// the current version' return our info  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (r.Name == "CurrentVersion") {  	// Set the update version to the inner text  	info.UpdateVersion = r.ReadInnerXml ();  	// Split it at every instance of a period so that  	// we can compare each number individually  	CurrentVersion = info.UpdateVersion.Split ('.');  	// Get our current version' split that as well  	string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  	// Create new int arrays that contain the current &  	// updated versions  	int[] Current = new int[4];  	int[] App = new int[4];  	// Set their indexes accordingly  	for (int i = 0; i < Current.Length; i++) {  		Current [i] = Convert.ToInt32 (CurrentVersion [i]);  		App [i] = Convert.ToInt32 (AppVersion [i]);  	}  	// If the major is larger than current' there's an update  	if (Current [0] > App [0]) {  		info.Update = true;  		return info;  	}  	else if (Current [0] < App [0]) {  		return info;  	}  	// If the minor is larger than the current' there's an update :O  	if (Current [1] > App [1]) {  		info.Update = true;  		return info;  	}  	else if (Current [1] < App [1]) {  		return info;  	}  	// Same for build  	if (Current [2] > App [2]) {  		info.Update = true;  		return info;  	}  	else if (Current [2] < App [2]) {  		return info;  	}  	// Same for revision  	if (Current [3] > App [3]) {  		info.Update = true;  		return info;  	}  	else if (Current [3] < App [3]) {  		return info;  	}  	// None of those guys returned anything -- they must have  	// the current version' return our info  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (r.Name == "CurrentVersion") {  	// Set the update version to the inner text  	info.UpdateVersion = r.ReadInnerXml ();  	// Split it at every instance of a period so that  	// we can compare each number individually  	CurrentVersion = info.UpdateVersion.Split ('.');  	// Get our current version' split that as well  	string[] AppVersion = System.Windows.Forms.Application.ProductVersion.Split ('.');  	// Create new int arrays that contain the current &  	// updated versions  	int[] Current = new int[4];  	int[] App = new int[4];  	// Set their indexes accordingly  	for (int i = 0; i < Current.Length; i++) {  		Current [i] = Convert.ToInt32 (CurrentVersion [i]);  		App [i] = Convert.ToInt32 (AppVersion [i]);  	}  	// If the major is larger than current' there's an update  	if (Current [0] > App [0]) {  		info.Update = true;  		return info;  	}  	else if (Current [0] < App [0]) {  		return info;  	}  	// If the minor is larger than the current' there's an update :O  	if (Current [1] > App [1]) {  		info.Update = true;  		return info;  	}  	else if (Current [1] < App [1]) {  		return info;  	}  	// Same for build  	if (Current [2] > App [2]) {  		info.Update = true;  		return info;  	}  	else if (Current [2] < App [2]) {  		return info;  	}  	// Same for revision  	if (Current [3] > App [3]) {  		info.Update = true;  		return info;  	}  	else if (Current [3] < App [3]) {  		return info;  	}  	// None of those guys returned anything -- they must have  	// the current version' return our info  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (Current [2] > App [2]) {  	info.Update = true;  	return info;  }  else if (Current [2] < App [2]) {  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (Current [2] > App [2]) {  	info.Update = true;  	return info;  }  else if (Current [2] < App [2]) {  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (Current [2] > App [2]) {  	info.Update = true;  	return info;  }  else if (Current [2] < App [2]) {  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (Current [2] > App [2]) {  	info.Update = true;  	return info;  }  else if (Current [2] < App [2]) {  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (Current [2] < App [2]) {  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (Current [2] < App [2]) {  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (Current [3] > App [3]) {  	info.Update = true;  	return info;  }  else if (Current [3] < App [3]) {  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (Current [3] > App [3]) {  	info.Update = true;  	return info;  }  else if (Current [3] < App [3]) {  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (Current [3] > App [3]) {  	info.Update = true;  	return info;  }  else if (Current [3] < App [3]) {  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (Current [3] > App [3]) {  	info.Update = true;  	return info;  }  else if (Current [3] < App [3]) {  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (Current [3] < App [3]) {  	return info;  }  
Magic Number,Party_Buffalo,Update,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Update.cs,CheckForUpdates,The following statement contains a magic number: if (Current [3] < App [3]) {  	return info;  }  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: switch (Properties.Settings.Default.loadedAd) {  case 1:  	Properties.Settings.Default.loadedAd = 2;  	break;  case 2:  	Properties.Settings.Default.loadedAd = 1;  	break;  }  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: switch (Properties.Settings.Default.loadedAd) {  case 1:  	Properties.Settings.Default.loadedAd = 2;  	break;  case 2:  	Properties.Settings.Default.loadedAd = 1;  	break;  }  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: Properties.Settings.Default.loadedAd = 2;  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: while (reader.Read ()) {  	if (reader.Depth == 2 && reader.Name == "item") {  		li = new ListViewItem ();  	}  	else if (reader.Depth == 3 && reader.Name == "title") {  		li.Text = reader.ReadInnerXml ();  	}  	else if (reader.Depth == 3 && reader.Name == "description") {  		string s = reader.ReadInnerXml ();  		if (s == "<![CDATA[]]>") {  			s = "";  		}  		else {  			s = s.Remove (0' "<![CDATA[".Length);  			s = s.Remove (s.Length - 2);  			s = HttpUtility.HtmlDecode (s);  		}  		li.SubItems.Add (s);  	}  	else if (reader.Depth == 3 && reader.Name == "link") {  		li.Tag = reader.ReadInnerXml ();  		List.Add (li);  	}  }  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: while (reader.Read ()) {  	if (reader.Depth == 2 && reader.Name == "item") {  		li = new ListViewItem ();  	}  	else if (reader.Depth == 3 && reader.Name == "title") {  		li.Text = reader.ReadInnerXml ();  	}  	else if (reader.Depth == 3 && reader.Name == "description") {  		string s = reader.ReadInnerXml ();  		if (s == "<![CDATA[]]>") {  			s = "";  		}  		else {  			s = s.Remove (0' "<![CDATA[".Length);  			s = s.Remove (s.Length - 2);  			s = HttpUtility.HtmlDecode (s);  		}  		li.SubItems.Add (s);  	}  	else if (reader.Depth == 3 && reader.Name == "link") {  		li.Tag = reader.ReadInnerXml ();  		List.Add (li);  	}  }  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: while (reader.Read ()) {  	if (reader.Depth == 2 && reader.Name == "item") {  		li = new ListViewItem ();  	}  	else if (reader.Depth == 3 && reader.Name == "title") {  		li.Text = reader.ReadInnerXml ();  	}  	else if (reader.Depth == 3 && reader.Name == "description") {  		string s = reader.ReadInnerXml ();  		if (s == "<![CDATA[]]>") {  			s = "";  		}  		else {  			s = s.Remove (0' "<![CDATA[".Length);  			s = s.Remove (s.Length - 2);  			s = HttpUtility.HtmlDecode (s);  		}  		li.SubItems.Add (s);  	}  	else if (reader.Depth == 3 && reader.Name == "link") {  		li.Tag = reader.ReadInnerXml ();  		List.Add (li);  	}  }  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: while (reader.Read ()) {  	if (reader.Depth == 2 && reader.Name == "item") {  		li = new ListViewItem ();  	}  	else if (reader.Depth == 3 && reader.Name == "title") {  		li.Text = reader.ReadInnerXml ();  	}  	else if (reader.Depth == 3 && reader.Name == "description") {  		string s = reader.ReadInnerXml ();  		if (s == "<![CDATA[]]>") {  			s = "";  		}  		else {  			s = s.Remove (0' "<![CDATA[".Length);  			s = s.Remove (s.Length - 2);  			s = HttpUtility.HtmlDecode (s);  		}  		li.SubItems.Add (s);  	}  	else if (reader.Depth == 3 && reader.Name == "link") {  		li.Tag = reader.ReadInnerXml ();  		List.Add (li);  	}  }  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: while (reader.Read ()) {  	if (reader.Depth == 2 && reader.Name == "item") {  		li = new ListViewItem ();  	}  	else if (reader.Depth == 3 && reader.Name == "title") {  		li.Text = reader.ReadInnerXml ();  	}  	else if (reader.Depth == 3 && reader.Name == "description") {  		string s = reader.ReadInnerXml ();  		if (s == "<![CDATA[]]>") {  			s = "";  		}  		else {  			s = s.Remove (0' "<![CDATA[".Length);  			s = s.Remove (s.Length - 2);  			s = HttpUtility.HtmlDecode (s);  		}  		li.SubItems.Add (s);  	}  	else if (reader.Depth == 3 && reader.Name == "link") {  		li.Tag = reader.ReadInnerXml ();  		List.Add (li);  	}  }  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: if (reader.Depth == 2 && reader.Name == "item") {  	li = new ListViewItem ();  }  else if (reader.Depth == 3 && reader.Name == "title") {  	li.Text = reader.ReadInnerXml ();  }  else if (reader.Depth == 3 && reader.Name == "description") {  	string s = reader.ReadInnerXml ();  	if (s == "<![CDATA[]]>") {  		s = "";  	}  	else {  		s = s.Remove (0' "<![CDATA[".Length);  		s = s.Remove (s.Length - 2);  		s = HttpUtility.HtmlDecode (s);  	}  	li.SubItems.Add (s);  }  else if (reader.Depth == 3 && reader.Name == "link") {  	li.Tag = reader.ReadInnerXml ();  	List.Add (li);  }  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: if (reader.Depth == 2 && reader.Name == "item") {  	li = new ListViewItem ();  }  else if (reader.Depth == 3 && reader.Name == "title") {  	li.Text = reader.ReadInnerXml ();  }  else if (reader.Depth == 3 && reader.Name == "description") {  	string s = reader.ReadInnerXml ();  	if (s == "<![CDATA[]]>") {  		s = "";  	}  	else {  		s = s.Remove (0' "<![CDATA[".Length);  		s = s.Remove (s.Length - 2);  		s = HttpUtility.HtmlDecode (s);  	}  	li.SubItems.Add (s);  }  else if (reader.Depth == 3 && reader.Name == "link") {  	li.Tag = reader.ReadInnerXml ();  	List.Add (li);  }  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: if (reader.Depth == 2 && reader.Name == "item") {  	li = new ListViewItem ();  }  else if (reader.Depth == 3 && reader.Name == "title") {  	li.Text = reader.ReadInnerXml ();  }  else if (reader.Depth == 3 && reader.Name == "description") {  	string s = reader.ReadInnerXml ();  	if (s == "<![CDATA[]]>") {  		s = "";  	}  	else {  		s = s.Remove (0' "<![CDATA[".Length);  		s = s.Remove (s.Length - 2);  		s = HttpUtility.HtmlDecode (s);  	}  	li.SubItems.Add (s);  }  else if (reader.Depth == 3 && reader.Name == "link") {  	li.Tag = reader.ReadInnerXml ();  	List.Add (li);  }  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: if (reader.Depth == 2 && reader.Name == "item") {  	li = new ListViewItem ();  }  else if (reader.Depth == 3 && reader.Name == "title") {  	li.Text = reader.ReadInnerXml ();  }  else if (reader.Depth == 3 && reader.Name == "description") {  	string s = reader.ReadInnerXml ();  	if (s == "<![CDATA[]]>") {  		s = "";  	}  	else {  		s = s.Remove (0' "<![CDATA[".Length);  		s = s.Remove (s.Length - 2);  		s = HttpUtility.HtmlDecode (s);  	}  	li.SubItems.Add (s);  }  else if (reader.Depth == 3 && reader.Name == "link") {  	li.Tag = reader.ReadInnerXml ();  	List.Add (li);  }  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: if (reader.Depth == 2 && reader.Name == "item") {  	li = new ListViewItem ();  }  else if (reader.Depth == 3 && reader.Name == "title") {  	li.Text = reader.ReadInnerXml ();  }  else if (reader.Depth == 3 && reader.Name == "description") {  	string s = reader.ReadInnerXml ();  	if (s == "<![CDATA[]]>") {  		s = "";  	}  	else {  		s = s.Remove (0' "<![CDATA[".Length);  		s = s.Remove (s.Length - 2);  		s = HttpUtility.HtmlDecode (s);  	}  	li.SubItems.Add (s);  }  else if (reader.Depth == 3 && reader.Name == "link") {  	li.Tag = reader.ReadInnerXml ();  	List.Add (li);  }  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: if (reader.Depth == 3 && reader.Name == "title") {  	li.Text = reader.ReadInnerXml ();  }  else if (reader.Depth == 3 && reader.Name == "description") {  	string s = reader.ReadInnerXml ();  	if (s == "<![CDATA[]]>") {  		s = "";  	}  	else {  		s = s.Remove (0' "<![CDATA[".Length);  		s = s.Remove (s.Length - 2);  		s = HttpUtility.HtmlDecode (s);  	}  	li.SubItems.Add (s);  }  else if (reader.Depth == 3 && reader.Name == "link") {  	li.Tag = reader.ReadInnerXml ();  	List.Add (li);  }  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: if (reader.Depth == 3 && reader.Name == "title") {  	li.Text = reader.ReadInnerXml ();  }  else if (reader.Depth == 3 && reader.Name == "description") {  	string s = reader.ReadInnerXml ();  	if (s == "<![CDATA[]]>") {  		s = "";  	}  	else {  		s = s.Remove (0' "<![CDATA[".Length);  		s = s.Remove (s.Length - 2);  		s = HttpUtility.HtmlDecode (s);  	}  	li.SubItems.Add (s);  }  else if (reader.Depth == 3 && reader.Name == "link") {  	li.Tag = reader.ReadInnerXml ();  	List.Add (li);  }  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: if (reader.Depth == 3 && reader.Name == "title") {  	li.Text = reader.ReadInnerXml ();  }  else if (reader.Depth == 3 && reader.Name == "description") {  	string s = reader.ReadInnerXml ();  	if (s == "<![CDATA[]]>") {  		s = "";  	}  	else {  		s = s.Remove (0' "<![CDATA[".Length);  		s = s.Remove (s.Length - 2);  		s = HttpUtility.HtmlDecode (s);  	}  	li.SubItems.Add (s);  }  else if (reader.Depth == 3 && reader.Name == "link") {  	li.Tag = reader.ReadInnerXml ();  	List.Add (li);  }  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: if (reader.Depth == 3 && reader.Name == "title") {  	li.Text = reader.ReadInnerXml ();  }  else if (reader.Depth == 3 && reader.Name == "description") {  	string s = reader.ReadInnerXml ();  	if (s == "<![CDATA[]]>") {  		s = "";  	}  	else {  		s = s.Remove (0' "<![CDATA[".Length);  		s = s.Remove (s.Length - 2);  		s = HttpUtility.HtmlDecode (s);  	}  	li.SubItems.Add (s);  }  else if (reader.Depth == 3 && reader.Name == "link") {  	li.Tag = reader.ReadInnerXml ();  	List.Add (li);  }  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: if (reader.Depth == 3 && reader.Name == "description") {  	string s = reader.ReadInnerXml ();  	if (s == "<![CDATA[]]>") {  		s = "";  	}  	else {  		s = s.Remove (0' "<![CDATA[".Length);  		s = s.Remove (s.Length - 2);  		s = HttpUtility.HtmlDecode (s);  	}  	li.SubItems.Add (s);  }  else if (reader.Depth == 3 && reader.Name == "link") {  	li.Tag = reader.ReadInnerXml ();  	List.Add (li);  }  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: if (reader.Depth == 3 && reader.Name == "description") {  	string s = reader.ReadInnerXml ();  	if (s == "<![CDATA[]]>") {  		s = "";  	}  	else {  		s = s.Remove (0' "<![CDATA[".Length);  		s = s.Remove (s.Length - 2);  		s = HttpUtility.HtmlDecode (s);  	}  	li.SubItems.Add (s);  }  else if (reader.Depth == 3 && reader.Name == "link") {  	li.Tag = reader.ReadInnerXml ();  	List.Add (li);  }  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: if (reader.Depth == 3 && reader.Name == "description") {  	string s = reader.ReadInnerXml ();  	if (s == "<![CDATA[]]>") {  		s = "";  	}  	else {  		s = s.Remove (0' "<![CDATA[".Length);  		s = s.Remove (s.Length - 2);  		s = HttpUtility.HtmlDecode (s);  	}  	li.SubItems.Add (s);  }  else if (reader.Depth == 3 && reader.Name == "link") {  	li.Tag = reader.ReadInnerXml ();  	List.Add (li);  }  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: if (s == "<![CDATA[]]>") {  	s = "";  }  else {  	s = s.Remove (0' "<![CDATA[".Length);  	s = s.Remove (s.Length - 2);  	s = HttpUtility.HtmlDecode (s);  }  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: s = s.Remove (s.Length - 2);  
Magic Number,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following statement contains a magic number: if (reader.Depth == 3 && reader.Name == "link") {  	li.Tag = reader.ReadInnerXml ();  	List.Add (li);  }  
Magic Number,Party_Buffalo.Forms,Cache,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Cache.cs,menuItem1_Click,The following statement contains a magic number: try {  	if (listView1.SelectedItems.Count == 1) {  		Clipboard.SetDataObject ("Title ID: " + listView1.SelectedItems [0].SubItems [1].Text + " Game Name: " + listView1.SelectedItems [0].Text' true' 5' 250);  	}  }  catch {  }  
Magic Number,Party_Buffalo.Forms,Cache,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Cache.cs,menuItem1_Click,The following statement contains a magic number: try {  	if (listView1.SelectedItems.Count == 1) {  		Clipboard.SetDataObject ("Title ID: " + listView1.SelectedItems [0].SubItems [1].Text + " Game Name: " + listView1.SelectedItems [0].Text' true' 5' 250);  	}  }  catch {  }  
Magic Number,Party_Buffalo.Forms,Cache,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Cache.cs,menuItem1_Click,The following statement contains a magic number: if (listView1.SelectedItems.Count == 1) {  	Clipboard.SetDataObject ("Title ID: " + listView1.SelectedItems [0].SubItems [1].Text + " Game Name: " + listView1.SelectedItems [0].Text' true' 5' 250);  }  
Magic Number,Party_Buffalo.Forms,Cache,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Cache.cs,menuItem1_Click,The following statement contains a magic number: if (listView1.SelectedItems.Count == 1) {  	Clipboard.SetDataObject ("Title ID: " + listView1.SelectedItems [0].SubItems [1].Text + " Game Name: " + listView1.SelectedItems [0].Text' true' 5' 250);  }  
Magic Number,Party_Buffalo.Forms,Cache,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Cache.cs,menuItem1_Click,The following statement contains a magic number: Clipboard.SetDataObject ("Title ID: " + listView1.SelectedItems [0].SubItems [1].Text + " Game Name: " + listView1.SelectedItems [0].Text' true' 5' 250);  
Magic Number,Party_Buffalo.Forms,Cache,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Cache.cs,menuItem1_Click,The following statement contains a magic number: Clipboard.SetDataObject ("Title ID: " + listView1.SelectedItems [0].SubItems [1].Text + " Game Name: " + listView1.SelectedItems [0].Text' true' 5' 250);  
Magic Number,Party_Buffalo.Forms,Clone,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Clone.cs,button1_Click,The following statement contains a magic number: try {  	System.Threading.ThreadStart ts = delegate {  		CLKsFATXLib.Streams.Reader OR = Original.Reader ();  		CLKsFATXLib.Streams.Writer D = Destination.Writer ();  		OR.BaseStream.Position = 0;  		D.BaseStream.Position = 0;  		for (long i = 0; i < Original.Length; i += 0x6000) {  			D.Write (OR.ReadBytes (0x6000));  			progressBar1.Invoke ((MethodInvoker)delegate {  				try {  					progressBar1.Maximum = (int)(Original.Length >> 4);  					progressBar1.Value = (int)(((i >> 8) < 0) ? 0 : i >> 4);  				}  				catch {  				}  			});  		}  		OR.Close ();  		D.Close ();  	};  	System.Threading.Thread t = new System.Threading.Thread (ts);  	t.Start ();  }  catch (Exception x) {  	MessageBox.Show (x.Message);  }  
Magic Number,Party_Buffalo.Forms,Clone,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Clone.cs,button1_Click,The following statement contains a magic number: try {  	System.Threading.ThreadStart ts = delegate {  		CLKsFATXLib.Streams.Reader OR = Original.Reader ();  		CLKsFATXLib.Streams.Writer D = Destination.Writer ();  		OR.BaseStream.Position = 0;  		D.BaseStream.Position = 0;  		for (long i = 0; i < Original.Length; i += 0x6000) {  			D.Write (OR.ReadBytes (0x6000));  			progressBar1.Invoke ((MethodInvoker)delegate {  				try {  					progressBar1.Maximum = (int)(Original.Length >> 4);  					progressBar1.Value = (int)(((i >> 8) < 0) ? 0 : i >> 4);  				}  				catch {  				}  			});  		}  		OR.Close ();  		D.Close ();  	};  	System.Threading.Thread t = new System.Threading.Thread (ts);  	t.Start ();  }  catch (Exception x) {  	MessageBox.Show (x.Message);  }  
Magic Number,Party_Buffalo.Forms,Clone,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Clone.cs,button1_Click,The following statement contains a magic number: try {  	System.Threading.ThreadStart ts = delegate {  		CLKsFATXLib.Streams.Reader OR = Original.Reader ();  		CLKsFATXLib.Streams.Writer D = Destination.Writer ();  		OR.BaseStream.Position = 0;  		D.BaseStream.Position = 0;  		for (long i = 0; i < Original.Length; i += 0x6000) {  			D.Write (OR.ReadBytes (0x6000));  			progressBar1.Invoke ((MethodInvoker)delegate {  				try {  					progressBar1.Maximum = (int)(Original.Length >> 4);  					progressBar1.Value = (int)(((i >> 8) < 0) ? 0 : i >> 4);  				}  				catch {  				}  			});  		}  		OR.Close ();  		D.Close ();  	};  	System.Threading.Thread t = new System.Threading.Thread (ts);  	t.Start ();  }  catch (Exception x) {  	MessageBox.Show (x.Message);  }  
Magic Number,Party_Buffalo.Forms,Clone,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Clone.cs,button1_Click,The following statement contains a magic number: for (long i = 0; i < Original.Length; i += 0x6000) {  	D.Write (OR.ReadBytes (0x6000));  	progressBar1.Invoke ((MethodInvoker)delegate {  		try {  			progressBar1.Maximum = (int)(Original.Length >> 4);  			progressBar1.Value = (int)(((i >> 8) < 0) ? 0 : i >> 4);  		}  		catch {  		}  	});  }  
Magic Number,Party_Buffalo.Forms,Clone,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Clone.cs,button1_Click,The following statement contains a magic number: for (long i = 0; i < Original.Length; i += 0x6000) {  	D.Write (OR.ReadBytes (0x6000));  	progressBar1.Invoke ((MethodInvoker)delegate {  		try {  			progressBar1.Maximum = (int)(Original.Length >> 4);  			progressBar1.Value = (int)(((i >> 8) < 0) ? 0 : i >> 4);  		}  		catch {  		}  	});  }  
Magic Number,Party_Buffalo.Forms,Clone,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Clone.cs,button1_Click,The following statement contains a magic number: for (long i = 0; i < Original.Length; i += 0x6000) {  	D.Write (OR.ReadBytes (0x6000));  	progressBar1.Invoke ((MethodInvoker)delegate {  		try {  			progressBar1.Maximum = (int)(Original.Length >> 4);  			progressBar1.Value = (int)(((i >> 8) < 0) ? 0 : i >> 4);  		}  		catch {  		}  	});  }  
Magic Number,Party_Buffalo.Forms,Clone,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Clone.cs,button1_Click,The following statement contains a magic number: progressBar1.Invoke ((MethodInvoker)delegate {  	try {  		progressBar1.Maximum = (int)(Original.Length >> 4);  		progressBar1.Value = (int)(((i >> 8) < 0) ? 0 : i >> 4);  	}  	catch {  	}  });  
Magic Number,Party_Buffalo.Forms,Clone,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Clone.cs,button1_Click,The following statement contains a magic number: progressBar1.Invoke ((MethodInvoker)delegate {  	try {  		progressBar1.Maximum = (int)(Original.Length >> 4);  		progressBar1.Value = (int)(((i >> 8) < 0) ? 0 : i >> 4);  	}  	catch {  	}  });  
Magic Number,Party_Buffalo.Forms,Clone,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Clone.cs,button1_Click,The following statement contains a magic number: progressBar1.Invoke ((MethodInvoker)delegate {  	try {  		progressBar1.Maximum = (int)(Original.Length >> 4);  		progressBar1.Value = (int)(((i >> 8) < 0) ? 0 : i >> 4);  	}  	catch {  	}  });  
Magic Number,Party_Buffalo.Forms,Clone,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Clone.cs,button1_Click,The following statement contains a magic number: try {  	progressBar1.Maximum = (int)(Original.Length >> 4);  	progressBar1.Value = (int)(((i >> 8) < 0) ? 0 : i >> 4);  }  catch {  }  
Magic Number,Party_Buffalo.Forms,Clone,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Clone.cs,button1_Click,The following statement contains a magic number: try {  	progressBar1.Maximum = (int)(Original.Length >> 4);  	progressBar1.Value = (int)(((i >> 8) < 0) ? 0 : i >> 4);  }  catch {  }  
Magic Number,Party_Buffalo.Forms,Clone,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Clone.cs,button1_Click,The following statement contains a magic number: try {  	progressBar1.Maximum = (int)(Original.Length >> 4);  	progressBar1.Value = (int)(((i >> 8) < 0) ? 0 : i >> 4);  }  catch {  }  
Magic Number,Party_Buffalo.Forms,Clone,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Clone.cs,button1_Click,The following statement contains a magic number: progressBar1.Maximum = (int)(Original.Length >> 4);  
Magic Number,Party_Buffalo.Forms,Clone,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Clone.cs,button1_Click,The following statement contains a magic number: progressBar1.Value = (int)(((i >> 8) < 0) ? 0 : i >> 4);  
Magic Number,Party_Buffalo.Forms,Clone,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Clone.cs,button1_Click,The following statement contains a magic number: progressBar1.Value = (int)(((i >> 8) < 0) ? 0 : i >> 4);  
Magic Number,Party_Buffalo.Forms,CustomBackupViewer,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\CustomBackupViewer.cs,AfterSelect,The following statement contains a magic number: foreach (System.IO.FileInfo fi in clicked.GetFiles ()) {  	ListViewItem li = new ListViewItem (fi.Name);  	li.SubItems.Add ("File");  	li.SubItems.Add (VariousFunctions.ByteConversion (fi.Length));  	li.SubItems.Add (fi.LastWriteTime.ToString ());  	// Get the file name  	CLKsFATXLib.Streams.Reader br = new CLKsFATXLib.Streams.Reader (new System.IO.FileStream (fi.FullName' System.IO.FileMode.Open));  	if (br.BaseStream.Length > 4) {  		uint header = br.ReadUInt32 (true);  		if (header == 0x434F4E20 || header == 0x4C495645 || header == 0x50495253) {  			br.BaseStream.Position = (long)CLKsFATXLib.Geometry.STFSOffsets.DisplayName;  			li.SubItems.Add (br.ReadUnicodeString (0x80));  		}  	}  	br.Close ();  	li.Tag = new object[] {  		fi.FullName'  		true  	};  	li.ImageIndex = 1;  	listView1.Items.Add (li);  }  
Magic Number,Party_Buffalo.Forms,CustomBackupViewer,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\CustomBackupViewer.cs,AfterSelect,The following statement contains a magic number: if (br.BaseStream.Length > 4) {  	uint header = br.ReadUInt32 (true);  	if (header == 0x434F4E20 || header == 0x4C495645 || header == 0x50495253) {  		br.BaseStream.Position = (long)CLKsFATXLib.Geometry.STFSOffsets.DisplayName;  		li.SubItems.Add (br.ReadUnicodeString (0x80));  	}  }  
Magic Number,Party_Buffalo.Forms,DeviceSelector,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\DeviceSelector.cs,Go,The following statement contains a magic number: try {  	if (driveList != null) {  		for (int i = 0; i < driveList.Count; i++) {  			driveList [i].Close ();  		}  	}  	listView1.Invoke ((MethodInvoker)delegate {  		listView1.Items.Clear ();  	});  	label1.Invoke ((MethodInvoker)delegate {  		label1.Text = "Getting drives...";  	});  	b_Refresh.Invoke ((MethodInvoker)delegate {  		b_Refresh.Enabled = false;  	});  	driveList = CLKsFATXLib.StartHere.GetFATXDrives ().ToList ();  	if (Properties.Settings.Default.recentFiles != null) {  		foreach (string s in Properties.Settings.Default.recentFiles) {  			if (System.IO.File.Exists (s)) {  				try {  					CLKsFATXLib.Drive d = new CLKsFATXLib.Drive (s);  					if (d.IsFATXDrive ()) {  						driveList.Add (d);  					}  				}  				catch (Exception e) {  					if (!e.Message.Contains ("being used")) {  						MessageBox.Show ("An exception was thrown: " + e.Message + "\r\n\r\nStack Trace:\r\n" + e.StackTrace);  					}  					else {  						continue;  					}  				}  			}  		}  	}  	List<ListViewItem> liList = new List<ListViewItem> ();  	for (int i = 0; i < driveList.Count; i++) {  		try {  			ListViewItem li = new ListViewItem (driveList [i].Name);  			if (driveList [i].DriveType == CLKsFATXLib.DriveType.HardDisk) {  				li.ImageIndex = 0;  				li.SubItems.Add (driveList [i].DeviceIndex.ToString ());  			}  			else if (driveList [i].DriveType == CLKsFATXLib.DriveType.USB) {  				li.ImageIndex = 1;  				li.SubItems.Add (System.IO.Path.GetPathRoot (driveList [i].USBPaths [0]));  			}  			else {  				li.ImageIndex = 2;  				li.SubItems.Add (System.IO.Path.GetFileName (driveList [i].FilePath));  			}  			li.SubItems.Add (driveList [i].LengthFriendly);  			li.Tag = driveList [i];  			liList.Add (li);  		}  		catch (Exception e) {  			if (!e.Message.Contains ("being used")) {  				MessageBox.Show ("An exception was thrown: " + e.Message + "\r\n\r\nStack Trace:\r\n" + e.StackTrace);  			}  			else {  				continue;  			}  		}  	}  	listView1.Invoke ((MethodInvoker)delegate {  		listView1.Items.AddRange (liList.ToArray ());  	});  	label1.Invoke ((MethodInvoker)delegate {  		if (liList.Count == 0) {  			label1.Text = "No drives found...";  		}  		else {  			label1.Text = liList.Count.ToString () + ((liList.Count > 1) ? " drives found" : " drive found");  		}  	});  	b_Refresh.Invoke ((MethodInvoker)delegate {  		b_Refresh.Enabled = true;  	});  }  catch (Exception e) {  	if (!e.Message.Contains ("being used")) {  		MessageBox.Show ("An exception was thrown: " + e.Message + "\r\n\r\nStack Trace:\r\n" + e.StackTrace);  	}  }  
Magic Number,Party_Buffalo.Forms,DeviceSelector,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\DeviceSelector.cs,Go,The following statement contains a magic number: for (int i = 0; i < driveList.Count; i++) {  	try {  		ListViewItem li = new ListViewItem (driveList [i].Name);  		if (driveList [i].DriveType == CLKsFATXLib.DriveType.HardDisk) {  			li.ImageIndex = 0;  			li.SubItems.Add (driveList [i].DeviceIndex.ToString ());  		}  		else if (driveList [i].DriveType == CLKsFATXLib.DriveType.USB) {  			li.ImageIndex = 1;  			li.SubItems.Add (System.IO.Path.GetPathRoot (driveList [i].USBPaths [0]));  		}  		else {  			li.ImageIndex = 2;  			li.SubItems.Add (System.IO.Path.GetFileName (driveList [i].FilePath));  		}  		li.SubItems.Add (driveList [i].LengthFriendly);  		li.Tag = driveList [i];  		liList.Add (li);  	}  	catch (Exception e) {  		if (!e.Message.Contains ("being used")) {  			MessageBox.Show ("An exception was thrown: " + e.Message + "\r\n\r\nStack Trace:\r\n" + e.StackTrace);  		}  		else {  			continue;  		}  	}  }  
Magic Number,Party_Buffalo.Forms,DeviceSelector,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\DeviceSelector.cs,Go,The following statement contains a magic number: try {  	ListViewItem li = new ListViewItem (driveList [i].Name);  	if (driveList [i].DriveType == CLKsFATXLib.DriveType.HardDisk) {  		li.ImageIndex = 0;  		li.SubItems.Add (driveList [i].DeviceIndex.ToString ());  	}  	else if (driveList [i].DriveType == CLKsFATXLib.DriveType.USB) {  		li.ImageIndex = 1;  		li.SubItems.Add (System.IO.Path.GetPathRoot (driveList [i].USBPaths [0]));  	}  	else {  		li.ImageIndex = 2;  		li.SubItems.Add (System.IO.Path.GetFileName (driveList [i].FilePath));  	}  	li.SubItems.Add (driveList [i].LengthFriendly);  	li.Tag = driveList [i];  	liList.Add (li);  }  catch (Exception e) {  	if (!e.Message.Contains ("being used")) {  		MessageBox.Show ("An exception was thrown: " + e.Message + "\r\n\r\nStack Trace:\r\n" + e.StackTrace);  	}  	else {  		continue;  	}  }  
Magic Number,Party_Buffalo.Forms,DeviceSelector,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\DeviceSelector.cs,Go,The following statement contains a magic number: if (driveList [i].DriveType == CLKsFATXLib.DriveType.HardDisk) {  	li.ImageIndex = 0;  	li.SubItems.Add (driveList [i].DeviceIndex.ToString ());  }  else if (driveList [i].DriveType == CLKsFATXLib.DriveType.USB) {  	li.ImageIndex = 1;  	li.SubItems.Add (System.IO.Path.GetPathRoot (driveList [i].USBPaths [0]));  }  else {  	li.ImageIndex = 2;  	li.SubItems.Add (System.IO.Path.GetFileName (driveList [i].FilePath));  }  
Magic Number,Party_Buffalo.Forms,DeviceSelector,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\DeviceSelector.cs,Go,The following statement contains a magic number: if (driveList [i].DriveType == CLKsFATXLib.DriveType.USB) {  	li.ImageIndex = 1;  	li.SubItems.Add (System.IO.Path.GetPathRoot (driveList [i].USBPaths [0]));  }  else {  	li.ImageIndex = 2;  	li.SubItems.Add (System.IO.Path.GetFileName (driveList [i].FilePath));  }  
Magic Number,Party_Buffalo.Forms,DeviceSelector,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\DeviceSelector.cs,Go,The following statement contains a magic number: li.ImageIndex = 2;  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction,The following statement contains a magic number: if (Environment.OSVersion.Version.Build >= 7600) {  	Windows7 = true;  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction,The following statement contains a magic number: if (Environment.OSVersion.Version.Build >= 6000) {  	Aero = true;  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction,The following statement contains a magic number: if (Environment.OSVersion.Version.Build >= 7600) {  	Windows7 = true;  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction,The following statement contains a magic number: if (Environment.OSVersion.Version.Build >= 6000) {  	Aero = true;  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction,The following statement contains a magic number: if (Environment.OSVersion.Version.Build >= 7600) {  	Windows7 = true;  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction,The following statement contains a magic number: if (Environment.OSVersion.Version.Build >= 6000) {  	Aero = true;  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction,The following statement contains a magic number: if (Environment.OSVersion.Version.Build >= 7600) {  	Windows7 = true;  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction,The following statement contains a magic number: if (Environment.OSVersion.Version.Build >= 6000) {  	Aero = true;  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction,The following statement contains a magic number: if (Environment.OSVersion.Version.Build >= 7600) {  	Windows7 = true;  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction,The following statement contains a magic number: if (Environment.OSVersion.Version.Build >= 6000) {  	Aero = true;  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction,The following statement contains a magic number: if (Environment.OSVersion.Version.Build >= 7600) {  	Windows7 = true;  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction,The following statement contains a magic number: if (Environment.OSVersion.Version.Build >= 6000) {  	Aero = true;  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The following statement contains a magic number: if (xDrive != null && m == Method.Backup || m == Method.ExtractJ || m == Method.ExtractSS || m == Method.Restore) {  	switch (m) {  	case Method.Backup:  		this.Invoke ((MethodInvoker)delegate {  			this.Icon = Properties.Resources.Add;  		});  		CLKsFATXLib.Streams.Reader r = xDrive.Reader ();  		CLKsFATXLib.Streams.Writer w = new CLKsFATXLib.Streams.Writer (new System.IO.FileStream (OutPath' System.IO.FileMode.Create));  		int ReadLength = 0x200;  		if (xDrive.Length % 0x100000 == 0) {  			ReadLength = 0x100000;  		}  		else if (xDrive.Length % 0x40000 == 0) {  			ReadLength = 0x40000;  		}  		else if (xDrive.Length % 0x10000 == 0) {  			ReadLength = 0x10000;  		}  		else if (xDrive.Length % 0x5000 == 0) {  			ReadLength = 0x5000;  		}  		for (int i = 0; i < xDrive.Length / ReadLength; i++) {  			if (Cancel) {  				break;  			}  			w.Write (r.ReadBytes (ReadLength));  			progressBar1.Invoke ((MethodInvoker)delegate {  				try {  					progressBar1.Maximum = (int)(xDrive.Length / ReadLength);  					progressBar1.Value = (i + 1);  					if (Windows7) {  						tm.SetProgressValue (progressBar1.Value' progressBar1.Maximum);  					}  				}  				catch {  				}  			});  			this.Invoke ((MethodInvoker)delegate {  				this.Text = "Backing Up Drive";  			});  			label1.Invoke ((MethodInvoker)delegate {  				label1.Text = (((decimal)(i + 1) / (decimal)(xDrive.Length / ReadLength)) * 100).ToString ("#") + "%";  			});  		}  		w.Close ();  		break;  	case Method.ExtractSS:  		this.Invoke ((MethodInvoker)delegate {  			this.Icon = Properties.Resources.Add;  		});  		//Create our io for the drive  		CLKsFATXLib.Streams.Reader io = xDrive.Reader ();  		//Go to the location of the security sector  		io.BaseStream.Position = 0x2000;  		//Create our ref io for the file  		CLKsFATXLib.Streams.Writer bw = new CLKsFATXLib.Streams.Writer (new System.IO.FileStream (OutPath' System.IO.FileMode.Create));  		//Read the sector.  The size is an estimation' since I have no idea how big it really is  		bw.Write (io.ReadBytes (0xE00));  		//Close our io  		bw.Close ();  		break;  	case Method.ExtractJ:  		this.Invoke ((MethodInvoker)delegate {  			this.Icon = Properties.Resources.Add;  		});  		//Create our io for the drive  		CLKsFATXLib.Streams.Reader io2 = xDrive.Reader ();  		//Go to the location of the security sector  		io2.BaseStream.Position = 0x800;  		//Create our ref io for the file  		CLKsFATXLib.Streams.Writer bw2 = new CLKsFATXLib.Streams.Writer (new System.IO.FileStream (OutPath' System.IO.FileMode.Create));  		//Read the sector.  The size is an estimation' since I have no idea how big it really is  		bw2.Write (io2.ReadBytes (0x400));  		//Close our io  		bw2.Close ();  		break;  	case Method.Restore:  		this.Invoke ((MethodInvoker)delegate {  			this.Icon = Properties.Resources.Remove;  		});  		if (MessageBox.Show ("WARNING: Restoring a drive that does not match your current one can cause for data to not be read correctly by the Xbox 360' or for other unforseen problems!  Please make sure you know what you're doing before continuing.  Are you sure you want to continue?"' "WARNING AND STUFF"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.Yes) {  			if (MessageBox.Show ("This is your last chance to stop!  Are you POSITIVE you want to continue?"' "Last Chance!"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.Yes) {  				CLKsFATXLib.Streams.Reader r2 = new CLKsFATXLib.Streams.Reader (new System.IO.FileStream (OutPath' System.IO.FileMode.Open));  				CLKsFATXLib.Streams.Writer w2 = xDrive.Writer ();  				int ReadLength2 = 0x200;  				if (xDrive.Length % 0x4000 != 0) {  					ReadLength2 = 0x4000;  				}  				else {  					for (int i = 0x300000; i > 0x200; i -= 0x1000) {  						if (xDrive.Length % i == 0) {  							ReadLength2 = i;  							break;  						}  					}  				}  				for (int i = 0; i < xDrive.Length / ReadLength2; i++) {  					if (Cancel) {  						break;  					}  					w2.Write (r2.ReadBytes (ReadLength2));  					progressBar1.Invoke ((MethodInvoker)delegate {  						try {  							progressBar1.Maximum = (int)(xDrive.Length / ReadLength2);  							progressBar1.Value = (i + 1);  							if (Windows7) {  								tm.SetProgressValue (progressBar1.Value' progressBar1.Maximum);  							}  						}  						catch {  						}  					});  					this.Invoke ((MethodInvoker)delegate {  						this.Text = "Restoring Drive";  					});  					label1.Invoke ((MethodInvoker)delegate {  						label1.Text = (((decimal)(i + 1) / (decimal)(xDrive.Length / ReadLength2)) * 100).ToString ("#") + "%";  					});  				}  				r2.Close ();  			}  		}  		break;  	}  }  else {  	Folder ParentFolder = null;  	this.Invoke ((MethodInvoker)delegate {  		ParentFolder = Parent;  	});  	switch (m) {  	case Method.Extract:  		#if DEBUG  		System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch ();  		if (Timer) {  			sw.Start ();  		}  		#endif  		this.Invoke ((MethodInvoker)delegate {  			this.Icon = Properties.Resources.Add;  		});  		foreach (Entry entry in Entries) {  			if (!entry.IsFolder) {  				((File)entry).FileAction += new CLKsFATXLib.Structs.FileActionChanged (EntryAction_FileAction);  				this.Invoke ((MethodInvoker)delegate {  					this.Text = entry.FullPath;  				});  				label1.Invoke ((MethodInvoker)delegate {  					label1.Text = entry.Name;  				});  				// Check to see if we're batch-extracting...  				if (Entries.Length == 1) {  					((File)entry).Extract (OutPath);  				}  				else {  					((File)entry).Extract (OutPath + "\\" + entry.Name);  				}  			}  			else {  				((Folder)entry).FolderAction += new CLKsFATXLib.Structs.FolderActionChanged (EntryAction_FolderAction);  				((Folder)entry).Extract (OutPath' EntriesToSkip);  			}  			if (Cancel) {  				break;  			}  		}  		#if DEBUG  		if (Timer) {  			sw.Stop ();  			MessageBox.Show (string.Format ("{0}:{1}:{2}"' sw.Elapsed.Minutes' sw.Elapsed.Seconds' sw.Elapsed.Milliseconds));  		}  		#endif  		break;  	case Method.Delete:  		this.Invoke ((MethodInvoker)delegate {  			this.Icon = Properties.Resources.Remove;  		});  		foreach (Entry entry in Entries) {  			if (Cancel) {  				break;  			}  			if (entry.IsFolder) {  				Folder current = ((Folder)entry);  				current.ResetFolderAction ();  				current.FolderAction += new CLKsFATXLib.Structs.FolderActionChanged (EntryAction_FolderAction);  				current.Delete ();  			}  			else {  				this.Invoke ((MethodInvoker)delegate {  					this.Text = entry.FullPath;  				});  				label1.Invoke ((MethodInvoker)delegate {  					label1.Text = entry.Name;  				});  				File current = ((File)entry);  				current.FileAction += new CLKsFATXLib.Structs.FileActionChanged (EntryAction_FileAction);  				current.Delete ();  			}  		}  		break;  	case Method.Inject:  		#if DEBUG  		System.Diagnostics.Stopwatch sw2 = new System.Diagnostics.Stopwatch ();  		if (Timer) {  			sw2.Start ();  		}  		#endif  		this.Invoke ((MethodInvoker)delegate {  			this.Icon = Properties.Resources.Add;  		});  		if (ParentFolder != null) {  			ParentFolder.ResetFolderAction ();  			ParentFolder.FolderAction += new CLKsFATXLib.Structs.FolderActionChanged (EntryAction_FolderAction);  			List<CLKsFATXLib.Structs.ExistingEntry> Existing = new List<CLKsFATXLib.Structs.ExistingEntry> ();  			foreach (string s in Paths) {  				if (Cancel) {  					break;  				}  				if (VariousFunctions.IsFolder (s)) {  					Existing.AddRange (ParentFolder.InjectFolder (s' false' false));  				}  				else {  					ParentFolder.FolderAction += new CLKsFATXLib.Structs.FolderActionChanged (EntryAction_FolderAction);  					CLKsFATXLib.Structs.WriteResult wr = ParentFolder.CreateNewFile (s);  					if (wr.CouldNotWrite) {  						CLKsFATXLib.Structs.ExistingEntry ex = new CLKsFATXLib.Structs.ExistingEntry ();  						ex.Existing = wr.Entry;  						ex.NewPath = s;  						Existing.Add (ex);  					}  				}  			}  			DoExisting (Existing);  		}  		else {  			List<CLKsFATXLib.Structs.ExistingEntry> Existing = new List<CLKsFATXLib.Structs.ExistingEntry> ();  			foreach (string s in Paths) {  				string Path = "";  				try {  					Path = VariousFunctions.GetFATXPath (s);  				}  				catch (Exception x) {  					ExceptionHandler (x);  					continue;  				}  				Folder thisFolder = xDrive.CreateDirectory ("Data\\" + Path);  				thisFolder.ResetFolderAction ();  				thisFolder.FolderAction += new CLKsFATXLib.Structs.FolderActionChanged (EntryAction_FolderAction);  				if (Cancel) {  					break;  				}  				if (VariousFunctions.IsFolder (s)) {  					ExceptionHandler (new Exception ("Can not write folder as STFS package (silly error wording)"));  					continue;  				}  				else {  					thisFolder.FolderAction += new CLKsFATXLib.Structs.FolderActionChanged (EntryAction_FolderAction);  					CLKsFATXLib.Structs.WriteResult wr = thisFolder.CreateNewFile (s);  					if (wr.CouldNotWrite) {  						CLKsFATXLib.Structs.ExistingEntry ex = new CLKsFATXLib.Structs.ExistingEntry ();  						ex.Existing = wr.Entry;  						ex.NewPath = s;  						Existing.Add (ex);  					}  				}  			}  			DoExisting (Existing);  		}  		#if DEBUG  		if (Timer) {  			sw2.Stop ();  			MessageBox.Show (string.Format ("{0}:{1}:{2}"' sw2.Elapsed.Minutes' sw2.Elapsed.Seconds' sw2.Elapsed.Milliseconds));  		}  		#endif  		break;  	case Method.Move:  		List<CLKsFATXLib.Structs.WriteResult> Results = new List<CLKsFATXLib.Structs.WriteResult> ();  		foreach (Entry Entry in Entries) {  			CLKsFATXLib.Structs.WriteResult wr = Entry.Move (OutPath);  			if (wr.CouldNotWrite) {  				Results.Add (wr);  			}  		}  		break;  	}  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The following statement contains a magic number: if (xDrive != null && m == Method.Backup || m == Method.ExtractJ || m == Method.ExtractSS || m == Method.Restore) {  	switch (m) {  	case Method.Backup:  		this.Invoke ((MethodInvoker)delegate {  			this.Icon = Properties.Resources.Add;  		});  		CLKsFATXLib.Streams.Reader r = xDrive.Reader ();  		CLKsFATXLib.Streams.Writer w = new CLKsFATXLib.Streams.Writer (new System.IO.FileStream (OutPath' System.IO.FileMode.Create));  		int ReadLength = 0x200;  		if (xDrive.Length % 0x100000 == 0) {  			ReadLength = 0x100000;  		}  		else if (xDrive.Length % 0x40000 == 0) {  			ReadLength = 0x40000;  		}  		else if (xDrive.Length % 0x10000 == 0) {  			ReadLength = 0x10000;  		}  		else if (xDrive.Length % 0x5000 == 0) {  			ReadLength = 0x5000;  		}  		for (int i = 0; i < xDrive.Length / ReadLength; i++) {  			if (Cancel) {  				break;  			}  			w.Write (r.ReadBytes (ReadLength));  			progressBar1.Invoke ((MethodInvoker)delegate {  				try {  					progressBar1.Maximum = (int)(xDrive.Length / ReadLength);  					progressBar1.Value = (i + 1);  					if (Windows7) {  						tm.SetProgressValue (progressBar1.Value' progressBar1.Maximum);  					}  				}  				catch {  				}  			});  			this.Invoke ((MethodInvoker)delegate {  				this.Text = "Backing Up Drive";  			});  			label1.Invoke ((MethodInvoker)delegate {  				label1.Text = (((decimal)(i + 1) / (decimal)(xDrive.Length / ReadLength)) * 100).ToString ("#") + "%";  			});  		}  		w.Close ();  		break;  	case Method.ExtractSS:  		this.Invoke ((MethodInvoker)delegate {  			this.Icon = Properties.Resources.Add;  		});  		//Create our io for the drive  		CLKsFATXLib.Streams.Reader io = xDrive.Reader ();  		//Go to the location of the security sector  		io.BaseStream.Position = 0x2000;  		//Create our ref io for the file  		CLKsFATXLib.Streams.Writer bw = new CLKsFATXLib.Streams.Writer (new System.IO.FileStream (OutPath' System.IO.FileMode.Create));  		//Read the sector.  The size is an estimation' since I have no idea how big it really is  		bw.Write (io.ReadBytes (0xE00));  		//Close our io  		bw.Close ();  		break;  	case Method.ExtractJ:  		this.Invoke ((MethodInvoker)delegate {  			this.Icon = Properties.Resources.Add;  		});  		//Create our io for the drive  		CLKsFATXLib.Streams.Reader io2 = xDrive.Reader ();  		//Go to the location of the security sector  		io2.BaseStream.Position = 0x800;  		//Create our ref io for the file  		CLKsFATXLib.Streams.Writer bw2 = new CLKsFATXLib.Streams.Writer (new System.IO.FileStream (OutPath' System.IO.FileMode.Create));  		//Read the sector.  The size is an estimation' since I have no idea how big it really is  		bw2.Write (io2.ReadBytes (0x400));  		//Close our io  		bw2.Close ();  		break;  	case Method.Restore:  		this.Invoke ((MethodInvoker)delegate {  			this.Icon = Properties.Resources.Remove;  		});  		if (MessageBox.Show ("WARNING: Restoring a drive that does not match your current one can cause for data to not be read correctly by the Xbox 360' or for other unforseen problems!  Please make sure you know what you're doing before continuing.  Are you sure you want to continue?"' "WARNING AND STUFF"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.Yes) {  			if (MessageBox.Show ("This is your last chance to stop!  Are you POSITIVE you want to continue?"' "Last Chance!"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.Yes) {  				CLKsFATXLib.Streams.Reader r2 = new CLKsFATXLib.Streams.Reader (new System.IO.FileStream (OutPath' System.IO.FileMode.Open));  				CLKsFATXLib.Streams.Writer w2 = xDrive.Writer ();  				int ReadLength2 = 0x200;  				if (xDrive.Length % 0x4000 != 0) {  					ReadLength2 = 0x4000;  				}  				else {  					for (int i = 0x300000; i > 0x200; i -= 0x1000) {  						if (xDrive.Length % i == 0) {  							ReadLength2 = i;  							break;  						}  					}  				}  				for (int i = 0; i < xDrive.Length / ReadLength2; i++) {  					if (Cancel) {  						break;  					}  					w2.Write (r2.ReadBytes (ReadLength2));  					progressBar1.Invoke ((MethodInvoker)delegate {  						try {  							progressBar1.Maximum = (int)(xDrive.Length / ReadLength2);  							progressBar1.Value = (i + 1);  							if (Windows7) {  								tm.SetProgressValue (progressBar1.Value' progressBar1.Maximum);  							}  						}  						catch {  						}  					});  					this.Invoke ((MethodInvoker)delegate {  						this.Text = "Restoring Drive";  					});  					label1.Invoke ((MethodInvoker)delegate {  						label1.Text = (((decimal)(i + 1) / (decimal)(xDrive.Length / ReadLength2)) * 100).ToString ("#") + "%";  					});  				}  				r2.Close ();  			}  		}  		break;  	}  }  else {  	Folder ParentFolder = null;  	this.Invoke ((MethodInvoker)delegate {  		ParentFolder = Parent;  	});  	switch (m) {  	case Method.Extract:  		#if DEBUG  		System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch ();  		if (Timer) {  			sw.Start ();  		}  		#endif  		this.Invoke ((MethodInvoker)delegate {  			this.Icon = Properties.Resources.Add;  		});  		foreach (Entry entry in Entries) {  			if (!entry.IsFolder) {  				((File)entry).FileAction += new CLKsFATXLib.Structs.FileActionChanged (EntryAction_FileAction);  				this.Invoke ((MethodInvoker)delegate {  					this.Text = entry.FullPath;  				});  				label1.Invoke ((MethodInvoker)delegate {  					label1.Text = entry.Name;  				});  				// Check to see if we're batch-extracting...  				if (Entries.Length == 1) {  					((File)entry).Extract (OutPath);  				}  				else {  					((File)entry).Extract (OutPath + "\\" + entry.Name);  				}  			}  			else {  				((Folder)entry).FolderAction += new CLKsFATXLib.Structs.FolderActionChanged (EntryAction_FolderAction);  				((Folder)entry).Extract (OutPath' EntriesToSkip);  			}  			if (Cancel) {  				break;  			}  		}  		#if DEBUG  		if (Timer) {  			sw.Stop ();  			MessageBox.Show (string.Format ("{0}:{1}:{2}"' sw.Elapsed.Minutes' sw.Elapsed.Seconds' sw.Elapsed.Milliseconds));  		}  		#endif  		break;  	case Method.Delete:  		this.Invoke ((MethodInvoker)delegate {  			this.Icon = Properties.Resources.Remove;  		});  		foreach (Entry entry in Entries) {  			if (Cancel) {  				break;  			}  			if (entry.IsFolder) {  				Folder current = ((Folder)entry);  				current.ResetFolderAction ();  				current.FolderAction += new CLKsFATXLib.Structs.FolderActionChanged (EntryAction_FolderAction);  				current.Delete ();  			}  			else {  				this.Invoke ((MethodInvoker)delegate {  					this.Text = entry.FullPath;  				});  				label1.Invoke ((MethodInvoker)delegate {  					label1.Text = entry.Name;  				});  				File current = ((File)entry);  				current.FileAction += new CLKsFATXLib.Structs.FileActionChanged (EntryAction_FileAction);  				current.Delete ();  			}  		}  		break;  	case Method.Inject:  		#if DEBUG  		System.Diagnostics.Stopwatch sw2 = new System.Diagnostics.Stopwatch ();  		if (Timer) {  			sw2.Start ();  		}  		#endif  		this.Invoke ((MethodInvoker)delegate {  			this.Icon = Properties.Resources.Add;  		});  		if (ParentFolder != null) {  			ParentFolder.ResetFolderAction ();  			ParentFolder.FolderAction += new CLKsFATXLib.Structs.FolderActionChanged (EntryAction_FolderAction);  			List<CLKsFATXLib.Structs.ExistingEntry> Existing = new List<CLKsFATXLib.Structs.ExistingEntry> ();  			foreach (string s in Paths) {  				if (Cancel) {  					break;  				}  				if (VariousFunctions.IsFolder (s)) {  					Existing.AddRange (ParentFolder.InjectFolder (s' false' false));  				}  				else {  					ParentFolder.FolderAction += new CLKsFATXLib.Structs.FolderActionChanged (EntryAction_FolderAction);  					CLKsFATXLib.Structs.WriteResult wr = ParentFolder.CreateNewFile (s);  					if (wr.CouldNotWrite) {  						CLKsFATXLib.Structs.ExistingEntry ex = new CLKsFATXLib.Structs.ExistingEntry ();  						ex.Existing = wr.Entry;  						ex.NewPath = s;  						Existing.Add (ex);  					}  				}  			}  			DoExisting (Existing);  		}  		else {  			List<CLKsFATXLib.Structs.ExistingEntry> Existing = new List<CLKsFATXLib.Structs.ExistingEntry> ();  			foreach (string s in Paths) {  				string Path = "";  				try {  					Path = VariousFunctions.GetFATXPath (s);  				}  				catch (Exception x) {  					ExceptionHandler (x);  					continue;  				}  				Folder thisFolder = xDrive.CreateDirectory ("Data\\" + Path);  				thisFolder.ResetFolderAction ();  				thisFolder.FolderAction += new CLKsFATXLib.Structs.FolderActionChanged (EntryAction_FolderAction);  				if (Cancel) {  					break;  				}  				if (VariousFunctions.IsFolder (s)) {  					ExceptionHandler (new Exception ("Can not write folder as STFS package (silly error wording)"));  					continue;  				}  				else {  					thisFolder.FolderAction += new CLKsFATXLib.Structs.FolderActionChanged (EntryAction_FolderAction);  					CLKsFATXLib.Structs.WriteResult wr = thisFolder.CreateNewFile (s);  					if (wr.CouldNotWrite) {  						CLKsFATXLib.Structs.ExistingEntry ex = new CLKsFATXLib.Structs.ExistingEntry ();  						ex.Existing = wr.Entry;  						ex.NewPath = s;  						Existing.Add (ex);  					}  				}  			}  			DoExisting (Existing);  		}  		#if DEBUG  		if (Timer) {  			sw2.Stop ();  			MessageBox.Show (string.Format ("{0}:{1}:{2}"' sw2.Elapsed.Minutes' sw2.Elapsed.Seconds' sw2.Elapsed.Milliseconds));  		}  		#endif  		break;  	case Method.Move:  		List<CLKsFATXLib.Structs.WriteResult> Results = new List<CLKsFATXLib.Structs.WriteResult> ();  		foreach (Entry Entry in Entries) {  			CLKsFATXLib.Structs.WriteResult wr = Entry.Move (OutPath);  			if (wr.CouldNotWrite) {  				Results.Add (wr);  			}  		}  		break;  	}  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The following statement contains a magic number: switch (m) {  case Method.Backup:  	this.Invoke ((MethodInvoker)delegate {  		this.Icon = Properties.Resources.Add;  	});  	CLKsFATXLib.Streams.Reader r = xDrive.Reader ();  	CLKsFATXLib.Streams.Writer w = new CLKsFATXLib.Streams.Writer (new System.IO.FileStream (OutPath' System.IO.FileMode.Create));  	int ReadLength = 0x200;  	if (xDrive.Length % 0x100000 == 0) {  		ReadLength = 0x100000;  	}  	else if (xDrive.Length % 0x40000 == 0) {  		ReadLength = 0x40000;  	}  	else if (xDrive.Length % 0x10000 == 0) {  		ReadLength = 0x10000;  	}  	else if (xDrive.Length % 0x5000 == 0) {  		ReadLength = 0x5000;  	}  	for (int i = 0; i < xDrive.Length / ReadLength; i++) {  		if (Cancel) {  			break;  		}  		w.Write (r.ReadBytes (ReadLength));  		progressBar1.Invoke ((MethodInvoker)delegate {  			try {  				progressBar1.Maximum = (int)(xDrive.Length / ReadLength);  				progressBar1.Value = (i + 1);  				if (Windows7) {  					tm.SetProgressValue (progressBar1.Value' progressBar1.Maximum);  				}  			}  			catch {  			}  		});  		this.Invoke ((MethodInvoker)delegate {  			this.Text = "Backing Up Drive";  		});  		label1.Invoke ((MethodInvoker)delegate {  			label1.Text = (((decimal)(i + 1) / (decimal)(xDrive.Length / ReadLength)) * 100).ToString ("#") + "%";  		});  	}  	w.Close ();  	break;  case Method.ExtractSS:  	this.Invoke ((MethodInvoker)delegate {  		this.Icon = Properties.Resources.Add;  	});  	//Create our io for the drive  	CLKsFATXLib.Streams.Reader io = xDrive.Reader ();  	//Go to the location of the security sector  	io.BaseStream.Position = 0x2000;  	//Create our ref io for the file  	CLKsFATXLib.Streams.Writer bw = new CLKsFATXLib.Streams.Writer (new System.IO.FileStream (OutPath' System.IO.FileMode.Create));  	//Read the sector.  The size is an estimation' since I have no idea how big it really is  	bw.Write (io.ReadBytes (0xE00));  	//Close our io  	bw.Close ();  	break;  case Method.ExtractJ:  	this.Invoke ((MethodInvoker)delegate {  		this.Icon = Properties.Resources.Add;  	});  	//Create our io for the drive  	CLKsFATXLib.Streams.Reader io2 = xDrive.Reader ();  	//Go to the location of the security sector  	io2.BaseStream.Position = 0x800;  	//Create our ref io for the file  	CLKsFATXLib.Streams.Writer bw2 = new CLKsFATXLib.Streams.Writer (new System.IO.FileStream (OutPath' System.IO.FileMode.Create));  	//Read the sector.  The size is an estimation' since I have no idea how big it really is  	bw2.Write (io2.ReadBytes (0x400));  	//Close our io  	bw2.Close ();  	break;  case Method.Restore:  	this.Invoke ((MethodInvoker)delegate {  		this.Icon = Properties.Resources.Remove;  	});  	if (MessageBox.Show ("WARNING: Restoring a drive that does not match your current one can cause for data to not be read correctly by the Xbox 360' or for other unforseen problems!  Please make sure you know what you're doing before continuing.  Are you sure you want to continue?"' "WARNING AND STUFF"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.Yes) {  		if (MessageBox.Show ("This is your last chance to stop!  Are you POSITIVE you want to continue?"' "Last Chance!"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.Yes) {  			CLKsFATXLib.Streams.Reader r2 = new CLKsFATXLib.Streams.Reader (new System.IO.FileStream (OutPath' System.IO.FileMode.Open));  			CLKsFATXLib.Streams.Writer w2 = xDrive.Writer ();  			int ReadLength2 = 0x200;  			if (xDrive.Length % 0x4000 != 0) {  				ReadLength2 = 0x4000;  			}  			else {  				for (int i = 0x300000; i > 0x200; i -= 0x1000) {  					if (xDrive.Length % i == 0) {  						ReadLength2 = i;  						break;  					}  				}  			}  			for (int i = 0; i < xDrive.Length / ReadLength2; i++) {  				if (Cancel) {  					break;  				}  				w2.Write (r2.ReadBytes (ReadLength2));  				progressBar1.Invoke ((MethodInvoker)delegate {  					try {  						progressBar1.Maximum = (int)(xDrive.Length / ReadLength2);  						progressBar1.Value = (i + 1);  						if (Windows7) {  							tm.SetProgressValue (progressBar1.Value' progressBar1.Maximum);  						}  					}  					catch {  					}  				});  				this.Invoke ((MethodInvoker)delegate {  					this.Text = "Restoring Drive";  				});  				label1.Invoke ((MethodInvoker)delegate {  					label1.Text = (((decimal)(i + 1) / (decimal)(xDrive.Length / ReadLength2)) * 100).ToString ("#") + "%";  				});  			}  			r2.Close ();  		}  	}  	break;  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The following statement contains a magic number: switch (m) {  case Method.Backup:  	this.Invoke ((MethodInvoker)delegate {  		this.Icon = Properties.Resources.Add;  	});  	CLKsFATXLib.Streams.Reader r = xDrive.Reader ();  	CLKsFATXLib.Streams.Writer w = new CLKsFATXLib.Streams.Writer (new System.IO.FileStream (OutPath' System.IO.FileMode.Create));  	int ReadLength = 0x200;  	if (xDrive.Length % 0x100000 == 0) {  		ReadLength = 0x100000;  	}  	else if (xDrive.Length % 0x40000 == 0) {  		ReadLength = 0x40000;  	}  	else if (xDrive.Length % 0x10000 == 0) {  		ReadLength = 0x10000;  	}  	else if (xDrive.Length % 0x5000 == 0) {  		ReadLength = 0x5000;  	}  	for (int i = 0; i < xDrive.Length / ReadLength; i++) {  		if (Cancel) {  			break;  		}  		w.Write (r.ReadBytes (ReadLength));  		progressBar1.Invoke ((MethodInvoker)delegate {  			try {  				progressBar1.Maximum = (int)(xDrive.Length / ReadLength);  				progressBar1.Value = (i + 1);  				if (Windows7) {  					tm.SetProgressValue (progressBar1.Value' progressBar1.Maximum);  				}  			}  			catch {  			}  		});  		this.Invoke ((MethodInvoker)delegate {  			this.Text = "Backing Up Drive";  		});  		label1.Invoke ((MethodInvoker)delegate {  			label1.Text = (((decimal)(i + 1) / (decimal)(xDrive.Length / ReadLength)) * 100).ToString ("#") + "%";  		});  	}  	w.Close ();  	break;  case Method.ExtractSS:  	this.Invoke ((MethodInvoker)delegate {  		this.Icon = Properties.Resources.Add;  	});  	//Create our io for the drive  	CLKsFATXLib.Streams.Reader io = xDrive.Reader ();  	//Go to the location of the security sector  	io.BaseStream.Position = 0x2000;  	//Create our ref io for the file  	CLKsFATXLib.Streams.Writer bw = new CLKsFATXLib.Streams.Writer (new System.IO.FileStream (OutPath' System.IO.FileMode.Create));  	//Read the sector.  The size is an estimation' since I have no idea how big it really is  	bw.Write (io.ReadBytes (0xE00));  	//Close our io  	bw.Close ();  	break;  case Method.ExtractJ:  	this.Invoke ((MethodInvoker)delegate {  		this.Icon = Properties.Resources.Add;  	});  	//Create our io for the drive  	CLKsFATXLib.Streams.Reader io2 = xDrive.Reader ();  	//Go to the location of the security sector  	io2.BaseStream.Position = 0x800;  	//Create our ref io for the file  	CLKsFATXLib.Streams.Writer bw2 = new CLKsFATXLib.Streams.Writer (new System.IO.FileStream (OutPath' System.IO.FileMode.Create));  	//Read the sector.  The size is an estimation' since I have no idea how big it really is  	bw2.Write (io2.ReadBytes (0x400));  	//Close our io  	bw2.Close ();  	break;  case Method.Restore:  	this.Invoke ((MethodInvoker)delegate {  		this.Icon = Properties.Resources.Remove;  	});  	if (MessageBox.Show ("WARNING: Restoring a drive that does not match your current one can cause for data to not be read correctly by the Xbox 360' or for other unforseen problems!  Please make sure you know what you're doing before continuing.  Are you sure you want to continue?"' "WARNING AND STUFF"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.Yes) {  		if (MessageBox.Show ("This is your last chance to stop!  Are you POSITIVE you want to continue?"' "Last Chance!"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.Yes) {  			CLKsFATXLib.Streams.Reader r2 = new CLKsFATXLib.Streams.Reader (new System.IO.FileStream (OutPath' System.IO.FileMode.Open));  			CLKsFATXLib.Streams.Writer w2 = xDrive.Writer ();  			int ReadLength2 = 0x200;  			if (xDrive.Length % 0x4000 != 0) {  				ReadLength2 = 0x4000;  			}  			else {  				for (int i = 0x300000; i > 0x200; i -= 0x1000) {  					if (xDrive.Length % i == 0) {  						ReadLength2 = i;  						break;  					}  				}  			}  			for (int i = 0; i < xDrive.Length / ReadLength2; i++) {  				if (Cancel) {  					break;  				}  				w2.Write (r2.ReadBytes (ReadLength2));  				progressBar1.Invoke ((MethodInvoker)delegate {  					try {  						progressBar1.Maximum = (int)(xDrive.Length / ReadLength2);  						progressBar1.Value = (i + 1);  						if (Windows7) {  							tm.SetProgressValue (progressBar1.Value' progressBar1.Maximum);  						}  					}  					catch {  					}  				});  				this.Invoke ((MethodInvoker)delegate {  					this.Text = "Restoring Drive";  				});  				label1.Invoke ((MethodInvoker)delegate {  					label1.Text = (((decimal)(i + 1) / (decimal)(xDrive.Length / ReadLength2)) * 100).ToString ("#") + "%";  				});  			}  			r2.Close ();  		}  	}  	break;  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The following statement contains a magic number: for (int i = 0; i < xDrive.Length / ReadLength; i++) {  	if (Cancel) {  		break;  	}  	w.Write (r.ReadBytes (ReadLength));  	progressBar1.Invoke ((MethodInvoker)delegate {  		try {  			progressBar1.Maximum = (int)(xDrive.Length / ReadLength);  			progressBar1.Value = (i + 1);  			if (Windows7) {  				tm.SetProgressValue (progressBar1.Value' progressBar1.Maximum);  			}  		}  		catch {  		}  	});  	this.Invoke ((MethodInvoker)delegate {  		this.Text = "Backing Up Drive";  	});  	label1.Invoke ((MethodInvoker)delegate {  		label1.Text = (((decimal)(i + 1) / (decimal)(xDrive.Length / ReadLength)) * 100).ToString ("#") + "%";  	});  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The following statement contains a magic number: label1.Invoke ((MethodInvoker)delegate {  	label1.Text = (((decimal)(i + 1) / (decimal)(xDrive.Length / ReadLength)) * 100).ToString ("#") + "%";  });  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The following statement contains a magic number: label1.Text = (((decimal)(i + 1) / (decimal)(xDrive.Length / ReadLength)) * 100).ToString ("#") + "%";  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The following statement contains a magic number: if (MessageBox.Show ("WARNING: Restoring a drive that does not match your current one can cause for data to not be read correctly by the Xbox 360' or for other unforseen problems!  Please make sure you know what you're doing before continuing.  Are you sure you want to continue?"' "WARNING AND STUFF"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.Yes) {  	if (MessageBox.Show ("This is your last chance to stop!  Are you POSITIVE you want to continue?"' "Last Chance!"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.Yes) {  		CLKsFATXLib.Streams.Reader r2 = new CLKsFATXLib.Streams.Reader (new System.IO.FileStream (OutPath' System.IO.FileMode.Open));  		CLKsFATXLib.Streams.Writer w2 = xDrive.Writer ();  		int ReadLength2 = 0x200;  		if (xDrive.Length % 0x4000 != 0) {  			ReadLength2 = 0x4000;  		}  		else {  			for (int i = 0x300000; i > 0x200; i -= 0x1000) {  				if (xDrive.Length % i == 0) {  					ReadLength2 = i;  					break;  				}  			}  		}  		for (int i = 0; i < xDrive.Length / ReadLength2; i++) {  			if (Cancel) {  				break;  			}  			w2.Write (r2.ReadBytes (ReadLength2));  			progressBar1.Invoke ((MethodInvoker)delegate {  				try {  					progressBar1.Maximum = (int)(xDrive.Length / ReadLength2);  					progressBar1.Value = (i + 1);  					if (Windows7) {  						tm.SetProgressValue (progressBar1.Value' progressBar1.Maximum);  					}  				}  				catch {  				}  			});  			this.Invoke ((MethodInvoker)delegate {  				this.Text = "Restoring Drive";  			});  			label1.Invoke ((MethodInvoker)delegate {  				label1.Text = (((decimal)(i + 1) / (decimal)(xDrive.Length / ReadLength2)) * 100).ToString ("#") + "%";  			});  		}  		r2.Close ();  	}  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The following statement contains a magic number: if (MessageBox.Show ("This is your last chance to stop!  Are you POSITIVE you want to continue?"' "Last Chance!"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.Yes) {  	CLKsFATXLib.Streams.Reader r2 = new CLKsFATXLib.Streams.Reader (new System.IO.FileStream (OutPath' System.IO.FileMode.Open));  	CLKsFATXLib.Streams.Writer w2 = xDrive.Writer ();  	int ReadLength2 = 0x200;  	if (xDrive.Length % 0x4000 != 0) {  		ReadLength2 = 0x4000;  	}  	else {  		for (int i = 0x300000; i > 0x200; i -= 0x1000) {  			if (xDrive.Length % i == 0) {  				ReadLength2 = i;  				break;  			}  		}  	}  	for (int i = 0; i < xDrive.Length / ReadLength2; i++) {  		if (Cancel) {  			break;  		}  		w2.Write (r2.ReadBytes (ReadLength2));  		progressBar1.Invoke ((MethodInvoker)delegate {  			try {  				progressBar1.Maximum = (int)(xDrive.Length / ReadLength2);  				progressBar1.Value = (i + 1);  				if (Windows7) {  					tm.SetProgressValue (progressBar1.Value' progressBar1.Maximum);  				}  			}  			catch {  			}  		});  		this.Invoke ((MethodInvoker)delegate {  			this.Text = "Restoring Drive";  		});  		label1.Invoke ((MethodInvoker)delegate {  			label1.Text = (((decimal)(i + 1) / (decimal)(xDrive.Length / ReadLength2)) * 100).ToString ("#") + "%";  		});  	}  	r2.Close ();  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The following statement contains a magic number: for (int i = 0; i < xDrive.Length / ReadLength2; i++) {  	if (Cancel) {  		break;  	}  	w2.Write (r2.ReadBytes (ReadLength2));  	progressBar1.Invoke ((MethodInvoker)delegate {  		try {  			progressBar1.Maximum = (int)(xDrive.Length / ReadLength2);  			progressBar1.Value = (i + 1);  			if (Windows7) {  				tm.SetProgressValue (progressBar1.Value' progressBar1.Maximum);  			}  		}  		catch {  		}  	});  	this.Invoke ((MethodInvoker)delegate {  		this.Text = "Restoring Drive";  	});  	label1.Invoke ((MethodInvoker)delegate {  		label1.Text = (((decimal)(i + 1) / (decimal)(xDrive.Length / ReadLength2)) * 100).ToString ("#") + "%";  	});  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The following statement contains a magic number: label1.Invoke ((MethodInvoker)delegate {  	label1.Text = (((decimal)(i + 1) / (decimal)(xDrive.Length / ReadLength2)) * 100).ToString ("#") + "%";  });  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The following statement contains a magic number: label1.Text = (((decimal)(i + 1) / (decimal)(xDrive.Length / ReadLength2)) * 100).ToString ("#") + "%";  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,ExceptionHandler,The following statement contains a magic number: if (!Aero) {  	MessageBox.Show ("An exception was thrown: " + x.Message + "\r\n\r\nPress CTRL + C to copy the stack trace:\r\n" + x.StackTrace);  }  else {  	tm.SetProgressState (TaskbarProgressBarState.Error);  	this.Invoke ((MethodInvoker)delegate {  		TaskDialog td = new TaskDialog ();  		td.Caption = "Unhandled Exception";  		td.InstructionText = "An Unhandled Exception was Thrown";  		td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message);  		td.DetailsCollapsedLabel = "Details";  		td.DetailsExpandedLabel = "Details";  		td.DetailsExpandedText = x.StackTrace;  		TaskDialogButton Copy = new TaskDialogButton ("Copy"' "Copy Details to Clipboard");  		Copy.Click += (o' f) =>  {  			this.Invoke ((MethodInvoker)delegate {  				Clipboard.SetDataObject (x.Message + "\r\n\r\n" + x.StackTrace' true' 10' 200);  			});  		};  		TaskDialogButton Close = new TaskDialogButton ("Close"' "Close");  		Close.Click += (o' f) =>  {  			td.Close ();  		};  		td.Controls.Add (Copy);  		td.Controls.Add (Close);  		td.ShowDialog (this.Handle);  	});  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,ExceptionHandler,The following statement contains a magic number: if (!Aero) {  	MessageBox.Show ("An exception was thrown: " + x.Message + "\r\n\r\nPress CTRL + C to copy the stack trace:\r\n" + x.StackTrace);  }  else {  	tm.SetProgressState (TaskbarProgressBarState.Error);  	this.Invoke ((MethodInvoker)delegate {  		TaskDialog td = new TaskDialog ();  		td.Caption = "Unhandled Exception";  		td.InstructionText = "An Unhandled Exception was Thrown";  		td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message);  		td.DetailsCollapsedLabel = "Details";  		td.DetailsExpandedLabel = "Details";  		td.DetailsExpandedText = x.StackTrace;  		TaskDialogButton Copy = new TaskDialogButton ("Copy"' "Copy Details to Clipboard");  		Copy.Click += (o' f) =>  {  			this.Invoke ((MethodInvoker)delegate {  				Clipboard.SetDataObject (x.Message + "\r\n\r\n" + x.StackTrace' true' 10' 200);  			});  		};  		TaskDialogButton Close = new TaskDialogButton ("Close"' "Close");  		Close.Click += (o' f) =>  {  			td.Close ();  		};  		td.Controls.Add (Copy);  		td.Controls.Add (Close);  		td.ShowDialog (this.Handle);  	});  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,ExceptionHandler,The following statement contains a magic number: this.Invoke ((MethodInvoker)delegate {  	TaskDialog td = new TaskDialog ();  	td.Caption = "Unhandled Exception";  	td.InstructionText = "An Unhandled Exception was Thrown";  	td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message);  	td.DetailsCollapsedLabel = "Details";  	td.DetailsExpandedLabel = "Details";  	td.DetailsExpandedText = x.StackTrace;  	TaskDialogButton Copy = new TaskDialogButton ("Copy"' "Copy Details to Clipboard");  	Copy.Click += (o' f) =>  {  		this.Invoke ((MethodInvoker)delegate {  			Clipboard.SetDataObject (x.Message + "\r\n\r\n" + x.StackTrace' true' 10' 200);  		});  	};  	TaskDialogButton Close = new TaskDialogButton ("Close"' "Close");  	Close.Click += (o' f) =>  {  		td.Close ();  	};  	td.Controls.Add (Copy);  	td.Controls.Add (Close);  	td.ShowDialog (this.Handle);  });  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,ExceptionHandler,The following statement contains a magic number: this.Invoke ((MethodInvoker)delegate {  	TaskDialog td = new TaskDialog ();  	td.Caption = "Unhandled Exception";  	td.InstructionText = "An Unhandled Exception was Thrown";  	td.Text = string.Format ("An exception was thrown: {0}\r\n\r\nIf this appears to be a bug' please email me at clkxu5@gmail.com with the details below"' x.Message);  	td.DetailsCollapsedLabel = "Details";  	td.DetailsExpandedLabel = "Details";  	td.DetailsExpandedText = x.StackTrace;  	TaskDialogButton Copy = new TaskDialogButton ("Copy"' "Copy Details to Clipboard");  	Copy.Click += (o' f) =>  {  		this.Invoke ((MethodInvoker)delegate {  			Clipboard.SetDataObject (x.Message + "\r\n\r\n" + x.StackTrace' true' 10' 200);  		});  	};  	TaskDialogButton Close = new TaskDialogButton ("Close"' "Close");  	Close.Click += (o' f) =>  {  		td.Close ();  	};  	td.Controls.Add (Copy);  	td.Controls.Add (Close);  	td.ShowDialog (this.Handle);  });  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,ExceptionHandler,The following statement contains a magic number: Copy.Click += (o' f) =>  {  	this.Invoke ((MethodInvoker)delegate {  		Clipboard.SetDataObject (x.Message + "\r\n\r\n" + x.StackTrace' true' 10' 200);  	});  };  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,ExceptionHandler,The following statement contains a magic number: Copy.Click += (o' f) =>  {  	this.Invoke ((MethodInvoker)delegate {  		Clipboard.SetDataObject (x.Message + "\r\n\r\n" + x.StackTrace' true' 10' 200);  	});  };  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,ExceptionHandler,The following statement contains a magic number: this.Invoke ((MethodInvoker)delegate {  	Clipboard.SetDataObject (x.Message + "\r\n\r\n" + x.StackTrace' true' 10' 200);  });  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,ExceptionHandler,The following statement contains a magic number: this.Invoke ((MethodInvoker)delegate {  	Clipboard.SetDataObject (x.Message + "\r\n\r\n" + x.StackTrace' true' 10' 200);  });  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,ExceptionHandler,The following statement contains a magic number: Clipboard.SetDataObject (x.Message + "\r\n\r\n" + x.StackTrace' true' 10' 200);  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,ExceptionHandler,The following statement contains a magic number: Clipboard.SetDataObject (x.Message + "\r\n\r\n" + x.StackTrace' true' 10' 200);  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_FolderAction,The following statement contains a magic number: try {  	int p = Progress.Progress;  	int m = Progress.MaxValue;  	string file = Progress.CurrentFile;  	string filepath = Progress.CurrentFilePath;  	if (p == 0 && m == 0 && file == null && filepath == null && Progress.Cancel != false) {  		Progress.Cancel = Cancel;  		return;  	}  	Progress.Cancel = Cancel;  	try {  		this.Invoke ((MethodInvoker)delegate {  			this.Text = filepath;  			if (file != null) {  				label1.Text = file;  			}  			else if (filepath != null) {  				label1.Text = filepath.Remove (0' filepath.LastIndexOf ('\\') + 1);  			}  			lPercent.Text = (p == 0 || (((decimal)p / (decimal)m) * 100).ToString ("#") == "0") ? "" : (((decimal)p / (decimal)m) * 100).ToString ("#") + "%";  			progressBar1.Maximum = m;  			progressBar1.Value = p;  			if (Windows7) {  				tm.SetProgressValue (p' m);  			}  		});  	}  	catch (Exception e) {  	}  }  catch (Exception e) {  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_FolderAction,The following statement contains a magic number: try {  	int p = Progress.Progress;  	int m = Progress.MaxValue;  	string file = Progress.CurrentFile;  	string filepath = Progress.CurrentFilePath;  	if (p == 0 && m == 0 && file == null && filepath == null && Progress.Cancel != false) {  		Progress.Cancel = Cancel;  		return;  	}  	Progress.Cancel = Cancel;  	try {  		this.Invoke ((MethodInvoker)delegate {  			this.Text = filepath;  			if (file != null) {  				label1.Text = file;  			}  			else if (filepath != null) {  				label1.Text = filepath.Remove (0' filepath.LastIndexOf ('\\') + 1);  			}  			lPercent.Text = (p == 0 || (((decimal)p / (decimal)m) * 100).ToString ("#") == "0") ? "" : (((decimal)p / (decimal)m) * 100).ToString ("#") + "%";  			progressBar1.Maximum = m;  			progressBar1.Value = p;  			if (Windows7) {  				tm.SetProgressValue (p' m);  			}  		});  	}  	catch (Exception e) {  	}  }  catch (Exception e) {  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_FolderAction,The following statement contains a magic number: try {  	this.Invoke ((MethodInvoker)delegate {  		this.Text = filepath;  		if (file != null) {  			label1.Text = file;  		}  		else if (filepath != null) {  			label1.Text = filepath.Remove (0' filepath.LastIndexOf ('\\') + 1);  		}  		lPercent.Text = (p == 0 || (((decimal)p / (decimal)m) * 100).ToString ("#") == "0") ? "" : (((decimal)p / (decimal)m) * 100).ToString ("#") + "%";  		progressBar1.Maximum = m;  		progressBar1.Value = p;  		if (Windows7) {  			tm.SetProgressValue (p' m);  		}  	});  }  catch (Exception e) {  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_FolderAction,The following statement contains a magic number: try {  	this.Invoke ((MethodInvoker)delegate {  		this.Text = filepath;  		if (file != null) {  			label1.Text = file;  		}  		else if (filepath != null) {  			label1.Text = filepath.Remove (0' filepath.LastIndexOf ('\\') + 1);  		}  		lPercent.Text = (p == 0 || (((decimal)p / (decimal)m) * 100).ToString ("#") == "0") ? "" : (((decimal)p / (decimal)m) * 100).ToString ("#") + "%";  		progressBar1.Maximum = m;  		progressBar1.Value = p;  		if (Windows7) {  			tm.SetProgressValue (p' m);  		}  	});  }  catch (Exception e) {  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_FolderAction,The following statement contains a magic number: this.Invoke ((MethodInvoker)delegate {  	this.Text = filepath;  	if (file != null) {  		label1.Text = file;  	}  	else if (filepath != null) {  		label1.Text = filepath.Remove (0' filepath.LastIndexOf ('\\') + 1);  	}  	lPercent.Text = (p == 0 || (((decimal)p / (decimal)m) * 100).ToString ("#") == "0") ? "" : (((decimal)p / (decimal)m) * 100).ToString ("#") + "%";  	progressBar1.Maximum = m;  	progressBar1.Value = p;  	if (Windows7) {  		tm.SetProgressValue (p' m);  	}  });  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_FolderAction,The following statement contains a magic number: this.Invoke ((MethodInvoker)delegate {  	this.Text = filepath;  	if (file != null) {  		label1.Text = file;  	}  	else if (filepath != null) {  		label1.Text = filepath.Remove (0' filepath.LastIndexOf ('\\') + 1);  	}  	lPercent.Text = (p == 0 || (((decimal)p / (decimal)m) * 100).ToString ("#") == "0") ? "" : (((decimal)p / (decimal)m) * 100).ToString ("#") + "%";  	progressBar1.Maximum = m;  	progressBar1.Value = p;  	if (Windows7) {  		tm.SetProgressValue (p' m);  	}  });  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_FolderAction,The following statement contains a magic number: lPercent.Text = (p == 0 || (((decimal)p / (decimal)m) * 100).ToString ("#") == "0") ? "" : (((decimal)p / (decimal)m) * 100).ToString ("#") + "%";  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_FolderAction,The following statement contains a magic number: lPercent.Text = (p == 0 || (((decimal)p / (decimal)m) * 100).ToString ("#") == "0") ? "" : (((decimal)p / (decimal)m) * 100).ToString ("#") + "%";  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_FileAction,The following statement contains a magic number: try {  	int p = Progress.Progress;  	int m = Progress.MaxValue;  	Progress.Cancel = Cancel;  	lPercent.Invoke ((MethodInvoker)delegate {  		lPercent.Text = (p == 0 || (((decimal)p / (decimal)m) * 100).ToString ("#") == "0") ? "" : (((decimal)p / (decimal)m) * 100).ToString ("#") + "%";  	});  	progressBar1.Invoke ((MethodInvoker)delegate {  		progressBar1.Maximum = m;  		progressBar1.Value = p;  		if (Windows7) {  			tm.SetProgressValue (p' m);  		}  	});  }  catch {  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_FileAction,The following statement contains a magic number: try {  	int p = Progress.Progress;  	int m = Progress.MaxValue;  	Progress.Cancel = Cancel;  	lPercent.Invoke ((MethodInvoker)delegate {  		lPercent.Text = (p == 0 || (((decimal)p / (decimal)m) * 100).ToString ("#") == "0") ? "" : (((decimal)p / (decimal)m) * 100).ToString ("#") + "%";  	});  	progressBar1.Invoke ((MethodInvoker)delegate {  		progressBar1.Maximum = m;  		progressBar1.Value = p;  		if (Windows7) {  			tm.SetProgressValue (p' m);  		}  	});  }  catch {  }  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_FileAction,The following statement contains a magic number: lPercent.Invoke ((MethodInvoker)delegate {  	lPercent.Text = (p == 0 || (((decimal)p / (decimal)m) * 100).ToString ("#") == "0") ? "" : (((decimal)p / (decimal)m) * 100).ToString ("#") + "%";  });  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_FileAction,The following statement contains a magic number: lPercent.Invoke ((MethodInvoker)delegate {  	lPercent.Text = (p == 0 || (((decimal)p / (decimal)m) * 100).ToString ("#") == "0") ? "" : (((decimal)p / (decimal)m) * 100).ToString ("#") + "%";  });  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_FileAction,The following statement contains a magic number: lPercent.Text = (p == 0 || (((decimal)p / (decimal)m) * 100).ToString ("#") == "0") ? "" : (((decimal)p / (decimal)m) * 100).ToString ("#") + "%";  
Magic Number,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_FileAction,The following statement contains a magic number: lPercent.Text = (p == 0 || (((decimal)p / (decimal)m) * 100).ToString ("#") == "0") ? "" : (((decimal)p / (decimal)m) * 100).ToString ("#") + "%";  
Magic Number,Party_Buffalo.Forms,NewKnownFolder,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\NewKnownFolder.cs,NewKnownFolder,The following statement contains a magic number: bigtits.ImageSize = new Size (64' 64);  
Magic Number,Party_Buffalo.Forms,NewKnownFolder,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\NewKnownFolder.cs,NewKnownFolder,The following statement contains a magic number: bigtits.ImageSize = new Size (64' 64);  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,PropertiesForm,The following statement contains a magic number: tabPage2.Location = new System.Drawing.Point (4' 22);  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,PropertiesForm,The following statement contains a magic number: tabPage2.Location = new System.Drawing.Point (4' 22);  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,PropertiesForm,The following statement contains a magic number: tabPage2.Padding = new System.Windows.Forms.Padding (3);  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,PropertiesForm,The following statement contains a magic number: tabPage2.Size = new System.Drawing.Size (509' 320);  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,PropertiesForm,The following statement contains a magic number: tabPage2.Size = new System.Drawing.Size (509' 320);  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,tabPage1_Click,The following statement contains a magic number: if (clicks == 10 && tabControl1.TabPages.Count == 1) {  	TabPage tabPage2 = new TabPage ();  	propertyGrid1.Dock = DockStyle.Fill;  	tabPage2.Controls.Add (this.propertyGrid1);  	tabPage2.Location = new System.Drawing.Point (4' 22);  	tabPage2.Name = "tabPage2";  	tabPage2.Padding = new System.Windows.Forms.Padding (3);  	tabPage2.Size = new System.Drawing.Size (509' 320);  	tabPage2.TabIndex = 1;  	tabPage2.Text = "Entry";  	tabPage2.UseVisualStyleBackColor = true;  	tabControl1.TabPages.Add (tabPage2);  }  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,tabPage1_Click,The following statement contains a magic number: if (clicks == 10 && tabControl1.TabPages.Count == 1) {  	TabPage tabPage2 = new TabPage ();  	propertyGrid1.Dock = DockStyle.Fill;  	tabPage2.Controls.Add (this.propertyGrid1);  	tabPage2.Location = new System.Drawing.Point (4' 22);  	tabPage2.Name = "tabPage2";  	tabPage2.Padding = new System.Windows.Forms.Padding (3);  	tabPage2.Size = new System.Drawing.Size (509' 320);  	tabPage2.TabIndex = 1;  	tabPage2.Text = "Entry";  	tabPage2.UseVisualStyleBackColor = true;  	tabControl1.TabPages.Add (tabPage2);  }  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,tabPage1_Click,The following statement contains a magic number: if (clicks == 10 && tabControl1.TabPages.Count == 1) {  	TabPage tabPage2 = new TabPage ();  	propertyGrid1.Dock = DockStyle.Fill;  	tabPage2.Controls.Add (this.propertyGrid1);  	tabPage2.Location = new System.Drawing.Point (4' 22);  	tabPage2.Name = "tabPage2";  	tabPage2.Padding = new System.Windows.Forms.Padding (3);  	tabPage2.Size = new System.Drawing.Size (509' 320);  	tabPage2.TabIndex = 1;  	tabPage2.Text = "Entry";  	tabPage2.UseVisualStyleBackColor = true;  	tabControl1.TabPages.Add (tabPage2);  }  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,tabPage1_Click,The following statement contains a magic number: if (clicks == 10 && tabControl1.TabPages.Count == 1) {  	TabPage tabPage2 = new TabPage ();  	propertyGrid1.Dock = DockStyle.Fill;  	tabPage2.Controls.Add (this.propertyGrid1);  	tabPage2.Location = new System.Drawing.Point (4' 22);  	tabPage2.Name = "tabPage2";  	tabPage2.Padding = new System.Windows.Forms.Padding (3);  	tabPage2.Size = new System.Drawing.Size (509' 320);  	tabPage2.TabIndex = 1;  	tabPage2.Text = "Entry";  	tabPage2.UseVisualStyleBackColor = true;  	tabControl1.TabPages.Add (tabPage2);  }  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,tabPage1_Click,The following statement contains a magic number: if (clicks == 10 && tabControl1.TabPages.Count == 1) {  	TabPage tabPage2 = new TabPage ();  	propertyGrid1.Dock = DockStyle.Fill;  	tabPage2.Controls.Add (this.propertyGrid1);  	tabPage2.Location = new System.Drawing.Point (4' 22);  	tabPage2.Name = "tabPage2";  	tabPage2.Padding = new System.Windows.Forms.Padding (3);  	tabPage2.Size = new System.Drawing.Size (509' 320);  	tabPage2.TabIndex = 1;  	tabPage2.Text = "Entry";  	tabPage2.UseVisualStyleBackColor = true;  	tabControl1.TabPages.Add (tabPage2);  }  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,tabPage1_Click,The following statement contains a magic number: if (clicks == 10 && tabControl1.TabPages.Count == 1) {  	TabPage tabPage2 = new TabPage ();  	propertyGrid1.Dock = DockStyle.Fill;  	tabPage2.Controls.Add (this.propertyGrid1);  	tabPage2.Location = new System.Drawing.Point (4' 22);  	tabPage2.Name = "tabPage2";  	tabPage2.Padding = new System.Windows.Forms.Padding (3);  	tabPage2.Size = new System.Drawing.Size (509' 320);  	tabPage2.TabIndex = 1;  	tabPage2.Text = "Entry";  	tabPage2.UseVisualStyleBackColor = true;  	tabControl1.TabPages.Add (tabPage2);  }  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,tabPage1_Click,The following statement contains a magic number: tabPage2.Location = new System.Drawing.Point (4' 22);  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,tabPage1_Click,The following statement contains a magic number: tabPage2.Location = new System.Drawing.Point (4' 22);  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,tabPage1_Click,The following statement contains a magic number: tabPage2.Padding = new System.Windows.Forms.Padding (3);  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,tabPage1_Click,The following statement contains a magic number: tabPage2.Size = new System.Drawing.Size (509' 320);  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,tabPage1_Click,The following statement contains a magic number: tabPage2.Size = new System.Drawing.Size (509' 320);  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,PropertiesForm,The following statement contains a magic number: tabPage2.Location = new System.Drawing.Point (4' 22);  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,PropertiesForm,The following statement contains a magic number: tabPage2.Location = new System.Drawing.Point (4' 22);  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,PropertiesForm,The following statement contains a magic number: tabPage2.Padding = new System.Windows.Forms.Padding (3);  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,PropertiesForm,The following statement contains a magic number: tabPage2.Size = new System.Drawing.Size (509' 320);  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,PropertiesForm,The following statement contains a magic number: tabPage2.Size = new System.Drawing.Size (509' 320);  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,Calculate,The following statement contains a magic number: for (int i = 0; i < stream.Length; i += read) {  	byte[] buff = new byte[1];  	if (stream.Length - stream.Position < 0x200) {  		buff = new byte[stream.Length - stream.Position];  	}  	else {  		buff = new byte[0x200];  	}  	stream.Read (buff' 0' buff.Length);  	read = buff.Length;  	for (int j = 0; j < buff.Length; j++) {  		CRCVal = (CRCVal >> 8) ^ CRCTable [(CRCVal & 0xff) ^ buff [j]];  	}  }  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,Calculate,The following statement contains a magic number: for (int j = 0; j < buff.Length; j++) {  	CRCVal = (CRCVal >> 8) ^ CRCTable [(CRCVal & 0xff) ^ buff [j]];  }  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,Calculate,The following statement contains a magic number: CRCVal = (CRCVal >> 8) ^ CRCTable [(CRCVal & 0xff) ^ buff [j]];  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,Calculate,The following statement contains a magic number: Result [0] = (byte)(CRCVal >> 24);  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,Calculate,The following statement contains a magic number: Result [1] = (byte)(CRCVal >> 16);  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,Calculate,The following statement contains a magic number: Result [2] = (byte)(CRCVal >> 8);  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,Calculate,The following statement contains a magic number: Result [2] = (byte)(CRCVal >> 8);  
Magic Number,Party_Buffalo.Forms,PropertiesForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\PropertiesForm.cs,Calculate,The following statement contains a magic number: Result [3] = (byte)(CRCVal);  
Magic Number,Party_Buffalo.Forms,SearchForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\SearchForm.cs,SearchForm_FormClosing,The following statement contains a magic number: if (Worker != null) {  	Worker.Abort ();  	while (Worker.IsAlive) {  		System.Threading.Thread.Sleep (200);  		// do nothing  	}  }  
Magic Number,Party_Buffalo.Forms,SearchForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\SearchForm.cs,SearchForm_FormClosing,The following statement contains a magic number: while (Worker.IsAlive) {  	System.Threading.Thread.Sleep (200);  	// do nothing  }  
Magic Number,Party_Buffalo.Forms,SearchForm,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\SearchForm.cs,SearchForm_FormClosing,The following statement contains a magic number: System.Threading.Thread.Sleep (200);  
Magic Number,Extensions,Extensions,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Extensions.cs,GameName,The following statement contains a magic number: if (node.Text.Contains (" | ")) {  	return node.Text.Remove (0' node.Text.IndexOf (" | ") + 3);  }  else {  	return "";  }  
Magic Number,Extensions,Extensions,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Extensions.cs,GameName,The following statement contains a magic number: return node.Text.Remove (0' node.Text.IndexOf (" | ") + 3);  
Magic Number,Extensions,Extensions,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Extensions.cs,FriendlyNodeName,The following statement contains a magic number: if (n.Text.Contains ('|')) {  	return n.Text.Remove (0' n.RealNodeName ().Length + 3);  }  
Magic Number,Extensions,Extensions,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Extensions.cs,FriendlyNodeName,The following statement contains a magic number: return n.Text.Remove (0' n.RealNodeName ().Length + 3);  
Magic Number,Extensions,NyanCatBar,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Extensions.cs,OnPaint,The following statement contains a magic number: rec.Height -= 4;  
Magic Number,Extensions,NyanCatBar,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Extensions.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (RainbowBrush' 2' 2' rec.Width' rec.Height);  
Magic Number,Extensions,NyanCatBar,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Extensions.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (RainbowBrush' 2' 2' rec.Width' rec.Height);  
Magic Number,Extensions,NyanCatBar,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Extensions.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawImage (NyanCatImage' rec.Width - 4' (Height / 2) - (NyanCatImage.Height / 2));  
Magic Number,Extensions,NyanCatBar,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Extensions.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawImage (NyanCatImage' rec.Width - 4' (Height / 2) - (NyanCatImage.Height / 2));  
Magic Number,Extensions,NyanCatBar,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Extensions.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawImage (NyanCatImage' rec.Width - 4' (Height / 2) - (NyanCatImage.Height / 2));  
Missing Default,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,LoadDrive,The following switch statement is missing a default case: switch (d.DriveType) {  case DriveType.HardDisk:  	treeView1.Nodes [0].ImageIndex = 3;  	treeView1.Nodes [0].SelectedImageIndex = treeView1.Nodes [0].ImageIndex;  	break;  case DriveType.USB:  	treeView1.Nodes [0].ImageIndex = 4;  	treeView1.Nodes [0].SelectedImageIndex = treeView1.Nodes [0].ImageIndex;  	break;  case DriveType.Backup:  	treeView1.Nodes [0].ImageIndex = 5;  	treeView1.Nodes [0].SelectedImageIndex = treeView1.Nodes [0].ImageIndex;  	break;  }  
Missing Default,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,DoStartup,The following switch statement is missing a default case: switch (Properties.Settings.Default.view) {  case View.Details:  	c_Details.Checked = true;  	listView1.View = View.Details;  	break;  case View.LargeIcon:  	c_largeIcon.Checked = true;  	listView1.View = View.LargeIcon;  	break;  case View.List:  	c_List.Checked = true;  	listView1.View = View.List;  	break;  case View.SmallIcon:  	c_SmallIcon.Checked = true;  	listView1.View = View.SmallIcon;  	break;  case View.Tile:  	c_Tile.Checked = true;  	listView1.View = View.Tile;  	break;  }  
Missing Default,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,DoStartup,The following switch statement is missing a default case: switch (Properties.Settings.Default.treeViewIconWidthHeight) {  case 16:  	size16.Checked = true;  	break;  case 24:  	size24.Checked = true;  	break;  case 32:  	size32.Checked = true;  	break;  case 64:  	size64.Checked = true;  	break;  }  
Missing Default,Party_Buffalo,Main,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\Main.cs,Reload,The following switch statement is missing a default case: switch (d.DriveType) {  case DriveType.USB:  	Drive = new Drive (d.USBPaths);  	break;  case DriveType.HardDisk:  	Drive = new Drive (d.DeviceIndex);  	break;  case DriveType.Backup:  	Drive = new Drive (d.FilePath);  	break;  }  
Missing Default,Party_Buffalo,ListViewExtensions,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\ListviewStuff.cs,SetSortIcon,The following switch statement is missing a default case: switch (Order) {  case System.Windows.Forms.SortOrder.Ascending:  	lvColumn.fmt &= ~HDF_SORTDOWN;  	lvColumn.fmt |= HDF_SORTUP;  	break;  case System.Windows.Forms.SortOrder.Descending:  	lvColumn.fmt &= ~HDF_SORTUP;  	lvColumn.fmt |= HDF_SORTDOWN;  	break;  }  
Missing Default,Party_Buffalo.Forms,LatestNews,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\LatestNews.cs,LatestNews_Load,The following switch statement is missing a default case: switch (Properties.Settings.Default.loadedAd) {  case 1:  	Properties.Settings.Default.loadedAd = 2;  	break;  case 2:  	Properties.Settings.Default.loadedAd = 1;  	break;  }  
Missing Default,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The following switch statement is missing a default case: switch (m) {  case Method.Backup:  	this.Invoke ((MethodInvoker)delegate {  		this.Icon = Properties.Resources.Add;  	});  	CLKsFATXLib.Streams.Reader r = xDrive.Reader ();  	CLKsFATXLib.Streams.Writer w = new CLKsFATXLib.Streams.Writer (new System.IO.FileStream (OutPath' System.IO.FileMode.Create));  	int ReadLength = 0x200;  	if (xDrive.Length % 0x100000 == 0) {  		ReadLength = 0x100000;  	}  	else if (xDrive.Length % 0x40000 == 0) {  		ReadLength = 0x40000;  	}  	else if (xDrive.Length % 0x10000 == 0) {  		ReadLength = 0x10000;  	}  	else if (xDrive.Length % 0x5000 == 0) {  		ReadLength = 0x5000;  	}  	for (int i = 0; i < xDrive.Length / ReadLength; i++) {  		if (Cancel) {  			break;  		}  		w.Write (r.ReadBytes (ReadLength));  		progressBar1.Invoke ((MethodInvoker)delegate {  			try {  				progressBar1.Maximum = (int)(xDrive.Length / ReadLength);  				progressBar1.Value = (i + 1);  				if (Windows7) {  					tm.SetProgressValue (progressBar1.Value' progressBar1.Maximum);  				}  			}  			catch {  			}  		});  		this.Invoke ((MethodInvoker)delegate {  			this.Text = "Backing Up Drive";  		});  		label1.Invoke ((MethodInvoker)delegate {  			label1.Text = (((decimal)(i + 1) / (decimal)(xDrive.Length / ReadLength)) * 100).ToString ("#") + "%";  		});  	}  	w.Close ();  	break;  case Method.ExtractSS:  	this.Invoke ((MethodInvoker)delegate {  		this.Icon = Properties.Resources.Add;  	});  	//Create our io for the drive  	CLKsFATXLib.Streams.Reader io = xDrive.Reader ();  	//Go to the location of the security sector  	io.BaseStream.Position = 0x2000;  	//Create our ref io for the file  	CLKsFATXLib.Streams.Writer bw = new CLKsFATXLib.Streams.Writer (new System.IO.FileStream (OutPath' System.IO.FileMode.Create));  	//Read the sector.  The size is an estimation' since I have no idea how big it really is  	bw.Write (io.ReadBytes (0xE00));  	//Close our io  	bw.Close ();  	break;  case Method.ExtractJ:  	this.Invoke ((MethodInvoker)delegate {  		this.Icon = Properties.Resources.Add;  	});  	//Create our io for the drive  	CLKsFATXLib.Streams.Reader io2 = xDrive.Reader ();  	//Go to the location of the security sector  	io2.BaseStream.Position = 0x800;  	//Create our ref io for the file  	CLKsFATXLib.Streams.Writer bw2 = new CLKsFATXLib.Streams.Writer (new System.IO.FileStream (OutPath' System.IO.FileMode.Create));  	//Read the sector.  The size is an estimation' since I have no idea how big it really is  	bw2.Write (io2.ReadBytes (0x400));  	//Close our io  	bw2.Close ();  	break;  case Method.Restore:  	this.Invoke ((MethodInvoker)delegate {  		this.Icon = Properties.Resources.Remove;  	});  	if (MessageBox.Show ("WARNING: Restoring a drive that does not match your current one can cause for data to not be read correctly by the Xbox 360' or for other unforseen problems!  Please make sure you know what you're doing before continuing.  Are you sure you want to continue?"' "WARNING AND STUFF"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.Yes) {  		if (MessageBox.Show ("This is your last chance to stop!  Are you POSITIVE you want to continue?"' "Last Chance!"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == DialogResult.Yes) {  			CLKsFATXLib.Streams.Reader r2 = new CLKsFATXLib.Streams.Reader (new System.IO.FileStream (OutPath' System.IO.FileMode.Open));  			CLKsFATXLib.Streams.Writer w2 = xDrive.Writer ();  			int ReadLength2 = 0x200;  			if (xDrive.Length % 0x4000 != 0) {  				ReadLength2 = 0x4000;  			}  			else {  				for (int i = 0x300000; i > 0x200; i -= 0x1000) {  					if (xDrive.Length % i == 0) {  						ReadLength2 = i;  						break;  					}  				}  			}  			for (int i = 0; i < xDrive.Length / ReadLength2; i++) {  				if (Cancel) {  					break;  				}  				w2.Write (r2.ReadBytes (ReadLength2));  				progressBar1.Invoke ((MethodInvoker)delegate {  					try {  						progressBar1.Maximum = (int)(xDrive.Length / ReadLength2);  						progressBar1.Value = (i + 1);  						if (Windows7) {  							tm.SetProgressValue (progressBar1.Value' progressBar1.Maximum);  						}  					}  					catch {  					}  				});  				this.Invoke ((MethodInvoker)delegate {  					this.Text = "Restoring Drive";  				});  				label1.Invoke ((MethodInvoker)delegate {  					label1.Text = (((decimal)(i + 1) / (decimal)(xDrive.Length / ReadLength2)) * 100).ToString ("#") + "%";  				});  			}  			r2.Close ();  		}  	}  	break;  }  
Missing Default,Party_Buffalo.Forms,EntryAction,C:\repos\jkobrien_Xbox360ForensicsToolkit\Backup\Party Buffalo\Forms\EntryAction.cs,EntryAction_HandleCreated,The following switch statement is missing a default case: switch (m) {  case Method.Extract:  	#if DEBUG  	System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch ();  	if (Timer) {  		sw.Start ();  	}  	#endif  	this.Invoke ((MethodInvoker)delegate {  		this.Icon = Properties.Resources.Add;  	});  	foreach (Entry entry in Entries) {  		if (!entry.IsFolder) {  			((File)entry).FileAction += new CLKsFATXLib.Structs.FileActionChanged (EntryAction_FileAction);  			this.Invoke ((MethodInvoker)delegate {  				this.Text = entry.FullPath;  			});  			label1.Invoke ((MethodInvoker)delegate {  				label1.Text = entry.Name;  			});  			// Check to see if we're batch-extracting...  			if (Entries.Length == 1) {  				((File)entry).Extract (OutPath);  			}  			else {  				((File)entry).Extract (OutPath + "\\" + entry.Name);  			}  		}  		else {  			((Folder)entry).FolderAction += new CLKsFATXLib.Structs.FolderActionChanged (EntryAction_FolderAction);  			((Folder)entry).Extract (OutPath' EntriesToSkip);  		}  		if (Cancel) {  			break;  		}  	}  	#if DEBUG  	if (Timer) {  		sw.Stop ();  		MessageBox.Show (string.Format ("{0}:{1}:{2}"' sw.Elapsed.Minutes' sw.Elapsed.Seconds' sw.Elapsed.Milliseconds));  	}  	#endif  	break;  case Method.Delete:  	this.Invoke ((MethodInvoker)delegate {  		this.Icon = Properties.Resources.Remove;  	});  	foreach (Entry entry in Entries) {  		if (Cancel) {  			break;  		}  		if (entry.IsFolder) {  			Folder current = ((Folder)entry);  			current.ResetFolderAction ();  			current.FolderAction += new CLKsFATXLib.Structs.FolderActionChanged (EntryAction_FolderAction);  			current.Delete ();  		}  		else {  			this.Invoke ((MethodInvoker)delegate {  				this.Text = entry.FullPath;  			});  			label1.Invoke ((MethodInvoker)delegate {  				label1.Text = entry.Name;  			});  			File current = ((File)entry);  			current.FileAction += new CLKsFATXLib.Structs.FileActionChanged (EntryAction_FileAction);  			current.Delete ();  		}  	}  	break;  case Method.Inject:  	#if DEBUG  	System.Diagnostics.Stopwatch sw2 = new System.Diagnostics.Stopwatch ();  	if (Timer) {  		sw2.Start ();  	}  	#endif  	this.Invoke ((MethodInvoker)delegate {  		this.Icon = Properties.Resources.Add;  	});  	if (ParentFolder != null) {  		ParentFolder.ResetFolderAction ();  		ParentFolder.FolderAction += new CLKsFATXLib.Structs.FolderActionChanged (EntryAction_FolderAction);  		List<CLKsFATXLib.Structs.ExistingEntry> Existing = new List<CLKsFATXLib.Structs.ExistingEntry> ();  		foreach (string s in Paths) {  			if (Cancel) {  				break;  			}  			if (VariousFunctions.IsFolder (s)) {  				Existing.AddRange (ParentFolder.InjectFolder (s' false' false));  			}  			else {  				ParentFolder.FolderAction += new CLKsFATXLib.Structs.FolderActionChanged (EntryAction_FolderAction);  				CLKsFATXLib.Structs.WriteResult wr = ParentFolder.CreateNewFile (s);  				if (wr.CouldNotWrite) {  					CLKsFATXLib.Structs.ExistingEntry ex = new CLKsFATXLib.Structs.ExistingEntry ();  					ex.Existing = wr.Entry;  					ex.NewPath = s;  					Existing.Add (ex);  				}  			}  		}  		DoExisting (Existing);  	}  	else {  		List<CLKsFATXLib.Structs.ExistingEntry> Existing = new List<CLKsFATXLib.Structs.ExistingEntry> ();  		foreach (string s in Paths) {  			string Path = "";  			try {  				Path = VariousFunctions.GetFATXPath (s);  			}  			catch (Exception x) {  				ExceptionHandler (x);  				continue;  			}  			Folder thisFolder = xDrive.CreateDirectory ("Data\\" + Path);  			thisFolder.ResetFolderAction ();  			thisFolder.FolderAction += new CLKsFATXLib.Structs.FolderActionChanged (EntryAction_FolderAction);  			if (Cancel) {  				break;  			}  			if (VariousFunctions.IsFolder (s)) {  				ExceptionHandler (new Exception ("Can not write folder as STFS package (silly error wording)"));  				continue;  			}  			else {  				thisFolder.FolderAction += new CLKsFATXLib.Structs.FolderActionChanged (EntryAction_FolderAction);  				CLKsFATXLib.Structs.WriteResult wr = thisFolder.CreateNewFile (s);  				if (wr.CouldNotWrite) {  					CLKsFATXLib.Structs.ExistingEntry ex = new CLKsFATXLib.Structs.ExistingEntry ();  					ex.Existing = wr.Entry;  					ex.NewPath = s;  					Existing.Add (ex);  				}  			}  		}  		DoExisting (Existing);  	}  	#if DEBUG  	if (Timer) {  		sw2.Stop ();  		MessageBox.Show (string.Format ("{0}:{1}:{2}"' sw2.Elapsed.Minutes' sw2.Elapsed.Seconds' sw2.Elapsed.Milliseconds));  	}  	#endif  	break;  case Method.Move:  	List<CLKsFATXLib.Structs.WriteResult> Results = new List<CLKsFATXLib.Structs.WriteResult> ();  	foreach (Entry Entry in Entries) {  		CLKsFATXLib.Structs.WriteResult wr = Entry.Move (OutPath);  		if (wr.CouldNotWrite) {  			Results.Add (wr);  		}  	}  	break;  }  
