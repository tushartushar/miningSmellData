Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SimpleOwin.Middlewares.AspNetWebSocket,AspNetWebSocketMiddleware,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares.AspNetWebSocket\AspNetWebSocketMiddleware.cs,AspNetWebSocketMiddleware,Cyclomatic complexity of the method is 11
Long Identifier,SimpleOwin.Middlewares.AspNetWebSocket,AspNetWebSocketMiddleware,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares.AspNetWebSocket\AspNetWebSocketMiddleware.cs,,The length of the parameter _getWebSocketFromWebSocketContext is 33.
Long Statement,SimpleOwin.Middlewares.AspNetWebSocket,AspNetWebSocketMiddleware,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares.AspNetWebSocket\AspNetWebSocketMiddleware.cs,CreateParameterExpressions,The length of the statement  "              Expression.Convert(Expression.ArrayIndex(argumentsParameter' Expression.Constant(index))' parameter.ParameterType)).ToArray(); " is 126.
Long Statement,SimpleOwin.Middlewares.AspNetWebSocket,AspNetWebSocketMiddleware,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares.AspNetWebSocket\AspNetWebSocketMiddleware.cs,GetGetMethodByExpression,The length of the statement  "            UnaryExpression instanceCast = (!propertyInfo.DeclaringType.IsValueType) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 190.
Long Statement,SimpleOwin.Middlewares.AspNetWebSocket,AspNetWebSocketMiddleware,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares.AspNetWebSocket\AspNetWebSocketMiddleware.cs,GetGetMethodByExpression,The length of the statement  "            Func<object' object> compiled = Expression.Lambda<Func<object' object>>(Expression.TypeAs(Expression.Call(instanceCast' getMethodInfo)' typeof(object))' instance).Compile(); " is 173.
Magic Number,SimpleOwin.Middlewares.AspNetWebSocket,AspNetWebSocketMiddleware,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares.AspNetWebSocket\AspNetWebSocketMiddleware.cs,AspNetWebSocketMiddleware,The following statement contains a magic number: if (autoDetect)              {                  if (Environment.OSVersion.Platform != PlatformID.Win32NT ||                      Environment.OSVersion.Version < new Version(6' 2))                  {                      return;                  }              }
Magic Number,SimpleOwin.Middlewares.AspNetWebSocket,AspNetWebSocketMiddleware,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares.AspNetWebSocket\AspNetWebSocketMiddleware.cs,AspNetWebSocketMiddleware,The following statement contains a magic number: if (autoDetect)              {                  if (Environment.OSVersion.Platform != PlatformID.Win32NT ||                      Environment.OSVersion.Version < new Version(6' 2))                  {                      return;                  }              }
Magic Number,SimpleOwin.Middlewares.AspNetWebSocket,AspNetWebSocketMiddleware,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares.AspNetWebSocket\AspNetWebSocketMiddleware.cs,Middleware,The following statement contains a magic number: return app =>                  async env =>                  {                      bool containsWebSocketSupport = env.ContainsKey("websocket.Support");                      if (!replace && containsWebSocketSupport)                      {                          await app(env);                          return;                      }                        var httpWebContext = Get<object>(env' httpContextBaseKey' null);                      if (httpWebContext == null)                      {                          await app(env);                          return;                      }                        if (ws._isWebSocketRequest(httpWebContext))                          env["websocket.Support"] = "WebSocketFunc";                        await app(env);                        int responseStatusCode = Get<int>(env' "owin.ResponseStatusCode"' 200);                        object tempWsBodyDelegate;                      if (responseStatusCode == 101 &&                          env.TryGetValue("websocket.Func"' out tempWsBodyDelegate) &&                          tempWsBodyDelegate != null)                      {                          var wsBodyDelegate = (WebSocketFunc)tempWsBodyDelegate;                            ws._acceptWebSocketRequest(httpWebContext'                                new object[]                                     {                                         (Func<object' Task>)(async websocketContext =>                                                                  {                                                                      var webSocket = ws._getWebSocketFromWebSocketContext(websocketContext);                                                                        var wsEnv = new Dictionary<string' object>(StringComparer.OrdinalIgnoreCase);                                                                      wsEnv["websocket.SendAsyncFunc"] = WebSocketSendAsync(webSocket);                                                                      wsEnv["websocket.ReceiveAsyncFunc"] = WebSocketReceiveAsync(webSocket);                                                                      wsEnv["websocket.CloseAsyncFunc"] = WebSocketCloseAsync(webSocket);                                                                      wsEnv["websocket.Version"] = "1.0";                                                                      wsEnv["websocket.CallCancelled"] = CancellationToken.None;                                                                      wsEnv["System.Web.WebSockets.AspNetWebSocketContext"] = websocketContext;                                                                        await wsBodyDelegate(wsEnv);                                                                        switch (webSocket.State)                                                                      {                                                                          case WebSocketState.Closed:  // closed gracefully' no action needed                                                                          case WebSocketState.Aborted: // closed abortively' no action needed                                                                              break;                                                                          case WebSocketState.CloseReceived:                                                                              await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure' string.Empty' CancellationToken.None);                                                                              break;                                                                          case WebSocketState.Open:                                                                          case WebSocketState.CloseSent: // No close received' abort so we don't have to drain the pipe.                                                                              webSocket.Abort();                                                                              break;                                                                          default:                                                                              throw new ArgumentOutOfRangeException("state"' webSocket.State' string.Empty);                                                                      }                                                                        // todo close response                                                                      //response.Close();                                                                  })                                     });                            if (containsWebSocketSupport)                              env.Remove("websocket.Func");                      }                  };
Magic Number,SimpleOwin.Middlewares.AspNetWebSocket,AspNetWebSocketMiddleware,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares.AspNetWebSocket\AspNetWebSocketMiddleware.cs,Middleware,The following statement contains a magic number: return app =>                  async env =>                  {                      bool containsWebSocketSupport = env.ContainsKey("websocket.Support");                      if (!replace && containsWebSocketSupport)                      {                          await app(env);                          return;                      }                        var httpWebContext = Get<object>(env' httpContextBaseKey' null);                      if (httpWebContext == null)                      {                          await app(env);                          return;                      }                        if (ws._isWebSocketRequest(httpWebContext))                          env["websocket.Support"] = "WebSocketFunc";                        await app(env);                        int responseStatusCode = Get<int>(env' "owin.ResponseStatusCode"' 200);                        object tempWsBodyDelegate;                      if (responseStatusCode == 101 &&                          env.TryGetValue("websocket.Func"' out tempWsBodyDelegate) &&                          tempWsBodyDelegate != null)                      {                          var wsBodyDelegate = (WebSocketFunc)tempWsBodyDelegate;                            ws._acceptWebSocketRequest(httpWebContext'                                new object[]                                     {                                         (Func<object' Task>)(async websocketContext =>                                                                  {                                                                      var webSocket = ws._getWebSocketFromWebSocketContext(websocketContext);                                                                        var wsEnv = new Dictionary<string' object>(StringComparer.OrdinalIgnoreCase);                                                                      wsEnv["websocket.SendAsyncFunc"] = WebSocketSendAsync(webSocket);                                                                      wsEnv["websocket.ReceiveAsyncFunc"] = WebSocketReceiveAsync(webSocket);                                                                      wsEnv["websocket.CloseAsyncFunc"] = WebSocketCloseAsync(webSocket);                                                                      wsEnv["websocket.Version"] = "1.0";                                                                      wsEnv["websocket.CallCancelled"] = CancellationToken.None;                                                                      wsEnv["System.Web.WebSockets.AspNetWebSocketContext"] = websocketContext;                                                                        await wsBodyDelegate(wsEnv);                                                                        switch (webSocket.State)                                                                      {                                                                          case WebSocketState.Closed:  // closed gracefully' no action needed                                                                          case WebSocketState.Aborted: // closed abortively' no action needed                                                                              break;                                                                          case WebSocketState.CloseReceived:                                                                              await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure' string.Empty' CancellationToken.None);                                                                              break;                                                                          case WebSocketState.Open:                                                                          case WebSocketState.CloseSent: // No close received' abort so we don't have to drain the pipe.                                                                              webSocket.Abort();                                                                              break;                                                                          default:                                                                              throw new ArgumentOutOfRangeException("state"' webSocket.State' string.Empty);                                                                      }                                                                        // todo close response                                                                      //response.Close();                                                                  })                                     });                            if (containsWebSocketSupport)                              env.Remove("websocket.Func");                      }                  };
