Implementation smell,Namespace,Class,File,Method,Description
Long Method,SimpleOwin.Hosts.AspNet,SimpleOwinAspNetHandler,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwin.Hosts.AspNet\SimpleOwinAspNetHost.cs,BeginProcessRequest,The method has 151 lines of code.
Long Parameter List,SimpleOwin.Hosts.AspNet,TriggerStream,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwin.Hosts.AspNet\SimpleOwinAspNetHost.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,SimpleOwin.Hosts.AspNet,TriggerStream,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwin.Hosts.AspNet\SimpleOwinAspNetHost.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Statement,SimpleOwin.Hosts.AspNet,SimpleOwinAspNetHandler,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwin.Hosts.AspNet\SimpleOwinAspNetHost.cs,BeginProcessRequest,The length of the statement  "                                            await webSocket.CloseAsync(webSocket.CloseStatus ?? WebSocketCloseStatus.NormalClosure' webSocket.CloseStatusDescription ?? string.Empty' CancellationToken.None); " is 162.
Long Statement,SimpleOwin.Hosts.AspNet,SimpleOwinAspNetHandler,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwin.Hosts.AspNet\SimpleOwinAspNetHost.cs,GetStartupProperties,The length of the statement  "            if (Environment.OSVersion.Platform == PlatformID.Win32NT && Environment.OSVersion.Version >= new Version(6' 2) || HttpRuntime.IISVersion != null && HttpRuntime.IISVersion.Major >= 8) " is 182.
Complex Conditional,SimpleOwin.Hosts.AspNet,SimpleOwinAspNetHandler,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwin.Hosts.AspNet\SimpleOwinAspNetHost.cs,GetStartupProperties,The conditional expression  "Environment.OSVersion.Platform == PlatformID.Win32NT && Environment.OSVersion.Version >= new Version(6' 2) || HttpRuntime.IISVersion != null && HttpRuntime.IISVersion.Major >= 8"  is complex.
Empty Catch Block,SimpleOwin.Hosts.AspNet,SimpleOwinAspNetHandler,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwin.Hosts.AspNet\SimpleOwinAspNetHost.cs,BeginProcessRequest,The method has an empty catch block.
Magic Number,SimpleOwin.Hosts.AspNet,SimpleOwinAspNetHandler,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwin.Hosts.AspNet\SimpleOwinAspNetHost.cs,BeginProcessRequest,The following statement contains a magic number: env[OwinConstants.ResponseBody] =                  new TriggerStream(response.OutputStream)                  {                      OnFirstWrite = () =>                      {                          responseStatusCode = Get<int>(env' OwinConstants.ResponseStatusCode' 200);                          response.StatusCode = responseStatusCode.Value;                            object reasonPhrase;                          if (env.TryGetValue(OwinConstants.ResponseReasonPhrase' out reasonPhrase))                              response.StatusDescription = Convert.ToString(reasonPhrase);                            var responseHeaders = Get<IDictionary<string' string[]>>(env' OwinConstants.ResponseHeaders' null);                          if (responseHeaders != null)                          {                              foreach (var responseHeader in responseHeaders)                              {                                  foreach (var headerValue in responseHeader.Value)                                      response.AddHeader(responseHeader.Key' headerValue);                              }                          }                      }                  };
Magic Number,SimpleOwin.Hosts.AspNet,SimpleOwinAspNetHandler,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwin.Hosts.AspNet\SimpleOwinAspNetHost.cs,BeginProcessRequest,The following statement contains a magic number: env[OwinConstants.WebSocketAcceptKey] = new WebSocketAccept(                          (options' wsCallback) =>                          {                              env[OwinConstants.ResponseStatusCode] = 101;                              wsAcceptOptions = options;                              webSocketFunc = wsCallback;                          });
Magic Number,SimpleOwin.Hosts.AspNet,SimpleOwinAspNetHandler,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwin.Hosts.AspNet\SimpleOwinAspNetHost.cs,BeginProcessRequest,The following statement contains a magic number: appFunc(env)                      .ContinueWith(t =>                      {                          if (t.IsFaulted)                          {                              tcs.TrySetException(t.Exception.InnerExceptions);                          }                          else if (t.IsCanceled)                          {                              tcs.TrySetCanceled();                          }                          else                          {  #if ASPNET_WEBSOCKETS                              responseStatusCode = Get<int>(env' OwinConstants.ResponseStatusCode' 200);                                if (webSocketFunc != null && responseStatusCode == 101)                              {                                  var options = new AspNetWebSocketOptions();                                  options.SubProtocol = GetSubProtocol(env' wsAcceptOptions);                                    context.AcceptWebSocketRequest(async websocketContext =>                                  {                                      var webSocket = websocketContext.WebSocket;                                        var wsEnv = new Dictionary<string' object>(StringComparer.OrdinalIgnoreCase);                                      wsEnv[OwinConstants.WebSocketSendAsyncKey] = WebSocketSendAsync(webSocket);                                      wsEnv[OwinConstants.WebSocketReceiveAsyncKey] = WebSocketReceiveAsync(webSocket);                                      wsEnv[OwinConstants.WebSocketCloseAsyncKey] = WebSocketCloseAsync(webSocket);                                      wsEnv[OwinConstants.WebSocketVersion] = "1.0";                                      wsEnv[OwinConstants.WebSocketCallCancelled] = CancellationToken.None;                                      wsEnv[OwinConstants.WebSocketContext] = websocketContext;                                        await webSocketFunc(wsEnv);                                        switch (webSocket.State)                                      {                                          case WebSocketState.Closed:  // closed gracefully' no action needed                                          case WebSocketState.Aborted: // closed abortively' no action needed                                              break;                                          case WebSocketState.CloseReceived:                                              await webSocket.CloseAsync(webSocket.CloseStatus ?? WebSocketCloseStatus.NormalClosure' webSocket.CloseStatusDescription ?? string.Empty' CancellationToken.None);                                              break;                                          case WebSocketState.Open:                                          case WebSocketState.CloseSent: // No close received' abort so we don't have to drain the pipe.                                              websocketContext.WebSocket.Abort();                                              break;                                          default:                                              throw new ArgumentOutOfRangeException("state"' webSocket.State' string.Empty);                                      }                                        response.Close();                                  }' options);                              }  #endif                              tcs.TrySetResult(() => { });                          }                        });
Magic Number,SimpleOwin.Hosts.AspNet,SimpleOwinAspNetHandler,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwin.Hosts.AspNet\SimpleOwinAspNetHost.cs,BeginProcessRequest,The following statement contains a magic number: appFunc(env)                      .ContinueWith(t =>                      {                          if (t.IsFaulted)                          {                              tcs.TrySetException(t.Exception.InnerExceptions);                          }                          else if (t.IsCanceled)                          {                              tcs.TrySetCanceled();                          }                          else                          {  #if ASPNET_WEBSOCKETS                              responseStatusCode = Get<int>(env' OwinConstants.ResponseStatusCode' 200);                                if (webSocketFunc != null && responseStatusCode == 101)                              {                                  var options = new AspNetWebSocketOptions();                                  options.SubProtocol = GetSubProtocol(env' wsAcceptOptions);                                    context.AcceptWebSocketRequest(async websocketContext =>                                  {                                      var webSocket = websocketContext.WebSocket;                                        var wsEnv = new Dictionary<string' object>(StringComparer.OrdinalIgnoreCase);                                      wsEnv[OwinConstants.WebSocketSendAsyncKey] = WebSocketSendAsync(webSocket);                                      wsEnv[OwinConstants.WebSocketReceiveAsyncKey] = WebSocketReceiveAsync(webSocket);                                      wsEnv[OwinConstants.WebSocketCloseAsyncKey] = WebSocketCloseAsync(webSocket);                                      wsEnv[OwinConstants.WebSocketVersion] = "1.0";                                      wsEnv[OwinConstants.WebSocketCallCancelled] = CancellationToken.None;                                      wsEnv[OwinConstants.WebSocketContext] = websocketContext;                                        await webSocketFunc(wsEnv);                                        switch (webSocket.State)                                      {                                          case WebSocketState.Closed:  // closed gracefully' no action needed                                          case WebSocketState.Aborted: // closed abortively' no action needed                                              break;                                          case WebSocketState.CloseReceived:                                              await webSocket.CloseAsync(webSocket.CloseStatus ?? WebSocketCloseStatus.NormalClosure' webSocket.CloseStatusDescription ?? string.Empty' CancellationToken.None);                                              break;                                          case WebSocketState.Open:                                          case WebSocketState.CloseSent: // No close received' abort so we don't have to drain the pipe.                                              websocketContext.WebSocket.Abort();                                              break;                                          default:                                              throw new ArgumentOutOfRangeException("state"' webSocket.State' string.Empty);                                      }                                        response.Close();                                  }' options);                              }  #endif                              tcs.TrySetResult(() => { });                          }                        });
Magic Number,SimpleOwin.Hosts.AspNet,SimpleOwinAspNetHandler,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwin.Hosts.AspNet\SimpleOwinAspNetHost.cs,GetStartupProperties,The following statement contains a magic number: Environment.OSVersion.Platform == PlatformID.Win32NT && Environment.OSVersion.Version >= new Version(6' 2) || HttpRuntime.IISVersion != null && HttpRuntime.IISVersion.Major >= 8
Magic Number,SimpleOwin.Hosts.AspNet,SimpleOwinAspNetHandler,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwin.Hosts.AspNet\SimpleOwinAspNetHost.cs,GetStartupProperties,The following statement contains a magic number: Environment.OSVersion.Platform == PlatformID.Win32NT && Environment.OSVersion.Version >= new Version(6' 2) || HttpRuntime.IISVersion != null && HttpRuntime.IISVersion.Major >= 8
Magic Number,SimpleOwin.Hosts.AspNet,SimpleOwinAspNetHandler,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwin.Hosts.AspNet\SimpleOwinAspNetHost.cs,GetStartupProperties,The following statement contains a magic number: Environment.OSVersion.Platform == PlatformID.Win32NT && Environment.OSVersion.Version >= new Version(6' 2) || HttpRuntime.IISVersion != null && HttpRuntime.IISVersion.Major >= 8
