Implementation smell,Namespace,Class,File,Method,Description
Long Method,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The method has 108 lines of code.
Long Method,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The method has 108 lines of code.
Long Method,Reflection,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The method has 108 lines of code.
Long Method,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,HtmlDecode,The method has 167 lines of code.
Long Method,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,InitEntities,The method has 257 lines of code.
Complex Method,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,Cyclomatic complexity of the method is 9
Complex Method,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,IsNumeric,Cyclomatic complexity of the method is 12
Complex Method,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,Cyclomatic complexity of the method is 9
Complex Method,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,IsNumeric,Cyclomatic complexity of the method is 12
Complex Method,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,Cyclomatic complexity of the method is 9
Complex Method,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,IsNumeric,Cyclomatic complexity of the method is 12
Complex Method,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,HtmlEncode,Cyclomatic complexity of the method is 8
Complex Method,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,HtmlAttributeEncode,Cyclomatic complexity of the method is 8
Complex Method,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,HtmlDecode,Cyclomatic complexity of the method is 12
Complex Method,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 9
Complex Method,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 14
Complex Method,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,ParseQueryString,Cyclomatic complexity of the method is 10
Long Identifier,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,,The length of the parameter _currentJsonSerializerStrategy is 30.
Long Identifier,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,,The length of the parameter _dataContractJsonSerializerStrategy is 35.
Long Identifier,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,,The length of the parameter _currentJsonSerializerStrategy is 30.
Long Identifier,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,,The length of the parameter _dataContractJsonSerializerStrategy is 35.
Long Identifier,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,,The length of the parameter ArrayConstructorParameterTypes is 30.
Long Identifier,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,,The length of the parameter ArrayConstructorParameterTypes is 30.
Long Identifier,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,,The length of the parameter _currentJsonSerializerStrategy is 30.
Long Identifier,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,,The length of the parameter _dataContractJsonSerializerStrategy is 35.
Long Identifier,Reflection,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,,The length of the parameter ArrayConstructorParameterTypes is 30.
Long Statement,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The length of the statement  "                            if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) " is 130.
Long Statement,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The length of the statement  "                                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) " is 163.
Long Statement,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseNumber,The length of the statement  "            if (str.IndexOf("."' StringComparison.OrdinalIgnoreCase) != -1 || str.IndexOf("e"' StringComparison.OrdinalIgnoreCase) != -1) " is 125.
Long Statement,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseNumber,The length of the statement  "                success = double.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 123.
Long Statement,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseNumber,The length of the statement  "                success = long.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 121.
Long Statement,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The length of the statement  "                if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e') " is 127.
Long Statement,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The length of the statement  "                            if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) " is 130.
Long Statement,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The length of the statement  "                                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) " is 163.
Long Statement,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseNumber,The length of the statement  "            if (str.IndexOf("."' StringComparison.OrdinalIgnoreCase) != -1 || str.IndexOf("e"' StringComparison.OrdinalIgnoreCase) != -1) " is 125.
Long Statement,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseNumber,The length of the statement  "                success = double.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 123.
Long Statement,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseNumber,The length of the statement  "                success = long.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 121.
Long Statement,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The length of the statement  "                if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e') " is 127.
Long Statement,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,SetterValueFactory,The length of the statement  "            IDictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>> result = new Dictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>>(); " is 152.
Long Statement,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,SetterValueFactory,The length of the statement  "                    result[propertyInfo.Name] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(propertyInfo.PropertyType' ReflectionUtils.GetSetMethod(propertyInfo)); " is 151.
Long Statement,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,SetterValueFactory,The length of the statement  "                result[fieldInfo.Name] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(fieldInfo.FieldType' ReflectionUtils.GetSetMethod(fieldInfo)); " is 139.
Long Statement,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTime) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTime))) " is 127.
Long Statement,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The length of the statement  "                        obj = DateTime.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 143.
Long Statement,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The length of the statement  "                    else if (type == typeof(Guid) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(Guid))) " is 124.
Long Statement,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The length of the statement  " type == typeof(int) || type == typeof(long) || type == typeof(double) || type == typeof(float) || type == typeof(bool) || type == typeof(decimal) || type == typeof(byte) || type == typeof(short) " is 194.
Long Statement,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The length of the statement  "                    else if (ReflectionUtils.IsTypeGenericeCollectionInterface(type) || ReflectionUtils.IsAssignableFrom(typeof(IList)' type)) " is 122.
Long Statement,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,SetterValueFactory,The length of the statement  "            IDictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>> result = new Dictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>>(); " is 152.
Long Statement,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,SetterValueFactory,The length of the statement  "                    result[propertyInfo.Name] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(propertyInfo.PropertyType' ReflectionUtils.GetSetMethod(propertyInfo)); " is 151.
Long Statement,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,SetterValueFactory,The length of the statement  "                result[fieldInfo.Name] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(fieldInfo.FieldType' ReflectionUtils.GetSetMethod(fieldInfo)); " is 139.
Long Statement,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTime) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTime))) " is 127.
Long Statement,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The length of the statement  "                        obj = DateTime.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 143.
Long Statement,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The length of the statement  "                    else if (type == typeof(Guid) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(Guid))) " is 124.
Long Statement,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The length of the statement  " type == typeof(int) || type == typeof(long) || type == typeof(double) || type == typeof(float) || type == typeof(bool) || type == typeof(decimal) || type == typeof(byte) || type == typeof(short) " is 194.
Long Statement,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The length of the statement  "                    else if (ReflectionUtils.IsTypeGenericeCollectionInterface(type) || ReflectionUtils.IsAssignableFrom(typeof(IList)' type)) " is 122.
Long Statement,SimpleOwin.Middlewares,DataContractJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,SetterValueFactory,The length of the statement  "            IDictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>> result = new Dictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>>(); " is 152.
Long Statement,SimpleOwin.Middlewares,DataContractJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,SetterValueFactory,The length of the statement  "                        result[jsonKey] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(propertyInfo.PropertyType' ReflectionUtils.GetSetMethod(propertyInfo)); " is 141.
Long Statement,SimpleOwin.Middlewares,DataContractJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,SetterValueFactory,The length of the statement  "                    result[jsonKey] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(fieldInfo.FieldType' ReflectionUtils.GetSetMethod(fieldInfo)); " is 132.
Long Statement,SimpleOwin.Middlewares,DataContractJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,CanAdd,The length of the statement  "            DataMemberAttribute dataMemberAttribute = (DataMemberAttribute)ReflectionUtils.GetAttribute(info' typeof(DataMemberAttribute)); " is 127.
Long Statement,SimpleOwin.Middlewares,DataContractJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,SetterValueFactory,The length of the statement  "            IDictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>> result = new Dictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>>(); " is 152.
Long Statement,SimpleOwin.Middlewares,DataContractJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,SetterValueFactory,The length of the statement  "                        result[jsonKey] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(propertyInfo.PropertyType' ReflectionUtils.GetSetMethod(propertyInfo)); " is 141.
Long Statement,SimpleOwin.Middlewares,DataContractJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,SetterValueFactory,The length of the statement  "                    result[jsonKey] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(fieldInfo.FieldType' ReflectionUtils.GetSetMethod(fieldInfo)); " is 132.
Long Statement,SimpleOwin.Middlewares,DataContractJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,CanAdd,The length of the statement  "            DataMemberAttribute dataMemberAttribute = (DataMemberAttribute)ReflectionUtils.GetAttribute(info' typeof(DataMemberAttribute)); " is 127.
Long Statement,SimpleOwin.Middlewares,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,IsTypeGenericeCollectionInterface,The length of the statement  "                return (genericDefinition == typeof(IList<>) || genericDefinition == typeof(ICollection<>) || genericDefinition == typeof(IEnumerable<>)); " is 138.
Long Statement,SimpleOwin.Middlewares,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ToNullableType,The length of the statement  "                return obj == null ? null : Convert.ChangeType(obj' Nullable.GetUnderlyingType(nullableType)' CultureInfo.InvariantCulture); " is 124.
Long Statement,SimpleOwin.Middlewares,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,SimpleOwin.Middlewares,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "                Func<object' object> compiled = Expression.Lambda<Func<object' object>>(Expression.TypeAs(Expression.Call(instanceCast' getMethodInfo)' typeof(object))' instance).Compile(); " is 173.
Long Statement,SimpleOwin.Middlewares,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,SimpleOwin.Middlewares,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression valueCast = (!IsValueType(propertyInfo.PropertyType)) ? Expression.TypeAs(value' propertyInfo.PropertyType) : Expression.Convert(value' propertyInfo.PropertyType); " is 179.
Long Statement,SimpleOwin.Middlewares,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                Action<object' object> compiled = Expression.Lambda<Action<object' object>>(Expression.Call(instanceCast' setMethodInfo' valueCast)' new ParameterExpression[] { instance' value }).Compile(); " is 190.
Long Statement,SimpleOwin.Middlewares,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                    Assign(Expression.Field(Expression.Convert(instance' fieldInfo.DeclaringType)' fieldInfo)' Expression.Convert(value' fieldInfo.FieldType))' instance' value).Compile(); " is 167.
Long Statement,SimpleOwin.Middlewares,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,IsTypeGenericeCollectionInterface,The length of the statement  "                return (genericDefinition == typeof(IList<>) || genericDefinition == typeof(ICollection<>) || genericDefinition == typeof(IEnumerable<>)); " is 138.
Long Statement,SimpleOwin.Middlewares,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ToNullableType,The length of the statement  "                return obj == null ? null : Convert.ChangeType(obj' Nullable.GetUnderlyingType(nullableType)' CultureInfo.InvariantCulture); " is 124.
Long Statement,SimpleOwin.Middlewares,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,SimpleOwin.Middlewares,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "                Func<object' object> compiled = Expression.Lambda<Func<object' object>>(Expression.TypeAs(Expression.Call(instanceCast' getMethodInfo)' typeof(object))' instance).Compile(); " is 173.
Long Statement,SimpleOwin.Middlewares,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,SimpleOwin.Middlewares,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression valueCast = (!IsValueType(propertyInfo.PropertyType)) ? Expression.TypeAs(value' propertyInfo.PropertyType) : Expression.Convert(value' propertyInfo.PropertyType); " is 179.
Long Statement,SimpleOwin.Middlewares,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                Action<object' object> compiled = Expression.Lambda<Action<object' object>>(Expression.Call(instanceCast' setMethodInfo' valueCast)' new ParameterExpression[] { instance' value }).Compile(); " is 190.
Long Statement,SimpleOwin.Middlewares,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                    Assign(Expression.Field(Expression.Convert(instance' fieldInfo.DeclaringType)' fieldInfo)' Expression.Convert(value' fieldInfo.FieldType))' instance' value).Compile(); " is 167.
Long Statement,SimpleOwin.Middlewares,QueryParser,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\QueryParser.cs,Middleware,The length of the statement  "                    env["simpleOwin.query"] = new Lazy<IDictionary<string' string[]>>(() => ParseQuerystring(env.GetRequestQueryString()' urlDecoder)); " is 131.
Long Statement,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The length of the statement  "                            if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) " is 130.
Long Statement,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The length of the statement  "                                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) " is 163.
Long Statement,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseNumber,The length of the statement  "            if (str.IndexOf("."' StringComparison.OrdinalIgnoreCase) != -1 || str.IndexOf("e"' StringComparison.OrdinalIgnoreCase) != -1) " is 125.
Long Statement,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseNumber,The length of the statement  "                success = double.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 123.
Long Statement,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseNumber,The length of the statement  "                success = long.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 121.
Long Statement,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The length of the statement  "                if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e') " is 127.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,SetterValueFactory,The length of the statement  "            IDictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>> result = new Dictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>>(); " is 152.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,SetterValueFactory,The length of the statement  "                    result[propertyInfo.Name] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(propertyInfo.PropertyType' ReflectionUtils.GetSetMethod(propertyInfo)); " is 151.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,SetterValueFactory,The length of the statement  "                result[fieldInfo.Name] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(fieldInfo.FieldType' ReflectionUtils.GetSetMethod(fieldInfo)); " is 139.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTime) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTime))) " is 127.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The length of the statement  "                        obj = DateTime.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 143.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The length of the statement  "                    else if (type == typeof(Guid) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(Guid))) " is 124.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The length of the statement  " type == typeof(int) || type == typeof(long) || type == typeof(double) || type == typeof(float) || type == typeof(bool) || type == typeof(decimal) || type == typeof(byte) || type == typeof(short) " is 194.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The length of the statement  "                    else if (ReflectionUtils.IsTypeGenericeCollectionInterface(type) || ReflectionUtils.IsAssignableFrom(typeof(IList)' type)) " is 122.
Long Statement,Reflection,DataContractJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,SetterValueFactory,The length of the statement  "            IDictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>> result = new Dictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>>(); " is 152.
Long Statement,Reflection,DataContractJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,SetterValueFactory,The length of the statement  "                        result[jsonKey] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(propertyInfo.PropertyType' ReflectionUtils.GetSetMethod(propertyInfo)); " is 141.
Long Statement,Reflection,DataContractJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,SetterValueFactory,The length of the statement  "                    result[jsonKey] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(fieldInfo.FieldType' ReflectionUtils.GetSetMethod(fieldInfo)); " is 132.
Long Statement,Reflection,DataContractJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,CanAdd,The length of the statement  "            DataMemberAttribute dataMemberAttribute = (DataMemberAttribute)ReflectionUtils.GetAttribute(info' typeof(DataMemberAttribute)); " is 127.
Long Statement,Reflection,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,IsTypeGenericeCollectionInterface,The length of the statement  "                return (genericDefinition == typeof(IList<>) || genericDefinition == typeof(ICollection<>) || genericDefinition == typeof(IEnumerable<>)); " is 138.
Long Statement,Reflection,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ToNullableType,The length of the statement  "                return obj == null ? null : Convert.ChangeType(obj' Nullable.GetUnderlyingType(nullableType)' CultureInfo.InvariantCulture); " is 124.
Long Statement,Reflection,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,Reflection,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "                Func<object' object> compiled = Expression.Lambda<Func<object' object>>(Expression.TypeAs(Expression.Call(instanceCast' getMethodInfo)' typeof(object))' instance).Compile(); " is 173.
Long Statement,Reflection,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,Reflection,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression valueCast = (!IsValueType(propertyInfo.PropertyType)) ? Expression.TypeAs(value' propertyInfo.PropertyType) : Expression.Convert(value' propertyInfo.PropertyType); " is 179.
Long Statement,Reflection,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                Action<object' object> compiled = Expression.Lambda<Action<object' object>>(Expression.Call(instanceCast' setMethodInfo' valueCast)' new ParameterExpression[] { instance' value }).Compile(); " is 190.
Long Statement,Reflection,ReflectionUtils,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                    Assign(Expression.Field(Expression.Convert(instance' fieldInfo.DeclaringType)' fieldInfo)' Expression.Convert(value' fieldInfo.FieldType))' instance' value).Compile(); " is 167.
Complex Conditional,SimpleOwin.Middlewares,JsonObject,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,TryConvert,The conditional expression  "(targetType == typeof(IEnumerable)) ||                  (targetType == typeof(IEnumerable<KeyValuePair<string' object>>)) ||                  (targetType == typeof(IDictionary<string' object>)) ||                  (targetType == typeof(IDictionary))"  is complex.
Complex Conditional,SimpleOwin.Middlewares,JsonObject,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,TryConvert,The conditional expression  "(targetType == typeof(IEnumerable)) ||                  (targetType == typeof(IEnumerable<KeyValuePair<string' object>>)) ||                  (targetType == typeof(IDictionary<string' object>)) ||                  (targetType == typeof(IDictionary))"  is complex.
Complex Conditional,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e'"  is complex.
Complex Conditional,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e'"  is complex.
Complex Conditional,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l'"  is complex.
Complex Conditional,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e'"  is complex.
Complex Conditional,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e'"  is complex.
Complex Conditional,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l'"  is complex.
Complex Conditional,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The conditional expression  "(value is long && type == typeof(long)) || (value is double && type == typeof(double))"  is complex.
Complex Conditional,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The conditional expression  "(value is double && type != typeof(double)) || (value is long && type != typeof(long))"  is complex.
Complex Conditional,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The conditional expression  "(value is long && type == typeof(long)) || (value is double && type == typeof(double))"  is complex.
Complex Conditional,SimpleOwin.Middlewares,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The conditional expression  "(value is double && type != typeof(double)) || (value is long && type != typeof(long))"  is complex.
Complex Conditional,Reflection,JsonObject,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,TryConvert,The conditional expression  "(targetType == typeof(IEnumerable)) ||                  (targetType == typeof(IEnumerable<KeyValuePair<string' object>>)) ||                  (targetType == typeof(IDictionary<string' object>)) ||                  (targetType == typeof(IDictionary))"  is complex.
Complex Conditional,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e'"  is complex.
Complex Conditional,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e'"  is complex.
Complex Conditional,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l'"  is complex.
Complex Conditional,Reflection,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The conditional expression  "(value is long && type == typeof(long)) || (value is double && type == typeof(double))"  is complex.
Complex Conditional,Reflection,PocoJsonSerializerStrategy,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,DeserializeObject,The conditional expression  "(value is double && type != typeof(double)) || (value is long && type != typeof(long))"  is complex.
Complex Conditional,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,HtmlEncode,The conditional expression  "c == '&' || c == '"' || c == '<' || c == '>' || c > 159"  is complex.
Complex Conditional,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,UrlEncodeChar,The conditional expression  "(c < '0') ||                  (c < 'A' && c > '9') ||                  (c > 'Z' && c < 'a') ||                  (c > 'z')"  is complex.
Complex Conditional,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,UrlEncode,The conditional expression  "(c < '0') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a') || (c > 'z')"  is complex.
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,EscapeToJavascriptString,The following statement contains a magic number: for (int i = 0; i < jsonString.Length; )              {                  c = jsonString[i++];                    if (c == '\\')                  {                      int remainingLength = jsonString.Length - i;                      if (remainingLength >= 2)                      {                          char lookahead = jsonString[i];                          if (lookahead == '\\')                          {                              sb.Append('\\');                              ++i;                          }                          else if (lookahead == '"')                          {                              sb.Append("\"");                              ++i;                          }                          else if (lookahead == 't')                          {                              sb.Append('\t');                              ++i;                          }                          else if (lookahead == 'b')                          {                              sb.Append('\b');                              ++i;                          }                          else if (lookahead == 'n')                          {                              sb.Append('\n');                              ++i;                          }                          else if (lookahead == 'r')                          {                              sb.Append('\r');                              ++i;                          }                      }                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ConvertFromUtf32,The following statement contains a magic number: return new string(new char[] { (char)((utf32 >> 10) + 0xD800)' (char)(utf32 % 0x0400 + 0xDC00) });
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,EscapeToJavascriptString,The following statement contains a magic number: for (int i = 0; i < jsonString.Length; )              {                  c = jsonString[i++];                    if (c == '\\')                  {                      int remainingLength = jsonString.Length - i;                      if (remainingLength >= 2)                      {                          char lookahead = jsonString[i];                          if (lookahead == '\\')                          {                              sb.Append('\\');                              ++i;                          }                          else if (lookahead == '"')                          {                              sb.Append("\"");                              ++i;                          }                          else if (lookahead == 't')                          {                              sb.Append('\t');                              ++i;                          }                          else if (lookahead == 'b')                          {                              sb.Append('\b');                              ++i;                          }                          else if (lookahead == 'n')                          {                              sb.Append('\n');                              ++i;                          }                          else if (lookahead == 'r')                          {                              sb.Append('\r');                              ++i;                          }                      }                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ConvertFromUtf32,The following statement contains a magic number: return new string(new char[] { (char)((utf32 >> 10) + 0xD800)' (char)(utf32 % 0x0400 + 0xDC00) });
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleOwin.Middlewares,QueryParser,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\QueryParser.cs,ParseQuerystring,The following statement contains a magic number: foreach (var kvp in querystring.Split('&'))              {                  var parts = kvp.Split('=');                  if (!queryDictionary.ContainsKey(parts[0]))                      queryDictionary.Add(parts[0]' new List<string>());                    queryDictionary[parts[0]].Add(parts.Length == 2 ? urlDecoder(parts[1]) : string.Empty);              }
Magic Number,SimpleOwin.Middlewares,NotFound,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\NotFound.cs,Middleware,The following statement contains a magic number: return                  next =>                  env =>                  {                      if (!string.IsNullOrWhiteSpace(contentType))                      {                          var headers = env                              .SetResponseStatusCode(404)                              .GetResponseHeaders();                          headers.SetHeader("content-type"' contentType);                      }                        env                          .GetResponseBody()                          .Write(data' 0' data.Length);                        return next(env);                  };
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,EscapeToJavascriptString,The following statement contains a magic number: for (int i = 0; i < jsonString.Length; )              {                  c = jsonString[i++];                    if (c == '\\')                  {                      int remainingLength = jsonString.Length - i;                      if (remainingLength >= 2)                      {                          char lookahead = jsonString[i];                          if (lookahead == '\\')                          {                              sb.Append('\\');                              ++i;                          }                          else if (lookahead == '"')                          {                              sb.Append("\"");                              ++i;                          }                          else if (lookahead == 't')                          {                              sb.Append('\t');                              ++i;                          }                          else if (lookahead == 'b')                          {                              sb.Append('\b');                              ++i;                          }                          else if (lookahead == 'n')                          {                              sb.Append('\n');                              ++i;                          }                          else if (lookahead == 'r')                          {                              sb.Append('\r');                              ++i;                          }                      }                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ConvertFromUtf32,The following statement contains a magic number: return new string(new char[] { (char)((utf32 >> 10) + 0xD800)' (char)(utf32 % 0x0400 + 0xDC00) });
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  ch = input[i];                    if ((ch < 32 && ch != 9) || ch == 127)                      StringBuilderAppend(String.Format("%{0:x2}"' (int)ch)' ref sb);              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  ch = input[i];                    if ((ch < 32 && ch != 9) || ch == 127)                      StringBuilderAppend(String.Format("%{0:x2}"' (int)ch)' ref sb);              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  ch = input[i];                    if ((ch < 32 && ch != 9) || ch == 127)                      StringBuilderAppend(String.Format("%{0:x2}"' (int)ch)' ref sb);              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < s.Length; i++)              {                  char c = s[i];                  if (c == '&' || c == '"' || c == '<' || c == '>' || c > 159  #if NET_4_0  				    || c == '\''  #endif  )                  {                      needEncode = true;                      break;                  }              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  switch (s[i])                  {                      case '&':                          output.Append("&amp;");                          break;                      case '>':                          output.Append("&gt;");                          break;                      case '<':                          output.Append("&lt;");                          break;                      case '"':                          output.Append("&quot;");                          break;  #if NET_4_0  					case '\'':  						output.Append ("&#39;");  						break;  #endif                      case '\uff1c':                          output.Append("&#65308;");                          break;                        case '\uff1e':                          output.Append("&#65310;");                          break;                        default:                          ch = s[i];                          if (ch > 159 && ch < 256)                          {                              output.Append("&#");                              output.Append(((int)ch).ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                              output.Append(ch);                          break;                  }              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  switch (s[i])                  {                      case '&':                          output.Append("&amp;");                          break;                      case '>':                          output.Append("&gt;");                          break;                      case '<':                          output.Append("&lt;");                          break;                      case '"':                          output.Append("&quot;");                          break;  #if NET_4_0  					case '\'':  						output.Append ("&#39;");  						break;  #endif                      case '\uff1c':                          output.Append("&#65308;");                          break;                        case '\uff1e':                          output.Append("&#65310;");                          break;                        default:                          ch = s[i];                          if (ch > 159 && ch < 256)                          {                              output.Append("&#");                              output.Append(((int)ch).ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                              output.Append(ch);                          break;                  }              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }                      else if (is_hex_value && Uri.IsHexDigit(c))                      {                          number = number * 16 + Uri.FromHex(c);                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }                      else if (is_hex_value && Uri.IsHexDigit(c))                      {                          number = number * 16 + Uri.FromHex(c);                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }                      else if (is_hex_value && Uri.IsHexDigit(c))                      {                          number = number * 16 + Uri.FromHex(c);                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }                      else if (is_hex_value && Uri.IsHexDigit(c))                      {                          number = number * 16 + Uri.FromHex(c);                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }                      else if (is_hex_value && Uri.IsHexDigit(c))                      {                          number = number * 16 + Uri.FromHex(c);                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }                      else if (is_hex_value && Uri.IsHexDigit(c))                      {                          number = number * 16 + Uri.FromHex(c);                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }                      else if (is_hex_value && Uri.IsHexDigit(c))                      {                          number = number * 16 + Uri.FromHex(c);                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }                      else if (is_hex_value && Uri.IsHexDigit(c))                      {                          number = number * 16 + Uri.FromHex(c);                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }                      else if (is_hex_value && Uri.IsHexDigit(c))                      {                          number = number * 16 + Uri.FromHex(c);                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }                      else if (is_hex_value && Uri.IsHexDigit(c))                      {                          number = number * 16 + Uri.FromHex(c);                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255)              {                  //FIXME: what happens when there is an internal error?                  //if (!isUnicode)                  //	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");                  int idx;                  int i = (int)c;                    result.WriteByte((byte)'%');                  result.WriteByte((byte)'u');                  idx = i >> 12;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 8) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 4) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = i & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  return;              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255)              {                  //FIXME: what happens when there is an internal error?                  //if (!isUnicode)                  //	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");                  int idx;                  int i = (int)c;                    result.WriteByte((byte)'%');                  result.WriteByte((byte)'u');                  idx = i >> 12;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 8) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 4) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = i & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  return;              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255)              {                  //FIXME: what happens when there is an internal error?                  //if (!isUnicode)                  //	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");                  int idx;                  int i = (int)c;                    result.WriteByte((byte)'%');                  result.WriteByte((byte)'u');                  idx = i >> 12;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 8) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 4) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = i & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  return;              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255)              {                  //FIXME: what happens when there is an internal error?                  //if (!isUnicode)                  //	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");                  int idx;                  int i = (int)c;                    result.WriteByte((byte)'%');                  result.WriteByte((byte)'u');                  idx = i >> 12;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 8) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 4) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = i & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  return;              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if ((c < '0') ||                  (c < 'A' && c > '9') ||                  (c > 'Z' && c < 'a') ||                  (c > 'z'))              {                  if (isUnicode && c > 127)                  {                      result.WriteByte((byte)'%');                      result.WriteByte((byte)'u');                      result.WriteByte((byte)'0');                      result.WriteByte((byte)'0');                  }                  else                      result.WriteByte((byte)'%');                    int idx = ((int)c) >> 4;                  result.WriteByte((byte)hexChars[idx]);                  idx = ((int)c) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);              }              else                  result.WriteByte((byte)c);
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if ((c < '0') ||                  (c < 'A' && c > '9') ||                  (c > 'Z' && c < 'a') ||                  (c > 'z'))              {                  if (isUnicode && c > 127)                  {                      result.WriteByte((byte)'%');                      result.WriteByte((byte)'u');                      result.WriteByte((byte)'0');                      result.WriteByte((byte)'0');                  }                  else                      result.WriteByte((byte)'%');                    int idx = ((int)c) >> 4;                  result.WriteByte((byte)hexChars[idx]);                  idx = ((int)c) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);              }              else                  result.WriteByte((byte)c);
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,UrlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126)              {                  byte[] bIn = Encoding.UTF8.GetBytes(c.ToString());                  for (int i = 0; i < bIn.Length; i++)                  {                      result.WriteByte((byte)'%');                      int idx = ((int)bIn[i]) >> 4;                      result.WriteByte((byte)hexChars[idx]);                      idx = ((int)bIn[i]) & 0x0F;                      result.WriteByte((byte)hexChars[idx]);                  }              }              else if (c == ' ')              {                  result.WriteByte((byte)'%');                  result.WriteByte((byte)'2');                  result.WriteByte((byte)'0');              }              else                  result.WriteByte((byte)c);
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,UrlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126)              {                  byte[] bIn = Encoding.UTF8.GetBytes(c.ToString());                  for (int i = 0; i < bIn.Length; i++)                  {                      result.WriteByte((byte)'%');                      int idx = ((int)bIn[i]) >> 4;                      result.WriteByte((byte)hexChars[idx]);                      idx = ((int)bIn[i]) & 0x0F;                      result.WriteByte((byte)hexChars[idx]);                  }              }              else if (c == ' ')              {                  result.WriteByte((byte)'%');                  result.WriteByte((byte)'2');                  result.WriteByte((byte)'0');              }              else                  result.WriteByte((byte)c);
Magic Number,SimpleOwin.Middlewares.Helpers,HttpEncoder,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpEncoder.cs,UrlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126)              {                  byte[] bIn = Encoding.UTF8.GetBytes(c.ToString());                  for (int i = 0; i < bIn.Length; i++)                  {                      result.WriteByte((byte)'%');                      int idx = ((int)bIn[i]) >> 4;                      result.WriteByte((byte)hexChars[idx]);                      idx = ((int)bIn[i]) & 0x0F;                      result.WriteByte((byte)hexChars[idx]);                  }              }              else if (c == ' ')              {                  result.WriteByte((byte)'%');                  result.WriteByte((byte)'2');                  result.WriteByte((byte)'0');              }              else                  result.WriteByte((byte)c);
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,WriteCharBytes,The following statement contains a magic number: if (ch > 255)              {                  foreach (byte b in e.GetBytes(new char[] { ch }))                      buf.Add(b);              }              else                  buf.Add((byte)ch);
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,GetInt,The following statement contains a magic number: if (c >= 'a' && c <= 'f')                  return c - 'a' + 10;
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,GetInt,The following statement contains a magic number: if (c >= 'A' && c <= 'F')                  return c - 'A' + 10;
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  int current = GetInt(bytes[i]);                  if (current == -1)                      return -1;                  value = (value << 4) + current;              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = str[i];                  if (c > 127)                      return -1;                    int current = GetInt((byte)c);                  if (current == -1)                      return -1;                  val = (val << 4) + current;              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = str[i];                  if (c > 127)                      return -1;                    int current = GetInt((byte)c);                  if (current == -1)                      return -1;                  val = (val << 4) + current;              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = (char)bytes[i];                  if (c == '+')                  {                      c = ' ';                  }                  else if (c == '%' && i < end - 2)                  {                      int xchar = GetChar(bytes' i + 1' 2);                      if (xchar != -1)                      {                          c = (char)xchar;                          i += 2;                      }                  }                  result.WriteByte((byte)c);              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = (char)bytes[i];                  if (c == '+')                  {                      c = ' ';                  }                  else if (c == '%' && i < end - 2)                  {                      int xchar = GetChar(bytes' i + 1' 2);                      if (xchar != -1)                      {                          c = (char)xchar;                          i += 2;                      }                  }                  result.WriteByte((byte)c);              }
Magic Number,SimpleOwin.Middlewares.Helpers,HttpUtility,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\Helpers\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = (char)bytes[i];                  if (c == '+')                  {                      c = ' ';                  }                  else if (c == '%' && i < end - 2)                  {                      int xchar = GetChar(bytes' i + 1' 2);                      if (xchar != -1)                      {                          c = (char)xchar;                          i += 2;                      }                  }                  result.WriteByte((byte)c);              }
Missing Default,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead(json' index))              {                  case TOKEN_STRING:                      return ParseString(json' ref index' ref success);                  case TOKEN_NUMBER:                      return ParseNumber(json' ref index' ref success);                  case TOKEN_CURLY_OPEN:                      return ParseObject(json' ref index' ref success);                  case TOKEN_SQUARED_OPEN:                      return ParseArray(json' ref index' ref success);                  case TOKEN_TRUE:                      NextToken(json' ref index);                      return true;                  case TOKEN_FALSE:                      NextToken(json' ref index);                      return false;                  case TOKEN_NULL:                      NextToken(json' ref index);                      return null;                  case TOKEN_NONE:                      break;              }
Missing Default,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following switch statement is missing a default case: switch (c)              {                  case '{':                      return TOKEN_CURLY_OPEN;                  case '}':                      return TOKEN_CURLY_CLOSE;                  case '[':                      return TOKEN_SQUARED_OPEN;                  case ']':                      return TOKEN_SQUARED_CLOSE;                  case ''':                      return TOKEN_COMMA;                  case '"':                      return TOKEN_STRING;                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                      return TOKEN_NUMBER;                  case ':':                      return TOKEN_COLON;              }
Missing Default,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead(json' index))              {                  case TOKEN_STRING:                      return ParseString(json' ref index' ref success);                  case TOKEN_NUMBER:                      return ParseNumber(json' ref index' ref success);                  case TOKEN_CURLY_OPEN:                      return ParseObject(json' ref index' ref success);                  case TOKEN_SQUARED_OPEN:                      return ParseArray(json' ref index' ref success);                  case TOKEN_TRUE:                      NextToken(json' ref index);                      return true;                  case TOKEN_FALSE:                      NextToken(json' ref index);                      return false;                  case TOKEN_NULL:                      NextToken(json' ref index);                      return null;                  case TOKEN_NONE:                      break;              }
Missing Default,SimpleOwin.Middlewares,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following switch statement is missing a default case: switch (c)              {                  case '{':                      return TOKEN_CURLY_OPEN;                  case '}':                      return TOKEN_CURLY_CLOSE;                  case '[':                      return TOKEN_SQUARED_OPEN;                  case ']':                      return TOKEN_SQUARED_CLOSE;                  case ''':                      return TOKEN_COMMA;                  case '"':                      return TOKEN_STRING;                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                      return TOKEN_NUMBER;                  case ':':                      return TOKEN_COLON;              }
Missing Default,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead(json' index))              {                  case TOKEN_STRING:                      return ParseString(json' ref index' ref success);                  case TOKEN_NUMBER:                      return ParseNumber(json' ref index' ref success);                  case TOKEN_CURLY_OPEN:                      return ParseObject(json' ref index' ref success);                  case TOKEN_SQUARED_OPEN:                      return ParseArray(json' ref index' ref success);                  case TOKEN_TRUE:                      NextToken(json' ref index);                      return true;                  case TOKEN_FALSE:                      NextToken(json' ref index);                      return false;                  case TOKEN_NULL:                      NextToken(json' ref index);                      return null;                  case TOKEN_NONE:                      break;              }
Missing Default,Reflection,SimpleJson,C:\repos\prabirshrestha_simple-owin\src\SimpleOwin.Middlewares\SimpleJson.cs,NextToken,The following switch statement is missing a default case: switch (c)              {                  case '{':                      return TOKEN_CURLY_OPEN;                  case '}':                      return TOKEN_CURLY_CLOSE;                  case '[':                      return TOKEN_SQUARED_OPEN;                  case ']':                      return TOKEN_SQUARED_CLOSE;                  case ''':                      return TOKEN_COMMA;                  case '"':                      return TOKEN_STRING;                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                      return TOKEN_NUMBER;                  case ':':                      return TOKEN_COLON;              }
