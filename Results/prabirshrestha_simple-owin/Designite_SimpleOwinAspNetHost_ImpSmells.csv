Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,SimpleOwinAspNetHost.Samples,MiddlewareApps,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwinAspNetHost\Samples\MiddlewareApps.cs,,The length of the parameter CachedCompletedResultTupleTask is 30.
Long Identifier,SimpleOwinAspNetHost.Samples,Helloworld,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwinAspNetHost\Samples\Helloworld.cs,,The length of the parameter CachedCompletedResultTupleTask is 30.
Long Identifier,SimpleOwinAspNetHost.Samples.WebSockets.HelloworldAutodetect,HelloWorldWebSocketAutodetect,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwinAspNetHost\Samples\WebSockets\HelloworldAutodetect\HelloWorldWebSocketAutodetect.cs,,The length of the parameter CachedCompletedResultTupleTask is 30.
Long Identifier,SimpleOwinAspNetHost.Samples.WebSockets.Helloworld,HelloWorldWebSocket,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwinAspNetHost\Samples\WebSockets\Helloworld\HelloWorldWebSocket.cs,,The length of the parameter CachedCompletedResultTupleTask is 30.
Long Statement,SimpleOwinAspNetHost,Global,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwinAspNetHost\Global.asax.cs,Application_Start,The length of the statement  "            RouteTable.Routes.Add(new Route("SimpleOwinApp/{*pathInfo}"' new SimpleOwinAspNetRouteHandler(SimpleOwinApp.OwinApp()' "SimpleOwinApp")));" is 138.
Long Statement,SimpleOwinAspNetHost,Global,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwinAspNetHost\Global.asax.cs,Application_Start,The length of the statement  "            RouteTable.Routes.Add(new Route("websocket/helloworld"' new SimpleOwinAspNetRouteHandler(HelloWorldWebSocket.OwinApp())));" is 122.
Long Statement,SimpleOwinAspNetHost,Global,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwinAspNetHost\Global.asax.cs,Application_Start,The length of the statement  "            RouteTable.Routes.Add(new Route("websocket/helloworld/autodetect"' new SimpleOwinAspNetRouteHandler(HelloWorldWebSocketAutodetect.OwinApp())));" is 143.
Long Statement,SimpleOwinAspNetHost.Samples.WebSockets.HelloworldAutodetect,HelloWorldWebSocketAutodetect,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwinAspNetHost\Samples\WebSockets\HelloworldAutodetect\HelloWorldWebSocketAutodetect.cs,OwinApps,The length of the statement  "            app.Add(AspNetWebSocketMiddleware.Middleware(autodetect: true' replace: false' httpContextBaseKey: "aspnet.HttpContextBase")); " is 126.
Magic Number,SimpleOwinAspNetHost.Samples,Helloworld,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwinAspNetHost\Samples\Helloworld.cs,OwinApp,The following statement contains a magic number: return env =>                         {                             object version;                             env.TryGetValue("owin.Version"' out version);                               if (version == null || !string.Equals(version.ToString()' "1.0"))                                 throw new InvalidOperationException("An OWIN v1.0 host is required");                               var owinRequestMethod = Get<string>(env' "owin.RequestMethod");                             var owinRequestScheme = Get<string>(env' "owin.RequestScheme");                             var owinRequestHeaders = Get<IDictionary<string' string[]>>(env' "owin.RequestHeaders");                             var owinRequestPathBase = Get<string>(env' "owin.RequestPathBase");                             var owinRequestPath = Get<string>(env' "owin.RequestPath");                             var owinRequestQueryString = Get<string>(env' "owin.RequestQueryString");                             var serverClientIp = Get<string>(env' "server.CLIENT_IP");                             var callCancelled = Get<Task>(env' "owin.CallCancelled");                               var uriHostName = GetHeader(owinRequestHeaders' "Host");                             var uri = string.Format("{0}://{1}{2}{3}{4}{5}"' owinRequestScheme' uriHostName'                                                     owinRequestPathBase' owinRequestPath'                                                     owinRequestQueryString == "" ? "" : "?"' owinRequestQueryString);                               var owinResponseHeaders = Get<IDictionary<string' string[]>>(env' "owin.ResponseHeaders");                             var owinResponseBody = Get<Stream>(env' "owin.ResponseBody");                               env["owin.ResponseStatusCode"] = 200;                             owinResponseHeaders.Add("custom header"' new[] { "custom header value" });                               var msg = Encoding.UTF8.GetBytes("hello world");                             owinResponseBody.Write(msg' 0' msg.Length);                               return CachedCompletedResultTupleTask;                         };
Magic Number,SimpleOwinAspNetHost.Samples.WebSockets.HelloworldAutodetect,HelloWorldWebSocketAutodetect,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwinAspNetHost\Samples\WebSockets\HelloworldAutodetect\HelloWorldWebSocketAutodetect.cs,MainHelloworldSocketApp,The following statement contains a magic number: return app => env =>              {                  var responseBody = (Stream)env["owin.ResponseBody"];                    var webSocketSupport = Get<string>(env' "websocket.Support");                  if (webSocketSupport != null && webSocketSupport.Contains("WebSocketFunc"))                  {                      // websocket supported                      env["owin.ResponseStatusCode"] = 101;                      WebSocketFunc webSocketBody = async wsEnv =>                      {                          var wsSendAsync = (WebSocketSendAsync)env["websocket.SendAsyncFunc"];                          var wsRecieveAsync = (WebSocketReceiveAsync)env["websocket.ReceiveAsyncFunc"];                          var wsCloseAsync = (WebSocketCloseAsync)env["websocket.CloseAsyncFunc"];                          var wsVersion = (WebSocketReceiveAsync)env["websocket.Version"];                          var wsCallCancelled = (CancellationToken)env["websocket.CallCancelled"];                            // note: make sure to catch errors when calling sendAsync' receiveAsync and closeAsync                          // for simiplicity this code does not handle errors                          var buffer = new ArraySegment<byte>(new byte[6]);                          while (true)                          {                              var webSocketResultTuple = await wsRecieveAsync(buffer' CancellationToken.None);                              int wsMessageType = webSocketResultTuple.Item1;                              bool wsEndOfMessge = webSocketResultTuple.Item2;                              int? count = webSocketResultTuple.Item3;                              int? closeStatus = webSocketResultTuple.Item4;                              string closeStatusDescription = webSocketResultTuple.Item5;                                Debug.Write(Encoding.UTF8.GetString(buffer.Array' 0' count.Value));                                if (wsEndOfMessge)                                  break;                          }                            await wsCloseAsync((int)WebSocketCloseStatus.NormalClosure' "Closing"' CancellationToken.None);                      };                        env["websocket.Func"] = webSocketBody;                  }                  else                  {                      env["owin.ResponseStatusCode"] = 200;                      // do the actual copying to response stream here                      var message = Encoding.UTF8.GetBytes("hello from owin");                      responseBody.Write(message' 0' message.Length);                  }                    return app(env);              };
Magic Number,SimpleOwinAspNetHost.Samples.WebSockets.HelloworldAutodetect,HelloWorldWebSocketAutodetect,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwinAspNetHost\Samples\WebSockets\HelloworldAutodetect\HelloWorldWebSocketAutodetect.cs,MainHelloworldSocketApp,The following statement contains a magic number: return app => env =>              {                  var responseBody = (Stream)env["owin.ResponseBody"];                    var webSocketSupport = Get<string>(env' "websocket.Support");                  if (webSocketSupport != null && webSocketSupport.Contains("WebSocketFunc"))                  {                      // websocket supported                      env["owin.ResponseStatusCode"] = 101;                      WebSocketFunc webSocketBody = async wsEnv =>                      {                          var wsSendAsync = (WebSocketSendAsync)env["websocket.SendAsyncFunc"];                          var wsRecieveAsync = (WebSocketReceiveAsync)env["websocket.ReceiveAsyncFunc"];                          var wsCloseAsync = (WebSocketCloseAsync)env["websocket.CloseAsyncFunc"];                          var wsVersion = (WebSocketReceiveAsync)env["websocket.Version"];                          var wsCallCancelled = (CancellationToken)env["websocket.CallCancelled"];                            // note: make sure to catch errors when calling sendAsync' receiveAsync and closeAsync                          // for simiplicity this code does not handle errors                          var buffer = new ArraySegment<byte>(new byte[6]);                          while (true)                          {                              var webSocketResultTuple = await wsRecieveAsync(buffer' CancellationToken.None);                              int wsMessageType = webSocketResultTuple.Item1;                              bool wsEndOfMessge = webSocketResultTuple.Item2;                              int? count = webSocketResultTuple.Item3;                              int? closeStatus = webSocketResultTuple.Item4;                              string closeStatusDescription = webSocketResultTuple.Item5;                                Debug.Write(Encoding.UTF8.GetString(buffer.Array' 0' count.Value));                                if (wsEndOfMessge)                                  break;                          }                            await wsCloseAsync((int)WebSocketCloseStatus.NormalClosure' "Closing"' CancellationToken.None);                      };                        env["websocket.Func"] = webSocketBody;                  }                  else                  {                      env["owin.ResponseStatusCode"] = 200;                      // do the actual copying to response stream here                      var message = Encoding.UTF8.GetBytes("hello from owin");                      responseBody.Write(message' 0' message.Length);                  }                    return app(env);              };
Magic Number,SimpleOwinAspNetHost.Samples.WebSockets.HelloworldAutodetect,HelloWorldWebSocketAutodetect,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwinAspNetHost\Samples\WebSockets\HelloworldAutodetect\HelloWorldWebSocketAutodetect.cs,MainHelloworldSocketApp,The following statement contains a magic number: return app => env =>              {                  var responseBody = (Stream)env["owin.ResponseBody"];                    var webSocketSupport = Get<string>(env' "websocket.Support");                  if (webSocketSupport != null && webSocketSupport.Contains("WebSocketFunc"))                  {                      // websocket supported                      env["owin.ResponseStatusCode"] = 101;                      WebSocketFunc webSocketBody = async wsEnv =>                      {                          var wsSendAsync = (WebSocketSendAsync)env["websocket.SendAsyncFunc"];                          var wsRecieveAsync = (WebSocketReceiveAsync)env["websocket.ReceiveAsyncFunc"];                          var wsCloseAsync = (WebSocketCloseAsync)env["websocket.CloseAsyncFunc"];                          var wsVersion = (WebSocketReceiveAsync)env["websocket.Version"];                          var wsCallCancelled = (CancellationToken)env["websocket.CallCancelled"];                            // note: make sure to catch errors when calling sendAsync' receiveAsync and closeAsync                          // for simiplicity this code does not handle errors                          var buffer = new ArraySegment<byte>(new byte[6]);                          while (true)                          {                              var webSocketResultTuple = await wsRecieveAsync(buffer' CancellationToken.None);                              int wsMessageType = webSocketResultTuple.Item1;                              bool wsEndOfMessge = webSocketResultTuple.Item2;                              int? count = webSocketResultTuple.Item3;                              int? closeStatus = webSocketResultTuple.Item4;                              string closeStatusDescription = webSocketResultTuple.Item5;                                Debug.Write(Encoding.UTF8.GetString(buffer.Array' 0' count.Value));                                if (wsEndOfMessge)                                  break;                          }                            await wsCloseAsync((int)WebSocketCloseStatus.NormalClosure' "Closing"' CancellationToken.None);                      };                        env["websocket.Func"] = webSocketBody;                  }                  else                  {                      env["owin.ResponseStatusCode"] = 200;                      // do the actual copying to response stream here                      var message = Encoding.UTF8.GetBytes("hello from owin");                      responseBody.Write(message' 0' message.Length);                  }                    return app(env);              };
Magic Number,SimpleOwinAspNetHost.Samples.WebSockets.Helloworld,HelloWorldWebSocket,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwinAspNetHost\Samples\WebSockets\Helloworld\HelloWorldWebSocket.cs,OwinApp,The following statement contains a magic number: return env =>              {                  var responseBody = (Stream)env["owin.ResponseBody"];                    object temp;                  if (env.TryGetValue("websocket.Accept"' out temp) && temp != null)                  {                      var wsAccept = (WebSocketAccept)temp;                      var requestHeaders = Get<IDictionary<string' string[]>>(env' "owin.RequestHeaders");                        Dictionary<string' object> acceptOptions = null;                      string[] subProtocols;                      if (requestHeaders.TryGetValue("Sec-WebSocket-Protocol"' out subProtocols) && subProtocols.Length > 0)                      {                          acceptOptions = new Dictionary<string' object>();                          // Select the first one from the client                          acceptOptions.Add("websocket.SubProtocol"' subProtocols[0].Split(''').First().Trim());                      }                        wsAccept(acceptOptions' async wsEnv =>                                                  {                                                      var wsSendAsync = (WebSocketSendAsync)wsEnv["websocket.SendAsync"];                                                      var wsRecieveAsync = (WebSocketReceiveAsync)wsEnv["websocket.ReceiveAsync"];                                                      var wsCloseAsync = (WebSocketCloseAsync)wsEnv["websocket.CloseAsync"];                                                      var wsVersion = (string)wsEnv["websocket.Version"];                                                      var wsCallCancelled = (CancellationToken)wsEnv["websocket.CallCancelled"];                                                        // note: make sure to catch errors when calling sendAsync' receiveAsync and closeAsync                                                      // for simiplicity this code does not handle errors                                                      var buffer = new ArraySegment<byte>(new byte[6]);                                                      while (true)                                                      {                                                          var webSocketResultTuple = await wsRecieveAsync(buffer' wsCallCancelled);                                                          int wsMessageType = webSocketResultTuple.Item1;                                                          bool wsEndOfMessge = webSocketResultTuple.Item2;                                                          int? count = webSocketResultTuple.Item3;                                                          int? closeStatus = webSocketResultTuple.Item4;                                                          string closeStatusDescription = webSocketResultTuple.Item5;                                                            Debug.Write(Encoding.UTF8.GetString(buffer.Array' 0' count.Value));                                                            await wsSendAsync(new ArraySegment<byte>(buffer.ToArray()' 0' count.Value)' 1' wsEndOfMessge' wsCallCancelled);                                                            if (wsEndOfMessge)                                                              break;                                                      }                                                        await wsCloseAsync((int)WebSocketCloseStatus.NormalClosure' "Closing"' CancellationToken.None);                                                  });                  }                  else                  {                      env["owin.ResponseStatusCode"] = 200;                      // do the actual copying to response stream here                      var message = Encoding.UTF8.GetBytes("hello from owin");                      responseBody.Write(message' 0' message.Length);                  }                    return CachedCompletedResultTupleTask;              };
Magic Number,SimpleOwinAspNetHost.Samples.WebSockets.Helloworld,HelloWorldWebSocket,C:\research\architectureSmells\repos\prabirshrestha_simple-owin\src\SimpleOwinAspNetHost\Samples\WebSockets\Helloworld\HelloWorldWebSocket.cs,OwinApp,The following statement contains a magic number: return env =>              {                  var responseBody = (Stream)env["owin.ResponseBody"];                    object temp;                  if (env.TryGetValue("websocket.Accept"' out temp) && temp != null)                  {                      var wsAccept = (WebSocketAccept)temp;                      var requestHeaders = Get<IDictionary<string' string[]>>(env' "owin.RequestHeaders");                        Dictionary<string' object> acceptOptions = null;                      string[] subProtocols;                      if (requestHeaders.TryGetValue("Sec-WebSocket-Protocol"' out subProtocols) && subProtocols.Length > 0)                      {                          acceptOptions = new Dictionary<string' object>();                          // Select the first one from the client                          acceptOptions.Add("websocket.SubProtocol"' subProtocols[0].Split(''').First().Trim());                      }                        wsAccept(acceptOptions' async wsEnv =>                                                  {                                                      var wsSendAsync = (WebSocketSendAsync)wsEnv["websocket.SendAsync"];                                                      var wsRecieveAsync = (WebSocketReceiveAsync)wsEnv["websocket.ReceiveAsync"];                                                      var wsCloseAsync = (WebSocketCloseAsync)wsEnv["websocket.CloseAsync"];                                                      var wsVersion = (string)wsEnv["websocket.Version"];                                                      var wsCallCancelled = (CancellationToken)wsEnv["websocket.CallCancelled"];                                                        // note: make sure to catch errors when calling sendAsync' receiveAsync and closeAsync                                                      // for simiplicity this code does not handle errors                                                      var buffer = new ArraySegment<byte>(new byte[6]);                                                      while (true)                                                      {                                                          var webSocketResultTuple = await wsRecieveAsync(buffer' wsCallCancelled);                                                          int wsMessageType = webSocketResultTuple.Item1;                                                          bool wsEndOfMessge = webSocketResultTuple.Item2;                                                          int? count = webSocketResultTuple.Item3;                                                          int? closeStatus = webSocketResultTuple.Item4;                                                          string closeStatusDescription = webSocketResultTuple.Item5;                                                            Debug.Write(Encoding.UTF8.GetString(buffer.Array' 0' count.Value));                                                            await wsSendAsync(new ArraySegment<byte>(buffer.ToArray()' 0' count.Value)' 1' wsEndOfMessge' wsCallCancelled);                                                            if (wsEndOfMessge)                                                              break;                                                      }                                                        await wsCloseAsync((int)WebSocketCloseStatus.NormalClosure' "Closing"' CancellationToken.None);                                                  });                  }                  else                  {                      env["owin.ResponseStatusCode"] = 200;                      // do the actual copying to response stream here                      var message = Encoding.UTF8.GetBytes("hello from owin");                      responseBody.Write(message' 0' message.Length);                  }                    return CachedCompletedResultTupleTask;              };
