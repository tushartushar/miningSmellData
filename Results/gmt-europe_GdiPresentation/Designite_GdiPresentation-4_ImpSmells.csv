Implementation smell,Namespace,Class,File,Method,Description
Long Method,GdiPresentation,Grid,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Grid.cs,MeasureOverride,The method has 208 lines of code.
Complex Method,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,OnPaint,Cyclomatic complexity of the method is 12
Complex Method,GdiPresentation,CustomScrollControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\CustomScrollControl.cs,ApplyScrollbarChanges,Cyclomatic complexity of the method is 8
Complex Method,GdiPresentation,CustomScrollControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\CustomScrollControl.cs,SetDisplayRectLocation,Cyclomatic complexity of the method is 9
Complex Method,GdiPresentation,CustomScrollControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\CustomScrollControl.cs,SetDisplayRectangleSize,Cyclomatic complexity of the method is 8
Complex Method,GdiPresentation,CustomScrollControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\CustomScrollControl.cs,WmVScroll,Cyclomatic complexity of the method is 27
Complex Method,GdiPresentation,CustomScrollControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\CustomScrollControl.cs,WmHScroll,Cyclomatic complexity of the method is 27
Complex Method,GdiPresentation,CustomScrollControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\CustomScrollControl.cs,WndProc,Cyclomatic complexity of the method is 18
Complex Method,GdiPresentation,ElementControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\ElementControl.cs,MeasureArrange,Cyclomatic complexity of the method is 23
Complex Method,GdiPresentation,Grid,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Grid.cs,MeasureOverride,Cyclomatic complexity of the method is 44
Complex Method,GdiPresentation,Grid,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Grid.cs,AllocateDesiredSize,Cyclomatic complexity of the method is 14
Complex Method,GdiPresentation,Grid,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Grid.cs,CreateMatrices,Cyclomatic complexity of the method is 10
Complex Method,GdiPresentation,Grid,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Grid.cs,ArrangeOverride,Cyclomatic complexity of the method is 18
Complex Method,GdiPresentation,Grid,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Grid.cs,SaveMeasureResults,Cyclomatic complexity of the method is 9
Complex Method,GdiPresentation,Grid,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Grid.cs,RestoreMeasureResults,Cyclomatic complexity of the method is 9
Complex Method,GdiPresentation,Image,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Image.cs,OnPaint,Cyclomatic complexity of the method is 21
Complex Method,GdiPresentation,StaticPanel,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\StaticPanel.cs,MeasureOverride,Cyclomatic complexity of the method is 9
Complex Method,GdiPresentation,StaticPanel,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\StaticPanel.cs,ArrangeOverride,Cyclomatic complexity of the method is 13
Complex Method,GdiPresentation,TextMeasureCache,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TextMeasureCache.cs,Layout,Cyclomatic complexity of the method is 8
Complex Method,GdiPresentation,TextMeasureCache,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TextMeasureCache.cs,ApplyClipping,Cyclomatic complexity of the method is 11
Complex Method,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,ArrangeOverride,Cyclomatic complexity of the method is 8
Complex Method,GdiPresentation,WordCache,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\WordCache.cs,Render,Cyclomatic complexity of the method is 10
Long Parameter List,GdiPresentation,Grid,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Grid.cs,AssignSize,The method has 6 parameters.
Long Parameter List,GdiPresentation,Grid,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Grid.cs,AssignSize,The method has 6 parameters.
Long Parameter List,GdiPresentation,ObjectUtil,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\ObjectUtil.cs,CombineHashCodes,The method has 5 parameters.
Long Parameter List,GdiPresentation,ObjectUtil,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\ObjectUtil.cs,CombineHashCodes,The method has 6 parameters.
Long Parameter List,GdiPresentation,ObjectUtil,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\ObjectUtil.cs,CombineHashCodes,The method has 7 parameters.
Long Parameter List,GdiPresentation,ObjectUtil,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\ObjectUtil.cs,CombineHashCodes,The method has 8 parameters.
Long Parameter List,GdiPresentation,ObjectUtil,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\ObjectUtil.cs,CombineHashCodes,The method has 9 parameters.
Long Parameter List,GdiPresentation,TextMeasureCache,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TextMeasureCache.cs,BuildWord,The method has 5 parameters.
Long Parameter List,GdiPresentation.Win32,NativeMethods,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Win32\NativeMethods.cs,ScrollWindowEx,The method has 8 parameters.
Long Statement,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,MeasureOverride,The length of the statement  "	var padding = new Size (Padding.Horizontal + _borderThickness.Horizontal' Padding.Vertical + _borderThickness.Vertical); " is 120.
Long Statement,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,ArrangeOverride,The length of the statement  "		Content.Arrange (new Rect (Padding.Left + _borderThickness.Left' Padding.Top + _borderThickness.Top' finalSize.Width - (Padding.Horizontal + _borderThickness.Horizontal)' finalSize.Height - (Padding.Vertical + _borderThickness.Vertical))); " is 239.
Long Statement,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,OnPaint,The length of the statement  "		if (_borderThickness.Left == _borderThickness.Top && _borderThickness.Left == _borderThickness.Right && _borderThickness.Left == _borderThickness.Bottom) { " is 155.
Long Statement,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,OnPaint,The length of the statement  "			var bounds = new Rect (e.Bounds.Left + _borderThickness.Left / 2' e.Bounds.Top + _borderThickness.Left / 2' e.Bounds.Width - _borderThickness.Left' e.Bounds.Height - _borderThickness.Left); " is 189.
Long Statement,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,OnPaint,The length of the statement  "				region.Exclude (new Rectangle (e.Bounds.Left + _borderThickness.Left' e.Bounds.Top + _borderThickness.Top' e.Bounds.Width - _borderThickness.Horizontal' e.Bounds.Height - _borderThickness.Vertical)); " is 199.
Long Statement,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetRoundedRect,The length of the statement  "	if (Math.Max (Math.Max (_cornerRadius.TopLeft' _cornerRadius.TopRight)' Math.Max (_cornerRadius.BottomLeft' _cornerRadius.BottomRight)) >= Math.Min (bounds.Width' bounds.Height) / 2) " is 182.
Long Statement,GdiPresentation,GradientBrush,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Brush.cs,CreateBrush,The length of the statement  "		return new System.Drawing.Drawing2D.LinearGradientBrush ((Rectangle)bounds' (System.Drawing.Color)Color1' (System.Drawing.Color)Color2' Angle); " is 143.
Long Statement,GdiPresentation,GradientBrush,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Brush.cs,CreateBrush,The length of the statement  "		return new System.Drawing.Drawing2D.LinearGradientBrush ((Rectangle)bounds' (System.Drawing.Color)Color1' (System.Drawing.Color)Color2' (System.Drawing.Drawing2D.LinearGradientMode)Mode); " is 187.
Long Statement,GdiPresentation,CornerRadius,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\CornerRadius.cs,Equals,The length of the statement  "	return _topLeft == other._topLeft && _topRight == other._topRight && _bottomLeft == other._bottomLeft && _bottomRight == other._bottomRight; " is 140.
Long Statement,GdiPresentation,CornerRadius,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\CornerRadius.cs,GetHashCode,The length of the statement  "	return ObjectUtil.CombineHashCodes (_topLeft.GetHashCode ()' _topRight.GetHashCode ()' _bottomLeft.GetHashCode ()' _bottomRight.GetHashCode ()); " is 144.
Long Statement,GdiPresentation,CustomScrollControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\CustomScrollControl.cs,ScrollWindow,The length of the statement  "	NativeMethods.ScrollWindowEx (new HandleRef (this' Handle)' xDelta' yDelta' IntPtr.Zero' ref rcClip' IntPtr.Zero' IntPtr.Zero' NativeMethods.SW_INVALIDATE | NativeMethods.SW_SCROLLCHILDREN); " is 190.
Long Statement,GdiPresentation,CustomScrollControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\CustomScrollControl.cs,WmNCPaint,The length of the statement  "		var hdc = NativeMethods.GetDCEx (Handle' m.WParam' NativeMethods.DeviceContextValues.Window | NativeMethods.DeviceContextValues.IntersectRgn); " is 142.
Long Statement,GdiPresentation,CustomScrollControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\CustomScrollControl.cs,GetResizeGripBounds,The length of the statement  "	return new Rectangle (Width - SystemInformation.VerticalScrollBarWidth' Height - SystemInformation.HorizontalScrollBarHeight' SystemInformation.VerticalScrollBarWidth' SystemInformation.HorizontalScrollBarHeight); " is 213.
Long Statement,GdiPresentation,ElementControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\ElementControl.cs,ScrollWindow,The length of the statement  "	(staticPanel.LeftOffset == 0 && staticPanel.TopOffset == 0) || // If we don't have a left panel' no special scroll is necessary " is 127.
Long Statement,GdiPresentation,ElementControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\ElementControl.cs,ScrollWindow,The length of the statement  "		base.ScrollWindow (xDelta' 0' new Rectangle (staticPanel.LeftOffset' 0' client.Width - staticPanel.LeftOffset' client.Height)); " is 127.
Long Statement,GdiPresentation,ElementControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\ElementControl.cs,ScrollWindow,The length of the statement  "		base.ScrollWindow (0' yDelta' new Rectangle (0' staticPanel.TopOffset' client.Width' client.Height - staticPanel.TopOffset)); " is 125.
Long Statement,GdiPresentation,ElementControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\ElementControl.cs,OnPaint,The length of the statement  "		forced = _host.LayoutManager != null && (_host.LayoutManager.PaintBoundsQueue.IsFull || _host.LayoutManager.PaintElementQueue.IsFull); " is 134.
Long Statement,GdiPresentation,ElementControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\ElementControl.cs,OnPaint,The length of the statement  "	_host.RaisePaint (new PaintEventArgs (e.Graphics' new Rect (e.ClipRectangle.Left - scrollOffset.X' e.ClipRectangle.Top - scrollOffset.Y' e.ClipRectangle.Width' e.ClipRectangle.Height))); " is 186.
Long Statement,GdiPresentation,ElementControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\ElementControl.cs,OnPaint,The length of the statement  "		ElementStatistics.AddEvent (ElementStatisticsEventType.Paint | (forced ? ElementStatisticsEventType.Forced : 0)' stopwatch.Elapsed); " is 132.
Long Statement,GdiPresentation,ElementControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\ElementControl.cs,MeasureArrange,The length of the statement  "		ElementStatistics.AddEvent (ElementStatisticsEventType.Measure | (force ? ElementStatisticsEventType.Forced : 0)' stopwatch.Elapsed); " is 133.
Long Statement,GdiPresentation,ElementControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\ElementControl.cs,MeasureArrange,The length of the statement  "		ElementStatistics.AddEvent (ElementStatisticsEventType.Arrange | (force ? ElementStatisticsEventType.Forced : 0)' stopwatch.Elapsed); " is 133.
Long Statement,GdiPresentation,ElementControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\ElementControl.cs,Select,The length of the statement  "		var toSelect = forward ? Content.FindSelfOrNextElement (true/* focusable */' false/* wrap */' true/* forward */) : Content.FindNextElement (true/* focusable */' false/* wrap */' false/* forward */); " is 198.
Long Statement,GdiPresentation,FontCacheManager,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\FontCacheManager.cs,GetPadding,The length of the statement  "		var largeSize = TextRenderer.MeasureText ("  "' font' new System.Drawing.Size (int.MaxValue' int.MaxValue)' WordCache.FormatFlags); " is 131.
Long Statement,GdiPresentation,FontCacheManager,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\FontCacheManager.cs,GetPadding,The length of the statement  "		var smallSize = TextRenderer.MeasureText (" "' font' new System.Drawing.Size (int.MaxValue' int.MaxValue)' WordCache.FormatFlags); " is 130.
Long Statement,GdiPresentation,Grid,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Grid.cs,AssignSize,The length of the statement  "			int newsize = Math.Min (double.IsInfinity (contribution) ? 0 : (int)(segment_size + contribution * (type == ))' matrix [i' i].max); " is 131.
Long Statement,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,ToColor,The length of the statement  "	return System.Drawing.Color.FromArgb (_alpha' (int)Math.Round (255 * r)' (int)Math.Round (255 * g)' (int)Math.Round (255 * b)); " is 127.
Long Statement,GdiPresentation,Image,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Image.cs,OnPaint,The length of the statement  "			e.Graphics.DrawImage (_bitmap' new System.Drawing.Rectangle (e.Bounds.Left + Math.Max ((e.Bounds.Width - targetSize.Width) / 2' 0)' e.Bounds.Top + Math.Max ((e.Bounds.Height - targetSize.Height) / 2' 0)' targetSize.Width' targetSize.Height)); " is 242.
Long Statement,GdiPresentation,ObjectUtil,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\ObjectUtil.cs,CombineHashCodes,The length of the statement  "	return CombineHashCodes (CombineHashCodes (hash1' hash2' hash3' hash4)' CombineHashCodes (CombineHashCodes (hash5' hash6' hash7' hash8)' hash9)); " is 145.
Long Statement,GdiPresentation,Rect,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Rect.cs,GetHashCode,The length of the statement  "	return ObjectUtil.CombineHashCodes (_left.GetHashCode ()' _top.GetHashCode ()' _width.GetHashCode ()' _height.GetHashCode ()); " is 126.
Long Statement,GdiPresentation,Rect,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Rect.cs,IntersectsWith,The length of the statement  "	return other.Left < Left + Width && Left < other.Left + other.Width && other.Top < Top + Height && Top < other.Top + other.Height; " is 130.
Long Statement,GdiPresentation,StackPanel,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\StackPanel.cs,MeasureOverride,The length of the statement  "	var size = Orientation == Orientation.Vertical ? new Size (desiredSize.Width' int.MaxValue) : new Size (int.MaxValue' desiredSize.Height); " is 138.
Long Statement,GdiPresentation,StaticPanel,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\StaticPanel.cs,GetStaticAlignment,The length of the statement  "	return ((StaticAlignment?)element.GetAttachedValue (StaticAlignmentProperty)).GetValueOrDefault (StaticAlignment.Normal); " is 121.
Long Statement,GdiPresentation,StaticPanel,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\StaticPanel.cs,ApplyScroll,The length of the statement  "		if (alignment == StaticAlignment.Normal || (alignment == StaticAlignment.Left && xDelta == 0) || (alignment == StaticAlignment.Top && yDelta == 0)) " is 147.
Long Statement,GdiPresentation,StaticPanel,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\StaticPanel.cs,ApplyScroll,The length of the statement  "		item.Arrange (new Rect (finalRect.Left + (alignment == StaticAlignment.Left ? xDelta : 0)' finalRect.Top + (alignment == StaticAlignment.Top ? yDelta : 0)' finalRect.Width' finalRect.Height)' false/* invalidatePaint */); " is 220.
Long Statement,GdiPresentation,TextBlock,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TextBlock.cs,MeasureOverride,The length of the statement  "		return new Size (Math.Min (desiredSize.Width' _cache.DesiredSize.Width)' Math.Min (desiredSize.Height' _cache.DesiredSize.Height)); " is 131.
Long Statement,GdiPresentation,TextMeasureCache,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TextMeasureCache.cs,BuildRun,The length of the statement  "		run.EllipsisSize = System.Windows.Forms.TextRenderer.MeasureText ("..."' font' new System.Drawing.Size (int.MaxValue' int.MaxValue)' WordCache.FormatFlags).Width; " is 162.
Long Statement,GdiPresentation,Thickness,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Thickness.cs,GetHashCode,The length of the statement  "	return ObjectUtil.CombineHashCodes (_left.GetHashCode ()' _top.GetHashCode ()' _right.GetHashCode ()' _bottom.GetHashCode ()); " is 126.
Long Statement,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,MeasureOverride,The length of the statement  "	return new Size (max + ExpanderWidth + ContainerMargin.Horizontal' sum + (IsExpandedAndHasChildren ? ContainerMargin.Vertical : 0)); " is 132.
Long Statement,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,ArrangeChild,The length of the statement  "	var bounds = new Rect (ExpanderWidth' sum' finalSize.Width - ExpanderWidth' Math.Min (item.DesiredSize.Height' finalSize.Height - sum)); " is 136.
Long Statement,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,ArrangeChild,The length of the statement  "		bounds = new Rect (bounds.Left + ContainerMargin.Left' bounds.Top' bounds.Width - ContainerMargin.Horizontal' bounds.Height); " is 125.
Long Statement,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The length of the statement  "		e.Graphics.DrawLine (pen' left + (toggleOffset.Y % 2 == 0 ? 0 : 1)' toggleOffset.Y + 4' e.Bounds.Left + ExpanderWidth' toggleOffset.Y + 4); " is 139.
Long Statement,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The length of the statement  "	e.Graphics.DrawLine (SystemPens.ControlText' toggleOffset.X + 2' toggleOffset.Y + 4' toggleOffset.X + 6' toggleOffset.Y + 4); " is 125.
Long Statement,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The length of the statement  "		e.Graphics.DrawLine (SystemPens.ControlText' toggleOffset.X + 4' toggleOffset.Y + 2' toggleOffset.X + 4' toggleOffset.Y + 6); " is 125.
Long Statement,GdiPresentation,WordCache,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\WordCache.cs,Render,The length of the statement  "	var bounds = new Rectangle (e.Bounds.X + Location.X' e.Bounds.Y + Location.Y' e.Bounds.Width - Location.X' Math.Min (Size.Height' e.Bounds.Height - Location.Y)); " is 161.
Long Statement,GdiPresentation,WordCache,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\WordCache.cs,Render,The length of the statement  "	TextRenderer.DrawText (e.Graphics' text' Font' bounds' (System.Drawing.Color)foreColor' System.Drawing.Color.Transparent' format); " is 130.
Complex Conditional,GdiPresentation,CustomScrollControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\CustomScrollControl.cs,WmNCLButtonDown,The conditional expression  "!(_allowResize && HScroll && VScroll) || ResizeTarget == null || !GetResizeGripBounds ().Contains (location)"  is complex.
Complex Conditional,GdiPresentation,ElementControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\ElementControl.cs,ScrollWindow,The conditional expression  "staticPanel == null || // If we don't have panels' we don't have to scroll specially.  (staticPanel.LeftOffset == 0 && staticPanel.TopOffset == 0) || // If we don't have a left panel' no special scroll is necessary  // when scrolling horizontally.  (staticPanel.LeftOffset == 0 && yDelta == 0) || // If we don't have a top panel' no special scroll is necessary  // when scrolling vertically.  (staticPanel.TopOffset == 0 && xDelta == 0)"  is complex.
Complex Conditional,GdiPresentation,ElementUtil,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\ElementUtil.cs,FindAtLocation,The conditional expression  "location.X >= 0 && location.Y >= 0 && location.X <= element.ActualWidth && location.Y <= element.ActualHeight"  is complex.
Complex Conditional,GdiPresentation,Grid,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Grid.cs,MeasureOverride,The conditional expression  "auto_row && auto_col && !star_row && !star_col"  is complex.
Complex Conditional,GdiPresentation,Grid,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Grid.cs,MeasureOverride,The conditional expression  "(auto_row || auto_col) && !(star_row || star_col)"  is complex.
Complex Conditional,GdiPresentation,Grid,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Grid.cs,CreateMatrices,The conditional expression  "row_matrix == null || col_matrix == null || row_matrix_dim != row_count || col_matrix_dim != col_count"  is complex.
Complex Conditional,GdiPresentation,StaticPanel,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\StaticPanel.cs,ApplyScroll,The conditional expression  "alignment == StaticAlignment.Normal || (alignment == StaticAlignment.Left && xDelta == 0) || (alignment == StaticAlignment.Top && yDelta == 0)"  is complex.
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,OnPaint,The following statement contains a magic number: using (var brush = _borderBrush.CreateBrush (e.Bounds)) {  	// Simple case for a single rectangle.  	if (_borderThickness.Left == _borderThickness.Top && _borderThickness.Left == _borderThickness.Right && _borderThickness.Left == _borderThickness.Bottom) {  		var bounds = new Rect (e.Bounds.Left + _borderThickness.Left / 2' e.Bounds.Top + _borderThickness.Left / 2' e.Bounds.Width - _borderThickness.Left' e.Bounds.Height - _borderThickness.Left);  		using (var pen = new Pen (brush' _borderThickness.Left)) {  			if (_cornerRadius.IsEmpty) {  				e.Graphics.DrawRectangle (pen' (Rectangle)bounds);  			}  			else {  				using (var path = GetRoundedRect (bounds)) {  					var smoothingMode = e.Graphics.SmoothingMode;  					try {  						e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;  						e.Graphics.DrawPath (pen' path);  					}  					finally {  						e.Graphics.SmoothingMode = smoothingMode;  					}  				}  			}  		}  	}  	else {  		if (!_cornerRadius.IsEmpty)  			throw new InvalidOperationException ("Invalid corner radius for thickness");  		// Otherwise' we need to do a little bit more complex  		// calculations.  		using (var region = new Region ((Rectangle)e.Bounds)) {  			region.Exclude (new Rectangle (e.Bounds.Left + _borderThickness.Left' e.Bounds.Top + _borderThickness.Top' e.Bounds.Width - _borderThickness.Horizontal' e.Bounds.Height - _borderThickness.Vertical));  			e.Graphics.FillRegion (brush' region);  		}  	}  }  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,OnPaint,The following statement contains a magic number: using (var brush = _borderBrush.CreateBrush (e.Bounds)) {  	// Simple case for a single rectangle.  	if (_borderThickness.Left == _borderThickness.Top && _borderThickness.Left == _borderThickness.Right && _borderThickness.Left == _borderThickness.Bottom) {  		var bounds = new Rect (e.Bounds.Left + _borderThickness.Left / 2' e.Bounds.Top + _borderThickness.Left / 2' e.Bounds.Width - _borderThickness.Left' e.Bounds.Height - _borderThickness.Left);  		using (var pen = new Pen (brush' _borderThickness.Left)) {  			if (_cornerRadius.IsEmpty) {  				e.Graphics.DrawRectangle (pen' (Rectangle)bounds);  			}  			else {  				using (var path = GetRoundedRect (bounds)) {  					var smoothingMode = e.Graphics.SmoothingMode;  					try {  						e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;  						e.Graphics.DrawPath (pen' path);  					}  					finally {  						e.Graphics.SmoothingMode = smoothingMode;  					}  				}  			}  		}  	}  	else {  		if (!_cornerRadius.IsEmpty)  			throw new InvalidOperationException ("Invalid corner radius for thickness");  		// Otherwise' we need to do a little bit more complex  		// calculations.  		using (var region = new Region ((Rectangle)e.Bounds)) {  			region.Exclude (new Rectangle (e.Bounds.Left + _borderThickness.Left' e.Bounds.Top + _borderThickness.Top' e.Bounds.Width - _borderThickness.Horizontal' e.Bounds.Height - _borderThickness.Vertical));  			e.Graphics.FillRegion (brush' region);  		}  	}  }  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,OnPaint,The following statement contains a magic number: if (_borderThickness.Left == _borderThickness.Top && _borderThickness.Left == _borderThickness.Right && _borderThickness.Left == _borderThickness.Bottom) {  	var bounds = new Rect (e.Bounds.Left + _borderThickness.Left / 2' e.Bounds.Top + _borderThickness.Left / 2' e.Bounds.Width - _borderThickness.Left' e.Bounds.Height - _borderThickness.Left);  	using (var pen = new Pen (brush' _borderThickness.Left)) {  		if (_cornerRadius.IsEmpty) {  			e.Graphics.DrawRectangle (pen' (Rectangle)bounds);  		}  		else {  			using (var path = GetRoundedRect (bounds)) {  				var smoothingMode = e.Graphics.SmoothingMode;  				try {  					e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;  					e.Graphics.DrawPath (pen' path);  				}  				finally {  					e.Graphics.SmoothingMode = smoothingMode;  				}  			}  		}  	}  }  else {  	if (!_cornerRadius.IsEmpty)  		throw new InvalidOperationException ("Invalid corner radius for thickness");  	// Otherwise' we need to do a little bit more complex  	// calculations.  	using (var region = new Region ((Rectangle)e.Bounds)) {  		region.Exclude (new Rectangle (e.Bounds.Left + _borderThickness.Left' e.Bounds.Top + _borderThickness.Top' e.Bounds.Width - _borderThickness.Horizontal' e.Bounds.Height - _borderThickness.Vertical));  		e.Graphics.FillRegion (brush' region);  	}  }  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,OnPaint,The following statement contains a magic number: if (_borderThickness.Left == _borderThickness.Top && _borderThickness.Left == _borderThickness.Right && _borderThickness.Left == _borderThickness.Bottom) {  	var bounds = new Rect (e.Bounds.Left + _borderThickness.Left / 2' e.Bounds.Top + _borderThickness.Left / 2' e.Bounds.Width - _borderThickness.Left' e.Bounds.Height - _borderThickness.Left);  	using (var pen = new Pen (brush' _borderThickness.Left)) {  		if (_cornerRadius.IsEmpty) {  			e.Graphics.DrawRectangle (pen' (Rectangle)bounds);  		}  		else {  			using (var path = GetRoundedRect (bounds)) {  				var smoothingMode = e.Graphics.SmoothingMode;  				try {  					e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;  					e.Graphics.DrawPath (pen' path);  				}  				finally {  					e.Graphics.SmoothingMode = smoothingMode;  				}  			}  		}  	}  }  else {  	if (!_cornerRadius.IsEmpty)  		throw new InvalidOperationException ("Invalid corner radius for thickness");  	// Otherwise' we need to do a little bit more complex  	// calculations.  	using (var region = new Region ((Rectangle)e.Bounds)) {  		region.Exclude (new Rectangle (e.Bounds.Left + _borderThickness.Left' e.Bounds.Top + _borderThickness.Top' e.Bounds.Width - _borderThickness.Horizontal' e.Bounds.Height - _borderThickness.Vertical));  		e.Graphics.FillRegion (brush' region);  	}  }  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetRoundedRect,The following statement contains a magic number: if (Math.Max (Math.Max (_cornerRadius.TopLeft' _cornerRadius.TopRight)' Math.Max (_cornerRadius.BottomLeft' _cornerRadius.BottomRight)) >= Math.Min (bounds.Width' bounds.Height) / 2)  	return GetCapsule (bounds);  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (bounds.X' bounds.Y' topLeft' topLeft' 180' 90);  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (bounds.X' bounds.Y' topLeft' topLeft' 180' 90);  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (bounds.Right - topRight' bounds.Y' topRight' topRight' 270' 90);  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (bounds.Right - topRight' bounds.Y' topRight' topRight' 270' 90);  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (bounds.Right - bottomRight' bounds.Bottom - bottomRight' bottomRight' bottomRight' 0' 90);  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (bounds.X' bounds.Bottom - bottomLeft' bottomLeft' bottomLeft' 90' 90);  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (bounds.X' bounds.Bottom - bottomLeft' bottomLeft' bottomLeft' 90' 90);  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: try {  	if (bounds.Width > bounds.Height) {  		// Horizontal capsule.  		path.AddArc (bounds.X' bounds.Y' bounds.Height' bounds.Height' 90' 180);  		path.AddArc (bounds.Right - bounds.Height' bounds.Y' bounds.Height' bounds.Height' 270' 180);  	}  	else if (bounds.Width < bounds.Height) {  		// Vertical capsule.  		path.AddArc (bounds.X' bounds.Y' bounds.Width' bounds.Width' 180' 180);  		path.AddArc (bounds.X' bounds.Bottom - bounds.Width' bounds.Width' bounds.Width' 0' 180);  	}  	else {  		success = false;  	}  }  catch {  	success = false;  }  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: try {  	if (bounds.Width > bounds.Height) {  		// Horizontal capsule.  		path.AddArc (bounds.X' bounds.Y' bounds.Height' bounds.Height' 90' 180);  		path.AddArc (bounds.Right - bounds.Height' bounds.Y' bounds.Height' bounds.Height' 270' 180);  	}  	else if (bounds.Width < bounds.Height) {  		// Vertical capsule.  		path.AddArc (bounds.X' bounds.Y' bounds.Width' bounds.Width' 180' 180);  		path.AddArc (bounds.X' bounds.Bottom - bounds.Width' bounds.Width' bounds.Width' 0' 180);  	}  	else {  		success = false;  	}  }  catch {  	success = false;  }  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: try {  	if (bounds.Width > bounds.Height) {  		// Horizontal capsule.  		path.AddArc (bounds.X' bounds.Y' bounds.Height' bounds.Height' 90' 180);  		path.AddArc (bounds.Right - bounds.Height' bounds.Y' bounds.Height' bounds.Height' 270' 180);  	}  	else if (bounds.Width < bounds.Height) {  		// Vertical capsule.  		path.AddArc (bounds.X' bounds.Y' bounds.Width' bounds.Width' 180' 180);  		path.AddArc (bounds.X' bounds.Bottom - bounds.Width' bounds.Width' bounds.Width' 0' 180);  	}  	else {  		success = false;  	}  }  catch {  	success = false;  }  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: try {  	if (bounds.Width > bounds.Height) {  		// Horizontal capsule.  		path.AddArc (bounds.X' bounds.Y' bounds.Height' bounds.Height' 90' 180);  		path.AddArc (bounds.Right - bounds.Height' bounds.Y' bounds.Height' bounds.Height' 270' 180);  	}  	else if (bounds.Width < bounds.Height) {  		// Vertical capsule.  		path.AddArc (bounds.X' bounds.Y' bounds.Width' bounds.Width' 180' 180);  		path.AddArc (bounds.X' bounds.Bottom - bounds.Width' bounds.Width' bounds.Width' 0' 180);  	}  	else {  		success = false;  	}  }  catch {  	success = false;  }  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: try {  	if (bounds.Width > bounds.Height) {  		// Horizontal capsule.  		path.AddArc (bounds.X' bounds.Y' bounds.Height' bounds.Height' 90' 180);  		path.AddArc (bounds.Right - bounds.Height' bounds.Y' bounds.Height' bounds.Height' 270' 180);  	}  	else if (bounds.Width < bounds.Height) {  		// Vertical capsule.  		path.AddArc (bounds.X' bounds.Y' bounds.Width' bounds.Width' 180' 180);  		path.AddArc (bounds.X' bounds.Bottom - bounds.Width' bounds.Width' bounds.Width' 0' 180);  	}  	else {  		success = false;  	}  }  catch {  	success = false;  }  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: try {  	if (bounds.Width > bounds.Height) {  		// Horizontal capsule.  		path.AddArc (bounds.X' bounds.Y' bounds.Height' bounds.Height' 90' 180);  		path.AddArc (bounds.Right - bounds.Height' bounds.Y' bounds.Height' bounds.Height' 270' 180);  	}  	else if (bounds.Width < bounds.Height) {  		// Vertical capsule.  		path.AddArc (bounds.X' bounds.Y' bounds.Width' bounds.Width' 180' 180);  		path.AddArc (bounds.X' bounds.Bottom - bounds.Width' bounds.Width' bounds.Width' 0' 180);  	}  	else {  		success = false;  	}  }  catch {  	success = false;  }  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: try {  	if (bounds.Width > bounds.Height) {  		// Horizontal capsule.  		path.AddArc (bounds.X' bounds.Y' bounds.Height' bounds.Height' 90' 180);  		path.AddArc (bounds.Right - bounds.Height' bounds.Y' bounds.Height' bounds.Height' 270' 180);  	}  	else if (bounds.Width < bounds.Height) {  		// Vertical capsule.  		path.AddArc (bounds.X' bounds.Y' bounds.Width' bounds.Width' 180' 180);  		path.AddArc (bounds.X' bounds.Bottom - bounds.Width' bounds.Width' bounds.Width' 0' 180);  	}  	else {  		success = false;  	}  }  catch {  	success = false;  }  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: if (bounds.Width > bounds.Height) {  	// Horizontal capsule.  	path.AddArc (bounds.X' bounds.Y' bounds.Height' bounds.Height' 90' 180);  	path.AddArc (bounds.Right - bounds.Height' bounds.Y' bounds.Height' bounds.Height' 270' 180);  }  else if (bounds.Width < bounds.Height) {  	// Vertical capsule.  	path.AddArc (bounds.X' bounds.Y' bounds.Width' bounds.Width' 180' 180);  	path.AddArc (bounds.X' bounds.Bottom - bounds.Width' bounds.Width' bounds.Width' 0' 180);  }  else {  	success = false;  }  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: if (bounds.Width > bounds.Height) {  	// Horizontal capsule.  	path.AddArc (bounds.X' bounds.Y' bounds.Height' bounds.Height' 90' 180);  	path.AddArc (bounds.Right - bounds.Height' bounds.Y' bounds.Height' bounds.Height' 270' 180);  }  else if (bounds.Width < bounds.Height) {  	// Vertical capsule.  	path.AddArc (bounds.X' bounds.Y' bounds.Width' bounds.Width' 180' 180);  	path.AddArc (bounds.X' bounds.Bottom - bounds.Width' bounds.Width' bounds.Width' 0' 180);  }  else {  	success = false;  }  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: if (bounds.Width > bounds.Height) {  	// Horizontal capsule.  	path.AddArc (bounds.X' bounds.Y' bounds.Height' bounds.Height' 90' 180);  	path.AddArc (bounds.Right - bounds.Height' bounds.Y' bounds.Height' bounds.Height' 270' 180);  }  else if (bounds.Width < bounds.Height) {  	// Vertical capsule.  	path.AddArc (bounds.X' bounds.Y' bounds.Width' bounds.Width' 180' 180);  	path.AddArc (bounds.X' bounds.Bottom - bounds.Width' bounds.Width' bounds.Width' 0' 180);  }  else {  	success = false;  }  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: if (bounds.Width > bounds.Height) {  	// Horizontal capsule.  	path.AddArc (bounds.X' bounds.Y' bounds.Height' bounds.Height' 90' 180);  	path.AddArc (bounds.Right - bounds.Height' bounds.Y' bounds.Height' bounds.Height' 270' 180);  }  else if (bounds.Width < bounds.Height) {  	// Vertical capsule.  	path.AddArc (bounds.X' bounds.Y' bounds.Width' bounds.Width' 180' 180);  	path.AddArc (bounds.X' bounds.Bottom - bounds.Width' bounds.Width' bounds.Width' 0' 180);  }  else {  	success = false;  }  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: if (bounds.Width > bounds.Height) {  	// Horizontal capsule.  	path.AddArc (bounds.X' bounds.Y' bounds.Height' bounds.Height' 90' 180);  	path.AddArc (bounds.Right - bounds.Height' bounds.Y' bounds.Height' bounds.Height' 270' 180);  }  else if (bounds.Width < bounds.Height) {  	// Vertical capsule.  	path.AddArc (bounds.X' bounds.Y' bounds.Width' bounds.Width' 180' 180);  	path.AddArc (bounds.X' bounds.Bottom - bounds.Width' bounds.Width' bounds.Width' 0' 180);  }  else {  	success = false;  }  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: if (bounds.Width > bounds.Height) {  	// Horizontal capsule.  	path.AddArc (bounds.X' bounds.Y' bounds.Height' bounds.Height' 90' 180);  	path.AddArc (bounds.Right - bounds.Height' bounds.Y' bounds.Height' bounds.Height' 270' 180);  }  else if (bounds.Width < bounds.Height) {  	// Vertical capsule.  	path.AddArc (bounds.X' bounds.Y' bounds.Width' bounds.Width' 180' 180);  	path.AddArc (bounds.X' bounds.Bottom - bounds.Width' bounds.Width' bounds.Width' 0' 180);  }  else {  	success = false;  }  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: if (bounds.Width > bounds.Height) {  	// Horizontal capsule.  	path.AddArc (bounds.X' bounds.Y' bounds.Height' bounds.Height' 90' 180);  	path.AddArc (bounds.Right - bounds.Height' bounds.Y' bounds.Height' bounds.Height' 270' 180);  }  else if (bounds.Width < bounds.Height) {  	// Vertical capsule.  	path.AddArc (bounds.X' bounds.Y' bounds.Width' bounds.Width' 180' 180);  	path.AddArc (bounds.X' bounds.Bottom - bounds.Width' bounds.Width' bounds.Width' 0' 180);  }  else {  	success = false;  }  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: path.AddArc (bounds.X' bounds.Y' bounds.Height' bounds.Height' 90' 180);  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: path.AddArc (bounds.X' bounds.Y' bounds.Height' bounds.Height' 90' 180);  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: path.AddArc (bounds.Right - bounds.Height' bounds.Y' bounds.Height' bounds.Height' 270' 180);  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: path.AddArc (bounds.Right - bounds.Height' bounds.Y' bounds.Height' bounds.Height' 270' 180);  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: if (bounds.Width < bounds.Height) {  	// Vertical capsule.  	path.AddArc (bounds.X' bounds.Y' bounds.Width' bounds.Width' 180' 180);  	path.AddArc (bounds.X' bounds.Bottom - bounds.Width' bounds.Width' bounds.Width' 0' 180);  }  else {  	success = false;  }  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: if (bounds.Width < bounds.Height) {  	// Vertical capsule.  	path.AddArc (bounds.X' bounds.Y' bounds.Width' bounds.Width' 180' 180);  	path.AddArc (bounds.X' bounds.Bottom - bounds.Width' bounds.Width' bounds.Width' 0' 180);  }  else {  	success = false;  }  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: if (bounds.Width < bounds.Height) {  	// Vertical capsule.  	path.AddArc (bounds.X' bounds.Y' bounds.Width' bounds.Width' 180' 180);  	path.AddArc (bounds.X' bounds.Bottom - bounds.Width' bounds.Width' bounds.Width' 0' 180);  }  else {  	success = false;  }  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: path.AddArc (bounds.X' bounds.Y' bounds.Width' bounds.Width' 180' 180);  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: path.AddArc (bounds.X' bounds.Y' bounds.Width' bounds.Width' 180' 180);  
Magic Number,GdiPresentation,Border,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Border.cs,GetCapsule,The following statement contains a magic number: path.AddArc (bounds.X' bounds.Bottom - bounds.Width' bounds.Width' bounds.Width' 0' 180);  
Magic Number,GdiPresentation,CustomScrollControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\CustomScrollControl.cs,SyncScrollbars,The following statement contains a magic number: if (HScroll) {  	_horizontalScroll.Maximum = displayRect.Width - 1;  	_horizontalScroll.LargeChange = ClientRectangle.Width;  	_horizontalScroll.SmallChange = 5;  	if (-displayRect.X >= 0 && -displayRect.X < _horizontalScroll.Maximum)  		_horizontalScroll.Value = -displayRect.X;  	_horizontalScroll.UpdateScrollInfo ();  }  
Magic Number,GdiPresentation,CustomScrollControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\CustomScrollControl.cs,SyncScrollbars,The following statement contains a magic number: _horizontalScroll.SmallChange = 5;  
Magic Number,GdiPresentation,CustomScrollControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\CustomScrollControl.cs,SyncScrollbars,The following statement contains a magic number: if (VScroll) {  	_verticalScroll.Maximum = displayRect.Height - 1;  	_verticalScroll.LargeChange = ClientRectangle.Height;  	_verticalScroll.SmallChange = 5;  	if (-displayRect.Y >= 0 && -displayRect.Y < _verticalScroll.Maximum)  		_verticalScroll.Value = -displayRect.Y;  	_verticalScroll.UpdateScrollInfo ();  }  
Magic Number,GdiPresentation,CustomScrollControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\CustomScrollControl.cs,SyncScrollbars,The following statement contains a magic number: _verticalScroll.SmallChange = 5;  
Magic Number,GdiPresentation,Grid,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Grid.cs,MeasureOverride,The following statement contains a magic number: for (int i = 0; i < 6; i++) {  	// These bools tell us which grid element type we should be measuring. i.e.  	// 'star/auto' means we should measure elements with a star row and auto col  	bool auto_auto = i == 0;  	bool star_auto = i == 1;  	bool auto_star = i == 2;  	bool star_auto_again = i == 3;  	bool non_star = i == 4;  	bool remaining_star = i == 5;  	if (hasChildren) {  		ExpandStarCols (totalSize);  		ExpandStarRows (totalSize);  	}  	for (int j = 0' count = Children.Count; j < count; j++) {  		var child = Children [j];  		int col' row;  		int colspan' rowspan;  		Size child_size = new Size (0' 0);  		bool star_col = false;  		bool star_row = false;  		bool auto_col = false;  		bool auto_row = false;  		col = Math.Min (GetColumn (child)' col_count - 1);  		row = Math.Min (GetRow (child)' row_count - 1);  		colspan = Math.Min (GetColumnSpan (child)' col_count - col);  		rowspan = Math.Min (GetRowSpan (child)' row_count - row);  		for (int r = row; r < row + rowspan; r++) {  			star_row |= row_matrix [r' r].type == GridUnitType.Star;  			auto_row |= row_matrix [r' r].type == GridUnitType.Auto;  		}  		for (int c = col; c < col + colspan; c++) {  			star_col |= col_matrix [c' c].type == GridUnitType.Star;  			auto_col |= col_matrix [c' c].type == GridUnitType.Auto;  		}  		// This series of if statements checks whether or not we should measure  		// the current element and also if we need to override the sizes  		// passed to the Measure call.   		// If the element has Auto rows and Auto columns and does not span Star  		// rows/cols it should only be measured in the auto_auto phase.  		// There are similar rules governing auto/star and star/auto elements.  		// NOTE: star/auto elements are measured twice. The first time with  		// an override for height' the second time without it.  		if (auto_row && auto_col && !star_row && !star_col) {  			if (!auto_auto)  				continue;  			child_size.Width = int.MaxValue;  			child_size.Height = int.MaxValue;  		}  		else if (star_row && auto_col && !star_col) {  			if (!(star_auto || star_auto_again))  				continue;  			if (star_auto && grid_walker.HasAutoStar ())  				child_size.Height = int.MaxValue;  			child_size.Width = int.MaxValue;  		}  		else if (auto_row && star_col && !star_row) {  			if (!auto_star)  				continue;  			child_size.Height = int.MaxValue;  		}  		else if ((auto_row || auto_col) && !(star_row || star_col)) {  			if (!non_star)  				continue;  			if (auto_row)  				child_size.Height = int.MaxValue;  			if (auto_col)  				child_size.Width = int.MaxValue;  		}  		else if (!(star_row || star_col)) {  			if (!non_star)  				continue;  		}  		else {  			if (!remaining_star)  				continue;  		}  		for (int r = row; r < row + rowspan; r++) {  			child_size.Height += row_matrix [r' r].offered_size;  		}  		for (int c = col; c < col + colspan; c++) {  			child_size.Width += col_matrix [c' c].offered_size;  		}  		child.Measure (child_size);  		Size desired = child.DesiredSize;  		// Elements distribute their height based on two rules:  		// 1) Elements with rowspan/colspan == 1 distribute their height first  		// 2) Everything else distributes in a LIFO manner.  		// As such' add all UIElements with rowspan/colspan == 1 after the separator in  		// the list and everything else before it. Then to process' just keep popping  		// elements off the end of the list.  		if (!star_auto) {  			node = new GridNode (row_matrix' row + rowspan - 1' row' desired.Height);  			if (node.row == node.col) {  				if (separator.Next == null)  					sizes.AddLast (node);  				else  					sizes.AddBefore (separator.Next' node);  			}  			else {  				sizes.AddBefore (separator' node);  			}  		}  		node = new GridNode (col_matrix' col + colspan - 1' col' desired.Width);  		if (node.row == node.col) {  			if (separator.Next == null)  				sizes.AddLast (node);  			else  				sizes.AddBefore (separator.Next' node);  		}  		else {  			sizes.AddBefore (separator' node);  		}  	}  	sizes.Remove (separator);  	LinkedListNode<GridNode> list_node;  	while ((list_node = sizes.Last) != null) {  		node = list_node.Value;  		node.matrix [node.row' node.col].desired_size = Math.Max (node.matrix [node.row' node.col].desired_size' node.size);  		AllocateDesiredSize (row_count' col_count);  		sizes.RemoveLast ();  	}  	sizes.AddLast (separator);  }  
Magic Number,GdiPresentation,Grid,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Grid.cs,MeasureOverride,The following statement contains a magic number: for (int i = 0; i < 6; i++) {  	// These bools tell us which grid element type we should be measuring. i.e.  	// 'star/auto' means we should measure elements with a star row and auto col  	bool auto_auto = i == 0;  	bool star_auto = i == 1;  	bool auto_star = i == 2;  	bool star_auto_again = i == 3;  	bool non_star = i == 4;  	bool remaining_star = i == 5;  	if (hasChildren) {  		ExpandStarCols (totalSize);  		ExpandStarRows (totalSize);  	}  	for (int j = 0' count = Children.Count; j < count; j++) {  		var child = Children [j];  		int col' row;  		int colspan' rowspan;  		Size child_size = new Size (0' 0);  		bool star_col = false;  		bool star_row = false;  		bool auto_col = false;  		bool auto_row = false;  		col = Math.Min (GetColumn (child)' col_count - 1);  		row = Math.Min (GetRow (child)' row_count - 1);  		colspan = Math.Min (GetColumnSpan (child)' col_count - col);  		rowspan = Math.Min (GetRowSpan (child)' row_count - row);  		for (int r = row; r < row + rowspan; r++) {  			star_row |= row_matrix [r' r].type == GridUnitType.Star;  			auto_row |= row_matrix [r' r].type == GridUnitType.Auto;  		}  		for (int c = col; c < col + colspan; c++) {  			star_col |= col_matrix [c' c].type == GridUnitType.Star;  			auto_col |= col_matrix [c' c].type == GridUnitType.Auto;  		}  		// This series of if statements checks whether or not we should measure  		// the current element and also if we need to override the sizes  		// passed to the Measure call.   		// If the element has Auto rows and Auto columns and does not span Star  		// rows/cols it should only be measured in the auto_auto phase.  		// There are similar rules governing auto/star and star/auto elements.  		// NOTE: star/auto elements are measured twice. The first time with  		// an override for height' the second time without it.  		if (auto_row && auto_col && !star_row && !star_col) {  			if (!auto_auto)  				continue;  			child_size.Width = int.MaxValue;  			child_size.Height = int.MaxValue;  		}  		else if (star_row && auto_col && !star_col) {  			if (!(star_auto || star_auto_again))  				continue;  			if (star_auto && grid_walker.HasAutoStar ())  				child_size.Height = int.MaxValue;  			child_size.Width = int.MaxValue;  		}  		else if (auto_row && star_col && !star_row) {  			if (!auto_star)  				continue;  			child_size.Height = int.MaxValue;  		}  		else if ((auto_row || auto_col) && !(star_row || star_col)) {  			if (!non_star)  				continue;  			if (auto_row)  				child_size.Height = int.MaxValue;  			if (auto_col)  				child_size.Width = int.MaxValue;  		}  		else if (!(star_row || star_col)) {  			if (!non_star)  				continue;  		}  		else {  			if (!remaining_star)  				continue;  		}  		for (int r = row; r < row + rowspan; r++) {  			child_size.Height += row_matrix [r' r].offered_size;  		}  		for (int c = col; c < col + colspan; c++) {  			child_size.Width += col_matrix [c' c].offered_size;  		}  		child.Measure (child_size);  		Size desired = child.DesiredSize;  		// Elements distribute their height based on two rules:  		// 1) Elements with rowspan/colspan == 1 distribute their height first  		// 2) Everything else distributes in a LIFO manner.  		// As such' add all UIElements with rowspan/colspan == 1 after the separator in  		// the list and everything else before it. Then to process' just keep popping  		// elements off the end of the list.  		if (!star_auto) {  			node = new GridNode (row_matrix' row + rowspan - 1' row' desired.Height);  			if (node.row == node.col) {  				if (separator.Next == null)  					sizes.AddLast (node);  				else  					sizes.AddBefore (separator.Next' node);  			}  			else {  				sizes.AddBefore (separator' node);  			}  		}  		node = new GridNode (col_matrix' col + colspan - 1' col' desired.Width);  		if (node.row == node.col) {  			if (separator.Next == null)  				sizes.AddLast (node);  			else  				sizes.AddBefore (separator.Next' node);  		}  		else {  			sizes.AddBefore (separator' node);  		}  	}  	sizes.Remove (separator);  	LinkedListNode<GridNode> list_node;  	while ((list_node = sizes.Last) != null) {  		node = list_node.Value;  		node.matrix [node.row' node.col].desired_size = Math.Max (node.matrix [node.row' node.col].desired_size' node.size);  		AllocateDesiredSize (row_count' col_count);  		sizes.RemoveLast ();  	}  	sizes.AddLast (separator);  }  
Magic Number,GdiPresentation,Grid,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Grid.cs,MeasureOverride,The following statement contains a magic number: for (int i = 0; i < 6; i++) {  	// These bools tell us which grid element type we should be measuring. i.e.  	// 'star/auto' means we should measure elements with a star row and auto col  	bool auto_auto = i == 0;  	bool star_auto = i == 1;  	bool auto_star = i == 2;  	bool star_auto_again = i == 3;  	bool non_star = i == 4;  	bool remaining_star = i == 5;  	if (hasChildren) {  		ExpandStarCols (totalSize);  		ExpandStarRows (totalSize);  	}  	for (int j = 0' count = Children.Count; j < count; j++) {  		var child = Children [j];  		int col' row;  		int colspan' rowspan;  		Size child_size = new Size (0' 0);  		bool star_col = false;  		bool star_row = false;  		bool auto_col = false;  		bool auto_row = false;  		col = Math.Min (GetColumn (child)' col_count - 1);  		row = Math.Min (GetRow (child)' row_count - 1);  		colspan = Math.Min (GetColumnSpan (child)' col_count - col);  		rowspan = Math.Min (GetRowSpan (child)' row_count - row);  		for (int r = row; r < row + rowspan; r++) {  			star_row |= row_matrix [r' r].type == GridUnitType.Star;  			auto_row |= row_matrix [r' r].type == GridUnitType.Auto;  		}  		for (int c = col; c < col + colspan; c++) {  			star_col |= col_matrix [c' c].type == GridUnitType.Star;  			auto_col |= col_matrix [c' c].type == GridUnitType.Auto;  		}  		// This series of if statements checks whether or not we should measure  		// the current element and also if we need to override the sizes  		// passed to the Measure call.   		// If the element has Auto rows and Auto columns and does not span Star  		// rows/cols it should only be measured in the auto_auto phase.  		// There are similar rules governing auto/star and star/auto elements.  		// NOTE: star/auto elements are measured twice. The first time with  		// an override for height' the second time without it.  		if (auto_row && auto_col && !star_row && !star_col) {  			if (!auto_auto)  				continue;  			child_size.Width = int.MaxValue;  			child_size.Height = int.MaxValue;  		}  		else if (star_row && auto_col && !star_col) {  			if (!(star_auto || star_auto_again))  				continue;  			if (star_auto && grid_walker.HasAutoStar ())  				child_size.Height = int.MaxValue;  			child_size.Width = int.MaxValue;  		}  		else if (auto_row && star_col && !star_row) {  			if (!auto_star)  				continue;  			child_size.Height = int.MaxValue;  		}  		else if ((auto_row || auto_col) && !(star_row || star_col)) {  			if (!non_star)  				continue;  			if (auto_row)  				child_size.Height = int.MaxValue;  			if (auto_col)  				child_size.Width = int.MaxValue;  		}  		else if (!(star_row || star_col)) {  			if (!non_star)  				continue;  		}  		else {  			if (!remaining_star)  				continue;  		}  		for (int r = row; r < row + rowspan; r++) {  			child_size.Height += row_matrix [r' r].offered_size;  		}  		for (int c = col; c < col + colspan; c++) {  			child_size.Width += col_matrix [c' c].offered_size;  		}  		child.Measure (child_size);  		Size desired = child.DesiredSize;  		// Elements distribute their height based on two rules:  		// 1) Elements with rowspan/colspan == 1 distribute their height first  		// 2) Everything else distributes in a LIFO manner.  		// As such' add all UIElements with rowspan/colspan == 1 after the separator in  		// the list and everything else before it. Then to process' just keep popping  		// elements off the end of the list.  		if (!star_auto) {  			node = new GridNode (row_matrix' row + rowspan - 1' row' desired.Height);  			if (node.row == node.col) {  				if (separator.Next == null)  					sizes.AddLast (node);  				else  					sizes.AddBefore (separator.Next' node);  			}  			else {  				sizes.AddBefore (separator' node);  			}  		}  		node = new GridNode (col_matrix' col + colspan - 1' col' desired.Width);  		if (node.row == node.col) {  			if (separator.Next == null)  				sizes.AddLast (node);  			else  				sizes.AddBefore (separator.Next' node);  		}  		else {  			sizes.AddBefore (separator' node);  		}  	}  	sizes.Remove (separator);  	LinkedListNode<GridNode> list_node;  	while ((list_node = sizes.Last) != null) {  		node = list_node.Value;  		node.matrix [node.row' node.col].desired_size = Math.Max (node.matrix [node.row' node.col].desired_size' node.size);  		AllocateDesiredSize (row_count' col_count);  		sizes.RemoveLast ();  	}  	sizes.AddLast (separator);  }  
Magic Number,GdiPresentation,Grid,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Grid.cs,MeasureOverride,The following statement contains a magic number: for (int i = 0; i < 6; i++) {  	// These bools tell us which grid element type we should be measuring. i.e.  	// 'star/auto' means we should measure elements with a star row and auto col  	bool auto_auto = i == 0;  	bool star_auto = i == 1;  	bool auto_star = i == 2;  	bool star_auto_again = i == 3;  	bool non_star = i == 4;  	bool remaining_star = i == 5;  	if (hasChildren) {  		ExpandStarCols (totalSize);  		ExpandStarRows (totalSize);  	}  	for (int j = 0' count = Children.Count; j < count; j++) {  		var child = Children [j];  		int col' row;  		int colspan' rowspan;  		Size child_size = new Size (0' 0);  		bool star_col = false;  		bool star_row = false;  		bool auto_col = false;  		bool auto_row = false;  		col = Math.Min (GetColumn (child)' col_count - 1);  		row = Math.Min (GetRow (child)' row_count - 1);  		colspan = Math.Min (GetColumnSpan (child)' col_count - col);  		rowspan = Math.Min (GetRowSpan (child)' row_count - row);  		for (int r = row; r < row + rowspan; r++) {  			star_row |= row_matrix [r' r].type == GridUnitType.Star;  			auto_row |= row_matrix [r' r].type == GridUnitType.Auto;  		}  		for (int c = col; c < col + colspan; c++) {  			star_col |= col_matrix [c' c].type == GridUnitType.Star;  			auto_col |= col_matrix [c' c].type == GridUnitType.Auto;  		}  		// This series of if statements checks whether or not we should measure  		// the current element and also if we need to override the sizes  		// passed to the Measure call.   		// If the element has Auto rows and Auto columns and does not span Star  		// rows/cols it should only be measured in the auto_auto phase.  		// There are similar rules governing auto/star and star/auto elements.  		// NOTE: star/auto elements are measured twice. The first time with  		// an override for height' the second time without it.  		if (auto_row && auto_col && !star_row && !star_col) {  			if (!auto_auto)  				continue;  			child_size.Width = int.MaxValue;  			child_size.Height = int.MaxValue;  		}  		else if (star_row && auto_col && !star_col) {  			if (!(star_auto || star_auto_again))  				continue;  			if (star_auto && grid_walker.HasAutoStar ())  				child_size.Height = int.MaxValue;  			child_size.Width = int.MaxValue;  		}  		else if (auto_row && star_col && !star_row) {  			if (!auto_star)  				continue;  			child_size.Height = int.MaxValue;  		}  		else if ((auto_row || auto_col) && !(star_row || star_col)) {  			if (!non_star)  				continue;  			if (auto_row)  				child_size.Height = int.MaxValue;  			if (auto_col)  				child_size.Width = int.MaxValue;  		}  		else if (!(star_row || star_col)) {  			if (!non_star)  				continue;  		}  		else {  			if (!remaining_star)  				continue;  		}  		for (int r = row; r < row + rowspan; r++) {  			child_size.Height += row_matrix [r' r].offered_size;  		}  		for (int c = col; c < col + colspan; c++) {  			child_size.Width += col_matrix [c' c].offered_size;  		}  		child.Measure (child_size);  		Size desired = child.DesiredSize;  		// Elements distribute their height based on two rules:  		// 1) Elements with rowspan/colspan == 1 distribute their height first  		// 2) Everything else distributes in a LIFO manner.  		// As such' add all UIElements with rowspan/colspan == 1 after the separator in  		// the list and everything else before it. Then to process' just keep popping  		// elements off the end of the list.  		if (!star_auto) {  			node = new GridNode (row_matrix' row + rowspan - 1' row' desired.Height);  			if (node.row == node.col) {  				if (separator.Next == null)  					sizes.AddLast (node);  				else  					sizes.AddBefore (separator.Next' node);  			}  			else {  				sizes.AddBefore (separator' node);  			}  		}  		node = new GridNode (col_matrix' col + colspan - 1' col' desired.Width);  		if (node.row == node.col) {  			if (separator.Next == null)  				sizes.AddLast (node);  			else  				sizes.AddBefore (separator.Next' node);  		}  		else {  			sizes.AddBefore (separator' node);  		}  	}  	sizes.Remove (separator);  	LinkedListNode<GridNode> list_node;  	while ((list_node = sizes.Last) != null) {  		node = list_node.Value;  		node.matrix [node.row' node.col].desired_size = Math.Max (node.matrix [node.row' node.col].desired_size' node.size);  		AllocateDesiredSize (row_count' col_count);  		sizes.RemoveLast ();  	}  	sizes.AddLast (separator);  }  
Magic Number,GdiPresentation,Grid,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Grid.cs,MeasureOverride,The following statement contains a magic number: for (int i = 0; i < 6; i++) {  	// These bools tell us which grid element type we should be measuring. i.e.  	// 'star/auto' means we should measure elements with a star row and auto col  	bool auto_auto = i == 0;  	bool star_auto = i == 1;  	bool auto_star = i == 2;  	bool star_auto_again = i == 3;  	bool non_star = i == 4;  	bool remaining_star = i == 5;  	if (hasChildren) {  		ExpandStarCols (totalSize);  		ExpandStarRows (totalSize);  	}  	for (int j = 0' count = Children.Count; j < count; j++) {  		var child = Children [j];  		int col' row;  		int colspan' rowspan;  		Size child_size = new Size (0' 0);  		bool star_col = false;  		bool star_row = false;  		bool auto_col = false;  		bool auto_row = false;  		col = Math.Min (GetColumn (child)' col_count - 1);  		row = Math.Min (GetRow (child)' row_count - 1);  		colspan = Math.Min (GetColumnSpan (child)' col_count - col);  		rowspan = Math.Min (GetRowSpan (child)' row_count - row);  		for (int r = row; r < row + rowspan; r++) {  			star_row |= row_matrix [r' r].type == GridUnitType.Star;  			auto_row |= row_matrix [r' r].type == GridUnitType.Auto;  		}  		for (int c = col; c < col + colspan; c++) {  			star_col |= col_matrix [c' c].type == GridUnitType.Star;  			auto_col |= col_matrix [c' c].type == GridUnitType.Auto;  		}  		// This series of if statements checks whether or not we should measure  		// the current element and also if we need to override the sizes  		// passed to the Measure call.   		// If the element has Auto rows and Auto columns and does not span Star  		// rows/cols it should only be measured in the auto_auto phase.  		// There are similar rules governing auto/star and star/auto elements.  		// NOTE: star/auto elements are measured twice. The first time with  		// an override for height' the second time without it.  		if (auto_row && auto_col && !star_row && !star_col) {  			if (!auto_auto)  				continue;  			child_size.Width = int.MaxValue;  			child_size.Height = int.MaxValue;  		}  		else if (star_row && auto_col && !star_col) {  			if (!(star_auto || star_auto_again))  				continue;  			if (star_auto && grid_walker.HasAutoStar ())  				child_size.Height = int.MaxValue;  			child_size.Width = int.MaxValue;  		}  		else if (auto_row && star_col && !star_row) {  			if (!auto_star)  				continue;  			child_size.Height = int.MaxValue;  		}  		else if ((auto_row || auto_col) && !(star_row || star_col)) {  			if (!non_star)  				continue;  			if (auto_row)  				child_size.Height = int.MaxValue;  			if (auto_col)  				child_size.Width = int.MaxValue;  		}  		else if (!(star_row || star_col)) {  			if (!non_star)  				continue;  		}  		else {  			if (!remaining_star)  				continue;  		}  		for (int r = row; r < row + rowspan; r++) {  			child_size.Height += row_matrix [r' r].offered_size;  		}  		for (int c = col; c < col + colspan; c++) {  			child_size.Width += col_matrix [c' c].offered_size;  		}  		child.Measure (child_size);  		Size desired = child.DesiredSize;  		// Elements distribute their height based on two rules:  		// 1) Elements with rowspan/colspan == 1 distribute their height first  		// 2) Everything else distributes in a LIFO manner.  		// As such' add all UIElements with rowspan/colspan == 1 after the separator in  		// the list and everything else before it. Then to process' just keep popping  		// elements off the end of the list.  		if (!star_auto) {  			node = new GridNode (row_matrix' row + rowspan - 1' row' desired.Height);  			if (node.row == node.col) {  				if (separator.Next == null)  					sizes.AddLast (node);  				else  					sizes.AddBefore (separator.Next' node);  			}  			else {  				sizes.AddBefore (separator' node);  			}  		}  		node = new GridNode (col_matrix' col + colspan - 1' col' desired.Width);  		if (node.row == node.col) {  			if (separator.Next == null)  				sizes.AddLast (node);  			else  				sizes.AddBefore (separator.Next' node);  		}  		else {  			sizes.AddBefore (separator' node);  		}  	}  	sizes.Remove (separator);  	LinkedListNode<GridNode> list_node;  	while ((list_node = sizes.Last) != null) {  		node = list_node.Value;  		node.matrix [node.row' node.col].desired_size = Math.Max (node.matrix [node.row' node.col].desired_size' node.size);  		AllocateDesiredSize (row_count' col_count);  		sizes.RemoveLast ();  	}  	sizes.AddLast (separator);  }  
Magic Number,GdiPresentation,Grid,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Grid.cs,AllocateDesiredSize,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	Segment['] matrix = i == 0 ? row_matrix : col_matrix;  	int count = i == 0 ? row_count : col_count;  	for (int row = count - 1; row >= 0; row--) {  		for (int col = row; col >= 0; col--) {  			bool spans_star = false;  			for (int j = row; j >= col; j--)  				spans_star |= matrix [j' j].type == GridUnitType.Star;  			// This is the amount of pixels which must be available between the grid rows  			// at index 'col' and 'row'. i.e. if 'row' == 0 and 'col' == 2' there must  			// be at least 'matrix [row'col].size' pixels of height allocated between  			// all the rows in the range col . row.  			int current = matrix [row' col].desired_size;  			// Count how many pixels have already been allocated between the grid rows  			// in the range col . row. The amount of pixels allocated to each grid row/column  			// is found on the diagonal of the matrix.  			int total_allocated = 0;  			for (int j = row; j >= col; j--)  				total_allocated += matrix [j' j].desired_size;  			// If the size requirement has not been met' allocate the additional required  			// size between 'pixel' rows' then 'star' rows' finally 'auto' rows' until all  			// height has been assigned.  			if (total_allocated < current) {  				int additional = current - total_allocated;  				if (spans_star) {  					AssignSize (matrix' col' row' ref additional' GridUnitType.Star' true);  				}  				else {  					AssignSize (matrix' col' row' ref additional' GridUnitType.Pixel' true);  					AssignSize (matrix' col' row' ref additional' GridUnitType.Auto' true);  				}  			}  		}  	}  }  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,HslColor,The following statement contains a magic number: _alpha = Math.Min (255' Math.Max (0' alpha));  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,GetColorComponent,The following statement contains a magic number: if (temp3 < 1.0 / 6.0)  	return temp1 + (temp2 - temp1) * 6.0 * temp3;  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,GetColorComponent,The following statement contains a magic number: if (temp3 < 1.0 / 6.0)  	return temp1 + (temp2 - temp1) * 6.0 * temp3;  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,GetColorComponent,The following statement contains a magic number: return temp1 + (temp2 - temp1) * 6.0 * temp3;  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,GetColorComponent,The following statement contains a magic number: if (temp3 < 0.5)  	return temp2;  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,GetColorComponent,The following statement contains a magic number: if (temp3 < 2.0 / 3.0)  	return temp1 + ((temp2 - temp1) * ((2.0 / 3.0) - temp3) * 6.0);  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,GetColorComponent,The following statement contains a magic number: if (temp3 < 2.0 / 3.0)  	return temp1 + ((temp2 - temp1) * ((2.0 / 3.0) - temp3) * 6.0);  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,GetColorComponent,The following statement contains a magic number: if (temp3 < 2.0 / 3.0)  	return temp1 + ((temp2 - temp1) * ((2.0 / 3.0) - temp3) * 6.0);  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,GetColorComponent,The following statement contains a magic number: if (temp3 < 2.0 / 3.0)  	return temp1 + ((temp2 - temp1) * ((2.0 / 3.0) - temp3) * 6.0);  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,GetColorComponent,The following statement contains a magic number: if (temp3 < 2.0 / 3.0)  	return temp1 + ((temp2 - temp1) * ((2.0 / 3.0) - temp3) * 6.0);  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,GetColorComponent,The following statement contains a magic number: return temp1 + ((temp2 - temp1) * ((2.0 / 3.0) - temp3) * 6.0);  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,GetColorComponent,The following statement contains a magic number: return temp1 + ((temp2 - temp1) * ((2.0 / 3.0) - temp3) * 6.0);  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,GetColorComponent,The following statement contains a magic number: return temp1 + ((temp2 - temp1) * ((2.0 / 3.0) - temp3) * 6.0);  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,GetTemp2,The following statement contains a magic number: if (_luminosity < 0.5)  	//<=??  	return _luminosity * (1.0 + _saturation);  else  	return _luminosity + _saturation - (_luminosity * _saturation);  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,FromColor,The following statement contains a magic number: return new HslColor (color.A' color.GetHue () / 360.0' // we store hue as 0-1 as opposed to 0-360   color.GetSaturation ()' color.GetBrightness ());  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,ToColor,The following statement contains a magic number: if (_luminosity != 0) {  	if (_saturation == 0) {  		r = g = b = _luminosity;  	}  	else {  		double temp2 = GetTemp2 ();  		double temp1 = 2.0 * _luminosity - temp2;  		r = GetColorComponent (temp1' temp2' _hue + 1.0 / 3.0);  		g = GetColorComponent (temp1' temp2' _hue);  		b = GetColorComponent (temp1' temp2' _hue - 1.0 / 3.0);  	}  }  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,ToColor,The following statement contains a magic number: if (_luminosity != 0) {  	if (_saturation == 0) {  		r = g = b = _luminosity;  	}  	else {  		double temp2 = GetTemp2 ();  		double temp1 = 2.0 * _luminosity - temp2;  		r = GetColorComponent (temp1' temp2' _hue + 1.0 / 3.0);  		g = GetColorComponent (temp1' temp2' _hue);  		b = GetColorComponent (temp1' temp2' _hue - 1.0 / 3.0);  	}  }  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,ToColor,The following statement contains a magic number: if (_luminosity != 0) {  	if (_saturation == 0) {  		r = g = b = _luminosity;  	}  	else {  		double temp2 = GetTemp2 ();  		double temp1 = 2.0 * _luminosity - temp2;  		r = GetColorComponent (temp1' temp2' _hue + 1.0 / 3.0);  		g = GetColorComponent (temp1' temp2' _hue);  		b = GetColorComponent (temp1' temp2' _hue - 1.0 / 3.0);  	}  }  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,ToColor,The following statement contains a magic number: if (_saturation == 0) {  	r = g = b = _luminosity;  }  else {  	double temp2 = GetTemp2 ();  	double temp1 = 2.0 * _luminosity - temp2;  	r = GetColorComponent (temp1' temp2' _hue + 1.0 / 3.0);  	g = GetColorComponent (temp1' temp2' _hue);  	b = GetColorComponent (temp1' temp2' _hue - 1.0 / 3.0);  }  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,ToColor,The following statement contains a magic number: if (_saturation == 0) {  	r = g = b = _luminosity;  }  else {  	double temp2 = GetTemp2 ();  	double temp1 = 2.0 * _luminosity - temp2;  	r = GetColorComponent (temp1' temp2' _hue + 1.0 / 3.0);  	g = GetColorComponent (temp1' temp2' _hue);  	b = GetColorComponent (temp1' temp2' _hue - 1.0 / 3.0);  }  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,ToColor,The following statement contains a magic number: if (_saturation == 0) {  	r = g = b = _luminosity;  }  else {  	double temp2 = GetTemp2 ();  	double temp1 = 2.0 * _luminosity - temp2;  	r = GetColorComponent (temp1' temp2' _hue + 1.0 / 3.0);  	g = GetColorComponent (temp1' temp2' _hue);  	b = GetColorComponent (temp1' temp2' _hue - 1.0 / 3.0);  }  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,ToColor,The following statement contains a magic number: r = GetColorComponent (temp1' temp2' _hue + 1.0 / 3.0);  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,ToColor,The following statement contains a magic number: b = GetColorComponent (temp1' temp2' _hue - 1.0 / 3.0);  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,ToColor,The following statement contains a magic number: return System.Drawing.Color.FromArgb (_alpha' (int)Math.Round (255 * r)' (int)Math.Round (255 * g)' (int)Math.Round (255 * b));  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,ToColor,The following statement contains a magic number: return System.Drawing.Color.FromArgb (_alpha' (int)Math.Round (255 * r)' (int)Math.Round (255 * g)' (int)Math.Round (255 * b));  
Magic Number,GdiPresentation,HslColor,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\HslColor.cs,ToColor,The following statement contains a magic number: return System.Drawing.Color.FromArgb (_alpha' (int)Math.Round (255 * r)' (int)Math.Round (255 * g)' (int)Math.Round (255 * b));  
Magic Number,GdiPresentation,Image,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Image.cs,OnPaint,The following statement contains a magic number: if (_bitmap != null) {  	var size = (Size)_bitmap.Size;  	var targetSize = size;  	switch (Stretch) {  	case Stretch.Fill:  		targetSize = e.Bounds.Size;  		break;  	case Stretch.None:  		targetSize = size;  		break;  	default:  		double heightFactor = (double)e.Bounds.Height / size.Height;  		double widthFactor = (double)e.Bounds.Width / size.Width;  		bool useHeight = heightFactor > widthFactor;  		if (Stretch == Stretch.Uniform)  			useHeight = !useHeight;  		if (useHeight)  			targetSize = new Size ((int)(size.Width * heightFactor)' e.Bounds.Height);  		else  			targetSize = new Size (e.Bounds.Width' (int)(size.Height * widthFactor));  		break;  	}  	switch (StretchDirection) {  	case StretchDirection.DownOnly:  		targetSize = new Size (Math.Max (targetSize.Width' size.Width)' Math.Max (targetSize.Height' size.Height));  		break;  	case StretchDirection.UpOnly:  		targetSize = new Size (Math.Min (targetSize.Width' size.Width)' Math.Min (targetSize.Height' size.Height));  		break;  	}  	var clip = e.Graphics.Clip;  	try {  		e.Graphics.SetClip ((System.Drawing.Rectangle)e.Bounds);  		e.Graphics.DrawImage (_bitmap' new System.Drawing.Rectangle (e.Bounds.Left + Math.Max ((e.Bounds.Width - targetSize.Width) / 2' 0)' e.Bounds.Top + Math.Max ((e.Bounds.Height - targetSize.Height) / 2' 0)' targetSize.Width' targetSize.Height));  	}  	finally {  		e.Graphics.Clip = clip;  	}  }  
Magic Number,GdiPresentation,Image,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Image.cs,OnPaint,The following statement contains a magic number: if (_bitmap != null) {  	var size = (Size)_bitmap.Size;  	var targetSize = size;  	switch (Stretch) {  	case Stretch.Fill:  		targetSize = e.Bounds.Size;  		break;  	case Stretch.None:  		targetSize = size;  		break;  	default:  		double heightFactor = (double)e.Bounds.Height / size.Height;  		double widthFactor = (double)e.Bounds.Width / size.Width;  		bool useHeight = heightFactor > widthFactor;  		if (Stretch == Stretch.Uniform)  			useHeight = !useHeight;  		if (useHeight)  			targetSize = new Size ((int)(size.Width * heightFactor)' e.Bounds.Height);  		else  			targetSize = new Size (e.Bounds.Width' (int)(size.Height * widthFactor));  		break;  	}  	switch (StretchDirection) {  	case StretchDirection.DownOnly:  		targetSize = new Size (Math.Max (targetSize.Width' size.Width)' Math.Max (targetSize.Height' size.Height));  		break;  	case StretchDirection.UpOnly:  		targetSize = new Size (Math.Min (targetSize.Width' size.Width)' Math.Min (targetSize.Height' size.Height));  		break;  	}  	var clip = e.Graphics.Clip;  	try {  		e.Graphics.SetClip ((System.Drawing.Rectangle)e.Bounds);  		e.Graphics.DrawImage (_bitmap' new System.Drawing.Rectangle (e.Bounds.Left + Math.Max ((e.Bounds.Width - targetSize.Width) / 2' 0)' e.Bounds.Top + Math.Max ((e.Bounds.Height - targetSize.Height) / 2' 0)' targetSize.Width' targetSize.Height));  	}  	finally {  		e.Graphics.Clip = clip;  	}  }  
Magic Number,GdiPresentation,Image,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Image.cs,OnPaint,The following statement contains a magic number: try {  	e.Graphics.SetClip ((System.Drawing.Rectangle)e.Bounds);  	e.Graphics.DrawImage (_bitmap' new System.Drawing.Rectangle (e.Bounds.Left + Math.Max ((e.Bounds.Width - targetSize.Width) / 2' 0)' e.Bounds.Top + Math.Max ((e.Bounds.Height - targetSize.Height) / 2' 0)' targetSize.Width' targetSize.Height));  }  finally {  	e.Graphics.Clip = clip;  }  
Magic Number,GdiPresentation,Image,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Image.cs,OnPaint,The following statement contains a magic number: try {  	e.Graphics.SetClip ((System.Drawing.Rectangle)e.Bounds);  	e.Graphics.DrawImage (_bitmap' new System.Drawing.Rectangle (e.Bounds.Left + Math.Max ((e.Bounds.Width - targetSize.Width) / 2' 0)' e.Bounds.Top + Math.Max ((e.Bounds.Height - targetSize.Height) / 2' 0)' targetSize.Width' targetSize.Height));  }  finally {  	e.Graphics.Clip = clip;  }  
Magic Number,GdiPresentation,Image,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Image.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawImage (_bitmap' new System.Drawing.Rectangle (e.Bounds.Left + Math.Max ((e.Bounds.Width - targetSize.Width) / 2' 0)' e.Bounds.Top + Math.Max ((e.Bounds.Height - targetSize.Height) / 2' 0)' targetSize.Width' targetSize.Height));  
Magic Number,GdiPresentation,Image,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Image.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawImage (_bitmap' new System.Drawing.Rectangle (e.Bounds.Left + Math.Max ((e.Bounds.Width - targetSize.Width) / 2' 0)' e.Bounds.Top + Math.Max ((e.Bounds.Height - targetSize.Height) / 2' 0)' targetSize.Width' targetSize.Height));  
Magic Number,GdiPresentation,ObjectUtil,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\ObjectUtil.cs,CombineHashCodes,The following statement contains a magic number: unchecked {  	return (((hash1 << 5) + hash1) ^ hash2);  }  
Magic Number,GdiPresentation,ObjectUtil,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\ObjectUtil.cs,CombineHashCodes,The following statement contains a magic number: return (((hash1 << 5) + hash1) ^ hash2);  
Magic Number,GdiPresentation,Rect,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Rect.cs,Inflate,The following statement contains a magic number: _width += horizontal * 2;  
Magic Number,GdiPresentation,Rect,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Rect.cs,Inflate,The following statement contains a magic number: _height += vertical * 2;  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: if (Header == null || ExpanderWidth < 9)  	return;  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (SystemColors.ControlDark' 1) {  	DashStyle = DashStyle.Dot  }) {  	int left = toggleOffset.X + 4;  	if (_havePrevious) {  		int top = e.Bounds.Top - Margin.Top;  		if (index == 0 && _parentTreeExpander != null)  			top -= _parentTreeExpander.ContainerMargin.Top;  		e.Graphics.DrawLine (pen' left' RoundTop (top)' left' toggleOffset.Y + 4);  	}  	if (_haveNext) {  		e.Graphics.DrawLine (pen' left' RoundTop (toggleOffset.Y + 4)' left' e.Bounds.Bottom + Margin.Bottom);  	}  	e.Graphics.DrawLine (pen' left + (toggleOffset.Y % 2 == 0 ? 0 : 1)' toggleOffset.Y + 4' e.Bounds.Left + ExpanderWidth' toggleOffset.Y + 4);  }  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (SystemColors.ControlDark' 1) {  	DashStyle = DashStyle.Dot  }) {  	int left = toggleOffset.X + 4;  	if (_havePrevious) {  		int top = e.Bounds.Top - Margin.Top;  		if (index == 0 && _parentTreeExpander != null)  			top -= _parentTreeExpander.ContainerMargin.Top;  		e.Graphics.DrawLine (pen' left' RoundTop (top)' left' toggleOffset.Y + 4);  	}  	if (_haveNext) {  		e.Graphics.DrawLine (pen' left' RoundTop (toggleOffset.Y + 4)' left' e.Bounds.Bottom + Margin.Bottom);  	}  	e.Graphics.DrawLine (pen' left + (toggleOffset.Y % 2 == 0 ? 0 : 1)' toggleOffset.Y + 4' e.Bounds.Left + ExpanderWidth' toggleOffset.Y + 4);  }  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (SystemColors.ControlDark' 1) {  	DashStyle = DashStyle.Dot  }) {  	int left = toggleOffset.X + 4;  	if (_havePrevious) {  		int top = e.Bounds.Top - Margin.Top;  		if (index == 0 && _parentTreeExpander != null)  			top -= _parentTreeExpander.ContainerMargin.Top;  		e.Graphics.DrawLine (pen' left' RoundTop (top)' left' toggleOffset.Y + 4);  	}  	if (_haveNext) {  		e.Graphics.DrawLine (pen' left' RoundTop (toggleOffset.Y + 4)' left' e.Bounds.Bottom + Margin.Bottom);  	}  	e.Graphics.DrawLine (pen' left + (toggleOffset.Y % 2 == 0 ? 0 : 1)' toggleOffset.Y + 4' e.Bounds.Left + ExpanderWidth' toggleOffset.Y + 4);  }  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (SystemColors.ControlDark' 1) {  	DashStyle = DashStyle.Dot  }) {  	int left = toggleOffset.X + 4;  	if (_havePrevious) {  		int top = e.Bounds.Top - Margin.Top;  		if (index == 0 && _parentTreeExpander != null)  			top -= _parentTreeExpander.ContainerMargin.Top;  		e.Graphics.DrawLine (pen' left' RoundTop (top)' left' toggleOffset.Y + 4);  	}  	if (_haveNext) {  		e.Graphics.DrawLine (pen' left' RoundTop (toggleOffset.Y + 4)' left' e.Bounds.Bottom + Margin.Bottom);  	}  	e.Graphics.DrawLine (pen' left + (toggleOffset.Y % 2 == 0 ? 0 : 1)' toggleOffset.Y + 4' e.Bounds.Left + ExpanderWidth' toggleOffset.Y + 4);  }  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (SystemColors.ControlDark' 1) {  	DashStyle = DashStyle.Dot  }) {  	int left = toggleOffset.X + 4;  	if (_havePrevious) {  		int top = e.Bounds.Top - Margin.Top;  		if (index == 0 && _parentTreeExpander != null)  			top -= _parentTreeExpander.ContainerMargin.Top;  		e.Graphics.DrawLine (pen' left' RoundTop (top)' left' toggleOffset.Y + 4);  	}  	if (_haveNext) {  		e.Graphics.DrawLine (pen' left' RoundTop (toggleOffset.Y + 4)' left' e.Bounds.Bottom + Margin.Bottom);  	}  	e.Graphics.DrawLine (pen' left + (toggleOffset.Y % 2 == 0 ? 0 : 1)' toggleOffset.Y + 4' e.Bounds.Left + ExpanderWidth' toggleOffset.Y + 4);  }  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (SystemColors.ControlDark' 1) {  	DashStyle = DashStyle.Dot  }) {  	int left = toggleOffset.X + 4;  	if (_havePrevious) {  		int top = e.Bounds.Top - Margin.Top;  		if (index == 0 && _parentTreeExpander != null)  			top -= _parentTreeExpander.ContainerMargin.Top;  		e.Graphics.DrawLine (pen' left' RoundTop (top)' left' toggleOffset.Y + 4);  	}  	if (_haveNext) {  		e.Graphics.DrawLine (pen' left' RoundTop (toggleOffset.Y + 4)' left' e.Bounds.Bottom + Margin.Bottom);  	}  	e.Graphics.DrawLine (pen' left + (toggleOffset.Y % 2 == 0 ? 0 : 1)' toggleOffset.Y + 4' e.Bounds.Left + ExpanderWidth' toggleOffset.Y + 4);  }  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: if (_havePrevious) {  	int top = e.Bounds.Top - Margin.Top;  	if (index == 0 && _parentTreeExpander != null)  		top -= _parentTreeExpander.ContainerMargin.Top;  	e.Graphics.DrawLine (pen' left' RoundTop (top)' left' toggleOffset.Y + 4);  }  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' left' RoundTop (top)' left' toggleOffset.Y + 4);  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: if (_haveNext) {  	e.Graphics.DrawLine (pen' left' RoundTop (toggleOffset.Y + 4)' left' e.Bounds.Bottom + Margin.Bottom);  }  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' left' RoundTop (toggleOffset.Y + 4)' left' e.Bounds.Bottom + Margin.Bottom);  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' left + (toggleOffset.Y % 2 == 0 ? 0 : 1)' toggleOffset.Y + 4' e.Bounds.Left + ExpanderWidth' toggleOffset.Y + 4);  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' left + (toggleOffset.Y % 2 == 0 ? 0 : 1)' toggleOffset.Y + 4' e.Bounds.Left + ExpanderWidth' toggleOffset.Y + 4);  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' left + (toggleOffset.Y % 2 == 0 ? 0 : 1)' toggleOffset.Y + 4' e.Bounds.Left + ExpanderWidth' toggleOffset.Y + 4);  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawRectangle (SystemPens.ControlDark' toggleOffset.X' toggleOffset.Y' 8' 8);  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawRectangle (SystemPens.ControlDark' toggleOffset.X' toggleOffset.Y' 8' 8);  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (SystemBrushes.Window' toggleOffset.X + 1' toggleOffset.Y + 1' 7' 7);  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (SystemBrushes.Window' toggleOffset.X + 1' toggleOffset.Y + 1' 7' 7);  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (SystemPens.ControlText' toggleOffset.X + 2' toggleOffset.Y + 4' toggleOffset.X + 6' toggleOffset.Y + 4);  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (SystemPens.ControlText' toggleOffset.X + 2' toggleOffset.Y + 4' toggleOffset.X + 6' toggleOffset.Y + 4);  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (SystemPens.ControlText' toggleOffset.X + 2' toggleOffset.Y + 4' toggleOffset.X + 6' toggleOffset.Y + 4);  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (SystemPens.ControlText' toggleOffset.X + 2' toggleOffset.Y + 4' toggleOffset.X + 6' toggleOffset.Y + 4);  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: if (Children.Count > 0 && !IsExpanded) {  	e.Graphics.DrawLine (SystemPens.ControlText' toggleOffset.X + 4' toggleOffset.Y + 2' toggleOffset.X + 4' toggleOffset.Y + 6);  }  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: if (Children.Count > 0 && !IsExpanded) {  	e.Graphics.DrawLine (SystemPens.ControlText' toggleOffset.X + 4' toggleOffset.Y + 2' toggleOffset.X + 4' toggleOffset.Y + 6);  }  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: if (Children.Count > 0 && !IsExpanded) {  	e.Graphics.DrawLine (SystemPens.ControlText' toggleOffset.X + 4' toggleOffset.Y + 2' toggleOffset.X + 4' toggleOffset.Y + 6);  }  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: if (Children.Count > 0 && !IsExpanded) {  	e.Graphics.DrawLine (SystemPens.ControlText' toggleOffset.X + 4' toggleOffset.Y + 2' toggleOffset.X + 4' toggleOffset.Y + 6);  }  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (SystemPens.ControlText' toggleOffset.X + 4' toggleOffset.Y + 2' toggleOffset.X + 4' toggleOffset.Y + 6);  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (SystemPens.ControlText' toggleOffset.X + 4' toggleOffset.Y + 2' toggleOffset.X + 4' toggleOffset.Y + 6);  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (SystemPens.ControlText' toggleOffset.X + 4' toggleOffset.Y + 2' toggleOffset.X + 4' toggleOffset.Y + 6);  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (SystemPens.ControlText' toggleOffset.X + 4' toggleOffset.Y + 2' toggleOffset.X + 4' toggleOffset.Y + 6);  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,RoundTop,The following statement contains a magic number: return ((y + 1) / 2) * 2;  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,RoundTop,The following statement contains a magic number: return ((y + 1) / 2) * 2;  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,GetToggleOffset,The following statement contains a magic number: return new Point (offset.X + (ExpanderWidth - 9) / 2' offset.Y + (Header.ActualHeight - 9) / 2);  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,GetToggleOffset,The following statement contains a magic number: return new Point (offset.X + (ExpanderWidth - 9) / 2' offset.Y + (Header.ActualHeight - 9) / 2);  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,GetToggleOffset,The following statement contains a magic number: return new Point (offset.X + (ExpanderWidth - 9) / 2' offset.Y + (Header.ActualHeight - 9) / 2);  
Magic Number,GdiPresentation,TreeExpander,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\TreeExpander.cs,GetToggleOffset,The following statement contains a magic number: return new Point (offset.X + (ExpanderWidth - 9) / 2' offset.Y + (Header.ActualHeight - 9) / 2);  
Missing Default,GdiPresentation,CustomScrollControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\CustomScrollControl.cs,WmVScroll,The following switch statement is missing a default case: switch (NativeMethods.Util.LOWORD (m.WParam)) {  case NativeMethods.SB_THUMBPOSITION:  case NativeMethods.SB_THUMBTRACK:  	pos = ScrollThumbPosition (NativeMethods.SB_VERT);  	break;  case NativeMethods.SB_LINEUP:  	if (pos > 0)  		pos -= _verticalScroll.SmallChange;  	else  		pos = 0;  	break;  case NativeMethods.SB_LINEDOWN:  	if (pos < maxPos - _verticalScroll.SmallChange)  		pos += _verticalScroll.SmallChange;  	else  		pos = maxPos;  	break;  case NativeMethods.SB_PAGEUP:  	if (pos > _verticalScroll.LargeChange)  		pos -= _verticalScroll.LargeChange;  	else  		pos = 0;  	break;  case NativeMethods.SB_PAGEDOWN:  	if (pos < maxPos - _verticalScroll.LargeChange)  		pos += _verticalScroll.LargeChange;  	else  		pos = maxPos;  	break;  case NativeMethods.SB_TOP:  	pos = 0;  	break;  case NativeMethods.SB_BOTTOM:  	pos = maxPos;  	break;  }  
Missing Default,GdiPresentation,CustomScrollControl,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\CustomScrollControl.cs,WmHScroll,The following switch statement is missing a default case: switch (NativeMethods.Util.LOWORD (m.WParam)) {  case NativeMethods.SB_THUMBPOSITION:  case NativeMethods.SB_THUMBTRACK:  	pos = ScrollThumbPosition (NativeMethods.SB_HORZ);  	break;  case NativeMethods.SB_LINEUP:  	if (pos > _horizontalScroll.SmallChange)  		pos -= _horizontalScroll.SmallChange;  	else  		pos = 0;  	break;  case NativeMethods.SB_LINEDOWN:  	if (pos < maxPos - _horizontalScroll.SmallChange)  		pos += _horizontalScroll.SmallChange;  	else  		pos = maxPos;  	break;  case NativeMethods.SB_PAGEUP:  	if (pos > _horizontalScroll.LargeChange)  		pos -= _horizontalScroll.LargeChange;  	else  		pos = 0;  	break;  case NativeMethods.SB_PAGEDOWN:  	if (pos < maxPos - _horizontalScroll.LargeChange)  		pos += _horizontalScroll.LargeChange;  	else  		pos = maxPos;  	break;  case NativeMethods.SB_LEFT:  	pos = 0;  	break;  case NativeMethods.SB_RIGHT:  	pos = maxPos;  	break;  }  
Missing Default,GdiPresentation,Image,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\Image.cs,OnPaint,The following switch statement is missing a default case: switch (StretchDirection) {  case StretchDirection.DownOnly:  	targetSize = new Size (Math.Max (targetSize.Width' size.Width)' Math.Max (targetSize.Height' size.Height));  	break;  case StretchDirection.UpOnly:  	targetSize = new Size (Math.Min (targetSize.Width' size.Width)' Math.Min (targetSize.Height' size.Height));  	break;  }  
Missing Default,GdiPresentation,WordCache,C:\repos\gmt-europe_GdiPresentation\GdiPresentation\WordCache.cs,Render,The following switch statement is missing a default case: switch (Clip) {  case WordClip.AppendEllipsis:  	text += "...";  	break;  case WordClip.ReplaceWithEllipsis:  	text = "...";  	break;  case WordClip.Trim:  	// We fake the hell out of this to make sure TextRenderer  	// draws the ellipsis. We append the ellipsis here because  	// on word breaks' the text may not be long enough to  	// force the ellipsis. Adding it ourselves ensures that the  	// ellipsis is drawn. Otherwise' the ellipsis is ellipsis-d.  	text += "...";  	format |= TextFormatFlags.EndEllipsis;  	break;  }  
