Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NBody,AtmosphereDecay,C:\repos\HoneyFox_NBody\AtmosphereDecay.cs,FixedUpdate,Cyclomatic complexity of the method is 8
Complex Method,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,FixedUpdate,Cyclomatic complexity of the method is 22
Complex Method,NBody,OrbitManipulator,C:\repos\HoneyFox_NBody\OrbitManipulator.cs,Start,Cyclomatic complexity of the method is 15
Complex Method,NBody,WarpableEngineThrottleGUI,C:\repos\HoneyFox_NBody\WarpableEngine.cs,Update,Cyclomatic complexity of the method is 11
Complex Method,NBody,WarpableEngine,C:\repos\HoneyFox_NBody\WarpableEngine.cs,FixedUpdateFor,Cyclomatic complexity of the method is 15
Complex Method,NBody,WarpableEngine,C:\repos\HoneyFox_NBody\WarpableEngine.cs,FixedUpdate,Cyclomatic complexity of the method is 10
Long Parameter List,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,IterateVelocity,The method has 5 parameters.
Long Parameter List,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,IteratePosition,The method has 5 parameters.
Long Identifier,NBody,OrbitManipulator,C:\repos\HoneyFox_NBody\OrbitManipulator.cs,Start,The length of the parameter killThrottleWhenExitingTimeWarp is 31.
Long Identifier,NBody,WarpableEngineThrottleGUI,C:\repos\HoneyFox_NBody\WarpableEngine.cs,DrawGUI,The length of the parameter orgKillThrottleWhenExitingTimeWarp is 34.
Long Statement,NBody,AtmosphereDecay,C:\repos\HoneyFox_NBody\AtmosphereDecay.cs,FixedUpdate,The length of the statement  "					if (airDensity >= sAirDensityThreshold && v.mainBody.atmosphere == true && v.altitude <= v.mainBody.maxAtmosphereAltitude) { " is 124.
Long Statement,NBody,AtmosphereDecay,C:\repos\HoneyFox_NBody\AtmosphereDecay.cs,FixedUpdate,The length of the statement  "						Vector3d dragVector = -v.orbit.vel.normalized * (float)(0.5 * sAverageCd * airDensity * v.orbit.vel.sqrMagnitude / 1000.0); " is 123.
Long Statement,NBody,AtmosphereDecay,C:\repos\HoneyFox_NBody\AtmosphereDecay.cs,FixedUpdate,The length of the statement  "						//Debug.Log(v.orbit.vel.ToString() + " 0.5*" + sAverageCd.ToString() + "*" + (airDensity * v.orbit.vel.sqrMagnitude).ToString() + "/1000.0 = " + dragVector.ToString()); " is 168.
Long Statement,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,FixedUpdate,The length of the statement  "								Vector3d forceTopBodyToVessel = locationVector.normalized * cb.referenceBody.gravParameter / locationVector.sqrMagnitude; " is 121.
Long Statement,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,FixedUpdate,The length of the statement  "								Vector3d forceTopBodyToMainBody = locationVector.normalized * cb.referenceBody.gravParameter / locationVector.sqrMagnitude; " is 123.
Long Statement,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,FixedUpdate,The length of the statement  "					//            Vector3d locationVector = GetVesselAbsolutePosition(vs' Planetarium.GetUniversalTime()) - part.transform.position; " is 128.
Long Statement,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,FixedUpdate,The length of the statement  "								part.rigidbody.AddForceAtPosition (force * part.mass * 10000.0f' part.transform.TransformPoint (part.CoMOffset)' ForceMode.Force); " is 130.
Long Statement,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,FixedUpdate,The length of the statement  "								part.rigidbody.AddForceAtPosition (force * part.mass * 100.0f' part.transform.TransformPoint (part.CoMOffset)' ForceMode.Force); " is 128.
Long Statement,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,FixedUpdate,The length of the statement  "									//Debug.Log("NBody: acc/pos/vel: " + actualForce.ToString() + " " + prevVessel.orbit.pos.ToString() + " " + prevVessel.orbit.vel.ToString()); " is 141.
Long Statement,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,FixedUpdate,The length of the statement  "										OrbitManipulator.s_singleton.AddManipulation (prevVessel' actualForce * timeAccumulated * times / TimeWarp.fixedDeltaTime); " is 123.
Long Statement,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,UpdatePredictedLine,The length of the statement  "				predictionLineRenderer.SetPosition (i' ScaledSpace.LocalToScaledSpace (prevRefPositions [i] + prevVessel.mainBody.getPositionAtUT (Planetarium.GetUniversalTime ()))); " is 166.
Long Statement,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,Iterate,The length of the statement  "	Vector3d newPosition = IteratePosition (FlightGlobals.fetch.activeVessel' prevPosition' prevVelocity' prevUniverseTime' deltaTime); " is 131.
Long Statement,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,Iterate,The length of the statement  "	Vector3d newRefPosition = newPosition - GetCelestialBodyAbsolutePosition (FlightGlobals.fetch.activeVessel.mainBody' prevUniverseTime); " is 135.
Long Statement,NBody,OrbitManipulator,C:\repos\HoneyFox_NBody\OrbitManipulator.cs,Start,The length of the statement  "					AtmosphereDecay.s_singleton.btnAtmosphereDecay.TexturePath = atmosphereDecayActivated ? "NBody/Textures/AtmosDecayOn" : "NBody/Textures/AtmosDecayOff"; " is 151.
Long Statement,NBody,OrbitManipulator,C:\repos\HoneyFox_NBody\OrbitManipulator.cs,Start,The length of the statement  "					NBody.s_singleton.btnNBodyForce.TexturePath = nBodyForceActivated ? "NBody/Textures/NBodyOn" : "NBody/Textures/NBodyOff"; " is 121.
Long Statement,NBody,OrbitManipulator,C:\repos\HoneyFox_NBody\OrbitManipulator.cs,Start,The length of the statement  "					WarpableEngineThrottleGUI.s_singleton.btnWarpableEngineList.TexturePath = warpableEngineListActivated ? "NBody/Textures/WarpableEngineListOn" : "NBody/Textures/WarpableEngineListOff"; " is 183.
Long Statement,NBody,OrbitManipulator,C:\repos\HoneyFox_NBody\OrbitManipulator.cs,SaveConfigs,The length of the statement  "		settingNode.SetValue ("KillThrottleWhenExitingTimeWarp"' WarpableEngineThrottleGUI.s_singleton.killThrottleWhenExitingTimeWarp.ToString ()); " is 140.
Long Statement,NBody,OrbitManipulator,C:\repos\HoneyFox_NBody\OrbitManipulator.cs,FixedUpdate,The length of the statement  "			Orbit orbit2 = new Orbit (vessel.orbit.inclination' vessel.orbit.eccentricity' vessel.orbit.semiMajorAxis' vessel.orbit.LAN' vessel.orbit.argumentOfPeriapsis' vessel.orbit.meanAnomalyAtEpoch' vessel.orbit.epoch' vessel.orbit.referenceBody); " is 240.
Long Statement,NBody,OrbitManipulator,C:\repos\HoneyFox_NBody\OrbitManipulator.cs,FixedUpdate,The length of the statement  "			orbit2.UpdateFromStateVectors (position' vessel.orbit.vel + totalAccOnVessel * TimeWarp.fixedDeltaTime' vessel.orbit.referenceBody' Planetarium.GetUniversalTime ()); " is 165.
Long Statement,NBody,OrbitManipulator,C:\repos\HoneyFox_NBody\OrbitManipulator.cs,FixedUpdate,The length of the statement  "			if (!double.IsNaN (orbit2.inclination) && !double.IsNaN (orbit2.eccentricity) && !double.IsNaN (orbit2.semiMajorAxis)) { " is 120.
Long Statement,NBody,OrbitManipulator,C:\repos\HoneyFox_NBody\OrbitManipulator.cs,FixedUpdate,The length of the statement  "				if ((double.IsNaN (orbit2.timeToAp) || (orbit2.timeToAp > TimeWarp.fixedDeltaTime * 10.0f && orbit2.timeToAp < orbit2.period - TimeWarp.fixedDeltaTime * 10.0f)) && (orbit2.timeToPe > TimeWarp.fixedDeltaTime * 10.0f)) " is 216.
Long Statement,NBody,ToolbarTypes,C:\repos\HoneyFox_NBody\ToolbarWrapper.cs,getType,The length of the statement  "	return AssemblyLoader.loadedAssemblies.SelectMany (a => a.assembly.GetExportedTypes ()).SingleOrDefault (t => t.FullName == name); " is 130.
Long Statement,NBody,WarpableEngineThrottleGUI,C:\repos\HoneyFox_NBody\WarpableEngine.cs,Awake,The length of the statement  "			btnWarpableEngineList.TexturePath = activated ? "NBody/Textures/WarpableEngineListOn" : "NBody/Textures/WarpableEngineListOff"; " is 127.
Long Statement,NBody,WarpableEngineThrottleGUI,C:\repos\HoneyFox_NBody\WarpableEngine.cs,OnGUI,The length of the statement  "		windowRect = GUILayout.Window (22113141' windowRect' DrawGUI' "Warpable Engines"' GUILayout.ExpandWidth (true)' GUILayout.ExpandHeight (true)); " is 143.
Long Statement,NBody,WarpableEngine,C:\repos\HoneyFox_NBody\WarpableEngine.cs,FixedUpdateFor,The length of the statement  "		warpableEngine.engine.GetType ().GetMethod ("UpdatePropellantStatus"' BindingFlags.Instance | BindingFlags.NonPublic).Invoke (warpableEngine.engine' null); " is 155.
Long Statement,NBody,WarpableEngine,C:\repos\HoneyFox_NBody\WarpableEngine.cs,FixedUpdateFor,The length of the statement  "				warpableEngine.engine.part.findFxGroup ("power").SetPower (warpableEngine.engine.finalThrust / warpableEngine.engine.maxThrust); " is 128.
Long Statement,NBody,WarpableEngine,C:\repos\HoneyFox_NBody\WarpableEngine.cs,FixedUpdateFor,The length of the statement  "				warpableEngine.engine.part.findFxGroup ("running").SetPower (warpableEngine.engine.finalThrust / warpableEngine.engine.maxThrust); " is 130.
Long Statement,NBody,WarpableEngine,C:\repos\HoneyFox_NBody\WarpableEngine.cs,FixedUpdateFor,The length of the statement  "					m.gameObject.SampleAnimation (m.animation [m.animationName].clip' throttle / m.animation [m.animationName].clip.length); " is 120.
Long Statement,NBody,WarpableEngine,C:\repos\HoneyFox_NBody\WarpableEngine.cs,FixedUpdateFor,The length of the statement  "		warpableEngine.engineFX.GetType ().GetMethod ("UpdatePropellantStatus"' BindingFlags.Instance | BindingFlags.NonPublic).Invoke (warpableEngine.engineFX' null); " is 159.
Long Statement,NBody,WarpableEngine,C:\repos\HoneyFox_NBody\WarpableEngine.cs,FixedUpdateFor,The length of the statement  "				warpableEngine.engineFX.part.Effect (warpableEngine.engineFX.powerEffectName' warpableEngine.engineFX.finalThrust / warpableEngine.engineFX.maxThrust); " is 151.
Long Statement,NBody,WarpableEngine,C:\repos\HoneyFox_NBody\WarpableEngine.cs,FixedUpdateFor,The length of the statement  "				warpableEngine.engineFX.part.Effect (warpableEngine.engineFX.runningEffectName' warpableEngine.engineFX.finalThrust / warpableEngine.engineFX.maxThrust); " is 153.
Long Statement,NBody,WarpableEngine,C:\repos\HoneyFox_NBody\WarpableEngine.cs,FixedUpdateFor,The length of the statement  "					FXModuleAnimateThrottle m = warpableEngine.engineFX.part.Modules ["FXModuleAnimateThrottle"] as FXModuleAnimateThrottle; " is 120.
Long Statement,NBody,WarpableEngine,C:\repos\HoneyFox_NBody\WarpableEngine.cs,FixedUpdateFor,The length of the statement  "					m.gameObject.SampleAnimation (m.animation [m.animationName].clip' throttle / m.animation [m.animationName].clip.length); " is 120.
Long Statement,NBody,WarpableEngine,C:\repos\HoneyFox_NBody\WarpableEngine.cs,FixedUpdateFor,The length of the statement  "		finalAcc = averageThrustVector.normalized * warpableEngine.engineFX.finalThrust / warpableEngine.vessel.GetTotalMass (); " is 120.
Long Statement,NBody,WarpableEngine,C:\repos\HoneyFox_NBody\WarpableEngine.cs,FixedUpdate,The length of the statement  "				OrbitManipulator.s_singleton.AddManipulation (vessel' new Vector3d (totalAccOnVessel.x' totalAccOnVessel.z' totalAccOnVessel.y)); " is 129.
Complex Conditional,NBody,OrbitManipulator,C:\repos\HoneyFox_NBody\OrbitManipulator.cs,FixedUpdate,The conditional expression  "(double.IsNaN (orbit2.timeToAp) || (orbit2.timeToAp > TimeWarp.fixedDeltaTime * 10.0f && orbit2.timeToAp < orbit2.period - TimeWarp.fixedDeltaTime * 10.0f)) && (orbit2.timeToPe > TimeWarp.fixedDeltaTime * 10.0f)"  is complex.
Empty Catch Block,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,UpdatePredictedLine,The method has an empty catch block.
Empty Catch Block,NBody,WarpableEngine,C:\repos\HoneyFox_NBody\WarpableEngine.cs,FixedUpdateFor,The method has an empty catch block.
Empty Catch Block,NBody,WarpableEngine,C:\repos\HoneyFox_NBody\WarpableEngine.cs,FixedUpdateFor,The method has an empty catch block.
Magic Number,NBody,AtmosphereDecay,C:\repos\HoneyFox_NBody\AtmosphereDecay.cs,FixedUpdate,The following statement contains a magic number: if (FlightGlobals.fetch != null) {  	if (sIntervalCounter >= sInterval) {  		sIntervalCounter = 0;  		foreach (Vessel v in FlightGlobals.fetch.vessels) {  			if (FlightGlobals.fetch.activeVessel == v)  				continue;  			if (v.packed == true && v.LandedOrSplashed == false) {  				double airDensity = FlightGlobals.getAtmDensity (FlightGlobals.getStaticPressure (v.GetWorldPos3D ()' v.mainBody));  				if (airDensity >= sAirDensityThreshold && v.mainBody.atmosphere == true && v.altitude <= v.mainBody.maxAtmosphereAltitude) {  					Vector3d dragVector = -v.orbit.vel.normalized * (float)(0.5 * sAverageCd * airDensity * v.orbit.vel.sqrMagnitude / 1000.0);  					//Debug.Log(v.orbit.vel.ToString() + " 0.5*" + sAverageCd.ToString() + "*" + (airDensity * v.orbit.vel.sqrMagnitude).ToString() + "/1000.0 = " + dragVector.ToString());  					if (OrbitManipulator.s_singleton != null)  						OrbitManipulator.s_singleton.AddManipulation (v' dragVector * sInterval);  				}  			}  		}  	}  	else {  		sIntervalCounter++;  	}  }  
Magic Number,NBody,AtmosphereDecay,C:\repos\HoneyFox_NBody\AtmosphereDecay.cs,FixedUpdate,The following statement contains a magic number: if (FlightGlobals.fetch != null) {  	if (sIntervalCounter >= sInterval) {  		sIntervalCounter = 0;  		foreach (Vessel v in FlightGlobals.fetch.vessels) {  			if (FlightGlobals.fetch.activeVessel == v)  				continue;  			if (v.packed == true && v.LandedOrSplashed == false) {  				double airDensity = FlightGlobals.getAtmDensity (FlightGlobals.getStaticPressure (v.GetWorldPos3D ()' v.mainBody));  				if (airDensity >= sAirDensityThreshold && v.mainBody.atmosphere == true && v.altitude <= v.mainBody.maxAtmosphereAltitude) {  					Vector3d dragVector = -v.orbit.vel.normalized * (float)(0.5 * sAverageCd * airDensity * v.orbit.vel.sqrMagnitude / 1000.0);  					//Debug.Log(v.orbit.vel.ToString() + " 0.5*" + sAverageCd.ToString() + "*" + (airDensity * v.orbit.vel.sqrMagnitude).ToString() + "/1000.0 = " + dragVector.ToString());  					if (OrbitManipulator.s_singleton != null)  						OrbitManipulator.s_singleton.AddManipulation (v' dragVector * sInterval);  				}  			}  		}  	}  	else {  		sIntervalCounter++;  	}  }  
Magic Number,NBody,AtmosphereDecay,C:\repos\HoneyFox_NBody\AtmosphereDecay.cs,FixedUpdate,The following statement contains a magic number: if (sIntervalCounter >= sInterval) {  	sIntervalCounter = 0;  	foreach (Vessel v in FlightGlobals.fetch.vessels) {  		if (FlightGlobals.fetch.activeVessel == v)  			continue;  		if (v.packed == true && v.LandedOrSplashed == false) {  			double airDensity = FlightGlobals.getAtmDensity (FlightGlobals.getStaticPressure (v.GetWorldPos3D ()' v.mainBody));  			if (airDensity >= sAirDensityThreshold && v.mainBody.atmosphere == true && v.altitude <= v.mainBody.maxAtmosphereAltitude) {  				Vector3d dragVector = -v.orbit.vel.normalized * (float)(0.5 * sAverageCd * airDensity * v.orbit.vel.sqrMagnitude / 1000.0);  				//Debug.Log(v.orbit.vel.ToString() + " 0.5*" + sAverageCd.ToString() + "*" + (airDensity * v.orbit.vel.sqrMagnitude).ToString() + "/1000.0 = " + dragVector.ToString());  				if (OrbitManipulator.s_singleton != null)  					OrbitManipulator.s_singleton.AddManipulation (v' dragVector * sInterval);  			}  		}  	}  }  else {  	sIntervalCounter++;  }  
Magic Number,NBody,AtmosphereDecay,C:\repos\HoneyFox_NBody\AtmosphereDecay.cs,FixedUpdate,The following statement contains a magic number: if (sIntervalCounter >= sInterval) {  	sIntervalCounter = 0;  	foreach (Vessel v in FlightGlobals.fetch.vessels) {  		if (FlightGlobals.fetch.activeVessel == v)  			continue;  		if (v.packed == true && v.LandedOrSplashed == false) {  			double airDensity = FlightGlobals.getAtmDensity (FlightGlobals.getStaticPressure (v.GetWorldPos3D ()' v.mainBody));  			if (airDensity >= sAirDensityThreshold && v.mainBody.atmosphere == true && v.altitude <= v.mainBody.maxAtmosphereAltitude) {  				Vector3d dragVector = -v.orbit.vel.normalized * (float)(0.5 * sAverageCd * airDensity * v.orbit.vel.sqrMagnitude / 1000.0);  				//Debug.Log(v.orbit.vel.ToString() + " 0.5*" + sAverageCd.ToString() + "*" + (airDensity * v.orbit.vel.sqrMagnitude).ToString() + "/1000.0 = " + dragVector.ToString());  				if (OrbitManipulator.s_singleton != null)  					OrbitManipulator.s_singleton.AddManipulation (v' dragVector * sInterval);  			}  		}  	}  }  else {  	sIntervalCounter++;  }  
Magic Number,NBody,AtmosphereDecay,C:\repos\HoneyFox_NBody\AtmosphereDecay.cs,FixedUpdate,The following statement contains a magic number: foreach (Vessel v in FlightGlobals.fetch.vessels) {  	if (FlightGlobals.fetch.activeVessel == v)  		continue;  	if (v.packed == true && v.LandedOrSplashed == false) {  		double airDensity = FlightGlobals.getAtmDensity (FlightGlobals.getStaticPressure (v.GetWorldPos3D ()' v.mainBody));  		if (airDensity >= sAirDensityThreshold && v.mainBody.atmosphere == true && v.altitude <= v.mainBody.maxAtmosphereAltitude) {  			Vector3d dragVector = -v.orbit.vel.normalized * (float)(0.5 * sAverageCd * airDensity * v.orbit.vel.sqrMagnitude / 1000.0);  			//Debug.Log(v.orbit.vel.ToString() + " 0.5*" + sAverageCd.ToString() + "*" + (airDensity * v.orbit.vel.sqrMagnitude).ToString() + "/1000.0 = " + dragVector.ToString());  			if (OrbitManipulator.s_singleton != null)  				OrbitManipulator.s_singleton.AddManipulation (v' dragVector * sInterval);  		}  	}  }  
Magic Number,NBody,AtmosphereDecay,C:\repos\HoneyFox_NBody\AtmosphereDecay.cs,FixedUpdate,The following statement contains a magic number: foreach (Vessel v in FlightGlobals.fetch.vessels) {  	if (FlightGlobals.fetch.activeVessel == v)  		continue;  	if (v.packed == true && v.LandedOrSplashed == false) {  		double airDensity = FlightGlobals.getAtmDensity (FlightGlobals.getStaticPressure (v.GetWorldPos3D ()' v.mainBody));  		if (airDensity >= sAirDensityThreshold && v.mainBody.atmosphere == true && v.altitude <= v.mainBody.maxAtmosphereAltitude) {  			Vector3d dragVector = -v.orbit.vel.normalized * (float)(0.5 * sAverageCd * airDensity * v.orbit.vel.sqrMagnitude / 1000.0);  			//Debug.Log(v.orbit.vel.ToString() + " 0.5*" + sAverageCd.ToString() + "*" + (airDensity * v.orbit.vel.sqrMagnitude).ToString() + "/1000.0 = " + dragVector.ToString());  			if (OrbitManipulator.s_singleton != null)  				OrbitManipulator.s_singleton.AddManipulation (v' dragVector * sInterval);  		}  	}  }  
Magic Number,NBody,AtmosphereDecay,C:\repos\HoneyFox_NBody\AtmosphereDecay.cs,FixedUpdate,The following statement contains a magic number: if (v.packed == true && v.LandedOrSplashed == false) {  	double airDensity = FlightGlobals.getAtmDensity (FlightGlobals.getStaticPressure (v.GetWorldPos3D ()' v.mainBody));  	if (airDensity >= sAirDensityThreshold && v.mainBody.atmosphere == true && v.altitude <= v.mainBody.maxAtmosphereAltitude) {  		Vector3d dragVector = -v.orbit.vel.normalized * (float)(0.5 * sAverageCd * airDensity * v.orbit.vel.sqrMagnitude / 1000.0);  		//Debug.Log(v.orbit.vel.ToString() + " 0.5*" + sAverageCd.ToString() + "*" + (airDensity * v.orbit.vel.sqrMagnitude).ToString() + "/1000.0 = " + dragVector.ToString());  		if (OrbitManipulator.s_singleton != null)  			OrbitManipulator.s_singleton.AddManipulation (v' dragVector * sInterval);  	}  }  
Magic Number,NBody,AtmosphereDecay,C:\repos\HoneyFox_NBody\AtmosphereDecay.cs,FixedUpdate,The following statement contains a magic number: if (v.packed == true && v.LandedOrSplashed == false) {  	double airDensity = FlightGlobals.getAtmDensity (FlightGlobals.getStaticPressure (v.GetWorldPos3D ()' v.mainBody));  	if (airDensity >= sAirDensityThreshold && v.mainBody.atmosphere == true && v.altitude <= v.mainBody.maxAtmosphereAltitude) {  		Vector3d dragVector = -v.orbit.vel.normalized * (float)(0.5 * sAverageCd * airDensity * v.orbit.vel.sqrMagnitude / 1000.0);  		//Debug.Log(v.orbit.vel.ToString() + " 0.5*" + sAverageCd.ToString() + "*" + (airDensity * v.orbit.vel.sqrMagnitude).ToString() + "/1000.0 = " + dragVector.ToString());  		if (OrbitManipulator.s_singleton != null)  			OrbitManipulator.s_singleton.AddManipulation (v' dragVector * sInterval);  	}  }  
Magic Number,NBody,AtmosphereDecay,C:\repos\HoneyFox_NBody\AtmosphereDecay.cs,FixedUpdate,The following statement contains a magic number: if (airDensity >= sAirDensityThreshold && v.mainBody.atmosphere == true && v.altitude <= v.mainBody.maxAtmosphereAltitude) {  	Vector3d dragVector = -v.orbit.vel.normalized * (float)(0.5 * sAverageCd * airDensity * v.orbit.vel.sqrMagnitude / 1000.0);  	//Debug.Log(v.orbit.vel.ToString() + " 0.5*" + sAverageCd.ToString() + "*" + (airDensity * v.orbit.vel.sqrMagnitude).ToString() + "/1000.0 = " + dragVector.ToString());  	if (OrbitManipulator.s_singleton != null)  		OrbitManipulator.s_singleton.AddManipulation (v' dragVector * sInterval);  }  
Magic Number,NBody,AtmosphereDecay,C:\repos\HoneyFox_NBody\AtmosphereDecay.cs,FixedUpdate,The following statement contains a magic number: if (airDensity >= sAirDensityThreshold && v.mainBody.atmosphere == true && v.altitude <= v.mainBody.maxAtmosphereAltitude) {  	Vector3d dragVector = -v.orbit.vel.normalized * (float)(0.5 * sAverageCd * airDensity * v.orbit.vel.sqrMagnitude / 1000.0);  	//Debug.Log(v.orbit.vel.ToString() + " 0.5*" + sAverageCd.ToString() + "*" + (airDensity * v.orbit.vel.sqrMagnitude).ToString() + "/1000.0 = " + dragVector.ToString());  	if (OrbitManipulator.s_singleton != null)  		OrbitManipulator.s_singleton.AddManipulation (v' dragVector * sInterval);  }  
Magic Number,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,InitializePredictedLine,The following statement contains a magic number: predictionLineObj.layer = 9;  
Magic Number,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,InitializePredictedLine,The following statement contains a magic number: coordXObj.layer = 9;  
Magic Number,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,InitializePredictedLine,The following statement contains a magic number: coordYObj.layer = 9;  
Magic Number,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,InitializePredictedLine,The following statement contains a magic number: coordZObj.layer = 9;  
Magic Number,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,UpdatePredictedLine,The following statement contains a magic number: if (MapView.MapIsEnabled) {  	MapView mapCamera = (MapView)GameObject.FindObjectOfType (typeof(MapView));  	try {  		predictionLineRenderer.SetVertexCount (prevRefPositions.Count);  		predictionLineRenderer.enabled = true;  		predictionLineRenderer.useWorldSpace = true;  		predictionLineRenderer.SetWidth (0.0015f * MapView.MapCamera.Distance' 0.0015f * MapView.MapCamera.Distance);  		for (int i = 0; i < prevRefPositions.Count; i++) {  			predictionLineRenderer.SetPosition (i' ScaledSpace.LocalToScaledSpace (prevRefPositions [i] + prevVessel.mainBody.getPositionAtUT (Planetarium.GetUniversalTime ())));  		}  		coordXRenderer.enabled = true;  		coordXRenderer.SetVertexCount (2);  		coordXRenderer.SetWidth (0.002f * MapView.MapCamera.Distance' 0.002f * MapView.MapCamera.Distance);  		coordXRenderer.SetPosition (0' ScaledSpace.LocalToScaledSpace (Vector3.zero));  		coordXRenderer.SetPosition (1' ScaledSpace.LocalToScaledSpace (new Vector3 (1000000.0f' 0.0f' 0.0f)));  		coordYRenderer.enabled = true;  		coordYRenderer.SetVertexCount (2);  		coordYRenderer.SetWidth (0.002f * MapView.MapCamera.Distance' 0.002f * MapView.MapCamera.Distance);  		coordYRenderer.SetPosition (0' ScaledSpace.LocalToScaledSpace (Vector3.zero));  		coordYRenderer.SetPosition (1' ScaledSpace.LocalToScaledSpace (new Vector3 (0.0f' 1000000.0f' 0.0f)));  		coordZRenderer.enabled = true;  		coordZRenderer.SetVertexCount (2);  		coordZRenderer.SetWidth (0.002f * MapView.MapCamera.Distance' 0.002f * MapView.MapCamera.Distance);  		coordZRenderer.SetPosition (0' ScaledSpace.LocalToScaledSpace (Vector3.zero));  		coordZRenderer.SetPosition (1' ScaledSpace.LocalToScaledSpace (new Vector3 (0.0f' 0.0f' 1000000.0f)));  	}  	catch {  	}  }  else {  	predictionLineRenderer.enabled = false;  	coordXRenderer.enabled = false;  	coordYRenderer.enabled = false;  	coordZRenderer.enabled = false;  }  
Magic Number,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,UpdatePredictedLine,The following statement contains a magic number: if (MapView.MapIsEnabled) {  	MapView mapCamera = (MapView)GameObject.FindObjectOfType (typeof(MapView));  	try {  		predictionLineRenderer.SetVertexCount (prevRefPositions.Count);  		predictionLineRenderer.enabled = true;  		predictionLineRenderer.useWorldSpace = true;  		predictionLineRenderer.SetWidth (0.0015f * MapView.MapCamera.Distance' 0.0015f * MapView.MapCamera.Distance);  		for (int i = 0; i < prevRefPositions.Count; i++) {  			predictionLineRenderer.SetPosition (i' ScaledSpace.LocalToScaledSpace (prevRefPositions [i] + prevVessel.mainBody.getPositionAtUT (Planetarium.GetUniversalTime ())));  		}  		coordXRenderer.enabled = true;  		coordXRenderer.SetVertexCount (2);  		coordXRenderer.SetWidth (0.002f * MapView.MapCamera.Distance' 0.002f * MapView.MapCamera.Distance);  		coordXRenderer.SetPosition (0' ScaledSpace.LocalToScaledSpace (Vector3.zero));  		coordXRenderer.SetPosition (1' ScaledSpace.LocalToScaledSpace (new Vector3 (1000000.0f' 0.0f' 0.0f)));  		coordYRenderer.enabled = true;  		coordYRenderer.SetVertexCount (2);  		coordYRenderer.SetWidth (0.002f * MapView.MapCamera.Distance' 0.002f * MapView.MapCamera.Distance);  		coordYRenderer.SetPosition (0' ScaledSpace.LocalToScaledSpace (Vector3.zero));  		coordYRenderer.SetPosition (1' ScaledSpace.LocalToScaledSpace (new Vector3 (0.0f' 1000000.0f' 0.0f)));  		coordZRenderer.enabled = true;  		coordZRenderer.SetVertexCount (2);  		coordZRenderer.SetWidth (0.002f * MapView.MapCamera.Distance' 0.002f * MapView.MapCamera.Distance);  		coordZRenderer.SetPosition (0' ScaledSpace.LocalToScaledSpace (Vector3.zero));  		coordZRenderer.SetPosition (1' ScaledSpace.LocalToScaledSpace (new Vector3 (0.0f' 0.0f' 1000000.0f)));  	}  	catch {  	}  }  else {  	predictionLineRenderer.enabled = false;  	coordXRenderer.enabled = false;  	coordYRenderer.enabled = false;  	coordZRenderer.enabled = false;  }  
Magic Number,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,UpdatePredictedLine,The following statement contains a magic number: if (MapView.MapIsEnabled) {  	MapView mapCamera = (MapView)GameObject.FindObjectOfType (typeof(MapView));  	try {  		predictionLineRenderer.SetVertexCount (prevRefPositions.Count);  		predictionLineRenderer.enabled = true;  		predictionLineRenderer.useWorldSpace = true;  		predictionLineRenderer.SetWidth (0.0015f * MapView.MapCamera.Distance' 0.0015f * MapView.MapCamera.Distance);  		for (int i = 0; i < prevRefPositions.Count; i++) {  			predictionLineRenderer.SetPosition (i' ScaledSpace.LocalToScaledSpace (prevRefPositions [i] + prevVessel.mainBody.getPositionAtUT (Planetarium.GetUniversalTime ())));  		}  		coordXRenderer.enabled = true;  		coordXRenderer.SetVertexCount (2);  		coordXRenderer.SetWidth (0.002f * MapView.MapCamera.Distance' 0.002f * MapView.MapCamera.Distance);  		coordXRenderer.SetPosition (0' ScaledSpace.LocalToScaledSpace (Vector3.zero));  		coordXRenderer.SetPosition (1' ScaledSpace.LocalToScaledSpace (new Vector3 (1000000.0f' 0.0f' 0.0f)));  		coordYRenderer.enabled = true;  		coordYRenderer.SetVertexCount (2);  		coordYRenderer.SetWidth (0.002f * MapView.MapCamera.Distance' 0.002f * MapView.MapCamera.Distance);  		coordYRenderer.SetPosition (0' ScaledSpace.LocalToScaledSpace (Vector3.zero));  		coordYRenderer.SetPosition (1' ScaledSpace.LocalToScaledSpace (new Vector3 (0.0f' 1000000.0f' 0.0f)));  		coordZRenderer.enabled = true;  		coordZRenderer.SetVertexCount (2);  		coordZRenderer.SetWidth (0.002f * MapView.MapCamera.Distance' 0.002f * MapView.MapCamera.Distance);  		coordZRenderer.SetPosition (0' ScaledSpace.LocalToScaledSpace (Vector3.zero));  		coordZRenderer.SetPosition (1' ScaledSpace.LocalToScaledSpace (new Vector3 (0.0f' 0.0f' 1000000.0f)));  	}  	catch {  	}  }  else {  	predictionLineRenderer.enabled = false;  	coordXRenderer.enabled = false;  	coordYRenderer.enabled = false;  	coordZRenderer.enabled = false;  }  
Magic Number,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,UpdatePredictedLine,The following statement contains a magic number: try {  	predictionLineRenderer.SetVertexCount (prevRefPositions.Count);  	predictionLineRenderer.enabled = true;  	predictionLineRenderer.useWorldSpace = true;  	predictionLineRenderer.SetWidth (0.0015f * MapView.MapCamera.Distance' 0.0015f * MapView.MapCamera.Distance);  	for (int i = 0; i < prevRefPositions.Count; i++) {  		predictionLineRenderer.SetPosition (i' ScaledSpace.LocalToScaledSpace (prevRefPositions [i] + prevVessel.mainBody.getPositionAtUT (Planetarium.GetUniversalTime ())));  	}  	coordXRenderer.enabled = true;  	coordXRenderer.SetVertexCount (2);  	coordXRenderer.SetWidth (0.002f * MapView.MapCamera.Distance' 0.002f * MapView.MapCamera.Distance);  	coordXRenderer.SetPosition (0' ScaledSpace.LocalToScaledSpace (Vector3.zero));  	coordXRenderer.SetPosition (1' ScaledSpace.LocalToScaledSpace (new Vector3 (1000000.0f' 0.0f' 0.0f)));  	coordYRenderer.enabled = true;  	coordYRenderer.SetVertexCount (2);  	coordYRenderer.SetWidth (0.002f * MapView.MapCamera.Distance' 0.002f * MapView.MapCamera.Distance);  	coordYRenderer.SetPosition (0' ScaledSpace.LocalToScaledSpace (Vector3.zero));  	coordYRenderer.SetPosition (1' ScaledSpace.LocalToScaledSpace (new Vector3 (0.0f' 1000000.0f' 0.0f)));  	coordZRenderer.enabled = true;  	coordZRenderer.SetVertexCount (2);  	coordZRenderer.SetWidth (0.002f * MapView.MapCamera.Distance' 0.002f * MapView.MapCamera.Distance);  	coordZRenderer.SetPosition (0' ScaledSpace.LocalToScaledSpace (Vector3.zero));  	coordZRenderer.SetPosition (1' ScaledSpace.LocalToScaledSpace (new Vector3 (0.0f' 0.0f' 1000000.0f)));  }  catch {  }  
Magic Number,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,UpdatePredictedLine,The following statement contains a magic number: try {  	predictionLineRenderer.SetVertexCount (prevRefPositions.Count);  	predictionLineRenderer.enabled = true;  	predictionLineRenderer.useWorldSpace = true;  	predictionLineRenderer.SetWidth (0.0015f * MapView.MapCamera.Distance' 0.0015f * MapView.MapCamera.Distance);  	for (int i = 0; i < prevRefPositions.Count; i++) {  		predictionLineRenderer.SetPosition (i' ScaledSpace.LocalToScaledSpace (prevRefPositions [i] + prevVessel.mainBody.getPositionAtUT (Planetarium.GetUniversalTime ())));  	}  	coordXRenderer.enabled = true;  	coordXRenderer.SetVertexCount (2);  	coordXRenderer.SetWidth (0.002f * MapView.MapCamera.Distance' 0.002f * MapView.MapCamera.Distance);  	coordXRenderer.SetPosition (0' ScaledSpace.LocalToScaledSpace (Vector3.zero));  	coordXRenderer.SetPosition (1' ScaledSpace.LocalToScaledSpace (new Vector3 (1000000.0f' 0.0f' 0.0f)));  	coordYRenderer.enabled = true;  	coordYRenderer.SetVertexCount (2);  	coordYRenderer.SetWidth (0.002f * MapView.MapCamera.Distance' 0.002f * MapView.MapCamera.Distance);  	coordYRenderer.SetPosition (0' ScaledSpace.LocalToScaledSpace (Vector3.zero));  	coordYRenderer.SetPosition (1' ScaledSpace.LocalToScaledSpace (new Vector3 (0.0f' 1000000.0f' 0.0f)));  	coordZRenderer.enabled = true;  	coordZRenderer.SetVertexCount (2);  	coordZRenderer.SetWidth (0.002f * MapView.MapCamera.Distance' 0.002f * MapView.MapCamera.Distance);  	coordZRenderer.SetPosition (0' ScaledSpace.LocalToScaledSpace (Vector3.zero));  	coordZRenderer.SetPosition (1' ScaledSpace.LocalToScaledSpace (new Vector3 (0.0f' 0.0f' 1000000.0f)));  }  catch {  }  
Magic Number,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,UpdatePredictedLine,The following statement contains a magic number: try {  	predictionLineRenderer.SetVertexCount (prevRefPositions.Count);  	predictionLineRenderer.enabled = true;  	predictionLineRenderer.useWorldSpace = true;  	predictionLineRenderer.SetWidth (0.0015f * MapView.MapCamera.Distance' 0.0015f * MapView.MapCamera.Distance);  	for (int i = 0; i < prevRefPositions.Count; i++) {  		predictionLineRenderer.SetPosition (i' ScaledSpace.LocalToScaledSpace (prevRefPositions [i] + prevVessel.mainBody.getPositionAtUT (Planetarium.GetUniversalTime ())));  	}  	coordXRenderer.enabled = true;  	coordXRenderer.SetVertexCount (2);  	coordXRenderer.SetWidth (0.002f * MapView.MapCamera.Distance' 0.002f * MapView.MapCamera.Distance);  	coordXRenderer.SetPosition (0' ScaledSpace.LocalToScaledSpace (Vector3.zero));  	coordXRenderer.SetPosition (1' ScaledSpace.LocalToScaledSpace (new Vector3 (1000000.0f' 0.0f' 0.0f)));  	coordYRenderer.enabled = true;  	coordYRenderer.SetVertexCount (2);  	coordYRenderer.SetWidth (0.002f * MapView.MapCamera.Distance' 0.002f * MapView.MapCamera.Distance);  	coordYRenderer.SetPosition (0' ScaledSpace.LocalToScaledSpace (Vector3.zero));  	coordYRenderer.SetPosition (1' ScaledSpace.LocalToScaledSpace (new Vector3 (0.0f' 1000000.0f' 0.0f)));  	coordZRenderer.enabled = true;  	coordZRenderer.SetVertexCount (2);  	coordZRenderer.SetWidth (0.002f * MapView.MapCamera.Distance' 0.002f * MapView.MapCamera.Distance);  	coordZRenderer.SetPosition (0' ScaledSpace.LocalToScaledSpace (Vector3.zero));  	coordZRenderer.SetPosition (1' ScaledSpace.LocalToScaledSpace (new Vector3 (0.0f' 0.0f' 1000000.0f)));  }  catch {  }  
Magic Number,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,UpdatePredictedLine,The following statement contains a magic number: coordXRenderer.SetVertexCount (2);  
Magic Number,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,UpdatePredictedLine,The following statement contains a magic number: coordYRenderer.SetVertexCount (2);  
Magic Number,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,UpdatePredictedLine,The following statement contains a magic number: coordZRenderer.SetVertexCount (2);  
Magic Number,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,Iterate,The following statement contains a magic number: if (prevRefPositions.Count >= 30000)  	return;  
Magic Number,NBody,NBody,C:\repos\HoneyFox_NBody\NBody.cs,Iterate,The following statement contains a magic number: if (totalIndex % 50 == 0)  	prevRefPositions.Add (newRefPosition);  
Magic Number,NBody,WarpableEngineThrottleGUI,C:\repos\HoneyFox_NBody\WarpableEngine.cs,OnGUI,The following statement contains a magic number: if (HighLogic.LoadedSceneIsFlight && activated && engines.Count > 0) {  	GUI.skin = HighLogic.Skin;  	windowRect = GUILayout.Window (22113141' windowRect' DrawGUI' "Warpable Engines"' GUILayout.ExpandWidth (true)' GUILayout.ExpandHeight (true));  }  
Magic Number,NBody,WarpableEngineThrottleGUI,C:\repos\HoneyFox_NBody\WarpableEngine.cs,OnGUI,The following statement contains a magic number: windowRect = GUILayout.Window (22113141' windowRect' DrawGUI' "Warpable Engines"' GUILayout.ExpandWidth (true)' GUILayout.ExpandHeight (true));  
Magic Number,NBody,WarpableEngineThrottleGUI,C:\repos\HoneyFox_NBody\WarpableEngine.cs,DrawGUI,The following statement contains a magic number: foreach (WarpableEngine we in engines) {  	string title = we.part.partInfo.title;  	if (title.Length >= 33)  		title = title.Substring (0' 29) + "...";  	GUILayout.Label (title' GUILayout.MaxWidth (200));  	we.throttle = Mathf.RoundToInt (GUILayout.HorizontalSlider (we.throttle' 0.0f' 100.0f' GUILayout.Width (200)));  	if (killThrottle)  		we.throttle = 0.0f;  	if (fullThrottle)  		we.throttle = 100.0f;  }  
Magic Number,NBody,WarpableEngineThrottleGUI,C:\repos\HoneyFox_NBody\WarpableEngine.cs,DrawGUI,The following statement contains a magic number: foreach (WarpableEngine we in engines) {  	string title = we.part.partInfo.title;  	if (title.Length >= 33)  		title = title.Substring (0' 29) + "...";  	GUILayout.Label (title' GUILayout.MaxWidth (200));  	we.throttle = Mathf.RoundToInt (GUILayout.HorizontalSlider (we.throttle' 0.0f' 100.0f' GUILayout.Width (200)));  	if (killThrottle)  		we.throttle = 0.0f;  	if (fullThrottle)  		we.throttle = 100.0f;  }  
Magic Number,NBody,WarpableEngineThrottleGUI,C:\repos\HoneyFox_NBody\WarpableEngine.cs,DrawGUI,The following statement contains a magic number: foreach (WarpableEngine we in engines) {  	string title = we.part.partInfo.title;  	if (title.Length >= 33)  		title = title.Substring (0' 29) + "...";  	GUILayout.Label (title' GUILayout.MaxWidth (200));  	we.throttle = Mathf.RoundToInt (GUILayout.HorizontalSlider (we.throttle' 0.0f' 100.0f' GUILayout.Width (200)));  	if (killThrottle)  		we.throttle = 0.0f;  	if (fullThrottle)  		we.throttle = 100.0f;  }  
Magic Number,NBody,WarpableEngineThrottleGUI,C:\repos\HoneyFox_NBody\WarpableEngine.cs,DrawGUI,The following statement contains a magic number: foreach (WarpableEngine we in engines) {  	string title = we.part.partInfo.title;  	if (title.Length >= 33)  		title = title.Substring (0' 29) + "...";  	GUILayout.Label (title' GUILayout.MaxWidth (200));  	we.throttle = Mathf.RoundToInt (GUILayout.HorizontalSlider (we.throttle' 0.0f' 100.0f' GUILayout.Width (200)));  	if (killThrottle)  		we.throttle = 0.0f;  	if (fullThrottle)  		we.throttle = 100.0f;  }  
Magic Number,NBody,WarpableEngineThrottleGUI,C:\repos\HoneyFox_NBody\WarpableEngine.cs,DrawGUI,The following statement contains a magic number: if (title.Length >= 33)  	title = title.Substring (0' 29) + "...";  
Magic Number,NBody,WarpableEngineThrottleGUI,C:\repos\HoneyFox_NBody\WarpableEngine.cs,DrawGUI,The following statement contains a magic number: if (title.Length >= 33)  	title = title.Substring (0' 29) + "...";  
Magic Number,NBody,WarpableEngineThrottleGUI,C:\repos\HoneyFox_NBody\WarpableEngine.cs,DrawGUI,The following statement contains a magic number: title = title.Substring (0' 29) + "...";  
Magic Number,NBody,WarpableEngineThrottleGUI,C:\repos\HoneyFox_NBody\WarpableEngine.cs,DrawGUI,The following statement contains a magic number: GUILayout.Label (title' GUILayout.MaxWidth (200));  
Magic Number,NBody,WarpableEngineThrottleGUI,C:\repos\HoneyFox_NBody\WarpableEngine.cs,DrawGUI,The following statement contains a magic number: we.throttle = Mathf.RoundToInt (GUILayout.HorizontalSlider (we.throttle' 0.0f' 100.0f' GUILayout.Width (200)));  
Magic Number,NBody,WarpableEngineThrottleGUI,C:\repos\HoneyFox_NBody\WarpableEngine.cs,DrawGUI,The following statement contains a magic number: GUI.DragWindow (new Rect (0' 0' 200' 20));  
Magic Number,NBody,WarpableEngineThrottleGUI,C:\repos\HoneyFox_NBody\WarpableEngine.cs,DrawGUI,The following statement contains a magic number: GUI.DragWindow (new Rect (0' 0' 200' 20));  
Magic Number,NBody,WarpableEngine,C:\repos\HoneyFox_NBody\WarpableEngine.cs,FixedUpdate,The following statement contains a magic number: if (TimeWarp.WarpMode == TimeWarp.Modes.HIGH && TimeWarp.CurrentRate > TimeWarp.MaxPhysicsRate) {  	// Warping.  	Vector3d totalAccOnVessel = WarpableEngine.FixedUpdateFor (this' this.throttle);  	if (totalAccOnVessel.magnitude > 0.0001) {  		if (OrbitManipulator.s_singleton != null)  			OrbitManipulator.s_singleton.AddManipulation (vessel' new Vector3d (totalAccOnVessel.x' totalAccOnVessel.z' totalAccOnVessel.y));  	}  	lastUpdateIsWarping = true;  }  else {  	// Reset the throttle after exiting the warp.  	if (lastUpdateIsWarping == true) {  		if (WarpableEngineThrottleGUI.s_singleton.killThrottleWhenExitingTimeWarp)  			throttle = 0f;  		//engine.DeactivatePowerFX();  	}  	lastUpdateIsWarping = false;  	//if(isEngineFX == false)  	//{  	//    if (engine.part.Modules.Contains("FXModuleAnimateThrottle"))  	//    {  	//        FXModuleAnimateThrottle m = engine.part.Modules["FXModuleAnimateThrottle"] as FXModuleAnimateThrottle;  	//        m.isEnabled = true;  	//    }  	//}  	//else  	//{  	//    if (engineFX.part.Modules.Contains("FXModuleAnimateThrottle"))  	//    {  	//        FXModuleAnimateThrottle m = engineFX.part.Modules["FXModuleAnimateThrottle"] as FXModuleAnimateThrottle;  	//        m.isEnabled = true;  	//    }  	//}  }  
Magic Number,NBody,WarpableEngine,C:\repos\HoneyFox_NBody\WarpableEngine.cs,FixedUpdate,The following statement contains a magic number: if (totalAccOnVessel.magnitude > 0.0001) {  	if (OrbitManipulator.s_singleton != null)  		OrbitManipulator.s_singleton.AddManipulation (vessel' new Vector3d (totalAccOnVessel.x' totalAccOnVessel.z' totalAccOnVessel.y));  }  
