Implementation smell,Namespace,Class,File,Method,Description
Long Method,BrightcoveSDK.UI,PlaylistAddUpdate,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\UI\PlaylistAddUpdate.cs,CreateChildControls,The method has 113 lines of code.
Long Method,BrightcoveSDK.UI,VideoAddUpdate,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\UI\VideoAddUpdate.cs,CreateChildControls,The method has 124 lines of code.
Complex Method,BrightcoveSDK,BCAPI,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\BCAPI.cs,MultipleQueryHandler,Cyclomatic complexity of the method is 14
Complex Method,BrightcoveSDK.Media,BCPlaylistExtensions,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\Entities\BCPlaylist.cs,ToJSON,Cyclomatic complexity of the method is 18
Complex Method,BrightcoveSDK.Media,BCVideoExtensions,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\Entities\BCVideo.cs,ToJSON,Cyclomatic complexity of the method is 17
Complex Method,BrightcoveSDK.UI,UpdatePlayer,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\UI\UpdatePlayer.cs,AddAttributesToRender,Cyclomatic complexity of the method is 12
Long Parameter List,BrightcoveSDK.Utils,EmbedCode,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\Utils\EmbedCode.cs,GetVideoPlayerEmbedCode,The method has 8 parameters.
Long Parameter List,BrightcoveSDK.Utils,EmbedCode,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\Utils\EmbedCode.cs,GetTabbedPlayerEmbedCode,The method has 9 parameters.
Long Parameter List,BrightcoveSDK.Utils,EmbedCode,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\Utils\EmbedCode.cs,GetVideoListPlayerEmbedCode,The method has 9 parameters.
Long Parameter List,BrightcoveSDK.Utils,EmbedCode,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\Utils\EmbedCode.cs,GetComboBoxPlayerEmbedCode,The method has 9 parameters.
Long Parameter List,BrightcoveSDK.Utils,EmbedCode,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\Utils\EmbedCode.cs,GetEmbedCode,The method has 11 parameters.
Long Statement,BrightcoveSDK.HTTP,BCAPIRequest,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\HTTP\BCAPIRequest.cs,ExecuteWrite,The length of the statement  "	HttpWebResponse webResponse = PostRequests.MultipartFormDataPost (a.WriteURL.Value' "BCAPI SDK Write Request"' postParams); " is 123.
Long Statement,BrightcoveSDK.HTTP,BCAPIRequest,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\HTTP\BCAPIRequest.cs,ExecuteWrite,The length of the statement  "	jsonResult = jsonResult.Replace ("\"error\": null"' "\"error\": { \"name\" : null' \"message\" : null' \"code\" : null }"); " is 123.
Long Statement,BrightcoveSDK.HTTP,BCAPIRequest,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\HTTP\BCAPIRequest.cs,ExecuteWrite,The length of the statement  "	HttpWebResponse webResponse = PostRequests.MultipartFormDataPost (a.WriteURL.Value' "BCAPI SDK Write Request"' postParams); " is 123.
Long Statement,BrightcoveSDK.HTTP,BCAPIRequest,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\HTTP\BCAPIRequest.cs,ExecuteWrite,The length of the statement  "	jsonResult = jsonResult.Replace ("\"error\": null"' "\"error\": { \"name\" : null' \"message\" : null' \"code\" : null }"); " is 123.
Long Statement,BrightcoveSDK.HTTP,PostRequests,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\HTTP\PostRequests.cs,GetMultipartFormData,The length of the statement  "			string header = string.Format ("--{0}\r\nContent-Disposition: form-data; name=\"{1}\"; filename=\"{2}\";\r\nContent-Type: {3}\r\n\r\n"' boundary' param.Key' fileToUpload.FileName ?? param.Key' fileToUpload.ContentType ?? "application/octet-stream"); " is 249.
Long Statement,BrightcoveSDK.HTTP,PostRequests,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\HTTP\PostRequests.cs,GetMultipartFormData,The length of the statement  "			string postData = string.Format ("--{0}\r\nContent-Disposition: form-data; name=\"{1}\"\r\n\r\n{2}\r\n"' boundary' param.Key' param.Value); " is 139.
Long Statement,BrightcoveSDK.JSON,Converter,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\JSON\Converter.cs,Serialize,The length of the statement  "	System.Runtime.Serialization.Json.DataContractJsonSerializer serializer = new System.Runtime.Serialization.Json.DataContractJsonSerializer (obj.GetType ()); " is 156.
Long Statement,BrightcoveSDK.JSON,Converter,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\JSON\Converter.cs,Deserialize,The length of the statement  "	System.Runtime.Serialization.Json.DataContractJsonSerializer serializer = new System.Runtime.Serialization.Json.DataContractJsonSerializer (obj.GetType ()); " is 156.
Long Statement,BrightcoveSDK.Utils,EmbedCode,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\Utils\EmbedCode.cs,GetVideoPlayerEmbedCode,The length of the statement  "	return GetEmbedCode (PlayerID' VideoID' PlayerPlaylistType.None' -1' null' height' width' BackgroundColor' AutoStart' WMode' objectTagID); " is 138.
Long Statement,BrightcoveSDK.Utils,EmbedCode,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\Utils\EmbedCode.cs,GetTabbedPlayerEmbedCode,The length of the statement  "	return GetEmbedCode (PlayerID' VideoID' PlayerPlaylistType.Tabbed' -1' PlaylistIDs' height' width' BackgroundColor' AutoStart' WMode' objectTagID); " is 147.
Long Statement,BrightcoveSDK.Utils,EmbedCode,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\Utils\EmbedCode.cs,GetVideoListPlayerEmbedCode,The length of the statement  "	return GetEmbedCode (PlayerID' VideoID' PlayerPlaylistType.VideoList' PlaylistID' null' height' width' BackgroundColor' AutoStart' WMode' objectTagID); " is 151.
Long Statement,BrightcoveSDK.Utils,EmbedCode,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\Utils\EmbedCode.cs,GetComboBoxPlayerEmbedCode,The length of the statement  "	return GetEmbedCode (PlayerID' VideoID' PlayerPlaylistType.ComboBox' -1' PlaylistIDs' height' width' BackgroundColor' AutoStart' WMode' objectTagID); " is 149.
Long Statement,BrightcoveSDK.Utils,EmbedCode,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\Utils\EmbedCode.cs,GetEmbedCode,The length of the statement  "		embed.AppendLine ("<!-- By use of this code snippet' I agree to the Brightcove Publisher T and C found at https://accounts.brightcove.com/en/terms-and-conditions/. -->"); " is 170.
Long Statement,BrightcoveSDK.Utils,EmbedCode,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\Utils\EmbedCode.cs,GetEmbedCode,The length of the statement  "		embed.AppendLine ("<script language=\"JavaScript\" type=\"text/javascript\" src=\"http://admin.brightcove.com/js/BrightcoveExperiences.js\"></script>"); " is 152.
Long Statement,BrightcoveSDK.UI,UpdatePlayer,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\UI\UpdatePlayer.cs,AddAttributesToRender,The length of the statement  "		onClickCall.Append ("'' '" + vp.ClientID + "'' '" + PlaylistTabString + "'' '" + PlaylistComboString + "'' '" + VideoList.ToString () + "'"); " is 141.
Long Statement,BrightcoveSDK.UI,VideoPlayer,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\UI\VideoPlayer.cs,OnPreRender,The length of the statement  "		Page.ClientScript.RegisterClientScriptInclude ("BCExperiences"' "http://admin.brightcove.com/js/BrightcoveExperiences.js"); " is 123.
Long Statement,BrightcoveSDK.UI,VideoPlayer,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\UI\VideoPlayer.cs,CreateChildControls,The length of the statement  "			litScript.Text = EmbedCode.GetTabbedPlayerEmbedCode (PlayerID' VideoID' PlaylistTabs.GetValues ()' Height' Width' BackColor' AutoStart' qWMode' uniqueID); " is 154.
Long Statement,BrightcoveSDK.UI,VideoPlayer,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\UI\VideoPlayer.cs,CreateChildControls,The length of the statement  "			litScript.Text = EmbedCode.GetComboBoxPlayerEmbedCode (PlayerID' VideoID' PlaylistCombos.GetValues ()' Height' Width' BackColor' AutoStart' qWMode' uniqueID); " is 158.
Long Statement,BrightcoveSDK.UI,VideoPlayer,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\UI\VideoPlayer.cs,CreateChildControls,The length of the statement  "			EmbedCode.GetVideoListPlayerEmbedCode (PlayerID' VideoID' VideoList' Height' Width' BackColor' AutoStart' qWMode' uniqueID); " is 124.
Long Statement,BrightcoveSDK.UI,VideoPlayer,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\UI\VideoPlayer.cs,CreateChildControls,The length of the statement  "			litScript.Text = EmbedCode.GetVideoPlayerEmbedCode (PlayerID' VideoID' Height' Width' BackColor' AutoStart' qWMode' uniqueID); " is 126.
Magic Number,BrightcoveSDK,BCAPI,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\BCAPI.cs,MultipleQueryHandler,The following statement contains a magic number: try {  	//set some global request paramameters  	if (!reqparams.ContainsKey ("page_number")) {  		reqparams.Add ("page_number"' "0");  	}  	//set if not set or   	if (!reqparams.ContainsKey ("page_size")) {  		qr.MaxToGet = -1;  	}  	else {  		qr.MaxToGet = Convert.ToInt32 (reqparams ["page_size"]);  	}  	//get initial query  	double maxPageNum = 0;  	QueryResultPair qrp = BCAPIRequest.ExecuteRead (reqparams' account);  	//convert the result for deserialization  	qrp.JsonResult = qrp.JsonResult.Replace ("\"items\":"' "\"" + itemType.ToString () + "\":");  	qr.QueryResults.Add (qrp);  	qr.Merge (JSON.Converter.Deserialize<BCQueryResult> (qrp.JsonResult));  	//make sure you get the correct page num  	if (qr.TotalCount > 0) {  		//if you want all use the total count to calculate the number of pages  		if (qr.MaxToGet.Equals (-1)) {  			maxPageNum = Math.Ceiling ((double)(qr.TotalCount / 100));  		}  		//or just use the max you want to calculate the number of pages  		else {  			maxPageNum = Math.Ceiling ((double)(qr.MaxToGet / 100));  		}  	}  	//if there are more to get move to next page and keep getting them  	for (int pageNum = 1; pageNum <= maxPageNum; pageNum++) {  		//update page each iteration  		reqparams ["page_number"] = pageNum.ToString ();  		QueryResultPair qrp2 = BCAPIRequest.ExecuteRead (reqparams' account);  		//convert the result for deserialization  		qrp2.JsonResult = qrp2.JsonResult.Replace ("\"items\":"' "\"" + itemType.ToString () + "\":");  		qr.QueryResults.Add (qrp2);  		qr.Merge (JSON.Converter.Deserialize<BCQueryResult> (qrp2.JsonResult));  	}  	//sorting on our end  	if (itemType.Equals (BCObjectType.videos) && reqparams.ContainsKey ("sort_by")) {  		//PUBLISH_DATE'   		if (reqparams ["sort_by"].Equals ("PUBLISH_DATE")) {  			qr.Videos.Sort (BCVideo.PublishDateComparison);  		}  		//PLAYS_TOTAL'   		else if (reqparams ["sort_by"].Equals ("PLAYS_TOTAL")) {  			qr.Videos.Sort (BCVideo.TotalPlaysComparison);  		}  		//PLAYS_TRAILING_WEEK  		else if (reqparams ["sort_by"].Equals ("PLAYS_TRAILING_WEEK")) {  			qr.Videos.Sort (BCVideo.PlaysTrailingComparison);  		}  		//MODIFIED_DATE'  		else if (reqparams ["sort_by"].Equals ("MODIFIED_DATE")) {  			qr.Videos.Sort (BCVideo.ModifiedDateComparison);  		}  		//CREATION_DATE'   		else {  			qr.Videos.Sort (BCVideo.CreationDateComparison);  		}  		//if they want asc  		if (reqparams ["sort_order"].Equals ("DESC")) {  			qr.Videos.Reverse ();  		}  		//trim if specified  		if (qr.Videos.Count > qr.MaxToGet && !qr.MaxToGet.Equals (-1) && qr.MaxToGet < qr.TotalCount) {  			List<BCVideo> vidTemp = qr.Videos.GetRange (0' Convert.ToInt32 (qr.MaxToGet));  			qr.Videos.Clear ();  			qr.Videos.AddRange (vidTemp);  		}  	}  }  catch (Exception ex) {  	throw new Exception (ex.ToString ());  }  
Magic Number,BrightcoveSDK,BCAPI,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\BCAPI.cs,MultipleQueryHandler,The following statement contains a magic number: try {  	//set some global request paramameters  	if (!reqparams.ContainsKey ("page_number")) {  		reqparams.Add ("page_number"' "0");  	}  	//set if not set or   	if (!reqparams.ContainsKey ("page_size")) {  		qr.MaxToGet = -1;  	}  	else {  		qr.MaxToGet = Convert.ToInt32 (reqparams ["page_size"]);  	}  	//get initial query  	double maxPageNum = 0;  	QueryResultPair qrp = BCAPIRequest.ExecuteRead (reqparams' account);  	//convert the result for deserialization  	qrp.JsonResult = qrp.JsonResult.Replace ("\"items\":"' "\"" + itemType.ToString () + "\":");  	qr.QueryResults.Add (qrp);  	qr.Merge (JSON.Converter.Deserialize<BCQueryResult> (qrp.JsonResult));  	//make sure you get the correct page num  	if (qr.TotalCount > 0) {  		//if you want all use the total count to calculate the number of pages  		if (qr.MaxToGet.Equals (-1)) {  			maxPageNum = Math.Ceiling ((double)(qr.TotalCount / 100));  		}  		//or just use the max you want to calculate the number of pages  		else {  			maxPageNum = Math.Ceiling ((double)(qr.MaxToGet / 100));  		}  	}  	//if there are more to get move to next page and keep getting them  	for (int pageNum = 1; pageNum <= maxPageNum; pageNum++) {  		//update page each iteration  		reqparams ["page_number"] = pageNum.ToString ();  		QueryResultPair qrp2 = BCAPIRequest.ExecuteRead (reqparams' account);  		//convert the result for deserialization  		qrp2.JsonResult = qrp2.JsonResult.Replace ("\"items\":"' "\"" + itemType.ToString () + "\":");  		qr.QueryResults.Add (qrp2);  		qr.Merge (JSON.Converter.Deserialize<BCQueryResult> (qrp2.JsonResult));  	}  	//sorting on our end  	if (itemType.Equals (BCObjectType.videos) && reqparams.ContainsKey ("sort_by")) {  		//PUBLISH_DATE'   		if (reqparams ["sort_by"].Equals ("PUBLISH_DATE")) {  			qr.Videos.Sort (BCVideo.PublishDateComparison);  		}  		//PLAYS_TOTAL'   		else if (reqparams ["sort_by"].Equals ("PLAYS_TOTAL")) {  			qr.Videos.Sort (BCVideo.TotalPlaysComparison);  		}  		//PLAYS_TRAILING_WEEK  		else if (reqparams ["sort_by"].Equals ("PLAYS_TRAILING_WEEK")) {  			qr.Videos.Sort (BCVideo.PlaysTrailingComparison);  		}  		//MODIFIED_DATE'  		else if (reqparams ["sort_by"].Equals ("MODIFIED_DATE")) {  			qr.Videos.Sort (BCVideo.ModifiedDateComparison);  		}  		//CREATION_DATE'   		else {  			qr.Videos.Sort (BCVideo.CreationDateComparison);  		}  		//if they want asc  		if (reqparams ["sort_order"].Equals ("DESC")) {  			qr.Videos.Reverse ();  		}  		//trim if specified  		if (qr.Videos.Count > qr.MaxToGet && !qr.MaxToGet.Equals (-1) && qr.MaxToGet < qr.TotalCount) {  			List<BCVideo> vidTemp = qr.Videos.GetRange (0' Convert.ToInt32 (qr.MaxToGet));  			qr.Videos.Clear ();  			qr.Videos.AddRange (vidTemp);  		}  	}  }  catch (Exception ex) {  	throw new Exception (ex.ToString ());  }  
Magic Number,BrightcoveSDK,BCAPI,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\BCAPI.cs,MultipleQueryHandler,The following statement contains a magic number: if (qr.TotalCount > 0) {  	//if you want all use the total count to calculate the number of pages  	if (qr.MaxToGet.Equals (-1)) {  		maxPageNum = Math.Ceiling ((double)(qr.TotalCount / 100));  	}  	//or just use the max you want to calculate the number of pages  	else {  		maxPageNum = Math.Ceiling ((double)(qr.MaxToGet / 100));  	}  }  
Magic Number,BrightcoveSDK,BCAPI,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\BCAPI.cs,MultipleQueryHandler,The following statement contains a magic number: if (qr.TotalCount > 0) {  	//if you want all use the total count to calculate the number of pages  	if (qr.MaxToGet.Equals (-1)) {  		maxPageNum = Math.Ceiling ((double)(qr.TotalCount / 100));  	}  	//or just use the max you want to calculate the number of pages  	else {  		maxPageNum = Math.Ceiling ((double)(qr.MaxToGet / 100));  	}  }  
Magic Number,BrightcoveSDK,BCAPI,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\BCAPI.cs,MultipleQueryHandler,The following statement contains a magic number: if (qr.MaxToGet.Equals (-1)) {  	maxPageNum = Math.Ceiling ((double)(qr.TotalCount / 100));  }  //or just use the max you want to calculate the number of pages  else {  	maxPageNum = Math.Ceiling ((double)(qr.MaxToGet / 100));  }  
Magic Number,BrightcoveSDK,BCAPI,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\BCAPI.cs,MultipleQueryHandler,The following statement contains a magic number: if (qr.MaxToGet.Equals (-1)) {  	maxPageNum = Math.Ceiling ((double)(qr.TotalCount / 100));  }  //or just use the max you want to calculate the number of pages  else {  	maxPageNum = Math.Ceiling ((double)(qr.MaxToGet / 100));  }  
Magic Number,BrightcoveSDK,BCAPI,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\BCAPI.cs,MultipleQueryHandler,The following statement contains a magic number: maxPageNum = Math.Ceiling ((double)(qr.TotalCount / 100));  
Magic Number,BrightcoveSDK,BCAPI,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\BCAPI.cs,MultipleQueryHandler,The following statement contains a magic number: maxPageNum = Math.Ceiling ((double)(qr.MaxToGet / 100));  
Magic Number,BrightcoveSDK.Media,BCObject,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\Entities\BCObject.cs,DateFromUnix,The following statement contains a magic number: return new DateTime (1970' 1' 1' 0' 0' 0).AddSeconds (secs);  
Magic Number,BrightcoveSDK.Media,BCObject,C:\repos\BrightcoveOS_Video-Cloud-SharePoint-2010-Integration\src\SDK\BrightcoveSDK\Entities\BCObject.cs,DateToUnix,The following statement contains a magic number: return Convert.ToString (span.TotalSeconds * 1000);  
