Implementation smell,Namespace,Class,File,Method,Description
Long Statement,TestFx.SpecK.Tests.Exceptions,ExceptionAssertionTest,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Exceptions\ExceptionAssertionTest.cs,AssertResults,The length of the statement  "      testResults[5].HasFailed ().HasRelativeId ("Custom failing assertion").HasFailingOperations ("Throws exception with special properties"); " is 137.
Long Statement,TestFx.SpecK.Tests.Setups,SimpleSetupExecutionTest,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Setups\SimpleSetupExecutionTest.cs,AssertResults,The length of the statement  "        A.CallTo (() => SetupAction (A<ITestContext<object>>.That.Matches (x => x.Subject.Equals (Subject1)))).MustHaveHappened (); " is 123.
Long Statement,TestFx.SpecK.Tests.Setups,SimpleSetupExecutionTest,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Setups\SimpleSetupExecutionTest.cs,AssertResults,The length of the statement  "        A.CallTo (() => CleanupAction (A<ITestContext<object>>.That.Matches (x => x.Subject.Equals (Subject1)))).MustHaveHappened (); " is 125.
Long Statement,TestFx.SpecK.Tests.Setups,SimpleSetupExecutionTest,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Setups\SimpleSetupExecutionTest.cs,AssertResults,The length of the statement  "        A.CallTo (() => SetupAction (A<ITestContext<object>>.That.Matches (x => x.Subject.Equals (Subject2)))).MustHaveHappened (); " is 123.
Long Statement,TestFx.SpecK.Tests.Setups,SimpleSetupExecutionTest,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Setups\SimpleSetupExecutionTest.cs,AssertResults,The length of the statement  "        A.CallTo (() => CleanupAction (A<ITestContext<object>>.That.Matches (x => x.Subject.Equals (Subject2)))).MustHaveHappened (); " is 125.
Virtual Method Call from Constructor,TestFx.SpecK.Tests.Simple,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Simple\InconclusiveTest.cs,DomainSpec,The constructor "DomainSpec" calls a virtual method "CheckSomething".
Magic Number,TestFx.SpecK.Tests.Async,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Async\AsyncTest.cs,DomainSpec,The following statement contains a magic number: SpecifyAsync (async x => await Task.Delay (20))              .Case ("Action"' _ => _                  .It ("waits"' x => x.Duration.Milliseconds.Should ().BeGreaterOrEqualTo (20)));
Magic Number,TestFx.SpecK.Tests.Async,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Async\AsyncTest.cs,DomainSpec,The following statement contains a magic number: SpecifyAsync (async x => await Task.Delay (20))              .Case ("Action"' _ => _                  .It ("waits"' x => x.Duration.Milliseconds.Should ().BeGreaterOrEqualTo (20)));
Magic Number,TestFx.SpecK.Tests.Async,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Async\AsyncTest.cs,DomainSpec,The following statement contains a magic number: SpecifyAsync (async x => await Task.Delay (20).ContinueWith (task => 10))              .Case ("Func"' _ => _                  .ItReturns (x => 10));
Magic Number,TestFx.SpecK.Tests.Async,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Async\AsyncTest.cs,DomainSpec,The following statement contains a magic number: SpecifyAsync (async x => await Task.Delay (20).ContinueWith (task => 10))              .Case ("Func"' _ => _                  .ItReturns (x => 10));
Magic Number,TestFx.SpecK.Tests.Async,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Async\AsyncTest.cs,DomainSpec,The following statement contains a magic number: SpecifyAsync (async x => await Task.Delay (20).ContinueWith (task => 10))              .Case ("Func"' _ => _                  .ItReturns (x => 10));
Magic Number,TestFx.SpecK.Tests.Combinatorics,PermutationsTest,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Combinatorics\PermutationsTest.cs,AssertResults,The following statement contains a magic number: testResult[2].HasPassed ().HasRelativeId ("Object = Object' A = 2' B = 3");
Magic Number,TestFx.SpecK.Tests.Combinatorics,PermutationsTest,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Combinatorics\PermutationsTest.cs,AssertResults,The following statement contains a magic number: testResult[3].HasFailed ().HasRelativeId ("Object = Object' A = 2' B = 4");
Magic Number,TestFx.SpecK.Tests.Combinatorics,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Combinatorics\PermutationsTest.cs,DomainSpec,The following statement contains a magic number: Specify (x => A + B)              .DefaultCase (_ => _                  .WithPermutations (                      new { Object = default(object)' A = default(int)' B = default(int) }'                      x => x.Object' new[] { new object () }'                      x => x.A' new[] { 1' 2 }'                      x => x.B' new[] { 3' 4 })                  .Given (x => A = x.Sequence.A)                  .Given (x => B = x.Sequence.B)                  .It ("returns result"' x => x.Result.Should ().Be (5)));
Magic Number,TestFx.SpecK.Tests.Combinatorics,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Combinatorics\PermutationsTest.cs,DomainSpec,The following statement contains a magic number: Specify (x => A + B)              .DefaultCase (_ => _                  .WithPermutations (                      new { Object = default(object)' A = default(int)' B = default(int) }'                      x => x.Object' new[] { new object () }'                      x => x.A' new[] { 1' 2 }'                      x => x.B' new[] { 3' 4 })                  .Given (x => A = x.Sequence.A)                  .Given (x => B = x.Sequence.B)                  .It ("returns result"' x => x.Result.Should ().Be (5)));
Magic Number,TestFx.SpecK.Tests.Combinatorics,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Combinatorics\PermutationsTest.cs,DomainSpec,The following statement contains a magic number: Specify (x => A + B)              .DefaultCase (_ => _                  .WithPermutations (                      new { Object = default(object)' A = default(int)' B = default(int) }'                      x => x.Object' new[] { new object () }'                      x => x.A' new[] { 1' 2 }'                      x => x.B' new[] { 3' 4 })                  .Given (x => A = x.Sequence.A)                  .Given (x => B = x.Sequence.B)                  .It ("returns result"' x => x.Result.Should ().Be (5)));
Magic Number,TestFx.SpecK.Tests.Combinatorics,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Combinatorics\PermutationsTest.cs,DomainSpec,The following statement contains a magic number: Specify (x => A + B)              .DefaultCase (_ => _                  .WithPermutations (                      new { Object = default(object)' A = default(int)' B = default(int) }'                      x => x.Object' new[] { new object () }'                      x => x.A' new[] { 1' 2 }'                      x => x.B' new[] { 3' 4 })                  .Given (x => A = x.Sequence.A)                  .Given (x => B = x.Sequence.B)                  .It ("returns result"' x => x.Result.Should ().Be (5)));
Magic Number,TestFx.SpecK.Tests.Combinatorics,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Combinatorics\PermutationsTest.cs,DomainSpec,The following statement contains a magic number: Specify (x => A + B)              .DefaultCase (_ => _                  .WithSequences (                      "First sequence"' new { A = 1' B = 2' Result = 3 }'                      "Second sequence"' new { A = 2' B = 3' Result = 6 })                  .Given (x => A = x.Sequence.A)                  .Given (x => B = x.Sequence.B)                  .It ("returns result"' x => x.Result.Should ().Be (x.Sequence.Result)));
Magic Number,TestFx.SpecK.Tests.Combinatorics,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Combinatorics\PermutationsTest.cs,DomainSpec,The following statement contains a magic number: Specify (x => A + B)              .DefaultCase (_ => _                  .WithSequences (                      "First sequence"' new { A = 1' B = 2' Result = 3 }'                      "Second sequence"' new { A = 2' B = 3' Result = 6 })                  .Given (x => A = x.Sequence.A)                  .Given (x => B = x.Sequence.B)                  .It ("returns result"' x => x.Result.Should ().Be (x.Sequence.Result)));
Magic Number,TestFx.SpecK.Tests.Combinatorics,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Combinatorics\PermutationsTest.cs,DomainSpec,The following statement contains a magic number: Specify (x => A + B)              .DefaultCase (_ => _                  .WithSequences (                      "First sequence"' new { A = 1' B = 2' Result = 3 }'                      "Second sequence"' new { A = 2' B = 3' Result = 6 })                  .Given (x => A = x.Sequence.A)                  .Given (x => B = x.Sequence.B)                  .It ("returns result"' x => x.Result.Should ().Be (x.Sequence.Result)));
Magic Number,TestFx.SpecK.Tests.Combinatorics,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Combinatorics\PermutationsTest.cs,DomainSpec,The following statement contains a magic number: Specify (x => A + B)              .DefaultCase (_ => _                  .WithSequences (                      "First sequence"' new { A = 1' B = 2' Result = 3 }'                      "Second sequence"' new { A = 2' B = 3' Result = 6 })                  .Given (x => A = x.Sequence.A)                  .Given (x => B = x.Sequence.B)                  .It ("returns result"' x => x.Result.Should ().Be (x.Sequence.Result)));
Magic Number,TestFx.SpecK.Tests.Combinatorics,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Combinatorics\PermutationsTest.cs,DomainSpec,The following statement contains a magic number: Specify (x => A + B)              .DefaultCase (_ => _                  .WithSequences (                      "First sequence"' new { A = 1' B = 2' Result = 3 }'                      "Second sequence"' new { A = 2' B = 3' Result = 6 })                  .Given (x => A = x.Sequence.A)                  .Given (x => B = x.Sequence.B)                  .It ("returns result"' x => x.Result.Should ().Be (x.Sequence.Result)));
Magic Number,TestFx.SpecK.Tests.Exceptions,ExceptionAssertionTest,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Exceptions\ExceptionAssertionTest.cs,AssertResults,The following statement contains a magic number: testResults[2].HasFailed ().HasRelativeId ("Wrong message");
Magic Number,TestFx.SpecK.Tests.Exceptions,ExceptionAssertionTest,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Exceptions\ExceptionAssertionTest.cs,AssertResults,The following statement contains a magic number: testResults[3].HasFailed ().HasRelativeId ("Wrong message provider");
Magic Number,TestFx.SpecK.Tests.Exceptions,ExceptionAssertionTest,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Exceptions\ExceptionAssertionTest.cs,AssertResults,The following statement contains a magic number: testResults[4].HasFailed ().HasRelativeId ("Wrong inner exception provider");
Magic Number,TestFx.SpecK.Tests.Exceptions,ExceptionAssertionTest,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Exceptions\ExceptionAssertionTest.cs,AssertResults,The following statement contains a magic number: testResults[5].HasFailed ().HasRelativeId ("Custom failing assertion").HasFailingOperations ("Throws exception with special properties");
Magic Number,TestFx.SpecK.Tests.Exceptions,ExceptionAssertionTest,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Exceptions\ExceptionAssertionTest.cs,AssertResults,The following statement contains a magic number: testResults[6].HasPassed ().HasRelativeId ("Custom passing assertion");
Magic Number,TestFx.SpecK.Tests.Farada,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Farada\AutoConfigurationTest.cs,DomainSpec,The following statement contains a magic number: Specify (x => 0)              .DefaultCase (_ => _                  .It ("Fills properties"' x =>                  {                    Model.Age.Should ().BeInRange (30' 33);                    Model.FirstName.Length.Should ().BeInRange (3' 10);                  })                  .It ("Fills fields"' x => Integer.Should ().BeInRange (5' 7))                  .It ("Executes AutoAttribute.Mutate"' x => Model.IntegerFromAttribute.Should ().Be (int.MaxValue)));
Magic Number,TestFx.SpecK.Tests.Farada,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Farada\AutoConfigurationTest.cs,DomainSpec,The following statement contains a magic number: Specify (x => 0)              .DefaultCase (_ => _                  .It ("Fills properties"' x =>                  {                    Model.Age.Should ().BeInRange (30' 33);                    Model.FirstName.Length.Should ().BeInRange (3' 10);                  })                  .It ("Fills fields"' x => Integer.Should ().BeInRange (5' 7))                  .It ("Executes AutoAttribute.Mutate"' x => Model.IntegerFromAttribute.Should ().Be (int.MaxValue)));
Magic Number,TestFx.SpecK.Tests.Farada,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Farada\AutoConfigurationTest.cs,DomainSpec,The following statement contains a magic number: Specify (x => 0)              .DefaultCase (_ => _                  .It ("Fills properties"' x =>                  {                    Model.Age.Should ().BeInRange (30' 33);                    Model.FirstName.Length.Should ().BeInRange (3' 10);                  })                  .It ("Fills fields"' x => Integer.Should ().BeInRange (5' 7))                  .It ("Executes AutoAttribute.Mutate"' x => Model.IntegerFromAttribute.Should ().Be (int.MaxValue)));
Magic Number,TestFx.SpecK.Tests.Farada,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Farada\AutoConfigurationTest.cs,DomainSpec,The following statement contains a magic number: Specify (x => 0)              .DefaultCase (_ => _                  .It ("Fills properties"' x =>                  {                    Model.Age.Should ().BeInRange (30' 33);                    Model.FirstName.Length.Should ().BeInRange (3' 10);                  })                  .It ("Fills fields"' x => Integer.Should ().BeInRange (5' 7))                  .It ("Executes AutoAttribute.Mutate"' x => Model.IntegerFromAttribute.Should ().Be (int.MaxValue)));
Magic Number,TestFx.SpecK.Tests.Farada,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Farada\AutoConfigurationTest.cs,DomainSpec,The following statement contains a magic number: Specify (x => 0)              .DefaultCase (_ => _                  .It ("Fills properties"' x =>                  {                    Model.Age.Should ().BeInRange (30' 33);                    Model.FirstName.Length.Should ().BeInRange (3' 10);                  })                  .It ("Fills fields"' x => Integer.Should ().BeInRange (5' 7))                  .It ("Executes AutoAttribute.Mutate"' x => Model.IntegerFromAttribute.Should ().Be (int.MaxValue)));
Magic Number,TestFx.SpecK.Tests.Farada,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Farada\AutoConfigurationTest.cs,DomainSpec,The following statement contains a magic number: Specify (x => 0)              .DefaultCase (_ => _                  .It ("Fills properties"' x =>                  {                    Model.Age.Should ().BeInRange (30' 33);                    Model.FirstName.Length.Should ().BeInRange (3' 10);                  })                  .It ("Fills fields"' x => Integer.Should ().BeInRange (5' 7))                  .It ("Executes AutoAttribute.Mutate"' x => Model.IntegerFromAttribute.Should ().Be (int.MaxValue)));
Magic Number,TestFx.SpecK.Tests.Generics,GenericArgumentTest,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Generics\GenericArgumentTest.cs,AssertResults,The following statement contains a magic number: testResults[2].HasFailed ();
Magic Number,TestFx.SpecK.Tests.Simple,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Simple\InconclusiveTest.cs,DomainSpec,The following statement contains a magic number: Specify (x => 1)              .DefaultCase (_ => _                  .Given ("set MyInteger"' x => MyInteger = 123)                  .GivenVars (x => new { MyString = "Foo"' MyInteger })                  .It ("holds variables"'                      x =>                      {                        x.Vars.MyInteger.Should ().Be (123);                        x.Vars.MyString.Should ().Be ("Foo");                      }));
Magic Number,TestFx.SpecK.Tests.Simple,DomainSpec,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Simple\InconclusiveTest.cs,DomainSpec,The following statement contains a magic number: Specify (x => 1)              .DefaultCase (_ => _                  .Given ("set MyInteger"' x => MyInteger = 123)                  .GivenVars (x => new { MyString = "Foo"' MyInteger })                  .It ("holds variables"'                      x =>                      {                        x.Vars.MyInteger.Should ().Be (123);                        x.Vars.MyString.Should ().Be ("Foo");                      }));
Magic Number,TestFx.SpecK.Tests.Simple,InheritanceTest,D:\research\architectureSmells\repos\matkoch_TestFx\src\TestFx.SpecK.Tests\Simple\InheritanceTest.cs,AssertResults,The following statement contains a magic number: testResults[2].HasPassed ().HasText ("Additional case");
