Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Antlr3.Targets,CTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.C\CTarget.cs,GetTargetStringLiteralFromANTLRStringLiteral,Cyclomatic complexity of the method is 10
Long Parameter List,Antlr3.Targets,CTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.C\CTarget.cs,GenRecognizerHeaderFile,The method has 5 parameters. Parameters: tool' generator' grammar' headerFileST' extName
Magic Number,Antlr3.Targets,CTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.C\CTarget.cs,GenRecognizerHeaderFile,The following statement contains a magic number: fileName = fileName.Substring( 0' fileName.Length - 2 ) + extName;
Magic Number,Antlr3.Targets,CTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.C\CTarget.cs,GetTargetCharLiteralFromANTLRCharLiteral,The following statement contains a magic number: literal = "0x" + literal.Substring( 3' 4 );
Magic Number,Antlr3.Targets,CTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.C\CTarget.cs,GetTargetCharLiteralFromANTLRCharLiteral,The following statement contains a magic number: literal = "0x" + literal.Substring( 3' 4 );
Magic Number,Antlr3.Targets,CTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.C\CTarget.cs,GetTargetStringLiteralFromANTLRStringLiteral,The following statement contains a magic number: switch ( literal[i] )                      {                      case 'u':                      case 'U':                          buf.Append( literal.Substring( i + 1' 4 ) );  // Already a hex string                          i = i + 5;                                // Move to next string/char/escape                          break;                        case 'n':                      case 'N':                            buf.Append( "0A" );                          break;                        case 'r':                      case 'R':                            buf.Append( "0D" );                          break;                        case 't':                      case 'T':                            buf.Append( "09" );                          break;                        case 'b':                      case 'B':                            buf.Append( "08" );                          break;                        case 'f':                      case 'F':                            buf.Append( "0C" );                          break;                        default:                            // Anything else is what it is!                          //                          buf.Append( ( (int)literal[i] ).ToString( "X" ) );                          break;                      }
Magic Number,Antlr3.Targets,CTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.C\CTarget.cs,GetTargetStringLiteralFromANTLRStringLiteral,The following statement contains a magic number: switch ( literal[i] )                      {                      case 'u':                      case 'U':                          buf.Append( literal.Substring( i + 1' 4 ) );  // Already a hex string                          i = i + 5;                                // Move to next string/char/escape                          break;                        case 'n':                      case 'N':                            buf.Append( "0A" );                          break;                        case 'r':                      case 'R':                            buf.Append( "0D" );                          break;                        case 't':                      case 'T':                            buf.Append( "09" );                          break;                        case 'b':                      case 'B':                            buf.Append( "08" );                          break;                        case 'f':                      case 'F':                            buf.Append( "0C" );                          break;                        default:                            // Anything else is what it is!                          //                          buf.Append( ( (int)literal[i] ).ToString( "X" ) );                          break;                      }
Magic Number,Antlr3.Targets,CTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.C\CTarget.cs,PerformGrammarAnalysis,The following statement contains a magic number: CodeGenerator.MaxAcyclicDfaStatesInline = 65535;
Magic Number,Antlr3.Targets,CTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.C\CTarget.cs,PerformGrammarAnalysis,The following statement contains a magic number: CodeGenerator.MaxSwitchCaseLabels = 3000;
Missing Default,Antlr3.Targets,CTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.C\CTarget.cs,IsValidActionScope,The following switch statement is missing a default case: switch ( grammarType )              {              case GrammarType.Lexer:                  switch ( scope )                  {                  case "lexer":                  case "header":                  case "includes":                  case "preincludes":                  case "overrides":                      return true;                  }                    break;                case GrammarType.Parser:                  switch ( scope )                  {                  case "parser":                  case "header":                  case "includes":                  case "preincludes":                  case "overrides":                      return true;                  }                    break;                case GrammarType.Combined:                  switch ( scope )                  {                  case "parser":                  case "lexer":                  case "header":                  case "includes":                  case "preincludes":                  case "overrides":                      return true;                  }                    break;                case GrammarType.TreeParser:                  switch ( scope )                  {                  case "treeparser":                  case "header":                  case "includes":                  case "preincludes":                  case "overrides":                      return true;                  }                    break;              }
Missing Default,Antlr3.Targets,CTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.C\CTarget.cs,IsValidActionScope,The following switch statement is missing a default case: switch ( scope )                  {                  case "lexer":                  case "header":                  case "includes":                  case "preincludes":                  case "overrides":                      return true;                  }
Missing Default,Antlr3.Targets,CTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.C\CTarget.cs,IsValidActionScope,The following switch statement is missing a default case: switch ( scope )                  {                  case "parser":                  case "header":                  case "includes":                  case "preincludes":                  case "overrides":                      return true;                  }
Missing Default,Antlr3.Targets,CTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.C\CTarget.cs,IsValidActionScope,The following switch statement is missing a default case: switch ( scope )                  {                  case "parser":                  case "lexer":                  case "header":                  case "includes":                  case "preincludes":                  case "overrides":                      return true;                  }
Missing Default,Antlr3.Targets,CTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.C\CTarget.cs,IsValidActionScope,The following switch statement is missing a default case: switch ( scope )                  {                  case "treeparser":                  case "header":                  case "includes":                  case "preincludes":                  case "overrides":                      return true;                  }
