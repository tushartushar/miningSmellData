Implementation smell,Namespace,Class,File,Method,Description
Long Method,Antlr3.Targets,CppTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.Cpp\CppTarget.cs,IsValidActionScope,The method has 114 lines of code.
Complex Method,Antlr3.Targets,CppTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.Cpp\CppTarget.cs,IsValidActionScope,Cyclomatic complexity of the method is 29
Complex Method,Antlr3.Targets,CppTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.Cpp\CppTarget.cs,GetTargetStringLiteralFromANTLRStringLiteral,Cyclomatic complexity of the method is 10
Long Parameter List,Antlr3.Targets,CppTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.Cpp\CppTarget.cs,GenRecognizerHeaderFile,The method has 5 parameters. Parameters: tool' generator' grammar' headerFileST' extName
Long Parameter List,Antlr3.Targets,CppTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.Cpp\CppTarget.cs,chooseWhereCyclicDFAsGo,The method has 5 parameters. Parameters: tool' generator' grammar' recognizerST' cyclicDFAST
Magic Number,Antlr3.Targets,CppTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.Cpp\CppTarget.cs,GenRecognizerHeaderFile,The following statement contains a magic number: fileName = fileName.Substring(0' fileName.Length - 4) + extName;
Magic Number,Antlr3.Targets,CppTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.Cpp\CppTarget.cs,GetTargetCharLiteralFromANTLRCharLiteral,The following statement contains a magic number: literal = "0x" + literal.Substring(3' 4);
Magic Number,Antlr3.Targets,CppTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.Cpp\CppTarget.cs,GetTargetCharLiteralFromANTLRCharLiteral,The following statement contains a magic number: literal = "0x" + literal.Substring(3' 4);
Magic Number,Antlr3.Targets,CppTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.Cpp\CppTarget.cs,GetTargetStringLiteralFromANTLRStringLiteral,The following statement contains a magic number: switch (literal[i])                      {                      case 'u':                      case 'U':                          buf.Append(literal.Substring(i + 1' 4));  // Already a hex string                          i = i + 5;                                // Move to next string/char/escape                          break;                        case 'n':                      case 'N':                            buf.Append("0A");                          break;                        case 'r':                      case 'R':                            buf.Append("0D");                          break;                        case 't':                      case 'T':                            buf.Append("09");                          break;                        case 'b':                      case 'B':                            buf.Append("08");                          break;                        case 'f':                      case 'F':                            buf.Append("0C");                          break;                        default:                            // Anything else is what it is!                          //                          buf.Append(((int)literal[i]).ToString("X"));                          break;                      }
Magic Number,Antlr3.Targets,CppTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.Cpp\CppTarget.cs,GetTargetStringLiteralFromANTLRStringLiteral,The following statement contains a magic number: switch (literal[i])                      {                      case 'u':                      case 'U':                          buf.Append(literal.Substring(i + 1' 4));  // Already a hex string                          i = i + 5;                                // Move to next string/char/escape                          break;                        case 'n':                      case 'N':                            buf.Append("0A");                          break;                        case 'r':                      case 'R':                            buf.Append("0D");                          break;                        case 't':                      case 'T':                            buf.Append("09");                          break;                        case 'b':                      case 'B':                            buf.Append("08");                          break;                        case 'f':                      case 'F':                            buf.Append("0C");                          break;                        default:                            // Anything else is what it is!                          //                          buf.Append(((int)literal[i]).ToString("X"));                          break;                      }
Magic Number,Antlr3.Targets,CppTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.Cpp\CppTarget.cs,PerformGrammarAnalysis,The following statement contains a magic number: CodeGenerator.MaxAcyclicDfaStatesInline = 65535;
Magic Number,Antlr3.Targets,CppTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.Cpp\CppTarget.cs,PerformGrammarAnalysis,The following statement contains a magic number: CodeGenerator.MaxSwitchCaseLabels = 3000;
Duplicate Code,Antlr3.Targets,CppTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.Cpp\CppTarget.cs,IsValidActionScope,The method contains a code clone-set at the following line numbers (starting from the method definition): ((5' 30)' (63' 88))
Duplicate Code,Antlr3.Targets,CppTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.Cpp\CppTarget.cs,IsValidActionScope,The method contains a code clone-set at the following line numbers (starting from the method definition): ((6' 30)' (33' 57))
Duplicate Code,Antlr3.Targets,CppTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.Cpp\CppTarget.cs,IsValidActionScope,The method contains a code clone-set at the following line numbers (starting from the method definition): ((6' 25)' (33' 52)' (64' 83)' (91' 110))
Duplicate Code,Antlr3.Targets,CppTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.Cpp\CppTarget.cs,IsValidActionScope,The method contains a code clone-set at the following line numbers (starting from the method definition): ((6' 28)' (91' 113)' (33' 55)' (64' 86))
Duplicate Code,Antlr3.Targets,CppTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.Cpp\CppTarget.cs,IsValidActionScope,The method contains a code clone-set at the following line numbers (starting from the method definition): ((33' 57)' (64' 88))
Missing Default,Antlr3.Targets,CppTarget,D:\research\architectureSmells\repos\antlr_antlrcs\Antlr3.Targets\Antlr3.Targets.Cpp\CppTarget.cs,IsValidActionScope,The following switch statement is missing a default case: switch (grammarType)              {              case GrammarType.Lexer:                  if (scope == "lexer")                  {                      return true;                  }                  if (scope == "header")                  {                      return true;                  }                  if (scope == "includes")                  {                      return true;                  }                  if (scope == "preincludes")                  {                      return true;                  }                  if (scope == "overrides")                  {                      return true;                  }                  if (scope == "namespace")                  {                      return true;                  }                    break;              case GrammarType.Parser:                  if (scope == "parser")                  {                      return true;                  }                  if (scope == "header")                  {                      return true;                  }                  if (scope == "includes")                  {                      return true;                  }                  if (scope == "preincludes")                  {                      return true;                  }                  if (scope == "overrides")                  {                      return true;                  }                  if (scope == "namespace")                  {                      return true;                  }                    break;              case GrammarType.Combined:                  if (scope == "parser")                  {                      return true;                  }                  if (scope == "lexer")                  {                      return true;                  }                  if (scope == "header")                  {                      return true;                  }                  if (scope == "includes")                  {                      return true;                  }                  if (scope == "preincludes")                  {                      return true;                  }                  if (scope == "overrides")                  {                      return true;                  }                  if (scope == "namespace")                  {                      return true;                  }                    break;              case GrammarType.TreeParser:                  if (scope == "treeparser")                  {                      return true;                  }                  if (scope == "header")                  {                      return true;                  }                  if (scope == "includes")                  {                      return true;                  }                  if (scope == "preincludes")                  {                      return true;                  }                  if (scope == "overrides")                  {                      return true;                  }                  if (scope == "namespace")                  {                      return true;                  }                  break;              }
