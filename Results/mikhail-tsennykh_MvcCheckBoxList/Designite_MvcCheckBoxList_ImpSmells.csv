Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MvcCheckBoxList.Library,ListBuilder,D:\research\architectureSmells\repos\mikhail-tsennykh_MvcCheckBoxList\src\MvcCheckBoxList\ListBuilder.cs,_listBuilder,Cyclomatic complexity of the method is 12
Complex Method,MvcCheckBoxList.Library,ListBuilder,D:\research\architectureSmells\repos\mikhail-tsennykh_MvcCheckBoxList\src\MvcCheckBoxList\ListBuilder.cs,_createHtmlWrapper,Cyclomatic complexity of the method is 11
Complex Method,MvcCheckBoxList.Library,ListBuilder,D:\research\architectureSmells\repos\mikhail-tsennykh_MvcCheckBoxList\src\MvcCheckBoxList\ListBuilder.cs,_createCheckBoxListElement,Cyclomatic complexity of the method is 11
Long Parameter List,MvcCheckBoxList.Library,ListBuilder,D:\research\architectureSmells\repos\mikhail-tsennykh_MvcCheckBoxList\src\MvcCheckBoxList\ListBuilder.cs,_listBuilder,The method has 13 parameters. Parameters: htmlHelper' modelMetadata' listName' sourceDataExpr' valueExpr' textToDisplayExpr' htmlAttributesExpr' selectedValuesExpr' selectedValueExpr' htmlAttributes' htmlListInfo' disabledValues' position
Long Parameter List,MvcCheckBoxList.Library,ListBuilder,D:\research\architectureSmells\repos\mikhail-tsennykh_MvcCheckBoxList\src\MvcCheckBoxList\ListBuilder.cs,_createCheckBoxListElement,The method has 12 parameters. Parameters: sb' htmlHelper' modelMetadata' htmlWrapper' htmlAttributesForCheckBox' selectedValues' itemIsSelected' disabledValues' name' itemValue' itemText' textLayout
Long Parameter List,MvcCheckBoxList.Model,HtmlListInfo,D:\research\architectureSmells\repos\mikhail-tsennykh_MvcCheckBoxList\src\MvcCheckBoxList\Model\HtmlListInfo.cs,HtmlListInfo,The method has 5 parameters. Parameters: htmlTag' columns' htmlAttributes' textLayout' templateIsUsed
Long Statement,MvcCheckBoxList.Library,ToDictionary_Helper,D:\research\architectureSmells\repos\mikhail-tsennykh_MvcCheckBoxList\src\MvcCheckBoxList\Internal\Helpers\toDictionary.cs,toDictionary,The length of the statement  "        // JRR - Added the Replace call. This is the standard used by MVC http://www.asp.net/whitepapers/mvc3-release-notes#0.1__Toc274034227 " is 133.
Magic Number,MvcCheckBoxList.Library,ListBuilder,D:\research\architectureSmells\repos\mikhail-tsennykh_MvcCheckBoxList\src\MvcCheckBoxList\ListBuilder.cs,_createHtmlWrapper,The following statement contains a magic number: switch (wrapInfo.htmlTag) {              // creates user selected number of float sections with              // vertically sorted checkboxes            case HtmlTag.vertical_columns: {              if (wrapInfo.Columns <= 0) wrapInfo.Columns = 1;              // calculate number of rows              var rows = Convert.ToInt32(Math.Ceiling(Convert.ToDecimal(numberOfItems)                                                      / Convert.ToDecimal(wrapInfo.Columns)));              if (numberOfItems <= 4 &&                  (numberOfItems <= wrapInfo.Columns || numberOfItems - wrapInfo.Columns == 1))                rows = numberOfItems;              w.separator_max_counter = rows;                // create wrapped raw html tag              var wrapRow = htmlElementTag.div;              var wrapHtml_builder = new TagBuilder(wrapRow.ToString());              var user_html_attributes = wrapInfo.htmlAttributes.toDictionary();                // create base columnt style and merge it with user provided style (if applicable)              var defaultSectionStyle = "float:left;";              if (textLayout == TextLayout.RightToLeft)                defaultSectionStyle += " text-align: right;";              object style;              user_html_attributes.TryGetValue("style"' out style);              if (style != null) // if user style is set' use it                wrapHtml_builder.MergeAttribute("style"' defaultSectionStyle + " " + style);              else // if not set' add only default style                wrapHtml_builder.MergeAttribute("style"' defaultSectionStyle);                // merge it with other user provided attributes (e.g.: class)              user_html_attributes.Remove("style");              wrapHtml_builder.MergeAttributes(user_html_attributes);                // build wrapped raw html tag               w.wrap_open = wrapHtml_builder.ToString(TagRenderMode.StartTag);              w.wrap_rowbreak =                "</" + wrapRow + "> " + wrapHtml_builder.ToString(TagRenderMode.StartTag);              w.wrap_close = wrapHtml_builder.ToString(TagRenderMode.EndTag) +                             " <div style=\"clear:both;\"></div>";              w.append_to_element = "<br/>";            }              break;              // creates an html <table> with checkboxes sorted horizontally            case HtmlTag.table: {              if (wrapInfo.Columns <= 0) wrapInfo.Columns = 1;              w.separator_max_counter = wrapInfo.Columns;                var wrapHtml_builder = new TagBuilder(htmlElementTag.table.ToString());              wrapHtml_builder.MergeAttributes(wrapInfo.htmlAttributes.toDictionary());              wrapHtml_builder.MergeAttribute("cellspacing"' "0"); // for IE7 compatibility                var wrapRow = htmlElementTag.tr;              w.wrap_element = htmlElementTag.td;              w.wrap_open = wrapHtml_builder.ToString(TagRenderMode.StartTag) +                            "<" + wrapRow + ">";              w.wrap_rowbreak = "</" + wrapRow + "><" + wrapRow + ">";              w.wrap_close = "</" + wrapRow + ">" +                             wrapHtml_builder.ToString(TagRenderMode.EndTag);            }              break;          }
Missing Default,MvcCheckBoxList.Library,ListBuilder,D:\research\architectureSmells\repos\mikhail-tsennykh_MvcCheckBoxList\src\MvcCheckBoxList\ListBuilder.cs,_createHtmlWrapper,The following switch statement is missing a default case: switch (wrapInfo.htmlTag) {              // creates user selected number of float sections with              // vertically sorted checkboxes            case HtmlTag.vertical_columns: {              if (wrapInfo.Columns <= 0) wrapInfo.Columns = 1;              // calculate number of rows              var rows = Convert.ToInt32(Math.Ceiling(Convert.ToDecimal(numberOfItems)                                                      / Convert.ToDecimal(wrapInfo.Columns)));              if (numberOfItems <= 4 &&                  (numberOfItems <= wrapInfo.Columns || numberOfItems - wrapInfo.Columns == 1))                rows = numberOfItems;              w.separator_max_counter = rows;                // create wrapped raw html tag              var wrapRow = htmlElementTag.div;              var wrapHtml_builder = new TagBuilder(wrapRow.ToString());              var user_html_attributes = wrapInfo.htmlAttributes.toDictionary();                // create base columnt style and merge it with user provided style (if applicable)              var defaultSectionStyle = "float:left;";              if (textLayout == TextLayout.RightToLeft)                defaultSectionStyle += " text-align: right;";              object style;              user_html_attributes.TryGetValue("style"' out style);              if (style != null) // if user style is set' use it                wrapHtml_builder.MergeAttribute("style"' defaultSectionStyle + " " + style);              else // if not set' add only default style                wrapHtml_builder.MergeAttribute("style"' defaultSectionStyle);                // merge it with other user provided attributes (e.g.: class)              user_html_attributes.Remove("style");              wrapHtml_builder.MergeAttributes(user_html_attributes);                // build wrapped raw html tag               w.wrap_open = wrapHtml_builder.ToString(TagRenderMode.StartTag);              w.wrap_rowbreak =                "</" + wrapRow + "> " + wrapHtml_builder.ToString(TagRenderMode.StartTag);              w.wrap_close = wrapHtml_builder.ToString(TagRenderMode.EndTag) +                             " <div style=\"clear:both;\"></div>";              w.append_to_element = "<br/>";            }              break;              // creates an html <table> with checkboxes sorted horizontally            case HtmlTag.table: {              if (wrapInfo.Columns <= 0) wrapInfo.Columns = 1;              w.separator_max_counter = wrapInfo.Columns;                var wrapHtml_builder = new TagBuilder(htmlElementTag.table.ToString());              wrapHtml_builder.MergeAttributes(wrapInfo.htmlAttributes.toDictionary());              wrapHtml_builder.MergeAttribute("cellspacing"' "0"); // for IE7 compatibility                var wrapRow = htmlElementTag.tr;              w.wrap_element = htmlElementTag.td;              w.wrap_open = wrapHtml_builder.ToString(TagRenderMode.StartTag) +                            "<" + wrapRow + ">";              w.wrap_rowbreak = "</" + wrapRow + "><" + wrapRow + ">";              w.wrap_close = "</" + wrapRow + ">" +                             wrapHtml_builder.ToString(TagRenderMode.EndTag);            }              break;          }
