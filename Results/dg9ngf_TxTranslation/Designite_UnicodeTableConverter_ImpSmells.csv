Implementation smell,Namespace,Class,File,Method,Description
Long Method,UnicodeTableConverter,Program,C:\repos\dg9ngf_TxTranslation\UnicodeTableConverter\Program.cs,Main,The method has 114 lines of code.
Complex Conditional,UnicodeTableConverter,Program,C:\repos\dg9ngf_TxTranslation\UnicodeTableConverter\Program.cs,Main,The conditional expression  "(char.IsDigit(line[0]) || line[0] >= 'A' && line[0] <= 'F') && line[4] == '\t'"  is complex.
Complex Conditional,UnicodeTableConverter,Program,C:\repos\dg9ngf_TxTranslation\UnicodeTableConverter\Program.cs,Main,The conditional expression  "(char.IsDigit(line[0]) || line[0] >= 'A' && line[0] <= 'F') && line[4] != '\t'"  is complex.
Magic Number,UnicodeTableConverter,Program,C:\repos\dg9ngf_TxTranslation\UnicodeTableConverter\Program.cs,Main,The following statement contains a magic number: using (StreamReader sr = new StreamReader(args[0]))  			{  				while (!sr.EndOfStream)  				{  					string line = sr.ReadLine().TrimEnd();    					if (line.StartsWith("@\t\t"))  					{  						// Category begins.  						if (codePoint == 0xFFFF)  						{  							// Last supported code point' stop here  							break;  						}  						// Remember the category name  						string catName = line.Substring(3);  						categoryIndex = categoryNames.IndexOf(catName);  						if (categoryIndex == -1)  						{  							categoryNames.Add(catName);  							categoryIndex = categoryNames.Count - 1;  						}  					}  					else if ((char.IsDigit(line[0]) || line[0] >= 'A' && line[0] <= 'F') && line[4] == '\t')  					{  						// Character definition (4 hex digits).  						// If still waiting for previous character's proper name: Output without name  						if (codePoint >= 0)  						{  							characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						}  						// If proper character name available: output  						// Otherwise: remember for next line  						codePoint = int.Parse(line.Substring(0' 4)' NumberStyles.HexNumber);  						charName = line.Substring(5);  						if (charName[0] != '<')  						{  							characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  							if (codePoint == 0xFFFF)  							{  								// Last supported code point' stop here  								break;  							}  							codePoint = -1;  						}  					}  					else if ((char.IsDigit(line[0]) || line[0] >= 'A' && line[0] <= 'F') && line[4] != '\t')  					{  						// Character definition (5 hex digits).  						// If still waiting for previous character's proper name: Output without name  						if (codePoint >= 0)  						{  							characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						}  						// Stop here  						break;  					}  					else if (line.StartsWith("\t= ") && codePoint >= 0)  					{  						// Alias definition' waiting for a proper character name.  						// Output  						charName = line.Substring(3);  						characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						if (codePoint == 0xFFFF)  						{  							// Last supported code point' stop here  							break;  						}  						codePoint = -1;  					}  					else if (codePoint >= 0)  					{  						// Anything else  						characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						if (codePoint == 0xFFFF)  						{  							// Last supported code point' stop here  							break;  						}  						codePoint = -1;  					}  				}  			}
Magic Number,UnicodeTableConverter,Program,C:\repos\dg9ngf_TxTranslation\UnicodeTableConverter\Program.cs,Main,The following statement contains a magic number: using (StreamReader sr = new StreamReader(args[0]))  			{  				while (!sr.EndOfStream)  				{  					string line = sr.ReadLine().TrimEnd();    					if (line.StartsWith("@\t\t"))  					{  						// Category begins.  						if (codePoint == 0xFFFF)  						{  							// Last supported code point' stop here  							break;  						}  						// Remember the category name  						string catName = line.Substring(3);  						categoryIndex = categoryNames.IndexOf(catName);  						if (categoryIndex == -1)  						{  							categoryNames.Add(catName);  							categoryIndex = categoryNames.Count - 1;  						}  					}  					else if ((char.IsDigit(line[0]) || line[0] >= 'A' && line[0] <= 'F') && line[4] == '\t')  					{  						// Character definition (4 hex digits).  						// If still waiting for previous character's proper name: Output without name  						if (codePoint >= 0)  						{  							characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						}  						// If proper character name available: output  						// Otherwise: remember for next line  						codePoint = int.Parse(line.Substring(0' 4)' NumberStyles.HexNumber);  						charName = line.Substring(5);  						if (charName[0] != '<')  						{  							characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  							if (codePoint == 0xFFFF)  							{  								// Last supported code point' stop here  								break;  							}  							codePoint = -1;  						}  					}  					else if ((char.IsDigit(line[0]) || line[0] >= 'A' && line[0] <= 'F') && line[4] != '\t')  					{  						// Character definition (5 hex digits).  						// If still waiting for previous character's proper name: Output without name  						if (codePoint >= 0)  						{  							characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						}  						// Stop here  						break;  					}  					else if (line.StartsWith("\t= ") && codePoint >= 0)  					{  						// Alias definition' waiting for a proper character name.  						// Output  						charName = line.Substring(3);  						characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						if (codePoint == 0xFFFF)  						{  							// Last supported code point' stop here  							break;  						}  						codePoint = -1;  					}  					else if (codePoint >= 0)  					{  						// Anything else  						characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						if (codePoint == 0xFFFF)  						{  							// Last supported code point' stop here  							break;  						}  						codePoint = -1;  					}  				}  			}
Magic Number,UnicodeTableConverter,Program,C:\repos\dg9ngf_TxTranslation\UnicodeTableConverter\Program.cs,Main,The following statement contains a magic number: using (StreamReader sr = new StreamReader(args[0]))  			{  				while (!sr.EndOfStream)  				{  					string line = sr.ReadLine().TrimEnd();    					if (line.StartsWith("@\t\t"))  					{  						// Category begins.  						if (codePoint == 0xFFFF)  						{  							// Last supported code point' stop here  							break;  						}  						// Remember the category name  						string catName = line.Substring(3);  						categoryIndex = categoryNames.IndexOf(catName);  						if (categoryIndex == -1)  						{  							categoryNames.Add(catName);  							categoryIndex = categoryNames.Count - 1;  						}  					}  					else if ((char.IsDigit(line[0]) || line[0] >= 'A' && line[0] <= 'F') && line[4] == '\t')  					{  						// Character definition (4 hex digits).  						// If still waiting for previous character's proper name: Output without name  						if (codePoint >= 0)  						{  							characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						}  						// If proper character name available: output  						// Otherwise: remember for next line  						codePoint = int.Parse(line.Substring(0' 4)' NumberStyles.HexNumber);  						charName = line.Substring(5);  						if (charName[0] != '<')  						{  							characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  							if (codePoint == 0xFFFF)  							{  								// Last supported code point' stop here  								break;  							}  							codePoint = -1;  						}  					}  					else if ((char.IsDigit(line[0]) || line[0] >= 'A' && line[0] <= 'F') && line[4] != '\t')  					{  						// Character definition (5 hex digits).  						// If still waiting for previous character's proper name: Output without name  						if (codePoint >= 0)  						{  							characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						}  						// Stop here  						break;  					}  					else if (line.StartsWith("\t= ") && codePoint >= 0)  					{  						// Alias definition' waiting for a proper character name.  						// Output  						charName = line.Substring(3);  						characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						if (codePoint == 0xFFFF)  						{  							// Last supported code point' stop here  							break;  						}  						codePoint = -1;  					}  					else if (codePoint >= 0)  					{  						// Anything else  						characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						if (codePoint == 0xFFFF)  						{  							// Last supported code point' stop here  							break;  						}  						codePoint = -1;  					}  				}  			}
Magic Number,UnicodeTableConverter,Program,C:\repos\dg9ngf_TxTranslation\UnicodeTableConverter\Program.cs,Main,The following statement contains a magic number: using (StreamReader sr = new StreamReader(args[0]))  			{  				while (!sr.EndOfStream)  				{  					string line = sr.ReadLine().TrimEnd();    					if (line.StartsWith("@\t\t"))  					{  						// Category begins.  						if (codePoint == 0xFFFF)  						{  							// Last supported code point' stop here  							break;  						}  						// Remember the category name  						string catName = line.Substring(3);  						categoryIndex = categoryNames.IndexOf(catName);  						if (categoryIndex == -1)  						{  							categoryNames.Add(catName);  							categoryIndex = categoryNames.Count - 1;  						}  					}  					else if ((char.IsDigit(line[0]) || line[0] >= 'A' && line[0] <= 'F') && line[4] == '\t')  					{  						// Character definition (4 hex digits).  						// If still waiting for previous character's proper name: Output without name  						if (codePoint >= 0)  						{  							characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						}  						// If proper character name available: output  						// Otherwise: remember for next line  						codePoint = int.Parse(line.Substring(0' 4)' NumberStyles.HexNumber);  						charName = line.Substring(5);  						if (charName[0] != '<')  						{  							characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  							if (codePoint == 0xFFFF)  							{  								// Last supported code point' stop here  								break;  							}  							codePoint = -1;  						}  					}  					else if ((char.IsDigit(line[0]) || line[0] >= 'A' && line[0] <= 'F') && line[4] != '\t')  					{  						// Character definition (5 hex digits).  						// If still waiting for previous character's proper name: Output without name  						if (codePoint >= 0)  						{  							characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						}  						// Stop here  						break;  					}  					else if (line.StartsWith("\t= ") && codePoint >= 0)  					{  						// Alias definition' waiting for a proper character name.  						// Output  						charName = line.Substring(3);  						characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						if (codePoint == 0xFFFF)  						{  							// Last supported code point' stop here  							break;  						}  						codePoint = -1;  					}  					else if (codePoint >= 0)  					{  						// Anything else  						characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						if (codePoint == 0xFFFF)  						{  							// Last supported code point' stop here  							break;  						}  						codePoint = -1;  					}  				}  			}
Magic Number,UnicodeTableConverter,Program,C:\repos\dg9ngf_TxTranslation\UnicodeTableConverter\Program.cs,Main,The following statement contains a magic number: using (StreamReader sr = new StreamReader(args[0]))  			{  				while (!sr.EndOfStream)  				{  					string line = sr.ReadLine().TrimEnd();    					if (line.StartsWith("@\t\t"))  					{  						// Category begins.  						if (codePoint == 0xFFFF)  						{  							// Last supported code point' stop here  							break;  						}  						// Remember the category name  						string catName = line.Substring(3);  						categoryIndex = categoryNames.IndexOf(catName);  						if (categoryIndex == -1)  						{  							categoryNames.Add(catName);  							categoryIndex = categoryNames.Count - 1;  						}  					}  					else if ((char.IsDigit(line[0]) || line[0] >= 'A' && line[0] <= 'F') && line[4] == '\t')  					{  						// Character definition (4 hex digits).  						// If still waiting for previous character's proper name: Output without name  						if (codePoint >= 0)  						{  							characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						}  						// If proper character name available: output  						// Otherwise: remember for next line  						codePoint = int.Parse(line.Substring(0' 4)' NumberStyles.HexNumber);  						charName = line.Substring(5);  						if (charName[0] != '<')  						{  							characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  							if (codePoint == 0xFFFF)  							{  								// Last supported code point' stop here  								break;  							}  							codePoint = -1;  						}  					}  					else if ((char.IsDigit(line[0]) || line[0] >= 'A' && line[0] <= 'F') && line[4] != '\t')  					{  						// Character definition (5 hex digits).  						// If still waiting for previous character's proper name: Output without name  						if (codePoint >= 0)  						{  							characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						}  						// Stop here  						break;  					}  					else if (line.StartsWith("\t= ") && codePoint >= 0)  					{  						// Alias definition' waiting for a proper character name.  						// Output  						charName = line.Substring(3);  						characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						if (codePoint == 0xFFFF)  						{  							// Last supported code point' stop here  							break;  						}  						codePoint = -1;  					}  					else if (codePoint >= 0)  					{  						// Anything else  						characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						if (codePoint == 0xFFFF)  						{  							// Last supported code point' stop here  							break;  						}  						codePoint = -1;  					}  				}  			}
Magic Number,UnicodeTableConverter,Program,C:\repos\dg9ngf_TxTranslation\UnicodeTableConverter\Program.cs,Main,The following statement contains a magic number: using (StreamReader sr = new StreamReader(args[0]))  			{  				while (!sr.EndOfStream)  				{  					string line = sr.ReadLine().TrimEnd();    					if (line.StartsWith("@\t\t"))  					{  						// Category begins.  						if (codePoint == 0xFFFF)  						{  							// Last supported code point' stop here  							break;  						}  						// Remember the category name  						string catName = line.Substring(3);  						categoryIndex = categoryNames.IndexOf(catName);  						if (categoryIndex == -1)  						{  							categoryNames.Add(catName);  							categoryIndex = categoryNames.Count - 1;  						}  					}  					else if ((char.IsDigit(line[0]) || line[0] >= 'A' && line[0] <= 'F') && line[4] == '\t')  					{  						// Character definition (4 hex digits).  						// If still waiting for previous character's proper name: Output without name  						if (codePoint >= 0)  						{  							characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						}  						// If proper character name available: output  						// Otherwise: remember for next line  						codePoint = int.Parse(line.Substring(0' 4)' NumberStyles.HexNumber);  						charName = line.Substring(5);  						if (charName[0] != '<')  						{  							characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  							if (codePoint == 0xFFFF)  							{  								// Last supported code point' stop here  								break;  							}  							codePoint = -1;  						}  					}  					else if ((char.IsDigit(line[0]) || line[0] >= 'A' && line[0] <= 'F') && line[4] != '\t')  					{  						// Character definition (5 hex digits).  						// If still waiting for previous character's proper name: Output without name  						if (codePoint >= 0)  						{  							characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						}  						// Stop here  						break;  					}  					else if (line.StartsWith("\t= ") && codePoint >= 0)  					{  						// Alias definition' waiting for a proper character name.  						// Output  						charName = line.Substring(3);  						characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						if (codePoint == 0xFFFF)  						{  							// Last supported code point' stop here  							break;  						}  						codePoint = -1;  					}  					else if (codePoint >= 0)  					{  						// Anything else  						characters[codePoint] = new CharacterData() { Name = charName' Category = categoryIndex };  						if (codePoint == 0xFFFF)  						{  							// Last supported code point' stop here  							break;  						}  						codePoint = -1;  					}  				}  			}
