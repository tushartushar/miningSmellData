Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerList,Cyclomatic complexity of the method is 8
Complex Method,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,Cyclomatic complexity of the method is 10
Complex Method,MessageShark,CustomBuffer,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBuffer.cs,Write,Cyclomatic complexity of the method is 8
Long Parameter List,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDeserializerClass,The method has 7 parameters. Parameters: typeBuilder' il' type' tag' setMethod' callerType' itemLocalIndex
Long Parameter List,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDeserializerDictionary,The method has 6 parameters. Parameters: typeBuilder' il' type' tag' setMethod' itemLocalIndex
Long Parameter List,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDeserializerList,The method has 6 parameters. Parameters: typeBuilder' il' type' tag' setMethod' itemLocalIndex
Long Parameter List,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDeserializerArray,The method has 6 parameters. Parameters: typeBuilder' il' type' tag' setMethod' itemLocalIndex
Long Parameter List,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDeserializerReadValue,The method has 5 parameters. Parameters: typeBuilder' il' type' tag' itemLocalIndex
Long Parameter List,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDeserializerCallClassMethod,The method has 6 parameters. Parameters: typeBuilder' il' type' tag' setMethod' ownerType
Long Parameter List,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,GenerateDeserializerCallClassMethod,The method has 6 parameters. Parameters: typeBuilder' il' type' valueLocalIndex' startIndexLocalIndex' useStream
Long Parameter List,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerArray,The method has 6 parameters. Parameters: typeBuilder' il' type' valueMethod' valueLocalIndex' valueLocalOpCode
Long Parameter List,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerList,The method has 6 parameters. Parameters: typeBuilder' il' type' valueMethod' valueLocalIndex' valueLocalOpCode
Long Parameter List,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The method has 6 parameters. Parameters: typeBuilder' il' type' getValueMethod' valueLocalIndex' valueLocalOpCode
Long Parameter List,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerBytesToStream,The method has 7 parameters. Parameters: il' type' valueOpCode' valueLocalIndex' tag' valueMethod' isTargetCollection
Long Parameter List,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,GenerateSerializerClass,The method has 5 parameters. Parameters: typeBuilder' objType' isEntryPoint' baseType' ownerType
Long Parameter List,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerClass,The method has 10 parameters. Parameters: typeBuilder' il' type' tag' valueMethod' callerType' isEntryPoint' baseType' valueLocalIndex' valueLocalOpCode
Long Parameter List,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerCallClassMethod,The method has 8 parameters. Parameters: typeBuilder' il' type' valueOpCode' valueLocalIndex' tag' valueMethod' needClassHeader
Long Parameter List,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerProperties,The method has 7 parameters. Parameters: typeBuilder' il' type' callerType' isEntryPoint' needClassHeader' baseType
Long Parameter List,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerCallClassMethod,The method has 8 parameters. Parameters: typeBuilder' il' type' valueMethod' tag' needClassHeader' callerType' ownerType
Long Identifier,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,,The length of the parameter CreateInstanceForConcreteTypeMethod is 35.
Long Identifier,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,,The length of the parameter ConvertBaseToConcreteTypeMethod is 31.
Long Statement,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,GenerateDeserializerClass,The length of the statement  "                typeof(void)' new[] { objType.IsValueType ? objType.MakeByRefType() : objType' ByteArrayType' typeof(int).MakeByRefType() });" is 125.
Long Statement,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerList,The length of the statement  "                    WriteSerializerCallClassMethod(typeBuilder' il' listType' OpCodes.Ldloc' entryLocal.LocalIndex' 1' null' needClassHeader: false); " is 129.
Long Statement,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The length of the statement  "                    WriteSerializerClass(typeBuilder' il' keyType' 1' keyMethod' callerType: keyType' valueLocalIndex: entryLocal.LocalIndex' " is 121.
Long Statement,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The length of the statement  "                WriteSerializerBytesToStream(il' keyType' OpCodes.Ldloca_S' entryLocal.LocalIndex' 1' keyMethod' isTargetCollection: true); " is 123.
Long Statement,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The length of the statement  "                    WriteSerializerClass(typeBuilder' il' valueType' 2' valueMethod' callerType: valueType' valueLocalIndex: entryLocal.LocalIndex' " is 127.
Long Statement,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The length of the statement  "                WriteSerializerBytesToStream(il' valueType' OpCodes.Ldloca_S' entryLocal.LocalIndex' 2' valueMethod' isTargetCollection: true); " is 127.
Long Statement,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,GenerateSerializerClass,The length of the statement  "            WriteSerializerClass(typeBuilder' methodIL' objType' tag: 0' valueMethod: null' callerType: objType' isEntryPoint: isEntryPoint' " is 128.
Long Statement,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerClass,The length of the statement  "                    WriteSerializerDictionary(typeBuilder' il' type' valueMethod' valueLocalIndex: valueLocalIndex' valueLocalOpCode: valueLocalOpCode); " is 132.
Long Statement,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerClass,The length of the statement  "                    if (type.IsArray) WriteSerializerArray(typeBuilder' il' type' valueMethod' valueLocalIndex: valueLocalIndex' valueLocalOpCode: valueLocalOpCode); " is 145.
Long Statement,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerClass,The length of the statement  "                    else WriteSerializerList(typeBuilder' il' type' valueMethod' valueLocalIndex: valueLocalIndex' valueLocalOpCode: valueLocalOpCode); " is 131.
Long Statement,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerProperties,The length of the statement  "                        WriteSerializerCallClassMethod(typeBuilder' il' propType' getMethod' tag' needClassHeader' callerType' ownerType: type); " is 120.
Long Statement,MessageShark,MessageSharkSerializer,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\MessageSharkSerializer.cs,Serialize,The length of the statement  "                var method = new DynamicMethod(name' CustomBinary.VoidType' new[] { CustomBinary.ObjectType' CustomBinary.StreamType }' restrictedSkipVisibility: true); " is 152.
Long Statement,MessageShark,MessageSharkSerializer,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\MessageSharkSerializer.cs,Serialize,The length of the statement  "                var method = new DynamicMethod(name' CustomBinary.ByteArrayType' new[] { CustomBinary.ObjectType }' restrictedSkipVisibility: true); " is 132.
Long Statement,MessageShark,MessageSharkSerializer,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\MessageSharkSerializer.cs,Deserialize,The length of the statement  "                var method = new DynamicMethod(name' CustomBinary.ObjectType' new[] { CustomBinary.ByteArrayType' CustomBinary.IntType }' restrictedSkipVisibility: true); " is 154.
Long Statement,MessageShark,MessageSharkSerializer,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\MessageSharkSerializer.cs,Deserialize,The length of the statement  "                var method = new DynamicMethod(name' CustomBinary.ObjectType' new[] { CustomBinary.StreamType' CustomBinary.IntType }' restrictedSkipVisibility: true); " is 151.
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,EncodeLength,The following statement contains a magic number: return tag <= 15 ? new byte[] { (byte)((tag << 4) | length) } : new byte[] { (byte)length' (byte)tag };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,EncodeLength,The following statement contains a magic number: return tag <= 15 ? new byte[] { (byte)((tag << 4) | length) } : new byte[] { (byte)length' (byte)tag };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,ReadFully,The following statement contains a magic number: byte[] buffer = new byte[16 * 1024];
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,ReadFully,The following statement contains a magic number: byte[] buffer = new byte[16 * 1024];
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,IsNextTagForPropertyTag,The following statement contains a magic number: var isNextTag = (tag <= 15 && tag == ((readByte & MSB) >> 4)) || (tag > 15 && tag == buffer[startIndex + 1]);
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,IsNextTagForPropertyTag,The following statement contains a magic number: var isNextTag = (tag <= 15 && tag == ((readByte & MSB) >> 4)) || (tag > 15 && tag == buffer[startIndex + 1]);
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,IsNextTagForPropertyTag,The following statement contains a magic number: var isNextTag = (tag <= 15 && tag == ((readByte & MSB) >> 4)) || (tag > 15 && tag == buffer[startIndex + 1]);
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,MoveToNextBytes,The following statement contains a magic number: if (tag <= 15) startIndex++;             else startIndex += 2;
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,MoveToNextBytes,The following statement contains a magic number: if (tag <= 15) startIndex++;             else startIndex += 2;
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,GetNextLength,The following statement contains a magic number: if (tag <= 15)                 length = size = buffer[startIndex++] & LSB;             else {                 length = size = buffer[startIndex++];                 startIndex++;             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,ReverseEx,The following statement contains a magic number: var midpoint = size / 2;
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDecimal,The following statement contains a magic number: if (buffer.Length == 2) {                  if (buffer[1] == 1) return decimal.MinValue;                  else return decimal.MaxValue;              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToTimeSpan,The following statement contains a magic number: if (buffer.Length == 1) {                 if (buffer[0] == 0) return TimeSpan.MinValue;                 else return TimeSpan.MaxValue;             } else if (buffer.Length == 2) {                 return TimeSpan.FromTicks(TimeSpanTicks[buffer[0]] * buffer[1]);             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (buffer.Length == 2) {                  if (buffer[1] == 1)                      return double.MinValue;                  else return double.MaxValue;              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {                  var temp = buffer[0];                  buffer[0] = buffer[7];                  buffer[7] = temp;                    temp = buffer[1];                  buffer[1] = buffer[6];                  buffer[6] = temp;                    temp = buffer[2];                  buffer[2] = buffer[5];                  buffer[5] = temp;                    temp = buffer[3];                  buffer[3] = buffer[4];                  buffer[4] = temp;              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {                  var temp = buffer[0];                  buffer[0] = buffer[7];                  buffer[7] = temp;                    temp = buffer[1];                  buffer[1] = buffer[6];                  buffer[6] = temp;                    temp = buffer[2];                  buffer[2] = buffer[5];                  buffer[5] = temp;                    temp = buffer[3];                  buffer[3] = buffer[4];                  buffer[4] = temp;              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {                  var temp = buffer[0];                  buffer[0] = buffer[7];                  buffer[7] = temp;                    temp = buffer[1];                  buffer[1] = buffer[6];                  buffer[6] = temp;                    temp = buffer[2];                  buffer[2] = buffer[5];                  buffer[5] = temp;                    temp = buffer[3];                  buffer[3] = buffer[4];                  buffer[4] = temp;              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {                  var temp = buffer[0];                  buffer[0] = buffer[7];                  buffer[7] = temp;                    temp = buffer[1];                  buffer[1] = buffer[6];                  buffer[6] = temp;                    temp = buffer[2];                  buffer[2] = buffer[5];                  buffer[5] = temp;                    temp = buffer[3];                  buffer[3] = buffer[4];                  buffer[4] = temp;              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {                  var temp = buffer[0];                  buffer[0] = buffer[7];                  buffer[7] = temp;                    temp = buffer[1];                  buffer[1] = buffer[6];                  buffer[6] = temp;                    temp = buffer[2];                  buffer[2] = buffer[5];                  buffer[5] = temp;                    temp = buffer[3];                  buffer[3] = buffer[4];                  buffer[4] = temp;              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {                  var temp = buffer[0];                  buffer[0] = buffer[7];                  buffer[7] = temp;                    temp = buffer[1];                  buffer[1] = buffer[6];                  buffer[6] = temp;                    temp = buffer[2];                  buffer[2] = buffer[5];                  buffer[5] = temp;                    temp = buffer[3];                  buffer[3] = buffer[4];                  buffer[4] = temp;              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {                  var temp = buffer[0];                  buffer[0] = buffer[7];                  buffer[7] = temp;                    temp = buffer[1];                  buffer[1] = buffer[6];                  buffer[6] = temp;                    temp = buffer[2];                  buffer[2] = buffer[5];                  buffer[5] = temp;                    temp = buffer[3];                  buffer[3] = buffer[4];                  buffer[4] = temp;              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {                  var temp = buffer[0];                  buffer[0] = buffer[7];                  buffer[7] = temp;                    temp = buffer[1];                  buffer[1] = buffer[6];                  buffer[6] = temp;                    temp = buffer[2];                  buffer[2] = buffer[5];                  buffer[5] = temp;                    temp = buffer[3];                  buffer[3] = buffer[4];                  buffer[4] = temp;              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {                  var temp = buffer[0];                  buffer[0] = buffer[7];                  buffer[7] = temp;                    temp = buffer[1];                  buffer[1] = buffer[6];                  buffer[6] = temp;                    temp = buffer[2];                  buffer[2] = buffer[5];                  buffer[5] = temp;                    temp = buffer[3];                  buffer[3] = buffer[4];                  buffer[4] = temp;              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {                  var temp = buffer[0];                  buffer[0] = buffer[7];                  buffer[7] = temp;                    temp = buffer[1];                  buffer[1] = buffer[6];                  buffer[6] = temp;                    temp = buffer[2];                  buffer[2] = buffer[5];                  buffer[5] = temp;                    temp = buffer[3];                  buffer[3] = buffer[4];                  buffer[4] = temp;              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {                  var temp = buffer[0];                  buffer[0] = buffer[7];                  buffer[7] = temp;                    temp = buffer[1];                  buffer[1] = buffer[6];                  buffer[6] = temp;                    temp = buffer[2];                  buffer[2] = buffer[5];                  buffer[5] = temp;                    temp = buffer[3];                  buffer[3] = buffer[4];                  buffer[4] = temp;              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {                  var temp = buffer[0];                  buffer[0] = buffer[7];                  buffer[7] = temp;                    temp = buffer[1];                  buffer[1] = buffer[6];                  buffer[6] = temp;                    temp = buffer[2];                  buffer[2] = buffer[5];                  buffer[5] = temp;                    temp = buffer[3];                  buffer[3] = buffer[4];                  buffer[4] = temp;              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToFloat,The following statement contains a magic number: return BitConverter.ToSingle(BytesToIntegerBytes(buffer' 4)' 0);
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToInt16,The following statement contains a magic number: return BitConverter.ToInt16(BytesToIntegerBytes(buffer' 2)' 0);
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToInt32,The following statement contains a magic number: return BitConverter.ToInt32(BytesToIntegerBytes(buffer' 4)' 0);
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToInt64,The following statement contains a magic number: return BitConverter.ToInt64(BytesToIntegerBytes(buffer' 8)' 0);
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToUInt16,The following statement contains a magic number: return BitConverter.ToUInt16(BytesToIntegerBytes(buffer' 2)' 0);
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToUInt32,The following statement contains a magic number: return BitConverter.ToUInt32(BytesToIntegerBytes(buffer' 4)' 0);
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToUInt64,The following statement contains a magic number: return BitConverter.ToUInt64(BytesToIntegerBytes(buffer' 8)' 0);
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDeserializerDictionary,The following statement contains a magic number: WriteDeserializerReadValue(typeBuilder' il' valueType' 2' valueItemLocal.LocalIndex);
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The following statement contains a magic number: if (valueType.IsComplexType()) {                  var valueMethod = keyValuePairType.GetProperty("Value").GetGetMethod();                  if (valueType.IsCollectionType())                      WriteSerializerClass(typeBuilder' il' valueType' 2' valueMethod' callerType: valueType' valueLocalIndex: entryLocal.LocalIndex'                      valueLocalOpCode: OpCodes.Ldloca_S);                  else                      WriteSerializerCallClassMethod(typeBuilder' il' valueType' OpCodes.Ldloca_S' entryLocal.LocalIndex' 2' valueMethod'                      needClassHeader: false);              } else {                  var valueMethod = keyValuePairType.GetProperty("Value").GetGetMethod();                  WriteSerializerBytesToStream(il' valueType' OpCodes.Ldloca_S' entryLocal.LocalIndex' 2' valueMethod' isTargetCollection: true);              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The following statement contains a magic number: if (valueType.IsComplexType()) {                  var valueMethod = keyValuePairType.GetProperty("Value").GetGetMethod();                  if (valueType.IsCollectionType())                      WriteSerializerClass(typeBuilder' il' valueType' 2' valueMethod' callerType: valueType' valueLocalIndex: entryLocal.LocalIndex'                      valueLocalOpCode: OpCodes.Ldloca_S);                  else                      WriteSerializerCallClassMethod(typeBuilder' il' valueType' OpCodes.Ldloca_S' entryLocal.LocalIndex' 2' valueMethod'                      needClassHeader: false);              } else {                  var valueMethod = keyValuePairType.GetProperty("Value").GetGetMethod();                  WriteSerializerBytesToStream(il' valueType' OpCodes.Ldloca_S' entryLocal.LocalIndex' 2' valueMethod' isTargetCollection: true);              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The following statement contains a magic number: if (valueType.IsComplexType()) {                  var valueMethod = keyValuePairType.GetProperty("Value").GetGetMethod();                  if (valueType.IsCollectionType())                      WriteSerializerClass(typeBuilder' il' valueType' 2' valueMethod' callerType: valueType' valueLocalIndex: entryLocal.LocalIndex'                      valueLocalOpCode: OpCodes.Ldloca_S);                  else                      WriteSerializerCallClassMethod(typeBuilder' il' valueType' OpCodes.Ldloca_S' entryLocal.LocalIndex' 2' valueMethod'                      needClassHeader: false);              } else {                  var valueMethod = keyValuePairType.GetProperty("Value").GetGetMethod();                  WriteSerializerBytesToStream(il' valueType' OpCodes.Ldloca_S' entryLocal.LocalIndex' 2' valueMethod' isTargetCollection: true);              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerProperties,The following statement contains a magic number: if (!isEntryPoint) {                  var needClassHeaderLabel = il.DefineLabel();                  il.Emit(OpCodes.Ldarg' 4);                  il.Emit(OpCodes.Brfalse' needClassHeaderLabel);                  il.Emit(OpCodes.Ldarg_1);                  il.Emit(OpCodes.Ldc_I4_1);                  il.Emit(OpCodes.Ldarg_3);                  il.Emit(OpCodes.Call' EncodeLengthMethod);                  il.Emit(OpCodes.Call' BufferStreamWriteBytesMethod);                  il.MarkLabel(needClassHeaderLabel);              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerProperties,The following statement contains a magic number: foreach (var prop in props) {                  var propType = prop.PropertyType;                    if (!prop.CanRead || !prop.CanWrite) continue;                    var getMethod = prop.GetGetMethod();                    if (propType.IsComplexType()) {                      if (propType.IsCollectionType())                          WriteSerializerClass(typeBuilder' il' propType' tag' getMethod' callerType: callerType);                      else {                          WriteSerializerCallClassMethod(typeBuilder' il' propType' getMethod' tag' needClassHeader' callerType' ownerType: type);                      }                  } else {                      var isTypeEnum = propType.IsEnum;                      var isNullable = propType.IsNullable();                      var nullLocal = isNullable ? il.DeclareLocal(propType) : default(LocalBuilder);                      il.Emit(OpCodes.Ldarg_1);                      if (isTypeClass)                          il.Emit(OpCodes.Ldarg_2);                      else il.Emit(OpCodes.Ldarga' 2);                      il.Emit(isTypeClass ? OpCodes.Callvirt : OpCodes.Call' getMethod);                      if (isNullable) {                          il.Emit(OpCodes.Stloc' nullLocal.LocalIndex);                          il.Emit(OpCodes.Ldloc' nullLocal.LocalIndex);                          il.Emit(OpCodes.Call' propType.GetNullableValueMethod());                        }                      if (isTypeEnum) il.Emit(OpCodes.Box' propType);                      il.Emit(OpCodes.Ldc_I4' tag);                      if (isTypeEnum) propType = EnumType;                      if (isNullable) {                          il.Emit(OpCodes.Ldloca' nullLocal.LocalIndex);                          il.Emit(OpCodes.Call' propType.GetNullableHasValueMethod());                       }                       else {                          il.Emit(OpCodes.Ldc_I4_0);                      }                      il.Emit(OpCodes.Call' PrimitiveWriterMethods[propType.GetNonNullableType()]);                  }                  tag++;              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerCallClassMethod,The following statement contains a magic number: if (TypeMapping.ContainsKey(type)) {                  var index = 0;                  var typeMapping = TypeMapping[type];                  var count = typeMapping.Count;                  var types = typeMapping.Select(kv => kv.Key);                  var needBranchLabel = count > 1;                  var branchLabel = needBranchLabel ? il.DefineLabel() : DefaultLabel;                  var valueLocal = il.DeclareLocal(type);                  var valueTypeLocal = il.DeclareLocal(TypeType);                  var nullConditionLabel = il.DefineLabel();                    if (isTypeClass)                      il.Emit(OpCodes.Ldarg_2);                  else il.Emit(OpCodes.Ldarga' 2);                  il.Emit(OpCodes.Call' valueMethod);                  il.Emit(OpCodes.Stloc' valueLocal.LocalIndex);                      il.Emit(OpCodes.Ldloc' valueLocal.LocalIndex);                  il.Emit(OpCodes.Brfalse' nullConditionLabel);                      il.Emit(OpCodes.Ldloc' valueLocal.LocalIndex);                  il.Emit(OpCodes.Callvirt' GetTypeMethod);                  il.Emit(OpCodes.Stloc' valueTypeLocal.LocalIndex);                    foreach (var mapType in types) {                      index++;                      var isLastIndex = index == count;                      var isLastCondition = isLastIndex && needBranchLabel;                      var conditionLabel = !isLastCondition ? il.DefineLabel() : DefaultLabel;                      var currentConditionLabel = isLastCondition ? branchLabel : conditionLabel;                      il.Emit(OpCodes.Ldloc' valueTypeLocal.LocalIndex);                      il.Emit(OpCodes.Ldtoken' mapType);                      il.Emit(OpCodes.Call' GetTypeFromHandleMethod);                      il.Emit(OpCodes.Call' GetTypeOpEqualityMethod);                      il.Emit(OpCodes.Brfalse' currentConditionLabel);                        method = GenerateSerializerClass(typeBuilder' mapType' baseType: type' ownerType: ownerType);                      il.Emit(OpCodes.Ldarg_0);                      il.Emit(OpCodes.Ldarg_1);                      il.Emit(OpCodes.Ldloc' valueLocal.LocalIndex);                      if (mapType.IsClass)                          il.Emit(OpCodes.Castclass' mapType);                      else il.Emit(OpCodes.Unbox_Any' mapType);                      il.Emit(OpCodes.Ldc_I4' tag);                      il.Emit(OpCodes.Ldc_I4' needClassHeader ? 1 : 0);                      il.Emit(OpCodes.Call' method);                        if (!isLastIndex)                          il.Emit(OpCodes.Br' branchLabel);                      il.MarkLabel(currentConditionLabel);                  }                    il.MarkLabel(nullConditionLabel);                  return;              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerCallClassMethod,The following statement contains a magic number: if (isTypeClass)                  il.Emit(OpCodes.Ldarg_2);              else il.Emit(OpCodes.Ldarga' 2);
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int16ToBytes,The following statement contains a magic number: if (value >= 0 && value <= 255) return new byte[] { (byte)value };              else if (value < 0) return BitConverter.GetBytes(value);
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int16ToBytes,The following statement contains a magic number: byte[] buffer = new byte[2];
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int16ToBytes,The following statement contains a magic number: unchecked {                 buffer[index++] = (byte)value;                 if ((sValue = (value >> 8)) > 0) {                     buffer[index++] = (byte)sValue;                 }             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int32ToBytes,The following statement contains a magic number: if (value >= 0 && value <= 255) return new byte[] { (byte)value };              else if (value < 0) return BitConverter.GetBytes(value);
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int32ToBytes,The following statement contains a magic number: byte[] buffer = new byte[4];
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int32ToBytes,The following statement contains a magic number: unchecked {                 buffer[index++] = (byte)value;                 if ((sValue = (value >> 8)) > 0) {                     buffer[index++] = (byte)sValue;                     if ((sValue = (value >> 16)) > 0) {                         buffer[index++] = (byte)sValue;                         if ((sValue = (value >> 24)) > 0) buffer[index++] = (byte)sValue;                     }                 }             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int32ToBytes,The following statement contains a magic number: unchecked {                 buffer[index++] = (byte)value;                 if ((sValue = (value >> 8)) > 0) {                     buffer[index++] = (byte)sValue;                     if ((sValue = (value >> 16)) > 0) {                         buffer[index++] = (byte)sValue;                         if ((sValue = (value >> 24)) > 0) buffer[index++] = (byte)sValue;                     }                 }             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int32ToBytes,The following statement contains a magic number: unchecked {                 buffer[index++] = (byte)value;                 if ((sValue = (value >> 8)) > 0) {                     buffer[index++] = (byte)sValue;                     if ((sValue = (value >> 16)) > 0) {                         buffer[index++] = (byte)sValue;                         if ((sValue = (value >> 24)) > 0) buffer[index++] = (byte)sValue;                     }                 }             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if (value >= 0 && value <= 255) return new byte[] { (byte)value };              else if (value < 0) return BitConverter.GetBytes(value);
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: byte[] buffer = new byte[8];
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: unchecked {                 buffer[index++] = (byte)(value & msb);                 if ((sValue = (value >> 8) & msb) > 0) {                     buffer[index++] = (byte)sValue;                     if ((sValue = (value >> 16) & msb) > 0) {                         buffer[index++] = (byte)sValue;                         if ((sValue = (value >> 24) & msb) > 0) {                             buffer[index++] = (byte)sValue;                             if ((sValue = (value >> 32) & msb) > 0) {                                 buffer[index++] = (byte)sValue;                                 if ((sValue = (value >> 40) & msb) > 0) {                                     buffer[index++] = (byte)sValue;                                     if ((sValue = (value >> 48) & msb) > 0) {                                         buffer[index++] = (byte)sValue;                                         if ((sValue = (value >> 56) & msb) > 0)                                              buffer[index++] = (byte)sValue;                                     }                                 }                             }                         }                     }                 }             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: unchecked {                 buffer[index++] = (byte)(value & msb);                 if ((sValue = (value >> 8) & msb) > 0) {                     buffer[index++] = (byte)sValue;                     if ((sValue = (value >> 16) & msb) > 0) {                         buffer[index++] = (byte)sValue;                         if ((sValue = (value >> 24) & msb) > 0) {                             buffer[index++] = (byte)sValue;                             if ((sValue = (value >> 32) & msb) > 0) {                                 buffer[index++] = (byte)sValue;                                 if ((sValue = (value >> 40) & msb) > 0) {                                     buffer[index++] = (byte)sValue;                                     if ((sValue = (value >> 48) & msb) > 0) {                                         buffer[index++] = (byte)sValue;                                         if ((sValue = (value >> 56) & msb) > 0)                                              buffer[index++] = (byte)sValue;                                     }                                 }                             }                         }                     }                 }             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: unchecked {                 buffer[index++] = (byte)(value & msb);                 if ((sValue = (value >> 8) & msb) > 0) {                     buffer[index++] = (byte)sValue;                     if ((sValue = (value >> 16) & msb) > 0) {                         buffer[index++] = (byte)sValue;                         if ((sValue = (value >> 24) & msb) > 0) {                             buffer[index++] = (byte)sValue;                             if ((sValue = (value >> 32) & msb) > 0) {                                 buffer[index++] = (byte)sValue;                                 if ((sValue = (value >> 40) & msb) > 0) {                                     buffer[index++] = (byte)sValue;                                     if ((sValue = (value >> 48) & msb) > 0) {                                         buffer[index++] = (byte)sValue;                                         if ((sValue = (value >> 56) & msb) > 0)                                              buffer[index++] = (byte)sValue;                                     }                                 }                             }                         }                     }                 }             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: unchecked {                 buffer[index++] = (byte)(value & msb);                 if ((sValue = (value >> 8) & msb) > 0) {                     buffer[index++] = (byte)sValue;                     if ((sValue = (value >> 16) & msb) > 0) {                         buffer[index++] = (byte)sValue;                         if ((sValue = (value >> 24) & msb) > 0) {                             buffer[index++] = (byte)sValue;                             if ((sValue = (value >> 32) & msb) > 0) {                                 buffer[index++] = (byte)sValue;                                 if ((sValue = (value >> 40) & msb) > 0) {                                     buffer[index++] = (byte)sValue;                                     if ((sValue = (value >> 48) & msb) > 0) {                                         buffer[index++] = (byte)sValue;                                         if ((sValue = (value >> 56) & msb) > 0)                                              buffer[index++] = (byte)sValue;                                     }                                 }                             }                         }                     }                 }             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: unchecked {                 buffer[index++] = (byte)(value & msb);                 if ((sValue = (value >> 8) & msb) > 0) {                     buffer[index++] = (byte)sValue;                     if ((sValue = (value >> 16) & msb) > 0) {                         buffer[index++] = (byte)sValue;                         if ((sValue = (value >> 24) & msb) > 0) {                             buffer[index++] = (byte)sValue;                             if ((sValue = (value >> 32) & msb) > 0) {                                 buffer[index++] = (byte)sValue;                                 if ((sValue = (value >> 40) & msb) > 0) {                                     buffer[index++] = (byte)sValue;                                     if ((sValue = (value >> 48) & msb) > 0) {                                         buffer[index++] = (byte)sValue;                                         if ((sValue = (value >> 56) & msb) > 0)                                              buffer[index++] = (byte)sValue;                                     }                                 }                             }                         }                     }                 }             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: unchecked {                 buffer[index++] = (byte)(value & msb);                 if ((sValue = (value >> 8) & msb) > 0) {                     buffer[index++] = (byte)sValue;                     if ((sValue = (value >> 16) & msb) > 0) {                         buffer[index++] = (byte)sValue;                         if ((sValue = (value >> 24) & msb) > 0) {                             buffer[index++] = (byte)sValue;                             if ((sValue = (value >> 32) & msb) > 0) {                                 buffer[index++] = (byte)sValue;                                 if ((sValue = (value >> 40) & msb) > 0) {                                     buffer[index++] = (byte)sValue;                                     if ((sValue = (value >> 48) & msb) > 0) {                                         buffer[index++] = (byte)sValue;                                         if ((sValue = (value >> 56) & msb) > 0)                                              buffer[index++] = (byte)sValue;                                     }                                 }                             }                         }                     }                 }             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: unchecked {                 buffer[index++] = (byte)(value & msb);                 if ((sValue = (value >> 8) & msb) > 0) {                     buffer[index++] = (byte)sValue;                     if ((sValue = (value >> 16) & msb) > 0) {                         buffer[index++] = (byte)sValue;                         if ((sValue = (value >> 24) & msb) > 0) {                             buffer[index++] = (byte)sValue;                             if ((sValue = (value >> 32) & msb) > 0) {                                 buffer[index++] = (byte)sValue;                                 if ((sValue = (value >> 40) & msb) > 0) {                                     buffer[index++] = (byte)sValue;                                     if ((sValue = (value >> 48) & msb) > 0) {                                         buffer[index++] = (byte)sValue;                                         if ((sValue = (value >> 56) & msb) > 0)                                              buffer[index++] = (byte)sValue;                                     }                                 }                             }                         }                     }                 }             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,TimeSpanToBytes,The following statement contains a magic number: if (value == TimeSpan.MaxValue) buffer = MaxTimeSpanBytes;             else if (value == TimeSpan.MinValue) buffer = MinTimeSpanBytes;             else {                 int tickIndex = -1;                 long ticksValue;                 var ticks = value.Ticks;                 for (var i = 0; i < TimeSpanTicksLength; i++) {                     if (ticks % (ticksValue = TimeSpanTicks[i]) == 0) {                         ticks /= ticksValue;                         tickIndex = i;                         break;                     }                 }                 if (ticks <= 255 && tickIndex != -1) buffer = new byte[] { (byte)tickIndex' (byte)ticks };                 else {                     var ticksBuffer = Int64ToBytes(ticks);                     buffer = new byte[ticksBuffer.Length + 1];                     buffer[0] = (byte)(tickIndex > -1 ? tickIndex : TimeSpanTicksLength);                     Buffer.BlockCopy(ticksBuffer' 0' buffer' 1' ticksBuffer.Length);                 }             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)                  buffer = _demicalMax;              else if (value == double.MinValue)                  buffer = _demicalMin;              else {                  buffer = BitConverter.GetBytes(value);                  if (BitConverter.IsLittleEndian) {                      var temp = buffer[0];                      buffer[0] = buffer[7];                      buffer[7] = temp;                        temp = buffer[1];                      buffer[1] = buffer[6];                      buffer[6] = temp;                        temp = buffer[2];                      buffer[2] = buffer[5];                      buffer[5] = temp;                        temp = buffer[3];                      buffer[3] = buffer[4];                      buffer[4] = temp;                  }              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)                  buffer = _demicalMax;              else if (value == double.MinValue)                  buffer = _demicalMin;              else {                  buffer = BitConverter.GetBytes(value);                  if (BitConverter.IsLittleEndian) {                      var temp = buffer[0];                      buffer[0] = buffer[7];                      buffer[7] = temp;                        temp = buffer[1];                      buffer[1] = buffer[6];                      buffer[6] = temp;                        temp = buffer[2];                      buffer[2] = buffer[5];                      buffer[5] = temp;                        temp = buffer[3];                      buffer[3] = buffer[4];                      buffer[4] = temp;                  }              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)                  buffer = _demicalMax;              else if (value == double.MinValue)                  buffer = _demicalMin;              else {                  buffer = BitConverter.GetBytes(value);                  if (BitConverter.IsLittleEndian) {                      var temp = buffer[0];                      buffer[0] = buffer[7];                      buffer[7] = temp;                        temp = buffer[1];                      buffer[1] = buffer[6];                      buffer[6] = temp;                        temp = buffer[2];                      buffer[2] = buffer[5];                      buffer[5] = temp;                        temp = buffer[3];                      buffer[3] = buffer[4];                      buffer[4] = temp;                  }              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)                  buffer = _demicalMax;              else if (value == double.MinValue)                  buffer = _demicalMin;              else {                  buffer = BitConverter.GetBytes(value);                  if (BitConverter.IsLittleEndian) {                      var temp = buffer[0];                      buffer[0] = buffer[7];                      buffer[7] = temp;                        temp = buffer[1];                      buffer[1] = buffer[6];                      buffer[6] = temp;                        temp = buffer[2];                      buffer[2] = buffer[5];                      buffer[5] = temp;                        temp = buffer[3];                      buffer[3] = buffer[4];                      buffer[4] = temp;                  }              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)                  buffer = _demicalMax;              else if (value == double.MinValue)                  buffer = _demicalMin;              else {                  buffer = BitConverter.GetBytes(value);                  if (BitConverter.IsLittleEndian) {                      var temp = buffer[0];                      buffer[0] = buffer[7];                      buffer[7] = temp;                        temp = buffer[1];                      buffer[1] = buffer[6];                      buffer[6] = temp;                        temp = buffer[2];                      buffer[2] = buffer[5];                      buffer[5] = temp;                        temp = buffer[3];                      buffer[3] = buffer[4];                      buffer[4] = temp;                  }              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)                  buffer = _demicalMax;              else if (value == double.MinValue)                  buffer = _demicalMin;              else {                  buffer = BitConverter.GetBytes(value);                  if (BitConverter.IsLittleEndian) {                      var temp = buffer[0];                      buffer[0] = buffer[7];                      buffer[7] = temp;                        temp = buffer[1];                      buffer[1] = buffer[6];                      buffer[6] = temp;                        temp = buffer[2];                      buffer[2] = buffer[5];                      buffer[5] = temp;                        temp = buffer[3];                      buffer[3] = buffer[4];                      buffer[4] = temp;                  }              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)                  buffer = _demicalMax;              else if (value == double.MinValue)                  buffer = _demicalMin;              else {                  buffer = BitConverter.GetBytes(value);                  if (BitConverter.IsLittleEndian) {                      var temp = buffer[0];                      buffer[0] = buffer[7];                      buffer[7] = temp;                        temp = buffer[1];                      buffer[1] = buffer[6];                      buffer[6] = temp;                        temp = buffer[2];                      buffer[2] = buffer[5];                      buffer[5] = temp;                        temp = buffer[3];                      buffer[3] = buffer[4];                      buffer[4] = temp;                  }              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)                  buffer = _demicalMax;              else if (value == double.MinValue)                  buffer = _demicalMin;              else {                  buffer = BitConverter.GetBytes(value);                  if (BitConverter.IsLittleEndian) {                      var temp = buffer[0];                      buffer[0] = buffer[7];                      buffer[7] = temp;                        temp = buffer[1];                      buffer[1] = buffer[6];                      buffer[6] = temp;                        temp = buffer[2];                      buffer[2] = buffer[5];                      buffer[5] = temp;                        temp = buffer[3];                      buffer[3] = buffer[4];                      buffer[4] = temp;                  }              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)                  buffer = _demicalMax;              else if (value == double.MinValue)                  buffer = _demicalMin;              else {                  buffer = BitConverter.GetBytes(value);                  if (BitConverter.IsLittleEndian) {                      var temp = buffer[0];                      buffer[0] = buffer[7];                      buffer[7] = temp;                        temp = buffer[1];                      buffer[1] = buffer[6];                      buffer[6] = temp;                        temp = buffer[2];                      buffer[2] = buffer[5];                      buffer[5] = temp;                        temp = buffer[3];                      buffer[3] = buffer[4];                      buffer[4] = temp;                  }              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)                  buffer = _demicalMax;              else if (value == double.MinValue)                  buffer = _demicalMin;              else {                  buffer = BitConverter.GetBytes(value);                  if (BitConverter.IsLittleEndian) {                      var temp = buffer[0];                      buffer[0] = buffer[7];                      buffer[7] = temp;                        temp = buffer[1];                      buffer[1] = buffer[6];                      buffer[6] = temp;                        temp = buffer[2];                      buffer[2] = buffer[5];                      buffer[5] = temp;                        temp = buffer[3];                      buffer[3] = buffer[4];                      buffer[4] = temp;                  }              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)                  buffer = _demicalMax;              else if (value == double.MinValue)                  buffer = _demicalMin;              else {                  buffer = BitConverter.GetBytes(value);                  if (BitConverter.IsLittleEndian) {                      var temp = buffer[0];                      buffer[0] = buffer[7];                      buffer[7] = temp;                        temp = buffer[1];                      buffer[1] = buffer[6];                      buffer[6] = temp;                        temp = buffer[2];                      buffer[2] = buffer[5];                      buffer[5] = temp;                        temp = buffer[3];                      buffer[3] = buffer[4];                      buffer[4] = temp;                  }              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)                  buffer = _demicalMax;              else if (value == double.MinValue)                  buffer = _demicalMin;              else {                  buffer = BitConverter.GetBytes(value);                  if (BitConverter.IsLittleEndian) {                      var temp = buffer[0];                      buffer[0] = buffer[7];                      buffer[7] = temp;                        temp = buffer[1];                      buffer[1] = buffer[6];                      buffer[6] = temp;                        temp = buffer[2];                      buffer[2] = buffer[5];                      buffer[5] = temp;                        temp = buffer[3];                      buffer[3] = buffer[4];                      buffer[4] = temp;                  }              }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {                 buffer = StringToByteArray((string)value);             } else if (type == typeof(int)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(byte)) {                 buffer = Int32ToBytes((byte)value);             } else if (type == typeof(DateTime)) {                 buffer = DateTimeToByteArray((DateTime)value);             } else if (type == typeof(bool)) {                 buffer = new byte[] { (bool)value ? (byte)1 : (byte)0 };             } else if (type == typeof(char)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(double)) {                 unsafe {                     var dValue = (double)value;                                           if (dValue == double.MaxValue)                          buffer = _demicalMax;                      else if (dValue == double.MinValue)                          buffer = _demicalMin;                      else {                          buffer = BitConverter.GetBytes(dValue);                          if (BitConverter.IsLittleEndian) {                              var temp = buffer[0];                              buffer[0] = buffer[7];                              buffer[7] = temp;                                temp = buffer[1];                              buffer[1] = buffer[6];                              buffer[6] = temp;                                temp = buffer[2];                              buffer[2] = buffer[5];                              buffer[5] = temp;                                temp = buffer[3];                              buffer[3] = buffer[4];                              buffer[4] = temp;                          }                      }                 }             } else if (type == typeof(short)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(long)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(decimal)) {                 buffer = DecimalToByteArray((decimal)value);             } else if (type == typeof(float)) {                 unsafe {                     var fValue = (float)value;                     buffer = Int32ToBytes(*((int*)&fValue));                 }             } else if (type == typeof(ushort)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(uint)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(int?)) {                 buffer = Int32ToBytes((value as int?) ?? 0);             } else if (type == typeof(ulong)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(Guid)) {                 buffer = ((Guid)value).ToByteArray();             } else if (type.IsEnum) {                  buffer = Int32ToBytes(((IConvertible)value).ToInt32(null));             } else if (type == typeof(TimeSpan)) {                 buffer = TimeSpanToBytes((TimeSpan)value);             } else if (type == typeof(TimeSpan?)) {                 buffer = TimeSpanToBytes((value as TimeSpan?) ?? TimeSpan.Zero);             } else if (type == VoidType) {                 buffer = new byte[0];             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {                 buffer = StringToByteArray((string)value);             } else if (type == typeof(int)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(byte)) {                 buffer = Int32ToBytes((byte)value);             } else if (type == typeof(DateTime)) {                 buffer = DateTimeToByteArray((DateTime)value);             } else if (type == typeof(bool)) {                 buffer = new byte[] { (bool)value ? (byte)1 : (byte)0 };             } else if (type == typeof(char)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(double)) {                 unsafe {                     var dValue = (double)value;                                           if (dValue == double.MaxValue)                          buffer = _demicalMax;                      else if (dValue == double.MinValue)                          buffer = _demicalMin;                      else {                          buffer = BitConverter.GetBytes(dValue);                          if (BitConverter.IsLittleEndian) {                              var temp = buffer[0];                              buffer[0] = buffer[7];                              buffer[7] = temp;                                temp = buffer[1];                              buffer[1] = buffer[6];                              buffer[6] = temp;                                temp = buffer[2];                              buffer[2] = buffer[5];                              buffer[5] = temp;                                temp = buffer[3];                              buffer[3] = buffer[4];                              buffer[4] = temp;                          }                      }                 }             } else if (type == typeof(short)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(long)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(decimal)) {                 buffer = DecimalToByteArray((decimal)value);             } else if (type == typeof(float)) {                 unsafe {                     var fValue = (float)value;                     buffer = Int32ToBytes(*((int*)&fValue));                 }             } else if (type == typeof(ushort)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(uint)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(int?)) {                 buffer = Int32ToBytes((value as int?) ?? 0);             } else if (type == typeof(ulong)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(Guid)) {                 buffer = ((Guid)value).ToByteArray();             } else if (type.IsEnum) {                  buffer = Int32ToBytes(((IConvertible)value).ToInt32(null));             } else if (type == typeof(TimeSpan)) {                 buffer = TimeSpanToBytes((TimeSpan)value);             } else if (type == typeof(TimeSpan?)) {                 buffer = TimeSpanToBytes((value as TimeSpan?) ?? TimeSpan.Zero);             } else if (type == VoidType) {                 buffer = new byte[0];             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {                 buffer = StringToByteArray((string)value);             } else if (type == typeof(int)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(byte)) {                 buffer = Int32ToBytes((byte)value);             } else if (type == typeof(DateTime)) {                 buffer = DateTimeToByteArray((DateTime)value);             } else if (type == typeof(bool)) {                 buffer = new byte[] { (bool)value ? (byte)1 : (byte)0 };             } else if (type == typeof(char)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(double)) {                 unsafe {                     var dValue = (double)value;                                           if (dValue == double.MaxValue)                          buffer = _demicalMax;                      else if (dValue == double.MinValue)                          buffer = _demicalMin;                      else {                          buffer = BitConverter.GetBytes(dValue);                          if (BitConverter.IsLittleEndian) {                              var temp = buffer[0];                              buffer[0] = buffer[7];                              buffer[7] = temp;                                temp = buffer[1];                              buffer[1] = buffer[6];                              buffer[6] = temp;                                temp = buffer[2];                              buffer[2] = buffer[5];                              buffer[5] = temp;                                temp = buffer[3];                              buffer[3] = buffer[4];                              buffer[4] = temp;                          }                      }                 }             } else if (type == typeof(short)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(long)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(decimal)) {                 buffer = DecimalToByteArray((decimal)value);             } else if (type == typeof(float)) {                 unsafe {                     var fValue = (float)value;                     buffer = Int32ToBytes(*((int*)&fValue));                 }             } else if (type == typeof(ushort)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(uint)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(int?)) {                 buffer = Int32ToBytes((value as int?) ?? 0);             } else if (type == typeof(ulong)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(Guid)) {                 buffer = ((Guid)value).ToByteArray();             } else if (type.IsEnum) {                  buffer = Int32ToBytes(((IConvertible)value).ToInt32(null));             } else if (type == typeof(TimeSpan)) {                 buffer = TimeSpanToBytes((TimeSpan)value);             } else if (type == typeof(TimeSpan?)) {                 buffer = TimeSpanToBytes((value as TimeSpan?) ?? TimeSpan.Zero);             } else if (type == VoidType) {                 buffer = new byte[0];             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {                 buffer = StringToByteArray((string)value);             } else if (type == typeof(int)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(byte)) {                 buffer = Int32ToBytes((byte)value);             } else if (type == typeof(DateTime)) {                 buffer = DateTimeToByteArray((DateTime)value);             } else if (type == typeof(bool)) {                 buffer = new byte[] { (bool)value ? (byte)1 : (byte)0 };             } else if (type == typeof(char)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(double)) {                 unsafe {                     var dValue = (double)value;                                           if (dValue == double.MaxValue)                          buffer = _demicalMax;                      else if (dValue == double.MinValue)                          buffer = _demicalMin;                      else {                          buffer = BitConverter.GetBytes(dValue);                          if (BitConverter.IsLittleEndian) {                              var temp = buffer[0];                              buffer[0] = buffer[7];                              buffer[7] = temp;                                temp = buffer[1];                              buffer[1] = buffer[6];                              buffer[6] = temp;                                temp = buffer[2];                              buffer[2] = buffer[5];                              buffer[5] = temp;                                temp = buffer[3];                              buffer[3] = buffer[4];                              buffer[4] = temp;                          }                      }                 }             } else if (type == typeof(short)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(long)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(decimal)) {                 buffer = DecimalToByteArray((decimal)value);             } else if (type == typeof(float)) {                 unsafe {                     var fValue = (float)value;                     buffer = Int32ToBytes(*((int*)&fValue));                 }             } else if (type == typeof(ushort)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(uint)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(int?)) {                 buffer = Int32ToBytes((value as int?) ?? 0);             } else if (type == typeof(ulong)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(Guid)) {                 buffer = ((Guid)value).ToByteArray();             } else if (type.IsEnum) {                  buffer = Int32ToBytes(((IConvertible)value).ToInt32(null));             } else if (type == typeof(TimeSpan)) {                 buffer = TimeSpanToBytes((TimeSpan)value);             } else if (type == typeof(TimeSpan?)) {                 buffer = TimeSpanToBytes((value as TimeSpan?) ?? TimeSpan.Zero);             } else if (type == VoidType) {                 buffer = new byte[0];             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {                 buffer = StringToByteArray((string)value);             } else if (type == typeof(int)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(byte)) {                 buffer = Int32ToBytes((byte)value);             } else if (type == typeof(DateTime)) {                 buffer = DateTimeToByteArray((DateTime)value);             } else if (type == typeof(bool)) {                 buffer = new byte[] { (bool)value ? (byte)1 : (byte)0 };             } else if (type == typeof(char)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(double)) {                 unsafe {                     var dValue = (double)value;                                           if (dValue == double.MaxValue)                          buffer = _demicalMax;                      else if (dValue == double.MinValue)                          buffer = _demicalMin;                      else {                          buffer = BitConverter.GetBytes(dValue);                          if (BitConverter.IsLittleEndian) {                              var temp = buffer[0];                              buffer[0] = buffer[7];                              buffer[7] = temp;                                temp = buffer[1];                              buffer[1] = buffer[6];                              buffer[6] = temp;                                temp = buffer[2];                              buffer[2] = buffer[5];                              buffer[5] = temp;                                temp = buffer[3];                              buffer[3] = buffer[4];                              buffer[4] = temp;                          }                      }                 }             } else if (type == typeof(short)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(long)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(decimal)) {                 buffer = DecimalToByteArray((decimal)value);             } else if (type == typeof(float)) {                 unsafe {                     var fValue = (float)value;                     buffer = Int32ToBytes(*((int*)&fValue));                 }             } else if (type == typeof(ushort)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(uint)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(int?)) {                 buffer = Int32ToBytes((value as int?) ?? 0);             } else if (type == typeof(ulong)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(Guid)) {                 buffer = ((Guid)value).ToByteArray();             } else if (type.IsEnum) {                  buffer = Int32ToBytes(((IConvertible)value).ToInt32(null));             } else if (type == typeof(TimeSpan)) {                 buffer = TimeSpanToBytes((TimeSpan)value);             } else if (type == typeof(TimeSpan?)) {                 buffer = TimeSpanToBytes((value as TimeSpan?) ?? TimeSpan.Zero);             } else if (type == VoidType) {                 buffer = new byte[0];             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {                 buffer = StringToByteArray((string)value);             } else if (type == typeof(int)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(byte)) {                 buffer = Int32ToBytes((byte)value);             } else if (type == typeof(DateTime)) {                 buffer = DateTimeToByteArray((DateTime)value);             } else if (type == typeof(bool)) {                 buffer = new byte[] { (bool)value ? (byte)1 : (byte)0 };             } else if (type == typeof(char)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(double)) {                 unsafe {                     var dValue = (double)value;                                           if (dValue == double.MaxValue)                          buffer = _demicalMax;                      else if (dValue == double.MinValue)                          buffer = _demicalMin;                      else {                          buffer = BitConverter.GetBytes(dValue);                          if (BitConverter.IsLittleEndian) {                              var temp = buffer[0];                              buffer[0] = buffer[7];                              buffer[7] = temp;                                temp = buffer[1];                              buffer[1] = buffer[6];                              buffer[6] = temp;                                temp = buffer[2];                              buffer[2] = buffer[5];                              buffer[5] = temp;                                temp = buffer[3];                              buffer[3] = buffer[4];                              buffer[4] = temp;                          }                      }                 }             } else if (type == typeof(short)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(long)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(decimal)) {                 buffer = DecimalToByteArray((decimal)value);             } else if (type == typeof(float)) {                 unsafe {                     var fValue = (float)value;                     buffer = Int32ToBytes(*((int*)&fValue));                 }             } else if (type == typeof(ushort)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(uint)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(int?)) {                 buffer = Int32ToBytes((value as int?) ?? 0);             } else if (type == typeof(ulong)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(Guid)) {                 buffer = ((Guid)value).ToByteArray();             } else if (type.IsEnum) {                  buffer = Int32ToBytes(((IConvertible)value).ToInt32(null));             } else if (type == typeof(TimeSpan)) {                 buffer = TimeSpanToBytes((TimeSpan)value);             } else if (type == typeof(TimeSpan?)) {                 buffer = TimeSpanToBytes((value as TimeSpan?) ?? TimeSpan.Zero);             } else if (type == VoidType) {                 buffer = new byte[0];             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {                 buffer = StringToByteArray((string)value);             } else if (type == typeof(int)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(byte)) {                 buffer = Int32ToBytes((byte)value);             } else if (type == typeof(DateTime)) {                 buffer = DateTimeToByteArray((DateTime)value);             } else if (type == typeof(bool)) {                 buffer = new byte[] { (bool)value ? (byte)1 : (byte)0 };             } else if (type == typeof(char)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(double)) {                 unsafe {                     var dValue = (double)value;                                           if (dValue == double.MaxValue)                          buffer = _demicalMax;                      else if (dValue == double.MinValue)                          buffer = _demicalMin;                      else {                          buffer = BitConverter.GetBytes(dValue);                          if (BitConverter.IsLittleEndian) {                              var temp = buffer[0];                              buffer[0] = buffer[7];                              buffer[7] = temp;                                temp = buffer[1];                              buffer[1] = buffer[6];                              buffer[6] = temp;                                temp = buffer[2];                              buffer[2] = buffer[5];                              buffer[5] = temp;                                temp = buffer[3];                              buffer[3] = buffer[4];                              buffer[4] = temp;                          }                      }                 }             } else if (type == typeof(short)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(long)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(decimal)) {                 buffer = DecimalToByteArray((decimal)value);             } else if (type == typeof(float)) {                 unsafe {                     var fValue = (float)value;                     buffer = Int32ToBytes(*((int*)&fValue));                 }             } else if (type == typeof(ushort)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(uint)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(int?)) {                 buffer = Int32ToBytes((value as int?) ?? 0);             } else if (type == typeof(ulong)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(Guid)) {                 buffer = ((Guid)value).ToByteArray();             } else if (type.IsEnum) {                  buffer = Int32ToBytes(((IConvertible)value).ToInt32(null));             } else if (type == typeof(TimeSpan)) {                 buffer = TimeSpanToBytes((TimeSpan)value);             } else if (type == typeof(TimeSpan?)) {                 buffer = TimeSpanToBytes((value as TimeSpan?) ?? TimeSpan.Zero);             } else if (type == VoidType) {                 buffer = new byte[0];             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {                 buffer = StringToByteArray((string)value);             } else if (type == typeof(int)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(byte)) {                 buffer = Int32ToBytes((byte)value);             } else if (type == typeof(DateTime)) {                 buffer = DateTimeToByteArray((DateTime)value);             } else if (type == typeof(bool)) {                 buffer = new byte[] { (bool)value ? (byte)1 : (byte)0 };             } else if (type == typeof(char)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(double)) {                 unsafe {                     var dValue = (double)value;                                           if (dValue == double.MaxValue)                          buffer = _demicalMax;                      else if (dValue == double.MinValue)                          buffer = _demicalMin;                      else {                          buffer = BitConverter.GetBytes(dValue);                          if (BitConverter.IsLittleEndian) {                              var temp = buffer[0];                              buffer[0] = buffer[7];                              buffer[7] = temp;                                temp = buffer[1];                              buffer[1] = buffer[6];                              buffer[6] = temp;                                temp = buffer[2];                              buffer[2] = buffer[5];                              buffer[5] = temp;                                temp = buffer[3];                              buffer[3] = buffer[4];                              buffer[4] = temp;                          }                      }                 }             } else if (type == typeof(short)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(long)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(decimal)) {                 buffer = DecimalToByteArray((decimal)value);             } else if (type == typeof(float)) {                 unsafe {                     var fValue = (float)value;                     buffer = Int32ToBytes(*((int*)&fValue));                 }             } else if (type == typeof(ushort)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(uint)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(int?)) {                 buffer = Int32ToBytes((value as int?) ?? 0);             } else if (type == typeof(ulong)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(Guid)) {                 buffer = ((Guid)value).ToByteArray();             } else if (type.IsEnum) {                  buffer = Int32ToBytes(((IConvertible)value).ToInt32(null));             } else if (type == typeof(TimeSpan)) {                 buffer = TimeSpanToBytes((TimeSpan)value);             } else if (type == typeof(TimeSpan?)) {                 buffer = TimeSpanToBytes((value as TimeSpan?) ?? TimeSpan.Zero);             } else if (type == VoidType) {                 buffer = new byte[0];             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {                 buffer = StringToByteArray((string)value);             } else if (type == typeof(int)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(byte)) {                 buffer = Int32ToBytes((byte)value);             } else if (type == typeof(DateTime)) {                 buffer = DateTimeToByteArray((DateTime)value);             } else if (type == typeof(bool)) {                 buffer = new byte[] { (bool)value ? (byte)1 : (byte)0 };             } else if (type == typeof(char)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(double)) {                 unsafe {                     var dValue = (double)value;                                           if (dValue == double.MaxValue)                          buffer = _demicalMax;                      else if (dValue == double.MinValue)                          buffer = _demicalMin;                      else {                          buffer = BitConverter.GetBytes(dValue);                          if (BitConverter.IsLittleEndian) {                              var temp = buffer[0];                              buffer[0] = buffer[7];                              buffer[7] = temp;                                temp = buffer[1];                              buffer[1] = buffer[6];                              buffer[6] = temp;                                temp = buffer[2];                              buffer[2] = buffer[5];                              buffer[5] = temp;                                temp = buffer[3];                              buffer[3] = buffer[4];                              buffer[4] = temp;                          }                      }                 }             } else if (type == typeof(short)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(long)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(decimal)) {                 buffer = DecimalToByteArray((decimal)value);             } else if (type == typeof(float)) {                 unsafe {                     var fValue = (float)value;                     buffer = Int32ToBytes(*((int*)&fValue));                 }             } else if (type == typeof(ushort)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(uint)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(int?)) {                 buffer = Int32ToBytes((value as int?) ?? 0);             } else if (type == typeof(ulong)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(Guid)) {                 buffer = ((Guid)value).ToByteArray();             } else if (type.IsEnum) {                  buffer = Int32ToBytes(((IConvertible)value).ToInt32(null));             } else if (type == typeof(TimeSpan)) {                 buffer = TimeSpanToBytes((TimeSpan)value);             } else if (type == typeof(TimeSpan?)) {                 buffer = TimeSpanToBytes((value as TimeSpan?) ?? TimeSpan.Zero);             } else if (type == VoidType) {                 buffer = new byte[0];             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {                 buffer = StringToByteArray((string)value);             } else if (type == typeof(int)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(byte)) {                 buffer = Int32ToBytes((byte)value);             } else if (type == typeof(DateTime)) {                 buffer = DateTimeToByteArray((DateTime)value);             } else if (type == typeof(bool)) {                 buffer = new byte[] { (bool)value ? (byte)1 : (byte)0 };             } else if (type == typeof(char)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(double)) {                 unsafe {                     var dValue = (double)value;                                           if (dValue == double.MaxValue)                          buffer = _demicalMax;                      else if (dValue == double.MinValue)                          buffer = _demicalMin;                      else {                          buffer = BitConverter.GetBytes(dValue);                          if (BitConverter.IsLittleEndian) {                              var temp = buffer[0];                              buffer[0] = buffer[7];                              buffer[7] = temp;                                temp = buffer[1];                              buffer[1] = buffer[6];                              buffer[6] = temp;                                temp = buffer[2];                              buffer[2] = buffer[5];                              buffer[5] = temp;                                temp = buffer[3];                              buffer[3] = buffer[4];                              buffer[4] = temp;                          }                      }                 }             } else if (type == typeof(short)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(long)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(decimal)) {                 buffer = DecimalToByteArray((decimal)value);             } else if (type == typeof(float)) {                 unsafe {                     var fValue = (float)value;                     buffer = Int32ToBytes(*((int*)&fValue));                 }             } else if (type == typeof(ushort)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(uint)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(int?)) {                 buffer = Int32ToBytes((value as int?) ?? 0);             } else if (type == typeof(ulong)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(Guid)) {                 buffer = ((Guid)value).ToByteArray();             } else if (type.IsEnum) {                  buffer = Int32ToBytes(((IConvertible)value).ToInt32(null));             } else if (type == typeof(TimeSpan)) {                 buffer = TimeSpanToBytes((TimeSpan)value);             } else if (type == typeof(TimeSpan?)) {                 buffer = TimeSpanToBytes((value as TimeSpan?) ?? TimeSpan.Zero);             } else if (type == VoidType) {                 buffer = new byte[0];             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {                 buffer = StringToByteArray((string)value);             } else if (type == typeof(int)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(byte)) {                 buffer = Int32ToBytes((byte)value);             } else if (type == typeof(DateTime)) {                 buffer = DateTimeToByteArray((DateTime)value);             } else if (type == typeof(bool)) {                 buffer = new byte[] { (bool)value ? (byte)1 : (byte)0 };             } else if (type == typeof(char)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(double)) {                 unsafe {                     var dValue = (double)value;                                           if (dValue == double.MaxValue)                          buffer = _demicalMax;                      else if (dValue == double.MinValue)                          buffer = _demicalMin;                      else {                          buffer = BitConverter.GetBytes(dValue);                          if (BitConverter.IsLittleEndian) {                              var temp = buffer[0];                              buffer[0] = buffer[7];                              buffer[7] = temp;                                temp = buffer[1];                              buffer[1] = buffer[6];                              buffer[6] = temp;                                temp = buffer[2];                              buffer[2] = buffer[5];                              buffer[5] = temp;                                temp = buffer[3];                              buffer[3] = buffer[4];                              buffer[4] = temp;                          }                      }                 }             } else if (type == typeof(short)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(long)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(decimal)) {                 buffer = DecimalToByteArray((decimal)value);             } else if (type == typeof(float)) {                 unsafe {                     var fValue = (float)value;                     buffer = Int32ToBytes(*((int*)&fValue));                 }             } else if (type == typeof(ushort)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(uint)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(int?)) {                 buffer = Int32ToBytes((value as int?) ?? 0);             } else if (type == typeof(ulong)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(Guid)) {                 buffer = ((Guid)value).ToByteArray();             } else if (type.IsEnum) {                  buffer = Int32ToBytes(((IConvertible)value).ToInt32(null));             } else if (type == typeof(TimeSpan)) {                 buffer = TimeSpanToBytes((TimeSpan)value);             } else if (type == typeof(TimeSpan?)) {                 buffer = TimeSpanToBytes((value as TimeSpan?) ?? TimeSpan.Zero);             } else if (type == VoidType) {                 buffer = new byte[0];             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {                 buffer = StringToByteArray((string)value);             } else if (type == typeof(int)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(byte)) {                 buffer = Int32ToBytes((byte)value);             } else if (type == typeof(DateTime)) {                 buffer = DateTimeToByteArray((DateTime)value);             } else if (type == typeof(bool)) {                 buffer = new byte[] { (bool)value ? (byte)1 : (byte)0 };             } else if (type == typeof(char)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(double)) {                 unsafe {                     var dValue = (double)value;                                           if (dValue == double.MaxValue)                          buffer = _demicalMax;                      else if (dValue == double.MinValue)                          buffer = _demicalMin;                      else {                          buffer = BitConverter.GetBytes(dValue);                          if (BitConverter.IsLittleEndian) {                              var temp = buffer[0];                              buffer[0] = buffer[7];                              buffer[7] = temp;                                temp = buffer[1];                              buffer[1] = buffer[6];                              buffer[6] = temp;                                temp = buffer[2];                              buffer[2] = buffer[5];                              buffer[5] = temp;                                temp = buffer[3];                              buffer[3] = buffer[4];                              buffer[4] = temp;                          }                      }                 }             } else if (type == typeof(short)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(long)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(decimal)) {                 buffer = DecimalToByteArray((decimal)value);             } else if (type == typeof(float)) {                 unsafe {                     var fValue = (float)value;                     buffer = Int32ToBytes(*((int*)&fValue));                 }             } else if (type == typeof(ushort)) {                 buffer = Int16ToBytes((short)value);             } else if (type == typeof(uint)) {                 buffer = Int32ToBytes((int)value);             } else if (type == typeof(int?)) {                 buffer = Int32ToBytes((value as int?) ?? 0);             } else if (type == typeof(ulong)) {                 buffer = Int64ToBytes((long)value);             } else if (type == typeof(Guid)) {                 buffer = ((Guid)value).ToByteArray();             } else if (type.IsEnum) {                  buffer = Int32ToBytes(((IConvertible)value).ToInt32(null));             } else if (type == typeof(TimeSpan)) {                 buffer = TimeSpanToBytes((TimeSpan)value);             } else if (type == typeof(TimeSpan?)) {                 buffer = TimeSpanToBytes((value as TimeSpan?) ?? TimeSpan.Zero);             } else if (type == VoidType) {                 buffer = new byte[0];             }
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping[ObjectType] =                 new Dictionary<byte' Type>()                 {                     {1' StringType}' {2' typeof(int)}'                     {3' typeof(DateTime)}' {4' typeof(bool)}' {5' typeof(char)}'                     {6' typeof(double)}' {7' typeof(short)}' {8' typeof(long)}'                     {9' typeof(decimal)}' {10' typeof(float)}' {11' typeof(ushort)}'                     {12' typeof(uint)}' {13' typeof(ulong)}' {14' GuidType}' {15' typeof(Enum)}'                     {16' typeof(TimeSpan)}' {17' typeof(TimeSpan?)}' {18' typeof(int?)}' {19' VoidType}'                     {20' typeof(byte)}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping[ObjectType] =                 new Dictionary<byte' Type>()                 {                     {1' StringType}' {2' typeof(int)}'                     {3' typeof(DateTime)}' {4' typeof(bool)}' {5' typeof(char)}'                     {6' typeof(double)}' {7' typeof(short)}' {8' typeof(long)}'                     {9' typeof(decimal)}' {10' typeof(float)}' {11' typeof(ushort)}'                     {12' typeof(uint)}' {13' typeof(ulong)}' {14' GuidType}' {15' typeof(Enum)}'                     {16' typeof(TimeSpan)}' {17' typeof(TimeSpan?)}' {18' typeof(int?)}' {19' VoidType}'                     {20' typeof(byte)}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping[ObjectType] =                 new Dictionary<byte' Type>()                 {                     {1' StringType}' {2' typeof(int)}'                     {3' typeof(DateTime)}' {4' typeof(bool)}' {5' typeof(char)}'                     {6' typeof(double)}' {7' typeof(short)}' {8' typeof(long)}'                     {9' typeof(decimal)}' {10' typeof(float)}' {11' typeof(ushort)}'                     {12' typeof(uint)}' {13' typeof(ulong)}' {14' GuidType}' {15' typeof(Enum)}'                     {16' typeof(TimeSpan)}' {17' typeof(TimeSpan?)}' {18' typeof(int?)}' {19' VoidType}'                     {20' typeof(byte)}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping[ObjectType] =                 new Dictionary<byte' Type>()                 {                     {1' StringType}' {2' typeof(int)}'                     {3' typeof(DateTime)}' {4' typeof(bool)}' {5' typeof(char)}'                     {6' typeof(double)}' {7' typeof(short)}' {8' typeof(long)}'                     {9' typeof(decimal)}' {10' typeof(float)}' {11' typeof(ushort)}'                     {12' typeof(uint)}' {13' typeof(ulong)}' {14' GuidType}' {15' typeof(Enum)}'                     {16' typeof(TimeSpan)}' {17' typeof(TimeSpan?)}' {18' typeof(int?)}' {19' VoidType}'                     {20' typeof(byte)}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping[ObjectType] =                 new Dictionary<byte' Type>()                 {                     {1' StringType}' {2' typeof(int)}'                     {3' typeof(DateTime)}' {4' typeof(bool)}' {5' typeof(char)}'                     {6' typeof(double)}' {7' typeof(short)}' {8' typeof(long)}'                     {9' typeof(decimal)}' {10' typeof(float)}' {11' typeof(ushort)}'                     {12' typeof(uint)}' {13' typeof(ulong)}' {14' GuidType}' {15' typeof(Enum)}'                     {16' typeof(TimeSpan)}' {17' typeof(TimeSpan?)}' {18' typeof(int?)}' {19' VoidType}'                     {20' typeof(byte)}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping[ObjectType] =                 new Dictionary<byte' Type>()                 {                     {1' StringType}' {2' typeof(int)}'                     {3' typeof(DateTime)}' {4' typeof(bool)}' {5' typeof(char)}'                     {6' typeof(double)}' {7' typeof(short)}' {8' typeof(long)}'                     {9' typeof(decimal)}' {10' typeof(float)}' {11' typeof(ushort)}'                     {12' typeof(uint)}' {13' typeof(ulong)}' {14' GuidType}' {15' typeof(Enum)}'                     {16' typeof(TimeSpan)}' {17' typeof(TimeSpan?)}' {18' typeof(int?)}' {19' VoidType}'                     {20' typeof(byte)}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping[ObjectType] =                 new Dictionary<byte' Type>()                 {                     {1' StringType}' {2' typeof(int)}'                     {3' typeof(DateTime)}' {4' typeof(bool)}' {5' typeof(char)}'                     {6' typeof(double)}' {7' typeof(short)}' {8' typeof(long)}'                     {9' typeof(decimal)}' {10' typeof(float)}' {11' typeof(ushort)}'                     {12' typeof(uint)}' {13' typeof(ulong)}' {14' GuidType}' {15' typeof(Enum)}'                     {16' typeof(TimeSpan)}' {17' typeof(TimeSpan?)}' {18' typeof(int?)}' {19' VoidType}'                     {20' typeof(byte)}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping[ObjectType] =                 new Dictionary<byte' Type>()                 {                     {1' StringType}' {2' typeof(int)}'                     {3' typeof(DateTime)}' {4' typeof(bool)}' {5' typeof(char)}'                     {6' typeof(double)}' {7' typeof(short)}' {8' typeof(long)}'                     {9' typeof(decimal)}' {10' typeof(float)}' {11' typeof(ushort)}'                     {12' typeof(uint)}' {13' typeof(ulong)}' {14' GuidType}' {15' typeof(Enum)}'                     {16' typeof(TimeSpan)}' {17' typeof(TimeSpan?)}' {18' typeof(int?)}' {19' VoidType}'                     {20' typeof(byte)}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping[ObjectType] =                 new Dictionary<byte' Type>()                 {                     {1' StringType}' {2' typeof(int)}'                     {3' typeof(DateTime)}' {4' typeof(bool)}' {5' typeof(char)}'                     {6' typeof(double)}' {7' typeof(short)}' {8' typeof(long)}'                     {9' typeof(decimal)}' {10' typeof(float)}' {11' typeof(ushort)}'                     {12' typeof(uint)}' {13' typeof(ulong)}' {14' GuidType}' {15' typeof(Enum)}'                     {16' typeof(TimeSpan)}' {17' typeof(TimeSpan?)}' {18' typeof(int?)}' {19' VoidType}'                     {20' typeof(byte)}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping[ObjectType] =                 new Dictionary<byte' Type>()                 {                     {1' StringType}' {2' typeof(int)}'                     {3' typeof(DateTime)}' {4' typeof(bool)}' {5' typeof(char)}'                     {6' typeof(double)}' {7' typeof(short)}' {8' typeof(long)}'                     {9' typeof(decimal)}' {10' typeof(float)}' {11' typeof(ushort)}'                     {12' typeof(uint)}' {13' typeof(ulong)}' {14' GuidType}' {15' typeof(Enum)}'                     {16' typeof(TimeSpan)}' {17' typeof(TimeSpan?)}' {18' typeof(int?)}' {19' VoidType}'                     {20' typeof(byte)}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping[ObjectType] =                 new Dictionary<byte' Type>()                 {                     {1' StringType}' {2' typeof(int)}'                     {3' typeof(DateTime)}' {4' typeof(bool)}' {5' typeof(char)}'                     {6' typeof(double)}' {7' typeof(short)}' {8' typeof(long)}'                     {9' typeof(decimal)}' {10' typeof(float)}' {11' typeof(ushort)}'                     {12' typeof(uint)}' {13' typeof(ulong)}' {14' GuidType}' {15' typeof(Enum)}'                     {16' typeof(TimeSpan)}' {17' typeof(TimeSpan?)}' {18' typeof(int?)}' {19' VoidType}'                     {20' typeof(byte)}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping[ObjectType] =                 new Dictionary<byte' Type>()                 {                     {1' StringType}' {2' typeof(int)}'                     {3' typeof(DateTime)}' {4' typeof(bool)}' {5' typeof(char)}'                     {6' typeof(double)}' {7' typeof(short)}' {8' typeof(long)}'                     {9' typeof(decimal)}' {10' typeof(float)}' {11' typeof(ushort)}'                     {12' typeof(uint)}' {13' typeof(ulong)}' {14' GuidType}' {15' typeof(Enum)}'                     {16' typeof(TimeSpan)}' {17' typeof(TimeSpan?)}' {18' typeof(int?)}' {19' VoidType}'                     {20' typeof(byte)}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping[ObjectType] =                 new Dictionary<byte' Type>()                 {                     {1' StringType}' {2' typeof(int)}'                     {3' typeof(DateTime)}' {4' typeof(bool)}' {5' typeof(char)}'                     {6' typeof(double)}' {7' typeof(short)}' {8' typeof(long)}'                     {9' typeof(decimal)}' {10' typeof(float)}' {11' typeof(ushort)}'                     {12' typeof(uint)}' {13' typeof(ulong)}' {14' GuidType}' {15' typeof(Enum)}'                     {16' typeof(TimeSpan)}' {17' typeof(TimeSpan?)}' {18' typeof(int?)}' {19' VoidType}'                     {20' typeof(byte)}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping[ObjectType] =                 new Dictionary<byte' Type>()                 {                     {1' StringType}' {2' typeof(int)}'                     {3' typeof(DateTime)}' {4' typeof(bool)}' {5' typeof(char)}'                     {6' typeof(double)}' {7' typeof(short)}' {8' typeof(long)}'                     {9' typeof(decimal)}' {10' typeof(float)}' {11' typeof(ushort)}'                     {12' typeof(uint)}' {13' typeof(ulong)}' {14' GuidType}' {15' typeof(Enum)}'                     {16' typeof(TimeSpan)}' {17' typeof(TimeSpan?)}' {18' typeof(int?)}' {19' VoidType}'                     {20' typeof(byte)}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping[ObjectType] =                 new Dictionary<byte' Type>()                 {                     {1' StringType}' {2' typeof(int)}'                     {3' typeof(DateTime)}' {4' typeof(bool)}' {5' typeof(char)}'                     {6' typeof(double)}' {7' typeof(short)}' {8' typeof(long)}'                     {9' typeof(decimal)}' {10' typeof(float)}' {11' typeof(ushort)}'                     {12' typeof(uint)}' {13' typeof(ulong)}' {14' GuidType}' {15' typeof(Enum)}'                     {16' typeof(TimeSpan)}' {17' typeof(TimeSpan?)}' {18' typeof(int?)}' {19' VoidType}'                     {20' typeof(byte)}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping[ObjectType] =                 new Dictionary<byte' Type>()                 {                     {1' StringType}' {2' typeof(int)}'                     {3' typeof(DateTime)}' {4' typeof(bool)}' {5' typeof(char)}'                     {6' typeof(double)}' {7' typeof(short)}' {8' typeof(long)}'                     {9' typeof(decimal)}' {10' typeof(float)}' {11' typeof(ushort)}'                     {12' typeof(uint)}' {13' typeof(ulong)}' {14' GuidType}' {15' typeof(Enum)}'                     {16' typeof(TimeSpan)}' {17' typeof(TimeSpan?)}' {18' typeof(int?)}' {19' VoidType}'                     {20' typeof(byte)}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping[ObjectType] =                 new Dictionary<byte' Type>()                 {                     {1' StringType}' {2' typeof(int)}'                     {3' typeof(DateTime)}' {4' typeof(bool)}' {5' typeof(char)}'                     {6' typeof(double)}' {7' typeof(short)}' {8' typeof(long)}'                     {9' typeof(decimal)}' {10' typeof(float)}' {11' typeof(ushort)}'                     {12' typeof(uint)}' {13' typeof(ulong)}' {14' GuidType}' {15' typeof(Enum)}'                     {16' typeof(TimeSpan)}' {17' typeof(TimeSpan?)}' {18' typeof(int?)}' {19' VoidType}'                     {20' typeof(byte)}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping[ObjectType] =                 new Dictionary<byte' Type>()                 {                     {1' StringType}' {2' typeof(int)}'                     {3' typeof(DateTime)}' {4' typeof(bool)}' {5' typeof(char)}'                     {6' typeof(double)}' {7' typeof(short)}' {8' typeof(long)}'                     {9' typeof(decimal)}' {10' typeof(float)}' {11' typeof(ushort)}'                     {12' typeof(uint)}' {13' typeof(ulong)}' {14' GuidType}' {15' typeof(Enum)}'                     {16' typeof(TimeSpan)}' {17' typeof(TimeSpan?)}' {18' typeof(int?)}' {19' VoidType}'                     {20' typeof(byte)}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping[ObjectType] =                 new Dictionary<byte' Type>()                 {                     {1' StringType}' {2' typeof(int)}'                     {3' typeof(DateTime)}' {4' typeof(bool)}' {5' typeof(char)}'                     {6' typeof(double)}' {7' typeof(short)}' {8' typeof(long)}'                     {9' typeof(decimal)}' {10' typeof(float)}' {11' typeof(ushort)}'                     {12' typeof(uint)}' {13' typeof(ulong)}' {14' GuidType}' {15' typeof(Enum)}'                     {16' typeof(TimeSpan)}' {17' typeof(TimeSpan?)}' {18' typeof(int?)}' {19' VoidType}'                     {20' typeof(byte)}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping[ObjectType] =                 new Dictionary<Type' byte>()                 {                     {StringType' 1}' {typeof(int)' 2}' {typeof(DateTime)' 3}'                     {typeof(bool)' 4}' {typeof(char)' 5}' {typeof(double)' 6}'                     {typeof(short)' 7}' {typeof(long)' 8}' {typeof(decimal)' 9}'                     {typeof(float)' 10}' {typeof(ushort)' 11}' {typeof(uint)' 12}'                     {typeof(ulong)' 13}' {GuidType' 14}' {typeof(Enum)' 15}' {typeof(TimeSpan)' 16}'                     {typeof(TimeSpan?)' 17}' {typeof(int?)' 18}' {VoidType' 19}' {typeof(byte)' 20}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping[ObjectType] =                 new Dictionary<Type' byte>()                 {                     {StringType' 1}' {typeof(int)' 2}' {typeof(DateTime)' 3}'                     {typeof(bool)' 4}' {typeof(char)' 5}' {typeof(double)' 6}'                     {typeof(short)' 7}' {typeof(long)' 8}' {typeof(decimal)' 9}'                     {typeof(float)' 10}' {typeof(ushort)' 11}' {typeof(uint)' 12}'                     {typeof(ulong)' 13}' {GuidType' 14}' {typeof(Enum)' 15}' {typeof(TimeSpan)' 16}'                     {typeof(TimeSpan?)' 17}' {typeof(int?)' 18}' {VoidType' 19}' {typeof(byte)' 20}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping[ObjectType] =                 new Dictionary<Type' byte>()                 {                     {StringType' 1}' {typeof(int)' 2}' {typeof(DateTime)' 3}'                     {typeof(bool)' 4}' {typeof(char)' 5}' {typeof(double)' 6}'                     {typeof(short)' 7}' {typeof(long)' 8}' {typeof(decimal)' 9}'                     {typeof(float)' 10}' {typeof(ushort)' 11}' {typeof(uint)' 12}'                     {typeof(ulong)' 13}' {GuidType' 14}' {typeof(Enum)' 15}' {typeof(TimeSpan)' 16}'                     {typeof(TimeSpan?)' 17}' {typeof(int?)' 18}' {VoidType' 19}' {typeof(byte)' 20}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping[ObjectType] =                 new Dictionary<Type' byte>()                 {                     {StringType' 1}' {typeof(int)' 2}' {typeof(DateTime)' 3}'                     {typeof(bool)' 4}' {typeof(char)' 5}' {typeof(double)' 6}'                     {typeof(short)' 7}' {typeof(long)' 8}' {typeof(decimal)' 9}'                     {typeof(float)' 10}' {typeof(ushort)' 11}' {typeof(uint)' 12}'                     {typeof(ulong)' 13}' {GuidType' 14}' {typeof(Enum)' 15}' {typeof(TimeSpan)' 16}'                     {typeof(TimeSpan?)' 17}' {typeof(int?)' 18}' {VoidType' 19}' {typeof(byte)' 20}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping[ObjectType] =                 new Dictionary<Type' byte>()                 {                     {StringType' 1}' {typeof(int)' 2}' {typeof(DateTime)' 3}'                     {typeof(bool)' 4}' {typeof(char)' 5}' {typeof(double)' 6}'                     {typeof(short)' 7}' {typeof(long)' 8}' {typeof(decimal)' 9}'                     {typeof(float)' 10}' {typeof(ushort)' 11}' {typeof(uint)' 12}'                     {typeof(ulong)' 13}' {GuidType' 14}' {typeof(Enum)' 15}' {typeof(TimeSpan)' 16}'                     {typeof(TimeSpan?)' 17}' {typeof(int?)' 18}' {VoidType' 19}' {typeof(byte)' 20}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping[ObjectType] =                 new Dictionary<Type' byte>()                 {                     {StringType' 1}' {typeof(int)' 2}' {typeof(DateTime)' 3}'                     {typeof(bool)' 4}' {typeof(char)' 5}' {typeof(double)' 6}'                     {typeof(short)' 7}' {typeof(long)' 8}' {typeof(decimal)' 9}'                     {typeof(float)' 10}' {typeof(ushort)' 11}' {typeof(uint)' 12}'                     {typeof(ulong)' 13}' {GuidType' 14}' {typeof(Enum)' 15}' {typeof(TimeSpan)' 16}'                     {typeof(TimeSpan?)' 17}' {typeof(int?)' 18}' {VoidType' 19}' {typeof(byte)' 20}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping[ObjectType] =                 new Dictionary<Type' byte>()                 {                     {StringType' 1}' {typeof(int)' 2}' {typeof(DateTime)' 3}'                     {typeof(bool)' 4}' {typeof(char)' 5}' {typeof(double)' 6}'                     {typeof(short)' 7}' {typeof(long)' 8}' {typeof(decimal)' 9}'                     {typeof(float)' 10}' {typeof(ushort)' 11}' {typeof(uint)' 12}'                     {typeof(ulong)' 13}' {GuidType' 14}' {typeof(Enum)' 15}' {typeof(TimeSpan)' 16}'                     {typeof(TimeSpan?)' 17}' {typeof(int?)' 18}' {VoidType' 19}' {typeof(byte)' 20}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping[ObjectType] =                 new Dictionary<Type' byte>()                 {                     {StringType' 1}' {typeof(int)' 2}' {typeof(DateTime)' 3}'                     {typeof(bool)' 4}' {typeof(char)' 5}' {typeof(double)' 6}'                     {typeof(short)' 7}' {typeof(long)' 8}' {typeof(decimal)' 9}'                     {typeof(float)' 10}' {typeof(ushort)' 11}' {typeof(uint)' 12}'                     {typeof(ulong)' 13}' {GuidType' 14}' {typeof(Enum)' 15}' {typeof(TimeSpan)' 16}'                     {typeof(TimeSpan?)' 17}' {typeof(int?)' 18}' {VoidType' 19}' {typeof(byte)' 20}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping[ObjectType] =                 new Dictionary<Type' byte>()                 {                     {StringType' 1}' {typeof(int)' 2}' {typeof(DateTime)' 3}'                     {typeof(bool)' 4}' {typeof(char)' 5}' {typeof(double)' 6}'                     {typeof(short)' 7}' {typeof(long)' 8}' {typeof(decimal)' 9}'                     {typeof(float)' 10}' {typeof(ushort)' 11}' {typeof(uint)' 12}'                     {typeof(ulong)' 13}' {GuidType' 14}' {typeof(Enum)' 15}' {typeof(TimeSpan)' 16}'                     {typeof(TimeSpan?)' 17}' {typeof(int?)' 18}' {VoidType' 19}' {typeof(byte)' 20}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping[ObjectType] =                 new Dictionary<Type' byte>()                 {                     {StringType' 1}' {typeof(int)' 2}' {typeof(DateTime)' 3}'                     {typeof(bool)' 4}' {typeof(char)' 5}' {typeof(double)' 6}'                     {typeof(short)' 7}' {typeof(long)' 8}' {typeof(decimal)' 9}'                     {typeof(float)' 10}' {typeof(ushort)' 11}' {typeof(uint)' 12}'                     {typeof(ulong)' 13}' {GuidType' 14}' {typeof(Enum)' 15}' {typeof(TimeSpan)' 16}'                     {typeof(TimeSpan?)' 17}' {typeof(int?)' 18}' {VoidType' 19}' {typeof(byte)' 20}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping[ObjectType] =                 new Dictionary<Type' byte>()                 {                     {StringType' 1}' {typeof(int)' 2}' {typeof(DateTime)' 3}'                     {typeof(bool)' 4}' {typeof(char)' 5}' {typeof(double)' 6}'                     {typeof(short)' 7}' {typeof(long)' 8}' {typeof(decimal)' 9}'                     {typeof(float)' 10}' {typeof(ushort)' 11}' {typeof(uint)' 12}'                     {typeof(ulong)' 13}' {GuidType' 14}' {typeof(Enum)' 15}' {typeof(TimeSpan)' 16}'                     {typeof(TimeSpan?)' 17}' {typeof(int?)' 18}' {VoidType' 19}' {typeof(byte)' 20}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping[ObjectType] =                 new Dictionary<Type' byte>()                 {                     {StringType' 1}' {typeof(int)' 2}' {typeof(DateTime)' 3}'                     {typeof(bool)' 4}' {typeof(char)' 5}' {typeof(double)' 6}'                     {typeof(short)' 7}' {typeof(long)' 8}' {typeof(decimal)' 9}'                     {typeof(float)' 10}' {typeof(ushort)' 11}' {typeof(uint)' 12}'                     {typeof(ulong)' 13}' {GuidType' 14}' {typeof(Enum)' 15}' {typeof(TimeSpan)' 16}'                     {typeof(TimeSpan?)' 17}' {typeof(int?)' 18}' {VoidType' 19}' {typeof(byte)' 20}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping[ObjectType] =                 new Dictionary<Type' byte>()                 {                     {StringType' 1}' {typeof(int)' 2}' {typeof(DateTime)' 3}'                     {typeof(bool)' 4}' {typeof(char)' 5}' {typeof(double)' 6}'                     {typeof(short)' 7}' {typeof(long)' 8}' {typeof(decimal)' 9}'                     {typeof(float)' 10}' {typeof(ushort)' 11}' {typeof(uint)' 12}'                     {typeof(ulong)' 13}' {GuidType' 14}' {typeof(Enum)' 15}' {typeof(TimeSpan)' 16}'                     {typeof(TimeSpan?)' 17}' {typeof(int?)' 18}' {VoidType' 19}' {typeof(byte)' 20}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping[ObjectType] =                 new Dictionary<Type' byte>()                 {                     {StringType' 1}' {typeof(int)' 2}' {typeof(DateTime)' 3}'                     {typeof(bool)' 4}' {typeof(char)' 5}' {typeof(double)' 6}'                     {typeof(short)' 7}' {typeof(long)' 8}' {typeof(decimal)' 9}'                     {typeof(float)' 10}' {typeof(ushort)' 11}' {typeof(uint)' 12}'                     {typeof(ulong)' 13}' {GuidType' 14}' {typeof(Enum)' 15}' {typeof(TimeSpan)' 16}'                     {typeof(TimeSpan?)' 17}' {typeof(int?)' 18}' {VoidType' 19}' {typeof(byte)' 20}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping[ObjectType] =                 new Dictionary<Type' byte>()                 {                     {StringType' 1}' {typeof(int)' 2}' {typeof(DateTime)' 3}'                     {typeof(bool)' 4}' {typeof(char)' 5}' {typeof(double)' 6}'                     {typeof(short)' 7}' {typeof(long)' 8}' {typeof(decimal)' 9}'                     {typeof(float)' 10}' {typeof(ushort)' 11}' {typeof(uint)' 12}'                     {typeof(ulong)' 13}' {GuidType' 14}' {typeof(Enum)' 15}' {typeof(TimeSpan)' 16}'                     {typeof(TimeSpan?)' 17}' {typeof(int?)' 18}' {VoidType' 19}' {typeof(byte)' 20}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping[ObjectType] =                 new Dictionary<Type' byte>()                 {                     {StringType' 1}' {typeof(int)' 2}' {typeof(DateTime)' 3}'                     {typeof(bool)' 4}' {typeof(char)' 5}' {typeof(double)' 6}'                     {typeof(short)' 7}' {typeof(long)' 8}' {typeof(decimal)' 9}'                     {typeof(float)' 10}' {typeof(ushort)' 11}' {typeof(uint)' 12}'                     {typeof(ulong)' 13}' {GuidType' 14}' {typeof(Enum)' 15}' {typeof(TimeSpan)' 16}'                     {typeof(TimeSpan?)' 17}' {typeof(int?)' 18}' {VoidType' 19}' {typeof(byte)' 20}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping[ObjectType] =                 new Dictionary<Type' byte>()                 {                     {StringType' 1}' {typeof(int)' 2}' {typeof(DateTime)' 3}'                     {typeof(bool)' 4}' {typeof(char)' 5}' {typeof(double)' 6}'                     {typeof(short)' 7}' {typeof(long)' 8}' {typeof(decimal)' 9}'                     {typeof(float)' 10}' {typeof(ushort)' 11}' {typeof(uint)' 12}'                     {typeof(ulong)' 13}' {GuidType' 14}' {typeof(Enum)' 15}' {typeof(TimeSpan)' 16}'                     {typeof(TimeSpan?)' 17}' {typeof(int?)' 18}' {VoidType' 19}' {typeof(byte)' 20}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping[ObjectType] =                 new Dictionary<Type' byte>()                 {                     {StringType' 1}' {typeof(int)' 2}' {typeof(DateTime)' 3}'                     {typeof(bool)' 4}' {typeof(char)' 5}' {typeof(double)' 6}'                     {typeof(short)' 7}' {typeof(long)' 8}' {typeof(decimal)' 9}'                     {typeof(float)' 10}' {typeof(ushort)' 11}' {typeof(uint)' 12}'                     {typeof(ulong)' 13}' {GuidType' 14}' {typeof(Enum)' 15}' {typeof(TimeSpan)' 16}'                     {typeof(TimeSpan?)' 17}' {typeof(int?)' 18}' {VoidType' 19}' {typeof(byte)' 20}                 };
Magic Number,MessageShark,CustomBinary,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping[ObjectType] =                 new Dictionary<Type' byte>()                 {                     {StringType' 1}' {typeof(int)' 2}' {typeof(DateTime)' 3}'                     {typeof(bool)' 4}' {typeof(char)' 5}' {typeof(double)' 6}'                     {typeof(short)' 7}' {typeof(long)' 8}' {typeof(decimal)' 9}'                     {typeof(float)' 10}' {typeof(ushort)' 11}' {typeof(uint)' 12}'                     {typeof(ulong)' 13}' {GuidType' 14}' {typeof(Enum)' 15}' {typeof(TimeSpan)' 16}'                     {typeof(TimeSpan?)' 17}' {typeof(int?)' 18}' {VoidType' 19}' {typeof(byte)' 20}                 };
Magic Number,MessageShark,CustomBuffer,C:\repos\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBuffer.cs,Write,The following statement contains a magic number: if (count <= 8 && buffer != _buffer) {                 var size2 = count;                 while (--size2 >= 0)                     _buffer[_position + size2] = buffer[size2];             } else Buffer.BlockCopy(buffer' 0' _buffer' _position' count);
