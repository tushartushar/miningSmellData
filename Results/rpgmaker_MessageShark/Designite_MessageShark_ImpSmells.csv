Implementation smell,Namespace,Class,File,Method,Description
Long Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDeserializerDictionary,The method has 64 lines of code.
Long Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDeserializerReadValue,The method has 93 lines of code.
Long Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDeserializerCallClassMethod,The method has 71 lines of code.
Long Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,GenerateDeserializerCallClassMethod,The method has 76 lines of code.
Long Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,GenerateSerializer,The method has 81 lines of code.
Long Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The method has 77 lines of code.
Long Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerProperties,The method has 66 lines of code.
Long Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerCallClassMethod,The method has 66 lines of code.
Long Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The method has 81 lines of code.
Long Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The method has 166 lines of code.
Complex Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToObject,Cyclomatic complexity of the method is 21
Complex Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDeserializerList,Cyclomatic complexity of the method is 7
Complex Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDeserializerReadValue,Cyclomatic complexity of the method is 13
Complex Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDeserializerCallClassMethod,Cyclomatic complexity of the method is 7
Complex Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDeserializerProperties,Cyclomatic complexity of the method is 9
Complex Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,GenerateDeserializerCallClassMethod,Cyclomatic complexity of the method is 10
Complex Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerList,Cyclomatic complexity of the method is 8
Complex Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,Cyclomatic complexity of the method is 12
Complex Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerClass,Cyclomatic complexity of the method is 13
Complex Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerCallClassMethod,Cyclomatic complexity of the method is 7
Complex Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerProperties,Cyclomatic complexity of the method is 12
Complex Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerCallClassMethod,Cyclomatic complexity of the method is 7
Complex Method,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,Cyclomatic complexity of the method is 22
Complex Method,MessageShark,CustomBuffer,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBuffer.cs,Write,Cyclomatic complexity of the method is 8
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,GetNextLength,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,ReadNextBytes,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDeserializerClass,The method has 7 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDeserializerDictionary,The method has 6 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDeserializerList,The method has 6 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDeserializerArray,The method has 6 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDeserializerReadValue,The method has 5 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDeserializerCallClassMethod,The method has 6 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDeserializerProperties,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,GenerateSerializerCallClassMethod,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,GenerateDeserializerCallClassMethod,The method has 6 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerArray,The method has 6 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerList,The method has 6 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The method has 6 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerBytesToStream,The method has 7 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,GenerateSerializerClass,The method has 5 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerClass,The method has 10 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerCallClassMethod,The method has 8 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerProperties,The method has 7 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerCallClassMethod,The method has 8 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteByteToBuffer,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteEnumToBuffer,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteNullableTimeSpanToBuffer,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteTimeSpanToBuffer,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteUInt64ToBuffer,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteUInt32ToBuffer,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteUInt16ToBuffer,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteFloatToBuffer,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDecimalToBuffer,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteInt64ToBuffer,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteInt16ToBuffer,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteCharToBuffer,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteBoolToBuffer,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteInt32ToBuffer,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteNullableInt32ToBuffer,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDateTimeToBuffer,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteStringToBuffer,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteGuidToBuffer,The method has 4 parameters.
Long Parameter List,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The method has 4 parameters.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,IsComplexType,The length of the statement  "	return !PrimitiveWriterMethods.ContainsKey (type) || DictType.IsAssignableFrom (type) || ListType.IsAssignableFrom (type); " is 122.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,GetNullableHasValueMethod,The length of the statement  "	return NullableHasValueMethods.GetOrAdd (type' key => NullableType.MakeGenericType (key).GetProperty ("HasValue").GetGetMethod ()); " is 131.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,GetNullableValueMethod,The length of the statement  "	return NullableMethods.GetOrAdd (type' key => GetNullableValueMethodMethod.MakeGenericMethod (key)//NullableType.MakeGenericType(key).GetProperty("Value").GetGetMethod() " is 169.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,GetTypeProperties,The length of the statement  "		TypeProperties [type] = props = type.GetProperties (PropertyBinding).Where (p => p.GetCustomAttributes (IgnoreAttribute' true).Length < 1).OrderBy (p => p.Name); " is 161.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,GenerateSerializer,The length of the statement  "	var type = module.DefineType (newTypeName' TypeAttributes.Public | TypeAttributes.Serializable | TypeAttributes.Sealed' typeof(Object)' new[] { " is 143.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,GenerateSerializer,The length of the statement  "	GenerateDeserializerCallClassMethod (type' methodDeserializeIL' objType' returnLocal.LocalIndex' startIndexLocal.LocalIndex); " is 125.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,GenerateSerializer,The length of the statement  "	GenerateDeserializerCallClassMethod (type' methodDeserializeStreamIL' objType' returnLocalStream.LocalIndex' startIndexLocalStream.LocalIndex' useStream: true); " is 160.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerArray,The length of the statement  "			WriteSerializerClass (typeBuilder' il' itemType' 1' null' callerType: itemType' valueLocalIndex: itemLocal.LocalIndex' valueLocalOpCode: OpCodes.Ldloc); " is 152.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerArray,The length of the statement  "			WriteSerializerCallClassMethod (typeBuilder' il' itemType' OpCodes.Ldloc' itemLocal.LocalIndex' 1' null' needClassHeader: false); " is 129.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerList,The length of the statement  "	il.Emit (hasIEnumerable ? OpCodes.Callvirt : OpCodes.Call' enumeratorLocal.LocalType.GetProperty ("Current").GetGetMethod ()); " is 126.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerList,The length of the statement  "			WriteSerializerClass (typeBuilder' il' listType' 1' null' callerType: listType' valueLocalIndex: entryLocal.LocalIndex' valueLocalOpCode: OpCodes.Ldloc); " is 153.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerList,The length of the statement  "			WriteSerializerCallClassMethod (typeBuilder' il' listType' OpCodes.Ldloc' entryLocal.LocalIndex' 1' null' needClassHeader: false); " is 130.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The length of the statement  "			WriteSerializerClass (typeBuilder' il' keyType' 1' keyMethod' callerType: keyType' valueLocalIndex: entryLocal.LocalIndex' valueLocalOpCode: OpCodes.Ldloca_S); " is 159.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The length of the statement  "			WriteSerializerCallClassMethod (typeBuilder' il' keyType' OpCodes.Ldloca_S' entryLocal.LocalIndex' 1' keyMethod' needClassHeader: false); " is 137.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The length of the statement  "		WriteSerializerBytesToStream (il' keyType' OpCodes.Ldloca_S' entryLocal.LocalIndex' 1' keyMethod' isTargetCollection: true); " is 124.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The length of the statement  "			WriteSerializerClass (typeBuilder' il' valueType' 2' valueMethod' callerType: valueType' valueLocalIndex: entryLocal.LocalIndex' valueLocalOpCode: OpCodes.Ldloca_S); " is 165.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The length of the statement  "			WriteSerializerCallClassMethod (typeBuilder' il' valueType' OpCodes.Ldloca_S' entryLocal.LocalIndex' 2' valueMethod' needClassHeader: false); " is 141.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The length of the statement  "		WriteSerializerBytesToStream (il' valueType' OpCodes.Ldloca_S' entryLocal.LocalIndex' 2' valueMethod' isTargetCollection: true); " is 128.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,GenerateSerializerClass,The length of the statement  "	WriteSerializerClass (typeBuilder' methodIL' objType' tag: 0' valueMethod: null' callerType: objType' isEntryPoint: isEntryPoint' baseType: baseType); " is 150.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerClass,The length of the statement  "			WriteSerializerDictionary (typeBuilder' il' type' valueMethod' valueLocalIndex: valueLocalIndex' valueLocalOpCode: valueLocalOpCode); " is 133.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerClass,The length of the statement  "				WriteSerializerArray (typeBuilder' il' type' valueMethod' valueLocalIndex: valueLocalIndex' valueLocalOpCode: valueLocalOpCode); " is 128.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerClass,The length of the statement  "				WriteSerializerList (typeBuilder' il' type' valueMethod' valueLocalIndex: valueLocalIndex' valueLocalOpCode: valueLocalOpCode); " is 127.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerProperties,The length of the statement  "				WriteSerializerCallClassMethod (typeBuilder' il' propType' getMethod' tag' needClassHeader' callerType' ownerType: type); " is 121.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Build,The length of the statement  "			var includes = type.GetCustomAttributes (typeof(MessageSharkIncludeAttribute)' false).Cast<MessageSharkIncludeAttribute> ().ToList (); " is 134.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Build,The length of the statement  "					throw new InvalidOperationException (String.Format ("Duplicated tag error for {0}. Tag# {1} already exists"' type.Name' currentTag)); " is 133.
Long Statement,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterTypeFor,The length of the statement  "		throw new InvalidOperationException (String.Format ("Duplicated tag error for {0}. Tag# {1} already exists"' type.Name' tag)); " is 126.
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,EncodeLength,The following statement contains a magic number: return tag <= 15 ? new byte[] {  	(byte)((tag << 4) | length)  } : new byte[] {  	(byte)length'  	(byte)tag  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,EncodeLength,The following statement contains a magic number: return tag <= 15 ? new byte[] {  	(byte)((tag << 4) | length)  } : new byte[] {  	(byte)length'  	(byte)tag  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,MoveToNextBytes,The following statement contains a magic number: if (tag <= 15)  	startIndex++;  else  	startIndex += 2;  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,MoveToNextBytes,The following statement contains a magic number: if (tag <= 15)  	startIndex++;  else  	startIndex += 2;  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,MoveToNextBytes,The following statement contains a magic number: startIndex += 2;  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,GetNextLength,The following statement contains a magic number: if (tag <= 15)  	length = size = buffer [startIndex++] & LSB;  else {  	length = size = buffer [startIndex++];  	startIndex++;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDecimal,The following statement contains a magic number: if (buffer.Length == 2) {  	if (buffer [1] == 1)  		return decimal.MinValue;  	else  		return decimal.MaxValue;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToTimeSpan,The following statement contains a magic number: if (buffer.Length == 1) {  	if (buffer [0] == 0)  		return TimeSpan.MinValue;  	else  		return TimeSpan.MaxValue;  } else if (buffer.Length == 2) {  	return TimeSpan.FromTicks (TimeSpanTicks [buffer [0]] * buffer [1]);  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToTimeSpan,The following statement contains a magic number: if (buffer.Length == 2) {  	return TimeSpan.FromTicks (TimeSpanTicks [buffer [0]] * buffer [1]);  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (buffer.Length == 2) {  	if (buffer [1] == 1)  		return double.MinValue;  	else  		return double.MaxValue;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: buffer [0] = buffer [7];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: buffer [7] = temp;  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: buffer [1] = buffer [6];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: buffer [6] = temp;  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: temp = buffer [2];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: buffer [2] = buffer [5];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: buffer [2] = buffer [5];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: buffer [5] = temp;  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: temp = buffer [3];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: buffer [3] = buffer [4];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: buffer [3] = buffer [4];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToDouble,The following statement contains a magic number: buffer [4] = temp;  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToFloat,The following statement contains a magic number: return BitConverter.ToSingle (BytesToIntegerBytes (buffer' 4)' 0);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToInt16,The following statement contains a magic number: return BitConverter.ToInt16 (BytesToIntegerBytes (buffer' 2)' 0);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToInt32,The following statement contains a magic number: return BitConverter.ToInt32 (BytesToIntegerBytes (buffer' 4)' 0);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToInt64,The following statement contains a magic number: return BitConverter.ToInt64 (BytesToIntegerBytes (buffer' 8)' 0);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToUInt16,The following statement contains a magic number: return BitConverter.ToUInt16 (BytesToIntegerBytes (buffer' 2)' 0);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToUInt32,The following statement contains a magic number: return BitConverter.ToUInt32 (BytesToIntegerBytes (buffer' 4)' 0);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,BytesToUInt64,The following statement contains a magic number: return BitConverter.ToUInt64 (BytesToIntegerBytes (buffer' 8)' 0);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDeserializerDictionary,The following statement contains a magic number: WriteDeserializerReadValue (typeBuilder' il' valueType' 2' valueItemLocal.LocalIndex);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The following statement contains a magic number: if (valueType.IsComplexType ()) {  	var valueMethod = keyValuePairType.GetProperty ("Value").GetGetMethod ();  	if (valueType.IsCollectionType ())  		WriteSerializerClass (typeBuilder' il' valueType' 2' valueMethod' callerType: valueType' valueLocalIndex: entryLocal.LocalIndex' valueLocalOpCode: OpCodes.Ldloca_S);  	else  		WriteSerializerCallClassMethod (typeBuilder' il' valueType' OpCodes.Ldloca_S' entryLocal.LocalIndex' 2' valueMethod' needClassHeader: false);  } else {  	var valueMethod = keyValuePairType.GetProperty ("Value").GetGetMethod ();  	WriteSerializerBytesToStream (il' valueType' OpCodes.Ldloca_S' entryLocal.LocalIndex' 2' valueMethod' isTargetCollection: true);  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The following statement contains a magic number: if (valueType.IsComplexType ()) {  	var valueMethod = keyValuePairType.GetProperty ("Value").GetGetMethod ();  	if (valueType.IsCollectionType ())  		WriteSerializerClass (typeBuilder' il' valueType' 2' valueMethod' callerType: valueType' valueLocalIndex: entryLocal.LocalIndex' valueLocalOpCode: OpCodes.Ldloca_S);  	else  		WriteSerializerCallClassMethod (typeBuilder' il' valueType' OpCodes.Ldloca_S' entryLocal.LocalIndex' 2' valueMethod' needClassHeader: false);  } else {  	var valueMethod = keyValuePairType.GetProperty ("Value").GetGetMethod ();  	WriteSerializerBytesToStream (il' valueType' OpCodes.Ldloca_S' entryLocal.LocalIndex' 2' valueMethod' isTargetCollection: true);  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The following statement contains a magic number: if (valueType.IsComplexType ()) {  	var valueMethod = keyValuePairType.GetProperty ("Value").GetGetMethod ();  	if (valueType.IsCollectionType ())  		WriteSerializerClass (typeBuilder' il' valueType' 2' valueMethod' callerType: valueType' valueLocalIndex: entryLocal.LocalIndex' valueLocalOpCode: OpCodes.Ldloca_S);  	else  		WriteSerializerCallClassMethod (typeBuilder' il' valueType' OpCodes.Ldloca_S' entryLocal.LocalIndex' 2' valueMethod' needClassHeader: false);  } else {  	var valueMethod = keyValuePairType.GetProperty ("Value").GetGetMethod ();  	WriteSerializerBytesToStream (il' valueType' OpCodes.Ldloca_S' entryLocal.LocalIndex' 2' valueMethod' isTargetCollection: true);  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The following statement contains a magic number: if (valueType.IsCollectionType ())  	WriteSerializerClass (typeBuilder' il' valueType' 2' valueMethod' callerType: valueType' valueLocalIndex: entryLocal.LocalIndex' valueLocalOpCode: OpCodes.Ldloca_S);  else  	WriteSerializerCallClassMethod (typeBuilder' il' valueType' OpCodes.Ldloca_S' entryLocal.LocalIndex' 2' valueMethod' needClassHeader: false);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The following statement contains a magic number: if (valueType.IsCollectionType ())  	WriteSerializerClass (typeBuilder' il' valueType' 2' valueMethod' callerType: valueType' valueLocalIndex: entryLocal.LocalIndex' valueLocalOpCode: OpCodes.Ldloca_S);  else  	WriteSerializerCallClassMethod (typeBuilder' il' valueType' OpCodes.Ldloca_S' entryLocal.LocalIndex' 2' valueMethod' needClassHeader: false);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The following statement contains a magic number: WriteSerializerClass (typeBuilder' il' valueType' 2' valueMethod' callerType: valueType' valueLocalIndex: entryLocal.LocalIndex' valueLocalOpCode: OpCodes.Ldloca_S);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The following statement contains a magic number: WriteSerializerCallClassMethod (typeBuilder' il' valueType' OpCodes.Ldloca_S' entryLocal.LocalIndex' 2' valueMethod' needClassHeader: false);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerDictionary,The following statement contains a magic number: WriteSerializerBytesToStream (il' valueType' OpCodes.Ldloca_S' entryLocal.LocalIndex' 2' valueMethod' isTargetCollection: true);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerProperties,The following statement contains a magic number: if (!isEntryPoint) {  	var needClassHeaderLabel = il.DefineLabel ();  	il.Emit (OpCodes.Ldarg' 4);  	il.Emit (OpCodes.Brfalse' needClassHeaderLabel);  	il.Emit (OpCodes.Ldarg_1);  	il.Emit (OpCodes.Ldc_I4_1);  	il.Emit (OpCodes.Ldarg_3);  	il.Emit (OpCodes.Call' EncodeLengthMethod);  	il.Emit (OpCodes.Call' BufferStreamWriteBytesMethod);  	il.MarkLabel (needClassHeaderLabel);  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerProperties,The following statement contains a magic number: il.Emit (OpCodes.Ldarg' 4);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerProperties,The following statement contains a magic number: foreach (var prop in props) {  	var propType = prop.PropertyType;  	if (!prop.CanRead || !prop.CanWrite)  		continue;  	var getMethod = prop.GetGetMethod ();  	if (propType.IsComplexType ()) {  		if (propType.IsCollectionType ())  			WriteSerializerClass (typeBuilder' il' propType' tag' getMethod' callerType: callerType);  		else {  			WriteSerializerCallClassMethod (typeBuilder' il' propType' getMethod' tag' needClassHeader' callerType' ownerType: type);  		}  	} else {  		var isTypeEnum = propType.IsEnum;  		var isNullable = propType.IsNullable ();  		var nullLocal = isNullable ? il.DeclareLocal (propType) : default(LocalBuilder);  		il.Emit (OpCodes.Ldarg_1);  		if (isTypeClass)  			il.Emit (OpCodes.Ldarg_2);  		else  			il.Emit (OpCodes.Ldarga' 2);  		il.Emit (isTypeClass ? OpCodes.Callvirt : OpCodes.Call' getMethod);  		if (isNullable) {  			il.Emit (OpCodes.Stloc' nullLocal.LocalIndex);  			il.Emit (OpCodes.Ldloc' nullLocal.LocalIndex);  			il.Emit (OpCodes.Call' propType.GetNullableValueMethod ());  		}  		if (isTypeEnum)  			il.Emit (OpCodes.Box' propType);  		il.Emit (OpCodes.Ldc_I4' tag);  		if (isTypeEnum)  			propType = EnumType;  		if (isNullable) {  			il.Emit (OpCodes.Ldloca' nullLocal.LocalIndex);  			il.Emit (OpCodes.Call' propType.GetNullableHasValueMethod ());  		} else {  			il.Emit (OpCodes.Ldc_I4_0);  		}  		il.Emit (OpCodes.Call' PrimitiveWriterMethods [propType.GetNonNullableType ()]);  	}  	tag++;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerProperties,The following statement contains a magic number: if (propType.IsComplexType ()) {  	if (propType.IsCollectionType ())  		WriteSerializerClass (typeBuilder' il' propType' tag' getMethod' callerType: callerType);  	else {  		WriteSerializerCallClassMethod (typeBuilder' il' propType' getMethod' tag' needClassHeader' callerType' ownerType: type);  	}  } else {  	var isTypeEnum = propType.IsEnum;  	var isNullable = propType.IsNullable ();  	var nullLocal = isNullable ? il.DeclareLocal (propType) : default(LocalBuilder);  	il.Emit (OpCodes.Ldarg_1);  	if (isTypeClass)  		il.Emit (OpCodes.Ldarg_2);  	else  		il.Emit (OpCodes.Ldarga' 2);  	il.Emit (isTypeClass ? OpCodes.Callvirt : OpCodes.Call' getMethod);  	if (isNullable) {  		il.Emit (OpCodes.Stloc' nullLocal.LocalIndex);  		il.Emit (OpCodes.Ldloc' nullLocal.LocalIndex);  		il.Emit (OpCodes.Call' propType.GetNullableValueMethod ());  	}  	if (isTypeEnum)  		il.Emit (OpCodes.Box' propType);  	il.Emit (OpCodes.Ldc_I4' tag);  	if (isTypeEnum)  		propType = EnumType;  	if (isNullable) {  		il.Emit (OpCodes.Ldloca' nullLocal.LocalIndex);  		il.Emit (OpCodes.Call' propType.GetNullableHasValueMethod ());  	} else {  		il.Emit (OpCodes.Ldc_I4_0);  	}  	il.Emit (OpCodes.Call' PrimitiveWriterMethods [propType.GetNonNullableType ()]);  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerProperties,The following statement contains a magic number: if (isTypeClass)  	il.Emit (OpCodes.Ldarg_2);  else  	il.Emit (OpCodes.Ldarga' 2);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerProperties,The following statement contains a magic number: il.Emit (OpCodes.Ldarga' 2);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerCallClassMethod,The following statement contains a magic number: if (TypeMapping.ContainsKey (type)) {  	var index = 0;  	var typeMapping = TypeMapping [type];  	var count = typeMapping.Count;  	var types = typeMapping.Select (kv => kv.Key);  	var needBranchLabel = count > 1;  	var branchLabel = needBranchLabel ? il.DefineLabel () : DefaultLabel;  	var valueLocal = il.DeclareLocal (type);  	var valueTypeLocal = il.DeclareLocal (TypeType);  	var nullConditionLabel = il.DefineLabel ();  	if (isTypeClass)  		il.Emit (OpCodes.Ldarg_2);  	else  		il.Emit (OpCodes.Ldarga' 2);  	il.Emit (OpCodes.Call' valueMethod);  	il.Emit (OpCodes.Stloc' valueLocal.LocalIndex);  	il.Emit (OpCodes.Ldloc' valueLocal.LocalIndex);  	il.Emit (OpCodes.Brfalse' nullConditionLabel);  	il.Emit (OpCodes.Ldloc' valueLocal.LocalIndex);  	il.Emit (OpCodes.Callvirt' GetTypeMethod);  	il.Emit (OpCodes.Stloc' valueTypeLocal.LocalIndex);  	foreach (var mapType in types) {  		index++;  		var isLastIndex = index == count;  		var isLastCondition = isLastIndex && needBranchLabel;  		var conditionLabel = !isLastCondition ? il.DefineLabel () : DefaultLabel;  		var currentConditionLabel = isLastCondition ? branchLabel : conditionLabel;  		il.Emit (OpCodes.Ldloc' valueTypeLocal.LocalIndex);  		il.Emit (OpCodes.Ldtoken' mapType);  		il.Emit (OpCodes.Call' GetTypeFromHandleMethod);  		il.Emit (OpCodes.Call' GetTypeOpEqualityMethod);  		il.Emit (OpCodes.Brfalse' currentConditionLabel);  		method = GenerateSerializerClass (typeBuilder' mapType' baseType: type' ownerType: ownerType);  		il.Emit (OpCodes.Ldarg_0);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Ldloc' valueLocal.LocalIndex);  		if (mapType.IsClass)  			il.Emit (OpCodes.Castclass' mapType);  		else  			il.Emit (OpCodes.Unbox_Any' mapType);  		il.Emit (OpCodes.Ldc_I4' tag);  		il.Emit (OpCodes.Ldc_I4' needClassHeader ? 1 : 0);  		il.Emit (OpCodes.Call' method);  		if (!isLastIndex)  			il.Emit (OpCodes.Br' branchLabel);  		il.MarkLabel (currentConditionLabel);  	}  	il.MarkLabel (nullConditionLabel);  	return;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerCallClassMethod,The following statement contains a magic number: if (isTypeClass)  	il.Emit (OpCodes.Ldarg_2);  else  	il.Emit (OpCodes.Ldarga' 2);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerCallClassMethod,The following statement contains a magic number: il.Emit (OpCodes.Ldarga' 2);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerCallClassMethod,The following statement contains a magic number: if (isTypeClass)  	il.Emit (OpCodes.Ldarg_2);  else  	il.Emit (OpCodes.Ldarga' 2);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteSerializerCallClassMethod,The following statement contains a magic number: il.Emit (OpCodes.Ldarga' 2);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int16ToBytes,The following statement contains a magic number: if (value >= 0 && value <= 255)  	return new byte[] {  		(byte)value  	};  else if (value < 0)  	return BitConverter.GetBytes (value);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int16ToBytes,The following statement contains a magic number: unchecked {  	buffer [index++] = (byte)value;  	if ((sValue = (value >> 8)) > 0) {  		buffer [index++] = (byte)sValue;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int16ToBytes,The following statement contains a magic number: if ((sValue = (value >> 8)) > 0) {  	buffer [index++] = (byte)sValue;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int32ToBytes,The following statement contains a magic number: if (value >= 0 && value <= 255)  	return new byte[] {  		(byte)value  	};  else if (value < 0)  	return BitConverter.GetBytes (value);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int32ToBytes,The following statement contains a magic number: unchecked {  	buffer [index++] = (byte)value;  	if ((sValue = (value >> 8)) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 16)) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 24)) > 0)  				buffer [index++] = (byte)sValue;  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int32ToBytes,The following statement contains a magic number: unchecked {  	buffer [index++] = (byte)value;  	if ((sValue = (value >> 8)) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 16)) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 24)) > 0)  				buffer [index++] = (byte)sValue;  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int32ToBytes,The following statement contains a magic number: unchecked {  	buffer [index++] = (byte)value;  	if ((sValue = (value >> 8)) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 16)) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 24)) > 0)  				buffer [index++] = (byte)sValue;  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int32ToBytes,The following statement contains a magic number: if ((sValue = (value >> 8)) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 16)) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 24)) > 0)  			buffer [index++] = (byte)sValue;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int32ToBytes,The following statement contains a magic number: if ((sValue = (value >> 8)) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 16)) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 24)) > 0)  			buffer [index++] = (byte)sValue;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int32ToBytes,The following statement contains a magic number: if ((sValue = (value >> 8)) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 16)) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 24)) > 0)  			buffer [index++] = (byte)sValue;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int32ToBytes,The following statement contains a magic number: if ((sValue = (value >> 16)) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 24)) > 0)  		buffer [index++] = (byte)sValue;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int32ToBytes,The following statement contains a magic number: if ((sValue = (value >> 16)) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 24)) > 0)  		buffer [index++] = (byte)sValue;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int32ToBytes,The following statement contains a magic number: if ((sValue = (value >> 24)) > 0)  	buffer [index++] = (byte)sValue;  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if (value >= 0 && value <= 255)  	return new byte[] {  		(byte)value  	};  else if (value < 0)  	return BitConverter.GetBytes (value);  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: unchecked {  	buffer [index++] = (byte)(value & msb);  	if ((sValue = (value >> 8) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 16) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 24) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 32) & msb) > 0) {  					buffer [index++] = (byte)sValue;  					if ((sValue = (value >> 40) & msb) > 0) {  						buffer [index++] = (byte)sValue;  						if ((sValue = (value >> 48) & msb) > 0) {  							buffer [index++] = (byte)sValue;  							if ((sValue = (value >> 56) & msb) > 0)  								buffer [index++] = (byte)sValue;  						}  					}  				}  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: unchecked {  	buffer [index++] = (byte)(value & msb);  	if ((sValue = (value >> 8) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 16) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 24) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 32) & msb) > 0) {  					buffer [index++] = (byte)sValue;  					if ((sValue = (value >> 40) & msb) > 0) {  						buffer [index++] = (byte)sValue;  						if ((sValue = (value >> 48) & msb) > 0) {  							buffer [index++] = (byte)sValue;  							if ((sValue = (value >> 56) & msb) > 0)  								buffer [index++] = (byte)sValue;  						}  					}  				}  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: unchecked {  	buffer [index++] = (byte)(value & msb);  	if ((sValue = (value >> 8) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 16) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 24) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 32) & msb) > 0) {  					buffer [index++] = (byte)sValue;  					if ((sValue = (value >> 40) & msb) > 0) {  						buffer [index++] = (byte)sValue;  						if ((sValue = (value >> 48) & msb) > 0) {  							buffer [index++] = (byte)sValue;  							if ((sValue = (value >> 56) & msb) > 0)  								buffer [index++] = (byte)sValue;  						}  					}  				}  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: unchecked {  	buffer [index++] = (byte)(value & msb);  	if ((sValue = (value >> 8) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 16) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 24) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 32) & msb) > 0) {  					buffer [index++] = (byte)sValue;  					if ((sValue = (value >> 40) & msb) > 0) {  						buffer [index++] = (byte)sValue;  						if ((sValue = (value >> 48) & msb) > 0) {  							buffer [index++] = (byte)sValue;  							if ((sValue = (value >> 56) & msb) > 0)  								buffer [index++] = (byte)sValue;  						}  					}  				}  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: unchecked {  	buffer [index++] = (byte)(value & msb);  	if ((sValue = (value >> 8) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 16) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 24) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 32) & msb) > 0) {  					buffer [index++] = (byte)sValue;  					if ((sValue = (value >> 40) & msb) > 0) {  						buffer [index++] = (byte)sValue;  						if ((sValue = (value >> 48) & msb) > 0) {  							buffer [index++] = (byte)sValue;  							if ((sValue = (value >> 56) & msb) > 0)  								buffer [index++] = (byte)sValue;  						}  					}  				}  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: unchecked {  	buffer [index++] = (byte)(value & msb);  	if ((sValue = (value >> 8) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 16) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 24) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 32) & msb) > 0) {  					buffer [index++] = (byte)sValue;  					if ((sValue = (value >> 40) & msb) > 0) {  						buffer [index++] = (byte)sValue;  						if ((sValue = (value >> 48) & msb) > 0) {  							buffer [index++] = (byte)sValue;  							if ((sValue = (value >> 56) & msb) > 0)  								buffer [index++] = (byte)sValue;  						}  					}  				}  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: unchecked {  	buffer [index++] = (byte)(value & msb);  	if ((sValue = (value >> 8) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 16) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 24) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 32) & msb) > 0) {  					buffer [index++] = (byte)sValue;  					if ((sValue = (value >> 40) & msb) > 0) {  						buffer [index++] = (byte)sValue;  						if ((sValue = (value >> 48) & msb) > 0) {  							buffer [index++] = (byte)sValue;  							if ((sValue = (value >> 56) & msb) > 0)  								buffer [index++] = (byte)sValue;  						}  					}  				}  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 8) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 16) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 24) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 32) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 40) & msb) > 0) {  					buffer [index++] = (byte)sValue;  					if ((sValue = (value >> 48) & msb) > 0) {  						buffer [index++] = (byte)sValue;  						if ((sValue = (value >> 56) & msb) > 0)  							buffer [index++] = (byte)sValue;  					}  				}  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 8) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 16) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 24) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 32) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 40) & msb) > 0) {  					buffer [index++] = (byte)sValue;  					if ((sValue = (value >> 48) & msb) > 0) {  						buffer [index++] = (byte)sValue;  						if ((sValue = (value >> 56) & msb) > 0)  							buffer [index++] = (byte)sValue;  					}  				}  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 8) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 16) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 24) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 32) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 40) & msb) > 0) {  					buffer [index++] = (byte)sValue;  					if ((sValue = (value >> 48) & msb) > 0) {  						buffer [index++] = (byte)sValue;  						if ((sValue = (value >> 56) & msb) > 0)  							buffer [index++] = (byte)sValue;  					}  				}  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 8) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 16) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 24) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 32) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 40) & msb) > 0) {  					buffer [index++] = (byte)sValue;  					if ((sValue = (value >> 48) & msb) > 0) {  						buffer [index++] = (byte)sValue;  						if ((sValue = (value >> 56) & msb) > 0)  							buffer [index++] = (byte)sValue;  					}  				}  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 8) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 16) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 24) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 32) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 40) & msb) > 0) {  					buffer [index++] = (byte)sValue;  					if ((sValue = (value >> 48) & msb) > 0) {  						buffer [index++] = (byte)sValue;  						if ((sValue = (value >> 56) & msb) > 0)  							buffer [index++] = (byte)sValue;  					}  				}  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 8) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 16) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 24) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 32) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 40) & msb) > 0) {  					buffer [index++] = (byte)sValue;  					if ((sValue = (value >> 48) & msb) > 0) {  						buffer [index++] = (byte)sValue;  						if ((sValue = (value >> 56) & msb) > 0)  							buffer [index++] = (byte)sValue;  					}  				}  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 8) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 16) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 24) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 32) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 40) & msb) > 0) {  					buffer [index++] = (byte)sValue;  					if ((sValue = (value >> 48) & msb) > 0) {  						buffer [index++] = (byte)sValue;  						if ((sValue = (value >> 56) & msb) > 0)  							buffer [index++] = (byte)sValue;  					}  				}  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 16) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 24) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 32) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 40) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 48) & msb) > 0) {  					buffer [index++] = (byte)sValue;  					if ((sValue = (value >> 56) & msb) > 0)  						buffer [index++] = (byte)sValue;  				}  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 16) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 24) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 32) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 40) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 48) & msb) > 0) {  					buffer [index++] = (byte)sValue;  					if ((sValue = (value >> 56) & msb) > 0)  						buffer [index++] = (byte)sValue;  				}  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 16) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 24) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 32) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 40) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 48) & msb) > 0) {  					buffer [index++] = (byte)sValue;  					if ((sValue = (value >> 56) & msb) > 0)  						buffer [index++] = (byte)sValue;  				}  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 16) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 24) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 32) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 40) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 48) & msb) > 0) {  					buffer [index++] = (byte)sValue;  					if ((sValue = (value >> 56) & msb) > 0)  						buffer [index++] = (byte)sValue;  				}  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 16) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 24) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 32) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 40) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 48) & msb) > 0) {  					buffer [index++] = (byte)sValue;  					if ((sValue = (value >> 56) & msb) > 0)  						buffer [index++] = (byte)sValue;  				}  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 16) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 24) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 32) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 40) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 48) & msb) > 0) {  					buffer [index++] = (byte)sValue;  					if ((sValue = (value >> 56) & msb) > 0)  						buffer [index++] = (byte)sValue;  				}  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 24) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 32) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 40) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 48) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 56) & msb) > 0)  					buffer [index++] = (byte)sValue;  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 24) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 32) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 40) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 48) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 56) & msb) > 0)  					buffer [index++] = (byte)sValue;  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 24) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 32) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 40) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 48) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 56) & msb) > 0)  					buffer [index++] = (byte)sValue;  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 24) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 32) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 40) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 48) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 56) & msb) > 0)  					buffer [index++] = (byte)sValue;  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 24) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 32) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 40) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 48) & msb) > 0) {  				buffer [index++] = (byte)sValue;  				if ((sValue = (value >> 56) & msb) > 0)  					buffer [index++] = (byte)sValue;  			}  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 32) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 40) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 48) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 56) & msb) > 0)  				buffer [index++] = (byte)sValue;  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 32) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 40) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 48) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 56) & msb) > 0)  				buffer [index++] = (byte)sValue;  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 32) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 40) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 48) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 56) & msb) > 0)  				buffer [index++] = (byte)sValue;  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 32) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 40) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 48) & msb) > 0) {  			buffer [index++] = (byte)sValue;  			if ((sValue = (value >> 56) & msb) > 0)  				buffer [index++] = (byte)sValue;  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 40) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 48) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 56) & msb) > 0)  			buffer [index++] = (byte)sValue;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 40) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 48) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 56) & msb) > 0)  			buffer [index++] = (byte)sValue;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 40) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 48) & msb) > 0) {  		buffer [index++] = (byte)sValue;  		if ((sValue = (value >> 56) & msb) > 0)  			buffer [index++] = (byte)sValue;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 48) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 56) & msb) > 0)  		buffer [index++] = (byte)sValue;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 48) & msb) > 0) {  	buffer [index++] = (byte)sValue;  	if ((sValue = (value >> 56) & msb) > 0)  		buffer [index++] = (byte)sValue;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,Int64ToBytes,The following statement contains a magic number: if ((sValue = (value >> 56) & msb) > 0)  	buffer [index++] = (byte)sValue;  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,TimeSpanToBytes,The following statement contains a magic number: if (value == TimeSpan.MaxValue)  	buffer = MaxTimeSpanBytes;  else if (value == TimeSpan.MinValue)  	buffer = MinTimeSpanBytes;  else {  	int tickIndex = -1;  	long ticksValue;  	var ticks = value.Ticks;  	for (var i = 0; i < TimeSpanTicksLength; i++) {  		if (ticks % (ticksValue = TimeSpanTicks [i]) == 0) {  			ticks /= ticksValue;  			tickIndex = i;  			break;  		}  	}  	if (ticks <= 255 && tickIndex != -1)  		buffer = new byte[] {  			(byte)tickIndex'  			(byte)ticks  		};  	else {  		var ticksBuffer = Int64ToBytes (ticks);  		buffer = new byte[ticksBuffer.Length + 1];  		buffer [0] = (byte)(tickIndex > -1 ? tickIndex : TimeSpanTicksLength);  		Buffer.BlockCopy (ticksBuffer' 0' buffer' 1' ticksBuffer.Length);  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,TimeSpanToBytes,The following statement contains a magic number: if (value == TimeSpan.MinValue)  	buffer = MinTimeSpanBytes;  else {  	int tickIndex = -1;  	long ticksValue;  	var ticks = value.Ticks;  	for (var i = 0; i < TimeSpanTicksLength; i++) {  		if (ticks % (ticksValue = TimeSpanTicks [i]) == 0) {  			ticks /= ticksValue;  			tickIndex = i;  			break;  		}  	}  	if (ticks <= 255 && tickIndex != -1)  		buffer = new byte[] {  			(byte)tickIndex'  			(byte)ticks  		};  	else {  		var ticksBuffer = Int64ToBytes (ticks);  		buffer = new byte[ticksBuffer.Length + 1];  		buffer [0] = (byte)(tickIndex > -1 ? tickIndex : TimeSpanTicksLength);  		Buffer.BlockCopy (ticksBuffer' 0' buffer' 1' ticksBuffer.Length);  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,TimeSpanToBytes,The following statement contains a magic number: if (ticks <= 255 && tickIndex != -1)  	buffer = new byte[] {  		(byte)tickIndex'  		(byte)ticks  	};  else {  	var ticksBuffer = Int64ToBytes (ticks);  	buffer = new byte[ticksBuffer.Length + 1];  	buffer [0] = (byte)(tickIndex > -1 ? tickIndex : TimeSpanTicksLength);  	Buffer.BlockCopy (ticksBuffer' 0' buffer' 1' ticksBuffer.Length);  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)  	buffer = _demicalMax;  else if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)  	buffer = _demicalMax;  else if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)  	buffer = _demicalMax;  else if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)  	buffer = _demicalMax;  else if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)  	buffer = _demicalMax;  else if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)  	buffer = _demicalMax;  else if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)  	buffer = _demicalMax;  else if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)  	buffer = _demicalMax;  else if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)  	buffer = _demicalMax;  else if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)  	buffer = _demicalMax;  else if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)  	buffer = _demicalMax;  else if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MaxValue)  	buffer = _demicalMax;  else if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (value == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (value);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: buffer [0] = buffer [7];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: buffer [7] = temp;  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: buffer [1] = buffer [6];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: buffer [6] = temp;  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: temp = buffer [2];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: buffer [2] = buffer [5];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: buffer [2] = buffer [5];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: buffer [5] = temp;  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: temp = buffer [3];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: buffer [3] = buffer [4];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: buffer [3] = buffer [4];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteDoubleToBuffer,The following statement contains a magic number: buffer [4] = temp;  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {  	buffer = StringToByteArray ((string)value);  } else if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {  	buffer = StringToByteArray ((string)value);  } else if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {  	buffer = StringToByteArray ((string)value);  } else if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {  	buffer = StringToByteArray ((string)value);  } else if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {  	buffer = StringToByteArray ((string)value);  } else if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {  	buffer = StringToByteArray ((string)value);  } else if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {  	buffer = StringToByteArray ((string)value);  } else if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {  	buffer = StringToByteArray ((string)value);  } else if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {  	buffer = StringToByteArray ((string)value);  } else if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {  	buffer = StringToByteArray ((string)value);  } else if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {  	buffer = StringToByteArray ((string)value);  } else if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(string)) {  	buffer = StringToByteArray ((string)value);  } else if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(int)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(byte)) {  	buffer = Int32ToBytes ((byte)value);  } else if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(DateTime)) {  	buffer = DateTimeToByteArray ((DateTime)value);  } else if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(bool)) {  	buffer = new byte[] {  		(bool)value ? (byte)1 : (byte)0  	};  } else if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(char)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (type == typeof(double)) {  	unsafe {  		var dValue = (double)value;  		if (dValue == double.MaxValue)  			buffer = _demicalMax;  		else if (dValue == double.MinValue)  			buffer = _demicalMin;  		else {  			buffer = BitConverter.GetBytes (dValue);  			if (BitConverter.IsLittleEndian) {  				var temp = buffer [0];  				buffer [0] = buffer [7];  				buffer [7] = temp;  				temp = buffer [1];  				buffer [1] = buffer [6];  				buffer [6] = temp;  				temp = buffer [2];  				buffer [2] = buffer [5];  				buffer [5] = temp;  				temp = buffer [3];  				buffer [3] = buffer [4];  				buffer [4] = temp;  			}  		}  	}  } else if (type == typeof(short)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(long)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(decimal)) {  	buffer = DecimalToByteArray ((decimal)value);  } else if (type == typeof(float)) {  	unsafe {  		var fValue = (float)value;  		buffer = Int32ToBytes (*((int*)&fValue));  	}  } else if (type == typeof(ushort)) {  	buffer = Int16ToBytes ((short)value);  } else if (type == typeof(uint)) {  	buffer = Int32ToBytes ((int)value);  } else if (type == typeof(int?)) {  	buffer = Int32ToBytes ((value as int?) ?? 0);  } else if (type == typeof(ulong)) {  	buffer = Int64ToBytes ((long)value);  } else if (type == typeof(Guid)) {  	buffer = ((Guid)value).ToByteArray ();  } else if (type.IsEnum) {  	buffer = Int32ToBytes (((IConvertible)value).ToInt32 (null));  } else if (type == typeof(TimeSpan)) {  	buffer = TimeSpanToBytes ((TimeSpan)value);  } else if (type == typeof(TimeSpan?)) {  	buffer = TimeSpanToBytes ((value as TimeSpan?) ?? TimeSpan.Zero);  } else if (type == VoidType) {  	buffer = new byte[0];  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: unsafe {  	var dValue = (double)value;  	if (dValue == double.MaxValue)  		buffer = _demicalMax;  	else if (dValue == double.MinValue)  		buffer = _demicalMin;  	else {  		buffer = BitConverter.GetBytes (dValue);  		if (BitConverter.IsLittleEndian) {  			var temp = buffer [0];  			buffer [0] = buffer [7];  			buffer [7] = temp;  			temp = buffer [1];  			buffer [1] = buffer [6];  			buffer [6] = temp;  			temp = buffer [2];  			buffer [2] = buffer [5];  			buffer [5] = temp;  			temp = buffer [3];  			buffer [3] = buffer [4];  			buffer [4] = temp;  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: unsafe {  	var dValue = (double)value;  	if (dValue == double.MaxValue)  		buffer = _demicalMax;  	else if (dValue == double.MinValue)  		buffer = _demicalMin;  	else {  		buffer = BitConverter.GetBytes (dValue);  		if (BitConverter.IsLittleEndian) {  			var temp = buffer [0];  			buffer [0] = buffer [7];  			buffer [7] = temp;  			temp = buffer [1];  			buffer [1] = buffer [6];  			buffer [6] = temp;  			temp = buffer [2];  			buffer [2] = buffer [5];  			buffer [5] = temp;  			temp = buffer [3];  			buffer [3] = buffer [4];  			buffer [4] = temp;  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: unsafe {  	var dValue = (double)value;  	if (dValue == double.MaxValue)  		buffer = _demicalMax;  	else if (dValue == double.MinValue)  		buffer = _demicalMin;  	else {  		buffer = BitConverter.GetBytes (dValue);  		if (BitConverter.IsLittleEndian) {  			var temp = buffer [0];  			buffer [0] = buffer [7];  			buffer [7] = temp;  			temp = buffer [1];  			buffer [1] = buffer [6];  			buffer [6] = temp;  			temp = buffer [2];  			buffer [2] = buffer [5];  			buffer [5] = temp;  			temp = buffer [3];  			buffer [3] = buffer [4];  			buffer [4] = temp;  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: unsafe {  	var dValue = (double)value;  	if (dValue == double.MaxValue)  		buffer = _demicalMax;  	else if (dValue == double.MinValue)  		buffer = _demicalMin;  	else {  		buffer = BitConverter.GetBytes (dValue);  		if (BitConverter.IsLittleEndian) {  			var temp = buffer [0];  			buffer [0] = buffer [7];  			buffer [7] = temp;  			temp = buffer [1];  			buffer [1] = buffer [6];  			buffer [6] = temp;  			temp = buffer [2];  			buffer [2] = buffer [5];  			buffer [5] = temp;  			temp = buffer [3];  			buffer [3] = buffer [4];  			buffer [4] = temp;  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: unsafe {  	var dValue = (double)value;  	if (dValue == double.MaxValue)  		buffer = _demicalMax;  	else if (dValue == double.MinValue)  		buffer = _demicalMin;  	else {  		buffer = BitConverter.GetBytes (dValue);  		if (BitConverter.IsLittleEndian) {  			var temp = buffer [0];  			buffer [0] = buffer [7];  			buffer [7] = temp;  			temp = buffer [1];  			buffer [1] = buffer [6];  			buffer [6] = temp;  			temp = buffer [2];  			buffer [2] = buffer [5];  			buffer [5] = temp;  			temp = buffer [3];  			buffer [3] = buffer [4];  			buffer [4] = temp;  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: unsafe {  	var dValue = (double)value;  	if (dValue == double.MaxValue)  		buffer = _demicalMax;  	else if (dValue == double.MinValue)  		buffer = _demicalMin;  	else {  		buffer = BitConverter.GetBytes (dValue);  		if (BitConverter.IsLittleEndian) {  			var temp = buffer [0];  			buffer [0] = buffer [7];  			buffer [7] = temp;  			temp = buffer [1];  			buffer [1] = buffer [6];  			buffer [6] = temp;  			temp = buffer [2];  			buffer [2] = buffer [5];  			buffer [5] = temp;  			temp = buffer [3];  			buffer [3] = buffer [4];  			buffer [4] = temp;  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: unsafe {  	var dValue = (double)value;  	if (dValue == double.MaxValue)  		buffer = _demicalMax;  	else if (dValue == double.MinValue)  		buffer = _demicalMin;  	else {  		buffer = BitConverter.GetBytes (dValue);  		if (BitConverter.IsLittleEndian) {  			var temp = buffer [0];  			buffer [0] = buffer [7];  			buffer [7] = temp;  			temp = buffer [1];  			buffer [1] = buffer [6];  			buffer [6] = temp;  			temp = buffer [2];  			buffer [2] = buffer [5];  			buffer [5] = temp;  			temp = buffer [3];  			buffer [3] = buffer [4];  			buffer [4] = temp;  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: unsafe {  	var dValue = (double)value;  	if (dValue == double.MaxValue)  		buffer = _demicalMax;  	else if (dValue == double.MinValue)  		buffer = _demicalMin;  	else {  		buffer = BitConverter.GetBytes (dValue);  		if (BitConverter.IsLittleEndian) {  			var temp = buffer [0];  			buffer [0] = buffer [7];  			buffer [7] = temp;  			temp = buffer [1];  			buffer [1] = buffer [6];  			buffer [6] = temp;  			temp = buffer [2];  			buffer [2] = buffer [5];  			buffer [5] = temp;  			temp = buffer [3];  			buffer [3] = buffer [4];  			buffer [4] = temp;  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: unsafe {  	var dValue = (double)value;  	if (dValue == double.MaxValue)  		buffer = _demicalMax;  	else if (dValue == double.MinValue)  		buffer = _demicalMin;  	else {  		buffer = BitConverter.GetBytes (dValue);  		if (BitConverter.IsLittleEndian) {  			var temp = buffer [0];  			buffer [0] = buffer [7];  			buffer [7] = temp;  			temp = buffer [1];  			buffer [1] = buffer [6];  			buffer [6] = temp;  			temp = buffer [2];  			buffer [2] = buffer [5];  			buffer [5] = temp;  			temp = buffer [3];  			buffer [3] = buffer [4];  			buffer [4] = temp;  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: unsafe {  	var dValue = (double)value;  	if (dValue == double.MaxValue)  		buffer = _demicalMax;  	else if (dValue == double.MinValue)  		buffer = _demicalMin;  	else {  		buffer = BitConverter.GetBytes (dValue);  		if (BitConverter.IsLittleEndian) {  			var temp = buffer [0];  			buffer [0] = buffer [7];  			buffer [7] = temp;  			temp = buffer [1];  			buffer [1] = buffer [6];  			buffer [6] = temp;  			temp = buffer [2];  			buffer [2] = buffer [5];  			buffer [5] = temp;  			temp = buffer [3];  			buffer [3] = buffer [4];  			buffer [4] = temp;  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: unsafe {  	var dValue = (double)value;  	if (dValue == double.MaxValue)  		buffer = _demicalMax;  	else if (dValue == double.MinValue)  		buffer = _demicalMin;  	else {  		buffer = BitConverter.GetBytes (dValue);  		if (BitConverter.IsLittleEndian) {  			var temp = buffer [0];  			buffer [0] = buffer [7];  			buffer [7] = temp;  			temp = buffer [1];  			buffer [1] = buffer [6];  			buffer [6] = temp;  			temp = buffer [2];  			buffer [2] = buffer [5];  			buffer [5] = temp;  			temp = buffer [3];  			buffer [3] = buffer [4];  			buffer [4] = temp;  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: unsafe {  	var dValue = (double)value;  	if (dValue == double.MaxValue)  		buffer = _demicalMax;  	else if (dValue == double.MinValue)  		buffer = _demicalMin;  	else {  		buffer = BitConverter.GetBytes (dValue);  		if (BitConverter.IsLittleEndian) {  			var temp = buffer [0];  			buffer [0] = buffer [7];  			buffer [7] = temp;  			temp = buffer [1];  			buffer [1] = buffer [6];  			buffer [6] = temp;  			temp = buffer [2];  			buffer [2] = buffer [5];  			buffer [5] = temp;  			temp = buffer [3];  			buffer [3] = buffer [4];  			buffer [4] = temp;  		}  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MaxValue)  	buffer = _demicalMax;  else if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MaxValue)  	buffer = _demicalMax;  else if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MaxValue)  	buffer = _demicalMax;  else if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MaxValue)  	buffer = _demicalMax;  else if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MaxValue)  	buffer = _demicalMax;  else if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MaxValue)  	buffer = _demicalMax;  else if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MaxValue)  	buffer = _demicalMax;  else if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MaxValue)  	buffer = _demicalMax;  else if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MaxValue)  	buffer = _demicalMax;  else if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MaxValue)  	buffer = _demicalMax;  else if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MaxValue)  	buffer = _demicalMax;  else if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MaxValue)  	buffer = _demicalMax;  else if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (dValue == double.MinValue)  	buffer = _demicalMin;  else {  	buffer = BitConverter.GetBytes (dValue);  	if (BitConverter.IsLittleEndian) {  		var temp = buffer [0];  		buffer [0] = buffer [7];  		buffer [7] = temp;  		temp = buffer [1];  		buffer [1] = buffer [6];  		buffer [6] = temp;  		temp = buffer [2];  		buffer [2] = buffer [5];  		buffer [5] = temp;  		temp = buffer [3];  		buffer [3] = buffer [4];  		buffer [4] = temp;  	}  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	var temp = buffer [0];  	buffer [0] = buffer [7];  	buffer [7] = temp;  	temp = buffer [1];  	buffer [1] = buffer [6];  	buffer [6] = temp;  	temp = buffer [2];  	buffer [2] = buffer [5];  	buffer [5] = temp;  	temp = buffer [3];  	buffer [3] = buffer [4];  	buffer [4] = temp;  }  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: buffer [0] = buffer [7];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: buffer [7] = temp;  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: buffer [1] = buffer [6];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: buffer [6] = temp;  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: temp = buffer [2];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: buffer [2] = buffer [5];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: buffer [2] = buffer [5];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: buffer [5] = temp;  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: temp = buffer [3];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: buffer [3] = buffer [4];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: buffer [3] = buffer [4];  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,WriteObjectToBuffer,The following statement contains a magic number: buffer [4] = temp;  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping [ObjectType] = new Dictionary<byte' Type> () {  	{  		1'  		StringType  	}'  	{  		2'  		typeof(int)  	}'  	{  		3'  		typeof(DateTime)  	}'  	{  		4'  		typeof(bool)  	}'  	{  		5'  		typeof(char)  	}'  	{  		6'  		typeof(double)  	}'  	{  		7'  		typeof(short)  	}'  	{  		8'  		typeof(long)  	}'  	{  		9'  		typeof(decimal)  	}'  	{  		10'  		typeof(float)  	}'  	{  		11'  		typeof(ushort)  	}'  	{  		12'  		typeof(uint)  	}'  	{  		13'  		typeof(ulong)  	}'  	{  		14'  		GuidType  	}'  	{  		15'  		typeof(Enum)  	}'  	{  		16'  		typeof(TimeSpan)  	}'  	{  		17'  		typeof(TimeSpan?)  	}'  	{  		18'  		typeof(int?)  	}'  	{  		19'  		VoidType  	}'  	{  		20'  		typeof(byte)  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping [ObjectType] = new Dictionary<byte' Type> () {  	{  		1'  		StringType  	}'  	{  		2'  		typeof(int)  	}'  	{  		3'  		typeof(DateTime)  	}'  	{  		4'  		typeof(bool)  	}'  	{  		5'  		typeof(char)  	}'  	{  		6'  		typeof(double)  	}'  	{  		7'  		typeof(short)  	}'  	{  		8'  		typeof(long)  	}'  	{  		9'  		typeof(decimal)  	}'  	{  		10'  		typeof(float)  	}'  	{  		11'  		typeof(ushort)  	}'  	{  		12'  		typeof(uint)  	}'  	{  		13'  		typeof(ulong)  	}'  	{  		14'  		GuidType  	}'  	{  		15'  		typeof(Enum)  	}'  	{  		16'  		typeof(TimeSpan)  	}'  	{  		17'  		typeof(TimeSpan?)  	}'  	{  		18'  		typeof(int?)  	}'  	{  		19'  		VoidType  	}'  	{  		20'  		typeof(byte)  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping [ObjectType] = new Dictionary<byte' Type> () {  	{  		1'  		StringType  	}'  	{  		2'  		typeof(int)  	}'  	{  		3'  		typeof(DateTime)  	}'  	{  		4'  		typeof(bool)  	}'  	{  		5'  		typeof(char)  	}'  	{  		6'  		typeof(double)  	}'  	{  		7'  		typeof(short)  	}'  	{  		8'  		typeof(long)  	}'  	{  		9'  		typeof(decimal)  	}'  	{  		10'  		typeof(float)  	}'  	{  		11'  		typeof(ushort)  	}'  	{  		12'  		typeof(uint)  	}'  	{  		13'  		typeof(ulong)  	}'  	{  		14'  		GuidType  	}'  	{  		15'  		typeof(Enum)  	}'  	{  		16'  		typeof(TimeSpan)  	}'  	{  		17'  		typeof(TimeSpan?)  	}'  	{  		18'  		typeof(int?)  	}'  	{  		19'  		VoidType  	}'  	{  		20'  		typeof(byte)  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping [ObjectType] = new Dictionary<byte' Type> () {  	{  		1'  		StringType  	}'  	{  		2'  		typeof(int)  	}'  	{  		3'  		typeof(DateTime)  	}'  	{  		4'  		typeof(bool)  	}'  	{  		5'  		typeof(char)  	}'  	{  		6'  		typeof(double)  	}'  	{  		7'  		typeof(short)  	}'  	{  		8'  		typeof(long)  	}'  	{  		9'  		typeof(decimal)  	}'  	{  		10'  		typeof(float)  	}'  	{  		11'  		typeof(ushort)  	}'  	{  		12'  		typeof(uint)  	}'  	{  		13'  		typeof(ulong)  	}'  	{  		14'  		GuidType  	}'  	{  		15'  		typeof(Enum)  	}'  	{  		16'  		typeof(TimeSpan)  	}'  	{  		17'  		typeof(TimeSpan?)  	}'  	{  		18'  		typeof(int?)  	}'  	{  		19'  		VoidType  	}'  	{  		20'  		typeof(byte)  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping [ObjectType] = new Dictionary<byte' Type> () {  	{  		1'  		StringType  	}'  	{  		2'  		typeof(int)  	}'  	{  		3'  		typeof(DateTime)  	}'  	{  		4'  		typeof(bool)  	}'  	{  		5'  		typeof(char)  	}'  	{  		6'  		typeof(double)  	}'  	{  		7'  		typeof(short)  	}'  	{  		8'  		typeof(long)  	}'  	{  		9'  		typeof(decimal)  	}'  	{  		10'  		typeof(float)  	}'  	{  		11'  		typeof(ushort)  	}'  	{  		12'  		typeof(uint)  	}'  	{  		13'  		typeof(ulong)  	}'  	{  		14'  		GuidType  	}'  	{  		15'  		typeof(Enum)  	}'  	{  		16'  		typeof(TimeSpan)  	}'  	{  		17'  		typeof(TimeSpan?)  	}'  	{  		18'  		typeof(int?)  	}'  	{  		19'  		VoidType  	}'  	{  		20'  		typeof(byte)  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping [ObjectType] = new Dictionary<byte' Type> () {  	{  		1'  		StringType  	}'  	{  		2'  		typeof(int)  	}'  	{  		3'  		typeof(DateTime)  	}'  	{  		4'  		typeof(bool)  	}'  	{  		5'  		typeof(char)  	}'  	{  		6'  		typeof(double)  	}'  	{  		7'  		typeof(short)  	}'  	{  		8'  		typeof(long)  	}'  	{  		9'  		typeof(decimal)  	}'  	{  		10'  		typeof(float)  	}'  	{  		11'  		typeof(ushort)  	}'  	{  		12'  		typeof(uint)  	}'  	{  		13'  		typeof(ulong)  	}'  	{  		14'  		GuidType  	}'  	{  		15'  		typeof(Enum)  	}'  	{  		16'  		typeof(TimeSpan)  	}'  	{  		17'  		typeof(TimeSpan?)  	}'  	{  		18'  		typeof(int?)  	}'  	{  		19'  		VoidType  	}'  	{  		20'  		typeof(byte)  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping [ObjectType] = new Dictionary<byte' Type> () {  	{  		1'  		StringType  	}'  	{  		2'  		typeof(int)  	}'  	{  		3'  		typeof(DateTime)  	}'  	{  		4'  		typeof(bool)  	}'  	{  		5'  		typeof(char)  	}'  	{  		6'  		typeof(double)  	}'  	{  		7'  		typeof(short)  	}'  	{  		8'  		typeof(long)  	}'  	{  		9'  		typeof(decimal)  	}'  	{  		10'  		typeof(float)  	}'  	{  		11'  		typeof(ushort)  	}'  	{  		12'  		typeof(uint)  	}'  	{  		13'  		typeof(ulong)  	}'  	{  		14'  		GuidType  	}'  	{  		15'  		typeof(Enum)  	}'  	{  		16'  		typeof(TimeSpan)  	}'  	{  		17'  		typeof(TimeSpan?)  	}'  	{  		18'  		typeof(int?)  	}'  	{  		19'  		VoidType  	}'  	{  		20'  		typeof(byte)  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping [ObjectType] = new Dictionary<byte' Type> () {  	{  		1'  		StringType  	}'  	{  		2'  		typeof(int)  	}'  	{  		3'  		typeof(DateTime)  	}'  	{  		4'  		typeof(bool)  	}'  	{  		5'  		typeof(char)  	}'  	{  		6'  		typeof(double)  	}'  	{  		7'  		typeof(short)  	}'  	{  		8'  		typeof(long)  	}'  	{  		9'  		typeof(decimal)  	}'  	{  		10'  		typeof(float)  	}'  	{  		11'  		typeof(ushort)  	}'  	{  		12'  		typeof(uint)  	}'  	{  		13'  		typeof(ulong)  	}'  	{  		14'  		GuidType  	}'  	{  		15'  		typeof(Enum)  	}'  	{  		16'  		typeof(TimeSpan)  	}'  	{  		17'  		typeof(TimeSpan?)  	}'  	{  		18'  		typeof(int?)  	}'  	{  		19'  		VoidType  	}'  	{  		20'  		typeof(byte)  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping [ObjectType] = new Dictionary<byte' Type> () {  	{  		1'  		StringType  	}'  	{  		2'  		typeof(int)  	}'  	{  		3'  		typeof(DateTime)  	}'  	{  		4'  		typeof(bool)  	}'  	{  		5'  		typeof(char)  	}'  	{  		6'  		typeof(double)  	}'  	{  		7'  		typeof(short)  	}'  	{  		8'  		typeof(long)  	}'  	{  		9'  		typeof(decimal)  	}'  	{  		10'  		typeof(float)  	}'  	{  		11'  		typeof(ushort)  	}'  	{  		12'  		typeof(uint)  	}'  	{  		13'  		typeof(ulong)  	}'  	{  		14'  		GuidType  	}'  	{  		15'  		typeof(Enum)  	}'  	{  		16'  		typeof(TimeSpan)  	}'  	{  		17'  		typeof(TimeSpan?)  	}'  	{  		18'  		typeof(int?)  	}'  	{  		19'  		VoidType  	}'  	{  		20'  		typeof(byte)  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping [ObjectType] = new Dictionary<byte' Type> () {  	{  		1'  		StringType  	}'  	{  		2'  		typeof(int)  	}'  	{  		3'  		typeof(DateTime)  	}'  	{  		4'  		typeof(bool)  	}'  	{  		5'  		typeof(char)  	}'  	{  		6'  		typeof(double)  	}'  	{  		7'  		typeof(short)  	}'  	{  		8'  		typeof(long)  	}'  	{  		9'  		typeof(decimal)  	}'  	{  		10'  		typeof(float)  	}'  	{  		11'  		typeof(ushort)  	}'  	{  		12'  		typeof(uint)  	}'  	{  		13'  		typeof(ulong)  	}'  	{  		14'  		GuidType  	}'  	{  		15'  		typeof(Enum)  	}'  	{  		16'  		typeof(TimeSpan)  	}'  	{  		17'  		typeof(TimeSpan?)  	}'  	{  		18'  		typeof(int?)  	}'  	{  		19'  		VoidType  	}'  	{  		20'  		typeof(byte)  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping [ObjectType] = new Dictionary<byte' Type> () {  	{  		1'  		StringType  	}'  	{  		2'  		typeof(int)  	}'  	{  		3'  		typeof(DateTime)  	}'  	{  		4'  		typeof(bool)  	}'  	{  		5'  		typeof(char)  	}'  	{  		6'  		typeof(double)  	}'  	{  		7'  		typeof(short)  	}'  	{  		8'  		typeof(long)  	}'  	{  		9'  		typeof(decimal)  	}'  	{  		10'  		typeof(float)  	}'  	{  		11'  		typeof(ushort)  	}'  	{  		12'  		typeof(uint)  	}'  	{  		13'  		typeof(ulong)  	}'  	{  		14'  		GuidType  	}'  	{  		15'  		typeof(Enum)  	}'  	{  		16'  		typeof(TimeSpan)  	}'  	{  		17'  		typeof(TimeSpan?)  	}'  	{  		18'  		typeof(int?)  	}'  	{  		19'  		VoidType  	}'  	{  		20'  		typeof(byte)  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping [ObjectType] = new Dictionary<byte' Type> () {  	{  		1'  		StringType  	}'  	{  		2'  		typeof(int)  	}'  	{  		3'  		typeof(DateTime)  	}'  	{  		4'  		typeof(bool)  	}'  	{  		5'  		typeof(char)  	}'  	{  		6'  		typeof(double)  	}'  	{  		7'  		typeof(short)  	}'  	{  		8'  		typeof(long)  	}'  	{  		9'  		typeof(decimal)  	}'  	{  		10'  		typeof(float)  	}'  	{  		11'  		typeof(ushort)  	}'  	{  		12'  		typeof(uint)  	}'  	{  		13'  		typeof(ulong)  	}'  	{  		14'  		GuidType  	}'  	{  		15'  		typeof(Enum)  	}'  	{  		16'  		typeof(TimeSpan)  	}'  	{  		17'  		typeof(TimeSpan?)  	}'  	{  		18'  		typeof(int?)  	}'  	{  		19'  		VoidType  	}'  	{  		20'  		typeof(byte)  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping [ObjectType] = new Dictionary<byte' Type> () {  	{  		1'  		StringType  	}'  	{  		2'  		typeof(int)  	}'  	{  		3'  		typeof(DateTime)  	}'  	{  		4'  		typeof(bool)  	}'  	{  		5'  		typeof(char)  	}'  	{  		6'  		typeof(double)  	}'  	{  		7'  		typeof(short)  	}'  	{  		8'  		typeof(long)  	}'  	{  		9'  		typeof(decimal)  	}'  	{  		10'  		typeof(float)  	}'  	{  		11'  		typeof(ushort)  	}'  	{  		12'  		typeof(uint)  	}'  	{  		13'  		typeof(ulong)  	}'  	{  		14'  		GuidType  	}'  	{  		15'  		typeof(Enum)  	}'  	{  		16'  		typeof(TimeSpan)  	}'  	{  		17'  		typeof(TimeSpan?)  	}'  	{  		18'  		typeof(int?)  	}'  	{  		19'  		VoidType  	}'  	{  		20'  		typeof(byte)  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping [ObjectType] = new Dictionary<byte' Type> () {  	{  		1'  		StringType  	}'  	{  		2'  		typeof(int)  	}'  	{  		3'  		typeof(DateTime)  	}'  	{  		4'  		typeof(bool)  	}'  	{  		5'  		typeof(char)  	}'  	{  		6'  		typeof(double)  	}'  	{  		7'  		typeof(short)  	}'  	{  		8'  		typeof(long)  	}'  	{  		9'  		typeof(decimal)  	}'  	{  		10'  		typeof(float)  	}'  	{  		11'  		typeof(ushort)  	}'  	{  		12'  		typeof(uint)  	}'  	{  		13'  		typeof(ulong)  	}'  	{  		14'  		GuidType  	}'  	{  		15'  		typeof(Enum)  	}'  	{  		16'  		typeof(TimeSpan)  	}'  	{  		17'  		typeof(TimeSpan?)  	}'  	{  		18'  		typeof(int?)  	}'  	{  		19'  		VoidType  	}'  	{  		20'  		typeof(byte)  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping [ObjectType] = new Dictionary<byte' Type> () {  	{  		1'  		StringType  	}'  	{  		2'  		typeof(int)  	}'  	{  		3'  		typeof(DateTime)  	}'  	{  		4'  		typeof(bool)  	}'  	{  		5'  		typeof(char)  	}'  	{  		6'  		typeof(double)  	}'  	{  		7'  		typeof(short)  	}'  	{  		8'  		typeof(long)  	}'  	{  		9'  		typeof(decimal)  	}'  	{  		10'  		typeof(float)  	}'  	{  		11'  		typeof(ushort)  	}'  	{  		12'  		typeof(uint)  	}'  	{  		13'  		typeof(ulong)  	}'  	{  		14'  		GuidType  	}'  	{  		15'  		typeof(Enum)  	}'  	{  		16'  		typeof(TimeSpan)  	}'  	{  		17'  		typeof(TimeSpan?)  	}'  	{  		18'  		typeof(int?)  	}'  	{  		19'  		VoidType  	}'  	{  		20'  		typeof(byte)  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping [ObjectType] = new Dictionary<byte' Type> () {  	{  		1'  		StringType  	}'  	{  		2'  		typeof(int)  	}'  	{  		3'  		typeof(DateTime)  	}'  	{  		4'  		typeof(bool)  	}'  	{  		5'  		typeof(char)  	}'  	{  		6'  		typeof(double)  	}'  	{  		7'  		typeof(short)  	}'  	{  		8'  		typeof(long)  	}'  	{  		9'  		typeof(decimal)  	}'  	{  		10'  		typeof(float)  	}'  	{  		11'  		typeof(ushort)  	}'  	{  		12'  		typeof(uint)  	}'  	{  		13'  		typeof(ulong)  	}'  	{  		14'  		GuidType  	}'  	{  		15'  		typeof(Enum)  	}'  	{  		16'  		typeof(TimeSpan)  	}'  	{  		17'  		typeof(TimeSpan?)  	}'  	{  		18'  		typeof(int?)  	}'  	{  		19'  		VoidType  	}'  	{  		20'  		typeof(byte)  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping [ObjectType] = new Dictionary<byte' Type> () {  	{  		1'  		StringType  	}'  	{  		2'  		typeof(int)  	}'  	{  		3'  		typeof(DateTime)  	}'  	{  		4'  		typeof(bool)  	}'  	{  		5'  		typeof(char)  	}'  	{  		6'  		typeof(double)  	}'  	{  		7'  		typeof(short)  	}'  	{  		8'  		typeof(long)  	}'  	{  		9'  		typeof(decimal)  	}'  	{  		10'  		typeof(float)  	}'  	{  		11'  		typeof(ushort)  	}'  	{  		12'  		typeof(uint)  	}'  	{  		13'  		typeof(ulong)  	}'  	{  		14'  		GuidType  	}'  	{  		15'  		typeof(Enum)  	}'  	{  		16'  		typeof(TimeSpan)  	}'  	{  		17'  		typeof(TimeSpan?)  	}'  	{  		18'  		typeof(int?)  	}'  	{  		19'  		VoidType  	}'  	{  		20'  		typeof(byte)  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping [ObjectType] = new Dictionary<byte' Type> () {  	{  		1'  		StringType  	}'  	{  		2'  		typeof(int)  	}'  	{  		3'  		typeof(DateTime)  	}'  	{  		4'  		typeof(bool)  	}'  	{  		5'  		typeof(char)  	}'  	{  		6'  		typeof(double)  	}'  	{  		7'  		typeof(short)  	}'  	{  		8'  		typeof(long)  	}'  	{  		9'  		typeof(decimal)  	}'  	{  		10'  		typeof(float)  	}'  	{  		11'  		typeof(ushort)  	}'  	{  		12'  		typeof(uint)  	}'  	{  		13'  		typeof(ulong)  	}'  	{  		14'  		GuidType  	}'  	{  		15'  		typeof(Enum)  	}'  	{  		16'  		typeof(TimeSpan)  	}'  	{  		17'  		typeof(TimeSpan?)  	}'  	{  		18'  		typeof(int?)  	}'  	{  		19'  		VoidType  	}'  	{  		20'  		typeof(byte)  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeIDMapping [ObjectType] = new Dictionary<byte' Type> () {  	{  		1'  		StringType  	}'  	{  		2'  		typeof(int)  	}'  	{  		3'  		typeof(DateTime)  	}'  	{  		4'  		typeof(bool)  	}'  	{  		5'  		typeof(char)  	}'  	{  		6'  		typeof(double)  	}'  	{  		7'  		typeof(short)  	}'  	{  		8'  		typeof(long)  	}'  	{  		9'  		typeof(decimal)  	}'  	{  		10'  		typeof(float)  	}'  	{  		11'  		typeof(ushort)  	}'  	{  		12'  		typeof(uint)  	}'  	{  		13'  		typeof(ulong)  	}'  	{  		14'  		GuidType  	}'  	{  		15'  		typeof(Enum)  	}'  	{  		16'  		typeof(TimeSpan)  	}'  	{  		17'  		typeof(TimeSpan?)  	}'  	{  		18'  		typeof(int?)  	}'  	{  		19'  		VoidType  	}'  	{  		20'  		typeof(byte)  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping [ObjectType] = new Dictionary<Type' byte> () {  	{  		StringType'  		1  	}'  	{  		typeof(int)'  		2  	}'  	{  		typeof(DateTime)'  		3  	}'  	{  		typeof(bool)'  		4  	}'  	{  		typeof(char)'  		5  	}'  	{  		typeof(double)'  		6  	}'  	{  		typeof(short)'  		7  	}'  	{  		typeof(long)'  		8  	}'  	{  		typeof(decimal)'  		9  	}'  	{  		typeof(float)'  		10  	}'  	{  		typeof(ushort)'  		11  	}'  	{  		typeof(uint)'  		12  	}'  	{  		typeof(ulong)'  		13  	}'  	{  		GuidType'  		14  	}'  	{  		typeof(Enum)'  		15  	}'  	{  		typeof(TimeSpan)'  		16  	}'  	{  		typeof(TimeSpan?)'  		17  	}'  	{  		typeof(int?)'  		18  	}'  	{  		VoidType'  		19  	}'  	{  		typeof(byte)'  		20  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping [ObjectType] = new Dictionary<Type' byte> () {  	{  		StringType'  		1  	}'  	{  		typeof(int)'  		2  	}'  	{  		typeof(DateTime)'  		3  	}'  	{  		typeof(bool)'  		4  	}'  	{  		typeof(char)'  		5  	}'  	{  		typeof(double)'  		6  	}'  	{  		typeof(short)'  		7  	}'  	{  		typeof(long)'  		8  	}'  	{  		typeof(decimal)'  		9  	}'  	{  		typeof(float)'  		10  	}'  	{  		typeof(ushort)'  		11  	}'  	{  		typeof(uint)'  		12  	}'  	{  		typeof(ulong)'  		13  	}'  	{  		GuidType'  		14  	}'  	{  		typeof(Enum)'  		15  	}'  	{  		typeof(TimeSpan)'  		16  	}'  	{  		typeof(TimeSpan?)'  		17  	}'  	{  		typeof(int?)'  		18  	}'  	{  		VoidType'  		19  	}'  	{  		typeof(byte)'  		20  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping [ObjectType] = new Dictionary<Type' byte> () {  	{  		StringType'  		1  	}'  	{  		typeof(int)'  		2  	}'  	{  		typeof(DateTime)'  		3  	}'  	{  		typeof(bool)'  		4  	}'  	{  		typeof(char)'  		5  	}'  	{  		typeof(double)'  		6  	}'  	{  		typeof(short)'  		7  	}'  	{  		typeof(long)'  		8  	}'  	{  		typeof(decimal)'  		9  	}'  	{  		typeof(float)'  		10  	}'  	{  		typeof(ushort)'  		11  	}'  	{  		typeof(uint)'  		12  	}'  	{  		typeof(ulong)'  		13  	}'  	{  		GuidType'  		14  	}'  	{  		typeof(Enum)'  		15  	}'  	{  		typeof(TimeSpan)'  		16  	}'  	{  		typeof(TimeSpan?)'  		17  	}'  	{  		typeof(int?)'  		18  	}'  	{  		VoidType'  		19  	}'  	{  		typeof(byte)'  		20  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping [ObjectType] = new Dictionary<Type' byte> () {  	{  		StringType'  		1  	}'  	{  		typeof(int)'  		2  	}'  	{  		typeof(DateTime)'  		3  	}'  	{  		typeof(bool)'  		4  	}'  	{  		typeof(char)'  		5  	}'  	{  		typeof(double)'  		6  	}'  	{  		typeof(short)'  		7  	}'  	{  		typeof(long)'  		8  	}'  	{  		typeof(decimal)'  		9  	}'  	{  		typeof(float)'  		10  	}'  	{  		typeof(ushort)'  		11  	}'  	{  		typeof(uint)'  		12  	}'  	{  		typeof(ulong)'  		13  	}'  	{  		GuidType'  		14  	}'  	{  		typeof(Enum)'  		15  	}'  	{  		typeof(TimeSpan)'  		16  	}'  	{  		typeof(TimeSpan?)'  		17  	}'  	{  		typeof(int?)'  		18  	}'  	{  		VoidType'  		19  	}'  	{  		typeof(byte)'  		20  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping [ObjectType] = new Dictionary<Type' byte> () {  	{  		StringType'  		1  	}'  	{  		typeof(int)'  		2  	}'  	{  		typeof(DateTime)'  		3  	}'  	{  		typeof(bool)'  		4  	}'  	{  		typeof(char)'  		5  	}'  	{  		typeof(double)'  		6  	}'  	{  		typeof(short)'  		7  	}'  	{  		typeof(long)'  		8  	}'  	{  		typeof(decimal)'  		9  	}'  	{  		typeof(float)'  		10  	}'  	{  		typeof(ushort)'  		11  	}'  	{  		typeof(uint)'  		12  	}'  	{  		typeof(ulong)'  		13  	}'  	{  		GuidType'  		14  	}'  	{  		typeof(Enum)'  		15  	}'  	{  		typeof(TimeSpan)'  		16  	}'  	{  		typeof(TimeSpan?)'  		17  	}'  	{  		typeof(int?)'  		18  	}'  	{  		VoidType'  		19  	}'  	{  		typeof(byte)'  		20  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping [ObjectType] = new Dictionary<Type' byte> () {  	{  		StringType'  		1  	}'  	{  		typeof(int)'  		2  	}'  	{  		typeof(DateTime)'  		3  	}'  	{  		typeof(bool)'  		4  	}'  	{  		typeof(char)'  		5  	}'  	{  		typeof(double)'  		6  	}'  	{  		typeof(short)'  		7  	}'  	{  		typeof(long)'  		8  	}'  	{  		typeof(decimal)'  		9  	}'  	{  		typeof(float)'  		10  	}'  	{  		typeof(ushort)'  		11  	}'  	{  		typeof(uint)'  		12  	}'  	{  		typeof(ulong)'  		13  	}'  	{  		GuidType'  		14  	}'  	{  		typeof(Enum)'  		15  	}'  	{  		typeof(TimeSpan)'  		16  	}'  	{  		typeof(TimeSpan?)'  		17  	}'  	{  		typeof(int?)'  		18  	}'  	{  		VoidType'  		19  	}'  	{  		typeof(byte)'  		20  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping [ObjectType] = new Dictionary<Type' byte> () {  	{  		StringType'  		1  	}'  	{  		typeof(int)'  		2  	}'  	{  		typeof(DateTime)'  		3  	}'  	{  		typeof(bool)'  		4  	}'  	{  		typeof(char)'  		5  	}'  	{  		typeof(double)'  		6  	}'  	{  		typeof(short)'  		7  	}'  	{  		typeof(long)'  		8  	}'  	{  		typeof(decimal)'  		9  	}'  	{  		typeof(float)'  		10  	}'  	{  		typeof(ushort)'  		11  	}'  	{  		typeof(uint)'  		12  	}'  	{  		typeof(ulong)'  		13  	}'  	{  		GuidType'  		14  	}'  	{  		typeof(Enum)'  		15  	}'  	{  		typeof(TimeSpan)'  		16  	}'  	{  		typeof(TimeSpan?)'  		17  	}'  	{  		typeof(int?)'  		18  	}'  	{  		VoidType'  		19  	}'  	{  		typeof(byte)'  		20  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping [ObjectType] = new Dictionary<Type' byte> () {  	{  		StringType'  		1  	}'  	{  		typeof(int)'  		2  	}'  	{  		typeof(DateTime)'  		3  	}'  	{  		typeof(bool)'  		4  	}'  	{  		typeof(char)'  		5  	}'  	{  		typeof(double)'  		6  	}'  	{  		typeof(short)'  		7  	}'  	{  		typeof(long)'  		8  	}'  	{  		typeof(decimal)'  		9  	}'  	{  		typeof(float)'  		10  	}'  	{  		typeof(ushort)'  		11  	}'  	{  		typeof(uint)'  		12  	}'  	{  		typeof(ulong)'  		13  	}'  	{  		GuidType'  		14  	}'  	{  		typeof(Enum)'  		15  	}'  	{  		typeof(TimeSpan)'  		16  	}'  	{  		typeof(TimeSpan?)'  		17  	}'  	{  		typeof(int?)'  		18  	}'  	{  		VoidType'  		19  	}'  	{  		typeof(byte)'  		20  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping [ObjectType] = new Dictionary<Type' byte> () {  	{  		StringType'  		1  	}'  	{  		typeof(int)'  		2  	}'  	{  		typeof(DateTime)'  		3  	}'  	{  		typeof(bool)'  		4  	}'  	{  		typeof(char)'  		5  	}'  	{  		typeof(double)'  		6  	}'  	{  		typeof(short)'  		7  	}'  	{  		typeof(long)'  		8  	}'  	{  		typeof(decimal)'  		9  	}'  	{  		typeof(float)'  		10  	}'  	{  		typeof(ushort)'  		11  	}'  	{  		typeof(uint)'  		12  	}'  	{  		typeof(ulong)'  		13  	}'  	{  		GuidType'  		14  	}'  	{  		typeof(Enum)'  		15  	}'  	{  		typeof(TimeSpan)'  		16  	}'  	{  		typeof(TimeSpan?)'  		17  	}'  	{  		typeof(int?)'  		18  	}'  	{  		VoidType'  		19  	}'  	{  		typeof(byte)'  		20  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping [ObjectType] = new Dictionary<Type' byte> () {  	{  		StringType'  		1  	}'  	{  		typeof(int)'  		2  	}'  	{  		typeof(DateTime)'  		3  	}'  	{  		typeof(bool)'  		4  	}'  	{  		typeof(char)'  		5  	}'  	{  		typeof(double)'  		6  	}'  	{  		typeof(short)'  		7  	}'  	{  		typeof(long)'  		8  	}'  	{  		typeof(decimal)'  		9  	}'  	{  		typeof(float)'  		10  	}'  	{  		typeof(ushort)'  		11  	}'  	{  		typeof(uint)'  		12  	}'  	{  		typeof(ulong)'  		13  	}'  	{  		GuidType'  		14  	}'  	{  		typeof(Enum)'  		15  	}'  	{  		typeof(TimeSpan)'  		16  	}'  	{  		typeof(TimeSpan?)'  		17  	}'  	{  		typeof(int?)'  		18  	}'  	{  		VoidType'  		19  	}'  	{  		typeof(byte)'  		20  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping [ObjectType] = new Dictionary<Type' byte> () {  	{  		StringType'  		1  	}'  	{  		typeof(int)'  		2  	}'  	{  		typeof(DateTime)'  		3  	}'  	{  		typeof(bool)'  		4  	}'  	{  		typeof(char)'  		5  	}'  	{  		typeof(double)'  		6  	}'  	{  		typeof(short)'  		7  	}'  	{  		typeof(long)'  		8  	}'  	{  		typeof(decimal)'  		9  	}'  	{  		typeof(float)'  		10  	}'  	{  		typeof(ushort)'  		11  	}'  	{  		typeof(uint)'  		12  	}'  	{  		typeof(ulong)'  		13  	}'  	{  		GuidType'  		14  	}'  	{  		typeof(Enum)'  		15  	}'  	{  		typeof(TimeSpan)'  		16  	}'  	{  		typeof(TimeSpan?)'  		17  	}'  	{  		typeof(int?)'  		18  	}'  	{  		VoidType'  		19  	}'  	{  		typeof(byte)'  		20  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping [ObjectType] = new Dictionary<Type' byte> () {  	{  		StringType'  		1  	}'  	{  		typeof(int)'  		2  	}'  	{  		typeof(DateTime)'  		3  	}'  	{  		typeof(bool)'  		4  	}'  	{  		typeof(char)'  		5  	}'  	{  		typeof(double)'  		6  	}'  	{  		typeof(short)'  		7  	}'  	{  		typeof(long)'  		8  	}'  	{  		typeof(decimal)'  		9  	}'  	{  		typeof(float)'  		10  	}'  	{  		typeof(ushort)'  		11  	}'  	{  		typeof(uint)'  		12  	}'  	{  		typeof(ulong)'  		13  	}'  	{  		GuidType'  		14  	}'  	{  		typeof(Enum)'  		15  	}'  	{  		typeof(TimeSpan)'  		16  	}'  	{  		typeof(TimeSpan?)'  		17  	}'  	{  		typeof(int?)'  		18  	}'  	{  		VoidType'  		19  	}'  	{  		typeof(byte)'  		20  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping [ObjectType] = new Dictionary<Type' byte> () {  	{  		StringType'  		1  	}'  	{  		typeof(int)'  		2  	}'  	{  		typeof(DateTime)'  		3  	}'  	{  		typeof(bool)'  		4  	}'  	{  		typeof(char)'  		5  	}'  	{  		typeof(double)'  		6  	}'  	{  		typeof(short)'  		7  	}'  	{  		typeof(long)'  		8  	}'  	{  		typeof(decimal)'  		9  	}'  	{  		typeof(float)'  		10  	}'  	{  		typeof(ushort)'  		11  	}'  	{  		typeof(uint)'  		12  	}'  	{  		typeof(ulong)'  		13  	}'  	{  		GuidType'  		14  	}'  	{  		typeof(Enum)'  		15  	}'  	{  		typeof(TimeSpan)'  		16  	}'  	{  		typeof(TimeSpan?)'  		17  	}'  	{  		typeof(int?)'  		18  	}'  	{  		VoidType'  		19  	}'  	{  		typeof(byte)'  		20  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping [ObjectType] = new Dictionary<Type' byte> () {  	{  		StringType'  		1  	}'  	{  		typeof(int)'  		2  	}'  	{  		typeof(DateTime)'  		3  	}'  	{  		typeof(bool)'  		4  	}'  	{  		typeof(char)'  		5  	}'  	{  		typeof(double)'  		6  	}'  	{  		typeof(short)'  		7  	}'  	{  		typeof(long)'  		8  	}'  	{  		typeof(decimal)'  		9  	}'  	{  		typeof(float)'  		10  	}'  	{  		typeof(ushort)'  		11  	}'  	{  		typeof(uint)'  		12  	}'  	{  		typeof(ulong)'  		13  	}'  	{  		GuidType'  		14  	}'  	{  		typeof(Enum)'  		15  	}'  	{  		typeof(TimeSpan)'  		16  	}'  	{  		typeof(TimeSpan?)'  		17  	}'  	{  		typeof(int?)'  		18  	}'  	{  		VoidType'  		19  	}'  	{  		typeof(byte)'  		20  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping [ObjectType] = new Dictionary<Type' byte> () {  	{  		StringType'  		1  	}'  	{  		typeof(int)'  		2  	}'  	{  		typeof(DateTime)'  		3  	}'  	{  		typeof(bool)'  		4  	}'  	{  		typeof(char)'  		5  	}'  	{  		typeof(double)'  		6  	}'  	{  		typeof(short)'  		7  	}'  	{  		typeof(long)'  		8  	}'  	{  		typeof(decimal)'  		9  	}'  	{  		typeof(float)'  		10  	}'  	{  		typeof(ushort)'  		11  	}'  	{  		typeof(uint)'  		12  	}'  	{  		typeof(ulong)'  		13  	}'  	{  		GuidType'  		14  	}'  	{  		typeof(Enum)'  		15  	}'  	{  		typeof(TimeSpan)'  		16  	}'  	{  		typeof(TimeSpan?)'  		17  	}'  	{  		typeof(int?)'  		18  	}'  	{  		VoidType'  		19  	}'  	{  		typeof(byte)'  		20  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping [ObjectType] = new Dictionary<Type' byte> () {  	{  		StringType'  		1  	}'  	{  		typeof(int)'  		2  	}'  	{  		typeof(DateTime)'  		3  	}'  	{  		typeof(bool)'  		4  	}'  	{  		typeof(char)'  		5  	}'  	{  		typeof(double)'  		6  	}'  	{  		typeof(short)'  		7  	}'  	{  		typeof(long)'  		8  	}'  	{  		typeof(decimal)'  		9  	}'  	{  		typeof(float)'  		10  	}'  	{  		typeof(ushort)'  		11  	}'  	{  		typeof(uint)'  		12  	}'  	{  		typeof(ulong)'  		13  	}'  	{  		GuidType'  		14  	}'  	{  		typeof(Enum)'  		15  	}'  	{  		typeof(TimeSpan)'  		16  	}'  	{  		typeof(TimeSpan?)'  		17  	}'  	{  		typeof(int?)'  		18  	}'  	{  		VoidType'  		19  	}'  	{  		typeof(byte)'  		20  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping [ObjectType] = new Dictionary<Type' byte> () {  	{  		StringType'  		1  	}'  	{  		typeof(int)'  		2  	}'  	{  		typeof(DateTime)'  		3  	}'  	{  		typeof(bool)'  		4  	}'  	{  		typeof(char)'  		5  	}'  	{  		typeof(double)'  		6  	}'  	{  		typeof(short)'  		7  	}'  	{  		typeof(long)'  		8  	}'  	{  		typeof(decimal)'  		9  	}'  	{  		typeof(float)'  		10  	}'  	{  		typeof(ushort)'  		11  	}'  	{  		typeof(uint)'  		12  	}'  	{  		typeof(ulong)'  		13  	}'  	{  		GuidType'  		14  	}'  	{  		typeof(Enum)'  		15  	}'  	{  		typeof(TimeSpan)'  		16  	}'  	{  		typeof(TimeSpan?)'  		17  	}'  	{  		typeof(int?)'  		18  	}'  	{  		VoidType'  		19  	}'  	{  		typeof(byte)'  		20  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping [ObjectType] = new Dictionary<Type' byte> () {  	{  		StringType'  		1  	}'  	{  		typeof(int)'  		2  	}'  	{  		typeof(DateTime)'  		3  	}'  	{  		typeof(bool)'  		4  	}'  	{  		typeof(char)'  		5  	}'  	{  		typeof(double)'  		6  	}'  	{  		typeof(short)'  		7  	}'  	{  		typeof(long)'  		8  	}'  	{  		typeof(decimal)'  		9  	}'  	{  		typeof(float)'  		10  	}'  	{  		typeof(ushort)'  		11  	}'  	{  		typeof(uint)'  		12  	}'  	{  		typeof(ulong)'  		13  	}'  	{  		GuidType'  		14  	}'  	{  		typeof(Enum)'  		15  	}'  	{  		typeof(TimeSpan)'  		16  	}'  	{  		typeof(TimeSpan?)'  		17  	}'  	{  		typeof(int?)'  		18  	}'  	{  		VoidType'  		19  	}'  	{  		typeof(byte)'  		20  	}  };  
Magic Number,MessageShark,CustomBinary,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBinary.cs,RegisterObjectTypeMapping,The following statement contains a magic number: TypeMapping [ObjectType] = new Dictionary<Type' byte> () {  	{  		StringType'  		1  	}'  	{  		typeof(int)'  		2  	}'  	{  		typeof(DateTime)'  		3  	}'  	{  		typeof(bool)'  		4  	}'  	{  		typeof(char)'  		5  	}'  	{  		typeof(double)'  		6  	}'  	{  		typeof(short)'  		7  	}'  	{  		typeof(long)'  		8  	}'  	{  		typeof(decimal)'  		9  	}'  	{  		typeof(float)'  		10  	}'  	{  		typeof(ushort)'  		11  	}'  	{  		typeof(uint)'  		12  	}'  	{  		typeof(ulong)'  		13  	}'  	{  		GuidType'  		14  	}'  	{  		typeof(Enum)'  		15  	}'  	{  		typeof(TimeSpan)'  		16  	}'  	{  		typeof(TimeSpan?)'  		17  	}'  	{  		typeof(int?)'  		18  	}'  	{  		VoidType'  		19  	}'  	{  		typeof(byte)'  		20  	}  };  
Magic Number,MessageShark,CustomBuffer,D:\newReposJune17\rpgmaker_MessageShark\src\MessageShark\MessageShark\CustomBuffer.cs,Write,The following statement contains a magic number: if (count <= 8 && buffer != _buffer) {  	var size2 = count;  	while (--size2 >= 0)  		_buffer [_position + size2] = buffer [size2];  } else  	Buffer.BlockCopy (buffer' 0' _buffer' _position' count);  
