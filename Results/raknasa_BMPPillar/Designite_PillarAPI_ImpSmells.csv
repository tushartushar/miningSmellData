Implementation smell,Namespace,Class,File,Method,Description
Long Method,PillarAPI.RequestResponses,DeleteFile,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\DeleteFile.cs,ProcessRequest,The method has 113 lines of code.
Long Method,Internal,PocoData,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,GetFactory,The method has 183 lines of code.
Complex Method,PillarAPI,PillarMonitor,C:\repos\raknasa_BMPPillar\taskPillar\PillarMonitor.cs,DoWork,Cyclomatic complexity of the method is 8
Complex Method,PillarAPI,IOC,C:\repos\raknasa_BMPPillar\taskPillar\IOC.cs,BootstrapContainer,Cyclomatic complexity of the method is 15
Complex Method,PillarAPI,IdentifyPillarsGeneralTopicListener,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyPillarsGeneralTopicListener.cs,MakeIdentifyResponse,Cyclomatic complexity of the method is 27
Complex Method,PillarAPI,PillarQueueListener,C:\repos\raknasa_BMPPillar\taskPillar\PillarQueueListener.cs,ExecuteRequest,Cyclomatic complexity of the method is 28
Complex Method,PillarAPI.RequestResponses,PutFileWithWebDav,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\PutFileWithWebDav.cs,MoveFileFromWebDavToLocalDirectoryNew,Cyclomatic complexity of the method is 10
Complex Method,PillarAPI.RequestResponses,ChecksumGetChecksum,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\ChecksumGetChecksum.cs,ProcessRequest,Cyclomatic complexity of the method is 8
Complex Method,PillarAPI.RequestResponses,GetAuditTrail,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\GetAuditTrail.cs,ProcessRequest,Cyclomatic complexity of the method is 13
Complex Method,PillarAPI.RequestResponses,GetChecksum,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\GetChecksum.cs,ProcessRequest,Cyclomatic complexity of the method is 9
Complex Method,PillarAPI.RequestResponses,GetFileId,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\GetFileID.cs,ProcessRequest,Cyclomatic complexity of the method is 8
Complex Method,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,AddParam,Cyclomatic complexity of the method is 12
Complex Method,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,Query,Cyclomatic complexity of the method is 10
Complex Method,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,Insert,Cyclomatic complexity of the method is 11
Complex Method,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,Update,Cyclomatic complexity of the method is 14
Complex Method,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,Query,Cyclomatic complexity of the method is 13
Complex Method,PillarAPI.Utilities,ChecksumUtilities,C:\repos\raknasa_BMPPillar\taskPillar\Utilities\ChecksumUtilities.cs,CalculateChecksum,Cyclomatic complexity of the method is 32
Complex Method,PillarAPI.Utilities,CollectedUtilities,C:\repos\raknasa_BMPPillar\taskPillar\Utilities\CollectedUtilities.cs,InsertChecksum,Cyclomatic complexity of the method is 8
Long Parameter List,PillarAPI,PillarWrapper,C:\repos\raknasa_BMPPillar\taskPillar\PillarWrapper.cs,PillarWrapper,The method has 7 parameters.
Long Parameter List,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,BuildPageQueries,The method has 6 parameters.
Long Parameter List,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,Page,The method has 6 parameters.
Long Parameter List,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,Update,The method has 5 parameters.
Long Parameter List,Internal,MultiPocoFactory,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,FindSplitPoint,The method has 6 parameters.
Long Parameter List,Internal,PocoData,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,GetFactory,The method has 6 parameters.
Long Parameter List,Internal,PocoData,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,GetConverter,The method has 8 parameters.
Long Parameter List,PillarAPI.Utilities,CollectedUtilities,C:\repos\raknasa_BMPPillar\taskPillar\Utilities\CollectedUtilities.cs,InsertAudit,The method has 6 parameters.
Long Identifier,PillarAPI.IdentifyResponses,ResponseBuilderForIdentifyContributorsForGetStatusRequest,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyResponses\ResponseBuilderForIdentifyContributorsForGetStatusRequest.cs,MakeResponse,The length of the parameter receivedIdentifyContributorsForGetStatusRequest is 47.
Long Identifier,PillarAPI.IdentifyResponses,ResponseBuilderForIdentifyContributorsForGetAuditTrailsRequest,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyResponses\ResponseBuilderForIdentifyContributorsForGetAuditTrailsRequest.cs,MakeResponse,The length of the parameter receivedIdentifyPillarsForDeleteFileRequest is 43.
Long Identifier,PillarAPI.IdentifyResponses,ResponseBuilderForIdentifyPillarsForGetFileRequest,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyResponses\ResponseBuilderForIdentifyPillarsForGetFileRequest.cs,SendResponse,The length of the parameter identifyPillarsForGetFileResponse is 33.
Long Identifier,PillarAPI.IdentifyResponses,ResponseBuilderForIdentifyPillarsForGetFileRequest,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyResponses\ResponseBuilderForIdentifyPillarsForGetFileRequest.cs,MakeResponse,The length of the parameter receivedIdentifyPillarsForGetFileRequest is 40.
Long Identifier,PillarAPI.IdentifyResponses,ResponseBuilderForIdentifyPillarsForDeleteFileRequest,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyResponses\ResponseBuilderForIdentifyPillarsForDeleteFileRequest.cs,MakeResponse,The length of the parameter receivedIdentifyPillarsForDeleteFileRequest is 43.
Long Identifier,PillarAPI.IdentifyResponses,ResponseBuilderForIdentifyPillarsForGetCheckSumsRequest,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyResponses\ResponseBuilderForIdentifyPillarsForGetCheckSumsRequest.cs,MakeResponse,The length of the parameter receivedIdentifyPillarsForGetCheckSumsRequest is 45.
Long Identifier,PillarAPI.IdentifyResponses,ResponseBuilderForIdentifyPillarsForGetCheckSumsRequest,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyResponses\ResponseBuilderForIdentifyPillarsForGetCheckSumsRequest.cs,MakeResponse,The length of the parameter checksumDataForFileTypeForFile is 30.
Long Identifier,PillarAPI.IdentifyResponses,ResponseBuilderForIdentifyPillarsForGetFileIDsRequest,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyResponses\ResponseBuilderForIdentifyPillarsForGetFileIDsRequest.cs,MakeResponse,The length of the parameter receivedIdentifyPillarsForGetFileIDsRequest is 43.
Long Identifier,PillarAPI.IdentifyResponses,ResponseBuilderForIdentifyPillarsForPutFileRequest,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyResponses\ResponseBuilderForIdentifyPillarsForPutFileRequest.cs,MakeResponse,The length of the parameter receivedIdentifyPillarsForPutFileRequest is 40.
Long Identifier,PillarAPI.IdentifyResponses,ResponseBuilderForIdentifyPillarsForReplaceFileRequest,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyResponses\ResponseBuilderForIdentifyPillarsForReplaceFileRequest.cs,MakeResponse,The length of the parameter receivedIdentifyPillarsForReplaceFileRequest is 44.
Long Identifier,PillarAPI.RequestResponses,PutFileWithWebDav,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\PutFileWithWebDav.cs,SaveChecksumsIntoDb,The length of the parameter defaultChecksumDataForFileType is 30.
Long Identifier,PillarAPI.RequestResponses,ChecksumGetChecksum,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\ChecksumGetChecksum.cs,ProcessRequest,The length of the parameter checksumDataForFileTypeForFile is 30.
Long Identifier,PillarAPI.RequestResponses,DeleteFile,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\DeleteFile.cs,sendFileProgressReponse,The length of the parameter deleteFileProgressResponseObject is 32.
Long Identifier,PillarAPI.RequestResponses,GetChecksum,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\GetChecksum.cs,ProcessRequest,The length of the parameter checksumDataForFileTypeForFile is 30.
Long Identifier,PillarAPI.RequestResponses,GetChecksum,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\GetChecksum.cs,SingleFile,The length of the parameter checksumDataForFileTypeForFile is 30.
Long Identifier,PillarAPI.Utilities,CollectedUtilities,C:\repos\raknasa_BMPPillar\taskPillar\Utilities\CollectedUtilities.cs,InsertChecksum,The length of the parameter checksumDataForFileTypeForFile is 30.
Long Statement,PillarAPI.ActiveMQ,ActiveMqQueueSubscriber,C:\repos\raknasa_BMPPillar\taskPillar\ActiveMQ\ActiveMqQueueSubscriber.cs,Start,The length of the statement  "	Consumer = _topic != null ? _session.CreateDurableConsumer (_topic' consumerId' "2 > 1"' false) : _session.CreateConsumer (_destination' null' false); " is 150.
Long Statement,PillarAPI.IdentifyResponses,ResponseBuilderForIdentifyContributorsForGetAuditTrailsRequest,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyResponses\ResponseBuilderForIdentifyContributorsForGetAuditTrailsRequest.cs,MakeResponse,The length of the statement  "	var receivedIdentifyPillarsForDeleteFileRequest = message.MessageObject as IdentifyContributorsForGetAuditTrailsRequest; " is 120.
Long Statement,PillarAPI.IdentifyResponses,ResponseBuilderForIdentifyPillarsForGetFileRequest,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyResponses\ResponseBuilderForIdentifyPillarsForGetFileRequest.cs,MakeResponse,The length of the statement  "				resInfo.ResponseText = "Get file request has been received. The file is in storage' contact SA and have them move the file. Then operation request will be successful"; " is 167.
Long Statement,PillarAPI.IdentifyResponses,ResponseBuilderForIdentifyPillarsForGetCheckSumsRequest,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyResponses\ResponseBuilderForIdentifyPillarsForGetCheckSumsRequest.cs,MakeResponse,The length of the statement  "				resInfo.ResponseText = "There is no file with the requested fileId in the repository. No checksum calculation is possible."; " is 124.
Long Statement,PillarAPI.IdentifyResponses,ResponseBuilderForIdentifyPillarsForGetCheckSumsRequest,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyResponses\ResponseBuilderForIdentifyPillarsForGetCheckSumsRequest.cs,MakeResponse,The length of the statement  "					ChecksumDataForFile_TYPE checksumDataForFileTypeForFile = CollectedUtilities.GetLatestChecksum (collectionId' fileName' receivedIdentifyPillarsForGetCheckSumsRequest.ChecksumRequestForExistingFile); " is 198.
Long Statement,PillarAPI.IdentifyResponses,ResponseBuilderForIdentifyPillarsForGetCheckSumsRequest,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyResponses\ResponseBuilderForIdentifyPillarsForGetCheckSumsRequest.cs,MakeResponse,The length of the statement  "						resInfo.ResponseText = "File has been archived and is not available for checksum calculation. Contact SA and arrange for file to be transfered from storage"; " is 157.
Long Statement,PillarAPI.IdentifyResponses,ResponseBuilderForIdentifyPillarsForGetCheckSumsRequest,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyResponses\ResponseBuilderForIdentifyPillarsForGetCheckSumsRequest.cs,GetInfoAboutCalculateChecksum,The length of the statement  "		Sql sqlString = Sql.Builder.Append ("SELECT fs.archived' fs.file_id' fs.file_spec_id' f.file_name ").Append ("FROM file_specs fs' files f ' users u ").Append ("WHERE u.collection_id = @0"' collectionId).Append ("AND f.user_id = u.user_id").Append ("AND fs.file_id = f.file_id ").Append ("AND f.deleted = 0 ").Append ("AND fs.active = 1 ").Append ("ORDER BY fs.archived DESC"); " is 376.
Long Statement,PillarAPI.IdentifyResponses,ResponseBuilderForIdentifyPillarsForGetCheckSumsRequest,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyResponses\ResponseBuilderForIdentifyPillarsForGetCheckSumsRequest.cs,GetInfoAboutCalculateChecksum,The length of the statement  "					resInfo.ResponseText = "One or more files has been archived and are not available for new checksum calculations. " + "If you want new checksum calculations on all files' contact SA and have then transfer the files. " + "If new checksum calculations are not needed' the pillar has stored checksums for all files. " + "Stored check does not require files to be transfered"; " is 371.
Long Statement,PillarAPI.IdentifyResponses,ResponseBuilderForIdentifyPillarsForGetFileIDsRequest,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyResponses\ResponseBuilderForIdentifyPillarsForGetFileIDsRequest.cs,MakeResponse,The length of the statement  "				resInfo.ResponseText = "This Pillar does not contain the file with the requested fileId. File id request is not possible."; " is 123.
Long Statement,PillarAPI.IdentifyResponses,ResponseBuilderForIdentifyPillarsForGetFileIDsRequest,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyResponses\ResponseBuilderForIdentifyPillarsForGetFileIDsRequest.cs,IsCollectionEmpty,The length of the statement  "	Sql sqlstring = Sql.Builder.Append ("SELECT COUNT(0) fs.archived' fs.file_id' fs.file_spec_id' f.file_name ").Append ("FROM file_specs fs' files f ' users u ").Append ("WHERE u.collection_id = @0 "' collectionId).Append ("AND f.user_id = u.user_id ").Append ("AND fs.file_id = f.file_id ").Append ("AND f.deleted = 0 ").Append ("AND fs.active = 1"); " is 349.
Long Statement,PillarAPI.IdentifyResponses,ResponseBuilderForIdentifyPillarsForPutFileRequest,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyResponses\ResponseBuilderForIdentifyPillarsForPutFileRequest.cs,MakeResponse,The length of the statement  "			checksumDataForExistingFile = CollectedUtilities.GetLatestChecksum (receivedIdentifyPillarsForPutFileRequest.CollectionID' receivedIdentifyPillarsForPutFileRequest.FileID' chkSpkTypeForFile); " is 191.
Long Statement,PillarAPI,PillarMonitor,C:\repos\raknasa_BMPPillar\taskPillar\PillarMonitor.cs,Connect,The length of the statement  "		_connectionFactory = new ConnectionFactory (Pillar.GlobalPillarApiSettings.MESSAGE_BUS_CONFIGURATION_URL' Pillar.GlobalPillarApiSettings.PILLAR_ID + "_Monitor"); " is 161.
Long Statement,PillarAPI,PillarMonitor,C:\repos\raknasa_BMPPillar\taskPillar\PillarMonitor.cs,Connect,The length of the statement  "		IDestination destination = SessionUtil.GetDestination (_session' "topic://" + Pillar.GlobalPillarApiSettings.PILLAR_ID + "_test"); " is 130.
Long Statement,PillarAPI,IOC,C:\repos\raknasa_BMPPillar\taskPillar\IOC.cs,BootstrapContainer,The length of the statement  "		_container.Register (Component.For<IResponseBuilderForIdentifyPillarsForGetFileRequest> ().ImplementedBy<ResponseBuilderForIdentifyPillarsForGetFileRequest> ()); " is 161.
Long Statement,PillarAPI,DependencyInjection,C:\repos\raknasa_BMPPillar\taskPillar\DependencyInjection.cs,BootstrapContainer,The length of the statement  "	//container.Register(Classes.FromThisAssembly().InSameNamespaceAs<PillarInitializer>().WithService.DefaultInterfaces().LifestyleTransient()); " is 141.
Long Statement,PillarAPI,DependencyInjection,C:\repos\raknasa_BMPPillar\taskPillar\DependencyInjection.cs,BootstrapContainer,The length of the statement  "	//container.Register(Classes.FromThisAssembly().InNamespace("Apache.NMS").WithService.DefaultInterfaces().LifestyleTransient()); " is 128.
Long Statement,PillarAPI,MessageInfoContainer,C:\repos\raknasa_BMPPillar\taskPillar\MessageInfoContainer.cs,signMessage,The length of the statement  "		X509Certificate2 privateCertificate = CmsMessageUtilities.LoadCertificate (Pillar.GlobalPillarApiSettings.PRIVATE_CERTIFICATE_FILEPATH); " is 136.
Long Statement,PillarAPI,MessageInfoContainer,C:\repos\raknasa_BMPPillar\taskPillar\MessageInfoContainer.cs,signMessage,The length of the statement  "		Log.ErrorFormat ("Error signing message. There might be something wrong with the PRIVATE_CERTIFICATES_STORE name or the certificate is missing."); " is 146.
Long Statement,PillarAPI,Pillar,C:\repos\raknasa_BMPPillar\taskPillar\Pillar.cs,CurrentDomainUnhandledException,The length of the statement  "		MessageBox.Show ("Whoops! Please contact the developers with the following" + " information:\n\n" + ex.Message + ex.StackTrace' "Fatal Error"' MessageBoxButtons.OK' MessageBoxIcon.Stop); " is 186.
Long Statement,PillarAPI,Subscriber,C:\repos\raknasa_BMPPillar\taskPillar\Subscriber.cs,Start,The length of the statement  "	Consumer = _topic != null ? _session.CreateDurableConsumer (_topic' consumerId' "2 > 1"' false) : _session.CreateConsumer (_destination' null' false); " is 150.
Long Statement,PillarAPI,IdentifyPillarsGeneralTopicListener,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyPillarsGeneralTopicListener.cs,DoWorkGeneralTopic,The length of the statement  "	IDestination destination = ActiveMQSetup.GetDestination (ActiveMQSetup.GetSession (connection)' Pillar.GlobalPillarApiSettings.COLLECTION_DESTINATION); " is 151.
Long Statement,PillarAPI,IdentifyPillarsGeneralTopicListener,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyPillarsGeneralTopicListener.cs,DoWorkGeneralTopic,The length of the statement  "		//MessageBox.Show(messageInfoContainer.IsSerializedMessageValid.ToString() + "\n\n" + messageInfoContainer.SerializedMessage ); " is 127.
Long Statement,PillarAPI,PillarQueueListener,C:\repos\raknasa_BMPPillar\taskPillar\PillarQueueListener.cs,DoWorkSAPillarQueue,The length of the statement  "	IDestination destination = ActiveMQSetup.GetDestination (ActiveMQSetup.GetSession (connection)' Pillar.QueueAttribute + Pillar.GlobalPillarApiSettings.PILLAR_ID); " is 162.
Long Statement,PillarAPI,PillarQueueListener,C:\repos\raknasa_BMPPillar\taskPillar\PillarQueueListener.cs,DoWorkSAPillarQueue,The length of the statement  "	X509Certificate2 publicCertificate = CmsMessageUtilities.GetCertificate (Pillar.GlobalPillarApiSettings.USER_CERTIFICATES_STORE' Pillar.GlobalPillarApiSettings.PUBLIC_CERTIFICATE_THUMBPRINT); " is 191.
Long Statement,PillarAPI,PillarQueueListener,C:\repos\raknasa_BMPPillar\taskPillar\PillarQueueListener.cs,DoWorkSAPillarQueue,The length of the statement  "		if (!string.IsNullOrEmpty (message.Properties ["org.bitrepository.messages.signature"].ToString ()) && CmsMessageUtilities.CmsSignedMessageVerifier (publicCertificate' message.Properties ["org.bitrepository.messages.signature"].ToString ())) { " is 243.
Long Statement,PillarAPI.RequestResponses,PutFileWithWebDav,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\PutFileWithWebDav.cs,ProcessRequest,The length of the statement  "		if (putFileFileInfoContainer.FileStates == FileStatesEnum.ExistingInDB || putFileFileInfoContainer.FileStates == FileStatesEnum.DeletedFromDB) { " is 144.
Long Statement,PillarAPI.RequestResponses,PutFileWithWebDav,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\PutFileWithWebDav.cs,ExecuteNonQuerySqlTransactionFailed,The length of the statement  "	CollectedUtilities.InsertAudit (FileAction.PUT_FILE.ToString ()' receivedPutFileRequest.From' receivedPutFileRequest.AuditTrailInformation' receivedPutFileRequest.FileID' responseInfo.ResponseText' Pillar.GlobalPillarApiSettings.PILLAR_ID); " is 240.
Long Statement,PillarAPI.RequestResponses,PutFileWithWebDav,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\PutFileWithWebDav.cs,InsertFileIntoDb,The length of the statement  "		var userPoco = db.SingleOrDefault<FilePoco> (string.Format ("SELECT user_id FROM users WHERE collection_id = '{0}'"' collectionId)); " is 132.
Long Statement,PillarAPI.RequestResponses,PutFileWithWebDav,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\PutFileWithWebDav.cs,DuplicateFileFailureResponse,The length of the statement  "	CollectedUtilities.InsertAudit (FileAction.PUT_FILE.ToString ()' receivedPutFileRequest.From' receivedPutFileRequest.AuditTrailInformation' receivedPutFileRequest.FileID' responseInfo.ResponseText' Pillar.GlobalPillarApiSettings.PILLAR_ID); " is 240.
Long Statement,PillarAPI.RequestResponses,PutFileWithWebDav,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\PutFileWithWebDav.cs,MoveFileFromWebDavToLocalDirectoryNew,The length of the statement  "	Pillar.GlobalPillarApiSettings.WEBDAV_CLIENT_CERTIFICATE_THUMBPRINT' Pillar.GlobalPillarApiSettings.USER_CERTIFICATES_STORE' Pillar.GlobalPillarApiSettings.WEBDAV_URI_SCHEME' 0); " is 178.
Long Statement,PillarAPI.RequestResponses,PutFileWithWebDav,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\PutFileWithWebDav.cs,MoveFileFromWebDavToLocalDirectoryNew,The length of the statement  "	ChecksumDataForFile_TYPE returnChecksumDataForFileType = ChecksumUtilities.CalculateChecksumDataForFileType (receivedFileChkData.ChecksumSpec' filePath); " is 153.
Long Statement,PillarAPI.RequestResponses,PutFileWithWebDav,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\PutFileWithWebDav.cs,MoveFileFromWebDavToLocalDirectoryNew,The length of the statement  "				string newFileName = Path.Combine (saveDir' string.Format ("{0}.{1}.{2}"' f1.FileId' f1.FileSpecId' receivedPutFileRequest.FileID)); " is 132.
Long Statement,PillarAPI.RequestResponses,PutFileWithWebDav,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\PutFileWithWebDav.cs,MoveFileFromWebDavToLocalDirectoryNew,The length of the statement  "						var user = db.SingleOrDefault<dynamic> (Sql.Builder.Append ("SELECT user_id FROM users WHERE collection_id = @0"' collectionId)); " is 129.
Long Statement,PillarAPI.RequestResponses,PutFileWithWebDav,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\PutFileWithWebDav.cs,MoveFileFromWebDavToLocalDirectoryNew,The length of the statement  "			db.Execute ("DELETE FROM files WHERE file_name = @0 and user_id = (SELECT user_id FROM users WHERE collection_id = @1)"' fileName' collectionId); " is 145.
Long Statement,PillarAPI.RequestResponses,PutFileWithWebDav,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\PutFileWithWebDav.cs,MoveFileFromWebDavToLocalDirectoryNew,The length of the statement  "	CollectedUtilities.InsertAudit (FileAction.PUT_FILE.ToString ()' receivedPutFileRequest.From' receivedPutFileRequest.AuditTrailInformation' receivedPutFileRequest.FileID' responseInfo.ResponseText' Pillar.GlobalPillarApiSettings.PILLAR_ID); " is 240.
Long Statement,PillarAPI.RequestResponses,PutFileWithWebDav,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\PutFileWithWebDav.cs,SaveChecksumsIntoDb,The length of the statement  "	var defaultChecksumType = (ChecksumType)Enum.Parse (typeof(ChecksumType)' Pillar.GlobalPillarApiSettings.DEFAULT_CHECKSUM_TYPE); " is 128.
Long Statement,PillarAPI.RequestResponses,PutFileWithWebDav,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\PutFileWithWebDav.cs,SaveChecksumsIntoDb,The length of the statement  "		ChecksumDataForFile_TYPE defaultChecksumDataForFileType = ChecksumUtilities.CalculateChecksumDataForFileType (defaultChecksumSpecType' filePath); " is 145.
Long Statement,PillarAPI.RequestResponses,PutFileWithWebDav,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\PutFileWithWebDav.cs,UpdateFile,The length of the statement  "		var userPoco = db.SingleOrDefault<FilePoco> (Sql.Builder.Append ("SELECT user_id FROM users WHERE collection_id = @0"' collectionId)); " is 134.
Long Statement,PillarAPI.RequestResponses,PutFileWithWebDav,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\PutFileWithWebDav.cs,GetFileId,The length of the statement  "	Sql sqlstring = Sql.Builder.Append ("SELECT f.file_id from files f ").Append ("LEFT JOIN users u ").Append ("WHERE f.file_name = @0 "' fileName).Append ("AND f.user_id = u.user_id ").Append ("AND u.collection_id = @0"' collectionId); " is 233.
Long Statement,PillarAPI.RequestResponses,PutFileWithWebDav,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\PutFileWithWebDav.cs,PutFileReply,The length of the statement  "		//ChecksumDataForExistingFile // If file already exists in repository - why god' WHY. We already have the integrityservice to take care of this. " is 144.
Long Statement,PillarAPI.RequestResponses,ChecksumGetChecksum,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\ChecksumGetChecksum.cs,ProcessRequest,The length of the statement  "		Sql sqlstring = Sql.Builder.Append ("SELECT f.file_name").Append ("FROM files f' file_specs fs").Append ("WHERE f.deleted = 0").Append ("AND f.user_id = (SELECT user_id FROM users WHERE collection_id = @0)"' collectionId).Append ("AND f.file_id = fs.file_id ").Append ("AND fs.active = 1"); " is 290.
Long Statement,PillarAPI.RequestResponses,ChecksumGetChecksum,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\ChecksumGetChecksum.cs,ProcessRequest,The length of the statement  "				ChecksumDataForFile_TYPE checksumDataForFileTypeForFile = CollectedUtilities.GetLatestChecksum (receivedGetChecksumsRequest.CollectionID' filename' receivedGetChecksumsRequest.ChecksumRequestForExistingFile); " is 208.
Long Statement,PillarAPI.RequestResponses,ChecksumGetChecksum,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\ChecksumGetChecksum.cs,ProcessRequest,The length of the statement  "				resInf.ResponseText = "Data has been found for get checksums request. If there are checksums missing contact SA and have them transfer files from disk"; " is 152.
Long Statement,PillarAPI.RequestResponses,ChecksumGetChecksum,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\ChecksumGetChecksum.cs,ReturnSingleOrAllFileIdentifier,The length of the statement  "	return IsGetAllChecksumRequest (receivedGetChecksumsRequest) ? "AllFileIDs" : receivedGetChecksumsRequest.FileIDs.Item.ToString (); " is 131.
Long Statement,PillarAPI.RequestResponses,ChecksumPutFile,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\ChecksumPutFile.cs,ProcessRequest,The length of the statement  "		if (putFileFileInfoContainer.FileStates == FileStatesEnum.ExistingInDB || putFileFileInfoContainer.FileStates == FileStatesEnum.DeletedFromDB) { " is 144.
Long Statement,PillarAPI.RequestResponses,ChecksumPutFile,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\ChecksumPutFile.cs,ExecuteNonQuerySqlTransactionFailed,The length of the statement  "	CollectedUtilities.InsertAudit (FileAction.PUT_FILE.ToString ()' receivedPutFileRequest.From' receivedPutFileRequest.AuditTrailInformation' receivedPutFileRequest.FileID' responseInfo.ResponseText' Pillar.GlobalPillarApiSettings.PILLAR_ID); " is 240.
Long Statement,PillarAPI.RequestResponses,ChecksumPutFile,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\ChecksumPutFile.cs,InsertFileIntoDb,The length of the statement  "		var userPoco = db.SingleOrDefault<FilePoco> (string.Format ("SELECT user_id FROM users WHERE collection_id = '{0}'"' collectionId)); " is 132.
Long Statement,PillarAPI.RequestResponses,ChecksumPutFile,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\ChecksumPutFile.cs,DuplicateFileFailureResponse,The length of the statement  "	CollectedUtilities.InsertAudit (FileAction.PUT_FILE.ToString ()' receivedPutFileRequest.From' receivedPutFileRequest.AuditTrailInformation' receivedPutFileRequest.FileID' responseInfo.ResponseText' Pillar.GlobalPillarApiSettings.PILLAR_ID); " is 240.
Long Statement,PillarAPI.RequestResponses,ChecksumPutFile,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\ChecksumPutFile.cs,UpdateFile,The length of the statement  "		var userPoco = db.SingleOrDefault<FilePoco> (Sql.Builder.Append ("SELECT user_id FROM users WHERE collection_id = @0"' collectionId)); " is 134.
Long Statement,PillarAPI.RequestResponses,ChecksumPutFile,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\ChecksumPutFile.cs,InsertFileInfoIntoDB,The length of the statement  "			db.Delete<FilePoco> ("DELETE FROM files WHERE file_name = @0 and user_id = (SELECT user_id FROM users WHERE collection_id = @1)"' fileName' collectionId); " is 154.
Long Statement,PillarAPI.RequestResponses,ChecksumPutFile,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\ChecksumPutFile.cs,InsertFileInfoIntoDB,The length of the statement  "	CollectedUtilities.InsertAudit (FileAction.PUT_FILE.ToString ()' receivedPutFileRequest.From' receivedPutFileRequest.AuditTrailInformation' receivedPutFileRequest.FileID' responseInfo.ResponseText' Pillar.GlobalPillarApiSettings.PILLAR_ID); " is 240.
Long Statement,PillarAPI.RequestResponses,ChecksumPutFile,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\ChecksumPutFile.cs,InsertNewFileSpec,The length of the statement  "			Sql sqlstring = Sql.Builder.Append ("SELECT f.file_id from files f ").Append ("LEFT JOIN users u ").Append ("WHERE f.file_name = @0 "' fileName).Append ("AND f.user_id = u.user_id ").Append ("AND u.collection_id = @0"' collectionId); " is 233.
Long Statement,PillarAPI.RequestResponses,ChecksumPutFile,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\ChecksumPutFile.cs,PutFileReply,The length of the statement  "		//ChecksumDataForExistingFile // If file already exists in repository - why god' WHY. We already have the integrityservice to take care of this. " is 144.
Long Statement,PillarAPI.RequestResponses,DeleteFile,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\DeleteFile.cs,ProcessRequest,The length of the statement  "                            "SET deleted = @deleted WHERE file_name = @file_name and user_id = (SELECT user_id FROM users WHERE collection_id = @collection_id)"'" is 133.
Long Statement,PillarAPI.RequestResponses,GetAuditTrail,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\GetAuditTrail.cs,ProcessRequest,The length of the statement  "		Sql sql = Sql.Builder.Append ("SELECT actionDateTime' actionOnFile' actorOnFile' auditTrailInformation' fileName' info' reportingComponent' sequenceNumber' file_id FROM Audit"); " is 177.
Long Statement,PillarAPI.RequestResponses,GetAuditTrail,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\GetAuditTrail.cs,ProcessRequest,The length of the statement  "			sql.Append (whereBool ? "WHERE actionDateTIme >= @0" : "AND actionDateTIme >= @0 "' receivedGetAuditTrailsRequest.MinTimestamp); " is 128.
Long Statement,PillarAPI.RequestResponses,GetAuditTrail,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\GetAuditTrail.cs,ProcessRequest,The length of the statement  "			sql.Append (whereBool ? "WHERE actionDateTIme <= @0 " : "AND actionDateTIme <= @0 "' receivedGetAuditTrailsRequest.MaxTimestamp); " is 129.
Long Statement,PillarAPI.RequestResponses,GetAuditTrail,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\GetAuditTrail.cs,ProcessRequest,The length of the statement  "			sql.Append (whereBool ? "WHERE sequenceNumber >= @0" : "AND sequenceNumber >= @0 "' receivedGetAuditTrailsRequest.MinSequenceNumber); " is 133.
Long Statement,PillarAPI.RequestResponses,GetAuditTrail,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\GetAuditTrail.cs,ProcessRequest,The length of the statement  "			sql.Append (whereBool ? "WHERE sequenceNumber <= @0" : "AND sequenceNumber <= @0"' receivedGetAuditTrailsRequest.MaxSequenceNumber); " is 132.
Long Statement,PillarAPI.RequestResponses,GetChecksum,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\GetChecksum.cs,ProcessRequest,The length of the statement  "		IEnumerable<article> result = myDb.Query<article> ("SELECT fs.archived' fs.file_id' fs.file_spec_id' f.file_name " + "FROM files f' file_specs fs " + "WHERE f.deleted = 0 " + "AND user_id = (SELECT user_id FROM users WHERE collection_id = @0) " + "AND f.file_id = fs.file_id " + "AND fs.active = 1"' new object[] { " is 314.
Long Statement,PillarAPI.RequestResponses,GetChecksum,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\GetChecksum.cs,ProcessRequest,The length of the statement  "				ChecksumDataForFile_TYPE checksumDataForFileTypeForFile = CollectedUtilities.GetLatestChecksum (receivedGetChecksumsRequest.CollectionID' Article.file_name' receivedGetChecksumsRequest.ChecksumRequestForExistingFile); " is 217.
Long Statement,PillarAPI.RequestResponses,GetChecksum,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\GetChecksum.cs,ProcessRequest,The length of the statement  "			resInf.ResponseText = "Data for AllFileIDs has been found for get checksums request. If there are checksums missing contact SA and have them transfer files from disk"; " is 167.
Long Statement,PillarAPI.RequestResponses,GetChecksum,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\GetChecksum.cs,SingleFile,The length of the statement  "	ChecksumDataForFile_TYPE checksumDataForFileTypeForFile = CollectedUtilities.GetLatestChecksum (receivedGetChecksumsRequest.CollectionID' receivedGetChecksumsRequest.FileIDs.Item.ToString ()' receivedGetChecksumsRequest.ChecksumRequestForExistingFile); " is 252.
Long Statement,PillarAPI.RequestResponses,GetChecksum,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\GetChecksum.cs,SingleFile,The length of the statement  "			ResponseText = "Checksum value isn't kept in DB and file isn't available. Contact SA and arrange for file to be transfered from storage" " is 136.
Long Statement,PillarAPI.RequestResponses,GetChecksum,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\GetChecksum.cs,ChecksumResponse,The length of the statement  "	CollectedUtilities.InsertAudit (FileAction.GET_CHECKSUMS.ToString ()' receivedGetChecksumsRequest.From' receivedGetChecksumsRequest.AuditTrailInformation' filename' responseInfo.ResponseText' Pillar.GlobalPillarApiSettings.PILLAR_ID); " is 234.
Long Statement,PillarAPI.RequestResponses,GetFileWithWebDav,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\GetFileWithWebDav.cs,MoveFileToWebDav,The length of the statement  "	Pillar.GlobalPillarApiSettings.WEBDAV_CLIENT_CERTIFICATE_THUMBPRINT' Pillar.GlobalPillarApiSettings.USER_CERTIFICATES_STORE' Pillar.GlobalPillarApiSettings.WEBDAV_URI_SCHEME' 0); " is 178.
Long Statement,PillarAPI.RequestResponses,GetFileWithWebDav,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\GetFileWithWebDav.cs,MoveFileToWebDav,The length of the statement  "	bool fileTransferResult = fileOperator.TransferFile (receivedGetFileRequest.FileAddress' new FileInfo (filePath)' receivedGetFileRequest.FileID); " is 145.
Long Statement,PillarAPI.RequestResponses,GetFileWithWebDav,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\GetFileWithWebDav.cs,MoveFileToWebDav,The length of the statement  "	CollectedUtilities.InsertAudit (FileAction.GET_FILE.ToString ()' receivedGetFileRequest.From' receivedGetFileRequest.AuditTrailInformation' receivedGetFileRequest.FileID' responseInfo.ResponseText' Pillar.GlobalPillarApiSettings.PILLAR_ID); " is 240.
Long Statement,PillarAPI.RequestResponses,GetFileWithWebDav,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\GetFileWithWebDav.cs,FileNotOnDiskResponse,The length of the statement  "		responseInfo.ResponseText = "File with given FileID is not available for download. Contact SA to have file made available"; " is 123.
Long Statement,PillarAPI.RequestResponses,GetFileWithWebDav,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\GetFileWithWebDav.cs,FileNotOnDiskResponse,The length of the statement  "	CollectedUtilities.InsertAudit (FileAction.GET_FILE.ToString ()' receivedGetFileRequest.From' receivedGetFileRequest.AuditTrailInformation' receivedGetFileRequest.FileID' responseInfo.ResponseText' Pillar.GlobalPillarApiSettings.PILLAR_ID); " is 240.
Long Statement,PillarAPI.RequestResponses,GetFileId,C:\repos\raknasa_BMPPillar\taskPillar\RequestResponses\GetFileID.cs,ProcessRequest,The length of the statement  "	CollectedUtilities.InsertAudit (FileAction.GET_FILEID.ToString ()' receivedGetFileIDsRequest.From' receivedGetFileIDsRequest.AuditTrailInformation' filename' responseInfo.ResponseText' Pillar.GlobalPillarApiSettings.PILLAR_ID); " is 227.
Long Statement,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,AddParam,The length of the statement  "			// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000 " is 179.
Long Statement,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,Query,The length of the statement  "			var factory = pd.GetFactory (cmd.CommandText' _sharedConnection.ConnectionString' 0' r.FieldCount' r) as Func<IDataReader' T>; " is 126.
Long Statement,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,Exists,The length of the statement  "	return Exists<T> (string.Format ("{0}=@0"' _dbType.EscapeSqlIdentifier (PocoData.ForType (typeof(T)).TableInfo.PrimaryKey))' primaryKey); " is 137.
Long Statement,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,Single,The length of the statement  "	return Single<T> (string.Format ("WHERE {0}=@0"' _dbType.EscapeSqlIdentifier (PocoData.ForType (typeof(T)).TableInfo.PrimaryKey))' primaryKey); " is 143.
Long Statement,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,SingleOrDefault,The length of the statement  "	return SingleOrDefault<T> (string.Format ("WHERE {0}=@0"' _dbType.EscapeSqlIdentifier (PocoData.ForType (typeof(T)).TableInfo.PrimaryKey))' primaryKey); " is 152.
Long Statement,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,Insert,The length of the statement  "				cmd.CommandText = string.Format ("INSERT INTO {0} ({1}){2} VALUES ({3})"' _dbType.EscapeTableName (tableName)' string.Join ("'"' names.ToArray ())' outputClause' string.Join ("'"' values.ToArray ())); " is 200.
Long Statement,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,Update,The length of the statement  "				cmd.CommandText = string.Format ("UPDATE {0} SET {1} WHERE {2} = {3}{4}"' _dbType.EscapeTableName (tableName)' sb' _dbType.EscapeSqlIdentifier (primaryKeyName)' _paramPrefix' index++); " is 184.
Long Statement,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,Delete,The length of the statement  "	string sql = string.Format ("DELETE FROM {0} WHERE {1}=@0"' _dbType.EscapeTableName (tableName)' _dbType.EscapeSqlIdentifier (primaryKeyName)); " is 143.
Long Statement,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,Delete,The length of the statement  "	return Execute (new Sql (string.Format ("DELETE FROM {0}"' _dbType.EscapeTableName (pd.TableInfo.TableName))).Append (sql)); " is 124.
Long Statement,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,IsNew,The length of the statement  "			throw new ArgumentException (string.Format ("The object doesn't have a property matching the primary key column name '{0}'"' primaryKeyName)); " is 142.
Long Statement,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,IsNew,The length of the statement  "		throw new InvalidOperationException ("IsNew() and Save() are only supported on tables with auto-increment/identity primary key columns"); " is 137.
Long Statement,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,Query,The length of the statement  "			Func<IDataReader' object' TRet> factory = MultiPocoFactory.GetFactory<TRet> (types' _sharedConnection.ConnectionString' sql' r); " is 128.
Long Statement,Internal,MultiPocoFactory,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,GetAutoMapper,The length of the statement  "					throw new InvalidOperationException (string.Format ("Can't auto join {0} as {1} has more than one property of type {0}"' types [i]' types [j])); " is 144.
Long Statement,Internal,MultiPocoFactory,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,FindSplitPoint,The length of the statement  "		if (usedColumns.ContainsKey (fieldName) || (!pdThis.Columns.ContainsKey (fieldName) && pdNext.Columns.ContainsKey (fieldName))) { " is 129.
Long Statement,Internal,MultiPocoFactory,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,FindSplitPoint,The length of the statement  "	throw new InvalidOperationException (string.Format ("Couldn't find split point between {0} and {1}"' typeThis' typeNext)); " is 122.
Long Statement,Internal,MultiPocoFactory,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,CreateMultiPocoFactory,The length of the statement  "		Delegate del = FindSplitPoint (types [i]' i + 1 < types.Length ? types [i + 1] : null' ConnectionString' sql' r' ref pos); " is 122.
Long Statement,Internal,MultiPocoFactory,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,CreateMultiPocoFactory,The length of the statement  "	return (Func<IDataReader' object' TRet>)m.CreateDelegate (typeof(Func<IDataReader' object' TRet>)' new MultiPocoFactory { " is 121.
Long Statement,Internal,MultiPocoFactory,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,GetFactory,The length of the statement  "	Tuple<Type' ArrayKey<Type>' string' string> key = Tuple.Create (typeof(TRet)' new ArrayKey<Type> (types)' ConnectionString' sql); " is 129.
Long Statement,Internal,PocoData,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,GetFactory,The length of the statement  "			il.Emit (OpCodes.Newobj' type.GetConstructor (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new Type[0]' null)); " is 142.
Long Statement,Internal,PocoData,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,GetFactory,The length of the statement  "					if (valuegetter != null && valuegetter.ReturnType == srcType && (valuegetter.ReturnType == dstType || valuegetter.ReturnType == Nullable.GetUnderlyingType (dstType))) { " is 168.
Long Statement,Internal,PocoData,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,GetFactory,The length of the statement  "			MethodInfo fnOnLoaded = RecurseInheritedTypes (type' x => x.GetMethod ("OnLoaded"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new Type[0]' null)); " is 179.
Long Statement,Internal,PocoData,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,GetConverter,The length of the statement  "	if (pc != null && pc.ForceToUtc && srcType == typeof(DateTime) && (dstType == typeof(DateTime) || dstType == typeof(DateTime?))) { " is 130.
Long Statement,Internal,PagingHelper,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,SplitSQL,The length of the statement  "		parts.sqlCount = sql.Substring (0' g.Index) + "COUNT(" + m.Groups [1].ToString ().Trim () + ") " + sql.Substring (g.Index + g.Length); " is 134.
Long Statement,Internal,ParametersHelper,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,ProcessParams,The length of the statement  "				throw new ArgumentOutOfRangeException (string.Format ("Parameter '@{0}' specified but only {1} parameters supplied (in `{2}`)"' paramIndex' args_src.Length' sql)); " is 163.
Long Statement,Internal,ParametersHelper,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,ProcessParams,The length of the statement  "				throw new ArgumentException (string.Format ("Parameter '@{0}' specified but none of the passed arguments have a property with this name (in '{1}')"' param' sql)); " is 162.
Long Statement,DatabaseTypes,SqlServerCEDatabaseType,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,BuildPageQuery,The length of the statement  "	string sqlPage = string.Format ("{0}\nOFFSET @{1} ROWS FETCH NEXT @{2} ROWS ONLY"' parts.sql' args.Length' args.Length + 1); " is 124.
Long Statement,DatabaseTypes,SqlServerDatabaseType,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,BuildPageQuery,The length of the statement  "	string sqlPage = string.Format ("SELECT * FROM (SELECT ROW_NUMBER() OVER ({0}) peta_rn' {1}) peta_paged WHERE peta_rn>@{2} AND peta_rn<=@{3}"' parts.sqlOrderBy == null ? "ORDER BY (SELECT NULL)" : parts.sqlOrderBy' parts.sqlSelectRemoved' args.Length' args.Length + 1); " is 269.
Long Statement,PillarAPI.Utilities,CmsMessageUtilities,C:\repos\raknasa_BMPPillar\taskPillar\Utilities\CmsMessageUtilities.cs,CmsSignedMessageVerifier,The length of the statement  "		//                verifier.CheckSignature(publicCert' true);   //TODO Make this work' see client implementation using BouncyCastle " is 130.
Long Statement,PillarAPI.Utilities,CmsMessageUtilities,C:\repos\raknasa_BMPPillar\taskPillar\Utilities\CmsMessageUtilities.cs,GetCertificate,The length of the statement  "	X509Certificate2 privateCertificate = myStore.Certificates.Find (X509FindType.FindByThumbprint' thumbprint.ToUpper ()' true) [0]; " is 129.
Long Statement,PillarAPI.Utilities,SerializationUtilities,C:\repos\raknasa_BMPPillar\taskPillar\Utilities\SerializationUtilities.cs,ValidateXmlMessage,The length of the statement  "		settings.Schemas.Add ("http://bitrepository.org/BitRepositoryMessages.xsd"' Pillar.GlobalPillarApiSettings.MESSAGE_XSD_FILE_PATH); " is 130.
Long Statement,PillarAPI.Utilities,CollectedUtilities,C:\repos\raknasa_BMPPillar\taskPillar\Utilities\CollectedUtilities.cs,GetLatestChecksum,The length of the statement  "	Sql pocoString = chkSpkTypeForFile.ChecksumSalt == null ? PocoStringWithoutSalt (collectionId' fileName' chkSpkTypeForFile) : PocoStringWithSalt (collectionId' fileName' chkSpkTypeForFile); " is 189.
Long Statement,PillarAPI.Utilities,CollectedUtilities,C:\repos\raknasa_BMPPillar\taskPillar\Utilities\CollectedUtilities.cs,PocoStringWithoutSalt,The length of the statement  "	Sql pocoStringWithoutSalt = Sql.Builder.Append ("SELECT MAX(c.date) as date' c.checksum").Append ("FROM files f").Append ("LEFT JOIN file_specs fs ON fs.active = 1 AND  f.file_id = fs.file_id").Append ("LEFT JOIN checksum_types ct ON ct.algorithm = @0"' chkSpkTypeForFile.ChecksumType.ToString ()).Append ("LEFT JOIN checksums c ON ct.algorithm_id = c.algorithm_id AND fs.file_spec_id = c.file_spec_id").Append ("LEFT JOIN users u ON u.user_id = f.user_id AND u.collection_id = @0"' collectionId).Append ("WHERE f.file_name = @0"' fileName); " is 541.
Long Statement,PillarAPI.Utilities,CollectedUtilities,C:\repos\raknasa_BMPPillar\taskPillar\Utilities\CollectedUtilities.cs,PocoStringWithSalt,The length of the statement  "	Sql pocoStringWithSalt = Sql.Builder.Append ("SELECT MAX(c.date) as date' c.checksum").Append ("FROM files f").Append ("LEFT JOIN file_specs fs ON fs.active = 1 AND  f.file_id = fs.file_id").Append ("LEFT JOIN checksum_types ct ON ct.algorithm = @0"' chkSpkTypeForFile.ChecksumType.ToString ()).Append ("LEFT JOIN checksums c ON ct.algorithm_id = c.algorithm_id AND fs.file_spec_id = c.file_spec_id AND c.salt IS @0"' chkSpkTypeForFile.ChecksumSalt).Append ("LEFT JOIN users u ON u.user_id = f.user_id AND u.collection_id = @0"' collectionId).Append ("WHERE f.file_name = @0"' fileName); " is 587.
Long Statement,PillarAPI.Utilities,CollectedUtilities,C:\repos\raknasa_BMPPillar\taskPillar\Utilities\CollectedUtilities.cs,InsertChecksum,The length of the statement  "			var checksumsTypePoco = db.SingleOrDefault<ChecksumsTypePoco> (string.Format ("Select algorithm_id FROM checksum_types WHERE algorithm = '{0}'"' checksumDataForFileTypeForFile.ChecksumSpec.ChecksumType)); " is 204.
Long Statement,PillarAPI.Utilities,XmlUtilities,C:\repos\raknasa_BMPPillar\taskPillar\Utilities\XmlUtilities.cs,ValidateXmlMessage,The length of the statement  "	settings.Schemas.Add (Pillar.GlobalPillarApiSettings.XML_NAMESPACE' Pillar.GlobalPillarApiSettings.MESSAGE_XSD_FILE_PATH); " is 122.
Complex Conditional,Internal,PocoData,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,GetFactory,The conditional expression  "valuegetter != null && valuegetter.ReturnType == srcType && (valuegetter.ReturnType == dstType || valuegetter.ReturnType == Nullable.GetUnderlyingType (dstType))"  is complex.
Complex Conditional,Internal,PocoData,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,GetConverter,The conditional expression  "pc != null && pc.ForceToUtc && srcType == typeof(DateTime) && (dstType == typeof(DateTime) || dstType == typeof(DateTime?))"  is complex.
Magic Number,PillarAPI,PillarMonitor,C:\repos\raknasa_BMPPillar\taskPillar\PillarMonitor.cs,DoWork,The following statement contains a magic number: while (pillar.KeepRunning ()) {  	try {  		if (!_connected) {  			Connect ();  		}  		if (_session != null && _producer != null && _consumer != null) {  			// Send a message  			ITextMessage request = _session.CreateTextMessage ("Ping");  			_producer.Send (request);  			// Consume a message  			ITextMessage message = null;  			//Wait five seconds before   			message = _consumer.Receive (new TimeSpan (0' 0' 5)) as ITextMessage;  			if (message != null) {  				PillarMonitorLog.Debug (BrokerOK);  				WriteToEventLog (EventLogEntryType.Information' BrokerOK);  			}  			else {  				PillarMonitorLog.Error ("Broker not OK - message not received");  				WriteToEventLog (EventLogEntryType.Error' BrokerNOK);  			}  			//Flush  			do {  				message = _consumer.ReceiveNoWait () as ITextMessage;  			}  			while (message != null);  		}  	}  	catch (Exception e) {  		_connected = false;  		PillarMonitorLog.Error (BrokerNOK);  		GeneralLog.Error (BrokerNOK' e);  	}  	for (int i = 0; i < 60 && pillar.KeepRunning (); i++) {  		Thread.Sleep (1000);  	}  }  
Magic Number,PillarAPI,PillarMonitor,C:\repos\raknasa_BMPPillar\taskPillar\PillarMonitor.cs,DoWork,The following statement contains a magic number: while (pillar.KeepRunning ()) {  	try {  		if (!_connected) {  			Connect ();  		}  		if (_session != null && _producer != null && _consumer != null) {  			// Send a message  			ITextMessage request = _session.CreateTextMessage ("Ping");  			_producer.Send (request);  			// Consume a message  			ITextMessage message = null;  			//Wait five seconds before   			message = _consumer.Receive (new TimeSpan (0' 0' 5)) as ITextMessage;  			if (message != null) {  				PillarMonitorLog.Debug (BrokerOK);  				WriteToEventLog (EventLogEntryType.Information' BrokerOK);  			}  			else {  				PillarMonitorLog.Error ("Broker not OK - message not received");  				WriteToEventLog (EventLogEntryType.Error' BrokerNOK);  			}  			//Flush  			do {  				message = _consumer.ReceiveNoWait () as ITextMessage;  			}  			while (message != null);  		}  	}  	catch (Exception e) {  		_connected = false;  		PillarMonitorLog.Error (BrokerNOK);  		GeneralLog.Error (BrokerNOK' e);  	}  	for (int i = 0; i < 60 && pillar.KeepRunning (); i++) {  		Thread.Sleep (1000);  	}  }  
Magic Number,PillarAPI,PillarMonitor,C:\repos\raknasa_BMPPillar\taskPillar\PillarMonitor.cs,DoWork,The following statement contains a magic number: while (pillar.KeepRunning ()) {  	try {  		if (!_connected) {  			Connect ();  		}  		if (_session != null && _producer != null && _consumer != null) {  			// Send a message  			ITextMessage request = _session.CreateTextMessage ("Ping");  			_producer.Send (request);  			// Consume a message  			ITextMessage message = null;  			//Wait five seconds before   			message = _consumer.Receive (new TimeSpan (0' 0' 5)) as ITextMessage;  			if (message != null) {  				PillarMonitorLog.Debug (BrokerOK);  				WriteToEventLog (EventLogEntryType.Information' BrokerOK);  			}  			else {  				PillarMonitorLog.Error ("Broker not OK - message not received");  				WriteToEventLog (EventLogEntryType.Error' BrokerNOK);  			}  			//Flush  			do {  				message = _consumer.ReceiveNoWait () as ITextMessage;  			}  			while (message != null);  		}  	}  	catch (Exception e) {  		_connected = false;  		PillarMonitorLog.Error (BrokerNOK);  		GeneralLog.Error (BrokerNOK' e);  	}  	for (int i = 0; i < 60 && pillar.KeepRunning (); i++) {  		Thread.Sleep (1000);  	}  }  
Magic Number,PillarAPI,PillarMonitor,C:\repos\raknasa_BMPPillar\taskPillar\PillarMonitor.cs,DoWork,The following statement contains a magic number: try {  	if (!_connected) {  		Connect ();  	}  	if (_session != null && _producer != null && _consumer != null) {  		// Send a message  		ITextMessage request = _session.CreateTextMessage ("Ping");  		_producer.Send (request);  		// Consume a message  		ITextMessage message = null;  		//Wait five seconds before   		message = _consumer.Receive (new TimeSpan (0' 0' 5)) as ITextMessage;  		if (message != null) {  			PillarMonitorLog.Debug (BrokerOK);  			WriteToEventLog (EventLogEntryType.Information' BrokerOK);  		}  		else {  			PillarMonitorLog.Error ("Broker not OK - message not received");  			WriteToEventLog (EventLogEntryType.Error' BrokerNOK);  		}  		//Flush  		do {  			message = _consumer.ReceiveNoWait () as ITextMessage;  		}  		while (message != null);  	}  }  catch (Exception e) {  	_connected = false;  	PillarMonitorLog.Error (BrokerNOK);  	GeneralLog.Error (BrokerNOK' e);  }  
Magic Number,PillarAPI,PillarMonitor,C:\repos\raknasa_BMPPillar\taskPillar\PillarMonitor.cs,DoWork,The following statement contains a magic number: if (_session != null && _producer != null && _consumer != null) {  	// Send a message  	ITextMessage request = _session.CreateTextMessage ("Ping");  	_producer.Send (request);  	// Consume a message  	ITextMessage message = null;  	//Wait five seconds before   	message = _consumer.Receive (new TimeSpan (0' 0' 5)) as ITextMessage;  	if (message != null) {  		PillarMonitorLog.Debug (BrokerOK);  		WriteToEventLog (EventLogEntryType.Information' BrokerOK);  	}  	else {  		PillarMonitorLog.Error ("Broker not OK - message not received");  		WriteToEventLog (EventLogEntryType.Error' BrokerNOK);  	}  	//Flush  	do {  		message = _consumer.ReceiveNoWait () as ITextMessage;  	}  	while (message != null);  }  
Magic Number,PillarAPI,PillarMonitor,C:\repos\raknasa_BMPPillar\taskPillar\PillarMonitor.cs,DoWork,The following statement contains a magic number: message = _consumer.Receive (new TimeSpan (0' 0' 5)) as ITextMessage;  
Magic Number,PillarAPI,PillarMonitor,C:\repos\raknasa_BMPPillar\taskPillar\PillarMonitor.cs,DoWork,The following statement contains a magic number: for (int i = 0; i < 60 && pillar.KeepRunning (); i++) {  	Thread.Sleep (1000);  }  
Magic Number,PillarAPI,PillarMonitor,C:\repos\raknasa_BMPPillar\taskPillar\PillarMonitor.cs,DoWork,The following statement contains a magic number: for (int i = 0; i < 60 && pillar.KeepRunning (); i++) {  	Thread.Sleep (1000);  }  
Magic Number,PillarAPI,PillarMonitor,C:\repos\raknasa_BMPPillar\taskPillar\PillarMonitor.cs,DoWork,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,PillarAPI,Pillar,C:\repos\raknasa_BMPPillar\taskPillar\Pillar.cs,Initialize,The following statement contains a magic number: while (_keepRunning) {  	Application.DoEvents ();  	Thread.Sleep (100);  }  
Magic Number,PillarAPI,Pillar,C:\repos\raknasa_BMPPillar\taskPillar\Pillar.cs,Initialize,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,PillarAPI,IdentifyPillarsGeneralTopicListener,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyPillarsGeneralTopicListener.cs,DoWorkGeneralTopic,The following statement contains a magic number: while (!token.IsCancellationRequested) {  	Thread.Sleep (100);  }  
Magic Number,PillarAPI,IdentifyPillarsGeneralTopicListener,C:\repos\raknasa_BMPPillar\taskPillar\IdentifyPillarsGeneralTopicListener.cs,DoWorkGeneralTopic,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,PillarAPI,PillarQueueListener,C:\repos\raknasa_BMPPillar\taskPillar\PillarQueueListener.cs,DoWorkSAPillarQueue,The following statement contains a magic number: while (!token.IsCancellationRequested) {  	Thread.Sleep (500);  }  
Magic Number,PillarAPI,PillarQueueListener,C:\repos\raknasa_BMPPillar\taskPillar\PillarQueueListener.cs,DoWorkSAPillarQueue,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,Database,The following statement contains a magic number: _sharedConnectionDepth = 2;  
Magic Number,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (value == null) {  	p.Value = DBNull.Value;  }  else {  	// Give the database type first crack at converting to DB required type  	value = _dbType.MapParameterValue (value);  	Type t = value.GetType ();  	if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int  	 {  		p.Value = (int)value;  	}  	else if (t == typeof(Guid)) {  		p.Value = value.ToString ();  		p.DbType = DbType.String;  		p.Size = 40;  	}  	else if (t == typeof(string)) {  		// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  		if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  			p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  		p.Size = Math.Max ((value as string).Length + 1' 4000);  		// Help query plan caching by using common size  		p.Value = value;  	}  	else if (t == typeof(AnsiString)) {  		// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  		p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  		p.Value = (value as AnsiString).Value;  		p.DbType = DbType.AnsiString;  	}  	else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  		//geography is the equivalent SQL Server Type  		p.Value = value;  	}  	else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  		//geography is the equivalent SQL Server Type  		p.Value = value;  	}  	else {  		p.Value = value;  	}  }  
Magic Number,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (value == null) {  	p.Value = DBNull.Value;  }  else {  	// Give the database type first crack at converting to DB required type  	value = _dbType.MapParameterValue (value);  	Type t = value.GetType ();  	if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int  	 {  		p.Value = (int)value;  	}  	else if (t == typeof(Guid)) {  		p.Value = value.ToString ();  		p.DbType = DbType.String;  		p.Size = 40;  	}  	else if (t == typeof(string)) {  		// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  		if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  			p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  		p.Size = Math.Max ((value as string).Length + 1' 4000);  		// Help query plan caching by using common size  		p.Value = value;  	}  	else if (t == typeof(AnsiString)) {  		// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  		p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  		p.Value = (value as AnsiString).Value;  		p.DbType = DbType.AnsiString;  	}  	else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  		//geography is the equivalent SQL Server Type  		p.Value = value;  	}  	else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  		//geography is the equivalent SQL Server Type  		p.Value = value;  	}  	else {  		p.Value = value;  	}  }  
Magic Number,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (value == null) {  	p.Value = DBNull.Value;  }  else {  	// Give the database type first crack at converting to DB required type  	value = _dbType.MapParameterValue (value);  	Type t = value.GetType ();  	if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int  	 {  		p.Value = (int)value;  	}  	else if (t == typeof(Guid)) {  		p.Value = value.ToString ();  		p.DbType = DbType.String;  		p.Size = 40;  	}  	else if (t == typeof(string)) {  		// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  		if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  			p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  		p.Size = Math.Max ((value as string).Length + 1' 4000);  		// Help query plan caching by using common size  		p.Value = value;  	}  	else if (t == typeof(AnsiString)) {  		// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  		p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  		p.Value = (value as AnsiString).Value;  		p.DbType = DbType.AnsiString;  	}  	else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  		//geography is the equivalent SQL Server Type  		p.Value = value;  	}  	else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  		//geography is the equivalent SQL Server Type  		p.Value = value;  	}  	else {  		p.Value = value;  	}  }  
Magic Number,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (value == null) {  	p.Value = DBNull.Value;  }  else {  	// Give the database type first crack at converting to DB required type  	value = _dbType.MapParameterValue (value);  	Type t = value.GetType ();  	if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int  	 {  		p.Value = (int)value;  	}  	else if (t == typeof(Guid)) {  		p.Value = value.ToString ();  		p.DbType = DbType.String;  		p.Size = 40;  	}  	else if (t == typeof(string)) {  		// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  		if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  			p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  		p.Size = Math.Max ((value as string).Length + 1' 4000);  		// Help query plan caching by using common size  		p.Value = value;  	}  	else if (t == typeof(AnsiString)) {  		// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  		p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  		p.Value = (value as AnsiString).Value;  		p.DbType = DbType.AnsiString;  	}  	else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  		//geography is the equivalent SQL Server Type  		p.Value = value;  	}  	else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  		//geography is the equivalent SQL Server Type  		p.Value = value;  	}  	else {  		p.Value = value;  	}  }  
Magic Number,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int   {  	p.Value = (int)value;  }  else if (t == typeof(Guid)) {  	p.Value = value.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  	if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  		p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  	p.Size = Math.Max ((value as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = value;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int   {  	p.Value = (int)value;  }  else if (t == typeof(Guid)) {  	p.Value = value.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  	if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  		p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  	p.Size = Math.Max ((value as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = value;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int   {  	p.Value = (int)value;  }  else if (t == typeof(Guid)) {  	p.Value = value.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  	if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  		p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  	p.Size = Math.Max ((value as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = value;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int   {  	p.Value = (int)value;  }  else if (t == typeof(Guid)) {  	p.Value = value.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  	if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  		p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  	p.Size = Math.Max ((value as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = value;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(Guid)) {  	p.Value = value.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  	if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  		p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  	p.Size = Math.Max ((value as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = value;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(Guid)) {  	p.Value = value.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  	if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  		p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  	p.Size = Math.Max ((value as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = value;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(Guid)) {  	p.Value = value.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  	if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  		p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  	p.Size = Math.Max ((value as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = value;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(Guid)) {  	p.Value = value.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  	if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  		p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  	p.Size = Math.Max ((value as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = value;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: p.Size = 40;  
Magic Number,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(string)) {  	// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  	if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  		p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  	p.Size = Math.Max ((value as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = value;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(string)) {  	// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  	if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  		p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  	p.Size = Math.Max ((value as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = value;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(string)) {  	// out of memory exception occurs if trying to save more than 4000 characters to SQL Server CE NText column. Set before attempting to set Size' or Size will always max out at 4000  	if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  		p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  	p.Size = Math.Max ((value as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = value;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if ((value as string).Length + 1 > 4000 && p.GetType ().Name == "SqlCeParameter")  	p.GetType ().GetProperty ("SqlDbType").SetValue (p' SqlDbType.NText' null);  
Magic Number,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: p.Size = Math.Max ((value as string).Length + 1' 4000);  
Magic Number,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  	p.Value = (value as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (value.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else if (value.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = value;  }  else {  	p.Value = value;  }  
Magic Number,PetaPoco,Database,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: p.Size = Math.Max ((value as AnsiString).Value.Length + 1' 4000);  
Magic Number,PetaPoco,Sql,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,Build,The following statement contains a magic number: if (!String.IsNullOrEmpty (_sql)) {  	// Add SQL to the string  	if (sb.Length > 0) {  		sb.Append ("\n");  	}  	string sql = ParametersHelper.ProcessParams (_sql' _args' args);  	if (Is (lhs' "WHERE ") && Is (this' "WHERE "))  		sql = "AND " + sql.Substring (6);  	if (Is (lhs' "ORDER BY ") && Is (this' "ORDER BY "))  		sql = "' " + sql.Substring (9);  	sb.Append (sql);  }  
Magic Number,PetaPoco,Sql,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,Build,The following statement contains a magic number: if (!String.IsNullOrEmpty (_sql)) {  	// Add SQL to the string  	if (sb.Length > 0) {  		sb.Append ("\n");  	}  	string sql = ParametersHelper.ProcessParams (_sql' _args' args);  	if (Is (lhs' "WHERE ") && Is (this' "WHERE "))  		sql = "AND " + sql.Substring (6);  	if (Is (lhs' "ORDER BY ") && Is (this' "ORDER BY "))  		sql = "' " + sql.Substring (9);  	sb.Append (sql);  }  
Magic Number,PetaPoco,Sql,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,Build,The following statement contains a magic number: if (Is (lhs' "WHERE ") && Is (this' "WHERE "))  	sql = "AND " + sql.Substring (6);  
Magic Number,PetaPoco,Sql,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,Build,The following statement contains a magic number: sql = "AND " + sql.Substring (6);  
Magic Number,PetaPoco,Sql,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,Build,The following statement contains a magic number: if (Is (lhs' "ORDER BY ") && Is (this' "ORDER BY "))  	sql = "' " + sql.Substring (9);  
Magic Number,PetaPoco,Sql,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,Build,The following statement contains a magic number: sql = "' " + sql.Substring (9);  
Magic Number,Internal,ArrayKey,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,ArrayKey,The following statement contains a magic number: _hashCode = 17;  
Magic Number,Internal,ArrayKey,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,ArrayKey,The following statement contains a magic number: foreach (T k in keys) {  	_hashCode = _hashCode * 23 + (k == null ? 0 : k.GetHashCode ());  }  
Magic Number,Internal,ArrayKey,C:\repos\raknasa_BMPPillar\taskPillar\Models\PetaPoco.cs,ArrayKey,The following statement contains a magic number: _hashCode = _hashCode * 23 + (k == null ? 0 : k.GetHashCode ());  
Missing Default,PillarAPI.Utilities,ChecksumUtilities,C:\repos\raknasa_BMPPillar\taskPillar\Utilities\ChecksumUtilities.cs,CalculateChecksum,The following switch statement is missing a default case: switch (chkType) {  case ChecksumType.MD5:  	using (MD5 md5 = MD5.Create ()) {  		hashResultArray = md5.ComputeHash (file);  	}  	break;  case ChecksumType.SHA1:  	using (SHA1 sha1 = new SHA1Managed ()) {  		hashResultArray = sha1.ComputeHash (file);  	}  	break;  case ChecksumType.SHA256:  	using (SHA256 sha256 = new SHA256Managed ()) {  		hashResultArray = sha256.ComputeHash (file);  	}  	break;  case ChecksumType.SHA384:  	using (SHA384 sha384 = new SHA384Managed ()) {  		hashResultArray = sha384.ComputeHash (file);  	}  	break;  case ChecksumType.SHA512:  	using (SHA512 sha512 = new SHA512Managed ()) {  		hashResultArray = sha512.ComputeHash (file);  	}  	break;  case ChecksumType.HMAC_MD5:  	using (var hmacmd5 = new HMACMD5 (saltArray)) {  		hashResultArray = hmacmd5.ComputeHash (file);  	}  	break;  case ChecksumType.HMAC_SHA1:  	using (var hmacsha1 = new HMACSHA1 (saltArray)) {  		hashResultArray = hmacsha1.ComputeHash (file);  	}  	break;  case ChecksumType.HMAC_SHA256:  	using (var hmacsha256 = new HMACSHA256 (saltArray)) {  		hashResultArray = hmacsha256.ComputeHash (file);  	}  	break;  case ChecksumType.HMAC_SHA384:  	using (var hmacsha384 = new HMACSHA384 (saltArray)) {  		hashResultArray = hmacsha384.ComputeHash (file);  	}  	break;  case ChecksumType.HMAC_SHA512:  	using (var hmacsha512 = new HMACSHA512 (saltArray)) {  		hashResultArray = hmacsha512.ComputeHash (file);  	}  	break;  }  
