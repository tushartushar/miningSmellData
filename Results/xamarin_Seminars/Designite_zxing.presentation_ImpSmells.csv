Implementation smell,Namespace,Class,File,Method,Description
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceRGB,The following statement contains a magic number: var stepX = (bitmap.Format.BitsPerPixel + 7) / 8;
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceRGB,The following statement contains a magic number: var stepX = (bitmap.Format.BitsPerPixel + 7) / 8;
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceRGB,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var r = buffer[curX];                 var g = buffer[curX + 1];                 var b = buffer[curX + 2];                 luminances[luminanceIndex] = (byte)                    (0.3 * r + 0.59 * g + 0.11 * b + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceRGB,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var r = buffer[curX];                 var g = buffer[curX + 1];                 var b = buffer[curX + 2];                 luminances[luminanceIndex] = (byte)                    (0.3 * r + 0.59 * g + 0.11 * b + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceRGB,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var r = buffer[curX];                 var g = buffer[curX + 1];                 var b = buffer[curX + 2];                 luminances[luminanceIndex] = (byte)                    (0.3 * r + 0.59 * g + 0.11 * b + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceRGB,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var r = buffer[curX];                 var g = buffer[curX + 1];                 var b = buffer[curX + 2];                 luminances[luminanceIndex] = (byte)                    (0.3 * r + 0.59 * g + 0.11 * b + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceRGB,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var r = buffer[curX];                 var g = buffer[curX + 1];                 var b = buffer[curX + 2];                 luminances[luminanceIndex] = (byte)                    (0.3 * r + 0.59 * g + 0.11 * b + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR,The following statement contains a magic number: var stepX = (bitmap.Format.BitsPerPixel + 7) / 8;
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR,The following statement contains a magic number: var stepX = (bitmap.Format.BitsPerPixel + 7) / 8;
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var b = buffer[curX];                 var g = buffer[curX + 1];                 var r = buffer[curX + 2];                 luminances[luminanceIndex] = (byte)                    (0.3 * r + 0.59 * g + 0.11 * b + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var b = buffer[curX];                 var g = buffer[curX + 1];                 var r = buffer[curX + 2];                 luminances[luminanceIndex] = (byte)                    (0.3 * r + 0.59 * g + 0.11 * b + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var b = buffer[curX];                 var g = buffer[curX + 1];                 var r = buffer[curX + 2];                 luminances[luminanceIndex] = (byte)                    (0.3 * r + 0.59 * g + 0.11 * b + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var b = buffer[curX];                 var g = buffer[curX + 1];                 var r = buffer[curX + 2];                 luminances[luminanceIndex] = (byte)                    (0.3 * r + 0.59 * g + 0.11 * b + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var b = buffer[curX];                 var g = buffer[curX + 1];                 var r = buffer[curX + 2];                 luminances[luminanceIndex] = (byte)                    (0.3 * r + 0.59 * g + 0.11 * b + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: var stepX = (bitmap.Format.BitsPerPixel + 7) / 8;
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: var stepX = (bitmap.Format.BitsPerPixel + 7) / 8;
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var b = buffer[curX];                 var g = buffer[curX + 1];                 var r = buffer[curX + 2];                 var luminance = (byte)                    (0.3 * r + 0.59 * g + 0.11 * b + 0.01);                 var alpha = buffer[curX + 3];                 luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));                 luminances[luminanceIndex] = luminance;                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var b = buffer[curX];                 var g = buffer[curX + 1];                 var r = buffer[curX + 2];                 var luminance = (byte)                    (0.3 * r + 0.59 * g + 0.11 * b + 0.01);                 var alpha = buffer[curX + 3];                 luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));                 luminances[luminanceIndex] = luminance;                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var b = buffer[curX];                 var g = buffer[curX + 1];                 var r = buffer[curX + 2];                 var luminance = (byte)                    (0.3 * r + 0.59 * g + 0.11 * b + 0.01);                 var alpha = buffer[curX + 3];                 luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));                 luminances[luminanceIndex] = luminance;                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var b = buffer[curX];                 var g = buffer[curX + 1];                 var r = buffer[curX + 2];                 var luminance = (byte)                    (0.3 * r + 0.59 * g + 0.11 * b + 0.01);                 var alpha = buffer[curX + 3];                 luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));                 luminances[luminanceIndex] = luminance;                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var b = buffer[curX];                 var g = buffer[curX + 1];                 var r = buffer[curX + 2];                 var luminance = (byte)                    (0.3 * r + 0.59 * g + 0.11 * b + 0.01);                 var alpha = buffer[curX + 3];                 luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));                 luminances[luminanceIndex] = luminance;                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var b = buffer[curX];                 var g = buffer[curX + 1];                 var r = buffer[curX + 2];                 var luminance = (byte)                    (0.3 * r + 0.59 * g + 0.11 * b + 0.01);                 var alpha = buffer[curX + 3];                 luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));                 luminances[luminanceIndex] = luminance;                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var b = buffer[curX];                 var g = buffer[curX + 1];                 var r = buffer[curX + 2];                 var luminance = (byte)                    (0.3 * r + 0.59 * g + 0.11 * b + 0.01);                 var alpha = buffer[curX + 3];                 luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));                 luminances[luminanceIndex] = luminance;                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var b = buffer[curX];                 var g = buffer[curX + 1];                 var r = buffer[curX + 2];                 var luminance = (byte)                    (0.3 * r + 0.59 * g + 0.11 * b + 0.01);                 var alpha = buffer[curX + 3];                 luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));                 luminances[luminanceIndex] = luminance;                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var b = buffer[curX];                 var g = buffer[curX + 1];                 var r = buffer[curX + 2];                 var luminance = (byte)                    (0.3 * r + 0.59 * g + 0.11 * b + 0.01);                 var alpha = buffer[curX + 3];                 luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));                 luminances[luminanceIndex] = luminance;                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var b = buffer[curX];                 var g = buffer[curX + 1];                 var r = buffer[curX + 2];                 var luminance = (byte)                    (0.3 * r + 0.59 * g + 0.11 * b + 0.01);                 var alpha = buffer[curX + 3];                 luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));                 luminances[luminanceIndex] = luminance;                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: var stepX = (bitmap.Format.BitsPerPixel + 7) / 8;
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: var stepX = (bitmap.Format.BitsPerPixel + 7) / 8;
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var byte1 = buffer[curX];                 var byte2 = buffer[curX + 1];                   var b5 = byte1 & 0x1F;                 var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;                 var r5 = (byte2 >> 2) & 0x1F;                 var r8 = (r5 * 527 + 23) >> 6;                 var g8 = (g5 * 527 + 23) >> 6;                 var b8 = (b5 * 527 + 23) >> 6;                   // cheap' not fully accurate conversion                 //var pixel = (byte2 << 8) | byte1;                 //b8 = (((pixel) & 0x001F) << 3);                 //g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;                 //r8 = (((pixel) & 0xF800) >> 8);                   luminances[luminanceIndex] = (byte)                    (0.3 * r8 + 0.59 * g8 + 0.11 * b8 + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var byte1 = buffer[curX];                 var byte2 = buffer[curX + 1];                   var b5 = byte1 & 0x1F;                 var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;                 var r5 = (byte2 >> 2) & 0x1F;                 var r8 = (r5 * 527 + 23) >> 6;                 var g8 = (g5 * 527 + 23) >> 6;                 var b8 = (b5 * 527 + 23) >> 6;                   // cheap' not fully accurate conversion                 //var pixel = (byte2 << 8) | byte1;                 //b8 = (((pixel) & 0x001F) << 3);                 //g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;                 //r8 = (((pixel) & 0xF800) >> 8);                   luminances[luminanceIndex] = (byte)                    (0.3 * r8 + 0.59 * g8 + 0.11 * b8 + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var byte1 = buffer[curX];                 var byte2 = buffer[curX + 1];                   var b5 = byte1 & 0x1F;                 var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;                 var r5 = (byte2 >> 2) & 0x1F;                 var r8 = (r5 * 527 + 23) >> 6;                 var g8 = (g5 * 527 + 23) >> 6;                 var b8 = (b5 * 527 + 23) >> 6;                   // cheap' not fully accurate conversion                 //var pixel = (byte2 << 8) | byte1;                 //b8 = (((pixel) & 0x001F) << 3);                 //g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;                 //r8 = (((pixel) & 0xF800) >> 8);                   luminances[luminanceIndex] = (byte)                    (0.3 * r8 + 0.59 * g8 + 0.11 * b8 + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var byte1 = buffer[curX];                 var byte2 = buffer[curX + 1];                   var b5 = byte1 & 0x1F;                 var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;                 var r5 = (byte2 >> 2) & 0x1F;                 var r8 = (r5 * 527 + 23) >> 6;                 var g8 = (g5 * 527 + 23) >> 6;                 var b8 = (b5 * 527 + 23) >> 6;                   // cheap' not fully accurate conversion                 //var pixel = (byte2 << 8) | byte1;                 //b8 = (((pixel) & 0x001F) << 3);                 //g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;                 //r8 = (((pixel) & 0xF800) >> 8);                   luminances[luminanceIndex] = (byte)                    (0.3 * r8 + 0.59 * g8 + 0.11 * b8 + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var byte1 = buffer[curX];                 var byte2 = buffer[curX + 1];                   var b5 = byte1 & 0x1F;                 var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;                 var r5 = (byte2 >> 2) & 0x1F;                 var r8 = (r5 * 527 + 23) >> 6;                 var g8 = (g5 * 527 + 23) >> 6;                 var b8 = (b5 * 527 + 23) >> 6;                   // cheap' not fully accurate conversion                 //var pixel = (byte2 << 8) | byte1;                 //b8 = (((pixel) & 0x001F) << 3);                 //g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;                 //r8 = (((pixel) & 0xF800) >> 8);                   luminances[luminanceIndex] = (byte)                    (0.3 * r8 + 0.59 * g8 + 0.11 * b8 + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var byte1 = buffer[curX];                 var byte2 = buffer[curX + 1];                   var b5 = byte1 & 0x1F;                 var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;                 var r5 = (byte2 >> 2) & 0x1F;                 var r8 = (r5 * 527 + 23) >> 6;                 var g8 = (g5 * 527 + 23) >> 6;                 var b8 = (b5 * 527 + 23) >> 6;                   // cheap' not fully accurate conversion                 //var pixel = (byte2 << 8) | byte1;                 //b8 = (((pixel) & 0x001F) << 3);                 //g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;                 //r8 = (((pixel) & 0xF800) >> 8);                   luminances[luminanceIndex] = (byte)                    (0.3 * r8 + 0.59 * g8 + 0.11 * b8 + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var byte1 = buffer[curX];                 var byte2 = buffer[curX + 1];                   var b5 = byte1 & 0x1F;                 var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;                 var r5 = (byte2 >> 2) & 0x1F;                 var r8 = (r5 * 527 + 23) >> 6;                 var g8 = (g5 * 527 + 23) >> 6;                 var b8 = (b5 * 527 + 23) >> 6;                   // cheap' not fully accurate conversion                 //var pixel = (byte2 << 8) | byte1;                 //b8 = (((pixel) & 0x001F) << 3);                 //g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;                 //r8 = (((pixel) & 0xF800) >> 8);                   luminances[luminanceIndex] = (byte)                    (0.3 * r8 + 0.59 * g8 + 0.11 * b8 + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var byte1 = buffer[curX];                 var byte2 = buffer[curX + 1];                   var b5 = byte1 & 0x1F;                 var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;                 var r5 = (byte2 >> 2) & 0x1F;                 var r8 = (r5 * 527 + 23) >> 6;                 var g8 = (g5 * 527 + 23) >> 6;                 var b8 = (b5 * 527 + 23) >> 6;                   // cheap' not fully accurate conversion                 //var pixel = (byte2 << 8) | byte1;                 //b8 = (((pixel) & 0x001F) << 3);                 //g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;                 //r8 = (((pixel) & 0xF800) >> 8);                   luminances[luminanceIndex] = (byte)                    (0.3 * r8 + 0.59 * g8 + 0.11 * b8 + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var byte1 = buffer[curX];                 var byte2 = buffer[curX + 1];                   var b5 = byte1 & 0x1F;                 var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;                 var r5 = (byte2 >> 2) & 0x1F;                 var r8 = (r5 * 527 + 23) >> 6;                 var g8 = (g5 * 527 + 23) >> 6;                 var b8 = (b5 * 527 + 23) >> 6;                   // cheap' not fully accurate conversion                 //var pixel = (byte2 << 8) | byte1;                 //b8 = (((pixel) & 0x001F) << 3);                 //g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;                 //r8 = (((pixel) & 0xF800) >> 8);                   luminances[luminanceIndex] = (byte)                    (0.3 * r8 + 0.59 * g8 + 0.11 * b8 + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var byte1 = buffer[curX];                 var byte2 = buffer[curX + 1];                   var b5 = byte1 & 0x1F;                 var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;                 var r5 = (byte2 >> 2) & 0x1F;                 var r8 = (r5 * 527 + 23) >> 6;                 var g8 = (g5 * 527 + 23) >> 6;                 var b8 = (b5 * 527 + 23) >> 6;                   // cheap' not fully accurate conversion                 //var pixel = (byte2 << 8) | byte1;                 //b8 = (((pixel) & 0x001F) << 3);                 //g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;                 //r8 = (((pixel) & 0xF800) >> 8);                   luminances[luminanceIndex] = (byte)                    (0.3 * r8 + 0.59 * g8 + 0.11 * b8 + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var byte1 = buffer[curX];                 var byte2 = buffer[curX + 1];                   var b5 = byte1 & 0x1F;                 var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;                 var r5 = (byte2 >> 2) & 0x1F;                 var r8 = (r5 * 527 + 23) >> 6;                 var g8 = (g5 * 527 + 23) >> 6;                 var b8 = (b5 * 527 + 23) >> 6;                   // cheap' not fully accurate conversion                 //var pixel = (byte2 << 8) | byte1;                 //b8 = (((pixel) & 0x001F) << 3);                 //g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;                 //r8 = (((pixel) & 0xF800) >> 8);                   luminances[luminanceIndex] = (byte)                    (0.3 * r8 + 0.59 * g8 + 0.11 * b8 + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var byte1 = buffer[curX];                 var byte2 = buffer[curX + 1];                   var b5 = byte1 & 0x1F;                 var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;                 var r5 = (byte2 >> 2) & 0x1F;                 var r8 = (r5 * 527 + 23) >> 6;                 var g8 = (g5 * 527 + 23) >> 6;                 var b8 = (b5 * 527 + 23) >> 6;                   // cheap' not fully accurate conversion                 //var pixel = (byte2 << 8) | byte1;                 //b8 = (((pixel) & 0x001F) << 3);                 //g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;                 //r8 = (((pixel) & 0xF800) >> 8);                   luminances[luminanceIndex] = (byte)                    (0.3 * r8 + 0.59 * g8 + 0.11 * b8 + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var byte1 = buffer[curX];                 var byte2 = buffer[curX + 1];                   var b5 = byte1 & 0x1F;                 var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;                 var r5 = (byte2 >> 2) & 0x1F;                 var r8 = (r5 * 527 + 23) >> 6;                 var g8 = (g5 * 527 + 23) >> 6;                 var b8 = (b5 * 527 + 23) >> 6;                   // cheap' not fully accurate conversion                 //var pixel = (byte2 << 8) | byte1;                 //b8 = (((pixel) & 0x001F) << 3);                 //g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;                 //r8 = (((pixel) & 0xF800) >> 8);                   luminances[luminanceIndex] = (byte)                    (0.3 * r8 + 0.59 * g8 + 0.11 * b8 + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var byte1 = buffer[curX];                 var byte2 = buffer[curX + 1];                   var b5 = byte1 & 0x1F;                 var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;                 var r5 = (byte2 >> 2) & 0x1F;                 var r8 = (r5 * 527 + 23) >> 6;                 var g8 = (g5 * 527 + 23) >> 6;                 var b8 = (b5 * 527 + 23) >> 6;                   // cheap' not fully accurate conversion                 //var pixel = (byte2 << 8) | byte1;                 //b8 = (((pixel) & 0x001F) << 3);                 //g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;                 //r8 = (((pixel) & 0xF800) >> 8);                   luminances[luminanceIndex] = (byte)                    (0.3 * r8 + 0.59 * g8 + 0.11 * b8 + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var byte1 = buffer[curX];                 var byte2 = buffer[curX + 1];                   var b5 = byte1 & 0x1F;                 var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;                 var r5 = (byte2 >> 2) & 0x1F;                 var r8 = (r5 * 527 + 23) >> 6;                 var g8 = (g5 * 527 + 23) >> 6;                 var b8 = (b5 * 527 + 23) >> 6;                   // cheap' not fully accurate conversion                 //var pixel = (byte2 << 8) | byte1;                 //b8 = (((pixel) & 0x001F) << 3);                 //g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;                 //r8 = (((pixel) & 0xF800) >> 8);                   luminances[luminanceIndex] = (byte)                    (0.3 * r8 + 0.59 * g8 + 0.11 * b8 + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\xamarin_Seminars\2012-11-29-BarcodeScanning\ZXing.Net.Mobile\src\ZXing.Net\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++)           {              bitmap.CopyPixels(rect' buffer' bufferSize' 0);              for (var curX = 0; curX < bufferSize; curX += stepX)              {                 var byte1 = buffer[curX];                 var byte2 = buffer[curX + 1];                   var b5 = byte1 & 0x1F;                 var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;                 var r5 = (byte2 >> 2) & 0x1F;                 var r8 = (r5 * 527 + 23) >> 6;                 var g8 = (g5 * 527 + 23) >> 6;                 var b8 = (b5 * 527 + 23) >> 6;                   // cheap' not fully accurate conversion                 //var pixel = (byte2 << 8) | byte1;                 //b8 = (((pixel) & 0x001F) << 3);                 //g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;                 //r8 = (((pixel) & 0xF800) >> 8);                   luminances[luminanceIndex] = (byte)                    (0.3 * r8 + 0.59 * g8 + 0.11 * b8 + 0.01);                 luminanceIndex++;              }              rect.Y++;           }
