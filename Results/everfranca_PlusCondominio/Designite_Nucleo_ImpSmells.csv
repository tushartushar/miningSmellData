Implementation smell,Namespace,Class,File,Method,Description
Long Method,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The method has 105 lines of code.
Complex Method,Nucleo,Mapeador,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Mapeador.cs,DefineInstanciaClasse,Cyclomatic complexity of the method is 11
Complex Method,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,Cyclomatic complexity of the method is 16
Long Statement,Nucleo,EnumDescription,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\EnumDescription.cs,GetEnumDescription,The length of the statement  "	DescriptionAttribute[] attributes = (DescriptionAttribute[])fi.GetCustomAttributes (typeof(DescriptionAttribute)' false); " is 121.
Long Statement,Nucleo,Mapeador,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Mapeador.cs,DefineInstanciaClasse,The length of the statement  "		throw new Exception (string.Format ("Verifique o tipo da propriedade [{0}] na classe [{1}]' pois {2}."' atributoCustomizado.NomeCampo' classInstance.GetType ().Name' exc.Message)); " is 180.
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: if (cpf.Length != 11)  	return false;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: try {  	// Quebra cada digito do CPF  	n [0] = Convert.ToInt32 (cpf.Substring (0' 1));  	n [1] = Convert.ToInt32 (cpf.Substring (1' 1));  	n [2] = Convert.ToInt32 (cpf.Substring (2' 1));  	n [3] = Convert.ToInt32 (cpf.Substring (3' 1));  	n [4] = Convert.ToInt32 (cpf.Substring (4' 1));  	n [5] = Convert.ToInt32 (cpf.Substring (5' 1));  	n [6] = Convert.ToInt32 (cpf.Substring (6' 1));  	n [7] = Convert.ToInt32 (cpf.Substring (7' 1));  	n [8] = Convert.ToInt32 (cpf.Substring (8' 1));  	n [9] = Convert.ToInt32 (cpf.Substring (9' 1));  	n [10] = Convert.ToInt32 (cpf.Substring (10' 1));  }  catch {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: try {  	// Quebra cada digito do CPF  	n [0] = Convert.ToInt32 (cpf.Substring (0' 1));  	n [1] = Convert.ToInt32 (cpf.Substring (1' 1));  	n [2] = Convert.ToInt32 (cpf.Substring (2' 1));  	n [3] = Convert.ToInt32 (cpf.Substring (3' 1));  	n [4] = Convert.ToInt32 (cpf.Substring (4' 1));  	n [5] = Convert.ToInt32 (cpf.Substring (5' 1));  	n [6] = Convert.ToInt32 (cpf.Substring (6' 1));  	n [7] = Convert.ToInt32 (cpf.Substring (7' 1));  	n [8] = Convert.ToInt32 (cpf.Substring (8' 1));  	n [9] = Convert.ToInt32 (cpf.Substring (9' 1));  	n [10] = Convert.ToInt32 (cpf.Substring (10' 1));  }  catch {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: try {  	// Quebra cada digito do CPF  	n [0] = Convert.ToInt32 (cpf.Substring (0' 1));  	n [1] = Convert.ToInt32 (cpf.Substring (1' 1));  	n [2] = Convert.ToInt32 (cpf.Substring (2' 1));  	n [3] = Convert.ToInt32 (cpf.Substring (3' 1));  	n [4] = Convert.ToInt32 (cpf.Substring (4' 1));  	n [5] = Convert.ToInt32 (cpf.Substring (5' 1));  	n [6] = Convert.ToInt32 (cpf.Substring (6' 1));  	n [7] = Convert.ToInt32 (cpf.Substring (7' 1));  	n [8] = Convert.ToInt32 (cpf.Substring (8' 1));  	n [9] = Convert.ToInt32 (cpf.Substring (9' 1));  	n [10] = Convert.ToInt32 (cpf.Substring (10' 1));  }  catch {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: try {  	// Quebra cada digito do CPF  	n [0] = Convert.ToInt32 (cpf.Substring (0' 1));  	n [1] = Convert.ToInt32 (cpf.Substring (1' 1));  	n [2] = Convert.ToInt32 (cpf.Substring (2' 1));  	n [3] = Convert.ToInt32 (cpf.Substring (3' 1));  	n [4] = Convert.ToInt32 (cpf.Substring (4' 1));  	n [5] = Convert.ToInt32 (cpf.Substring (5' 1));  	n [6] = Convert.ToInt32 (cpf.Substring (6' 1));  	n [7] = Convert.ToInt32 (cpf.Substring (7' 1));  	n [8] = Convert.ToInt32 (cpf.Substring (8' 1));  	n [9] = Convert.ToInt32 (cpf.Substring (9' 1));  	n [10] = Convert.ToInt32 (cpf.Substring (10' 1));  }  catch {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: try {  	// Quebra cada digito do CPF  	n [0] = Convert.ToInt32 (cpf.Substring (0' 1));  	n [1] = Convert.ToInt32 (cpf.Substring (1' 1));  	n [2] = Convert.ToInt32 (cpf.Substring (2' 1));  	n [3] = Convert.ToInt32 (cpf.Substring (3' 1));  	n [4] = Convert.ToInt32 (cpf.Substring (4' 1));  	n [5] = Convert.ToInt32 (cpf.Substring (5' 1));  	n [6] = Convert.ToInt32 (cpf.Substring (6' 1));  	n [7] = Convert.ToInt32 (cpf.Substring (7' 1));  	n [8] = Convert.ToInt32 (cpf.Substring (8' 1));  	n [9] = Convert.ToInt32 (cpf.Substring (9' 1));  	n [10] = Convert.ToInt32 (cpf.Substring (10' 1));  }  catch {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: try {  	// Quebra cada digito do CPF  	n [0] = Convert.ToInt32 (cpf.Substring (0' 1));  	n [1] = Convert.ToInt32 (cpf.Substring (1' 1));  	n [2] = Convert.ToInt32 (cpf.Substring (2' 1));  	n [3] = Convert.ToInt32 (cpf.Substring (3' 1));  	n [4] = Convert.ToInt32 (cpf.Substring (4' 1));  	n [5] = Convert.ToInt32 (cpf.Substring (5' 1));  	n [6] = Convert.ToInt32 (cpf.Substring (6' 1));  	n [7] = Convert.ToInt32 (cpf.Substring (7' 1));  	n [8] = Convert.ToInt32 (cpf.Substring (8' 1));  	n [9] = Convert.ToInt32 (cpf.Substring (9' 1));  	n [10] = Convert.ToInt32 (cpf.Substring (10' 1));  }  catch {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: try {  	// Quebra cada digito do CPF  	n [0] = Convert.ToInt32 (cpf.Substring (0' 1));  	n [1] = Convert.ToInt32 (cpf.Substring (1' 1));  	n [2] = Convert.ToInt32 (cpf.Substring (2' 1));  	n [3] = Convert.ToInt32 (cpf.Substring (3' 1));  	n [4] = Convert.ToInt32 (cpf.Substring (4' 1));  	n [5] = Convert.ToInt32 (cpf.Substring (5' 1));  	n [6] = Convert.ToInt32 (cpf.Substring (6' 1));  	n [7] = Convert.ToInt32 (cpf.Substring (7' 1));  	n [8] = Convert.ToInt32 (cpf.Substring (8' 1));  	n [9] = Convert.ToInt32 (cpf.Substring (9' 1));  	n [10] = Convert.ToInt32 (cpf.Substring (10' 1));  }  catch {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: try {  	// Quebra cada digito do CPF  	n [0] = Convert.ToInt32 (cpf.Substring (0' 1));  	n [1] = Convert.ToInt32 (cpf.Substring (1' 1));  	n [2] = Convert.ToInt32 (cpf.Substring (2' 1));  	n [3] = Convert.ToInt32 (cpf.Substring (3' 1));  	n [4] = Convert.ToInt32 (cpf.Substring (4' 1));  	n [5] = Convert.ToInt32 (cpf.Substring (5' 1));  	n [6] = Convert.ToInt32 (cpf.Substring (6' 1));  	n [7] = Convert.ToInt32 (cpf.Substring (7' 1));  	n [8] = Convert.ToInt32 (cpf.Substring (8' 1));  	n [9] = Convert.ToInt32 (cpf.Substring (9' 1));  	n [10] = Convert.ToInt32 (cpf.Substring (10' 1));  }  catch {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: try {  	// Quebra cada digito do CPF  	n [0] = Convert.ToInt32 (cpf.Substring (0' 1));  	n [1] = Convert.ToInt32 (cpf.Substring (1' 1));  	n [2] = Convert.ToInt32 (cpf.Substring (2' 1));  	n [3] = Convert.ToInt32 (cpf.Substring (3' 1));  	n [4] = Convert.ToInt32 (cpf.Substring (4' 1));  	n [5] = Convert.ToInt32 (cpf.Substring (5' 1));  	n [6] = Convert.ToInt32 (cpf.Substring (6' 1));  	n [7] = Convert.ToInt32 (cpf.Substring (7' 1));  	n [8] = Convert.ToInt32 (cpf.Substring (8' 1));  	n [9] = Convert.ToInt32 (cpf.Substring (9' 1));  	n [10] = Convert.ToInt32 (cpf.Substring (10' 1));  }  catch {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: try {  	// Quebra cada digito do CPF  	n [0] = Convert.ToInt32 (cpf.Substring (0' 1));  	n [1] = Convert.ToInt32 (cpf.Substring (1' 1));  	n [2] = Convert.ToInt32 (cpf.Substring (2' 1));  	n [3] = Convert.ToInt32 (cpf.Substring (3' 1));  	n [4] = Convert.ToInt32 (cpf.Substring (4' 1));  	n [5] = Convert.ToInt32 (cpf.Substring (5' 1));  	n [6] = Convert.ToInt32 (cpf.Substring (6' 1));  	n [7] = Convert.ToInt32 (cpf.Substring (7' 1));  	n [8] = Convert.ToInt32 (cpf.Substring (8' 1));  	n [9] = Convert.ToInt32 (cpf.Substring (9' 1));  	n [10] = Convert.ToInt32 (cpf.Substring (10' 1));  }  catch {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: try {  	// Quebra cada digito do CPF  	n [0] = Convert.ToInt32 (cpf.Substring (0' 1));  	n [1] = Convert.ToInt32 (cpf.Substring (1' 1));  	n [2] = Convert.ToInt32 (cpf.Substring (2' 1));  	n [3] = Convert.ToInt32 (cpf.Substring (3' 1));  	n [4] = Convert.ToInt32 (cpf.Substring (4' 1));  	n [5] = Convert.ToInt32 (cpf.Substring (5' 1));  	n [6] = Convert.ToInt32 (cpf.Substring (6' 1));  	n [7] = Convert.ToInt32 (cpf.Substring (7' 1));  	n [8] = Convert.ToInt32 (cpf.Substring (8' 1));  	n [9] = Convert.ToInt32 (cpf.Substring (9' 1));  	n [10] = Convert.ToInt32 (cpf.Substring (10' 1));  }  catch {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: try {  	// Quebra cada digito do CPF  	n [0] = Convert.ToInt32 (cpf.Substring (0' 1));  	n [1] = Convert.ToInt32 (cpf.Substring (1' 1));  	n [2] = Convert.ToInt32 (cpf.Substring (2' 1));  	n [3] = Convert.ToInt32 (cpf.Substring (3' 1));  	n [4] = Convert.ToInt32 (cpf.Substring (4' 1));  	n [5] = Convert.ToInt32 (cpf.Substring (5' 1));  	n [6] = Convert.ToInt32 (cpf.Substring (6' 1));  	n [7] = Convert.ToInt32 (cpf.Substring (7' 1));  	n [8] = Convert.ToInt32 (cpf.Substring (8' 1));  	n [9] = Convert.ToInt32 (cpf.Substring (9' 1));  	n [10] = Convert.ToInt32 (cpf.Substring (10' 1));  }  catch {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: try {  	// Quebra cada digito do CPF  	n [0] = Convert.ToInt32 (cpf.Substring (0' 1));  	n [1] = Convert.ToInt32 (cpf.Substring (1' 1));  	n [2] = Convert.ToInt32 (cpf.Substring (2' 1));  	n [3] = Convert.ToInt32 (cpf.Substring (3' 1));  	n [4] = Convert.ToInt32 (cpf.Substring (4' 1));  	n [5] = Convert.ToInt32 (cpf.Substring (5' 1));  	n [6] = Convert.ToInt32 (cpf.Substring (6' 1));  	n [7] = Convert.ToInt32 (cpf.Substring (7' 1));  	n [8] = Convert.ToInt32 (cpf.Substring (8' 1));  	n [9] = Convert.ToInt32 (cpf.Substring (9' 1));  	n [10] = Convert.ToInt32 (cpf.Substring (10' 1));  }  catch {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: try {  	// Quebra cada digito do CPF  	n [0] = Convert.ToInt32 (cpf.Substring (0' 1));  	n [1] = Convert.ToInt32 (cpf.Substring (1' 1));  	n [2] = Convert.ToInt32 (cpf.Substring (2' 1));  	n [3] = Convert.ToInt32 (cpf.Substring (3' 1));  	n [4] = Convert.ToInt32 (cpf.Substring (4' 1));  	n [5] = Convert.ToInt32 (cpf.Substring (5' 1));  	n [6] = Convert.ToInt32 (cpf.Substring (6' 1));  	n [7] = Convert.ToInt32 (cpf.Substring (7' 1));  	n [8] = Convert.ToInt32 (cpf.Substring (8' 1));  	n [9] = Convert.ToInt32 (cpf.Substring (9' 1));  	n [10] = Convert.ToInt32 (cpf.Substring (10' 1));  }  catch {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: try {  	// Quebra cada digito do CPF  	n [0] = Convert.ToInt32 (cpf.Substring (0' 1));  	n [1] = Convert.ToInt32 (cpf.Substring (1' 1));  	n [2] = Convert.ToInt32 (cpf.Substring (2' 1));  	n [3] = Convert.ToInt32 (cpf.Substring (3' 1));  	n [4] = Convert.ToInt32 (cpf.Substring (4' 1));  	n [5] = Convert.ToInt32 (cpf.Substring (5' 1));  	n [6] = Convert.ToInt32 (cpf.Substring (6' 1));  	n [7] = Convert.ToInt32 (cpf.Substring (7' 1));  	n [8] = Convert.ToInt32 (cpf.Substring (8' 1));  	n [9] = Convert.ToInt32 (cpf.Substring (9' 1));  	n [10] = Convert.ToInt32 (cpf.Substring (10' 1));  }  catch {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: try {  	// Quebra cada digito do CPF  	n [0] = Convert.ToInt32 (cpf.Substring (0' 1));  	n [1] = Convert.ToInt32 (cpf.Substring (1' 1));  	n [2] = Convert.ToInt32 (cpf.Substring (2' 1));  	n [3] = Convert.ToInt32 (cpf.Substring (3' 1));  	n [4] = Convert.ToInt32 (cpf.Substring (4' 1));  	n [5] = Convert.ToInt32 (cpf.Substring (5' 1));  	n [6] = Convert.ToInt32 (cpf.Substring (6' 1));  	n [7] = Convert.ToInt32 (cpf.Substring (7' 1));  	n [8] = Convert.ToInt32 (cpf.Substring (8' 1));  	n [9] = Convert.ToInt32 (cpf.Substring (9' 1));  	n [10] = Convert.ToInt32 (cpf.Substring (10' 1));  }  catch {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: try {  	// Quebra cada digito do CPF  	n [0] = Convert.ToInt32 (cpf.Substring (0' 1));  	n [1] = Convert.ToInt32 (cpf.Substring (1' 1));  	n [2] = Convert.ToInt32 (cpf.Substring (2' 1));  	n [3] = Convert.ToInt32 (cpf.Substring (3' 1));  	n [4] = Convert.ToInt32 (cpf.Substring (4' 1));  	n [5] = Convert.ToInt32 (cpf.Substring (5' 1));  	n [6] = Convert.ToInt32 (cpf.Substring (6' 1));  	n [7] = Convert.ToInt32 (cpf.Substring (7' 1));  	n [8] = Convert.ToInt32 (cpf.Substring (8' 1));  	n [9] = Convert.ToInt32 (cpf.Substring (9' 1));  	n [10] = Convert.ToInt32 (cpf.Substring (10' 1));  }  catch {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: try {  	// Quebra cada digito do CPF  	n [0] = Convert.ToInt32 (cpf.Substring (0' 1));  	n [1] = Convert.ToInt32 (cpf.Substring (1' 1));  	n [2] = Convert.ToInt32 (cpf.Substring (2' 1));  	n [3] = Convert.ToInt32 (cpf.Substring (3' 1));  	n [4] = Convert.ToInt32 (cpf.Substring (4' 1));  	n [5] = Convert.ToInt32 (cpf.Substring (5' 1));  	n [6] = Convert.ToInt32 (cpf.Substring (6' 1));  	n [7] = Convert.ToInt32 (cpf.Substring (7' 1));  	n [8] = Convert.ToInt32 (cpf.Substring (8' 1));  	n [9] = Convert.ToInt32 (cpf.Substring (9' 1));  	n [10] = Convert.ToInt32 (cpf.Substring (10' 1));  }  catch {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: n [2] = Convert.ToInt32 (cpf.Substring (2' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: n [2] = Convert.ToInt32 (cpf.Substring (2' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: n [3] = Convert.ToInt32 (cpf.Substring (3' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: n [3] = Convert.ToInt32 (cpf.Substring (3' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: n [4] = Convert.ToInt32 (cpf.Substring (4' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: n [4] = Convert.ToInt32 (cpf.Substring (4' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: n [5] = Convert.ToInt32 (cpf.Substring (5' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: n [5] = Convert.ToInt32 (cpf.Substring (5' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: n [6] = Convert.ToInt32 (cpf.Substring (6' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: n [6] = Convert.ToInt32 (cpf.Substring (6' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: n [7] = Convert.ToInt32 (cpf.Substring (7' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: n [7] = Convert.ToInt32 (cpf.Substring (7' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: n [8] = Convert.ToInt32 (cpf.Substring (8' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: n [8] = Convert.ToInt32 (cpf.Substring (8' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: n [9] = Convert.ToInt32 (cpf.Substring (9' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: n [9] = Convert.ToInt32 (cpf.Substring (9' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: n [10] = Convert.ToInt32 (cpf.Substring (10' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: n [10] = Convert.ToInt32 (cpf.Substring (10' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: if (resto == 1 || resto == 0)  	d1 = 0;  else  	d1 = 11 - resto;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: d1 = 11 - resto;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: resto = soma % 11;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: if (resto == 1 || resto == 0)  	d2 = 0;  else  	d2 = 11 - resto;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: d2 = 11 - resto;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: digitado = n [9].ToString () + n [10].ToString ();  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following statement contains a magic number: digitado = n [9].ToString () + n [10].ToString ();  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsCnpj,The following statement contains a magic number: if (cnpj.Length != 14)  	return false;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsCnpj,The following statement contains a magic number: tempCnpj = cnpj.Substring (0' 12);  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsCnpj,The following statement contains a magic number: for (int i = 0; i < 12; i++)  	soma += int.Parse (tempCnpj [i].ToString ()) * multiplicador1 [i];  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsCnpj,The following statement contains a magic number: resto = (soma % 11);  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsCnpj,The following statement contains a magic number: if (resto < 2)  	resto = 0;  else  	resto = 11 - resto;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsCnpj,The following statement contains a magic number: if (resto < 2)  	resto = 0;  else  	resto = 11 - resto;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsCnpj,The following statement contains a magic number: resto = 11 - resto;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsCnpj,The following statement contains a magic number: for (int i = 0; i < 13; i++)  	soma += int.Parse (tempCnpj [i].ToString ()) * multiplicador2 [i];  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsCnpj,The following statement contains a magic number: resto = (soma % 11);  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsCnpj,The following statement contains a magic number: if (resto < 2)  	resto = 0;  else  	resto = 11 - resto;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsCnpj,The following statement contains a magic number: if (resto < 2)  	resto = 0;  else  	resto = 11 - resto;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsCnpj,The following statement contains a magic number: resto = 11 - resto;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if (rg.Length == 9) {  	int[] n = new int[8];  	//obtém cada um dos caracteres do rg  	n [0] = Convert.ToInt32 (rg.Substring (0' 1));  	n [1] = Convert.ToInt32 (rg.Substring (1' 1));  	n [2] = Convert.ToInt32 (rg.Substring (2' 1));  	n [3] = Convert.ToInt32 (rg.Substring (3' 1));  	n [4] = Convert.ToInt32 (rg.Substring (4' 1));  	n [5] = Convert.ToInt32 (rg.Substring (5' 1));  	n [6] = Convert.ToInt32 (rg.Substring (6' 1));  	n [7] = Convert.ToInt32 (rg.Substring (7' 1));  	n [8] = Convert.ToInt32 (rg.Substring (8' 1));  	//Aplica a regra de validação do RG' multiplicando cada digito por valores pré-determinados  	n [0] *= 2;  	n [1] *= 3;  	n [2] *= 4;  	n [3] *= 5;  	n [4] *= 6;  	n [5] *= 7;  	n [6] *= 8;  	n [7] *= 9;  	n [8] *= 100;  	//Valida o RG  	int somaFinal = n [0] + n [1] + n [2] + n [3] + n [4] + n [5] + n [6] + n [7] + n [8];  	if ((somaFinal % 11) == 0) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [2] = Convert.ToInt32 (rg.Substring (2' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [2] = Convert.ToInt32 (rg.Substring (2' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [3] = Convert.ToInt32 (rg.Substring (3' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [3] = Convert.ToInt32 (rg.Substring (3' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [4] = Convert.ToInt32 (rg.Substring (4' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [4] = Convert.ToInt32 (rg.Substring (4' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [5] = Convert.ToInt32 (rg.Substring (5' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [5] = Convert.ToInt32 (rg.Substring (5' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [6] = Convert.ToInt32 (rg.Substring (6' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [6] = Convert.ToInt32 (rg.Substring (6' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [7] = Convert.ToInt32 (rg.Substring (7' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [7] = Convert.ToInt32 (rg.Substring (7' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [8] = Convert.ToInt32 (rg.Substring (8' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [8] = Convert.ToInt32 (rg.Substring (8' 1));  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [0] *= 2;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [1] *= 3;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [2] *= 4;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [2] *= 4;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [3] *= 5;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [3] *= 5;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [4] *= 6;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [4] *= 6;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [5] *= 7;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [5] *= 7;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [6] *= 8;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [6] *= 8;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [7] *= 9;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [7] *= 9;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [8] *= 100;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: n [8] *= 100;  
Magic Number,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,IsRg,The following statement contains a magic number: if ((somaFinal % 11) == 0) {  	return true;  }  else {  	return false;  }  
Missing Default,Nucleo,Validations,C:\repos\everfranca_PlusCondominio\PlusCondominios\Nucleo\Nucleo\Validations.cs,isCPF,The following switch statement is missing a default case: switch (cpf) {  case "11111111111":  	return false;  case "00000000000":  	return false;  case "2222222222":  	return false;  case "33333333333":  	return false;  case "44444444444":  	return false;  case "55555555555":  	return false;  case "66666666666":  	return false;  case "77777777777":  	return false;  case "88888888888":  	return false;  case "99999999999":  	return false;  }  
