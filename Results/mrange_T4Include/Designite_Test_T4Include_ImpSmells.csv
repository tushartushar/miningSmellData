Implementation smell,Namespace,Class,File,Method,Description
Long Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Parse,The method has 218 lines of code.
Long Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Parse,The method has 218 lines of code.
Long Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Parse,The method has 218 lines of code.
Long Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Value_End,The method has 152 lines of code.
Long Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Object_Begin,The method has 109 lines of code.
Long Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Value_End,The method has 152 lines of code.
Long Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Object_Begin,The method has 109 lines of code.
Long Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Value_End,The method has 152 lines of code.
Long Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Object_Begin,The method has 109 lines of code.
Long Method,Source.Text,LineToObjectExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,LineToObject,The method has 150 lines of code.
Long Method,Source.Text,LineToObjectExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,LineToObject,The method has 150 lines of code.
Long Method,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,EqualityImpl,The method has 103 lines of code.
Long Method,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,EqualityImpl,The method has 103 lines of code.
Long Method,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,EqualityImpl,The method has 103 lines of code.
Long Method,Source.Testing,TestRunner,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ExecuteTests,The method has 104 lines of code.
Long Method,Source.Testing,TestRunner,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ExecuteTests,The method has 104 lines of code.
Long Method,Source.Testing,TestRunner,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ExecuteTests,The method has 104 lines of code.
Complex Method,Source.Common,SubStringExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ReadLines,Cyclomatic complexity of the method is 12
Complex Method,Source.Common,SubStringExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ReadLines,Cyclomatic complexity of the method is 12
Complex Method,Source.Common,SubStringExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ReadLines,Cyclomatic complexity of the method is 12
Complex Method,Source.Common,SubStringExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ReadLines,Cyclomatic complexity of the method is 12
Complex Method,Source.Common,SubStringExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ReadLines,Cyclomatic complexity of the method is 12
Complex Method,Source.Common,SubStringExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ReadLines,Cyclomatic complexity of the method is 12
Complex Method,Source.Common,SubStringExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ReadLines,Cyclomatic complexity of the method is 12
Complex Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Parse,Cyclomatic complexity of the method is 28
Complex Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,VisitObject,Cyclomatic complexity of the method is 8
Complex Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,VisitMember,Cyclomatic complexity of the method is 15
Complex Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Parse,Cyclomatic complexity of the method is 28
Complex Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,VisitObject,Cyclomatic complexity of the method is 8
Complex Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,VisitMember,Cyclomatic complexity of the method is 15
Complex Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Parse,Cyclomatic complexity of the method is 28
Complex Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,VisitObject,Cyclomatic complexity of the method is 8
Complex Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,VisitMember,Cyclomatic complexity of the method is 15
Complex Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Value_End,Cyclomatic complexity of the method is 19
Complex Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Object_Begin,Cyclomatic complexity of the method is 15
Complex Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Object_End,Cyclomatic complexity of the method is 9
Complex Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Value_End,Cyclomatic complexity of the method is 19
Complex Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Object_Begin,Cyclomatic complexity of the method is 15
Complex Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Object_End,Cyclomatic complexity of the method is 9
Complex Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Value_End,Cyclomatic complexity of the method is 19
Complex Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Object_Begin,Cyclomatic complexity of the method is 15
Complex Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Object_End,Cyclomatic complexity of the method is 9
Complex Method,Source.Text,LineExtensionMethods,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,TextToLines,Cyclomatic complexity of the method is 16
Complex Method,Source.Text,LineExtensionMethods,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,TextToLines,Cyclomatic complexity of the method is 16
Complex Method,Source.Text,LineToObjectExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,LineToObject,Cyclomatic complexity of the method is 17
Complex Method,Source.Text,LineToObjectExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,LineToObject,Cyclomatic complexity of the method is 17
Complex Method,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,EqualityImpl,Cyclomatic complexity of the method is 10
Complex Method,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,EqualityImpl,Cyclomatic complexity of the method is 10
Complex Method,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,EqualityImpl,Cyclomatic complexity of the method is 10
Long Parameter List,Source.Extensions,EnumerableExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToDictionaryAndResolveDuplicates,The method has 6 parameters. Parameters: values' keySelector' valueSelector' duplicateResolver' capacity' comparer
Long Parameter List,Source.Extensions,EnumerableExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToDictionaryAndResolveDuplicates,The method has 5 parameters. Parameters: values' keySelector' duplicateResolver' capacity' comparer
Long Parameter List,Source.Extensions,EnumerableExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToDictionaryAndKeepFirst,The method has 5 parameters. Parameters: values' keySelector' valueSelector' capacity' comparer
Long Parameter List,Source.Extensions,EnumerableExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToDictionaryAndResolveDuplicates,The method has 6 parameters. Parameters: values' keySelector' valueSelector' duplicateResolver' capacity' comparer
Long Parameter List,Source.Extensions,EnumerableExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToDictionaryAndResolveDuplicates,The method has 5 parameters. Parameters: values' keySelector' duplicateResolver' capacity' comparer
Long Parameter List,Source.Extensions,EnumerableExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToDictionaryAndKeepFirst,The method has 5 parameters. Parameters: values' keySelector' valueSelector' capacity' comparer
Long Parameter List,Source.Extensions,EnumerableExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToDictionaryAndResolveDuplicates,The method has 6 parameters. Parameters: values' keySelector' valueSelector' duplicateResolver' capacity' comparer
Long Parameter List,Source.Extensions,EnumerableExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToDictionaryAndResolveDuplicates,The method has 5 parameters. Parameters: values' keySelector' duplicateResolver' capacity' comparer
Long Parameter List,Source.Extensions,EnumerableExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToDictionaryAndKeepFirst,The method has 5 parameters. Parameters: values' keySelector' valueSelector' capacity' comparer
Long Parameter List,Source.Extensions,EnumerableExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToDictionaryAndResolveDuplicates,The method has 6 parameters. Parameters: values' keySelector' valueSelector' duplicateResolver' capacity' comparer
Long Parameter List,Source.Extensions,EnumerableExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToDictionaryAndResolveDuplicates,The method has 5 parameters. Parameters: values' keySelector' duplicateResolver' capacity' comparer
Long Parameter List,Source.Extensions,EnumerableExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToDictionaryAndKeepFirst,The method has 5 parameters. Parameters: values' keySelector' valueSelector' capacity' comparer
Long Parameter List,Source.Extensions,EnumerableExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToDictionaryAndResolveDuplicates,The method has 6 parameters. Parameters: values' keySelector' valueSelector' duplicateResolver' capacity' comparer
Long Parameter List,Source.Extensions,EnumerableExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToDictionaryAndResolveDuplicates,The method has 5 parameters. Parameters: values' keySelector' duplicateResolver' capacity' comparer
Long Parameter List,Source.Extensions,EnumerableExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToDictionaryAndKeepFirst,The method has 5 parameters. Parameters: values' keySelector' valueSelector' capacity' comparer
Long Parameter List,Source.Extensions,EnumerableExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToDictionaryAndResolveDuplicates,The method has 6 parameters. Parameters: values' keySelector' valueSelector' duplicateResolver' capacity' comparer
Long Parameter List,Source.Extensions,EnumerableExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToDictionaryAndResolveDuplicates,The method has 5 parameters. Parameters: values' keySelector' duplicateResolver' capacity' comparer
Long Parameter List,Source.Extensions,EnumerableExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToDictionaryAndKeepFirst,The method has 5 parameters. Parameters: values' keySelector' valueSelector' capacity' comparer
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF.Debug,BaseDebugTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,CollectionChanged_Tree,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF.Debug,BaseDebugTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,CollectionChanged_Tree,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF.Debug,BaseDebugTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,CollectionChanged_Tree,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF.Debug,BaseDebugTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,CollectionChanged_Tree,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF.Debug,BaseDebugTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,CollectionChanged_Tree,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Statement,Source.Reflection,MemberDescriptor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,GetGetter,The length of the statement  "                if (pi != null && pi.GetGetMethod(nonPublic:true) != null && pi.GetGetMethod(nonPublic:true).GetParameters().Length == 0)" is 121.
Long Statement,Source.Reflection,MemberDescriptor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,GetSetter,The length of the statement  "                if (pi != null && pi.GetSetMethod(nonPublic:true) != null && pi.GetSetMethod(nonPublic:true).GetParameters().Length == 1)" is 121.
Long Statement,Source.Reflection,MemberDescriptor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,GetGetter,The length of the statement  "                if (pi != null && pi.GetGetMethod(nonPublic:true) != null && pi.GetGetMethod(nonPublic:true).GetParameters().Length == 0)" is 121.
Long Statement,Source.Reflection,MemberDescriptor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,GetSetter,The length of the statement  "                if (pi != null && pi.GetSetMethod(nonPublic:true) != null && pi.GetSetMethod(nonPublic:true).GetParameters().Length == 1)" is 121.
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,IsNear,The following statement contains a magic number: return Math.Abs(v - c) < double.Epsilon * 100;
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,GetTree_AsString,The following statement contains a magic number: var sb = new StringBuilder (128);
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,HexColor,The following statement contains a magic number: switch (ch)                 {                     case '0':                     case '1':                     case '2':                     case '3':                     case '4':                     case '5':                     case '6':                     case '7':                     case '8':                     case '9':                         return (byte) (ch - '0');                     case 'a':                     case 'b':                     case 'c':                     case 'd':                     case 'e':                     case 'f':                         return (byte) (ch - 'a' + 10);                     case 'A':                     case 'B':                     case 'C':                     case 'D':                     case 'E':                     case 'F':                         return (byte) (ch - 'A' + 10);                     default:                         return 0;                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,HexColor,The following statement contains a magic number: switch (ch)                 {                     case '0':                     case '1':                     case '2':                     case '3':                     case '4':                     case '5':                     case '6':                     case '7':                     case '8':                     case '9':                         return (byte) (ch - '0');                     case 'a':                     case 'b':                     case 'c':                     case 'd':                     case 'e':                     case 'f':                         return (byte) (ch - 'a' + 10);                     case 'A':                     case 'B':                     case 'C':                     case 'D':                     case 'E':                     case 'F':                         return (byte) (ch - 'A' + 10);                     default:                         return 0;                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ExpandNibble,The following statement contains a magic number: return (byte) (n | (n << 4));
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,IsNear,The following statement contains a magic number: return Math.Abs(v - c) < double.Epsilon * 100;
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,GetTree_AsString,The following statement contains a magic number: var sb = new StringBuilder (128);
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,HexColor,The following statement contains a magic number: switch (ch)                 {                     case '0':                     case '1':                     case '2':                     case '3':                     case '4':                     case '5':                     case '6':                     case '7':                     case '8':                     case '9':                         return (byte) (ch - '0');                     case 'a':                     case 'b':                     case 'c':                     case 'd':                     case 'e':                     case 'f':                         return (byte) (ch - 'a' + 10);                     case 'A':                     case 'B':                     case 'C':                     case 'D':                     case 'E':                     case 'F':                         return (byte) (ch - 'A' + 10);                     default:                         return 0;                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,HexColor,The following statement contains a magic number: switch (ch)                 {                     case '0':                     case '1':                     case '2':                     case '3':                     case '4':                     case '5':                     case '6':                     case '7':                     case '8':                     case '9':                         return (byte) (ch - '0');                     case 'a':                     case 'b':                     case 'c':                     case 'd':                     case 'e':                     case 'f':                         return (byte) (ch - 'a' + 10);                     case 'A':                     case 'B':                     case 'C':                     case 'D':                     case 'E':                     case 'F':                         return (byte) (ch - 'A' + 10);                     default:                         return 0;                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ExpandNibble,The following statement contains a magic number: return (byte) (n | (n << 4));
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,IsNear,The following statement contains a magic number: return Math.Abs(v - c) < double.Epsilon * 100;
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,GetTree_AsString,The following statement contains a magic number: var sb = new StringBuilder (128);
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,HexColor,The following statement contains a magic number: switch (ch)                 {                     case '0':                     case '1':                     case '2':                     case '3':                     case '4':                     case '5':                     case '6':                     case '7':                     case '8':                     case '9':                         return (byte) (ch - '0');                     case 'a':                     case 'b':                     case 'c':                     case 'd':                     case 'e':                     case 'f':                         return (byte) (ch - 'a' + 10);                     case 'A':                     case 'B':                     case 'C':                     case 'D':                     case 'E':                     case 'F':                         return (byte) (ch - 'A' + 10);                     default:                         return 0;                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,HexColor,The following statement contains a magic number: switch (ch)                 {                     case '0':                     case '1':                     case '2':                     case '3':                     case '4':                     case '5':                     case '6':                     case '7':                     case '8':                     case '9':                         return (byte) (ch - '0');                     case 'a':                     case 'b':                     case 'c':                     case 'd':                     case 'e':                     case 'f':                         return (byte) (ch - 'a' + 10);                     case 'A':                     case 'B':                     case 'C':                     case 'D':                     case 'E':                     case 'F':                         return (byte) (ch - 'A' + 10);                     default:                         return 0;                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ExpandNibble,The following statement contains a magic number: return (byte) (n | (n << 4));
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,IsNear,The following statement contains a magic number: return Math.Abs(v - c) < double.Epsilon * 100;
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,GetTree_AsString,The following statement contains a magic number: var sb = new StringBuilder (128);
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,HexColor,The following statement contains a magic number: switch (ch)                 {                     case '0':                     case '1':                     case '2':                     case '3':                     case '4':                     case '5':                     case '6':                     case '7':                     case '8':                     case '9':                         return (byte) (ch - '0');                     case 'a':                     case 'b':                     case 'c':                     case 'd':                     case 'e':                     case 'f':                         return (byte) (ch - 'a' + 10);                     case 'A':                     case 'B':                     case 'C':                     case 'D':                     case 'E':                     case 'F':                         return (byte) (ch - 'A' + 10);                     default:                         return 0;                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,HexColor,The following statement contains a magic number: switch (ch)                 {                     case '0':                     case '1':                     case '2':                     case '3':                     case '4':                     case '5':                     case '6':                     case '7':                     case '8':                     case '9':                         return (byte) (ch - '0');                     case 'a':                     case 'b':                     case 'c':                     case 'd':                     case 'e':                     case 'f':                         return (byte) (ch - 'a' + 10);                     case 'A':                     case 'B':                     case 'C':                     case 'D':                     case 'E':                     case 'F':                         return (byte) (ch - 'A' + 10);                     default:                         return 0;                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ExpandNibble,The following statement contains a magic number: return (byte) (n | (n << 4));
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,IsNear,The following statement contains a magic number: return Math.Abs(v - c) < double.Epsilon * 100;
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,GetTree_AsString,The following statement contains a magic number: var sb = new StringBuilder (128);
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,HexColor,The following statement contains a magic number: switch (ch)                 {                     case '0':                     case '1':                     case '2':                     case '3':                     case '4':                     case '5':                     case '6':                     case '7':                     case '8':                     case '9':                         return (byte) (ch - '0');                     case 'a':                     case 'b':                     case 'c':                     case 'd':                     case 'e':                     case 'f':                         return (byte) (ch - 'a' + 10);                     case 'A':                     case 'B':                     case 'C':                     case 'D':                     case 'E':                     case 'F':                         return (byte) (ch - 'A' + 10);                     default:                         return 0;                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,HexColor,The following statement contains a magic number: switch (ch)                 {                     case '0':                     case '1':                     case '2':                     case '3':                     case '4':                     case '5':                     case '6':                     case '7':                     case '8':                     case '9':                         return (byte) (ch - '0');                     case 'a':                     case 'b':                     case 'c':                     case 'd':                     case 'e':                     case 'f':                         return (byte) (ch - 'a' + 10);                     case 'A':                     case 'B':                     case 'C':                     case 'D':                     case 'E':                     case 'F':                         return (byte) (ch - 'A' + 10);                     default:                         return 0;                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ExpandNibble,The following statement contains a magic number: return (byte) (n | (n << 4));
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,IsNear,The following statement contains a magic number: return Math.Abs(v - c) < double.Epsilon * 100;
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,GetTree_AsString,The following statement contains a magic number: var sb = new StringBuilder (128);
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,HexColor,The following statement contains a magic number: switch (ch)                 {                     case '0':                     case '1':                     case '2':                     case '3':                     case '4':                     case '5':                     case '6':                     case '7':                     case '8':                     case '9':                         return (byte) (ch - '0');                     case 'a':                     case 'b':                     case 'c':                     case 'd':                     case 'e':                     case 'f':                         return (byte) (ch - 'a' + 10);                     case 'A':                     case 'B':                     case 'C':                     case 'D':                     case 'E':                     case 'F':                         return (byte) (ch - 'A' + 10);                     default:                         return 0;                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,HexColor,The following statement contains a magic number: switch (ch)                 {                     case '0':                     case '1':                     case '2':                     case '3':                     case '4':                     case '5':                     case '6':                     case '7':                     case '8':                     case '9':                         return (byte) (ch - '0');                     case 'a':                     case 'b':                     case 'c':                     case 'd':                     case 'e':                     case 'f':                         return (byte) (ch - 'a' + 10);                     case 'A':                     case 'B':                     case 'C':                     case 'D':                     case 'E':                     case 'F':                         return (byte) (ch - 'A' + 10);                     default:                         return 0;                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ExpandNibble,The following statement contains a magic number: return (byte) (n | (n << 4));
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Concurrency,SequentialTaskScheduler,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ShutDown,The following statement contains a magic number: var joinTimeOut = (int)remainingTime.Remaining.TotalMilliseconds/2;
Magic Number,Source.Concurrency,SequentialTaskScheduler,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ShutDown,The following statement contains a magic number: var joinTimeOut = (int)remainingTime.Remaining.TotalMilliseconds/2;
Magic Number,Source.Concurrency,SequentialTaskScheduler,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ShutDown,The following statement contains a magic number: var joinTimeOut = (int)remainingTime.Remaining.TotalMilliseconds/2;
Magic Number,Source.Concurrency,SequentialTaskScheduler,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ShutDown,The following statement contains a magic number: var joinTimeOut = (int)remainingTime.Remaining.TotalMilliseconds/2;
Magic Number,Source.Concurrency,SequentialTaskScheduler,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ShutDown,The following statement contains a magic number: var joinTimeOut = (int)remainingTime.Remaining.TotalMilliseconds/2;
Magic Number,Source.HRON,BaseHRONEntity,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(128);
Magic Number,Source.HRON,BaseHRONEntity,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(128);
Magic Number,Source.HRON,BaseHRONEntity,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(128);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_spokes = Enumerable                     .Range (0' Spokes)                     .Select (x => ((double)x) / Spokes)                     .Select (                         x => new Spoke                             {                                 Transform   = new RotateTransform (360.0 * x).FreezeObject ()   '                                 Offset      = x                                                 '                             })                     .ToArray ();
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     1'                     0'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var radius      = RadiusRatio * min/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var spokeRadius = spokeWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerX = ActualWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerY = ActualHeight / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_spokes = Enumerable                     .Range (0' Spokes)                     .Select (x => ((double)x) / Spokes)                     .Select (                         x => new Spoke                             {                                 Transform   = new RotateTransform (360.0 * x).FreezeObject ()   '                                 Offset      = x                                                 '                             })                     .ToArray ();
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     1'                     0'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var radius      = RadiusRatio * min/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var spokeRadius = spokeWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerX = ActualWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerY = ActualHeight / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_spokes = Enumerable                     .Range (0' Spokes)                     .Select (x => ((double)x) / Spokes)                     .Select (                         x => new Spoke                             {                                 Transform   = new RotateTransform (360.0 * x).FreezeObject ()   '                                 Offset      = x                                                 '                             })                     .ToArray ();
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     1'                     0'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var radius      = RadiusRatio * min/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var spokeRadius = spokeWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerX = ActualWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerY = ActualHeight / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_spokes = Enumerable                     .Range (0' Spokes)                     .Select (x => ((double)x) / Spokes)                     .Select (                         x => new Spoke                             {                                 Transform   = new RotateTransform (360.0 * x).FreezeObject ()   '                                 Offset      = x                                                 '                             })                     .ToArray ();
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     1'                     0'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var radius      = RadiusRatio * min/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var spokeRadius = spokeWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerX = ActualWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerY = ActualHeight / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_spokes = Enumerable                     .Range (0' Spokes)                     .Select (x => ((double)x) / Spokes)                     .Select (                         x => new Spoke                             {                                 Transform   = new RotateTransform (360.0 * x).FreezeObject ()   '                                 Offset      = x                                                 '                             })                     .ToArray ();
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     1'                     0'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var radius      = RadiusRatio * min/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var spokeRadius = spokeWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerX = ActualWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerY = ActualHeight / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_spokes = Enumerable                     .Range (0' Spokes)                     .Select (x => ((double)x) / Spokes)                     .Select (                         x => new Spoke                             {                                 Transform   = new RotateTransform (360.0 * x).FreezeObject ()   '                                 Offset      = x                                                 '                             })                     .ToArray ();
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     1'                     0'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var radius      = RadiusRatio * min/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var spokeRadius = spokeWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerX = ActualWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerY = ActualHeight / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_spokes = Enumerable                     .Range (0' Spokes)                     .Select (x => ((double)x) / Spokes)                     .Select (                         x => new Spoke                             {                                 Transform   = new RotateTransform (360.0 * x).FreezeObject ()   '                                 Offset      = x                                                 '                             })                     .ToArray ();
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     1'                     0'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var radius      = RadiusRatio * min/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var spokeRadius = spokeWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerX = ActualWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerY = ActualHeight / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_spokes = Enumerable                     .Range (0' Spokes)                     .Select (x => ((double)x) / Spokes)                     .Select (                         x => new Spoke                             {                                 Transform   = new RotateTransform (360.0 * x).FreezeObject ()   '                                 Offset      = x                                                 '                             })                     .ToArray ();
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     1'                     0'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var radius      = RadiusRatio * min/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var spokeRadius = spokeWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerX = ActualWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerY = ActualHeight / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_spokes = Enumerable                     .Range (0' Spokes)                     .Select (x => ((double)x) / Spokes)                     .Select (                         x => new Spoke                             {                                 Transform   = new RotateTransform (360.0 * x).FreezeObject ()   '                                 Offset      = x                                                 '                             })                     .ToArray ();
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     1'                     0'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var radius      = RadiusRatio * min/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var spokeRadius = spokeWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerX = ActualWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerY = ActualHeight / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_spokes = Enumerable                     .Range (0' Spokes)                     .Select (x => ((double)x) / Spokes)                     .Select (                         x => new Spoke                             {                                 Transform   = new RotateTransform (360.0 * x).FreezeObject ()   '                                 Offset      = x                                                 '                             })                     .ToArray ();
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     1'                     0'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var radius      = RadiusRatio * min/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var spokeRadius = spokeWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerX = ActualWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerY = ActualHeight / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_spokes = Enumerable                     .Range (0' Spokes)                     .Select (x => ((double)x) / Spokes)                     .Select (                         x => new Spoke                             {                                 Transform   = new RotateTransform (360.0 * x).FreezeObject ()   '                                 Offset      = x                                                 '                             })                     .ToArray ();
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     1'                     0'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var radius      = RadiusRatio * min/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var spokeRadius = spokeWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerX = ActualWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerY = ActualHeight / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_spokes = Enumerable                     .Range (0' Spokes)                     .Select (x => ((double)x) / Spokes)                     .Select (                         x => new Spoke                             {                                 Transform   = new RotateTransform (360.0 * x).FreezeObject ()   '                                 Offset      = x                                                 '                             })                     .ToArray ();
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     1'                     0'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var radius      = RadiusRatio * min/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var spokeRadius = spokeWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerX = ActualWidth / 2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnRender,The following statement contains a magic number: var centerY = ActualHeight / 2;
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF.Debug,DebugContainerControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ShowWindowImpl,The following statement contains a magic number: var window =                      new Window                         {                             Title       = title ?? "Debug"      '                              MinHeight   = 200                   '                             MinWidth    = 320                   '                             Content     = debugContainerControl                         };
Magic Number,Source.WPF.Debug,DebugContainerControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ShowWindowImpl,The following statement contains a magic number: var window =                      new Window                         {                             Title       = title ?? "Debug"      '                              MinHeight   = 200                   '                             MinWidth    = 320                   '                             Content     = debugContainerControl                         };
Magic Number,Source.WPF.Debug,DebugContainerControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ShowWindowImpl,The following statement contains a magic number: var window =                      new Window                         {                             Title       = title ?? "Debug"      '                              MinHeight   = 200                   '                             MinWidth    = 320                   '                             Content     = debugContainerControl                         };
Magic Number,Source.WPF.Debug,DebugContainerControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ShowWindowImpl,The following statement contains a magic number: var window =                      new Window                         {                             Title       = title ?? "Debug"      '                              MinHeight   = 200                   '                             MinWidth    = 320                   '                             Content     = debugContainerControl                         };
Magic Number,Source.WPF.Debug,DebugContainerControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ShowWindowImpl,The following statement contains a magic number: var window =                      new Window                         {                             Title       = title ?? "Debug"      '                              MinHeight   = 200                   '                             MinWidth    = 320                   '                             Content     = debugContainerControl                         };
Magic Number,Source.WPF.Debug,DebugContainerControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ShowWindowImpl,The following statement contains a magic number: var window =                      new Window                         {                             Title       = title ?? "Debug"      '                              MinHeight   = 200                   '                             MinWidth    = 320                   '                             Content     = debugContainerControl                         };
Magic Number,Source.WPF.Debug,DebugContainerControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ShowWindowImpl,The following statement contains a magic number: var window =                      new Window                         {                             Title       = title ?? "Debug"      '                              MinHeight   = 200                   '                             MinWidth    = 320                   '                             Content     = debugContainerControl                         };
Magic Number,Source.WPF.Debug,DebugContainerControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ShowWindowImpl,The following statement contains a magic number: var window =                      new Window                         {                             Title       = title ?? "Debug"      '                              MinHeight   = 200                   '                             MinWidth    = 320                   '                             Content     = debugContainerControl                         };
Magic Number,Source.WPF.Debug,DebugContainerControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ShowWindowImpl,The following statement contains a magic number: var window =                      new Window                         {                             Title       = title ?? "Debug"      '                              MinHeight   = 200                   '                             MinWidth    = 320                   '                             Content     = debugContainerControl                         };
Magic Number,Source.WPF.Debug,DebugContainerControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ShowWindowImpl,The following statement contains a magic number: var window =                      new Window                         {                             Title       = title ?? "Debug"      '                              MinHeight   = 200                   '                             MinWidth    = 320                   '                             Content     = debugContainerControl                         };
Magic Number,Source.WPF.Debug,TreeNode,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuildDescription,The following statement contains a magic number: var sb = new StringBuilder(128);
Magic Number,Source.WPF.Debug,TreeNode,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuildDescription,The following statement contains a magic number: var sb = new StringBuilder(128);
Magic Number,Source.WPF.Debug,TreeNode,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuildDescription,The following statement contains a magic number: var sb = new StringBuilder(128);
Magic Number,Source.WPF.Debug,TreeNode,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuildDescription,The following statement contains a magic number: var sb = new StringBuilder(128);
Magic Number,Source.WPF.Debug,TreeNode,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,BuildDescription,The following statement contains a magic number: var sb = new StringBuilder(128);
Magic Number,Source.WPF.Debug,DebugLogicalTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnGetOrdinal,The following statement contains a magic number: return 2000;
Magic Number,Source.WPF.Debug,DebugLogicalTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnGetOrdinal,The following statement contains a magic number: return 2000;
Magic Number,Source.WPF.Debug,DebugLogicalTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnGetOrdinal,The following statement contains a magic number: return 2000;
Magic Number,Source.WPF.Debug,DebugLogicalTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnGetOrdinal,The following statement contains a magic number: return 2000;
Magic Number,Source.WPF.Debug,DebugLogicalTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnGetOrdinal,The following statement contains a magic number: return 2000;
Magic Number,Source.WPF.Debug,DebugVisualTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnGetOrdinal,The following statement contains a magic number: return 1000;
Magic Number,Source.WPF.Debug,DebugVisualTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnGetOrdinal,The following statement contains a magic number: return 1000;
Magic Number,Source.WPF.Debug,DebugVisualTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnGetOrdinal,The following statement contains a magic number: return 1000;
Magic Number,Source.WPF.Debug,DebugVisualTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnGetOrdinal,The following statement contains a magic number: return 1000;
Magic Number,Source.WPF.Debug,DebugVisualTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,OnGetOrdinal,The following statement contains a magic number: return 1000;
Magic Number,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToString,The following statement contains a magic number: start = start - count/2;
Magic Number,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,EqualityImpl,The following statement contains a magic number: Log.Error("TestFor.Equality: #EXPECTED:{0}' #FOUND:{1} - First diff @{2} - {3}"'                             sExpected.ToString(firstDiff' 16)'                             sFound.ToString(firstDiff' 16)'                             length'                             message                             );
Magic Number,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,EqualityImpl,The following statement contains a magic number: Log.Error("TestFor.Equality: #EXPECTED:{0}' #FOUND:{1} - First diff @{2} - {3}"'                             sExpected.ToString(firstDiff' 16)'                             sFound.ToString(firstDiff' 16)'                             length'                             message                             );
Magic Number,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToString,The following statement contains a magic number: start = start - count/2;
Magic Number,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,EqualityImpl,The following statement contains a magic number: Log.Error("TestFor.Equality: #EXPECTED:{0}' #FOUND:{1} - First diff @{2} - {3}"'                             sExpected.ToString(firstDiff' 16)'                             sFound.ToString(firstDiff' 16)'                             length'                             message                             );
Magic Number,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,EqualityImpl,The following statement contains a magic number: Log.Error("TestFor.Equality: #EXPECTED:{0}' #FOUND:{1} - First diff @{2} - {3}"'                             sExpected.ToString(firstDiff' 16)'                             sFound.ToString(firstDiff' 16)'                             length'                             message                             );
Magic Number,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,ToString,The following statement contains a magic number: start = start - count/2;
Magic Number,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,EqualityImpl,The following statement contains a magic number: Log.Error("TestFor.Equality: #EXPECTED:{0}' #FOUND:{1} - First diff @{2} - {3}"'                             sExpected.ToString(firstDiff' 16)'                             sFound.ToString(firstDiff' 16)'                             length'                             message                             );
Magic Number,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_T4Include\IncludeProject.cs,EqualityImpl,The following statement contains a magic number: Log.Error("TestFor.Equality: #EXPECTED:{0}' #FOUND:{1} - First diff @{2} - {3}"'                             sExpected.ToString(firstDiff' 16)'                             sFound.ToString(firstDiff' 16)'                             length'                             message                             );
