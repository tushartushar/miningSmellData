Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Test_WPF,MainWindow,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\MainWindow.xaml.cs,Connect,Cyclomatic complexity of the method is 9
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF.Debug,BaseDebugTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,CollectionChanged_Tree,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF.Debug,BaseDebugTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,CollectionChanged_Tree,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF.Debug,BaseDebugTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,CollectionChanged_Tree,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF.Debug,BaseDebugTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,CollectionChanged_Tree,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF.Debug,BaseDebugTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,CollectionChanged_Tree,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Statement,Test_WPF,MainWindow,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\MainWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.StackPanel)(target)).AddHandler(System.Windows.Controls.Primitives.ButtonBase.ClickEvent' new System.Windows.RoutedEventHandler(this.Button_Click)); " is 174.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Magic Number,Test_WPF,MainWindow,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Buzy = ((FileInclude.Source.WPF.BuzyWait)(target));              return;              case 2:              this.Cnt = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 20 "..\..\MainWindow.xaml"              ((System.Windows.Controls.StackPanel)(target)).AddHandler(System.Windows.Controls.Primitives.ButtonBase.ClickEvent' new System.Windows.RoutedEventHandler(this.Button_Click));                            #line default              #line hidden              return;              case 4:              this.AE = ((FileInclude.Source.WPF.AnimatedEntrance)(target));              return;              case 5:              this.First = ((FileInclude.Source.WPF.AccordionPanel)(target));              return;              case 6:              this.Second = ((System.Windows.Controls.Border)(target));              return;              case 7:              this.Third = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.Fourth = ((System.Windows.Controls.Grid)(target));              return;              case 9:              this.Fifth = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Test_WPF,MainWindow,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Buzy = ((FileInclude.Source.WPF.BuzyWait)(target));              return;              case 2:              this.Cnt = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 20 "..\..\MainWindow.xaml"              ((System.Windows.Controls.StackPanel)(target)).AddHandler(System.Windows.Controls.Primitives.ButtonBase.ClickEvent' new System.Windows.RoutedEventHandler(this.Button_Click));                            #line default              #line hidden              return;              case 4:              this.AE = ((FileInclude.Source.WPF.AnimatedEntrance)(target));              return;              case 5:              this.First = ((FileInclude.Source.WPF.AccordionPanel)(target));              return;              case 6:              this.Second = ((System.Windows.Controls.Border)(target));              return;              case 7:              this.Third = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.Fourth = ((System.Windows.Controls.Grid)(target));              return;              case 9:              this.Fifth = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Test_WPF,MainWindow,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Buzy = ((FileInclude.Source.WPF.BuzyWait)(target));              return;              case 2:              this.Cnt = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 20 "..\..\MainWindow.xaml"              ((System.Windows.Controls.StackPanel)(target)).AddHandler(System.Windows.Controls.Primitives.ButtonBase.ClickEvent' new System.Windows.RoutedEventHandler(this.Button_Click));                            #line default              #line hidden              return;              case 4:              this.AE = ((FileInclude.Source.WPF.AnimatedEntrance)(target));              return;              case 5:              this.First = ((FileInclude.Source.WPF.AccordionPanel)(target));              return;              case 6:              this.Second = ((System.Windows.Controls.Border)(target));              return;              case 7:              this.Third = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.Fourth = ((System.Windows.Controls.Grid)(target));              return;              case 9:              this.Fifth = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Test_WPF,MainWindow,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Buzy = ((FileInclude.Source.WPF.BuzyWait)(target));              return;              case 2:              this.Cnt = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 20 "..\..\MainWindow.xaml"              ((System.Windows.Controls.StackPanel)(target)).AddHandler(System.Windows.Controls.Primitives.ButtonBase.ClickEvent' new System.Windows.RoutedEventHandler(this.Button_Click));                            #line default              #line hidden              return;              case 4:              this.AE = ((FileInclude.Source.WPF.AnimatedEntrance)(target));              return;              case 5:              this.First = ((FileInclude.Source.WPF.AccordionPanel)(target));              return;              case 6:              this.Second = ((System.Windows.Controls.Border)(target));              return;              case 7:              this.Third = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.Fourth = ((System.Windows.Controls.Grid)(target));              return;              case 9:              this.Fifth = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Test_WPF,MainWindow,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Buzy = ((FileInclude.Source.WPF.BuzyWait)(target));              return;              case 2:              this.Cnt = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 20 "..\..\MainWindow.xaml"              ((System.Windows.Controls.StackPanel)(target)).AddHandler(System.Windows.Controls.Primitives.ButtonBase.ClickEvent' new System.Windows.RoutedEventHandler(this.Button_Click));                            #line default              #line hidden              return;              case 4:              this.AE = ((FileInclude.Source.WPF.AnimatedEntrance)(target));              return;              case 5:              this.First = ((FileInclude.Source.WPF.AccordionPanel)(target));              return;              case 6:              this.Second = ((System.Windows.Controls.Border)(target));              return;              case 7:              this.Third = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.Fourth = ((System.Windows.Controls.Grid)(target));              return;              case 9:              this.Fifth = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Test_WPF,MainWindow,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Buzy = ((FileInclude.Source.WPF.BuzyWait)(target));              return;              case 2:              this.Cnt = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 20 "..\..\MainWindow.xaml"              ((System.Windows.Controls.StackPanel)(target)).AddHandler(System.Windows.Controls.Primitives.ButtonBase.ClickEvent' new System.Windows.RoutedEventHandler(this.Button_Click));                            #line default              #line hidden              return;              case 4:              this.AE = ((FileInclude.Source.WPF.AnimatedEntrance)(target));              return;              case 5:              this.First = ((FileInclude.Source.WPF.AccordionPanel)(target));              return;              case 6:              this.Second = ((System.Windows.Controls.Border)(target));              return;              case 7:              this.Third = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.Fourth = ((System.Windows.Controls.Grid)(target));              return;              case 9:              this.Fifth = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Test_WPF,MainWindow,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Buzy = ((FileInclude.Source.WPF.BuzyWait)(target));              return;              case 2:              this.Cnt = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 20 "..\..\MainWindow.xaml"              ((System.Windows.Controls.StackPanel)(target)).AddHandler(System.Windows.Controls.Primitives.ButtonBase.ClickEvent' new System.Windows.RoutedEventHandler(this.Button_Click));                            #line default              #line hidden              return;              case 4:              this.AE = ((FileInclude.Source.WPF.AnimatedEntrance)(target));              return;              case 5:              this.First = ((FileInclude.Source.WPF.AccordionPanel)(target));              return;              case 6:              this.Second = ((System.Windows.Controls.Border)(target));              return;              case 7:              this.Third = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.Fourth = ((System.Windows.Controls.Grid)(target));              return;              case 9:              this.Fifth = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Test_WPF,MainWindow,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Buzy = ((FileInclude.Source.WPF.BuzyWait)(target));              return;              case 2:              this.Cnt = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 20 "..\..\MainWindow.xaml"              ((System.Windows.Controls.StackPanel)(target)).AddHandler(System.Windows.Controls.Primitives.ButtonBase.ClickEvent' new System.Windows.RoutedEventHandler(this.Button_Click));                            #line default              #line hidden              return;              case 4:              this.AE = ((FileInclude.Source.WPF.AnimatedEntrance)(target));              return;              case 5:              this.First = ((FileInclude.Source.WPF.AccordionPanel)(target));              return;              case 6:              this.Second = ((System.Windows.Controls.Border)(target));              return;              case 7:              this.Third = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.Fourth = ((System.Windows.Controls.Grid)(target));              return;              case 9:              this.Fifth = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                     new GradientStopCollection                         {                             new GradientStop (Colors.Transparent                ' 0     )'                                 new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                                 new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                                 new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                                 new GradientStop (Colors.Black                      ' 1     )'                             }'                     90                     ).FreezeObject ();
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: drawingContext.PushTransform (new RotateTransform (360.0 * t));
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: drawingContext.DrawRoundedRectangle(                             Brushes.White'                             null'                             new Rect(MinRadius' -WidthRadius/2' RadiusRadius - MinRadius' WidthRadius)'                             WidthRadius'                             WidthRadius                             );
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     0'                     1'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var halfWidth = ActualWidth/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var halfHeight = ActualHeight/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var angle = -(step*360.0)/Spokes;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: drawingContext.PushTransform (new RotateTransform (360.0 * t));
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: drawingContext.DrawRoundedRectangle(                             Brushes.White'                             null'                             new Rect(MinRadius' -WidthRadius/2' RadiusRadius - MinRadius' WidthRadius)'                             WidthRadius'                             WidthRadius                             );
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     0'                     1'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var halfWidth = ActualWidth/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var halfHeight = ActualHeight/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var angle = -(step*360.0)/Spokes;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: drawingContext.PushTransform (new RotateTransform (360.0 * t));
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: drawingContext.DrawRoundedRectangle(                             Brushes.White'                             null'                             new Rect(MinRadius' -WidthRadius/2' RadiusRadius - MinRadius' WidthRadius)'                             WidthRadius'                             WidthRadius                             );
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     0'                     1'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var halfWidth = ActualWidth/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var halfHeight = ActualHeight/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var angle = -(step*360.0)/Spokes;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: drawingContext.PushTransform (new RotateTransform (360.0 * t));
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: drawingContext.DrawRoundedRectangle(                             Brushes.White'                             null'                             new Rect(MinRadius' -WidthRadius/2' RadiusRadius - MinRadius' WidthRadius)'                             WidthRadius'                             WidthRadius                             );
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     0'                     1'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var halfWidth = ActualWidth/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var halfHeight = ActualHeight/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var angle = -(step*360.0)/Spokes;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: drawingContext.PushTransform (new RotateTransform (360.0 * t));
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: drawingContext.DrawRoundedRectangle(                             Brushes.White'                             null'                             new Rect(MinRadius' -WidthRadius/2' RadiusRadius - MinRadius' WidthRadius)'                             WidthRadius'                             WidthRadius                             );
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     0'                     1'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var halfWidth = ActualWidth/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var halfHeight = ActualHeight/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var angle = -(step*360.0)/Spokes;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: drawingContext.PushTransform (new RotateTransform (360.0 * t));
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: drawingContext.DrawRoundedRectangle(                             Brushes.White'                             null'                             new Rect(MinRadius' -WidthRadius/2' RadiusRadius - MinRadius' WidthRadius)'                             WidthRadius'                             WidthRadius                             );
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     0'                     1'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var halfWidth = ActualWidth/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var halfHeight = ActualHeight/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var angle = -(step*360.0)/Spokes;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: drawingContext.PushTransform (new RotateTransform (360.0 * t));
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: drawingContext.DrawRoundedRectangle(                             Brushes.White'                             null'                             new Rect(MinRadius' -WidthRadius/2' RadiusRadius - MinRadius' WidthRadius)'                             WidthRadius'                             WidthRadius                             );
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     0'                     1'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var halfWidth = ActualWidth/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var halfHeight = ActualHeight/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var angle = -(step*360.0)/Spokes;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: drawingContext.PushTransform (new RotateTransform (360.0 * t));
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: drawingContext.DrawRoundedRectangle(                             Brushes.White'                             null'                             new Rect(MinRadius' -WidthRadius/2' RadiusRadius - MinRadius' WidthRadius)'                             WidthRadius'                             WidthRadius                             );
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     0'                     1'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var halfWidth = ActualWidth/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var halfHeight = ActualHeight/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var angle = -(step*360.0)/Spokes;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: drawingContext.PushTransform (new RotateTransform (360.0 * t));
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: drawingContext.DrawRoundedRectangle(                             Brushes.White'                             null'                             new Rect(MinRadius' -WidthRadius/2' RadiusRadius - MinRadius' WidthRadius)'                             WidthRadius'                             WidthRadius                             );
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     0'                     1'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var halfWidth = ActualWidth/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var halfHeight = ActualHeight/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var angle = -(step*360.0)/Spokes;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: drawingContext.PushTransform (new RotateTransform (360.0 * t));
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: drawingContext.DrawRoundedRectangle(                             Brushes.White'                             null'                             new Rect(MinRadius' -WidthRadius/2' RadiusRadius - MinRadius' WidthRadius)'                             WidthRadius'                             WidthRadius                             );
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     0'                     1'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var halfWidth = ActualWidth/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var halfHeight = ActualHeight/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var angle = -(step*360.0)/Spokes;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: drawingContext.PushTransform (new RotateTransform (360.0 * t));
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: drawingContext.DrawRoundedRectangle(                             Brushes.White'                             null'                             new Rect(MinRadius' -WidthRadius/2' RadiusRadius - MinRadius' WidthRadius)'                             WidthRadius'                             WidthRadius                             );
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                     0'                     1'                     new Duration (TimeSpan.FromSeconds(2))                     )                     {                         RepeatBehavior = RepeatBehavior.Forever                     };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var halfWidth = ActualWidth/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var halfHeight = ActualHeight/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnRender,The following statement contains a magic number: var angle = -(step*360.0)/Spokes;
Magic Number,Source.WPF.Debug,DebugVisualTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnGetOrdinal,The following statement contains a magic number: return 1000;
Magic Number,Source.WPF.Debug,DebugVisualTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnGetOrdinal,The following statement contains a magic number: return 1000;
Magic Number,Source.WPF.Debug,DebugVisualTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnGetOrdinal,The following statement contains a magic number: return 1000;
Magic Number,Source.WPF.Debug,DebugVisualTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnGetOrdinal,The following statement contains a magic number: return 1000;
Magic Number,Source.WPF.Debug,DebugVisualTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnGetOrdinal,The following statement contains a magic number: return 1000;
Magic Number,Source.WPF.Debug,DebugLogicalTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnGetOrdinal,The following statement contains a magic number: return 2000;
Magic Number,Source.WPF.Debug,DebugLogicalTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnGetOrdinal,The following statement contains a magic number: return 2000;
Magic Number,Source.WPF.Debug,DebugLogicalTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnGetOrdinal,The following statement contains a magic number: return 2000;
Magic Number,Source.WPF.Debug,DebugLogicalTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnGetOrdinal,The following statement contains a magic number: return 2000;
Magic Number,Source.WPF.Debug,DebugLogicalTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,OnGetOrdinal,The following statement contains a magic number: return 2000;
Magic Number,Source.WPF.Debug,TreeNode,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuildDescription,The following statement contains a magic number: var sb = new StringBuilder(128);
Magic Number,Source.WPF.Debug,TreeNode,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuildDescription,The following statement contains a magic number: var sb = new StringBuilder(128);
Magic Number,Source.WPF.Debug,TreeNode,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuildDescription,The following statement contains a magic number: var sb = new StringBuilder(128);
Magic Number,Source.WPF.Debug,TreeNode,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuildDescription,The following statement contains a magic number: var sb = new StringBuilder(128);
Magic Number,Source.WPF.Debug,TreeNode,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,BuildDescription,The following statement contains a magic number: var sb = new StringBuilder(128);
Magic Number,Source.WPF.Debug,DebugContainerControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ShowWindowImpl,The following statement contains a magic number: var window =                      new Window                         {                             Title       = title ?? "Debug"      '                              MinHeight   = 200                   '                             MinWidth    = 320                   '                             Content     = debugContainerControl                         };
Magic Number,Source.WPF.Debug,DebugContainerControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ShowWindowImpl,The following statement contains a magic number: var window =                      new Window                         {                             Title       = title ?? "Debug"      '                              MinHeight   = 200                   '                             MinWidth    = 320                   '                             Content     = debugContainerControl                         };
Magic Number,Source.WPF.Debug,DebugContainerControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ShowWindowImpl,The following statement contains a magic number: var window =                      new Window                         {                             Title       = title ?? "Debug"      '                              MinHeight   = 200                   '                             MinWidth    = 320                   '                             Content     = debugContainerControl                         };
Magic Number,Source.WPF.Debug,DebugContainerControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ShowWindowImpl,The following statement contains a magic number: var window =                      new Window                         {                             Title       = title ?? "Debug"      '                              MinHeight   = 200                   '                             MinWidth    = 320                   '                             Content     = debugContainerControl                         };
Magic Number,Source.WPF.Debug,DebugContainerControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ShowWindowImpl,The following statement contains a magic number: var window =                      new Window                         {                             Title       = title ?? "Debug"      '                              MinHeight   = 200                   '                             MinWidth    = 320                   '                             Content     = debugContainerControl                         };
Magic Number,Source.WPF.Debug,DebugContainerControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ShowWindowImpl,The following statement contains a magic number: var window =                      new Window                         {                             Title       = title ?? "Debug"      '                              MinHeight   = 200                   '                             MinWidth    = 320                   '                             Content     = debugContainerControl                         };
Magic Number,Source.WPF.Debug,DebugContainerControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ShowWindowImpl,The following statement contains a magic number: var window =                      new Window                         {                             Title       = title ?? "Debug"      '                              MinHeight   = 200                   '                             MinWidth    = 320                   '                             Content     = debugContainerControl                         };
Magic Number,Source.WPF.Debug,DebugContainerControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ShowWindowImpl,The following statement contains a magic number: var window =                      new Window                         {                             Title       = title ?? "Debug"      '                              MinHeight   = 200                   '                             MinWidth    = 320                   '                             Content     = debugContainerControl                         };
Magic Number,Source.WPF.Debug,DebugContainerControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ShowWindowImpl,The following statement contains a magic number: var window =                      new Window                         {                             Title       = title ?? "Debug"      '                              MinHeight   = 200                   '                             MinWidth    = 320                   '                             Content     = debugContainerControl                         };
Magic Number,Source.WPF.Debug,DebugContainerControl,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ShowWindowImpl,The following statement contains a magic number: var window =                      new Window                         {                             Title       = title ?? "Debug"      '                              MinHeight   = 200                   '                             MinWidth    = 320                   '                             Content     = debugContainerControl                         };
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,IsNear,The following statement contains a magic number: return Math.Abs(v - c) < double.Epsilon * 100;
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,GetTree_AsString,The following statement contains a magic number: var sb = new StringBuilder (128);
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,HexColor,The following statement contains a magic number: switch (ch)                 {                     case '0':                     case '1':                     case '2':                     case '3':                     case '4':                     case '5':                     case '6':                     case '7':                     case '8':                     case '9':                         return (byte) (ch - '0');                     case 'a':                     case 'b':                     case 'c':                     case 'd':                     case 'e':                     case 'f':                         return (byte) (ch - 'a' + 10);                     case 'A':                     case 'B':                     case 'C':                     case 'D':                     case 'E':                     case 'F':                         return (byte) (ch - 'A' + 10);                     default:                         return 0;                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,HexColor,The following statement contains a magic number: switch (ch)                 {                     case '0':                     case '1':                     case '2':                     case '3':                     case '4':                     case '5':                     case '6':                     case '7':                     case '8':                     case '9':                         return (byte) (ch - '0');                     case 'a':                     case 'b':                     case 'c':                     case 'd':                     case 'e':                     case 'f':                         return (byte) (ch - 'a' + 10);                     case 'A':                     case 'B':                     case 'C':                     case 'D':                     case 'E':                     case 'F':                         return (byte) (ch - 'A' + 10);                     default:                         return 0;                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ExpandNibble,The following statement contains a magic number: return (byte) (n | (n << 4));
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\IncludeFiles.cs,ParseColor,The following statement contains a magic number: switch (color.Length)                 {                     default:                         return defaultTo;                     case 4:                         // #FFF                         return Color.FromRgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()                             );                     case 5:                         // #FFFF                         return Color.FromArgb (                             color[1].HexColor().ExpandNibble()'                             color[2].HexColor().ExpandNibble()'                             color[3].HexColor().ExpandNibble()'                             color[4].HexColor().ExpandNibble()                             );                     case 7:                         // #FFFFFF                         return Color.FromRgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                             );                     case 9:                         // #FFFFFFFF                         return Color.FromArgb (                             (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                             (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                             (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                             (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                             );                 }
Missing Default,Test_WPF,MainWindow,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_WPF\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.Buzy = ((FileInclude.Source.WPF.BuzyWait)(target));              return;              case 2:              this.Cnt = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 20 "..\..\MainWindow.xaml"              ((System.Windows.Controls.StackPanel)(target)).AddHandler(System.Windows.Controls.Primitives.ButtonBase.ClickEvent' new System.Windows.RoutedEventHandler(this.Button_Click));                            #line default              #line hidden              return;              case 4:              this.AE = ((FileInclude.Source.WPF.AnimatedEntrance)(target));              return;              case 5:              this.First = ((FileInclude.Source.WPF.AccordionPanel)(target));              return;              case 6:              this.Second = ((System.Windows.Controls.Border)(target));              return;              case 7:              this.Third = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.Fourth = ((System.Windows.Controls.Grid)(target));              return;              case 9:              this.Fifth = ((System.Windows.Controls.Grid)(target));              return;              }
