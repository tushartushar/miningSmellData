Implementation smell,Namespace,Class,File,Method,Description
Long Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\HRON\HRONSerializer.cs,Parse,The method has 218 lines of code.
Long Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\HRON\HRONObjectSerializer.cs,Value_End,The method has 183 lines of code.
Long Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\HRON\HRONObjectSerializer.cs,Object_Begin,The method has 121 lines of code.
Long Method,Source.NuGet,PackageInstaller,C:\research\architectureSmells\repos\mrange_T4Include\NuGet\PackageInstaller.cs,InstallPackages,The method has 115 lines of code.
Long Method,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The method has 195 lines of code.
Long Method,Source.Text,LineToObjectExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Text\LineToObjectExtensions.cs,LineToObject,The method has 150 lines of code.
Long Method,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\Testing\Generated_TestFor.cs,EqualityImpl,The method has 109 lines of code.
Long Method,Source.Testing,TestRunner,C:\research\architectureSmells\repos\mrange_T4Include\Testing\TestRunner.cs,ExecuteTests,The method has 109 lines of code.
Complex Method,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,Cyclomatic complexity of the method is 31
Complex Method,Source.Common,SubStringExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Common\SubString.cs,ReadLines,Cyclomatic complexity of the method is 12
Complex Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\HRON\HRONSerializer.cs,Parse,Cyclomatic complexity of the method is 28
Complex Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\HRON\HRONSerializer.cs,VisitObject,Cyclomatic complexity of the method is 8
Complex Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\HRON\HRONSerializer.cs,VisitMember,Cyclomatic complexity of the method is 15
Complex Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\HRON\HRONObjectSerializer.cs,Value_End,Cyclomatic complexity of the method is 23
Complex Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\HRON\HRONObjectSerializer.cs,Object_Begin,Cyclomatic complexity of the method is 17
Complex Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\HRON\HRONObjectSerializer.cs,Object_End,Cyclomatic complexity of the method is 11
Complex Method,Source.NuGet,PackageInstaller,C:\research\architectureSmells\repos\mrange_T4Include\NuGet\PackageInstaller.cs,InstallPackages,Cyclomatic complexity of the method is 8
Complex Method,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,Cyclomatic complexity of the method is 9
Complex Method,Source.Text,LineExtensionMethods,C:\research\architectureSmells\repos\mrange_T4Include\Text\LineReaderExtensions.cs,TextToLines,Cyclomatic complexity of the method is 16
Complex Method,Source.Text,LineToObjectExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Text\LineToObjectExtensions.cs,LineToObject,Cyclomatic complexity of the method is 17
Complex Method,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\Testing\Generated_TestFor.cs,EqualityImpl,Cyclomatic complexity of the method is 10
Long Parameter List,Source.Collections,BitmapNodeN<K;V>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\PersistentHashMap.cs,FromTwoNodes,The method has 5 parameters. Parameters: s' h1' n1' h2' n2
Long Parameter List,Source.Extensions,EnumerableExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\EnumerableExtensions.cs,ToDictionaryAndResolveDuplicates,The method has 6 parameters. Parameters: values' keySelector' valueSelector' duplicateResolver' capacity' comparer
Long Parameter List,Source.Extensions,EnumerableExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\EnumerableExtensions.cs,ToDictionaryAndResolveDuplicates,The method has 5 parameters. Parameters: values' keySelector' duplicateResolver' capacity' comparer
Long Parameter List,Source.Extensions,EnumerableExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\EnumerableExtensions.cs,ToDictionaryAndKeepFirst,The method has 5 parameters. Parameters: values' keySelector' valueSelector' capacity' comparer
Long Parameter List,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Add,The method has 6 parameters. Parameters: id' dbType' elementSize' requiresDimension' dbDefaultValue' getter
Long Parameter List,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The method has 9 parameters. Parameters: schema' name' systemTypeId' userTypeId' maxLength' precision' scale' collation' isNullable
Long Parameter List,Source.SQL,SqlTypeInfo,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,SqlTypeInfo,The method has 6 parameters. Parameters: dbType' type' elementSize' requiresDimension' dbDefaultValue' getterMethod
Long Parameter List,Source.SQL,BaseTypedSubObject,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,BaseTypedSubObject,The method has 6 parameters. Parameters: name' type' id' maxLength' precision' scale
Long Parameter List,Source.SQL,ColumnSubObject,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,ColumnSubObject,The method has 10 parameters. Parameters: name' type' id' maxLength' precision' scale' collation' isNullable' isIdentity' isComputed
Long Parameter List,Source.SQL,ParameterSubObject,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,ParameterSubObject,The method has 7 parameters. Parameters: name' type' id' maxLength' precision' scale' isOutput
Long Parameter List,Source.SQL,SchemaObject,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,SchemaObject,The method has 8 parameters. Parameters: id' schema' name' type' createDate' modifyDate' columns' parameters
Long Parameter List,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\WPF\AnimatedEntrance.cs,CollectionChanged_Children,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Parameter List,Source.WPF.Debug,BaseDebugTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\WPF\Debug\BaseDebugTreeControl.cs,CollectionChanged_Tree,The method has 6 parameters. Parameters: sender' action' oldStartingIndex' oldItems' newStartingIndex' newItems
Long Statement,Source.Collections,BitmapNodeN<K;V>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\PersistentHashMap.cs,Describe,The length of the statement  "        sb.FormatIndentedLine (indent' "BitmapN Bitmap:0b{0}' Nodes:{1}"' new string ('0'' 16 - bits.Length) + bits' Nodes.Length);" is 123.
Long Statement,Source.Extensions,SqlExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\SqlExtensions.cs,Get,The length of the statement  "                Debug.Assert (false' "The semantics of Get is no-throw but try to avoid cases where Get needs to catch cast exception as those are cpu-expensive");" is 147.
Long Statement,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Add,The length of the statement  "            s_typeInfoLookup.Add(id' new SqlTypeInfo(dbType' typeof(T)' elementSize' requiresDimension' dbDefaultValue' getterMethodInfo));" is 127.
Long Statement,Source.Reflection,MemberDescriptor,C:\research\architectureSmells\repos\mrange_T4Include\Reflection\ClassDescriptor.cs,GetGetter,The length of the statement  "            if (pi != null && pi.GetGetMethod(nonPublic:true) != null && pi.GetGetMethod(nonPublic:true).GetParameters().Length == 0)" is 121.
Long Statement,Source.Reflection,MemberDescriptor,C:\research\architectureSmells\repos\mrange_T4Include\Reflection\ClassDescriptor.cs,GetSetter,The length of the statement  "            if (pi != null && pi.GetSetMethod(nonPublic:true) != null && pi.GetSetMethod(nonPublic:true).GetParameters().Length == 1)" is 121.
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\Generated_SkipList.cs,CreateNode,The following statement contains a magic number: switch (size)              {              case 1: return new Node1 ();              case 2: return new Node2 ();              case 3: return new Node3 ();              case 4: return new Node4 ();              case 5: return new Node5 ();              case 6: return new Node6 ();              case 7: return new Node7 ();              case 8: return new Node8 ();              case 9: return new Node9 ();              case 10: return new Node10 ();              case 11: return new Node11 ();              case 12: return new Node12 ();              case 13: return new Node13 ();              case 14: return new Node14 ();              case 15: return new Node15 ();              case 16: return new Node16 ();              case 17: return new Node17 ();              case 18: return new Node18 ();              case 19: return new Node19 ();              case 20: return new Node20 ();              case 21: return new Node21 ();              case 22: return new Node22 ();              case 23: return new Node23 ();              case 24: return new Node24 ();              case 25: return new Node25 ();              case 26: return new Node26 ();              case 27: return new Node27 ();              case 28: return new Node28 ();              case 29: return new Node29 ();              case 30: return new Node30 ();                        default: throw new IndexOutOfRangeException ();              }
Magic Number,Source.Collections,PersistentHashMap<K;V>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\PersistentHashMap.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder (16);
Magic Number,Source.Collections,PersistentHashMap,C:\research\architectureSmells\repos\mrange_T4Include\Collections\PersistentHashMap.cs,PopCount,The following statement contains a magic number: v =   (v & 0x33333333) + ((v >> 2) & 0x33333333);
Magic Number,Source.Collections,PersistentHashMap,C:\research\architectureSmells\repos\mrange_T4Include\Collections\PersistentHashMap.cs,PopCount,The following statement contains a magic number: v =   ((v + (v >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;
Magic Number,Source.Collections,PersistentHashMap,C:\research\architectureSmells\repos\mrange_T4Include\Collections\PersistentHashMap.cs,PopCount,The following statement contains a magic number: v =   ((v + (v >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;
Magic Number,Source.Collections,BitmapNode1<K;V>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\PersistentHashMap.cs,Describe,The following statement contains a magic number: var bits = Convert.ToString (Bitmap' 2);
Magic Number,Source.Collections,BitmapNode1<K;V>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\PersistentHashMap.cs,Describe,The following statement contains a magic number: sb.FormatIndentedLine (indent' "Bitmap1 Bitmap:0b{0}"' new string ('0'' 16 - bits.Length) + bits);
Magic Number,Source.Collections,BitmapNode1<K;V>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\PersistentHashMap.cs,Describe,The following statement contains a magic number: Node.Describe (sb' indent + 2);
Magic Number,Source.Collections,BitmapNodeN<K;V>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\PersistentHashMap.cs,CheckInvariant,The following statement contains a magic number: length < 2 || length != Nodes.Length
Magic Number,Source.Collections,BitmapNodeN<K;V>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\PersistentHashMap.cs,Describe,The following statement contains a magic number: var bits = Convert.ToString (Bitmap' 2);
Magic Number,Source.Collections,BitmapNodeN<K;V>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\PersistentHashMap.cs,Describe,The following statement contains a magic number: sb.FormatIndentedLine (indent' "BitmapN Bitmap:0b{0}' Nodes:{1}"' new string ('0'' 16 - bits.Length) + bits' Nodes.Length);
Magic Number,Source.Collections,BitmapNodeN<K;V>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\PersistentHashMap.cs,Describe,The following statement contains a magic number: n.Describe (sb' indent + 2);
Magic Number,Source.Collections,BitmapNode16<K;V>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\PersistentHashMap.cs,Describe,The following statement contains a magic number: node.Describe (sb' indent + 2);
Magic Number,Source.Collections,HashCollisionNodeN<K;V>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\PersistentHashMap.cs,CheckInvariant,The following statement contains a magic number: KeyValues.Length < 2
Magic Number,Source.Collections,HashCollisionNodeN<K;V>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\PersistentHashMap.cs,Describe,The following statement contains a magic number: kv.Describe (sb' indent + 2);
Magic Number,Source.Collections,HashCollisionNodeN<K;V>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\PersistentHashMap.cs,Unset,The following statement contains a magic number: KeyValues.Length > 2
Magic Number,Source.Collections,HashCollisionNodeN<K;V>,C:\research\architectureSmells\repos\mrange_T4Include\Collections\PersistentHashMap.cs,Unset,The following statement contains a magic number: KeyValues.Length == 2
Magic Number,Source.Concurrency,SequentialTaskScheduler,C:\research\architectureSmells\repos\mrange_T4Include\Concurrency\TaskSchedulers.cs,ShutDown,The following statement contains a magic number: var joinTimeOut = (int)remainingTime.Remaining.TotalMilliseconds/2;
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,IsNear,The following statement contains a magic number: return Math.Abs(v - c) < double.Epsilon * 100;
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,GetTree_AsString,The following statement contains a magic number: var sb = new StringBuilder (128);
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,HexColor,The following statement contains a magic number: switch (ch)             {                 case '0':                 case '1':                 case '2':                 case '3':                 case '4':                 case '5':                 case '6':                 case '7':                 case '8':                 case '9':                     return (byte) (ch - '0');                 case 'a':                 case 'b':                 case 'c':                 case 'd':                 case 'e':                 case 'f':                     return (byte) (ch - 'a' + 10);                 case 'A':                 case 'B':                 case 'C':                 case 'D':                 case 'E':                 case 'F':                     return (byte) (ch - 'A' + 10);                 default:                     return 0;             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,HexColor,The following statement contains a magic number: switch (ch)             {                 case '0':                 case '1':                 case '2':                 case '3':                 case '4':                 case '5':                 case '6':                 case '7':                 case '8':                 case '9':                     return (byte) (ch - '0');                 case 'a':                 case 'b':                 case 'c':                 case 'd':                 case 'e':                 case 'f':                     return (byte) (ch - 'a' + 10);                 case 'A':                 case 'B':                 case 'C':                 case 'D':                 case 'E':                 case 'F':                     return (byte) (ch - 'A' + 10);                 default:                     return 0;             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ExpandNibble,The following statement contains a magic number: return (byte) (n | (n << 4));
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.Extensions,WpfExtensions,C:\research\architectureSmells\repos\mrange_T4Include\Extensions\WpfExtensions.cs,ParseColor,The following statement contains a magic number: switch (color.Length)             {                 default:                     return defaultTo;                 case 4:                     // #FFF                     return Color.FromRgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()                         );                 case 5:                     // #FFFF                     return Color.FromArgb (                         color[1].HexColor().ExpandNibble()'                         color[2].HexColor().ExpandNibble()'                         color[3].HexColor().ExpandNibble()'                         color[4].HexColor().ExpandNibble()                         );                 case 7:                     // #FFFFFF                     return Color.FromRgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())                         );                 case 9:                     // #FFFFFFFF                     return Color.FromArgb (                         (byte) ((color[1].HexColor() << 4) + color[2].HexColor())'                         (byte) ((color[3].HexColor() << 4) + color[4].HexColor())'                         (byte) ((color[5].HexColor() << 4) + color[6].HexColor())'                         (byte) ((color[7].HexColor() << 4) + color[8].HexColor())                         );             }
Magic Number,Source.HRON,BaseHRONEntity,C:\research\architectureSmells\repos\mrange_T4Include\HRON\HRONDynamicObjectSerializer.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(128);
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<Int64>           (127   ' SqlDbType.BigInt           ' getter:r => r.GetInt64(0)            ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<Int64>           (127   ' SqlDbType.BigInt           ' getter:r => r.GetInt64(0)            ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<Byte[]>          (173   ' SqlDbType.Binary           ' getter:null                          ' elementSize:1    ' requiresDimension:true    ' dbDefaultValue:""          );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<Boolean>         (104   ' SqlDbType.Bit              ' getter:r => r.GetBoolean(0)          ' elementSize:1    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<String>          (175   ' SqlDbType.Char             ' getter:r => r.GetString(0)           ' elementSize:1    ' requiresDimension:true    ' dbDefaultValue:"''"        );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (61    ' SqlDbType.DateTime         ' getter:r => r.GetDateTime(0)         ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:"1900-01-01");
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (61    ' SqlDbType.DateTime         ' getter:r => r.GetDateTime(0)         ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:"1900-01-01");
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<Decimal>         (106   ' SqlDbType.Decimal          ' getter:r => r.GetDecimal(0)          ' elementSize:17   ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<Decimal>         (106   ' SqlDbType.Decimal          ' getter:r => r.GetDecimal(0)          ' elementSize:17   ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<Double>          (62    ' SqlDbType.Float            ' getter:r => r.GetDouble(0)           ' elementSize:4    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<Double>          (62    ' SqlDbType.Float            ' getter:r => r.GetDouble(0)           ' elementSize:4    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<Byte[]>          (34    ' SqlDbType.Image            ' getter:null                          ' elementSize:1    ' requiresDimension:false   ' dbDefaultValue:""          );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<Int32>           (56    ' SqlDbType.Int              ' getter:r => r.GetInt32(0)            ' elementSize:4    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<Int32>           (56    ' SqlDbType.Int              ' getter:r => r.GetInt32(0)            ' elementSize:4    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<Decimal>         (60    ' SqlDbType.Money            ' getter:r => r.GetDecimal(0)          ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<Decimal>         (60    ' SqlDbType.Money            ' getter:r => r.GetDecimal(0)          ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<String>          (239   ' SqlDbType.NChar            ' getter:r => r.GetString(0)           ' elementSize:2    ' requiresDimension:true    ' dbDefaultValue:"''"        );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<String>          (239   ' SqlDbType.NChar            ' getter:r => r.GetString(0)           ' elementSize:2    ' requiresDimension:true    ' dbDefaultValue:"''"        );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<String>          (99    ' SqlDbType.NText            ' getter:r => r.GetString(0)           ' elementSize:2    ' requiresDimension:false   ' dbDefaultValue:"''"        );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<String>          (99    ' SqlDbType.NText            ' getter:r => r.GetString(0)           ' elementSize:2    ' requiresDimension:false   ' dbDefaultValue:"''"        );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<String>          (231   ' SqlDbType.NVarChar         ' getter:r => r.GetString(0)           ' elementSize:2    ' requiresDimension:true    ' dbDefaultValue:"''"        );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<String>          (231   ' SqlDbType.NVarChar         ' getter:r => r.GetString(0)           ' elementSize:2    ' requiresDimension:true    ' dbDefaultValue:"''"        );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<Single>          (59    ' SqlDbType.Real             ' getter:r => r.GetFloat(0)            ' elementSize:4    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<Single>          (59    ' SqlDbType.Real             ' getter:r => r.GetFloat(0)            ' elementSize:4    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<Guid>            (36    ' SqlDbType.UniqueIdentifier ' getter:r => r.GetGuid(0)             ' elementSize:1    ' requiresDimension:false   ' dbDefaultValue:""          );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (58    ' SqlDbType.SmallDateTime    ' getter:r => r.GetDateTime(0)         ' elementSize:4    ' requiresDimension:false   ' dbDefaultValue:"1900-01-01");
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (58    ' SqlDbType.SmallDateTime    ' getter:r => r.GetDateTime(0)         ' elementSize:4    ' requiresDimension:false   ' dbDefaultValue:"1900-01-01");
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<Int16>           (52    ' SqlDbType.SmallInt         ' getter:r => r.GetInt16(0)            ' elementSize:2    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<Int16>           (52    ' SqlDbType.SmallInt         ' getter:r => r.GetInt16(0)            ' elementSize:2    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<Decimal>         (122   ' SqlDbType.SmallMoney       ' getter:r => r.GetDecimal(0)          ' elementSize:4    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<Decimal>         (122   ' SqlDbType.SmallMoney       ' getter:r => r.GetDecimal(0)          ' elementSize:4    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<String>          (35    ' SqlDbType.Text             ' getter:r => r.GetString(0)           ' elementSize:1    ' requiresDimension:false   ' dbDefaultValue:"''"        );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (189   ' SqlDbType.Timestamp        ' getter:r => r.GetDateTime(0)         ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:""          );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (189   ' SqlDbType.Timestamp        ' getter:r => r.GetDateTime(0)         ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:""          );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<Byte>            (48    ' SqlDbType.TinyInt          ' getter:r => r.GetByte(0)             ' elementSize:1    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<Byte[]>          (165   ' SqlDbType.VarBinary        ' getter:null                          ' elementSize:1    ' requiresDimension:true    ' dbDefaultValue:""          );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<String>          (167   ' SqlDbType.VarChar          ' getter:r => r.GetString(0)           ' elementSize:1    ' requiresDimension:true    ' dbDefaultValue:"''"        );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<object>          (98    ' SqlDbType.Variant          ' getter:r => r.GetValue(0)            ' elementSize: -1  ' requiresDimension:false   ' dbDefaultValue:""          );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<XmlReader>       (241   ' SqlDbType.Xml              ' getter:r => r.GetXmlReader(0)        ' elementSize:-1   ' requiresDimension:false   ' dbDefaultValue:""          );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (40    ' SqlDbType.Date             ' getter:r => r.GetDateTime(0)         ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:"1900-01-01");
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (40    ' SqlDbType.Date             ' getter:r => r.GetDateTime(0)         ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:"1900-01-01");
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (41    ' SqlDbType.Time             ' getter:r => r.GetDateTime(0)         ' elementSize:5    ' requiresDimension:false   ' dbDefaultValue:""          );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (41    ' SqlDbType.Time             ' getter:r => r.GetDateTime(0)         ' elementSize:5    ' requiresDimension:false   ' dbDefaultValue:""          );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (42    ' SqlDbType.DateTime2        ' getter:r => r.GetDateTime(0)         ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:"1900-01-01");
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (42    ' SqlDbType.DateTime2        ' getter:r => r.GetDateTime(0)         ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:"1900-01-01");
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<DateTimeOffset>  (43    ' SqlDbType.DateTimeOffset   ' getter:r => r.GetDateTimeOffset(0)   ' elementSize:10   ' requiresDimension:false   ' dbDefaultValue:""          );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,TypeDefinition,The following statement contains a magic number: Add<DateTimeOffset>  (43    ' SqlDbType.DateTimeOffset   ' getter:r => r.GetDateTimeOffset(0)   ' elementSize:10   ' requiresDimension:false   ' dbDefaultValue:""          );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var type = new TypeDefinition (                             reader.GetString(0) '                              reader.GetString(1) '                              reader.GetByte(2)   '                              reader.GetInt32(3)  '                              reader.GetInt16(4)  '                              reader.GetByte(5)   '                              reader.GetByte(6)   '                              reader.GetString(7) '                              reader.GetBoolean(8)                              );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var type = new TypeDefinition (                             reader.GetString(0) '                              reader.GetString(1) '                              reader.GetByte(2)   '                              reader.GetInt32(3)  '                              reader.GetInt16(4)  '                              reader.GetByte(5)   '                              reader.GetByte(6)   '                              reader.GetString(7) '                              reader.GetBoolean(8)                              );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var type = new TypeDefinition (                             reader.GetString(0) '                              reader.GetString(1) '                              reader.GetByte(2)   '                              reader.GetInt32(3)  '                              reader.GetInt16(4)  '                              reader.GetByte(5)   '                              reader.GetByte(6)   '                              reader.GetString(7) '                              reader.GetBoolean(8)                              );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var type = new TypeDefinition (                             reader.GetString(0) '                              reader.GetString(1) '                              reader.GetByte(2)   '                              reader.GetInt32(3)  '                              reader.GetInt16(4)  '                              reader.GetByte(5)   '                              reader.GetByte(6)   '                              reader.GetString(7) '                              reader.GetBoolean(8)                              );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var type = new TypeDefinition (                             reader.GetString(0) '                              reader.GetString(1) '                              reader.GetByte(2)   '                              reader.GetInt32(3)  '                              reader.GetInt16(4)  '                              reader.GetByte(5)   '                              reader.GetByte(6)   '                              reader.GetString(7) '                              reader.GetBoolean(8)                              );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var type = new TypeDefinition (                             reader.GetString(0) '                              reader.GetString(1) '                              reader.GetByte(2)   '                              reader.GetInt32(3)  '                              reader.GetInt16(4)  '                              reader.GetByte(5)   '                              reader.GetByte(6)   '                              reader.GetString(7) '                              reader.GetBoolean(8)                              );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var type = new TypeDefinition (                             reader.GetString(0) '                              reader.GetString(1) '                              reader.GetByte(2)   '                              reader.GetInt32(3)  '                              reader.GetInt16(4)  '                              reader.GetByte(5)   '                              reader.GetByte(6)   '                              reader.GetString(7) '                              reader.GetBoolean(8)                              );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var fullName = reader.GetString(1) + "." + reader.GetString (2);
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var column = new ColumnSubObject (                             reader.GetString(3)   '                             type                  '                             reader.GetInt32(4)    '                              reader.GetInt16(5)    '                              reader.GetByte(6)     '                              reader.GetByte(7)     '                              reader.GetString(8)   '                              reader.GetBoolean(9)  '                              reader.GetBoolean(10) '                              reader.GetBoolean(11)                              );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var column = new ColumnSubObject (                             reader.GetString(3)   '                             type                  '                             reader.GetInt32(4)    '                              reader.GetInt16(5)    '                              reader.GetByte(6)     '                              reader.GetByte(7)     '                              reader.GetString(8)   '                              reader.GetBoolean(9)  '                              reader.GetBoolean(10) '                              reader.GetBoolean(11)                              );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var column = new ColumnSubObject (                             reader.GetString(3)   '                             type                  '                             reader.GetInt32(4)    '                              reader.GetInt16(5)    '                              reader.GetByte(6)     '                              reader.GetByte(7)     '                              reader.GetString(8)   '                              reader.GetBoolean(9)  '                              reader.GetBoolean(10) '                              reader.GetBoolean(11)                              );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var column = new ColumnSubObject (                             reader.GetString(3)   '                             type                  '                             reader.GetInt32(4)    '                              reader.GetInt16(5)    '                              reader.GetByte(6)     '                              reader.GetByte(7)     '                              reader.GetString(8)   '                              reader.GetBoolean(9)  '                              reader.GetBoolean(10) '                              reader.GetBoolean(11)                              );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var column = new ColumnSubObject (                             reader.GetString(3)   '                             type                  '                             reader.GetInt32(4)    '                              reader.GetInt16(5)    '                              reader.GetByte(6)     '                              reader.GetByte(7)     '                              reader.GetString(8)   '                              reader.GetBoolean(9)  '                              reader.GetBoolean(10) '                              reader.GetBoolean(11)                              );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var column = new ColumnSubObject (                             reader.GetString(3)   '                             type                  '                             reader.GetInt32(4)    '                              reader.GetInt16(5)    '                              reader.GetByte(6)     '                              reader.GetByte(7)     '                              reader.GetString(8)   '                              reader.GetBoolean(9)  '                              reader.GetBoolean(10) '                              reader.GetBoolean(11)                              );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var column = new ColumnSubObject (                             reader.GetString(3)   '                             type                  '                             reader.GetInt32(4)    '                              reader.GetInt16(5)    '                              reader.GetByte(6)     '                              reader.GetByte(7)     '                              reader.GetString(8)   '                              reader.GetBoolean(9)  '                              reader.GetBoolean(10) '                              reader.GetBoolean(11)                              );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var column = new ColumnSubObject (                             reader.GetString(3)   '                             type                  '                             reader.GetInt32(4)    '                              reader.GetInt16(5)    '                              reader.GetByte(6)     '                              reader.GetByte(7)     '                              reader.GetString(8)   '                              reader.GetBoolean(9)  '                              reader.GetBoolean(10) '                              reader.GetBoolean(11)                              );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var column = new ColumnSubObject (                             reader.GetString(3)   '                             type                  '                             reader.GetInt32(4)    '                              reader.GetInt16(5)    '                              reader.GetByte(6)     '                              reader.GetByte(7)     '                              reader.GetString(8)   '                              reader.GetBoolean(9)  '                              reader.GetBoolean(10) '                              reader.GetBoolean(11)                              );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var fullName = reader.GetString(1) + "." + reader.GetString (2);
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var parameter = new ParameterSubObject (                             reader.GetString(3)   '                             type                  '                             reader.GetInt32(4)    '                              reader.GetInt16(5)    '                              reader.GetByte(6)     '                              reader.GetByte(7)     '                              reader.GetBoolean(8)                                );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var parameter = new ParameterSubObject (                             reader.GetString(3)   '                             type                  '                             reader.GetInt32(4)    '                              reader.GetInt16(5)    '                              reader.GetByte(6)     '                              reader.GetByte(7)     '                              reader.GetBoolean(8)                                );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var parameter = new ParameterSubObject (                             reader.GetString(3)   '                             type                  '                             reader.GetInt32(4)    '                              reader.GetInt16(5)    '                              reader.GetByte(6)     '                              reader.GetByte(7)     '                              reader.GetBoolean(8)                                );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var parameter = new ParameterSubObject (                             reader.GetString(3)   '                             type                  '                             reader.GetInt32(4)    '                              reader.GetInt16(5)    '                              reader.GetByte(6)     '                              reader.GetByte(7)     '                              reader.GetBoolean(8)                                );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var parameter = new ParameterSubObject (                             reader.GetString(3)   '                             type                  '                             reader.GetInt32(4)    '                              reader.GetInt16(5)    '                              reader.GetByte(6)     '                              reader.GetByte(7)     '                              reader.GetBoolean(8)                                );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var parameter = new ParameterSubObject (                             reader.GetString(3)   '                             type                  '                             reader.GetInt32(4)    '                              reader.GetInt16(5)    '                              reader.GetByte(6)     '                              reader.GetByte(7)     '                              reader.GetBoolean(8)                                );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var name = reader.GetString(2);
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var schemaObjectType = ToSchemaType(reader.GetString(3));
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var schemaObject = new SchemaObject (                             objectId                    '                             schema                      '                             name                        '                             schemaObjectType            '                             reader.GetDateTime(4)       '                             reader.GetDateTime(5)       '                             NonNull(columns)                                 .Where(c => c != null)                                 .OrderBy(c => c.Id)                                 .ToArray()                                 '                             NonNull(parameters)                                 .Where(p => p != null)                                 .OrderBy(p => p.Id)                                 .ToArray()                             );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,Schema,The following statement contains a magic number: var schemaObject = new SchemaObject (                             objectId                    '                             schema                      '                             name                        '                             schemaObjectType            '                             reader.GetDateTime(4)       '                             reader.GetDateTime(5)       '                             NonNull(columns)                                 .Where(c => c != null)                                 .OrderBy(c => c.Id)                                 .ToArray()                                 '                             NonNull(parameters)                                 .Where(p => p != null)                                 .OrderBy(p => p.Id)                                 .ToArray()                             );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\SQL\Schema.cs,AddObject,The following statement contains a magic number: list = new List<T> (16);
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\WPF\AccordionPanel.cs,AccordionPanel,The following statement contains a magic number: var animationDuration   = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AccordionPanel,C:\research\architectureSmells\repos\mrange_T4Include\WPF\AccordionPanel.cs,Coerce_PreviewWidth,The following statement contains a magic number: coercedValue = Math.Max(8' coercedValue);
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\WPF\AnimatedEntrance.cs,AnimatedEntrance,The following statement contains a magic number: var transitionDuration    = new Duration (TimeSpan.FromMilliseconds(400));
Magic Number,Source.WPF,AnimatedEntrance,C:\research\architectureSmells\repos\mrange_T4Include\WPF\AnimatedEntrance.cs,AnimatedEntrance,The following statement contains a magic number: var delayDuration         = new Duration (TimeSpan.FromMilliseconds(200));
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\WPF\BuzyWait.cs,BuzyWait,The following statement contains a magic number: drawingContext.PushTransform (new RotateTransform (360.0 * t));
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\WPF\BuzyWait.cs,BuzyWait,The following statement contains a magic number: drawingContext.DrawRoundedRectangle(                         Brushes.White'                         null'                         new Rect(MinRadius' -WidthRadius/2' RadiusRadius - MinRadius' WidthRadius)'                         WidthRadius'                         WidthRadius                         );
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\WPF\BuzyWait.cs,BuzyWait,The following statement contains a magic number: s_animationClock = new DoubleAnimation (                 0'                 1'                 new Duration (TimeSpan.FromSeconds(2))                 )                 {                     RepeatBehavior = RepeatBehavior.Forever                 };
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\WPF\BuzyWait.cs,OnRender,The following statement contains a magic number: var halfWidth = ActualWidth/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\WPF\BuzyWait.cs,OnRender,The following statement contains a magic number: var halfHeight = ActualHeight/2;
Magic Number,Source.WPF,BuzyWait,C:\research\architectureSmells\repos\mrange_T4Include\WPF\BuzyWait.cs,OnRender,The following statement contains a magic number: var angle = -(step*360.0)/Spokes;
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\WPF\Generated_ReflectionDecorator_DependencyProperties.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                 new GradientStopCollection                     {                         new GradientStop (Colors.Transparent                ' 0     )'                             new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                             new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                             new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                             new GradientStop (Colors.Black                      ' 1     )'                         }'                 90                 ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\WPF\Generated_ReflectionDecorator_DependencyProperties.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                 new GradientStopCollection                     {                         new GradientStop (Colors.Transparent                ' 0     )'                             new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                             new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                             new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                             new GradientStop (Colors.Black                      ' 1     )'                         }'                 90                 ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\WPF\Generated_ReflectionDecorator_DependencyProperties.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                 new GradientStopCollection                     {                         new GradientStop (Colors.Transparent                ' 0     )'                             new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                             new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                             new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                             new GradientStop (Colors.Black                      ' 1     )'                         }'                 90                 ).FreezeObject ();
Magic Number,Source.WPF,ReflectionDecorator,C:\research\architectureSmells\repos\mrange_T4Include\WPF\Generated_ReflectionDecorator_DependencyProperties.cs,Constructed__ReflectionDecorator,The following statement contains a magic number: m_opacityMask   = new LinearGradientBrush (                 new GradientStopCollection                     {                         new GradientStop (Colors.Transparent                ' 0     )'                             new GradientStop ("#2000".ParseColor(Colors.Black)  ' 0.25  )'                             new GradientStop ("#4000".ParseColor(Colors.Black)  ' 0.50  )'                             new GradientStop ("#8000".ParseColor(Colors.Black)  ' 0.75  )'                             new GradientStop (Colors.Black                      ' 1     )'                         }'                 90                 ).FreezeObject ();
Magic Number,Source.WPF.Debug,DebugContainerControl,C:\research\architectureSmells\repos\mrange_T4Include\WPF\Debug\DebugContainerControl.cs,ShowWindowImpl,The following statement contains a magic number: var window =                  new Window                     {                         Title       = title ?? "Debug"      '                          MinHeight   = 200                   '                         MinWidth    = 320                   '                         Content     = debugContainerControl                     };
Magic Number,Source.WPF.Debug,DebugContainerControl,C:\research\architectureSmells\repos\mrange_T4Include\WPF\Debug\DebugContainerControl.cs,ShowWindowImpl,The following statement contains a magic number: var window =                  new Window                     {                         Title       = title ?? "Debug"      '                          MinHeight   = 200                   '                         MinWidth    = 320                   '                         Content     = debugContainerControl                     };
Magic Number,Source.WPF.Debug,TreeNode,C:\research\architectureSmells\repos\mrange_T4Include\WPF\Debug\BaseDebugTreeControl.cs,BuildDescription,The following statement contains a magic number: var sb = new StringBuilder(128);
Magic Number,Source.WPF.Debug,DebugLogicalTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\WPF\Debug\DebugLogicalTreeControl.cs,OnGetOrdinal,The following statement contains a magic number: return 2000;
Magic Number,Source.WPF.Debug,DebugVisualTreeControl,C:\research\architectureSmells\repos\mrange_T4Include\WPF\Debug\DebugVisualTreeControl.cs,OnGetOrdinal,The following statement contains a magic number: return 1000;
Magic Number,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\Testing\Generated_TestFor.cs,ToString,The following statement contains a magic number: start = start - count/2;
Magic Number,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\Testing\Generated_TestFor.cs,EqualityImpl,The following statement contains a magic number: Log.Error("TestFor.Equality: #EXPECTED:{0}' #FOUND:{1} - First diff @{2} - {3}"'                         sExpected.ToString(firstDiff' 16)'                         sFound.ToString(firstDiff' 16)'                         length'                         message                         );
Magic Number,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\Testing\Generated_TestFor.cs,EqualityImpl,The following statement contains a magic number: Log.Error("TestFor.Equality: #EXPECTED:{0}' #FOUND:{1} - First diff @{2} - {3}"'                         sExpected.ToString(firstDiff' 16)'                         sFound.ToString(firstDiff' 16)'                         length'                         message                         );
