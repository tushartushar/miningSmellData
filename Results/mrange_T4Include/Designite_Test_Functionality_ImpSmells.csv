Implementation smell,Namespace,Class,File,Method,Description
Long Method,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The method has 161 lines of code.
Long Method,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_StructuralTuple,The method has 140 lines of code.
Long Method,Test_Functionality.HRON,TestsFor_HRON,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\HRON\TestsFor_HRON.cs,Test_TryParseDynamic,The method has 120 lines of code.
Long Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Value_End,The method has 183 lines of code.
Long Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Object_Begin,The method has 121 lines of code.
Long Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Value_End,The method has 183 lines of code.
Long Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Object_Begin,The method has 121 lines of code.
Long Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Value_End,The method has 183 lines of code.
Long Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Object_Begin,The method has 121 lines of code.
Long Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Parse,The method has 218 lines of code.
Long Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Parse,The method has 218 lines of code.
Long Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Parse,The method has 218 lines of code.
Long Method,Source.Testing,TestRunner,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,ExecuteTests,The method has 109 lines of code.
Long Method,Source.Testing,TestRunner,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,ExecuteTests,The method has 109 lines of code.
Long Method,Source.Testing,TestRunner,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,ExecuteTests,The method has 109 lines of code.
Long Method,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,EqualityImpl,The method has 109 lines of code.
Long Method,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,EqualityImpl,The method has 109 lines of code.
Long Method,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,EqualityImpl,The method has 109 lines of code.
Long Method,Source.Text,LineToObjectExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,LineToObject,The method has 150 lines of code.
Long Method,Source.Text,LineToObjectExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,LineToObject,The method has 150 lines of code.
Long Method,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The method has 195 lines of code.
Complex Method,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,Cyclomatic complexity of the method is 11
Complex Method,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,TypeToString,Cyclomatic complexity of the method is 8
Complex Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Value_End,Cyclomatic complexity of the method is 23
Complex Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Object_Begin,Cyclomatic complexity of the method is 17
Complex Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Object_End,Cyclomatic complexity of the method is 11
Complex Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Value_End,Cyclomatic complexity of the method is 23
Complex Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Object_Begin,Cyclomatic complexity of the method is 17
Complex Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Object_End,Cyclomatic complexity of the method is 11
Complex Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Value_End,Cyclomatic complexity of the method is 23
Complex Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Object_Begin,Cyclomatic complexity of the method is 17
Complex Method,Source.HRON,HRONObjectBuilderVisitor<T>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Object_End,Cyclomatic complexity of the method is 11
Complex Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,VisitObject,Cyclomatic complexity of the method is 8
Complex Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,VisitMember,Cyclomatic complexity of the method is 15
Complex Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Parse,Cyclomatic complexity of the method is 28
Complex Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,VisitObject,Cyclomatic complexity of the method is 8
Complex Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,VisitMember,Cyclomatic complexity of the method is 15
Complex Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Parse,Cyclomatic complexity of the method is 28
Complex Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,VisitObject,Cyclomatic complexity of the method is 8
Complex Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,VisitMember,Cyclomatic complexity of the method is 15
Complex Method,Source.HRON,HRONSerializer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Parse,Cyclomatic complexity of the method is 28
Complex Method,Source.Common,SubStringExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,ReadLines,Cyclomatic complexity of the method is 12
Complex Method,Source.Common,SubStringExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,ReadLines,Cyclomatic complexity of the method is 12
Complex Method,Source.Common,SubStringExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,ReadLines,Cyclomatic complexity of the method is 12
Complex Method,Source.Common,SubStringExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,ReadLines,Cyclomatic complexity of the method is 12
Complex Method,Source.Common,SubStringExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,ReadLines,Cyclomatic complexity of the method is 12
Complex Method,Source.Common,SubStringExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,ReadLines,Cyclomatic complexity of the method is 12
Complex Method,Source.Common,SubStringExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,ReadLines,Cyclomatic complexity of the method is 12
Complex Method,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,Cyclomatic complexity of the method is 31
Complex Method,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,Cyclomatic complexity of the method is 31
Complex Method,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,EqualityImpl,Cyclomatic complexity of the method is 10
Complex Method,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,EqualityImpl,Cyclomatic complexity of the method is 10
Complex Method,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,EqualityImpl,Cyclomatic complexity of the method is 10
Complex Method,Source.Text,LineToObjectExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,LineToObject,Cyclomatic complexity of the method is 17
Complex Method,Source.Text,LineToObjectExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,LineToObject,Cyclomatic complexity of the method is 17
Complex Method,Source.Text,LineExtensionMethods,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TextToLines,Cyclomatic complexity of the method is 16
Complex Method,Source.Text,LineExtensionMethods,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TextToLines,Cyclomatic complexity of the method is 16
Complex Method,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,Cyclomatic complexity of the method is 9
Long Parameter List,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Add,The method has 6 parameters. Parameters: id' dbType' elementSize' requiresDimension' dbDefaultValue' getter
Long Parameter List,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The method has 9 parameters. Parameters: schema' name' systemTypeId' userTypeId' maxLength' precision' scale' collation' isNullable
Long Parameter List,Source.SQL,SqlTypeInfo,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,SqlTypeInfo,The method has 6 parameters. Parameters: dbType' type' elementSize' requiresDimension' dbDefaultValue' getterMethod
Long Parameter List,Source.SQL,BaseTypedSubObject,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,BaseTypedSubObject,The method has 6 parameters. Parameters: name' type' id' maxLength' precision' scale
Long Parameter List,Source.SQL,ColumnSubObject,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,ColumnSubObject,The method has 10 parameters. Parameters: name' type' id' maxLength' precision' scale' collation' isNullable' isIdentity' isComputed
Long Parameter List,Source.SQL,ParameterSubObject,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,ParameterSubObject,The method has 7 parameters. Parameters: name' type' id' maxLength' precision' scale' isOutput
Long Parameter List,Source.SQL,SchemaObject,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,SchemaObject,The method has 8 parameters. Parameters: id' schema' name' type' createDate' modifyDate' columns' parameters
Long Statement,Test_Functionality.Collections,TestsFor_SkipList,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\Collections\TestsFor_SkipList.cs,TestSkipListContent,The length of the statement  "                    TestFor.Equality(expected.ToString(CultureInfo.InvariantCulture)' found.Value' "The found node must have the right value"); " is 123.
Long Statement,Test_Functionality.Collections,TestsFor_SkipList,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\Collections\TestsFor_SkipList.cs,TestSkipListContent,The length of the statement  "                TestFor.Equality(true' firstMismatch == null' "SkipList and SortedDictionary content must be equal' first mismatch: {0} != {1}".FormatWith (leftValue' rightValue)); " is 164.
Long Statement,Test_Functionality.Common,TestsFor_SubString,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\Common\TestsFor_SubString.cs,Test_ReadLines,The length of the statement  "                TestFor.Equality(expected.Length + 1' found.Length' "ReadLines in the presence of ending linebreak should read one line extra compared to StringReader");" is 153.
Long Statement,Test_Functionality.Common,TestsFor_SubString,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\Common\TestsFor_SubString.cs,Test_ReadLines,The length of the statement  "                TestFor.SequenceEquality(expected' found.Take(expected.Length)' "ReadLines should otherwise match StringReader behavior");" is 122.
Long Statement,Test_Functionality.Concurrency,TestsFor_TaskSchedulers,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\Concurrency\TestsFor_TaskSchedulers.cs,Disabled_Test_TaskScheduler_Basic,The length of the statement  "            TestFor.Equality(true' Math.Abs(stopwatch.ElapsedMilliseconds - 1000) < 100' "Elapsed time is expected to be around 1 sec");" is 124.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "            using (var sqlConnection = new SqlConnection (@"Data Source=.\SQLEXPRESS;Initial Catalog=tempdb;Integrated Security=True"))" is 123.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                    TestFor.Equality(reader.Get("object_id"     ' 0)                ' schemaObject.Id                   ' "Id must match"           );" is 130.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                    TestFor.Equality(reader.Get("schema"        ' "")               ' schemaObject.Schema               ' "Schema must match"       );" is 130.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                    TestFor.Equality(reader.Get("name"          ' "")               ' schemaObject.Name                 ' "Name must match"         );" is 130.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                    TestFor.Equality(reader.Get("type"          ' "").Trim ()       ' TypeToString (schemaObject.Type)  ' "Type must match"         );" is 130.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                    TestFor.Equality(reader.Get("create_date"   ' DateTime.MinValue)' schemaObject.CreateDate           ' "CreateDate must match"   );" is 130.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                    TestFor.Equality(reader.Get("modify_date"   ' DateTime.MinValue)' schemaObject.ModifyDate           ' "ModifyDate must match"   );" is 130.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                        TestFor.Equality(columnId                               ' columnSubObject.Id                ' "Id must match"           );" is 122.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                        TestFor.Equality(reader.Get("column_name"   ' "")       ' columnSubObject.Name              ' "Name must match"         );" is 122.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                        TestFor.Equality(reader.Get("type_schema"   ' "")       ' columnSubObject.Type.Schema       ' "Type.Schema must match"  );" is 122.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                        TestFor.Equality(reader.Get("type_name"     ' "")       ' columnSubObject.Type.Name         ' "Type.Name must match"    );" is 122.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                        TestFor.Equality(reader.Get("max_length"    ' (short)0) ' columnSubObject.MaxLength         ' "MaxLength must match"    );" is 122.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                        TestFor.Equality(reader.Get("precision"     ' (short)0) ' columnSubObject.Precision         ' "Precision must match"    );" is 122.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                        TestFor.Equality(reader.Get("scale"         ' (short)0) ' columnSubObject.Scale             ' "Scale must match"        );" is 122.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                        TestFor.Equality(reader.Get("collation_name"' ""      ) ' columnSubObject.Collation         ' "Collation must match"    );" is 122.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                        TestFor.Equality(reader.Get("is_nullable"   ' false)    ' columnSubObject.IsNullable        ' "IsNullable must match"   );" is 122.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                        TestFor.Equality(reader.Get("is_identity"   ' false)    ' columnSubObject.IsIdentity        ' "IsIdentity must match"   );" is 122.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                        TestFor.Equality(reader.Get("is_computed"   ' false)    ' columnSubObject.IsComputed        ' "IsComputed must match"   );" is 122.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                        TestFor.Equality(parameterId                            ' parameterSubObject.Id                ' "Id must match"            );" is 126.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                        TestFor.Equality(reader.Get("parameter_name"   ' "")    ' parameterSubObject.Name              ' "Name must match"         );" is 125.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                        TestFor.Equality(reader.Get("type_schema"   ' "")       ' parameterSubObject.Type.Schema       ' "Type.Schema must match"  );" is 125.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                        TestFor.Equality(reader.Get("type_name"     ' "")       ' parameterSubObject.Type.Name         ' "Type.Name must match"    );" is 125.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                        TestFor.Equality(reader.Get("max_length"    ' (short)0) ' parameterSubObject.MaxLength         ' "MaxLength must match"    );" is 125.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                        TestFor.Equality(reader.Get("precision"     ' (short)0) ' parameterSubObject.Precision         ' "Precision must match"    );" is 125.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                        TestFor.Equality(reader.Get("scale"         ' (short)0) ' parameterSubObject.Scale             ' "Scale must match"        );" is 125.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                                        TestFor.Equality(reader.Get("is_output"     ' false)    ' parameterSubObject.IsOutput          ' "IsOutput must match"     );" is 125.
Long Statement,Test_Functionality.SQL,TestsFor_Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\SQL\TestsFor_Schema.cs,Test_Basic,The length of the statement  "                        TestFor.Equality (parameterCount' schema.SchemaObjects.SelectMany (o => o.Parameters).Count ()' "Parameter count must match");" is 126.
Long Statement,Test_Functionality.T4,Customer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,Equals,The length of the statement  "                &&  (InvoiceAddress == null && other.InvoiceAddress == null || InvoiceAddress != null && other.InvoiceAddress != null && InvoiceAddress.Equals (other.InvoiceAddress))" is 166.
Long Statement,Test_Functionality.T4,Customer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,Equals,The length of the statement  "                &&  (DeliveryAddress == null && other.DeliveryAddress == null || DeliveryAddress != null && other.DeliveryAddress != null && DeliveryAddress.Equals (other.DeliveryAddress))" is 172.
Long Statement,Test_Functionality.T4,Customer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,GetHashCode,The length of the statement  "                result = (result << 5) + result ^ (InvoiceAddress != null ? InvoiceAddress.GetHashCode () : NamedTupleCommon.DefaultHashCode);" is 126.
Long Statement,Test_Functionality.T4,Customer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,GetHashCode,The length of the statement  "                result = (result << 5) + result ^ (DeliveryAddress != null ? DeliveryAddress.GetHashCode () : NamedTupleCommon.DefaultHashCode);" is 128.
Long Statement,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_BasicTuple,The length of the statement  "            TestFor.Equality (false ' one.GetHashCode() == two.GetHashCode()    ' "Structural identical tuples must not have same hash code");" is 130.
Long Statement,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_BasicTuple,The length of the statement  "            TestFor.Equality (false ' two.GetHashCode() == one.GetHashCode()    ' "Structural identical tuples must not have same hash code");" is 130.
Long Statement,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_BasicTuple,The length of the statement  "            TestFor.Equality (false ' one.GetHashCode() == three.GetHashCode()  ' "Structural non-identical tuples must not have same hash code");" is 134.
Long Statement,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_BasicTuple,The length of the statement  "            TestFor.Equality (false ' three.GetHashCode() == one.GetHashCode()  ' "Structural non-identical tuples must not have same hash code");" is 134.
Long Statement,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_StructuralTuple,The length of the statement  "            TestFor.Equality (true  ' one.GetHashCode() == two.GetHashCode()    ' "Structural identical tuples must have same hash code");" is 126.
Long Statement,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_StructuralTuple,The length of the statement  "            TestFor.Equality (true  ' two.GetHashCode() == one.GetHashCode()    ' "Structural identical tuples must have same hash code");" is 126.
Long Statement,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_StructuralTuple,The length of the statement  "            TestFor.Equality (false ' one.GetHashCode() == three.GetHashCode()  ' "Structural non-identical tuples must not have same hash code");" is 134.
Long Statement,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_StructuralTuple,The length of the statement  "            TestFor.Equality (false ' three.GetHashCode() == one.GetHashCode()  ' "Structural non-identical tuples must not have same hash code");" is 134.
Long Statement,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_StructuralTuple,The length of the statement  "            TestFor.Equality (false ' one.GetHashCode() == four.GetHashCode()   ' "Structural non-identical tuples must not have same hash code");" is 134.
Long Statement,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_StructuralTuple,The length of the statement  "            TestFor.Equality (false ' four.GetHashCode() == one.GetHashCode()   ' "Structural non-identical tuples must not have same hash code");" is 134.
Long Statement,Test_Functionality.T4,TestsFor_WPFT4,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_WPFT4.cs,Test_TestControl,The length of the statement  "            TestFor.Equality(testPropertyValue' TestControl.GetAdditional(testControl)' "Additional property must be {0}".FormatWith(testPropertyValue));" is 141.
Long Statement,Test_Functionality.HRON,TestsFor_HRON,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\HRON\TestsFor_HRON.cs,Test_Issue4,The length of the statement  "            if (TestFor.Equality (strings.Length' resultsStrings.Count' "The length of expected and result sets should be the same"))" is 121.
Long Statement,Test_Functionality.HRON,TestsFor_HRON,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\HRON\TestsFor_HRON.cs,Test_Issue4,The length of the statement  "                    TestFor.Equality (strings[iter]' resultsStrings[iter]' "The result set should have the same value as the expected set: {0}".FormatWith (iter));" is 143.
Long Statement,Source.Extensions,SqlExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Get,The length of the statement  "                    Debug.Assert (false' "The semantics of Get is no-throw but try to avoid cases where Get needs to catch cast exception as those are cpu-expensive");" is 147.
Long Statement,Source.Extensions,SqlExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Get,The length of the statement  "                    Debug.Assert (false' "The semantics of Get is no-throw but try to avoid cases where Get needs to catch cast exception as those are cpu-expensive");" is 147.
Long Statement,Source.Extensions,SqlExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Get,The length of the statement  "                    Debug.Assert (false' "The semantics of Get is no-throw but try to avoid cases where Get needs to catch cast exception as those are cpu-expensive");" is 147.
Long Statement,Source.Extensions,SqlExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Get,The length of the statement  "                    Debug.Assert (false' "The semantics of Get is no-throw but try to avoid cases where Get needs to catch cast exception as those are cpu-expensive");" is 147.
Long Statement,Source.Extensions,SqlExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Get,The length of the statement  "                    Debug.Assert (false' "The semantics of Get is no-throw but try to avoid cases where Get needs to catch cast exception as those are cpu-expensive");" is 147.
Long Statement,Source.Extensions,SqlExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Get,The length of the statement  "                    Debug.Assert (false' "The semantics of Get is no-throw but try to avoid cases where Get needs to catch cast exception as those are cpu-expensive");" is 147.
Long Statement,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Add,The length of the statement  "                s_typeInfoLookup.Add(id' new SqlTypeInfo(dbType' typeof(T)' elementSize' requiresDimension' dbDefaultValue' getterMethodInfo));" is 127.
Long Statement,Source.Reflection,MemberDescriptor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,GetGetter,The length of the statement  "                if (pi != null && pi.GetGetMethod(nonPublic:true) != null && pi.GetGetMethod(nonPublic:true).GetParameters().Length == 0)" is 121.
Long Statement,Source.Reflection,MemberDescriptor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,GetSetter,The length of the statement  "                if (pi != null && pi.GetSetMethod(nonPublic:true) != null && pi.GetSetMethod(nonPublic:true).GetParameters().Length == 1)" is 121.
Long Statement,Source.Reflection,MemberDescriptor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,GetGetter,The length of the statement  "                if (pi != null && pi.GetGetMethod(nonPublic:true) != null && pi.GetGetMethod(nonPublic:true).GetParameters().Length == 0)" is 121.
Long Statement,Source.Reflection,MemberDescriptor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,GetSetter,The length of the statement  "                if (pi != null && pi.GetSetMethod(nonPublic:true) != null && pi.GetSetMethod(nonPublic:true).GetParameters().Length == 1)" is 121.
Magic Number,Test_Functionality.Collections,TestsFor_SkipList,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\Collections\TestsFor_SkipList.cs,Test_Basic,The following statement contains a magic number: var random          = new Random (19740531);
Magic Number,Test_Functionality.Collections,TestsFor_SkipList,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\Collections\TestsFor_SkipList.cs,Test_CompareWithSortedDictionary,The following statement contains a magic number: var random = new Random (19740531);
Magic Number,Test_Functionality.Collections,TestsFor_SkipList,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\Collections\TestsFor_SkipList.cs,Test_CompareWithSortedDictionary,The following statement contains a magic number: var action = random.Next (0' 2);
Magic Number,Test_Functionality.Collections,TestsFor_SkipList,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\Collections\TestsFor_SkipList.cs,Test_CompareWithSortedDictionary,The following statement contains a magic number: var v = random.Next (0' TestSetSize * 2);
Magic Number,Test_Functionality.Collections,TestsFor_SkipList,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\Collections\TestsFor_SkipList.cs,Test_CompareWithSortedDictionary,The following statement contains a magic number: iter < TestSetSize / 10
Magic Number,Test_Functionality.Concurrency,TestsFor_TaskSchedulers,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\Concurrency\TestsFor_TaskSchedulers.cs,Disabled_Test_TaskScheduler_Basic,The following statement contains a magic number: var firstTask = taskFactory.StartNew (() => {Thread.Sleep (500); ++usageCount;});
Magic Number,Test_Functionality.Concurrency,TestsFor_TaskSchedulers,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\Concurrency\TestsFor_TaskSchedulers.cs,Disabled_Test_TaskScheduler_Basic,The following statement contains a magic number: var secondTask = taskFactory.StartNew (() => {Thread.Sleep (500); ++usageCount;});
Magic Number,Test_Functionality.Concurrency,TestsFor_TaskSchedulers,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\Concurrency\TestsFor_TaskSchedulers.cs,Disabled_Test_TaskScheduler_Basic,The following statement contains a magic number: TestFor.Equality(2' usageCount' "Both tasks are expected to be executed");
Magic Number,Test_Functionality.Concurrency,TestsFor_TaskSchedulers,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\Concurrency\TestsFor_TaskSchedulers.cs,Disabled_Test_TaskScheduler_Basic,The following statement contains a magic number: TestFor.Equality(true' Math.Abs(stopwatch.ElapsedMilliseconds - 1000) < 100' "Elapsed time is expected to be around 1 sec");
Magic Number,Test_Functionality.Concurrency,TestsFor_TaskSchedulers,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\Concurrency\TestsFor_TaskSchedulers.cs,Disabled_Test_TaskScheduler_Basic,The following statement contains a magic number: TestFor.Equality(true' Math.Abs(stopwatch.ElapsedMilliseconds - 1000) < 100' "Elapsed time is expected to be around 1 sec");
Magic Number,Test_Functionality.Concurrency,TestsFor_TaskSchedulers,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\Concurrency\TestsFor_TaskSchedulers.cs,Test_TaskScheduler_ShutDown,The following statement contains a magic number: var firstTask = taskFactory.StartNew (() => {Thread.Sleep (500); ++usageCount;});
Magic Number,Test_Functionality.Concurrency,TestsFor_TaskSchedulers,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\Concurrency\TestsFor_TaskSchedulers.cs,Test_TaskScheduler_ShutDown,The following statement contains a magic number: var secondTask = taskFactory.StartNew (() => {Thread.Sleep (500); ++usageCount;});
Magic Number,Test_Functionality.Concurrency,TestsFor_TaskSchedulers,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\Concurrency\TestsFor_TaskSchedulers.cs,Test_TaskScheduler_ShutDown,The following statement contains a magic number: var remainingTime = new RemainingTime (TimeSpan.FromMilliseconds(4000));
Magic Number,Test_Functionality.Concurrency,TestsFor_TaskSchedulers,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\Concurrency\TestsFor_TaskSchedulers.cs,Test_TaskScheduler_ShutDown,The following statement contains a magic number: TestFor.Equality(true' stopwatch.ElapsedMilliseconds < 750' "Shutdwn time is expected to be less than 0.75 sec");
Magic Number,Test_Functionality.T4,NamedTupleCommon,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,AppendReferenceLine,The following statement contains a magic number: nt.ToString (sb' indent + 4);
Magic Number,Test_Functionality.T4,Customer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,ToString,The following statement contains a magic number: var innerIndent = indent + 4;
Magic Number,Test_Functionality.T4,Customer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,GetHashCode,The following statement contains a magic number: result = (result << 5) + result ^ (Id.GetHashCode ());
Magic Number,Test_Functionality.T4,Customer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,GetHashCode,The following statement contains a magic number: result = (result << 5) + result ^ (FirstName != null ? FirstName.GetHashCode () : NamedTupleCommon.DefaultHashCode);
Magic Number,Test_Functionality.T4,Customer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,GetHashCode,The following statement contains a magic number: result = (result << 5) + result ^ (LastName != null ? LastName.GetHashCode () : NamedTupleCommon.DefaultHashCode);
Magic Number,Test_Functionality.T4,Customer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,GetHashCode,The following statement contains a magic number: result = (result << 5) + result ^ (NamedTupleCommon.StructuralGetHashCode (Aliases));
Magic Number,Test_Functionality.T4,Customer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,GetHashCode,The following statement contains a magic number: result = (result << 5) + result ^ (InvoiceAddress != null ? InvoiceAddress.GetHashCode () : NamedTupleCommon.DefaultHashCode);
Magic Number,Test_Functionality.T4,Customer,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,GetHashCode,The following statement contains a magic number: result = (result << 5) + result ^ (DeliveryAddress != null ? DeliveryAddress.GetHashCode () : NamedTupleCommon.DefaultHashCode);
Magic Number,Test_Functionality.T4,Address,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,ToString,The following statement contains a magic number: var innerIndent = indent + 4;
Magic Number,Test_Functionality.T4,Address,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,GetHashCode,The following statement contains a magic number: result = (result << 5) + result ^ (Id.GetHashCode ());
Magic Number,Test_Functionality.T4,Address,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,GetHashCode,The following statement contains a magic number: result = (result << 5) + result ^ (CareOf != null ? CareOf.GetHashCode () : NamedTupleCommon.DefaultHashCode);
Magic Number,Test_Functionality.T4,Address,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,GetHashCode,The following statement contains a magic number: result = (result << 5) + result ^ (Address1 != null ? Address1.GetHashCode () : NamedTupleCommon.DefaultHashCode);
Magic Number,Test_Functionality.T4,Address,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,GetHashCode,The following statement contains a magic number: result = (result << 5) + result ^ (Address2 != null ? Address2.GetHashCode () : NamedTupleCommon.DefaultHashCode);
Magic Number,Test_Functionality.T4,Address,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,GetHashCode,The following statement contains a magic number: result = (result << 5) + result ^ (Address3 != null ? Address3.GetHashCode () : NamedTupleCommon.DefaultHashCode);
Magic Number,Test_Functionality.T4,Address,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,GetHashCode,The following statement contains a magic number: result = (result << 5) + result ^ (Address4 != null ? Address4.GetHashCode () : NamedTupleCommon.DefaultHashCode);
Magic Number,Test_Functionality.T4,Address,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,GetHashCode,The following statement contains a magic number: result = (result << 5) + result ^ (City != null ? City.GetHashCode () : NamedTupleCommon.DefaultHashCode);
Magic Number,Test_Functionality.T4,Address,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,GetHashCode,The following statement contains a magic number: result = (result << 5) + result ^ (Zip != null ? Zip.GetHashCode () : NamedTupleCommon.DefaultHashCode);
Magic Number,Test_Functionality.T4,Address,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,GetHashCode,The following statement contains a magic number: result = (result << 5) + result ^ (County != null ? County.GetHashCode () : NamedTupleCommon.DefaultHashCode);
Magic Number,Test_Functionality.T4,Address,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\NamedTuple.cs,GetHashCode,The following statement contains a magic number: result = (result << 5) + result ^ (Country != null ? Country.GetHashCode () : NamedTupleCommon.DefaultHashCode);
Magic Number,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_BasicTuple,The following statement contains a magic number: var one = new Session             {                 Id       = 101          '                 ClientIp = "192.168.0.1"'             };
Magic Number,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_BasicTuple,The following statement contains a magic number: var two = new Session             {                 Id       = 101          '                 ClientIp = "192.168.0.1"'             };
Magic Number,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_BasicTuple,The following statement contains a magic number: var three = new Session             {                 Id       = 201          '                 ClientIp = "192.168.0.2"'             };
Magic Number,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_StructuralTuple,The following statement contains a magic number: var one = new Customer             {                 Id          = 10L           '                 FirstName   = "A."          '                 LastName    = "Tester"      '                 Aliases     = new [] {"Another"' "Any"}'                 InvoiceAddress =                      new Address                     {                         Id       = 100L         '                         Address1 = "My street"  '                         Zip      = "000HOME"    '                         City     = "My hometown"'                         Country  = "The Motherland"                     }'                 DeliveryAddress =                      new Address                     {                         Id       = 101L                 '                         CareOf   = "My mom"             '                         Address1 = "My mom's street"    '                         Zip      = "001HOME"            '                         City     = "My mom's hometown"  '                         Country  = "The Motherland"                     }                              };
Magic Number,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_StructuralTuple,The following statement contains a magic number: var one = new Customer             {                 Id          = 10L           '                 FirstName   = "A."          '                 LastName    = "Tester"      '                 Aliases     = new [] {"Another"' "Any"}'                 InvoiceAddress =                      new Address                     {                         Id       = 100L         '                         Address1 = "My street"  '                         Zip      = "000HOME"    '                         City     = "My hometown"'                         Country  = "The Motherland"                     }'                 DeliveryAddress =                      new Address                     {                         Id       = 101L                 '                         CareOf   = "My mom"             '                         Address1 = "My mom's street"    '                         Zip      = "001HOME"            '                         City     = "My mom's hometown"  '                         Country  = "The Motherland"                     }                              };
Magic Number,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_StructuralTuple,The following statement contains a magic number: var one = new Customer             {                 Id          = 10L           '                 FirstName   = "A."          '                 LastName    = "Tester"      '                 Aliases     = new [] {"Another"' "Any"}'                 InvoiceAddress =                      new Address                     {                         Id       = 100L         '                         Address1 = "My street"  '                         Zip      = "000HOME"    '                         City     = "My hometown"'                         Country  = "The Motherland"                     }'                 DeliveryAddress =                      new Address                     {                         Id       = 101L                 '                         CareOf   = "My mom"             '                         Address1 = "My mom's street"    '                         Zip      = "001HOME"            '                         City     = "My mom's hometown"  '                         Country  = "The Motherland"                     }                              };
Magic Number,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_StructuralTuple,The following statement contains a magic number: var two = new Customer             {                 Id          = 10L           '                 FirstName   = "A."          '                 LastName    = "Tester"      '                 Aliases     = new [] {"Another"' "Any"}'                 InvoiceAddress =                      new Address                     {                         Id       = 100L         '                         Address1 = "My street"  '                         Zip      = "000HOME"    '                         City     = "My hometown"'                         Country  = "The Motherland"                     }'                 DeliveryAddress =                      new Address                     {                         Id       = 101L                 '                         CareOf   = "My mom"             '                         Address1 = "My mom's street"    '                         Zip      = "001HOME"            '                         City     = "My mom's hometown"  '                         Country  = "The Motherland"                     }                              };
Magic Number,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_StructuralTuple,The following statement contains a magic number: var two = new Customer             {                 Id          = 10L           '                 FirstName   = "A."          '                 LastName    = "Tester"      '                 Aliases     = new [] {"Another"' "Any"}'                 InvoiceAddress =                      new Address                     {                         Id       = 100L         '                         Address1 = "My street"  '                         Zip      = "000HOME"    '                         City     = "My hometown"'                         Country  = "The Motherland"                     }'                 DeliveryAddress =                      new Address                     {                         Id       = 101L                 '                         CareOf   = "My mom"             '                         Address1 = "My mom's street"    '                         Zip      = "001HOME"            '                         City     = "My mom's hometown"  '                         Country  = "The Motherland"                     }                              };
Magic Number,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_StructuralTuple,The following statement contains a magic number: var two = new Customer             {                 Id          = 10L           '                 FirstName   = "A."          '                 LastName    = "Tester"      '                 Aliases     = new [] {"Another"' "Any"}'                 InvoiceAddress =                      new Address                     {                         Id       = 100L         '                         Address1 = "My street"  '                         Zip      = "000HOME"    '                         City     = "My hometown"'                         Country  = "The Motherland"                     }'                 DeliveryAddress =                      new Address                     {                         Id       = 101L                 '                         CareOf   = "My mom"             '                         Address1 = "My mom's street"    '                         Zip      = "001HOME"            '                         City     = "My mom's hometown"  '                         Country  = "The Motherland"                     }                              };
Magic Number,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_StructuralTuple,The following statement contains a magic number: var three = new Customer             {                 Id          = 10L           '                 FirstName   = "A."          '                 LastName    = "Tester"      '                 Aliases     = new [] {"Another"' "Any"}'                 InvoiceAddress =                      new Address                     {                         Id       = 200L         '                         Address1 = "My street"  '                         Zip      = "000HOME"    '                         City     = "My hometown"'                         Country  = "The Motherland"                     }'                 DeliveryAddress =                      new Address                     {                         Id       = 201L                 '                         CareOf   = "My mom"             '                         Address1 = "My mom's street"    '                         Zip      = "001HOME"            '                         City     = "My mom's hometown"  '                         Country  = "The Motherland"                     }                              };
Magic Number,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_StructuralTuple,The following statement contains a magic number: var three = new Customer             {                 Id          = 10L           '                 FirstName   = "A."          '                 LastName    = "Tester"      '                 Aliases     = new [] {"Another"' "Any"}'                 InvoiceAddress =                      new Address                     {                         Id       = 200L         '                         Address1 = "My street"  '                         Zip      = "000HOME"    '                         City     = "My hometown"'                         Country  = "The Motherland"                     }'                 DeliveryAddress =                      new Address                     {                         Id       = 201L                 '                         CareOf   = "My mom"             '                         Address1 = "My mom's street"    '                         Zip      = "001HOME"            '                         City     = "My mom's hometown"  '                         Country  = "The Motherland"                     }                              };
Magic Number,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_StructuralTuple,The following statement contains a magic number: var three = new Customer             {                 Id          = 10L           '                 FirstName   = "A."          '                 LastName    = "Tester"      '                 Aliases     = new [] {"Another"' "Any"}'                 InvoiceAddress =                      new Address                     {                         Id       = 200L         '                         Address1 = "My street"  '                         Zip      = "000HOME"    '                         City     = "My hometown"'                         Country  = "The Motherland"                     }'                 DeliveryAddress =                      new Address                     {                         Id       = 201L                 '                         CareOf   = "My mom"             '                         Address1 = "My mom's street"    '                         Zip      = "001HOME"            '                         City     = "My mom's hometown"  '                         Country  = "The Motherland"                     }                              };
Magic Number,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_StructuralTuple,The following statement contains a magic number: var four = new Customer             {                 Id          = 20L           '                 FirstName   = "A."          '                 LastName    = "Tester"      '                 Aliases     = new [] {"Another"' "Any"}'                 InvoiceAddress =                      new Address                     {                         Id       = 200L         '                         Address1 = "My street"  '                         Zip      = "000HOME"    '                         City     = "My hometown"'                         Country  = "The Motherland"                     }'                 DeliveryAddress =                      new Address                     {                         Id       = 201L                 '                         CareOf   = "My mom"             '                         Address1 = "My mom's street"    '                         Zip      = "001HOME"            '                         City     = "My mom's hometown"  '                         Country  = "The Motherland"                     }                              };
Magic Number,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_StructuralTuple,The following statement contains a magic number: var four = new Customer             {                 Id          = 20L           '                 FirstName   = "A."          '                 LastName    = "Tester"      '                 Aliases     = new [] {"Another"' "Any"}'                 InvoiceAddress =                      new Address                     {                         Id       = 200L         '                         Address1 = "My street"  '                         Zip      = "000HOME"    '                         City     = "My hometown"'                         Country  = "The Motherland"                     }'                 DeliveryAddress =                      new Address                     {                         Id       = 201L                 '                         CareOf   = "My mom"             '                         Address1 = "My mom's street"    '                         Zip      = "001HOME"            '                         City     = "My mom's hometown"  '                         Country  = "The Motherland"                     }                              };
Magic Number,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_StructuralTuple,The following statement contains a magic number: var four = new Customer             {                 Id          = 20L           '                 FirstName   = "A."          '                 LastName    = "Tester"      '                 Aliases     = new [] {"Another"' "Any"}'                 InvoiceAddress =                      new Address                     {                         Id       = 200L         '                         Address1 = "My street"  '                         Zip      = "000HOME"    '                         City     = "My hometown"'                         Country  = "The Motherland"                     }'                 DeliveryAddress =                      new Address                     {                         Id       = 201L                 '                         CareOf   = "My mom"             '                         Address1 = "My mom's street"    '                         Zip      = "001HOME"            '                         City     = "My mom's hometown"  '                         Country  = "The Motherland"                     }                              };
Magic Number,Test_Functionality.HRON,TestsFor_HRON,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\HRON\TestsFor_HRON.cs,Test_TryParseDynamic,The following statement contains a magic number: TestFor.Equality(                             10'                             parsedTimeOut'                             "Expects parsed CustomerDB timeout"                             );
Magic Number,Test_Functionality.HRON,TestsFor_HRON,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\HRON\TestsFor_HRON.cs,Test_TryParseDynamic,The following statement contains a magic number: TestFor.Equality(                                 10'                                 optParsedTimeOut.Value'                                 "Expects parsed CustomerDB timeout"                                 );
Magic Number,Test_Functionality.HRON,TestsFor_HRON,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\HRON\TestsFor_HRON.cs,Test_TryParseDynamic,The following statement contains a magic number: TestFor.Equality(                                 10'                                 arrParsedTimeOut[0]'                                 "Expects parsed CustomerDB timeout"                                 );
Magic Number,Test_Functionality.HRON,TestsFor_HRON,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\HRON\TestsFor_HRON.cs,Test_TryParseDynamic,The following statement contains a magic number: TestFor.Equality(2' connections.GetCount()' "Expects two database connections")
Magic Number,Test_Functionality.HRON,TestsFor_HRON,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\HRON\TestsFor_HRON.cs,Test_Issue4,The following statement contains a magic number: var result = HRONSerializer.TryParseObject(                 100'                 hron.ReadLines()'                 out resultsStrings'                 out errors                 );
Magic Number,Source.HRON,BaseHRONEntity,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(128);
Magic Number,Source.HRON,BaseHRONEntity,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(128);
Magic Number,Source.HRON,BaseHRONEntity,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(128);
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Collections,SkipList<TKey;TValue>,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,CreateNode,The following statement contains a magic number: switch (size)                 {                 case 1: return new Node1 ();                 case 2: return new Node2 ();                 case 3: return new Node3 ();                 case 4: return new Node4 ();                 case 5: return new Node5 ();                 case 6: return new Node6 ();                 case 7: return new Node7 ();                 case 8: return new Node8 ();                 case 9: return new Node9 ();                 case 10: return new Node10 ();                 case 11: return new Node11 ();                 case 12: return new Node12 ();                 case 13: return new Node13 ();                 case 14: return new Node14 ();                 case 15: return new Node15 ();                 case 16: return new Node16 ();                 case 17: return new Node17 ();                 case 18: return new Node18 ();                 case 19: return new Node19 ();                 case 20: return new Node20 ();                 case 21: return new Node21 ();                 case 22: return new Node22 ();                 case 23: return new Node23 ();                 case 24: return new Node24 ();                 case 25: return new Node25 ();                 case 26: return new Node26 ();                 case 27: return new Node27 ();                 case 28: return new Node28 ();                 case 29: return new Node29 ();                 case 30: return new Node30 ();                              default: throw new IndexOutOfRangeException ();                 }
Magic Number,Source.Concurrency,SequentialTaskScheduler,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,ShutDown,The following statement contains a magic number: var joinTimeOut = (int)remainingTime.Remaining.TotalMilliseconds/2;
Magic Number,Source.Concurrency,SequentialTaskScheduler,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,ShutDown,The following statement contains a magic number: var joinTimeOut = (int)remainingTime.Remaining.TotalMilliseconds/2;
Magic Number,Source.Concurrency,SequentialTaskScheduler,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,ShutDown,The following statement contains a magic number: var joinTimeOut = (int)remainingTime.Remaining.TotalMilliseconds/2;
Magic Number,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,ToString,The following statement contains a magic number: start = start - count/2;
Magic Number,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,EqualityImpl,The following statement contains a magic number: Log.Error("TestFor.Equality: #EXPECTED:{0}' #FOUND:{1} - First diff @{2} - {3}"'                             sExpected.ToString(firstDiff' 16)'                             sFound.ToString(firstDiff' 16)'                             length'                             message                             );
Magic Number,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,EqualityImpl,The following statement contains a magic number: Log.Error("TestFor.Equality: #EXPECTED:{0}' #FOUND:{1} - First diff @{2} - {3}"'                             sExpected.ToString(firstDiff' 16)'                             sFound.ToString(firstDiff' 16)'                             length'                             message                             );
Magic Number,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,ToString,The following statement contains a magic number: start = start - count/2;
Magic Number,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,EqualityImpl,The following statement contains a magic number: Log.Error("TestFor.Equality: #EXPECTED:{0}' #FOUND:{1} - First diff @{2} - {3}"'                             sExpected.ToString(firstDiff' 16)'                             sFound.ToString(firstDiff' 16)'                             length'                             message                             );
Magic Number,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,EqualityImpl,The following statement contains a magic number: Log.Error("TestFor.Equality: #EXPECTED:{0}' #FOUND:{1} - First diff @{2} - {3}"'                             sExpected.ToString(firstDiff' 16)'                             sFound.ToString(firstDiff' 16)'                             length'                             message                             );
Magic Number,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,ToString,The following statement contains a magic number: start = start - count/2;
Magic Number,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,EqualityImpl,The following statement contains a magic number: Log.Error("TestFor.Equality: #EXPECTED:{0}' #FOUND:{1} - First diff @{2} - {3}"'                             sExpected.ToString(firstDiff' 16)'                             sFound.ToString(firstDiff' 16)'                             length'                             message                             );
Magic Number,Source.Testing,TestFor,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,EqualityImpl,The following statement contains a magic number: Log.Error("TestFor.Equality: #EXPECTED:{0}' #FOUND:{1} - First diff @{2} - {3}"'                             sExpected.ToString(firstDiff' 16)'                             sFound.ToString(firstDiff' 16)'                             length'                             message                             );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<Int64>           (127   ' SqlDbType.BigInt           ' getter:r => r.GetInt64(0)            ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<Int64>           (127   ' SqlDbType.BigInt           ' getter:r => r.GetInt64(0)            ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<Byte[]>          (173   ' SqlDbType.Binary           ' getter:null                          ' elementSize:1    ' requiresDimension:true    ' dbDefaultValue:""          );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<Boolean>         (104   ' SqlDbType.Bit              ' getter:r => r.GetBoolean(0)          ' elementSize:1    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<String>          (175   ' SqlDbType.Char             ' getter:r => r.GetString(0)           ' elementSize:1    ' requiresDimension:true    ' dbDefaultValue:"''"        );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (61    ' SqlDbType.DateTime         ' getter:r => r.GetDateTime(0)         ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:"1900-01-01");
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (61    ' SqlDbType.DateTime         ' getter:r => r.GetDateTime(0)         ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:"1900-01-01");
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<Decimal>         (106   ' SqlDbType.Decimal          ' getter:r => r.GetDecimal(0)          ' elementSize:17   ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<Decimal>         (106   ' SqlDbType.Decimal          ' getter:r => r.GetDecimal(0)          ' elementSize:17   ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<Double>          (62    ' SqlDbType.Float            ' getter:r => r.GetDouble(0)           ' elementSize:4    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<Double>          (62    ' SqlDbType.Float            ' getter:r => r.GetDouble(0)           ' elementSize:4    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<Byte[]>          (34    ' SqlDbType.Image            ' getter:null                          ' elementSize:1    ' requiresDimension:false   ' dbDefaultValue:""          );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<Int32>           (56    ' SqlDbType.Int              ' getter:r => r.GetInt32(0)            ' elementSize:4    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<Int32>           (56    ' SqlDbType.Int              ' getter:r => r.GetInt32(0)            ' elementSize:4    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<Decimal>         (60    ' SqlDbType.Money            ' getter:r => r.GetDecimal(0)          ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<Decimal>         (60    ' SqlDbType.Money            ' getter:r => r.GetDecimal(0)          ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<String>          (239   ' SqlDbType.NChar            ' getter:r => r.GetString(0)           ' elementSize:2    ' requiresDimension:true    ' dbDefaultValue:"''"        );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<String>          (239   ' SqlDbType.NChar            ' getter:r => r.GetString(0)           ' elementSize:2    ' requiresDimension:true    ' dbDefaultValue:"''"        );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<String>          (99    ' SqlDbType.NText            ' getter:r => r.GetString(0)           ' elementSize:2    ' requiresDimension:false   ' dbDefaultValue:"''"        );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<String>          (99    ' SqlDbType.NText            ' getter:r => r.GetString(0)           ' elementSize:2    ' requiresDimension:false   ' dbDefaultValue:"''"        );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<String>          (231   ' SqlDbType.NVarChar         ' getter:r => r.GetString(0)           ' elementSize:2    ' requiresDimension:true    ' dbDefaultValue:"''"        );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<String>          (231   ' SqlDbType.NVarChar         ' getter:r => r.GetString(0)           ' elementSize:2    ' requiresDimension:true    ' dbDefaultValue:"''"        );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<Single>          (59    ' SqlDbType.Real             ' getter:r => r.GetFloat(0)            ' elementSize:4    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<Single>          (59    ' SqlDbType.Real             ' getter:r => r.GetFloat(0)            ' elementSize:4    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<Guid>            (36    ' SqlDbType.UniqueIdentifier ' getter:r => r.GetGuid(0)             ' elementSize:1    ' requiresDimension:false   ' dbDefaultValue:""          );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (58    ' SqlDbType.SmallDateTime    ' getter:r => r.GetDateTime(0)         ' elementSize:4    ' requiresDimension:false   ' dbDefaultValue:"1900-01-01");
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (58    ' SqlDbType.SmallDateTime    ' getter:r => r.GetDateTime(0)         ' elementSize:4    ' requiresDimension:false   ' dbDefaultValue:"1900-01-01");
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<Int16>           (52    ' SqlDbType.SmallInt         ' getter:r => r.GetInt16(0)            ' elementSize:2    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<Int16>           (52    ' SqlDbType.SmallInt         ' getter:r => r.GetInt16(0)            ' elementSize:2    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<Decimal>         (122   ' SqlDbType.SmallMoney       ' getter:r => r.GetDecimal(0)          ' elementSize:4    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<Decimal>         (122   ' SqlDbType.SmallMoney       ' getter:r => r.GetDecimal(0)          ' elementSize:4    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<String>          (35    ' SqlDbType.Text             ' getter:r => r.GetString(0)           ' elementSize:1    ' requiresDimension:false   ' dbDefaultValue:"''"        );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (189   ' SqlDbType.Timestamp        ' getter:r => r.GetDateTime(0)         ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:""          );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (189   ' SqlDbType.Timestamp        ' getter:r => r.GetDateTime(0)         ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:""          );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<Byte>            (48    ' SqlDbType.TinyInt          ' getter:r => r.GetByte(0)             ' elementSize:1    ' requiresDimension:false   ' dbDefaultValue:"0"         );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<Byte[]>          (165   ' SqlDbType.VarBinary        ' getter:null                          ' elementSize:1    ' requiresDimension:true    ' dbDefaultValue:""          );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<String>          (167   ' SqlDbType.VarChar          ' getter:r => r.GetString(0)           ' elementSize:1    ' requiresDimension:true    ' dbDefaultValue:"''"        );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<object>          (98    ' SqlDbType.Variant          ' getter:r => r.GetValue(0)            ' elementSize: -1  ' requiresDimension:false   ' dbDefaultValue:""          );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<XmlReader>       (241   ' SqlDbType.Xml              ' getter:r => r.GetXmlReader(0)        ' elementSize:-1   ' requiresDimension:false   ' dbDefaultValue:""          );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (40    ' SqlDbType.Date             ' getter:r => r.GetDateTime(0)         ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:"1900-01-01");
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (40    ' SqlDbType.Date             ' getter:r => r.GetDateTime(0)         ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:"1900-01-01");
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (41    ' SqlDbType.Time             ' getter:r => r.GetDateTime(0)         ' elementSize:5    ' requiresDimension:false   ' dbDefaultValue:""          );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (41    ' SqlDbType.Time             ' getter:r => r.GetDateTime(0)         ' elementSize:5    ' requiresDimension:false   ' dbDefaultValue:""          );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (42    ' SqlDbType.DateTime2        ' getter:r => r.GetDateTime(0)         ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:"1900-01-01");
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<DateTime>        (42    ' SqlDbType.DateTime2        ' getter:r => r.GetDateTime(0)         ' elementSize:8    ' requiresDimension:false   ' dbDefaultValue:"1900-01-01");
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<DateTimeOffset>  (43    ' SqlDbType.DateTimeOffset   ' getter:r => r.GetDateTimeOffset(0)   ' elementSize:10   ' requiresDimension:false   ' dbDefaultValue:""          );
Magic Number,Source.SQL,TypeDefinition,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,TypeDefinition,The following statement contains a magic number: Add<DateTimeOffset>  (43    ' SqlDbType.DateTimeOffset   ' getter:r => r.GetDateTimeOffset(0)   ' elementSize:10   ' requiresDimension:false   ' dbDefaultValue:""          );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var type = new TypeDefinition (                                 reader.GetString(0) '                                  reader.GetString(1) '                                  reader.GetByte(2)   '                                  reader.GetInt32(3)  '                                  reader.GetInt16(4)  '                                  reader.GetByte(5)   '                                  reader.GetByte(6)   '                                  reader.GetString(7) '                                  reader.GetBoolean(8)                                  );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var type = new TypeDefinition (                                 reader.GetString(0) '                                  reader.GetString(1) '                                  reader.GetByte(2)   '                                  reader.GetInt32(3)  '                                  reader.GetInt16(4)  '                                  reader.GetByte(5)   '                                  reader.GetByte(6)   '                                  reader.GetString(7) '                                  reader.GetBoolean(8)                                  );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var type = new TypeDefinition (                                 reader.GetString(0) '                                  reader.GetString(1) '                                  reader.GetByte(2)   '                                  reader.GetInt32(3)  '                                  reader.GetInt16(4)  '                                  reader.GetByte(5)   '                                  reader.GetByte(6)   '                                  reader.GetString(7) '                                  reader.GetBoolean(8)                                  );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var type = new TypeDefinition (                                 reader.GetString(0) '                                  reader.GetString(1) '                                  reader.GetByte(2)   '                                  reader.GetInt32(3)  '                                  reader.GetInt16(4)  '                                  reader.GetByte(5)   '                                  reader.GetByte(6)   '                                  reader.GetString(7) '                                  reader.GetBoolean(8)                                  );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var type = new TypeDefinition (                                 reader.GetString(0) '                                  reader.GetString(1) '                                  reader.GetByte(2)   '                                  reader.GetInt32(3)  '                                  reader.GetInt16(4)  '                                  reader.GetByte(5)   '                                  reader.GetByte(6)   '                                  reader.GetString(7) '                                  reader.GetBoolean(8)                                  );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var type = new TypeDefinition (                                 reader.GetString(0) '                                  reader.GetString(1) '                                  reader.GetByte(2)   '                                  reader.GetInt32(3)  '                                  reader.GetInt16(4)  '                                  reader.GetByte(5)   '                                  reader.GetByte(6)   '                                  reader.GetString(7) '                                  reader.GetBoolean(8)                                  );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var type = new TypeDefinition (                                 reader.GetString(0) '                                  reader.GetString(1) '                                  reader.GetByte(2)   '                                  reader.GetInt32(3)  '                                  reader.GetInt16(4)  '                                  reader.GetByte(5)   '                                  reader.GetByte(6)   '                                  reader.GetString(7) '                                  reader.GetBoolean(8)                                  );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var fullName = reader.GetString(1) + "." + reader.GetString (2);
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var column = new ColumnSubObject (                                 reader.GetString(3)   '                                 type                  '                                 reader.GetInt32(4)    '                                  reader.GetInt16(5)    '                                  reader.GetByte(6)     '                                  reader.GetByte(7)     '                                  reader.GetString(8)   '                                  reader.GetBoolean(9)  '                                  reader.GetBoolean(10) '                                  reader.GetBoolean(11)                                  );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var column = new ColumnSubObject (                                 reader.GetString(3)   '                                 type                  '                                 reader.GetInt32(4)    '                                  reader.GetInt16(5)    '                                  reader.GetByte(6)     '                                  reader.GetByte(7)     '                                  reader.GetString(8)   '                                  reader.GetBoolean(9)  '                                  reader.GetBoolean(10) '                                  reader.GetBoolean(11)                                  );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var column = new ColumnSubObject (                                 reader.GetString(3)   '                                 type                  '                                 reader.GetInt32(4)    '                                  reader.GetInt16(5)    '                                  reader.GetByte(6)     '                                  reader.GetByte(7)     '                                  reader.GetString(8)   '                                  reader.GetBoolean(9)  '                                  reader.GetBoolean(10) '                                  reader.GetBoolean(11)                                  );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var column = new ColumnSubObject (                                 reader.GetString(3)   '                                 type                  '                                 reader.GetInt32(4)    '                                  reader.GetInt16(5)    '                                  reader.GetByte(6)     '                                  reader.GetByte(7)     '                                  reader.GetString(8)   '                                  reader.GetBoolean(9)  '                                  reader.GetBoolean(10) '                                  reader.GetBoolean(11)                                  );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var column = new ColumnSubObject (                                 reader.GetString(3)   '                                 type                  '                                 reader.GetInt32(4)    '                                  reader.GetInt16(5)    '                                  reader.GetByte(6)     '                                  reader.GetByte(7)     '                                  reader.GetString(8)   '                                  reader.GetBoolean(9)  '                                  reader.GetBoolean(10) '                                  reader.GetBoolean(11)                                  );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var column = new ColumnSubObject (                                 reader.GetString(3)   '                                 type                  '                                 reader.GetInt32(4)    '                                  reader.GetInt16(5)    '                                  reader.GetByte(6)     '                                  reader.GetByte(7)     '                                  reader.GetString(8)   '                                  reader.GetBoolean(9)  '                                  reader.GetBoolean(10) '                                  reader.GetBoolean(11)                                  );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var column = new ColumnSubObject (                                 reader.GetString(3)   '                                 type                  '                                 reader.GetInt32(4)    '                                  reader.GetInt16(5)    '                                  reader.GetByte(6)     '                                  reader.GetByte(7)     '                                  reader.GetString(8)   '                                  reader.GetBoolean(9)  '                                  reader.GetBoolean(10) '                                  reader.GetBoolean(11)                                  );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var column = new ColumnSubObject (                                 reader.GetString(3)   '                                 type                  '                                 reader.GetInt32(4)    '                                  reader.GetInt16(5)    '                                  reader.GetByte(6)     '                                  reader.GetByte(7)     '                                  reader.GetString(8)   '                                  reader.GetBoolean(9)  '                                  reader.GetBoolean(10) '                                  reader.GetBoolean(11)                                  );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var column = new ColumnSubObject (                                 reader.GetString(3)   '                                 type                  '                                 reader.GetInt32(4)    '                                  reader.GetInt16(5)    '                                  reader.GetByte(6)     '                                  reader.GetByte(7)     '                                  reader.GetString(8)   '                                  reader.GetBoolean(9)  '                                  reader.GetBoolean(10) '                                  reader.GetBoolean(11)                                  );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var fullName = reader.GetString(1) + "." + reader.GetString (2);
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var parameter = new ParameterSubObject (                                 reader.GetString(3)   '                                 type                  '                                 reader.GetInt32(4)    '                                  reader.GetInt16(5)    '                                  reader.GetByte(6)     '                                  reader.GetByte(7)     '                                  reader.GetBoolean(8)                                    );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var parameter = new ParameterSubObject (                                 reader.GetString(3)   '                                 type                  '                                 reader.GetInt32(4)    '                                  reader.GetInt16(5)    '                                  reader.GetByte(6)     '                                  reader.GetByte(7)     '                                  reader.GetBoolean(8)                                    );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var parameter = new ParameterSubObject (                                 reader.GetString(3)   '                                 type                  '                                 reader.GetInt32(4)    '                                  reader.GetInt16(5)    '                                  reader.GetByte(6)     '                                  reader.GetByte(7)     '                                  reader.GetBoolean(8)                                    );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var parameter = new ParameterSubObject (                                 reader.GetString(3)   '                                 type                  '                                 reader.GetInt32(4)    '                                  reader.GetInt16(5)    '                                  reader.GetByte(6)     '                                  reader.GetByte(7)     '                                  reader.GetBoolean(8)                                    );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var parameter = new ParameterSubObject (                                 reader.GetString(3)   '                                 type                  '                                 reader.GetInt32(4)    '                                  reader.GetInt16(5)    '                                  reader.GetByte(6)     '                                  reader.GetByte(7)     '                                  reader.GetBoolean(8)                                    );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var parameter = new ParameterSubObject (                                 reader.GetString(3)   '                                 type                  '                                 reader.GetInt32(4)    '                                  reader.GetInt16(5)    '                                  reader.GetByte(6)     '                                  reader.GetByte(7)     '                                  reader.GetBoolean(8)                                    );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var name = reader.GetString(2);
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var schemaObjectType = ToSchemaType(reader.GetString(3));
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var schemaObject = new SchemaObject (                                 objectId                    '                                 schema                      '                                 name                        '                                 schemaObjectType            '                                 reader.GetDateTime(4)       '                                 reader.GetDateTime(5)       '                                 NonNull(columns)                                     .Where(c => c != null)                                     .OrderBy(c => c.Id)                                     .ToArray()                                     '                                 NonNull(parameters)                                     .Where(p => p != null)                                     .OrderBy(p => p.Id)                                     .ToArray()                                 );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,Schema,The following statement contains a magic number: var schemaObject = new SchemaObject (                                 objectId                    '                                 schema                      '                                 name                        '                                 schemaObjectType            '                                 reader.GetDateTime(4)       '                                 reader.GetDateTime(5)       '                                 NonNull(columns)                                     .Where(c => c != null)                                     .OrderBy(c => c.Id)                                     .ToArray()                                     '                                 NonNull(parameters)                                     .Where(p => p != null)                                     .OrderBy(p => p.Id)                                     .ToArray()                                 );
Magic Number,Source.SQL,Schema,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\IncludeFiles.cs,AddObject,The following statement contains a magic number: list = new List<T> (16);
Magic Number,Test_Functionality,Program,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\Program.cs,Main,The following statement contains a magic number: Environment.ExitCode = testResult ? 0 : 101;
Magic Number,Test_Functionality.Text,TestsFor_LineToObjectExtensions,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\Text\TestsFor_LineToObjectExtensions.cs,Test_Basic,The following statement contains a magic number: TestFor.Equality(line[2]' customer.LastName ' "LastName must match for line: {0}".FormatWith(index));
Duplicate Code,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_StructuralTuple,The method contains a code clone-set at the following line numbers (starting from the method definition): ((3' 29)' (31' 57))
Duplicate Code,Test_Functionality.T4,TestsFor_NamedTuple,C:\research\architectureSmells\repos\mrange_T4Include\NonSource\Tests\Test_Functionality\T4\TestsFor_NamedTuple.cs,Test_StructuralTuple,The method contains a code clone-set at the following line numbers (starting from the method definition): ((61' 85)' (89' 113))
