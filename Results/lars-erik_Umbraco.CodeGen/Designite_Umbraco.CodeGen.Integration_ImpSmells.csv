Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Umbraco.CodeGen.Integration.Api,ConfigurationController,C:\repos\lars-erik_Umbraco.CodeGen\Umbraco.CodeGen.Integration\Api\ConfigurationController.cs,GetFactories,The length of the statement  "                        ParserFactory = ((Type)t.CustomAttributes.Single(a => a.AttributeType == typeof(ParserAttribute)).ConstructorArguments[0].Value).FullName' " is 138.
Long Statement,Umbraco.CodeGen.Integration.Api,ConfigurationController,C:\repos\lars-erik_Umbraco.CodeGen\Umbraco.CodeGen.Integration\Api\ConfigurationController.cs,GetFactories,The length of the statement  "                        Description = (string)t.CustomAttributes.Single(a => a.AttributeType == typeof(DescriptionAttribute)).ConstructorArguments[0].Value " is 131.
Long Statement,Umbraco.CodeGen.Integration.Api,PreviewController,C:\repos\lars-erik_Umbraco.CodeGen\Umbraco.CodeGen.Integration\Api\PreviewController.cs,GetPreview,The length of the statement  "            var contentPath = ApplicationContext.Services.ContentTypeService.GetAllContentTypes(docType.Path.Split(''').Select(p => Convert.ToInt32(p)).ToArray()); " is 151.
Long Statement,Umbraco.CodeGen.Integration.Api,PreviewController,C:\repos\lars-erik_Umbraco.CodeGen\Umbraco.CodeGen.Integration\Api\PreviewController.cs,GetPreview,The length of the statement  "            var generatorFactory = ApplicationEvents.CreateFactory<CodeGeneratorFactory>(Integration.Configuration.CodeGen.GeneratorFactory); " is 129.
Long Statement,Umbraco.CodeGen.Integration.Api,PreviewTreeController,C:\repos\lars-erik_Umbraco.CodeGen\Umbraco.CodeGen.Integration\Api\PreviewController.cs,CreateRootNode,The length of the statement  "            var node = CreateTreeNode(Guid.NewGuid().ToString("N")' ""' queryStrings' "CodeGen"' "icon-brackets"' "developer/codegen/codegen.configuration/null"); " is 150.
Long Statement,Umbraco.CodeGen.Integration,ApplicationEvents,C:\repos\lars-erik_Umbraco.CodeGen\Umbraco.CodeGen.Integration\ApplicationEvents.cs,OnApplicationStarting,The length of the statement  "                    LogHelper.Info<CodeGenerator>(() => String.Format("Parsing typed documenttype models done. Took {0}"' DateTime.Now - globalStart)); " is 131.
Long Statement,Umbraco.CodeGen.Integration,ApplicationEvents,C:\repos\lars-erik_Umbraco.CodeGen\Umbraco.CodeGen.Integration\ApplicationEvents.cs,OnApplicationStarting,The length of the statement  "                    LogHelper.Info<CodeGenerator>(() => String.Format("Parsing typed mediatype models done. Took {0}"' DateTime.Now - globalStart)); " is 128.
Long Statement,Umbraco.CodeGen.Integration,ApplicationEvents,C:\repos\lars-erik_Umbraco.CodeGen\Umbraco.CodeGen.Integration\ApplicationEvents.cs,GenerateXml,The length of the statement  "            LogHelper.Info<CodeGenerator>(() => String.Format("Writing uSync definitions done. Took {0}"' DateTime.Now - itemStart)); " is 121.
Long Statement,Umbraco.CodeGen.Integration,ApplicationEvents,C:\repos\lars-erik_Umbraco.CodeGen\Umbraco.CodeGen.Integration\ApplicationEvents.cs,WriteDocuments,The length of the statement  "			var docsAtLevel = documents.Where(doc => doc.Element(contentTypeName).Element("Info").Element("Master").Value == baseClass); " is 124.
Long Statement,Umbraco.CodeGen.Integration,USyncConfigurationProvider,C:\repos\lars-erik_Umbraco.CodeGen\Umbraco.CodeGen.Integration\USyncConfigurationProvider.cs,GetConfiguration,The length of the statement  "			var relativePath = doc.XPathSelectElements("configuration/usync").Select(e => e.AttributeValue("folder")).SingleOrDefault(); " is 124.
Magic Number,Umbraco.CodeGen.Integration.Api,ConfigurationController,C:\repos\lars-erik_Umbraco.CodeGen\Umbraco.CodeGen.Integration\Api\ConfigurationController.cs,GetTypeProposal,The following statement contains a magic number: return AppDomain.CurrentDomain                  .GetAssemblies()                  .SelectMany(a => a.GetTypes())                  .Where(t => t.Name.StartsWith(input' IgnoreCase) || t.FullName.StartsWith(input' IgnoreCase))                  .Select(t => t.Namespace == "System" ? t.Name : t.FullName)                  .OrderBy(s => s.Length)                  .Take(10);
