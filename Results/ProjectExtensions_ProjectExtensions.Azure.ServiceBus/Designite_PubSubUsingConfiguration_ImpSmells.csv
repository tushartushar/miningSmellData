Implementation smell,Namespace,Class,File,Method,Description
Long Statement,PubSubUsingConfiguration,AnotherTestMessageSubscriber,C:\repos\ProjectExtensions_ProjectExtensions.Azure.ServiceBus\src\Samples\PubSubUsingConfiguration\AnotherTestMessageSubscriber.cs,Handle,The length of the statement  "            logger.Info("AnotherTestMessageSubscriber Message received: {0} {1} {2}"' message.Message.Value' message.Message.MessageId' sw.ElapsedMilliseconds); " is 148.
Long Statement,PubSubUsingConfiguration,TestMessageSubscriberNumber2,C:\repos\ProjectExtensions_ProjectExtensions.Azure.ServiceBus\src\Samples\PubSubUsingConfiguration\TestMessageSubscriber.cs,Handle,The length of the statement  "            logger.Info("TestMessageSubscriberNumber2 Message received: {0} {1}"' message.Message.Value' message.Message.MessageId); " is 120.
Long Statement,PubSubUsingConfiguration,Program,C:\repos\ProjectExtensions_ProjectExtensions.Azure.ServiceBus\src\Samples\PubSubUsingConfiguration\Program.cs,Main,The length of the statement  "                BusConfiguration.Instance.Bus.Publish(message1' null); //Optional Dictionary of name value pairs to pass with the massage. Can be used for filtering " is 148.
Magic Number,PubSubUsingConfiguration,Program,C:\repos\ProjectExtensions_ProjectExtensions.Azure.ServiceBus\src\Samples\PubSubUsingConfiguration\Program.cs,Main,The following statement contains a magic number: using (var scope = new TransactionScope()) {                  for (int i = 0; i < 4; i++) {                      var sw = new Stopwatch();                      sw.Start();                      var message1 = new TestMessage() {                          Value = 1000 + i'                          MessageId = DateTime.Now.ToString()                      };                      var values = new Dictionary<string' object>();                      values.Add("hello"' i);                        BusConfiguration.Instance.Bus.Publish(message1' values);                      sw.Stop();                      Debug.WriteLine("sync:" + sw.Elapsed);                      Console.WriteLine("sync:" + sw.Elapsed);                  }                  scope.Complete();              }
Magic Number,PubSubUsingConfiguration,Program,C:\repos\ProjectExtensions_ProjectExtensions.Azure.ServiceBus\src\Samples\PubSubUsingConfiguration\Program.cs,Main,The following statement contains a magic number: using (var scope = new TransactionScope()) {                  for (int i = 0; i < 4; i++) {                      var sw = new Stopwatch();                      sw.Start();                      var message1 = new TestMessage() {                          Value = 1000 + i'                          MessageId = DateTime.Now.ToString()                      };                      var values = new Dictionary<string' object>();                      values.Add("hello"' i);                        BusConfiguration.Instance.Bus.Publish(message1' values);                      sw.Stop();                      Debug.WriteLine("sync:" + sw.Elapsed);                      Console.WriteLine("sync:" + sw.Elapsed);                  }                  scope.Complete();              }
Magic Number,PubSubUsingConfiguration,Program,C:\repos\ProjectExtensions_ProjectExtensions.Azure.ServiceBus\src\Samples\PubSubUsingConfiguration\Program.cs,Main,The following statement contains a magic number: for (int i = 1; i <= 20; i++) {                  var sw = new Stopwatch();                  sw.Start();                  var message1 = new TestMessage() {                      Value = i'                      MessageId = DateTime.Now.ToString()                  };                  //BusConfiguration.Instance.Bus.PublishAsync(message1' (result) => {                  //    Console.WriteLine(result.TimeSpent);                  //}' null);                  BusConfiguration.Instance.Bus.Publish(message1' null); //Optional Dictionary of name value pairs to pass with the massage. Can be used for filtering                  sw.Stop();                  Debug.WriteLine("sync:" + sw.Elapsed);                  Console.WriteLine("sync:" + sw.Elapsed);              }
Magic Number,PubSubUsingConfiguration,Program,C:\repos\ProjectExtensions_ProjectExtensions.Azure.ServiceBus\src\Samples\PubSubUsingConfiguration\Program.cs,Main,The following statement contains a magic number: for (int i = 1; i <= 20; i++) {                  var message2 = new AnotherTestMessage() {                      Value = i'                      MessageId = DateTime.Now.ToString()                  };                  BusConfiguration.Instance.Bus.PublishAsync(message2' (result) => {                      if (!result.IsSuccess) {                           //message failed.                      }                      Debug.WriteLine("async:" + result.TimeSpent);                      Console.WriteLine("async:" + result.TimeSpent);                  }' null); //Optional Dictionary of name value pairs to pass with the massage. Can be used for filtering              }
