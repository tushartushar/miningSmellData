Implementation smell,Namespace,Class,File,Method,Description
Long Method,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,SaveAsPdf,The method has 104 lines of code.
Complex Method,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,Cyclomatic complexity of the method is 16
Complex Method,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,DoRender,Cyclomatic complexity of the method is 14
Complex Method,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,SaveAs,Cyclomatic complexity of the method is 18
Complex Method,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Size,Cyclomatic complexity of the method is 10
Long Statement,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,SaveAs,The length of the statement  "						Console.WriteLine("Unsupported file extension '{0}'.  Must be 'pdf'' 'xml'' 'mht'' 'csv'' 'xslx'' 'xlsx_table'' 'rtf'' 'tif'' 'tifb' or 'html'"' type); " is 151.
Long Statement,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Size,The length of the statement  "					Console.WriteLine(string.Format("Unknown characters in '{0}' specified.  Number must be of form '###.##'.  Local conversion will be attempted."' t)); " is 149.
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,The following statement contains a magic number: return 8;
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,The following statement contains a magic number: string t = s.Substring(0'2);
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,The following statement contains a magic number: switch (t)  				{  					case "/l":  					case "-l":  						WriteLicense();  						return 0;  					case "/f":  					case "-f":  						files = s.Substring(2).Split(breakChars);  						break;  					case "/o":  					case "-o":  						dir = s.Substring(2);  						break;  					case "/p":  					case "-p":  						rc._DataSourcePassword = s.Substring(2);  						break;  					case "/t":  					case "-t":  						types = s.Substring(2).Split(breakChars);  						break;  					case "/?":  					case "-?":  						WriteHelp();  						return 0;                      case "/s":                      case "-s":                          rc._ShowStats = true;                          break;  					case "/i":  					case "-i":  						rc._StampInfo = s.Substring(2);  						break;                      case "/u":                      case "-u":                          rc._user = s.Substring(2); // Allow the user to be set via a command line param (u) GJL AJM 12062008                          break;                      default:  						Console.WriteLine("Unknown command '{0}' ignored."' s);  						returnCode = 4;  						break;  				}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,The following statement contains a magic number: switch (t)  				{  					case "/l":  					case "-l":  						WriteLicense();  						return 0;  					case "/f":  					case "-f":  						files = s.Substring(2).Split(breakChars);  						break;  					case "/o":  					case "-o":  						dir = s.Substring(2);  						break;  					case "/p":  					case "-p":  						rc._DataSourcePassword = s.Substring(2);  						break;  					case "/t":  					case "-t":  						types = s.Substring(2).Split(breakChars);  						break;  					case "/?":  					case "-?":  						WriteHelp();  						return 0;                      case "/s":                      case "-s":                          rc._ShowStats = true;                          break;  					case "/i":  					case "-i":  						rc._StampInfo = s.Substring(2);  						break;                      case "/u":                      case "-u":                          rc._user = s.Substring(2); // Allow the user to be set via a command line param (u) GJL AJM 12062008                          break;                      default:  						Console.WriteLine("Unknown command '{0}' ignored."' s);  						returnCode = 4;  						break;  				}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,The following statement contains a magic number: switch (t)  				{  					case "/l":  					case "-l":  						WriteLicense();  						return 0;  					case "/f":  					case "-f":  						files = s.Substring(2).Split(breakChars);  						break;  					case "/o":  					case "-o":  						dir = s.Substring(2);  						break;  					case "/p":  					case "-p":  						rc._DataSourcePassword = s.Substring(2);  						break;  					case "/t":  					case "-t":  						types = s.Substring(2).Split(breakChars);  						break;  					case "/?":  					case "-?":  						WriteHelp();  						return 0;                      case "/s":                      case "-s":                          rc._ShowStats = true;                          break;  					case "/i":  					case "-i":  						rc._StampInfo = s.Substring(2);  						break;                      case "/u":                      case "-u":                          rc._user = s.Substring(2); // Allow the user to be set via a command line param (u) GJL AJM 12062008                          break;                      default:  						Console.WriteLine("Unknown command '{0}' ignored."' s);  						returnCode = 4;  						break;  				}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,The following statement contains a magic number: switch (t)  				{  					case "/l":  					case "-l":  						WriteLicense();  						return 0;  					case "/f":  					case "-f":  						files = s.Substring(2).Split(breakChars);  						break;  					case "/o":  					case "-o":  						dir = s.Substring(2);  						break;  					case "/p":  					case "-p":  						rc._DataSourcePassword = s.Substring(2);  						break;  					case "/t":  					case "-t":  						types = s.Substring(2).Split(breakChars);  						break;  					case "/?":  					case "-?":  						WriteHelp();  						return 0;                      case "/s":                      case "-s":                          rc._ShowStats = true;                          break;  					case "/i":  					case "-i":  						rc._StampInfo = s.Substring(2);  						break;                      case "/u":                      case "-u":                          rc._user = s.Substring(2); // Allow the user to be set via a command line param (u) GJL AJM 12062008                          break;                      default:  						Console.WriteLine("Unknown command '{0}' ignored."' s);  						returnCode = 4;  						break;  				}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,The following statement contains a magic number: switch (t)  				{  					case "/l":  					case "-l":  						WriteLicense();  						return 0;  					case "/f":  					case "-f":  						files = s.Substring(2).Split(breakChars);  						break;  					case "/o":  					case "-o":  						dir = s.Substring(2);  						break;  					case "/p":  					case "-p":  						rc._DataSourcePassword = s.Substring(2);  						break;  					case "/t":  					case "-t":  						types = s.Substring(2).Split(breakChars);  						break;  					case "/?":  					case "-?":  						WriteHelp();  						return 0;                      case "/s":                      case "-s":                          rc._ShowStats = true;                          break;  					case "/i":  					case "-i":  						rc._StampInfo = s.Substring(2);  						break;                      case "/u":                      case "-u":                          rc._user = s.Substring(2); // Allow the user to be set via a command line param (u) GJL AJM 12062008                          break;                      default:  						Console.WriteLine("Unknown command '{0}' ignored."' s);  						returnCode = 4;  						break;  				}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,The following statement contains a magic number: switch (t)  				{  					case "/l":  					case "-l":  						WriteLicense();  						return 0;  					case "/f":  					case "-f":  						files = s.Substring(2).Split(breakChars);  						break;  					case "/o":  					case "-o":  						dir = s.Substring(2);  						break;  					case "/p":  					case "-p":  						rc._DataSourcePassword = s.Substring(2);  						break;  					case "/t":  					case "-t":  						types = s.Substring(2).Split(breakChars);  						break;  					case "/?":  					case "-?":  						WriteHelp();  						return 0;                      case "/s":                      case "-s":                          rc._ShowStats = true;                          break;  					case "/i":  					case "-i":  						rc._StampInfo = s.Substring(2);  						break;                      case "/u":                      case "-u":                          rc._user = s.Substring(2); // Allow the user to be set via a command line param (u) GJL AJM 12062008                          break;                      default:  						Console.WriteLine("Unknown command '{0}' ignored."' s);  						returnCode = 4;  						break;  				}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,The following statement contains a magic number: switch (t)  				{  					case "/l":  					case "-l":  						WriteLicense();  						return 0;  					case "/f":  					case "-f":  						files = s.Substring(2).Split(breakChars);  						break;  					case "/o":  					case "-o":  						dir = s.Substring(2);  						break;  					case "/p":  					case "-p":  						rc._DataSourcePassword = s.Substring(2);  						break;  					case "/t":  					case "-t":  						types = s.Substring(2).Split(breakChars);  						break;  					case "/?":  					case "-?":  						WriteHelp();  						return 0;                      case "/s":                      case "-s":                          rc._ShowStats = true;                          break;  					case "/i":  					case "-i":  						rc._StampInfo = s.Substring(2);  						break;                      case "/u":                      case "-u":                          rc._user = s.Substring(2); // Allow the user to be set via a command line param (u) GJL AJM 12062008                          break;                      default:  						Console.WriteLine("Unknown command '{0}' ignored."' s);  						returnCode = 4;  						break;  				}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,The following statement contains a magic number: return 8;
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,The following statement contains a magic number: return 8;
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,GetReport,The following statement contains a magic number: returnCode = 8;
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,GetReport,The following statement contains a magic number: severity > 4
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,SaveAs,The following statement contains a magic number: switch(ext)  				{  					case "pdf":	  						if (this._StampInfo == null)  						{  							if (isOldPdf)  							{  								report.RunRender(sg' OutputPresentationType.PDFOldStyle);  							}  							else  							{  								report.RunRender(sg' OutputPresentationType.PDF);  							}  								  						}  						else  							SaveAsPdf(report' sg);  						break;  					case "xml":   						report.RunRender(sg' OutputPresentationType.XML);  						break;																    					case "mht":   						report.RunRender(sg' OutputPresentationType.MHTML);  						break;																    					case "html": case "htm":  						report.RunRender(sg' OutputPresentationType.HTML);  						break;                      case "csv":                          report.RunRender(sg' OutputPresentationType.CSV);                          break;                      case "xlsx_table":                          report.RunRender(sg' OutputPresentationType.ExcelTableOnly);                          break;                      case "xlsx":                          report.RunRender(sg' OutputPresentationType.Excel2007);                          break;                      case "rtf":                          report.RunRender(sg' OutputPresentationType.RTF);                          break;                      case "tif": case "tiff":                          report.RunRender(sg' OutputPresentationType.TIF);                          break;                      case "tifb":                          report.RunRender(sg' OutputPresentationType.TIFBW);                          break;  					default:  						Console.WriteLine("Unsupported file extension '{0}'.  Must be 'pdf'' 'xml'' 'mht'' 'csv'' 'xslx'' 'xlsx_table'' 'rtf'' 'tif'' 'tifb' or 'html'"' type);  						returnCode = 8;  						break;  				}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,SaveAsPdf,The following statement contains a magic number: encoderParameters.Param[0] = new EncoderParameter(Encoder.Quality' 100L);
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Size,The following statement contains a magic number: switch(u)			// convert to millimeters  			{  				case "in":  					size = (int) (d * 2540m);  					break;  				case "cm":  					size = (int) (d * 1000m);  					break;  				case "mm":  					size = (int) (d * 100m);  					break;  				case "pt":  					size = (int) (d * (2540m / 72.27m));  					break;  				case "pc":  					size = (int) (d * (2540m / 72.27m * 12m));  					break;  				default:	   					// Illegal unit  					Console.WriteLine("Unknown sizing unit '" + u + "' specified' assuming inches.");  					size = (int) (d * 2540m);  					break;  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Size,The following statement contains a magic number: switch(u)			// convert to millimeters  			{  				case "in":  					size = (int) (d * 2540m);  					break;  				case "cm":  					size = (int) (d * 1000m);  					break;  				case "mm":  					size = (int) (d * 100m);  					break;  				case "pt":  					size = (int) (d * (2540m / 72.27m));  					break;  				case "pc":  					size = (int) (d * (2540m / 72.27m * 12m));  					break;  				default:	   					// Illegal unit  					Console.WriteLine("Unknown sizing unit '" + u + "' specified' assuming inches.");  					size = (int) (d * 2540m);  					break;  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Size,The following statement contains a magic number: switch(u)			// convert to millimeters  			{  				case "in":  					size = (int) (d * 2540m);  					break;  				case "cm":  					size = (int) (d * 1000m);  					break;  				case "mm":  					size = (int) (d * 100m);  					break;  				case "pt":  					size = (int) (d * (2540m / 72.27m));  					break;  				case "pc":  					size = (int) (d * (2540m / 72.27m * 12m));  					break;  				default:	   					// Illegal unit  					Console.WriteLine("Unknown sizing unit '" + u + "' specified' assuming inches.");  					size = (int) (d * 2540m);  					break;  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Size,The following statement contains a magic number: switch(u)			// convert to millimeters  			{  				case "in":  					size = (int) (d * 2540m);  					break;  				case "cm":  					size = (int) (d * 1000m);  					break;  				case "mm":  					size = (int) (d * 100m);  					break;  				case "pt":  					size = (int) (d * (2540m / 72.27m));  					break;  				case "pc":  					size = (int) (d * (2540m / 72.27m * 12m));  					break;  				default:	   					// Illegal unit  					Console.WriteLine("Unknown sizing unit '" + u + "' specified' assuming inches.");  					size = (int) (d * 2540m);  					break;  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Size,The following statement contains a magic number: switch(u)			// convert to millimeters  			{  				case "in":  					size = (int) (d * 2540m);  					break;  				case "cm":  					size = (int) (d * 1000m);  					break;  				case "mm":  					size = (int) (d * 100m);  					break;  				case "pt":  					size = (int) (d * (2540m / 72.27m));  					break;  				case "pc":  					size = (int) (d * (2540m / 72.27m * 12m));  					break;  				default:	   					// Illegal unit  					Console.WriteLine("Unknown sizing unit '" + u + "' specified' assuming inches.");  					size = (int) (d * 2540m);  					break;  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Size,The following statement contains a magic number: switch(u)			// convert to millimeters  			{  				case "in":  					size = (int) (d * 2540m);  					break;  				case "cm":  					size = (int) (d * 1000m);  					break;  				case "mm":  					size = (int) (d * 100m);  					break;  				case "pt":  					size = (int) (d * (2540m / 72.27m));  					break;  				case "pc":  					size = (int) (d * (2540m / 72.27m * 12m));  					break;  				default:	   					// Illegal unit  					Console.WriteLine("Unknown sizing unit '" + u + "' specified' assuming inches.");  					size = (int) (d * 2540m);  					break;  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Size,The following statement contains a magic number: switch(u)			// convert to millimeters  			{  				case "in":  					size = (int) (d * 2540m);  					break;  				case "cm":  					size = (int) (d * 1000m);  					break;  				case "mm":  					size = (int) (d * 100m);  					break;  				case "pt":  					size = (int) (d * (2540m / 72.27m));  					break;  				case "pc":  					size = (int) (d * (2540m / 72.27m * 12m));  					break;  				default:	   					// Illegal unit  					Console.WriteLine("Unknown sizing unit '" + u + "' specified' assuming inches.");  					size = (int) (d * 2540m);  					break;  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Size,The following statement contains a magic number: switch(u)			// convert to millimeters  			{  				case "in":  					size = (int) (d * 2540m);  					break;  				case "cm":  					size = (int) (d * 1000m);  					break;  				case "mm":  					size = (int) (d * 100m);  					break;  				case "pt":  					size = (int) (d * (2540m / 72.27m));  					break;  				case "pc":  					size = (int) (d * (2540m / 72.27m * 12m));  					break;  				default:	   					// Illegal unit  					Console.WriteLine("Unknown sizing unit '" + u + "' specified' assuming inches.");  					size = (int) (d * 2540m);  					break;  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Size,The following statement contains a magic number: switch(u)			// convert to millimeters  			{  				case "in":  					size = (int) (d * 2540m);  					break;  				case "cm":  					size = (int) (d * 1000m);  					break;  				case "mm":  					size = (int) (d * 100m);  					break;  				case "pt":  					size = (int) (d * (2540m / 72.27m));  					break;  				case "pc":  					size = (int) (d * (2540m / 72.27m * 12m));  					break;  				default:	   					// Illegal unit  					Console.WriteLine("Unknown sizing unit '" + u + "' specified' assuming inches.");  					size = (int) (d * 2540m);  					break;  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Size,The following statement contains a magic number: return (float) ((double) size / 2540.0 * 72.27f);
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Size,The following statement contains a magic number: return (float) ((double) size / 2540.0 * 72.27f);
