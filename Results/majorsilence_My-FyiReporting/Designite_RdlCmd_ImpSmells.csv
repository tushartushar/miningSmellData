Implementation smell,Namespace,Class,File,Method,Description
Long Method,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,SaveAsPdf,The method has 104 lines of code.
Complex Method,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,DoRender,Cyclomatic complexity of the method is 14
Long Statement,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,SaveAs,The length of the statement  "						Console.WriteLine("Unsupported file extension '{0}'.  Must be 'pdf'' 'xml'' 'mht'' 'csv'' 'xslx'' 'rtf'' 'tif'' 'tifb' or 'html'"' type); " is 137.
Long Statement,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Size,The length of the statement  "					Console.WriteLine(string.Format("Unknown characters in '{0}' specified.  Number must be of form '###.##'.  Local conversion will be attempted."' t)); " is 149.
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,The following statement contains a magic number: if (args == null || args.Length==0)  			{  				WriteLicense();  				return 8;  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,The following statement contains a magic number: foreach(string s in args)  			{  				string t = s.Substring(0'2);  				switch (t)  				{  					case "/l":  					case "-l":  						WriteLicense();  						return 0;  					case "/f":  					case "-f":  						files = s.Substring(2).Split(breakChars);  						break;  					case "/o":  					case "-o":  						dir = s.Substring(2);  						break;  					case "/p":  					case "-p":  						rc._DataSourcePassword = s.Substring(2);  						break;  					case "/t":  					case "-t":  						types = s.Substring(2).Split(breakChars);  						break;  					case "/?":  					case "-?":  						WriteHelp();  						return 0;                      case "/s":                      case "-s":                          rc._ShowStats = true;                          break;  					case "/i":  					case "-i":  						rc._StampInfo = s.Substring(2);  						break;                      case "/u":                      case "-u":                          rc._user = s.Substring(2); // Allow the user to be set via a command line param (u) GJL AJM 12062008                          break;                      default:  						Console.WriteLine("Unknown command '{0}' ignored."' s);  						returnCode = 4;  						break;  				}  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,The following statement contains a magic number: foreach(string s in args)  			{  				string t = s.Substring(0'2);  				switch (t)  				{  					case "/l":  					case "-l":  						WriteLicense();  						return 0;  					case "/f":  					case "-f":  						files = s.Substring(2).Split(breakChars);  						break;  					case "/o":  					case "-o":  						dir = s.Substring(2);  						break;  					case "/p":  					case "-p":  						rc._DataSourcePassword = s.Substring(2);  						break;  					case "/t":  					case "-t":  						types = s.Substring(2).Split(breakChars);  						break;  					case "/?":  					case "-?":  						WriteHelp();  						return 0;                      case "/s":                      case "-s":                          rc._ShowStats = true;                          break;  					case "/i":  					case "-i":  						rc._StampInfo = s.Substring(2);  						break;                      case "/u":                      case "-u":                          rc._user = s.Substring(2); // Allow the user to be set via a command line param (u) GJL AJM 12062008                          break;                      default:  						Console.WriteLine("Unknown command '{0}' ignored."' s);  						returnCode = 4;  						break;  				}  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,The following statement contains a magic number: foreach(string s in args)  			{  				string t = s.Substring(0'2);  				switch (t)  				{  					case "/l":  					case "-l":  						WriteLicense();  						return 0;  					case "/f":  					case "-f":  						files = s.Substring(2).Split(breakChars);  						break;  					case "/o":  					case "-o":  						dir = s.Substring(2);  						break;  					case "/p":  					case "-p":  						rc._DataSourcePassword = s.Substring(2);  						break;  					case "/t":  					case "-t":  						types = s.Substring(2).Split(breakChars);  						break;  					case "/?":  					case "-?":  						WriteHelp();  						return 0;                      case "/s":                      case "-s":                          rc._ShowStats = true;                          break;  					case "/i":  					case "-i":  						rc._StampInfo = s.Substring(2);  						break;                      case "/u":                      case "-u":                          rc._user = s.Substring(2); // Allow the user to be set via a command line param (u) GJL AJM 12062008                          break;                      default:  						Console.WriteLine("Unknown command '{0}' ignored."' s);  						returnCode = 4;  						break;  				}  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,The following statement contains a magic number: foreach(string s in args)  			{  				string t = s.Substring(0'2);  				switch (t)  				{  					case "/l":  					case "-l":  						WriteLicense();  						return 0;  					case "/f":  					case "-f":  						files = s.Substring(2).Split(breakChars);  						break;  					case "/o":  					case "-o":  						dir = s.Substring(2);  						break;  					case "/p":  					case "-p":  						rc._DataSourcePassword = s.Substring(2);  						break;  					case "/t":  					case "-t":  						types = s.Substring(2).Split(breakChars);  						break;  					case "/?":  					case "-?":  						WriteHelp();  						return 0;                      case "/s":                      case "-s":                          rc._ShowStats = true;                          break;  					case "/i":  					case "-i":  						rc._StampInfo = s.Substring(2);  						break;                      case "/u":                      case "-u":                          rc._user = s.Substring(2); // Allow the user to be set via a command line param (u) GJL AJM 12062008                          break;                      default:  						Console.WriteLine("Unknown command '{0}' ignored."' s);  						returnCode = 4;  						break;  				}  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,The following statement contains a magic number: foreach(string s in args)  			{  				string t = s.Substring(0'2);  				switch (t)  				{  					case "/l":  					case "-l":  						WriteLicense();  						return 0;  					case "/f":  					case "-f":  						files = s.Substring(2).Split(breakChars);  						break;  					case "/o":  					case "-o":  						dir = s.Substring(2);  						break;  					case "/p":  					case "-p":  						rc._DataSourcePassword = s.Substring(2);  						break;  					case "/t":  					case "-t":  						types = s.Substring(2).Split(breakChars);  						break;  					case "/?":  					case "-?":  						WriteHelp();  						return 0;                      case "/s":                      case "-s":                          rc._ShowStats = true;                          break;  					case "/i":  					case "-i":  						rc._StampInfo = s.Substring(2);  						break;                      case "/u":                      case "-u":                          rc._user = s.Substring(2); // Allow the user to be set via a command line param (u) GJL AJM 12062008                          break;                      default:  						Console.WriteLine("Unknown command '{0}' ignored."' s);  						returnCode = 4;  						break;  				}  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,The following statement contains a magic number: foreach(string s in args)  			{  				string t = s.Substring(0'2);  				switch (t)  				{  					case "/l":  					case "-l":  						WriteLicense();  						return 0;  					case "/f":  					case "-f":  						files = s.Substring(2).Split(breakChars);  						break;  					case "/o":  					case "-o":  						dir = s.Substring(2);  						break;  					case "/p":  					case "-p":  						rc._DataSourcePassword = s.Substring(2);  						break;  					case "/t":  					case "-t":  						types = s.Substring(2).Split(breakChars);  						break;  					case "/?":  					case "-?":  						WriteHelp();  						return 0;                      case "/s":                      case "-s":                          rc._ShowStats = true;                          break;  					case "/i":  					case "-i":  						rc._StampInfo = s.Substring(2);  						break;                      case "/u":                      case "-u":                          rc._user = s.Substring(2); // Allow the user to be set via a command line param (u) GJL AJM 12062008                          break;                      default:  						Console.WriteLine("Unknown command '{0}' ignored."' s);  						returnCode = 4;  						break;  				}  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,The following statement contains a magic number: foreach(string s in args)  			{  				string t = s.Substring(0'2);  				switch (t)  				{  					case "/l":  					case "-l":  						WriteLicense();  						return 0;  					case "/f":  					case "-f":  						files = s.Substring(2).Split(breakChars);  						break;  					case "/o":  					case "-o":  						dir = s.Substring(2);  						break;  					case "/p":  					case "-p":  						rc._DataSourcePassword = s.Substring(2);  						break;  					case "/t":  					case "-t":  						types = s.Substring(2).Split(breakChars);  						break;  					case "/?":  					case "-?":  						WriteHelp();  						return 0;                      case "/s":                      case "-s":                          rc._ShowStats = true;                          break;  					case "/i":  					case "-i":  						rc._StampInfo = s.Substring(2);  						break;                      case "/u":                      case "-u":                          rc._user = s.Substring(2); // Allow the user to be set via a command line param (u) GJL AJM 12062008                          break;                      default:  						Console.WriteLine("Unknown command '{0}' ignored."' s);  						returnCode = 4;  						break;  				}  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,The following statement contains a magic number: foreach(string s in args)  			{  				string t = s.Substring(0'2);  				switch (t)  				{  					case "/l":  					case "-l":  						WriteLicense();  						return 0;  					case "/f":  					case "-f":  						files = s.Substring(2).Split(breakChars);  						break;  					case "/o":  					case "-o":  						dir = s.Substring(2);  						break;  					case "/p":  					case "-p":  						rc._DataSourcePassword = s.Substring(2);  						break;  					case "/t":  					case "-t":  						types = s.Substring(2).Split(breakChars);  						break;  					case "/?":  					case "-?":  						WriteHelp();  						return 0;                      case "/s":                      case "-s":                          rc._ShowStats = true;                          break;  					case "/i":  					case "-i":  						rc._StampInfo = s.Substring(2);  						break;                      case "/u":                      case "-u":                          rc._user = s.Substring(2); // Allow the user to be set via a command line param (u) GJL AJM 12062008                          break;                      default:  						Console.WriteLine("Unknown command '{0}' ignored."' s);  						returnCode = 4;  						break;  				}  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,The following statement contains a magic number: if (files == null)  			{  				Console.WriteLine("/f parameter is required.");  				return 8;  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Main,The following statement contains a magic number: if (types == null)  			{  				Console.WriteLine("/t parameter is required.");  				return 8;  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,GetSource,The following statement contains a magic number: try  			{  				fs = new StreamReader(file);  				prog = fs.ReadToEnd();  			}  			catch(Exception e)  			{  				prog = null;  				Console.WriteLine(e.Message);  				returnCode = 8;  			}  			finally  			{  				if (fs != null)  					fs.Close();  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,GetReport,The following statement contains a magic number: try  			{  				rdlp =  new RDLParser(prog);  				string folder = Path.GetDirectoryName(file);  				if (folder == "")  					folder = Environment.CurrentDirectory;  				rdlp.Folder = folder;  				rdlp.DataSourceReferencePassword = new NeedPassword(this.GetPassword);    				r = rdlp.Parse();  				if (r.ErrorMaxSeverity > 0)   				{  					// have errors fill out the msgs   					Console.WriteLine("{0} has the following errors:"' file);  					foreach (string emsg in r.ErrorItems)  					{  						Console.WriteLine(emsg);		// output message to console  					}  					int severity = r.ErrorMaxSeverity;  					r.ErrorReset();  					if (severity > 4)  					{  						r = null;			// don't return when severe errors  						returnCode = 8;  					}  				}  				// If we've loaded the report; we should tell it where it got loaded from  				if (r != null)  				{  					r.Folder = folder;  					r.Name = Path.GetFileNameWithoutExtension(file);  					r.GetDataSourceReferencePassword = new RDL.NeedPassword(GetPassword);  				}  			}  			catch(Exception e)  			{  				r = null;  				Console.WriteLine(e.Message);  				returnCode = 8;  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,GetReport,The following statement contains a magic number: try  			{  				rdlp =  new RDLParser(prog);  				string folder = Path.GetDirectoryName(file);  				if (folder == "")  					folder = Environment.CurrentDirectory;  				rdlp.Folder = folder;  				rdlp.DataSourceReferencePassword = new NeedPassword(this.GetPassword);    				r = rdlp.Parse();  				if (r.ErrorMaxSeverity > 0)   				{  					// have errors fill out the msgs   					Console.WriteLine("{0} has the following errors:"' file);  					foreach (string emsg in r.ErrorItems)  					{  						Console.WriteLine(emsg);		// output message to console  					}  					int severity = r.ErrorMaxSeverity;  					r.ErrorReset();  					if (severity > 4)  					{  						r = null;			// don't return when severe errors  						returnCode = 8;  					}  				}  				// If we've loaded the report; we should tell it where it got loaded from  				if (r != null)  				{  					r.Folder = folder;  					r.Name = Path.GetFileNameWithoutExtension(file);  					r.GetDataSourceReferencePassword = new RDL.NeedPassword(GetPassword);  				}  			}  			catch(Exception e)  			{  				r = null;  				Console.WriteLine(e.Message);  				returnCode = 8;  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,GetReport,The following statement contains a magic number: try  			{  				rdlp =  new RDLParser(prog);  				string folder = Path.GetDirectoryName(file);  				if (folder == "")  					folder = Environment.CurrentDirectory;  				rdlp.Folder = folder;  				rdlp.DataSourceReferencePassword = new NeedPassword(this.GetPassword);    				r = rdlp.Parse();  				if (r.ErrorMaxSeverity > 0)   				{  					// have errors fill out the msgs   					Console.WriteLine("{0} has the following errors:"' file);  					foreach (string emsg in r.ErrorItems)  					{  						Console.WriteLine(emsg);		// output message to console  					}  					int severity = r.ErrorMaxSeverity;  					r.ErrorReset();  					if (severity > 4)  					{  						r = null;			// don't return when severe errors  						returnCode = 8;  					}  				}  				// If we've loaded the report; we should tell it where it got loaded from  				if (r != null)  				{  					r.Folder = folder;  					r.Name = Path.GetFileNameWithoutExtension(file);  					r.GetDataSourceReferencePassword = new RDL.NeedPassword(GetPassword);  				}  			}  			catch(Exception e)  			{  				r = null;  				Console.WriteLine(e.Message);  				returnCode = 8;  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,SaveAs,The following statement contains a magic number: try  			{  				bool isOldPdf = false;  				if (System.Environment.OSVersion.Platform == PlatformID.Unix && type=="pdf" ) {                        if (System.IO.Directory.Exists("/usr/share/fonts/truetype/msttcorefonts")==false)                      {  						isOldPdf = true;                      }                                       }                        if (ext == "tifb")                      FileName = FileName.Substring(0' FileName.Length - 1);      // get rid of the 'b'  				sg = new OneFileStreamGen(FileName' true);	// overwrite with this name  				switch(ext)  				{  					case "pdf":	  						if (this._StampInfo == null)  						{  							if (isOldPdf)  							{  								report.RunRender(sg' OutputPresentationType.PDFOldStyle);  							}  							else  							{  								report.RunRender(sg' OutputPresentationType.PDF);  							}  								  						}  						else  							SaveAsPdf(report' sg);  						break;  					case "xml":   						report.RunRender(sg' OutputPresentationType.XML);  						break;																    					case "mht":   						report.RunRender(sg' OutputPresentationType.MHTML);  						break;																    					case "html": case "htm":  						report.RunRender(sg' OutputPresentationType.HTML);  						break;                      case "csv":                          report.RunRender(sg' OutputPresentationType.CSV);                          break;                      case "xlsx":                          report.RunRender(sg' OutputPresentationType.Excel);                          break;                      case "rtf":                          report.RunRender(sg' OutputPresentationType.RTF);                          break;                      case "tif": case "tiff":                          report.RunRender(sg' OutputPresentationType.TIF);                          break;                      case "tifb":                          report.RunRender(sg' OutputPresentationType.TIFBW);                          break;  					default:  						Console.WriteLine("Unsupported file extension '{0}'.  Must be 'pdf'' 'xml'' 'mht'' 'csv'' 'xslx'' 'rtf'' 'tif'' 'tifb' or 'html'"' type);  						returnCode = 8;  						break;  				}  			}  			catch(Exception e)  			{  				Console.WriteLine(e.Message);  				returnCode = 8;  			}  			finally  			{  				if (sg != null)  				{  					sg.CloseMainStream();  				}  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,SaveAs,The following statement contains a magic number: try  			{  				bool isOldPdf = false;  				if (System.Environment.OSVersion.Platform == PlatformID.Unix && type=="pdf" ) {                        if (System.IO.Directory.Exists("/usr/share/fonts/truetype/msttcorefonts")==false)                      {  						isOldPdf = true;                      }                                       }                        if (ext == "tifb")                      FileName = FileName.Substring(0' FileName.Length - 1);      // get rid of the 'b'  				sg = new OneFileStreamGen(FileName' true);	// overwrite with this name  				switch(ext)  				{  					case "pdf":	  						if (this._StampInfo == null)  						{  							if (isOldPdf)  							{  								report.RunRender(sg' OutputPresentationType.PDFOldStyle);  							}  							else  							{  								report.RunRender(sg' OutputPresentationType.PDF);  							}  								  						}  						else  							SaveAsPdf(report' sg);  						break;  					case "xml":   						report.RunRender(sg' OutputPresentationType.XML);  						break;																    					case "mht":   						report.RunRender(sg' OutputPresentationType.MHTML);  						break;																    					case "html": case "htm":  						report.RunRender(sg' OutputPresentationType.HTML);  						break;                      case "csv":                          report.RunRender(sg' OutputPresentationType.CSV);                          break;                      case "xlsx":                          report.RunRender(sg' OutputPresentationType.Excel);                          break;                      case "rtf":                          report.RunRender(sg' OutputPresentationType.RTF);                          break;                      case "tif": case "tiff":                          report.RunRender(sg' OutputPresentationType.TIF);                          break;                      case "tifb":                          report.RunRender(sg' OutputPresentationType.TIFBW);                          break;  					default:  						Console.WriteLine("Unsupported file extension '{0}'.  Must be 'pdf'' 'xml'' 'mht'' 'csv'' 'xslx'' 'rtf'' 'tif'' 'tifb' or 'html'"' type);  						returnCode = 8;  						break;  				}  			}  			catch(Exception e)  			{  				Console.WriteLine(e.Message);  				returnCode = 8;  			}  			finally  			{  				if (sg != null)  				{  					sg.CloseMainStream();  				}  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Size,The following statement contains a magic number: try		// Convert.ToDecimal can be very picky  			{  				if (space != -1)	// any spaces  				{  					n = t.Substring(0'space).Trim();	// number string  					u = t.Substring(space).Trim();	// unit string  				}  				else if (t.Length >= 3)  				{  					n = t.Substring(0' t.Length-2).Trim();  					u = t.Substring(t.Length-2).Trim();  				}  				else  				{  					// Illegal unit  					Console.WriteLine(string.Format("Illegal size '{0}' specified' assuming 0 length."' t));  					return 0;  				}  				if (!Regex.IsMatch(n' @"\A[ ]*[-]?[0-9]*[.]?[0-9]*[ ]*\Z"))  				{  					Console.WriteLine(string.Format("Unknown characters in '{0}' specified.  Number must be of form '###.##'.  Local conversion will be attempted."' t));  					d = Convert.ToDecimal(n' NumberFormatInfo.InvariantInfo);		// initial number  				}  				else  					d = Convert.ToDecimal(n' NumberFormatInfo.InvariantInfo);		// initial number  			}  			catch (Exception ex)   			{  				// Illegal unit  				Console.WriteLine("Illegal size '" + t + "' specified' assuming 0 length.\r\n"+ex.Message);  				return 0;  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Size,The following statement contains a magic number: try		// Convert.ToDecimal can be very picky  			{  				if (space != -1)	// any spaces  				{  					n = t.Substring(0'space).Trim();	// number string  					u = t.Substring(space).Trim();	// unit string  				}  				else if (t.Length >= 3)  				{  					n = t.Substring(0' t.Length-2).Trim();  					u = t.Substring(t.Length-2).Trim();  				}  				else  				{  					// Illegal unit  					Console.WriteLine(string.Format("Illegal size '{0}' specified' assuming 0 length."' t));  					return 0;  				}  				if (!Regex.IsMatch(n' @"\A[ ]*[-]?[0-9]*[.]?[0-9]*[ ]*\Z"))  				{  					Console.WriteLine(string.Format("Unknown characters in '{0}' specified.  Number must be of form '###.##'.  Local conversion will be attempted."' t));  					d = Convert.ToDecimal(n' NumberFormatInfo.InvariantInfo);		// initial number  				}  				else  					d = Convert.ToDecimal(n' NumberFormatInfo.InvariantInfo);		// initial number  			}  			catch (Exception ex)   			{  				// Illegal unit  				Console.WriteLine("Illegal size '" + t + "' specified' assuming 0 length.\r\n"+ex.Message);  				return 0;  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Size,The following statement contains a magic number: try		// Convert.ToDecimal can be very picky  			{  				if (space != -1)	// any spaces  				{  					n = t.Substring(0'space).Trim();	// number string  					u = t.Substring(space).Trim();	// unit string  				}  				else if (t.Length >= 3)  				{  					n = t.Substring(0' t.Length-2).Trim();  					u = t.Substring(t.Length-2).Trim();  				}  				else  				{  					// Illegal unit  					Console.WriteLine(string.Format("Illegal size '{0}' specified' assuming 0 length."' t));  					return 0;  				}  				if (!Regex.IsMatch(n' @"\A[ ]*[-]?[0-9]*[.]?[0-9]*[ ]*\Z"))  				{  					Console.WriteLine(string.Format("Unknown characters in '{0}' specified.  Number must be of form '###.##'.  Local conversion will be attempted."' t));  					d = Convert.ToDecimal(n' NumberFormatInfo.InvariantInfo);		// initial number  				}  				else  					d = Convert.ToDecimal(n' NumberFormatInfo.InvariantInfo);		// initial number  			}  			catch (Exception ex)   			{  				// Illegal unit  				Console.WriteLine("Illegal size '" + t + "' specified' assuming 0 length.\r\n"+ex.Message);  				return 0;  			}
Magic Number,fyiReporting.RdlCmd,RdlCmd,C:\repos\majorsilence_My-FyiReporting\RdlCmd\RdlCmd.cs,Size,The following statement contains a magic number: return (float) ((double) size / 2540.0 * 72.27f);
