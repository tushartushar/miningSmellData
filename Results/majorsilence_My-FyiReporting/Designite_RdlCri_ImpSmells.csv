Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,fyiReporting.CRI,PixelConversions,C:\repos\majorsilence_My-FyiReporting\RdlCri\PixelConversions.cs,GetMagnification,The method has 5 parameters. Parameters: g' width' height' OptimalHeight' OptimalWidth
Long Statement,fyiReporting.CRI,BarCodeEAN13,C:\repos\majorsilence_My-FyiReporting\RdlCri\BarCodeEAN13.cs,GetEncoding,The length of the statement  "                throw new ArgumentException("UPC code must be 12 characters: country code 2 chars' mfg code 5 chars' product code 5 chars"); " is 124.
Complex Conditional,fyiReporting.CRI,BarCodeEAN13,C:\repos\majorsilence_My-FyiReporting\RdlCri\BarCodeEAN13.cs,SetProperties,The conditional expression  "pv is int || pv is long || pv is float || pv is double"  is complex.
Complex Conditional,fyiReporting.CRI,BarCodeEAN13,C:\repos\majorsilence_My-FyiReporting\RdlCri\BarCodeEAN13.cs,SetProperties,The conditional expression  "pv is int || pv is long || pv is float || pv is double"  is complex.
Complex Conditional,fyiReporting.CRI,BarCodeEAN13,C:\repos\majorsilence_My-FyiReporting\RdlCri\BarCodeEAN13.cs,SetProperties,The conditional expression  "pv is int || pv is long || pv is float || pv is double"  is complex.
Magic Number,fyiReporting.CRI,BarCodeBookland,C:\repos\majorsilence_My-FyiReporting\RdlCri\BarCodeBookland.cs,SetProperties,The following statement contains a magic number: try               {                   string p = props["ISBN"] as string;                  if (p == null)                      throw new Exception("ISBN property must be a string.");                    // remove any dashes                  p = p.Replace("-"' "");                  if (p.Length > 9)           // get rid of the ISBN checksum digit                      p = p.Substring(0' 9);                    if (!Regex.IsMatch(p' "^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$"))                      throw new Exception("ISBN must have at least nine digits.");                    _ISBN = p;                    // Now set the properties of the EAN-13                  IDictionary<string' object> ean13_props = new Dictionary<string' object>();                  ean13_props.Add("NumberSystem"' "97");                  ean13_props.Add("ManufacturerCode"' "8" + _ISBN.Substring(0' 4));                  ean13_props.Add("ProductCode"' _ISBN.Substring(4'5));                  _Ean13.SetProperties(ean13_props);              }              catch (KeyNotFoundException )              {                   throw new Exception("ISBN property must be specified");               }
Magic Number,fyiReporting.CRI,BarCodeBookland,C:\repos\majorsilence_My-FyiReporting\RdlCri\BarCodeBookland.cs,SetProperties,The following statement contains a magic number: try               {                   string p = props["ISBN"] as string;                  if (p == null)                      throw new Exception("ISBN property must be a string.");                    // remove any dashes                  p = p.Replace("-"' "");                  if (p.Length > 9)           // get rid of the ISBN checksum digit                      p = p.Substring(0' 9);                    if (!Regex.IsMatch(p' "^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$"))                      throw new Exception("ISBN must have at least nine digits.");                    _ISBN = p;                    // Now set the properties of the EAN-13                  IDictionary<string' object> ean13_props = new Dictionary<string' object>();                  ean13_props.Add("NumberSystem"' "97");                  ean13_props.Add("ManufacturerCode"' "8" + _ISBN.Substring(0' 4));                  ean13_props.Add("ProductCode"' _ISBN.Substring(4'5));                  _Ean13.SetProperties(ean13_props);              }              catch (KeyNotFoundException )              {                   throw new Exception("ISBN property must be specified");               }
Magic Number,fyiReporting.CRI,BarCodeBookland,C:\repos\majorsilence_My-FyiReporting\RdlCri\BarCodeBookland.cs,SetProperties,The following statement contains a magic number: try               {                   string p = props["ISBN"] as string;                  if (p == null)                      throw new Exception("ISBN property must be a string.");                    // remove any dashes                  p = p.Replace("-"' "");                  if (p.Length > 9)           // get rid of the ISBN checksum digit                      p = p.Substring(0' 9);                    if (!Regex.IsMatch(p' "^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$"))                      throw new Exception("ISBN must have at least nine digits.");                    _ISBN = p;                    // Now set the properties of the EAN-13                  IDictionary<string' object> ean13_props = new Dictionary<string' object>();                  ean13_props.Add("NumberSystem"' "97");                  ean13_props.Add("ManufacturerCode"' "8" + _ISBN.Substring(0' 4));                  ean13_props.Add("ProductCode"' _ISBN.Substring(4'5));                  _Ean13.SetProperties(ean13_props);              }              catch (KeyNotFoundException )              {                   throw new Exception("ISBN property must be specified");               }
Magic Number,fyiReporting.CRI,BarCodeBookland,C:\repos\majorsilence_My-FyiReporting\RdlCri\BarCodeBookland.cs,SetProperties,The following statement contains a magic number: try               {                   string p = props["ISBN"] as string;                  if (p == null)                      throw new Exception("ISBN property must be a string.");                    // remove any dashes                  p = p.Replace("-"' "");                  if (p.Length > 9)           // get rid of the ISBN checksum digit                      p = p.Substring(0' 9);                    if (!Regex.IsMatch(p' "^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$"))                      throw new Exception("ISBN must have at least nine digits.");                    _ISBN = p;                    // Now set the properties of the EAN-13                  IDictionary<string' object> ean13_props = new Dictionary<string' object>();                  ean13_props.Add("NumberSystem"' "97");                  ean13_props.Add("ManufacturerCode"' "8" + _ISBN.Substring(0' 4));                  ean13_props.Add("ProductCode"' _ISBN.Substring(4'5));                  _Ean13.SetProperties(ean13_props);              }              catch (KeyNotFoundException )              {                   throw new Exception("ISBN property must be specified");               }
Magic Number,fyiReporting.CRI,BarCodeBookland,C:\repos\majorsilence_My-FyiReporting\RdlCri\BarCodeBookland.cs,SetProperties,The following statement contains a magic number: try               {                   string p = props["ISBN"] as string;                  if (p == null)                      throw new Exception("ISBN property must be a string.");                    // remove any dashes                  p = p.Replace("-"' "");                  if (p.Length > 9)           // get rid of the ISBN checksum digit                      p = p.Substring(0' 9);                    if (!Regex.IsMatch(p' "^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$"))                      throw new Exception("ISBN must have at least nine digits.");                    _ISBN = p;                    // Now set the properties of the EAN-13                  IDictionary<string' object> ean13_props = new Dictionary<string' object>();                  ean13_props.Add("NumberSystem"' "97");                  ean13_props.Add("ManufacturerCode"' "8" + _ISBN.Substring(0' 4));                  ean13_props.Add("ProductCode"' _ISBN.Substring(4'5));                  _Ean13.SetProperties(ean13_props);              }              catch (KeyNotFoundException )              {                   throw new Exception("ISBN property must be specified");               }
Magic Number,fyiReporting.CRI,BarCodeEAN13,C:\repos\majorsilence_My-FyiReporting\RdlCri\BarCodeEAN13.cs,DrawImage,The following statement contains a magic number: try              {                  g.PageUnit = System.Drawing.GraphicsUnit.Millimeter;                    // Fill in the background with white                  g.FillRectangle(Brushes.White' 0' 0' bm.Width' bm.Height);                    // Draw the bars                  int barCount = LeftQuietZoneModules;                  foreach (char bar in barPattern)                  {                      if (bar == '1')                      {                          float bh = ((barCount > ModulesToManufacturingStart && barCount < ModulesToManufacturingEnd) ||                                      (barCount > ModulesToProductStart && barCount < ModulesToProductEnd)) ?                                      barHeight - fontHeightMM : barHeight;                            g.FillRectangle(Brushes.Black' barWidth * barCount' 0' barWidth' bh);                      }                       barCount++;                  }                    // Draw the human readable portion of the barcode                  f = new Font("Arial"' fontHeight);                    // Draw the left guard text (i.e. 2nd digit of the NumberSystem)                  string wc = upcode.Substring(0' 1);                  g.DrawString(wc' f' Brushes.Black'                      new PointF(barWidth * LeftQuietZoneModules - g.MeasureString(wc' f).Width' barHeight - fontHeightMM));                    // Draw the manufacturing digits                  wc = upcode.Substring(1' 6);                  g.DrawString(wc' f' Brushes.Black'                      new PointF(barWidth * ModulesToManufacturingEnd - g.MeasureString(wc' f).Width' barHeight - fontHeightMM));                    // Draw the product code + the checksum digit                  wc = upcode.Substring(7' 5) + CheckSum(upcode).ToString();                  g.DrawString(wc ' f' Brushes.Black'                      new PointF(barWidth * ModulesToProductEnd - g.MeasureString(wc' f).Width' barHeight - fontHeightMM));              }              finally              {                  if (f != null)                      f.Dispose();                  if (g != null)                      g.Dispose();              }
Magic Number,fyiReporting.CRI,BarCodeEAN13,C:\repos\majorsilence_My-FyiReporting\RdlCri\BarCodeEAN13.cs,DrawImage,The following statement contains a magic number: try              {                  g.PageUnit = System.Drawing.GraphicsUnit.Millimeter;                    // Fill in the background with white                  g.FillRectangle(Brushes.White' 0' 0' bm.Width' bm.Height);                    // Draw the bars                  int barCount = LeftQuietZoneModules;                  foreach (char bar in barPattern)                  {                      if (bar == '1')                      {                          float bh = ((barCount > ModulesToManufacturingStart && barCount < ModulesToManufacturingEnd) ||                                      (barCount > ModulesToProductStart && barCount < ModulesToProductEnd)) ?                                      barHeight - fontHeightMM : barHeight;                            g.FillRectangle(Brushes.Black' barWidth * barCount' 0' barWidth' bh);                      }                       barCount++;                  }                    // Draw the human readable portion of the barcode                  f = new Font("Arial"' fontHeight);                    // Draw the left guard text (i.e. 2nd digit of the NumberSystem)                  string wc = upcode.Substring(0' 1);                  g.DrawString(wc' f' Brushes.Black'                      new PointF(barWidth * LeftQuietZoneModules - g.MeasureString(wc' f).Width' barHeight - fontHeightMM));                    // Draw the manufacturing digits                  wc = upcode.Substring(1' 6);                  g.DrawString(wc' f' Brushes.Black'                      new PointF(barWidth * ModulesToManufacturingEnd - g.MeasureString(wc' f).Width' barHeight - fontHeightMM));                    // Draw the product code + the checksum digit                  wc = upcode.Substring(7' 5) + CheckSum(upcode).ToString();                  g.DrawString(wc ' f' Brushes.Black'                      new PointF(barWidth * ModulesToProductEnd - g.MeasureString(wc' f).Width' barHeight - fontHeightMM));              }              finally              {                  if (f != null)                      f.Dispose();                  if (g != null)                      g.Dispose();              }
Magic Number,fyiReporting.CRI,BarCodeEAN13,C:\repos\majorsilence_My-FyiReporting\RdlCri\BarCodeEAN13.cs,DrawImage,The following statement contains a magic number: try              {                  g.PageUnit = System.Drawing.GraphicsUnit.Millimeter;                    // Fill in the background with white                  g.FillRectangle(Brushes.White' 0' 0' bm.Width' bm.Height);                    // Draw the bars                  int barCount = LeftQuietZoneModules;                  foreach (char bar in barPattern)                  {                      if (bar == '1')                      {                          float bh = ((barCount > ModulesToManufacturingStart && barCount < ModulesToManufacturingEnd) ||                                      (barCount > ModulesToProductStart && barCount < ModulesToProductEnd)) ?                                      barHeight - fontHeightMM : barHeight;                            g.FillRectangle(Brushes.Black' barWidth * barCount' 0' barWidth' bh);                      }                       barCount++;                  }                    // Draw the human readable portion of the barcode                  f = new Font("Arial"' fontHeight);                    // Draw the left guard text (i.e. 2nd digit of the NumberSystem)                  string wc = upcode.Substring(0' 1);                  g.DrawString(wc' f' Brushes.Black'                      new PointF(barWidth * LeftQuietZoneModules - g.MeasureString(wc' f).Width' barHeight - fontHeightMM));                    // Draw the manufacturing digits                  wc = upcode.Substring(1' 6);                  g.DrawString(wc' f' Brushes.Black'                      new PointF(barWidth * ModulesToManufacturingEnd - g.MeasureString(wc' f).Width' barHeight - fontHeightMM));                    // Draw the product code + the checksum digit                  wc = upcode.Substring(7' 5) + CheckSum(upcode).ToString();                  g.DrawString(wc ' f' Brushes.Black'                      new PointF(barWidth * ModulesToProductEnd - g.MeasureString(wc' f).Width' barHeight - fontHeightMM));              }              finally              {                  if (f != null)                      f.Dispose();                  if (g != null)                      g.Dispose();              }
Magic Number,fyiReporting.CRI,BarCodeEAN13,C:\repos\majorsilence_My-FyiReporting\RdlCri\BarCodeEAN13.cs,GetEncoding,The following statement contains a magic number: if (upccode == null)                  throw new ArgumentNullException("upccode");              else if (upccode.Length != 12)                  throw new ArgumentException("UPC code must be 12 characters: country code 2 chars' mfg code 5 chars' product code 5 chars");
Magic Number,fyiReporting.CRI,BarCodeEAN13,C:\repos\majorsilence_My-FyiReporting\RdlCri\BarCodeEAN13.cs,GetEncoding,The following statement contains a magic number: for (int i = 1; i < 7; i++)              {                  digit = (int) Char.GetNumericValue(upccode[i]);    // get the current digit                  if (parity[i - 1] == '1')                      encode = BarCodeEAN13.LeftHandEncodingOdd[digit];                  else                      encode = BarCodeEAN13.LeftHandEncodingEven[digit];                  sb.Append(encode);              }
Magic Number,fyiReporting.CRI,BarCodeEAN13,C:\repos\majorsilence_My-FyiReporting\RdlCri\BarCodeEAN13.cs,GetEncoding,The following statement contains a magic number: for (int i = 7; i < 12; i++)              {                  digit = (int)Char.GetNumericValue(upccode[i]);    // get the current digit                  encode = BarCodeEAN13.RightHandEncoding[digit];                  sb.Append(encode);              }
Magic Number,fyiReporting.CRI,BarCodeEAN13,C:\repos\majorsilence_My-FyiReporting\RdlCri\BarCodeEAN13.cs,GetEncoding,The following statement contains a magic number: for (int i = 7; i < 12; i++)              {                  digit = (int)Char.GetNumericValue(upccode[i]);    // get the current digit                  encode = BarCodeEAN13.RightHandEncoding[digit];                  sb.Append(encode);              }
Magic Number,fyiReporting.CRI,BarCodeEAN13,C:\repos\majorsilence_My-FyiReporting\RdlCri\BarCodeEAN13.cs,CheckSum,The following statement contains a magic number: foreach (char c in upccode)              {                  int digit = (int) Char.GetNumericValue(c);                  sum += (bOdd ? digit * 3 : digit);                  bOdd = !bOdd;                       // switch every other character              }
Magic Number,fyiReporting.CRI,BarCodeEAN13,C:\repos\majorsilence_My-FyiReporting\RdlCri\BarCodeEAN13.cs,CheckSum,The following statement contains a magic number: int cs = 10 - (sum % 10);
Magic Number,fyiReporting.CRI,BarCodeEAN13,C:\repos\majorsilence_My-FyiReporting\RdlCri\BarCodeEAN13.cs,CheckSum,The following statement contains a magic number: int cs = 10 - (sum % 10);
Magic Number,fyiReporting.CRI,BarCodeEAN13,C:\repos\majorsilence_My-FyiReporting\RdlCri\BarCodeEAN13.cs,CheckSum,The following statement contains a magic number: return cs == 10? 0: cs;
Magic Number,fyiReporting.CRI,PixelConversions,C:\repos\majorsilence_My-FyiReporting\RdlCri\PixelConversions.cs,GetMagnification,The following statement contains a magic number: if (r < .8f)                  r = .8f;              else if (r > 2f)                  r = 2;
