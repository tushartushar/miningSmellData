Implementation smell,Namespace,Class,File,Method,Description
Long Method,fyiReporting.RdlDesign,ChartAxisCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartAxisCtl.cs,InitializeComponent,The method has 379 lines of code.
Long Method,fyiReporting.RdlDesign,ChartCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartCtl.cs,InitValues,The method has 117 lines of code.
Long Method,fyiReporting.RdlDesign,ChartCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartCtl.cs,InitializeComponent,The method has 361 lines of code.
Long Method,fyiReporting.RdlDesign,ChartCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartCtl.cs,ApplyChanges,The method has 102 lines of code.
Long Method,fyiReporting.RdlDesign,RdlScriptLexer,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlScriptLexer.cs,StyleText,The method has 227 lines of code.
Long Method,fyiReporting.RdlDesign,BackgroundCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\BackgroundCtl.cs,InitializeComponent,The method has 277 lines of code.
Long Method,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,InitializeComponent,The method has 210 lines of code.
Long Method,fyiReporting.RdlDesign,DataSetRowsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetRowsCtl.Designer.cs,InitializeComponent,The method has 105 lines of code.
Long Method,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,InitializeComponent,The method has 1050 lines of code.
Long Method,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,DrawPanelMouseMove,The method has 142 lines of code.
Long Method,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,menuInsertGrid_Click,The method has 217 lines of code.
Long Method,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,InitializeComponent,The method has 579 lines of code.
Long Method,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The method has 329 lines of code.
Long Method,fyiReporting.RdlDesign,DialogDataSourceRef,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDataSourceRef.Designer.cs,InitializeComponent,The method has 164 lines of code.
Long Method,fyiReporting.RdlDesign,DialogDataSources,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDataSources.Designer.cs,InitializeComponent,The method has 174 lines of code.
Long Method,fyiReporting.RdlDesign,DialogEmbeddedImages,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogEmbeddedImages.Designer.cs,InitializeComponent,The method has 107 lines of code.
Long Method,fyiReporting.RdlDesign,DialogExprEditor,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogExprEditor.Designer.cs,InitializeComponent,The method has 104 lines of code.
Long Method,fyiReporting.RdlDesign,DialogNewChart,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogNewChart.Designer.cs,InitializeComponent,The method has 244 lines of code.
Long Method,fyiReporting.RdlDesign,DialogNewMatrix,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogNewMatrix.Designer.cs,InitializeComponent,The method has 172 lines of code.
Long Method,fyiReporting.RdlDesign,DialogNewTable,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogNewTable.Designer.cs,InitializeComponent,The method has 181 lines of code.
Long Method,fyiReporting.RdlDesign,DialogToolOptions,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogToolOptions.Designer.cs,InitializeComponent,The method has 395 lines of code.
Long Method,fyiReporting.RdlDesign,FindTab,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FindTab.Designer.cs,InitializeComponent,The method has 221 lines of code.
Long Method,fyiReporting.RdlDesign,PropertyDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\PropertyDialog.Designer.cs,BuildReportItemTabs,The method has 140 lines of code.
Long Method,fyiReporting.RdlDesign,FontCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FontCtl.cs,InitializeComponent,The method has 365 lines of code.
Long Method,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,InitializeComponent,The method has 3234 lines of code.
Long Method,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,DesignTabChanged,The method has 198 lines of code.
Long Method,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,GetStartupState,The method has 116 lines of code.
Long Method,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,SaveStartupState,The method has 117 lines of code.
Long Method,fyiReporting.RdlDesign,RdlUserControl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlUserControl.cs,DesignTabChanged,The method has 182 lines of code.
Long Method,fyiReporting.RdlDesign,RdlUserControl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlUserControl.cs,InitializeComponent,The method has 535 lines of code.
Long Method,fyiReporting.RdlDesign,ReportCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ReportCtl.Designer.cs,InitializeComponent,The method has 238 lines of code.
Long Method,fyiReporting.RdlDesign,ReportParameterCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ReportParameterCtl.Designer.cs,InitializeComponent,The method has 289 lines of code.
Long Method,fyiReporting.RdlDesign,StaticSeriesCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StaticSeriesCtl.cs,InitValues,The method has 106 lines of code.
Long Method,fyiReporting.RdlDesign,StaticSeriesCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StaticSeriesCtl.cs,InitializeComponent,The method has 257 lines of code.
Long Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetStyleInfo,The method has 100 lines of code.
Long Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetStyleInfoBackgroundImage,The method has 105 lines of code.
Long Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawString,The method has 108 lines of code.
Long Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,ResizeReportItem,The method has 150 lines of code.
Long Method,fyiReporting.RdlDesign,GroupingCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\GroupingCtl.cs,InitializeComponent,The method has 176 lines of code.
Long Method,fyiReporting.RdlDesign,GroupingCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\GroupingCtl.cs,Apply,The method has 100 lines of code.
Long Method,fyiReporting.RdlDesign,ImageCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ImageCtl.cs,InitializeComponent,The method has 156 lines of code.
Long Method,fyiReporting.RdlDesign,InteractivityCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\InteractivityCtl.cs,InitializeComponent,The method has 186 lines of code.
Long Method,fyiReporting.RdlDesign,ListCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ListCtl.cs,InitializeComponent,The method has 110 lines of code.
Long Method,fyiReporting.RdlDesign,MatrixCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\MatrixCtl.cs,InitializeComponent,The method has 102 lines of code.
Long Method,fyiReporting.RdlDesign,PositionCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\PositionCtl.cs,InitializeComponent,The method has 235 lines of code.
Long Method,fyiReporting.RdlDesign,StyleBorderCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleBorderCtl.cs,InitializeComponent,The method has 417 lines of code.
Long Method,fyiReporting.RdlDesign,StyleCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleCtl.cs,InitializeComponent,The method has 275 lines of code.
Long Method,fyiReporting.RdlDesign,StyleTextCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleTextCtl.cs,InitTextStyles,The method has 126 lines of code.
Long Method,fyiReporting.RdlDesign,StyleTextCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleTextCtl.cs,InitializeComponent,The method has 411 lines of code.
Long Method,fyiReporting.RdlDesign,TableCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\TableCtl.cs,InitializeComponent,The method has 168 lines of code.
Complex Method,fyiReporting.RdlDesign,ChartAxisCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartAxisCtl.cs,InitGridLines,Cyclomatic complexity of the method is 9
Complex Method,fyiReporting.RdlDesign,ChartAxisCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartAxisCtl.cs,ApplyChanges,Cyclomatic complexity of the method is 17
Complex Method,fyiReporting.RdlDesign,ChartCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartCtl.cs,InitValues,Cyclomatic complexity of the method is 12
Complex Method,fyiReporting.RdlDesign,ChartCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartCtl.cs,ApplyChanges,Cyclomatic complexity of the method is 18
Complex Method,fyiReporting.RdlDesign,ChartCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartCtl.cs,cbChartType_SelectedIndexChanged,Cyclomatic complexity of the method is 13
Complex Method,fyiReporting.RdlDesign,ChartCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartCtl.cs,bDataExpr_Click,Cyclomatic complexity of the method is 10
Complex Method,fyiReporting.RdlDesign,CodeCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\CodeCtl.cs,CheckAssembly,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,BackgroundCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\BackgroundCtl.cs,ApplyChanges,Cyclomatic complexity of the method is 11
Complex Method,fyiReporting.RdlDesign,BackgroundCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\BackgroundCtl.cs,bExpr_Click,Cyclomatic complexity of the method is 11
Complex Method,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,InitValues,Cyclomatic complexity of the method is 12
Complex Method,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,Apply,Cyclomatic complexity of the method is 12
Complex Method,fyiReporting.RdlDesign,DataSetRowsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetRowsCtl.Designer.cs,PopulateRows,Cyclomatic complexity of the method is 13
Complex Method,fyiReporting.RdlDesign,DataSetRowsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetRowsCtl.Designer.cs,DidFieldsChange,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,DataSetRowsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetRowsCtl.Designer.cs,bLoad_Click,Cyclomatic complexity of the method is 12
Complex Method,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,DrawPanelMouseUp,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,DrawPanelMouseMove,Cyclomatic complexity of the method is 23
Complex Method,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,DrawPanelMouseDown,Cyclomatic complexity of the method is 9
Complex Method,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,DrawPanelMouseDownRubberBand,Cyclomatic complexity of the method is 11
Complex Method,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,DrawPanelMouseDownInsert,Cyclomatic complexity of the method is 14
Complex Method,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,DrawPanelSetCursor,Cyclomatic complexity of the method is 15
Complex Method,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,DrawPanelKeyDown,Cyclomatic complexity of the method is 19
Complex Method,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,SetConnection,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,Cyclomatic complexity of the method is 77
Complex Method,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntaxParameters,Cyclomatic complexity of the method is 9
Complex Method,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,cbConnectionTypes_SelectedIndexChanged,Cyclomatic complexity of the method is 11
Complex Method,fyiReporting.RdlDesign,DialogEmbeddedImages,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogEmbeddedImages.Designer.cs,bImport_Click,Cyclomatic complexity of the method is 10
Complex Method,fyiReporting.RdlDesign,DialogNewChart,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogNewChart.Designer.cs,cbChartType_SelectedIndexChanged,Cyclomatic complexity of the method is 12
Complex Method,fyiReporting.RdlDesign,DialogToolOptions,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogToolOptions.Designer.cs,InitDesktop,Cyclomatic complexity of the method is 12
Complex Method,fyiReporting.RdlDesign,DialogValidateRdl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogValidateRdl.Designer.cs,bValidate_Click,Cyclomatic complexity of the method is 9
Complex Method,fyiReporting.RdlDesign,DesignRuler,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignRuler.cs,Ruler_DrawHorz,Cyclomatic complexity of the method is 9
Complex Method,fyiReporting.RdlDesign,DesignRuler,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignRuler.cs,Ruler_DrawVert,Cyclomatic complexity of the method is 10
Complex Method,fyiReporting.RdlDesign,DesignRuler,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignRuler.cs,Ruler_DrawVertPart,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,MDIChild,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\MDIChild.Designer.cs,Export,Cyclomatic complexity of the method is 15
Complex Method,fyiReporting.RdlDesign,PropertyDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\PropertyDialog.Designer.cs,BuildReportItemTabs,Cyclomatic complexity of the method is 25
Complex Method,fyiReporting.RdlDesign,PropertyFilters,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlProperties\PropertyFilters.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,fyiReporting.RdlDesign,PropertyTableUIEditor,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlProperties\PropertyTable.cs,EditValue,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,FontCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FontCtl.cs,InitTextStyles,Cyclomatic complexity of the method is 15
Complex Method,fyiReporting.RdlDesign,FontCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FontCtl.cs,ApplyChanges,Cyclomatic complexity of the method is 16
Complex Method,fyiReporting.RdlDesign,FontCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FontCtl.cs,bFont_Click,Cyclomatic complexity of the method is 10
Complex Method,fyiReporting.RdlDesign,FontCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FontCtl.cs,bExpr_Click,Cyclomatic complexity of the method is 14
Complex Method,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,DesignTabChanged,Cyclomatic complexity of the method is 47
Complex Method,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,SelectionChanged,Cyclomatic complexity of the method is 14
Complex Method,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,dataSetsToolStripMenuItem_Click,Cyclomatic complexity of the method is 22
Complex Method,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,menuFilePrint_Click,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,GetStartupState,Cyclomatic complexity of the method is 28
Complex Method,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,SaveStartupState,Cyclomatic complexity of the method is 10
Complex Method,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,menuFormatPadding_Click,Cyclomatic complexity of the method is 15
Complex Method,fyiReporting.RdlDesign,RdlUserControl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlUserControl.cs,SelectionChanged,Cyclomatic complexity of the method is 13
Complex Method,fyiReporting.RdlDesign,RdlUserControl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlUserControl.cs,DesignTabChanged,Cyclomatic complexity of the method is 41
Complex Method,fyiReporting.RdlDesign,RdlUserControl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlUserControl.cs,Export,Cyclomatic complexity of the method is 15
Complex Method,fyiReporting.RdlDesign,ReportParameterCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ReportParameterCtl.Designer.cs,InitValidValues,Cyclomatic complexity of the method is 9
Complex Method,fyiReporting.RdlDesign,SingleCtlDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SingleCtlDialog.Designer.cs,SingleCtlDialog,Cyclomatic complexity of the method is 15
Complex Method,fyiReporting.RdlDesign,SingleCtlDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SingleCtlDialog.Designer.cs,bOK_Click,Cyclomatic complexity of the method is 12
Complex Method,fyiReporting.RdlDesign,SQLCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SQLCtl.Designer.cs,InitValues,Cyclomatic complexity of the method is 10
Complex Method,fyiReporting.RdlDesign,StaticSeriesCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StaticSeriesCtl.cs,InitValues,Cyclomatic complexity of the method is 13
Complex Method,fyiReporting.RdlDesign,PropertyCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\PropertyCtl.cs,ResetSelection,Cyclomatic complexity of the method is 12
Complex Method,fyiReporting.RdlDesign,PropertyCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\PropertyCtl.cs,SetPropertyNames,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,DesignerUtility,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignerUtility.cs,FillOdbcNames,Cyclomatic complexity of the method is 12
Complex Method,fyiReporting.RdlDesign,DesignerUtility,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignerUtility.cs,GetConnnectionInfo,Cyclomatic complexity of the method is 10
Complex Method,fyiReporting.RdlDesign,DesignerUtility,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignerUtility.cs,GetSchemaInfo,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,DesignerUtility,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignerUtility.cs,NormalizeSqlName,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,DesignerUtility,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignerUtility.cs,ValidateSize,Cyclomatic complexity of the method is 9
Complex Method,fyiReporting.RdlDesign,DesignerUtility,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignerUtility.cs,AddParameters,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,DesignerUtility,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignerUtility.cs,RelativePathTo,Cyclomatic complexity of the method is 11
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetRectReportItems,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,SelectionSize,Cyclomatic complexity of the method is 9
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DeleteReportItem,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,ProcessReport,Cyclomatic complexity of the method is 18
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawReportItems,Cyclomatic complexity of the method is 17
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawImage,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetTableSections,Cyclomatic complexity of the method is 11
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetStyleInfo,Cyclomatic complexity of the method is 33
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetStyleInfoBorderColor,Cyclomatic complexity of the method is 11
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetStyleInfoBackgroundImage,Cyclomatic complexity of the method is 17
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetSize,Cyclomatic complexity of the method is 9
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawBackground,Cyclomatic complexity of the method is 13
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawString,Cyclomatic complexity of the method is 13
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,PasteReportItems,Cyclomatic complexity of the method is 12
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,PasteTableMatrixOrChart,Cyclomatic complexity of the method is 9
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,SelectInRectangle,Cyclomatic complexity of the method is 9
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,SelectInReportItems,Cyclomatic complexity of the method is 12
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,SelectInTable,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitNode,Cyclomatic complexity of the method is 11
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitReportItems,Cyclomatic complexity of the method is 10
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitMatrix,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitMatrixColumnResize,Cyclomatic complexity of the method is 16
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitMatrixRowResize,Cyclomatic complexity of the method is 17
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitReportItem,Cyclomatic complexity of the method is 10
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitTable,Cyclomatic complexity of the method is 12
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitTableColumnResize,Cyclomatic complexity of the method is 9
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,MoveReportItem,Cyclomatic complexity of the method is 15
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,MoveSelectedItems,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,ResizeReportItem,Cyclomatic complexity of the method is 33
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,SetTableCellColSpan,Cyclomatic complexity of the method is 11
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetChartCategoryGroupNames,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetChartSeriesGroupNames,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetMatrixColumnGroupNames,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetMatrixRowGroupNames,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DeleteTableColumn,Cyclomatic complexity of the method is 9
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DeleteTableColumn,Cyclomatic complexity of the method is 12
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DeleteTableGroup,Cyclomatic complexity of the method is 9
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetTableGroupNames,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,InsertTableColumn,Cyclomatic complexity of the method is 13
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,InsertTableColumn,Cyclomatic complexity of the method is 10
Complex Method,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,InsertTableRow,Cyclomatic complexity of the method is 11
Complex Method,fyiReporting.RdlDesign,FiltersCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FiltersCtl.cs,InitValues,Cyclomatic complexity of the method is 9
Complex Method,fyiReporting.RdlDesign,FiltersCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FiltersCtl.cs,Apply,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,GroupingCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\GroupingCtl.cs,InitValues,Cyclomatic complexity of the method is 12
Complex Method,fyiReporting.RdlDesign,GroupingCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\GroupingCtl.cs,Apply,Cyclomatic complexity of the method is 19
Complex Method,fyiReporting.RdlDesign,InteractivityCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\InteractivityCtl.cs,InitValues,Cyclomatic complexity of the method is 12
Complex Method,fyiReporting.RdlDesign,InteractivityCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\InteractivityCtl.cs,ApplyChanges,Cyclomatic complexity of the method is 12
Complex Method,fyiReporting.RdlDesign,InteractivityCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\InteractivityCtl.cs,bExpr_Click,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,ListCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ListCtl.cs,ApplyChanges,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,MatrixCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\MatrixCtl.cs,ApplyChanges,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,MatrixView,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\MatrixView.cs,FillMatrixCells,Cyclomatic complexity of the method is 10
Complex Method,fyiReporting.RdlDesign,MatrixView,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\MatrixView.cs,FillMatrixColumnGroupings,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,MatrixView,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\MatrixView.cs,FillMatrixRowGroupings,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,PositionCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\PositionCtl.cs,ApplyChanges,Cyclomatic complexity of the method is 17
Complex Method,fyiReporting.RdlDesign,PropertyReportItem,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlProperties\PropertyReportItem.cs,GetProperties,Cyclomatic complexity of the method is 11
Complex Method,fyiReporting.RdlDesign,ReportNames,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ReportNames.cs,BuildNamesLoop,Cyclomatic complexity of the method is 14
Complex Method,fyiReporting.RdlDesign,ReportNames,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ReportNames.cs,NameError,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,ReportNames,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ReportNames.cs,GetFields,Cyclomatic complexity of the method is 13
Complex Method,fyiReporting.RdlDesign,ReportNames,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ReportNames.cs,GetReportClasses,Cyclomatic complexity of the method is 11
Complex Method,fyiReporting.RdlDesign,StyleBorderCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleBorderCtl.cs,ApplyChanges,Cyclomatic complexity of the method is 17
Complex Method,fyiReporting.RdlDesign,StyleBorderCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleBorderCtl.cs,bExpr_Click,Cyclomatic complexity of the method is 18
Complex Method,fyiReporting.RdlDesign,StyleCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleCtl.cs,ApplyChanges,Cyclomatic complexity of the method is 10
Complex Method,fyiReporting.RdlDesign,StyleCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleCtl.cs,bExpr_Click,Cyclomatic complexity of the method is 10
Complex Method,fyiReporting.RdlDesign,StyleTextCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleTextCtl.cs,InitTextStyles,Cyclomatic complexity of the method is 24
Complex Method,fyiReporting.RdlDesign,StyleTextCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleTextCtl.cs,ApplyChanges,Cyclomatic complexity of the method is 17
Complex Method,fyiReporting.RdlDesign,StyleTextCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleTextCtl.cs,bFont_Click,Cyclomatic complexity of the method is 10
Complex Method,fyiReporting.RdlDesign,StyleTextCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleTextCtl.cs,bExpr_Click,Cyclomatic complexity of the method is 15
Complex Method,fyiReporting.RdlDesign,TableColumnCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\TableColumnCtl.cs,ApplyChanges,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesign,TableCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\TableCtl.cs,ApplyChanges,Cyclomatic complexity of the method is 14
Long Parameter List,fyiReporting.RdlDesign,ChartAxisCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartAxisCtl.cs,InitGridLines,The method has 6 parameters. Parameters: node' type' show' color' style' width
Long Parameter List,fyiReporting.RdlDesign,ChartAxisCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartAxisCtl.cs,ApplyGridLines,The method has 6 parameters. Parameters: node' type' show' color' style' width
Long Parameter List,fyiReporting.RdlDesign,DesignRuler,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignRuler.cs,Ruler_DrawVertPart,The method has 5 parameters. Parameters: g' f' df' offset' height
Long Parameter List,fyiReporting.RdlDesign,PropertyDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\PropertyDialog.Designer.cs,PropertyDialog,The method has 5 parameters. Parameters: dxDraw' sNodes' type' tcNode' trNode
Long Parameter List,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,InitToolbarInsertToggle,The method has 5 parameters. Parameters: x' y' t' bImg' eh
Long Parameter List,fyiReporting.RdlDesign,SingleCtlDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SingleCtlDialog.Designer.cs,SingleCtlDialog,The method has 5 parameters. Parameters: dc' dxDraw' sNodes' type' names
Long Parameter List,fyiReporting.RdlDesign,DesignerUtility,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignerUtility.cs,GetSqlData,The method has 5 parameters. Parameters: dataProvider' connection' sql' parameters' dt
Long Parameter List,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawImageEmbedded,The method has 6 parameters. Parameters: iNode' sNode' vNode' si' r' rBase
Long Parameter List,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawImageExternal,The method has 5 parameters. Parameters: iNode' sNode' vNode' si' r
Long Parameter List,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawImageSized,The method has 5 parameters. Parameters: iNode' im' si' r' rBase
Long Parameter List,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawImageSized,The method has 5 parameters. Parameters: iNode' ise' im' si' r
Long Parameter List,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawImageSized,The method has 6 parameters. Parameters: iNode' ise' im' si' r' rBase
Long Parameter List,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawCircle,The method has 7 parameters. Parameters: c' bs' penWidth' x' y' d' bFill
Long Parameter List,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawLine,The method has 7 parameters. Parameters: c' bs' w' x' y' x2' y2
Long Parameter List,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetChartGroupName,The method has 5 parameters. Parameters: chart' gname' search1' search2' search3
Long Parameter List,fyiReporting.RdlDesign,DGCBColumn,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DGCBColumn.cs,Edit,The method has 6 parameters. Parameters: cm' row' rect' readOnly' text' visible
Long Parameter List,fyiReporting.RdlDesign,DGCBColumn,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DGCBColumn.cs,Paint,The method has 5 parameters. Parameters: g' rect' cm' row' alignToRight
Long Parameter List,fyiReporting.RdlDesign,DGCBColumn,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DGCBColumn.cs,Paint,The method has 7 parameters. Parameters: g' rect' cm' row' backBrush' foreBrush' alignToRight
Long Parameter List,fyiReporting.RdlDesign,DGCBColumn,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DGCBColumn.cs,PaintText,The method has 6 parameters. Parameters: g' rect' text' backBrush' foreBrush' alignToRight
Long Parameter List,fyiReporting.RdlDesign,RdlEditPreview,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlEditPreview.cs,FindNext,The method has 5 parameters. Parameters: ctl' str' matchCase' revertSearch' showEndMsg
Long Identifier,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,,The length of the parameter MenuChartInsertCategoryGrouping is 31.
Long Identifier,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,,The length of the parameter MenuChartDeleteCategoryGrouping is 31.
Long Identifier,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,,The length of the parameter webArchiveSingleFileMHTToolStripMenuItem is 40.
Long Identifier,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,,The length of the parameter showReportInBrowserToolStripMenuItem is 36.
Long Identifier,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,,The length of the parameter propertiesWindowsToolStripMenuItem is 34.
Long Identifier,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,,The length of the parameter embeddedImagesToolStripMenuItem is 31.
Long Identifier,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,,The length of the parameter createSharedDataSourceToolStripMenuItem is 39.
Long Identifier,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,,The length of the parameter horizontalSpacingToolStripMenuItem is 34.
Long Identifier,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,,The length of the parameter verticalSpacingToolStripMenuItem is 32.
Long Identifier,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,,The length of the parameter paddingBottomToolStripMenuItem is 30.
Long Identifier,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,,The length of the parameter startDesktopServerToolStripMenuItem is 35.
Long Statement,fyiReporting.RdlDesign,BodyCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\BodyCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(BodyCtl)); " is 127.
Long Statement,fyiReporting.RdlDesign,ChartAxisCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartAxisCtl.cs,InitValues,The length of the statement  "            chkMonth.Checked = _Draw.GetElementValue(node' "fyi:Month"' "false").ToLower() == "true" ? true : false; //added checkbox for month category axis WP 12 may 2008 " is 160.
Long Statement,fyiReporting.RdlDesign,ChartAxisCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartAxisCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ChartAxisCtl)); " is 132.
Long Statement,fyiReporting.RdlDesign,ChartCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartCtl.cs,InitValues,The length of the statement  "			this.chkPageBreakStart.Checked = _Draw.GetElementValue(node' "PageBreakAtStart"' "false").ToLower() == "true"? true: false; " is 123.
Long Statement,fyiReporting.RdlDesign,ChartCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartCtl.cs,InitValues,The length of the statement  "            //Determine if we have a static series or not... We are not allowing this to be changed here. That decision is taken when creating the chart. 05122007GJL " is 153.
Long Statement,fyiReporting.RdlDesign,ChartCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ChartCtl)); " is 128.
Long Statement,fyiReporting.RdlDesign,ChartCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartCtl.cs,Apply,The length of the statement  "                fNoRows = fDataSet = fPageBreakStart = fPageBreakEnd = fChartData = ftooltip = ftooltipX = ftooltip = ftooltipX = false; " is 120.
Long Statement,fyiReporting.RdlDesign,ChartLegendCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartLegendCtl.cs,InitValues,The length of the statement  "			this.chkInsidePlotArea.Checked = _Draw.GetElementValue(node' "InsidePlotArea"' "false").ToLower() == "true"? true: false; " is 121.
Long Statement,fyiReporting.RdlDesign,ChartLegendCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartLegendCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ChartLegendCtl)); " is 134.
Long Statement,fyiReporting.RdlDesign,CodeCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\CodeCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CodeCtl)); " is 127.
Long Statement,fyiReporting.RdlDesign,BackgroundCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\BackgroundCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(BackgroundCtl)); " is 133.
Long Statement,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DataSetsCtl)); " is 131.
Long Statement,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,InitializeComponent,The length of the statement  "			dataGridViewCellStyle1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(204))); " is 169.
Long Statement,fyiReporting.RdlDesign,DataSetRowsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetRowsCtl.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DataSetRowsCtl)); " is 134.
Long Statement,fyiReporting.RdlDesign,DataSetRowsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetRowsCtl.Designer.cs,bLoad_Click,The length of the statement  "					MessageBox.Show(string.Format(Strings.DataSetRowsCtl_Show_DatasourceNotFound' _dsv.DataSourceName)' Strings.DataSetRowsCtl_Show_LoadFailed); " is 140.
Long Statement,fyiReporting.RdlDesign,DataSetRowsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetRowsCtl.Designer.cs,bLoad_Click,The length of the statement  "                    Uri filename = new Uri(Path.GetDirectoryName(mc.SourceFile.LocalPath) + Path.DirectorySeparatorChar + dataSourceReference); " is 123.
Long Statement,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DesignCtl)); " is 129.
Long Statement,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,BuildContextMenusCustom,The length of the statement  "                MessageBox.Show(string.Format(Strings.DesignCtl_ShowB_CustomReportItemError' ex.Message)' Strings.DesignCtl_Show_Insert' MessageBoxButtons.OK); " is 143.
Long Statement,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,DrawPanelPaint,The length of the statement  "				string msg = string.Format("Error drawing report.  Likely error in syntax.  Switch to syntax and correct report syntax.{0}{1}{0}{2}"'  " is 133.
Long Statement,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,DrawPanelMouseDownInsert,The length of the statement  "				if (MessageBox.Show(Strings.DesignCtl_ShowB_WantReplaceCell' Strings.DesignCtl_Show_Insert' MessageBoxButtons.YesNo) != DialogResult.Yes) " is 137.
Long Statement,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,menuPaste_Click,The length of the statement  "					if (MessageBox.Show(Strings.DesignCtl_ShowB_WantReplaceCell' Strings.DesignCtl_Show_Paste' MessageBoxButtons.YesNo) != DialogResult.Yes) " is 136.
Long Statement,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,DoPaste,The length of the statement  "                    t = string.Format("<ReportItems><Textbox><Height>12pt</Height><Width>1in</Width><Value>{0}</Value><ZIndex>1</ZIndex></Textbox></ReportItems>"' t);  " is 146.
Long Statement,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,menuInsertCustomReportItem,The length of the statement  "				MessageBox.Show(string.Format(Strings.DesignCtl_Show_CustomReportItemException' ex.Message)' Strings.DesignCtl_Show_Insert); " is 124.
Long Statement,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,menuInsertLine_Click,The length of the statement  "			string ri = "<ReportItems><Line><Height>0in</Height><Width>1in</Width><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Line></ReportItems>"; " is 159.
Long Statement,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,menuInsertTextbox_Click,The length of the statement  "            string ri = "<ReportItems><Textbox><Height>12pt</Height><Width>1in</Width><Value>Text</Value><ZIndex>1</ZIndex></Textbox></ReportItems>";  " is 137.
Long Statement,fyiReporting.RdlDesign,DialogAbout,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogAbout.Designer.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DialogAbout)); " is 131.
Long Statement,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DialogDatabase)); " is 134.
Long Statement,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,InitializeComponent,The length of the statement  "            this.tvTablesColumns.BeforeExpand += new System.Windows.Forms.TreeViewCancelEventHandler(this.tvTablesColumns_BeforeExpand); " is 124.
Long Statement,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoGrouping,The length of the statement  "                    _ColumnList = DesignerUtility.GetSqlColumns(GetDataProvider()' GetDataConnection()' tbSQL.Text' reportParameterCtl1.lbParameters.Items); " is 136.
Long Statement,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The length of the statement  "                    _ColumnList = DesignerUtility.GetSqlColumns(GetDataProvider()' GetDataConnection()' tbSQL.Text' reportParameterCtl1.lbParameters.Items); " is 136.
Long Statement,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The length of the statement  "                            sb.AppendFormat("<ConnectionProperties><DataProvider>{0}</DataProvider><ConnectString>{1}</ConnectString></ConnectionProperties>"' " is 130.
Long Statement,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The length of the statement  "                                sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><TypeName>{2}</TypeName></Field>"' name' sq.Name' type); " is 124.
Long Statement,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The length of the statement  "                                sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><rd:TypeName>{2}</rd:TypeName></Field>"' name' sq.Name' type); " is 130.
Long Statement,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The length of the statement  "		<Textbox Name='{2}'><Top>.1in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.25in</Height><Value>=Fields!{2}.Value</Value><CanGrow>{3}</CanGrow><Style>{4}</Style></Textbox>"' " is 179.
Long Statement,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The length of the statement  "								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems> " is 188.
Long Statement,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The length of the statement  "								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems> " is 188.
Long Statement,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The length of the statement  "								<ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>None</Default><Left>Solid</Left></BorderStyle></Style></Textbox></ReportItems> " is 144.
Long Statement,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The length of the statement  "								<ReportItems><Textbox Name='{0}'><Value>=Fields!{0}.Value</Value><CanGrow>{1}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{2}</Style></Textbox></ReportItems> " is 180.
Long Statement,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The length of the statement  "								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems> " is 189.
Long Statement,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The length of the statement  "                                sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>"); " is 177.
Long Statement,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The length of the statement  "								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems> " is 189.
Long Statement,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The length of the statement  "                                sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>"); " is 177.
Long Statement,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,tvTablesColumns_MouseDown,The length of the statement  "                    dragText = "SELECT " + DesignerUtility.NormalizeSqlName(node.Text) + " FROM " + DesignerUtility.NormalizeSqlName(node.Parent.Text); " is 131.
Long Statement,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,bMove_Click,The length of the statement  "                    t = "SELECT " + DesignerUtility.NormalizeSqlName(node.Text) + " FROM " + DesignerUtility.NormalizeSqlName(node.Parent.Text); " is 124.
Long Statement,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,cbConnectionTypes_SelectedIndexChanged,The length of the statement  "                    tbConnection.Text = "Server=(local)\\ServerInstance;DataBase=DatabaseName;User Id=myUsername;Password=myPassword;Connect Timeout=5"; " is 132.
Long Statement,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,bTestConnection_Click,The length of the statement  "                MessageBox.Show(Strings.DialogDatabase_ShowD_SelectDataProvider' Strings.DesignerUtility_Show_TestConnection' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 154.
Long Statement,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,buttonDatabaseSearch_Click,The length of the statement  "            string connectionString = string.Format("server={0}; Database={1};User ID={2}; Password={3}; Trusted_Connection=False;"' " is 120.
Long Statement,fyiReporting.RdlDesign,DialogDataSourceRef,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDataSourceRef.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DialogDataSourceRef)); " is 139.
Long Statement,fyiReporting.RdlDesign,DialogDataSources,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDataSources.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DialogDataSources)); " is 137.
Long Statement,fyiReporting.RdlDesign,DialogDataSources,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDataSources.Designer.cs,bOK_Click,The length of the statement  "						string.Format(Strings.DialogDataSources_ShowE_DataSourceMustUniqueN' dsv.Name)' Strings.DialogDataSources_ShowE_DataSources); " is 125.
Long Statement,fyiReporting.RdlDesign,DialogDataSources,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDataSources.Designer.cs,bTestConnection_Click,The length of the statement  "                MessageBox.Show(Strings.DialogDatabase_ShowD_SelectDataProvider' Strings.DesignerUtility_Show_TestConnection' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 154.
Long Statement,fyiReporting.RdlDesign,DialogDataSources,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDataSources.Designer.cs,tbDSName_Validating,The length of the statement  "					string.Format(Strings.DialogDataSources_ShowE_NameInvalid' tbDSName.Text)' Strings.DialogDataSources_ShowE_DataSources); " is 120.
Long Statement,fyiReporting.RdlDesign,DialogEmbeddedImages,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogEmbeddedImages.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DialogEmbeddedImages)); " is 140.
Long Statement,fyiReporting.RdlDesign,DialogEmbeddedImages,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogEmbeddedImages.Designer.cs,bPaste_Click,The length of the statement  "                MessageBox.Show(this' Strings.DialogEmbeddedImages_ShowE_CopyImageBeforePaste' Strings.DialogEmbeddedImages_ShowE_Image); " is 121.
Long Statement,fyiReporting.RdlDesign,DialogEmbeddedImages,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogEmbeddedImages.Designer.cs,bOK_Click,The length of the statement  "						string.Format(Strings.DialogEmbeddedImages_ShowE_ImageMustUniqueName' eiv.Name)' Strings.DialogEmbeddedImages_ShowE_Image); " is 123.
Long Statement,fyiReporting.RdlDesign,DialogEmbeddedImages,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogEmbeddedImages.Designer.cs,tbEIName_Validating,The length of the statement  "					string.Format(Strings.DialogEmbeddedImages_ShowE_NameInvalid' tbEIName.Text)' Strings.DialogEmbeddedImages_ShowE_Image); " is 120.
Long Statement,fyiReporting.RdlDesign,DialogExprEditor,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogExprEditor.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DialogExprEditor)); " is 136.
Long Statement,fyiReporting.RdlDesign,DialogFilterOperator,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogFilterOperator.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DialogFilterOperator)); " is 140.
Long Statement,fyiReporting.RdlDesign,DialogFilterOperator,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogFilterOperator.Designer.cs,DialogFilterOperator_Validating,The length of the statement  "            MessageBox.Show(string.Format(Strings.DialogFilterOperator_Show_OperatorInList' cbOperator.Text)' Strings.DialogFilterOperator_Show_PickFilterOperator); " is 152.
Long Statement,fyiReporting.RdlDesign,DialogListOfStrings,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogListOfStrings.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DialogListOfStrings)); " is 139.
Long Statement,fyiReporting.RdlDesign,DialogNewChart,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogNewChart.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DialogNewChart)); " is 134.
Long Statement,fyiReporting.RdlDesign,DialogNewMatrix,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogNewMatrix.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DialogNewMatrix)); " is 135.
Long Statement,fyiReporting.RdlDesign,DialogNewTable,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogNewTable.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DialogNewTable)); " is 134.
Long Statement,fyiReporting.RdlDesign,DialogToolOptions,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogToolOptions.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DialogToolOptions)); " is 137.
Long Statement,fyiReporting.RdlDesign,DialogToolOptions,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogToolOptions.Designer.cs,InitDesktop,The length of the statement  "                MessageBox.Show(string.Format(Strings.DialogToolOptions_Show_ConfigError' ex.Message)' Strings.DialogToolOptions_Show_Options); " is 127.
Long Statement,fyiReporting.RdlDesign,DialogToolOptions,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogToolOptions.Designer.cs,GetAvailableCultures,The length of the statement  "				var attr = Attribute.GetCustomAttribute(asm' typeof(NeutralResourcesLanguageAttribute)) as NeutralResourcesLanguageAttribute; " is 125.
Long Statement,fyiReporting.RdlDesign,DialogValidateRdl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogValidateRdl.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DialogValidateRdl)); " is 137.
Long Statement,fyiReporting.RdlDesign,DialogValidateRdl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogValidateRdl.Designer.cs,bValidate_Click,The length of the statement  "                this.lbSchemaErrors.Items.Add(string.Format("Validation completed with {0} warnings and {1} errors."' _ValidationWarningCount' _ValidationErrorCount)); " is 151.
Long Statement,fyiReporting.RdlDesign,DialogValidValues,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogValidValues.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DialogValidValues)); " is 137.
Long Statement,fyiReporting.RdlDesign,DrillParametersDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DrillParametersDialog.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DrillParametersDialog)); " is 141.
Long Statement,fyiReporting.RdlDesign,FindTab,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FindTab.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FindTab)); " is 127.
Long Statement,fyiReporting.RdlDesign,GridCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\GridCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(GridCtl)); " is 127.
Long Statement,fyiReporting.RdlDesign,MDIChild,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\MDIChild.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MDIChild)); " is 128.
Long Statement,fyiReporting.RdlDesign,MDIChild,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\MDIChild.Designer.cs,InitializeComponent,The length of the statement  "			this.rdlDesigner.OnRdlChanged += new fyiReporting.RdlDesign.RdlEditPreview.RdlChangeHandler(this.rdlDesigner_RdlChanged); " is 121.
Long Statement,fyiReporting.RdlDesign,MDIChild,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\MDIChild.Designer.cs,InitializeComponent,The length of the statement  "			this.rdlDesigner.OnHeightChanged += new fyiReporting.RdlDesign.DesignCtl.HeightEventHandler(this.rdlDesigner_HeightChanged); " is 124.
Long Statement,fyiReporting.RdlDesign,MDIChild,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\MDIChild.Designer.cs,InitializeComponent,The length of the statement  "			this.rdlDesigner.OnSelectionChanged += new fyiReporting.RdlDesign.RdlEditPreview.RdlChangeHandler(this.rdlDesigner_SelectionChanged); " is 133.
Long Statement,fyiReporting.RdlDesign,MDIChild,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\MDIChild.Designer.cs,InitializeComponent,The length of the statement  "			this.rdlDesigner.OnSelectionMoved += new fyiReporting.RdlDesign.RdlEditPreview.RdlChangeHandler(this.rdlDesigner_SelectionMoved); " is 129.
Long Statement,fyiReporting.RdlDesign,MDIChild,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\MDIChild.Designer.cs,InitializeComponent,The length of the statement  "			this.rdlDesigner.OnReportItemInserted += new fyiReporting.RdlDesign.RdlEditPreview.RdlChangeHandler(this.rdlDesigner_ReportItemInserted); " is 137.
Long Statement,fyiReporting.RdlDesign,MDIChild,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\MDIChild.Designer.cs,InitializeComponent,The length of the statement  "			this.rdlDesigner.OnDesignTabChanged += new fyiReporting.RdlDesign.RdlEditPreview.RdlChangeHandler(this.rdlDesigner_DesignTabChanged); " is 133.
Long Statement,fyiReporting.RdlDesign,MDIChild,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\MDIChild.Designer.cs,InitializeComponent,The length of the statement  "			this.rdlDesigner.OnOpenSubreport += new fyiReporting.RdlDesign.DesignCtl.OpenSubreportEventHandler(this.rdlDesigner_OpenSubreport); " is 131.
Long Statement,fyiReporting.RdlDesign,MDIChild,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\MDIChild.Designer.cs,Export,The length of the statement  "                    DialogResult dr = MessageBox.Show(this' Strings.MDIChild_ShowF_WantDisplayColorsInTIF' Strings.MDIChild_ShowF_Export' MessageBoxButtons.YesNoCancel); " is 149.
Long Statement,fyiReporting.RdlDesign,PropertyDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\PropertyDialog.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(PropertyDialog)); " is 134.
Long Statement,fyiReporting.RdlDesign,PropertyDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\PropertyDialog.Designer.cs,BuildReportItemTabs,The length of the statement  "                Text = string.Format("{0} {1} " + Strings.PropertyDialog_BuildReportItemTabs_Properties' type.Replace("fyi:"' "")' name); " is 121.
Long Statement,fyiReporting.RdlDesign,PropertySubreportUIEditor,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlProperties\PropertySubreport.cs,EditValue,The length of the statement  "            using (SingleCtlDialog scd = new SingleCtlDialog(pr.DesignCtl' pr.Draw' pr.Nodes' SingleCtlTypeEnum.SubreportCtl' null)) " is 120.
Long Statement,fyiReporting.RdlDesign,PropertySubreportParametersUIEditor,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlProperties\PropertySubreport.cs,EditValue,The length of the statement  "            using (SingleCtlDialog scd = new SingleCtlDialog(pr.DesignCtl' pr.Draw' pr.Nodes' SingleCtlTypeEnum.SubreportCtl' null)) " is 120.
Long Statement,fyiReporting.RdlDesign,PropertyFiltersUIEditor,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlProperties\PropertyFilters.cs,EditValue,The length of the statement  "            using (SingleCtlDialog scd = new SingleCtlDialog(pri.DesignCtl' pri.Draw' pri.Nodes' SingleCtlTypeEnum.FiltersCtl' null)) " is 121.
Long Statement,fyiReporting.RdlDesign,PaletteTypeConverter,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlProperties\PropertyChart.cs,GetStandardValues,The length of the statement  "               "Default"' "EarthTones"' "Excel"' "GrayScale"' "Light"' "Pastel"' "SemiTransparent"'"Patterned"'"PatternedBlack"'"Custom"}); " is 124.
Long Statement,fyiReporting.RdlDesign,FontCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FontCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FontCtl)); " is 127.
Long Statement,fyiReporting.RdlDesign,PropertyAppearanceUIEditor,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlProperties\PropertyAppearance.cs,EditValue,The length of the statement  "            using (SingleCtlDialog scd = new SingleCtlDialog(pre.DesignCtl' pre.Draw' pre.Nodes' SingleCtlTypeEnum.FontCtl' pf.Names)) " is 122.
Long Statement,fyiReporting.RdlDesign,PropertyBorderUIEditor,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlProperties\PropertyBorder.cs,EditValue,The length of the statement  "            using (SingleCtlDialog scd = new SingleCtlDialog(pri.DesignCtl' pri.Draw' pri.Nodes' SingleCtlTypeEnum.BorderCtl' pb.Names)) " is 124.
Long Statement,fyiReporting.RdlDesign,PropertyVisibilityUIEditor,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlProperties\PropertyVisibility.cs,EditValue,The length of the statement  "            using (SingleCtlDialog scd = new SingleCtlDialog(pre.DesignCtl' pre.Draw' pre.Nodes' SingleCtlTypeEnum.VisibilityCtl' null)) " is 124.
Long Statement,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RdlDesigner)); " is 131.
Long Statement,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,InitializeComponent,The length of the statement  "            this.webArchiveSingleFileMHTToolStripMenuItem.Click += new System.EventHandler(this.webArchiveSingleFileMHTToolStripMenuItem_Click); " is 132.
Long Statement,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,BuildCustomItemsInsertMenu,The length of the statement  "				MessageBox.Show(string.Format(Strings.DesignCtl_ShowB_CustomReportItemError' ex.Message)' Strings.DesignCtl_Show_Insert' MessageBoxButtons.OK); " is 143.
Long Statement,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,InitToolbarFontSize,The length of the statement  "            string[] sizes = new string[] { "8"' "9"' "10"' "11"' "12"' "14"' "16"' "18"' "20"' "22"' "24"' "26"' "28"' "36"' "48"' "72" }; " is 127.
Long Statement,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,SelectionChanged,The length of the statement  "                backColorPicker1.Text = si.BackgroundColor.IsEmpty ? si.BackgroundColorText : ColorTranslator.ToHtml(si.BackgroundColor); " is 121.
Long Statement,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,menuData_Popup,The length of the statement  "            this.dataSourcesToolStripMenuItem1.Enabled = this.dataSetsToolStripMenuItem.Enabled = this.embeddedImagesToolStripMenuItem.Enabled = bEnable; " is 141.
Long Statement,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,menuEdit_Popup,The length of the statement  "				undoToolStripMenuItem.Text = e == null ? Strings.RdlDesigner_menuEdit_Popup_Undo : Strings.RdlDesigner_menuEdit_Popup_Undo + " " + e.UndoDescription; " is 149.
Long Statement,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,menuHelpHelp_Click,The length of the statement  "                MessageBox.Show(ex.Message + "\n\n" + Strings.RdlDesigner_Show_ResettingHelpURL' Strings.RdlDesigner_Show_HelpURLInvalid); " is 122.
Long Statement,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,menuHelpSupport_Click,The length of the statement  "                MessageBox.Show(ex.Message + "\n\n" + Strings.RdlDesigner_Show_ResettingSupportURL' Strings.RdlDesigner_Show_SupportURLInvalid); " is 128.
Long Statement,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,menuTools_Popup,The length of the statement  "            startDesktopServerToolStripMenuItem.Text = this._ServerProcess == null ? Strings.RdlDesigner_menuTools_Popup_StartDesktop : Strings.RdlDesigner_menuTools_Popup_StopDesktop; " is 172.
Long Statement,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,SetStatusNameAndPositionEdit,The length of the statement  "            var spos = string.Format("{2} {0}  {3} {1}"' mc.CurrentLine' mc.CurrentCh' Strings.RdlDesigner_Status_Ln' Strings.RdlDesigner_Status_Ch); " is 137.
Long Statement,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,menuViewBrowser_Click,The length of the statement  "                string rdlfile = Path.GetFileNameWithoutExtension(mc.SourceFile.LocalPath) + "_" + (++TEMPRDL_INC).ToString() + TEMPRDL; " is 120.
Long Statement,fyiReporting.RdlDesign,RdlUserControl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlUserControl.cs,SelectionChanged,The length of the statement  "                backColorPicker1.Text = si.BackgroundColor.IsEmpty ? si.BackgroundColorText : ColorTranslator.ToHtml(si.BackgroundColor); " is 121.
Long Statement,fyiReporting.RdlDesign,RdlUserControl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlUserControl.cs,Export,The length of the statement  "                    DialogResult dr = MessageBox.Show(this' Strings.MDIChild_ShowF_WantDisplayColorsInTIF' Strings.MDIChild_ShowF_Export' MessageBoxButtons.YesNoCancel); " is 149.
Long Statement,fyiReporting.RdlDesign,RdlUserControl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlUserControl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RdlUserControl)); " is 134.
Long Statement,fyiReporting.RdlDesign,RdlUserControl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlUserControl.cs,InitializeComponent,The length of the statement  "			this.fontToolStripComboBox1.SelectedIndexChanged += new System.EventHandler(this.fontToolStripComboBox1_SelectedIndexChanged); " is 126.
Long Statement,fyiReporting.RdlDesign,RdlUserControl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlUserControl.cs,InitializeComponent,The length of the statement  "			this.fontSizeToolStripComboBox1.SelectedIndexChanged += new System.EventHandler(this.fontSizeToolStripComboBox1_SelectedIndexChanged); " is 134.
Long Statement,fyiReporting.RdlDesign,RdlUserControl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlUserControl.cs,InitializeComponent,The length of the statement  "			this.zoomToolStripComboBox1.SelectedIndexChanged += new System.EventHandler(this.zoomToolStripComboBox1_SelectedIndexChanged); " is 126.
Long Statement,fyiReporting.RdlDesign,ReportCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ReportCtl.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ReportCtl)); " is 129.
Long Statement,fyiReporting.RdlDesign,ReportCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ReportCtl.Designer.cs,tbSize_Validating,The length of the statement  "                MessageBox.Show(string.Format(Strings.ReportCtl_Show_SizeInvalid' tb.Text' ex.Message)' tb.Tag + " " + Strings.ReportCtl_Show_Field_Invalid); " is 141.
Long Statement,fyiReporting.RdlDesign,ReportParameterCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ReportParameterCtl.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ReportParameterCtl)); " is 138.
Long Statement,fyiReporting.RdlDesign,ReportParameterCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ReportParameterCtl.Designer.cs,InitializeComponent,The length of the statement  "			this.cbValidDisplayField.SelectedIndexChanged += new System.EventHandler(this.cbValidDisplayField_SelectedIndexChanged); " is 120.
Long Statement,fyiReporting.RdlDesign,ReportParameterCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ReportParameterCtl.Designer.cs,InitializeComponent,The length of the statement  "			this.cbDefaultValueField.SelectedIndexChanged += new System.EventHandler(this.cbDefaultValueField_SelectedIndexChanged); " is 120.
Long Statement,fyiReporting.RdlDesign,SingleCtlDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SingleCtlDialog.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SingleCtlDialog)); " is 135.
Long Statement,fyiReporting.RdlDesign,SQLCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SQLCtl.Designer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SQLCtl)); " is 126.
Long Statement,fyiReporting.RdlDesign,SQLCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SQLCtl.Designer.cs,InitializeComponent,The length of the statement  "			this.tvTablesColumns.BeforeExpand += new System.Windows.Forms.TreeViewCancelEventHandler(this.tvTablesColumns_BeforeExpand); " is 124.
Long Statement,fyiReporting.RdlDesign,SQLCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SQLCtl.Designer.cs,bMove_Click,The length of the statement  "                    t = "SELECT " + DesignerUtility.NormalizeSqlName(node.Text) + " FROM " + DesignerUtility.NormalizeSqlName(node.Parent.Text); " is 124.
Long Statement,fyiReporting.RdlDesign,StaticSeriesCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StaticSeriesCtl.cs,Apply,The length of the statement  "                ncds.InnerXml += "<StaticMember><Label>" + si.Name + "</Label><Value>" + si.Data.Replace("<"'"&lt;").Replace(">"'"&gt;") + "</Value></StaticMember>";    " is 149.
Long Statement,fyiReporting.RdlDesign,StaticSeriesCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StaticSeriesCtl.cs,Apply,The length of the statement  "                    ncdc.InnerXml += "<ChartSeries><fyi:Color xmlns:fyi=\"http://www.fyireporting.com/schemas\">" + si.Colour + "</fyi:Color><PlotType>" + si.PlotType + "</PlotType><fyi:NoMarker xmlns:fyi=\"http://www.fyireporting.com/schemas\">" + si.NoMarker + "</fyi:NoMarker><fyi:LineSize xmlns:fyi=\"http://www.fyireporting.com/schemas\">" + si.LineSize + "</fyi:LineSize><YAxis>" + si.YAxis + " is 378.
Long Statement,fyiReporting.RdlDesign,StaticSeriesCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StaticSeriesCtl.cs,Apply,The length of the statement  "                        + si.Data.Replace("<"' "&lt;").Replace(">"' "&gt;") + "</Value></DataValue></DataValues><DataLabel><Value>" + si.Label.Replace("<"' "&lt;").Replace(">"' "&gt;") + "</Value><Visible>" + si.ShowLabel.ToString() " is 208.
Long Statement,fyiReporting.RdlDesign,StaticSeriesCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StaticSeriesCtl.cs,Apply,The length of the statement  "                    ncdc.InnerXml += "<ChartSeries><fyi:Color xmlns:fyi=\"http://www.fyireporting.com/schemas\">" + si.Colour + "</fyi:Color><PlotType>" + si.PlotType + "</PlotType><fyi:NoMarker xmlns:fyi=\"http://www.fyireporting.com/schemas\">" + si.NoMarker + "</fyi:NoMarker><fyi:LineSize xmlns:fyi=\"http://www.fyireporting.com/schemas\">" + si.LineSize + "</fyi:LineSize><YAxis>" + si.YAxis + "</YAxis><DataPoints><DataPoint><DataValues><DataValue><Value>" // 20022008 AJM GJL " is 462.
Long Statement,fyiReporting.RdlDesign,StaticSeriesCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StaticSeriesCtl.cs,Apply,The length of the statement  "                        + si.Data.Replace("<"' "&lt;").Replace(">"' "&gt;") + "</Value></DataValue></DataValues><DataLabel><Value>" + si.Label.Replace("<"' "&lt;").Replace(">"' "&gt;") + "</Value><Visible>" + si.ShowLabel.ToString() " is 208.
Long Statement,fyiReporting.RdlDesign,StaticSeriesCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StaticSeriesCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(StaticSeriesCtl)); " is 135.
Long Statement,fyiReporting.RdlDesign,VisibilityCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\VisibilityCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(VisibilityCtl)); " is 133.
Long Statement,fyiReporting.RdlDesign,PropertyActionUIEditor,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlProperties\PropertyAction.cs,EditValue,The length of the statement  "            SingleCtlDialog scd = new SingleCtlDialog(pre.DesignCtl' pre.Draw' pre.Nodes' SingleCtlTypeEnum.InteractivityCtl' null); " is 120.
Long Statement,fyiReporting.RdlDesign,PropertyReportParameterUIEditor,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlProperties\PropertyReport.cs,EditValue,The length of the statement  "            using (SingleCtlDialog scd = new SingleCtlDialog(pr.DesignCtl' pr.Draw' null' SingleCtlTypeEnum.ReportParameterCtl' null)) " is 122.
Long Statement,fyiReporting.RdlDesign,PropertyReportModulesClassesUIEditor,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlProperties\PropertyReport.cs,EditValue,The length of the statement  "            using (SingleCtlDialog scd = new SingleCtlDialog(pr.DesignCtl' pr.Draw' null' SingleCtlTypeEnum.ReportModulesClassesCtl' null)) " is 127.
Long Statement,fyiReporting.RdlDesign,PropertyCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\PropertyCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(PropertyCtl)); " is 131.
Long Statement,fyiReporting.RdlDesign,CustomReportItemCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\CustomReportItemCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CustomReportItemCtl)); " is 139.
Long Statement,fyiReporting.RdlDesign,DesignerUtility,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignerUtility.cs,GetSqlData,The length of the statement  "//                        string val = Convert.ToString(dr[dc.ColumnName]' System.Globalization.NumberFormatInfo.InvariantInfo); " is 128.
Long Statement,fyiReporting.RdlDesign,DesignerUtility,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignerUtility.cs,GetConnnectionInfo,The length of the statement  "                Uri filename = new Uri(Path.GetDirectoryName(mc.SourceFile.LocalPath) + Path.DirectorySeparatorChar + dataSourceReference); " is 123.
Long Statement,fyiReporting.RdlDesign,DesignerUtility,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignerUtility.cs,GetSchemaInfo,The length of the statement  "					MessageBox.Show(string.Format(Strings.DesignerUtility_Show_ConnectDataProviderError'dataProvider)' Strings.DesignerUtility_Show_SQLError); " is 138.
Long Statement,fyiReporting.RdlDesign,DesignerUtility,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignerUtility.cs,TestConnection,The length of the statement  "				MessageBox.Show(e.InnerException == null? e.Message: e.InnerException.Message' Strings.DesignerUtility_Show_OpenConnectionError); " is 129.
Long Statement,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawReportPrimaryRegions,The length of the statement  "			RectangleF b = new RectangleF(xLoc' yLoc + 1' /*PointsX(Width)*/(pWidth) /*+ _hScroll*/' /*height*/ ((height > TotalPageHeight /* - yLoc*/) ? TotalPageHeight/* - yLoc*/ : height));//displayHeight > 0 ? displayHeight : 0); " is 221.
Long Statement,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawReportPrimaryRegions,The length of the statement  "			b = new RectangleF(xLoc + lMargin' yLoc + 1' /*PointsX(Width)*/(pWidth - lMargin - rMargin) /*+ _hScroll*/' /*height*/ ((height > TotalPageHeight /* - yLoc*/) ? TotalPageHeight/* - yLoc*/ : height));//displayHeight > 0 ? displayHeight : 0); " is 240.
Long Statement,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawImageEmbedded,The length of the statement  "				DrawString(string.Format("Image: embedded image {0} requested but there are no embedded images defined."'vNode.InnerText)' si' r); " is 130.
Long Statement,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,PasteImage,The length of the statement  "                "<ReportItems><Image><Source>Embedded</Source><Height>{0:0.00}in</Height><Width>{1:0.00}in</Width><Sizing>FitProportional</Sizing><Zindex>1</ZIndex></Image></ReportItems>"'  " is 172.
Long Statement,fyiReporting.RdlDesign,FiltersCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FiltersCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FiltersCtl)); " is 130.
Long Statement,fyiReporting.RdlDesign,GroupingCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\GroupingCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(GroupingCtl)); " is 131.
Long Statement,fyiReporting.RdlDesign,ImageCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ImageCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ImageCtl)); " is 128.
Long Statement,fyiReporting.RdlDesign,InteractivityCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\InteractivityCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(InteractivityCtl)); " is 136.
Long Statement,fyiReporting.RdlDesign,ListCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ListCtl.cs,InitValues,The length of the statement  "			this.chkXmlInstances.Checked = _Draw.GetElementValue(riNode' "DataInstanceElementOutput"' "Output")=="Output"?true:false; " is 121.
Long Statement,fyiReporting.RdlDesign,ListCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ListCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ListCtl)); " is 127.
Long Statement,fyiReporting.RdlDesign,MatrixCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\MatrixCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MatrixCtl)); " is 129.
Long Statement,fyiReporting.RdlDesign,ModulesClassesCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ModulesClassesCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ModulesClassesCtl)); " is 137.
Long Statement,fyiReporting.RdlDesign,PositionCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\PositionCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(PositionCtl)); " is 131.
Long Statement,fyiReporting.RdlDesign,QueryParametersCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\QueryParametersCtl.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(QueryParametersCtl)); " is 138.
Long Statement,fyiReporting.RdlDesign,RdlEditPreview,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlEditPreview.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RdlEditPreview)); " is 134.
Long Statement,fyiReporting.RdlDesign,ReportXmlCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ReportXmlCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ReportXmlCtl)); " is 132.
Long Statement,fyiReporting.RdlDesign,SortingCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SortingCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SortingCtl)); " is 130.
Long Statement,fyiReporting.RdlDesign,StyleBorderCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleBorderCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(StyleBorderCtl)); " is 134.
Long Statement,fyiReporting.RdlDesign,StyleCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(StyleCtl)); " is 128.
Long Statement,fyiReporting.RdlDesign,StyleTextCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleTextCtl.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(StyleTextCtl)); " is 132.
Long Statement,fyiReporting.RdlDesign,SubreportCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SubreportCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SubreportCtl)); " is 132.
Long Statement,fyiReporting.RdlDesign,TableColumnCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\TableColumnCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TableColumnCtl)); " is 134.
Long Statement,fyiReporting.RdlDesign,TableColumnCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\TableColumnCtl.cs,IsValid,The length of the statement  "								MessageBox.Show(String.Format(Strings.TableColumnCtl_Show_ExpressionTrueFalse' tbHidden.Text)' Strings.TableColumnCtl_Show_HiddenInvalid); " is 138.
Long Statement,fyiReporting.RdlDesign,TableCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\TableCtl.cs,InitValues,The length of the statement  "			this.chkRenderDetails.Checked = _Draw.GetElementValue(riNode' "DetailDataElementOutput"' "output").ToLower() == "output"; " is 121.
Long Statement,fyiReporting.RdlDesign,TableCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\TableCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TableCtl)); " is 128.
Long Statement,fyiReporting.RdlDesign,TableRowCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\TableRowCtl.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TableRowCtl)); " is 131.
Long Statement,fyiReporting.RdlDesign,TableRowCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\TableRowCtl.cs,IsValid,The length of the statement  "								MessageBox.Show(String.Format(Strings.TableRowCtl_Show_ExpressionTrueFalse' tbHidden.Text)' Strings.TableRowCtl_Show_HiddenInvalid); " is 132.
Complex Conditional,fyiReporting.RdlDesign,ChartAxisCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartAxisCtl.cs,ApplyChanges,The conditional expression  "fMajorGLShow || fMajorGLWidth || fMajorGLColor || fMajorGLStyle"  is complex.
Complex Conditional,fyiReporting.RdlDesign,ChartAxisCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartAxisCtl.cs,ApplyChanges,The conditional expression  "fMinorGLShow || fMinorGLWidth || fMinorGLColor || fMinorGLStyle"  is complex.
Complex Conditional,fyiReporting.RdlDesign,RdlScriptLexer,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlScriptLexer.cs,StyleText,The conditional expression  "Char.IsDigit(c) || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F') || c == 'x'"  is complex.
Complex Conditional,fyiReporting.RdlDesign,RdlScriptLexer,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlScriptLexer.cs,StyleText,The conditional expression  "!EOF && (Char.IsLetterOrDigit(c) || c == '.' || c == '!' || c == '_')"  is complex.
Complex Conditional,fyiReporting.RdlDesign,RdlScriptLexer,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlScriptLexer.cs,StyleText,The conditional expression  "field.Length == 2 && fields.Contains(field[0])   										&& (field[1] == "Value" || field[1] == "IsMissing")"  is complex.
Complex Conditional,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,DrawPanelMouseDownInsert,The conditional expression  "!(_CurrentInsert != null &&		// should we be inserting?  				_MouseDownNode != null &&			  				(_MouseDownNode.Name == "List" ||  				_MouseDownNode.Name == "Rectangle" ||  				_MouseDownNode.Name == "Body" ||  				_MouseDownNode.Name == "PageHeader" ||  				_MouseDownNode.Name == "PageFooter"))"  is complex.
Complex Conditional,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,DrawPanelMouseDownInsert,The conditional expression  "_CurrentInsert == null || _CurrentInsert == "Line" || hl == null ||   						hl.HitContainer == null || (!(hl.HitContainer.Name == "Table" || hl.HitContainer.Name=="fyi:Grid"))"  is complex.
Complex Conditional,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,menuPaste_Click,The conditional expression  "!(lNode.Name == "List" ||  				lNode.Name == "Body" ||  				lNode.Name == "Rectangle" ||  				lNode.Name == "PageHeader" ||  				lNode.Name == "PageFooter")"  is complex.
Complex Conditional,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,doSelectAll,The conditional expression  "riNode.Name == "Table" || riNode.Name == "fyi:Grid" || riNode.Name == "List" || riNode.Name == "Rectangle""  is complex.
Complex Conditional,fyiReporting.RdlDesign,DialogDataSourceRef,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDataSourceRef.Designer.cs,validate_TextChanged,The conditional expression  "this.tbFilename.Text.Length > 0 &&  				this.tbPassword.Text.Length > 0 &&  				this.tbPassword.Text == this.tbPassword2.Text &&  				this.tbConnection.Text.Length > 0"  is complex.
Complex Conditional,fyiReporting.RdlDesign,DialogExprEditor,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogExprEditor.Designer.cs,DialogExprEditor,The conditional expression  "pNode.Name == "List" ||                      pNode.Name == "Table" ||                      pNode.Name == "Matrix" ||                      pNode.Name == "Chart""  is complex.
Complex Conditional,fyiReporting.RdlDesign,DesignRuler,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignRuler.cs,HeightChanged,The conditional expression  "p != null &&                      (p.Name == "Body" || p.Name == "PageHeader" || p.Name == "PageFooter")"  is complex.
Complex Conditional,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,fxExpr_Click,The conditional expression  "mc == null ||                  mc.DesignTab != DesignTabs.Design || mc.DrawCtl.SelectedCount != 1 ||                  mc.Editor == null"  is complex.
Complex Conditional,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,EnableEditTextBox,The conditional expression  "this.ctlEditTextbox == null || mc == null ||                  mc.DesignTab != DesignTabs.Design || mc.DrawCtl.SelectedCount != 1"  is complex.
Complex Conditional,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,EditTextbox_Validated,The conditional expression  "mc == null ||                  mc.DesignTab != DesignTabs.Design || mc.DrawCtl.SelectedCount != 1 ||                  mc.Editor == null"  is complex.
Complex Conditional,fyiReporting.RdlDesign,ReportParameterCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ReportParameterCtl.Designer.cs,ApplyDefaultValues,The conditional expression  "repParm.DefaultDSRDataSetName == null || repParm.DefaultDSRDataSetName.Length == 0 ||  					repParm.DefaultDSRValueField == null || repParm.DefaultDSRValueField.Length == 0"  is complex.
Complex Conditional,fyiReporting.RdlDesign,ReportParameterCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ReportParameterCtl.Designer.cs,ApplyValidValues,The conditional expression  "repParm.ValidValuesDSRDataSetName == null || repParm.ValidValuesDSRDataSetName.Length == 0 ||  					repParm.ValidValuesDSRValueField == null || repParm.ValidValuesDSRValueField.Length == 0"  is complex.
Complex Conditional,fyiReporting.RdlDesign,DesignerUtility,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignerUtility.cs,ValidateSize,The conditional expression  "t.IndexOf("in") < 0 &&  			    t.IndexOf("cm") < 0 &&  			    t.IndexOf("mm") < 0 &&  			    t.IndexOf("pt") < 0 &&  			    t.IndexOf("pc") < 0"  is complex.
Complex Conditional,fyiReporting.RdlDesign,DesignerUtility,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignerUtility.cs,MakeValidSize,The conditional expression  "t.IndexOf("in") < 0 &&  				t.IndexOf("cm") < 0 &&  				t.IndexOf("mm") < 0 &&  				t.IndexOf("pt") < 0 &&  				t.IndexOf("pc") < 0"  is complex.
Complex Conditional,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetReportItemDataRegionFields,The conditional expression  "cNode == null ||  				cNode.Name == "Body" ||  				cNode.Name == "PageHeader" ||  				cNode.Name == "PageFooter""  is complex.
Complex Conditional,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DeleteReportItem,The conditional expression  "node.Name == "Table" ||                  node.Name == "fyi:Grid" ||  				node.Name == "List" ||  				node.Name == "Matrix" ||  				node.Name == "Rectangle""  is complex.
Complex Conditional,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,InGrid,The conditional expression  "pNode.Name == "Rectangle" || pNode.Name == "Table" || pNode.Name=="Matrix" || pNode.Name=="List""  is complex.
Complex Conditional,fyiReporting.RdlDesign,FiltersCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FiltersCtl.cs,Apply,The conditional expression  "fe == null || fe.Length <= 0 ||                       op == null || op.Length <= 0 ||                       fv == null || fv.Length <= 0"  is complex.
Complex Conditional,fyiReporting.RdlDesign,ModulesClassesCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ModulesClassesCtl.cs,ApplyClasses,The conditional expression  "dr[0] == DBNull.Value ||  					dr[1] == DBNull.Value ||  					dr[0].ToString().Trim().Length <= 0 ||  					dr[1].ToString().Trim().Length <= 0"  is complex.
Complex Conditional,fyiReporting.RdlDesign,StyleTextCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleTextCtl.cs,InitTextStyles,The conditional expression  "pNode.Name == "List" ||  						pNode.Name == "Table" ||  						pNode.Name == "Matrix" ||  						pNode.Name == "Chart""  is complex.
Empty Catch Block,fyiReporting.RdlDesign,CodeCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\CodeCtl.cs,lbErrors_SelectedIndexChanged,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlDesign,DialogDataSources,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDataSources.Designer.cs,bGetFilename_Click,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlDesign,DialogExprEditor,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogExprEditor.Designer.cs,InitReportModulesAndClass,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,menuFileOpen_Click,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,SaveStartupState,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,GetCustomColors,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,CleanupTempFiles,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlDesign,RdlUserControl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlUserControl.cs,GetRdlSource,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlDesign,RdlUserControl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlUserControl.cs,openToolStripButton1_Click,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlDesign,PropertyCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\PropertyCtl.cs,SetPropertyNames,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlDesign,PropertyCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\PropertyCtl.cs,SetPropertyNames,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlDesign,DesignerUtility,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignerUtility.cs,ColorFromHtml,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlDesign,DesignerUtility,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignerUtility.cs,GetSchemaInfo,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlDesign,DesignerUtility,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignerUtility.cs,GetSchemaInfo,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlDesign,DesignerUtility,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignerUtility.cs,GetSchemaInfo,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetStyleInfoBackgroundImage,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlDesign,PropertyReportItem,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlProperties\PropertyReportItem.cs,SetCustomReportItem,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlDesign,SimpleButton,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SimpleButton.cs,DrawPanelPaint,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlDesign,SimpleToggle,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SimpleToggle.cs,DrawPanelPaint,The method has an empty catch block.
Magic Number,fyiReporting.RdlDesign,ChartCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartCtl.cs,InitValues,The following statement contains a magic number: switch (iter)                  {                      case 1:                          cdata = cnode.InnerText;                          break;                      case 2:                          cdata2 = cnode.InnerText;                          break;                      case 3:                          cdata3 = cnode.InnerText;                          break;                      default:                          break;                  }
Magic Number,fyiReporting.RdlDesign,ChartCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartCtl.cs,InitValues,The following statement contains a magic number: switch (iter)                  {                      case 1:                          cdata = cnode.InnerText;                          break;                      case 2:                          cdata2 = cnode.InnerText;                          break;                      case 3:                          cdata3 = cnode.InnerText;                          break;                      default:                          break;                  }
Magic Number,fyiReporting.RdlDesign,CodeCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\CodeCtl.cs,lbErrors_SelectedIndexChanged,The following statement contains a magic number: line = line.Substring(3' l-3);
Magic Number,fyiReporting.RdlDesign,CodeCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\CodeCtl.cs,lbErrors_SelectedIndexChanged,The following statement contains a magic number: line = line.Substring(3' l-3);
Magic Number,fyiReporting.RdlDesign,CodeCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\CodeCtl.cs,Goto,The following statement contains a magic number: offset += (this.tbCode.Lines[i].Length + 2);
Magic Number,fyiReporting.RdlDesign,BackgroundCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\BackgroundCtl.cs,bExternal_Click,The following statement contains a magic number: ofd.FilterIndex = 6;
Magic Number,fyiReporting.RdlDesign,ColorPicker,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ColorPicker.cs,ColorPicker,The following statement contains a magic number: Font = new Font("Arial"' 8' FontStyle.Bold | FontStyle.Italic);
Magic Number,fyiReporting.RdlDesign,ColorPickerPopup,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ColorPickerPopup.cs,InitializeComponent,The following statement contains a magic number: this.lStatus.Location = new System.Drawing.Point(0' 174);
Magic Number,fyiReporting.RdlDesign,ColorPickerPopup,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ColorPickerPopup.cs,InitializeComponent,The following statement contains a magic number: this.lStatus.Size = new System.Drawing.Size(233' 13);
Magic Number,fyiReporting.RdlDesign,ColorPickerPopup,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ColorPickerPopup.cs,InitializeComponent,The following statement contains a magic number: this.lStatus.Size = new System.Drawing.Size(233' 13);
Magic Number,fyiReporting.RdlDesign,ColorPickerPopup,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ColorPickerPopup.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 13);
Magic Number,fyiReporting.RdlDesign,ColorPickerPopup,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ColorPickerPopup.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 13);
Magic Number,fyiReporting.RdlDesign,ColorPickerPopup,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ColorPickerPopup.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(233' 187);
Magic Number,fyiReporting.RdlDesign,ColorPickerPopup,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ColorPickerPopup.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(233' 187);
Magic Number,fyiReporting.RdlDesign,Conversions,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\Conversions.cs,MeasurementTypeAsHundrethsOfAnInch,The following statement contains a magic number: measurementValue = measurementType.Substring(0' measurementType.Length - 2);
Magic Number,fyiReporting.RdlDesign,Conversions,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\Conversions.cs,MeasurementTypeAsHundrethsOfAnInch,The following statement contains a magic number: measurementType = measurementType.Substring(measurementType.Length - 2);
Magic Number,fyiReporting.RdlDesign,Conversions,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\Conversions.cs,MeasurementTypeAsHundrethsOfAnInch,The following statement contains a magic number: measurementType.Length >= 2
Magic Number,fyiReporting.RdlDesign,Conversions,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\Conversions.cs,MeasurementTypeAsHundrethsOfAnInch,The following statement contains a magic number: return (int)((decimal.Parse(measurementValue) / 25.4m) * 100);
Magic Number,fyiReporting.RdlDesign,Conversions,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\Conversions.cs,MeasurementTypeAsHundrethsOfAnInch,The following statement contains a magic number: return (int)((decimal.Parse(measurementValue) / 25.4m) * 100);
Magic Number,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tbTimeout.Maximum = new decimal(new int[] {              2147483647'              0'              0'              0});
Magic Number,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,InitializeComponent,The following statement contains a magic number: dataGridViewCellStyle1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(204)));
Magic Number,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,InitializeComponent,The following statement contains a magic number: dataGridViewCellStyle1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(204)));
Magic Number,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(480' 300);
Magic Number,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(480' 300);
Magic Number,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,InitValues,The following statement contains a magic number: string[] rowValues = new string[2];
Magic Number,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,InitValues,The following statement contains a magic number: string[] rowValues = new string[4];
Magic Number,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,InitValues,The following statement contains a magic number: rowValues[2] = _Draw.GetElementValue(fNode' "Value"' "");
Magic Number,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,InitValues,The following statement contains a magic number: rowValues[3] = typename == null ? "" : typename;
Magic Number,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,Apply,The following statement contains a magic number: dr[1] == DBNull.Value && dr[2] == DBNull.Value
Magic Number,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,Apply,The following statement contains a magic number: _Draw.SetElement(fNode' _UseTypenameQualified ? "rd:TypeName" : "TypeName"' (string)dr[3]);
Magic Number,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,Apply,The following statement contains a magic number: dr[3] != DBNull.Value &&                      dr[3] is string &&                      (string)dr[3] != string.Empty
Magic Number,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,Apply,The following statement contains a magic number: dr[3] != DBNull.Value &&                      dr[3] is string &&                      (string)dr[3] != string.Empty
Magic Number,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,Apply,The following statement contains a magic number: dr[3] != DBNull.Value &&                      dr[3] is string &&                      (string)dr[3] != string.Empty
Magic Number,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,bRefresh_Click,The following statement contains a magic number: string[] rowValues = new string[4];
Magic Number,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,bRefresh_Click,The following statement contains a magic number: rowValues[2] = "";
Magic Number,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,bRefresh_Click,The following statement contains a magic number: DataGridViewComboBoxColumn TypeColumn = (dgFields.Columns[3] as DataGridViewComboBoxColumn);
Magic Number,fyiReporting.RdlDesign,DataSetsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetsCtl.Designer.cs,bRefresh_Click,The following statement contains a magic number: rowValues[3] = sc.DataType.FullName;
Magic Number,fyiReporting.RdlDesign,DataSetRowsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetRowsCtl.Designer.cs,CreateDataTable,The following statement contains a magic number: dr[2] == DBNull.Value
Magic Number,fyiReporting.RdlDesign,DataSetRowsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetRowsCtl.Designer.cs,CreateDataTable,The following statement contains a magic number: dgc.Width = 75;
Magic Number,fyiReporting.RdlDesign,DataSetRowsCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DataSetRowsCtl.Designer.cs,DidFieldsChange,The following statement contains a magic number: dr[2] == DBNull.Value
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,AlignLefts,The following statement contains a magic number: _DrawPanel.SelectedCount < 2
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,AlignRights,The following statement contains a magic number: _DrawPanel.SelectedCount < 2
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,AlignCenters,The following statement contains a magic number: _DrawPanel.SelectedCount < 2
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,AlignCenters,The following statement contains a magic number: float mc = mrect.Left + mrect.Width/2;
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,AlignCenters,The following statement contains a magic number: float nleft =  (mc - (nrect.Left + nrect.Width/2));
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,AlignTops,The following statement contains a magic number: _DrawPanel.SelectedCount < 2
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,AlignBottoms,The following statement contains a magic number: _DrawPanel.SelectedCount < 2
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,AlignMiddles,The following statement contains a magic number: _DrawPanel.SelectedCount < 2
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,AlignMiddles,The following statement contains a magic number: float mc = mrect.Top + mrect.Height/2;
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,AlignMiddles,The following statement contains a magic number: float ntop =  (mc - (nrect.Top + nrect.Height/2));
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,HorzSpacing,The following statement contains a magic number: rectn.Width = 77;
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,HorzSpacingDiff,The following statement contains a magic number: _DrawPanel.SelectedList.Count < 2
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,HorzSpacingMakeEqual,The following statement contains a magic number: _DrawPanel.SelectedList.Count < 2
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,HorzSpacingIncrease,The following statement contains a magic number: float diff = HorzSpacingDiff() + 8;
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,HorzSpacingDecrease,The following statement contains a magic number: float diff = HorzSpacingDiff() - 8;
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,VertSpacing,The following statement contains a magic number: rectn.Height = 16;
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,VertSpacingDiff,The following statement contains a magic number: _DrawPanel.SelectedList.Count < 2
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,VertSpacingMakeEqual,The following statement contains a magic number: _DrawPanel.SelectedList.Count < 2
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,VertSpacingIncrease,The following statement contains a magic number: float diff = VertSpacingDiff() + 8;
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,VertSpacingDecrease,The following statement contains a magic number: float diff = VertSpacingDiff() - 8;
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,SetScrollControlsV,The following statement contains a magic number: _vScroll.SmallChange = _vScroll.LargeChange / 5;
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,SetScrollControlsH,The following statement contains a magic number: _hScroll.SmallChange = _hScroll.LargeChange / 5;
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,DoPaste,The following statement contains a magic number: !(t.Length >=	27 && t.Substring(0' 13) == "<ReportItems>")
Magic Number,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,DoPaste,The following statement contains a magic number: !(t.Length >=	27 && t.Substring(0' 13) == "<ReportItems>")
Magic Number,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,InitializeComponent,The following statement contains a magic number: this.rdlViewer1.Zoom = 0.7061753F;
Magic Number,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The following statement contains a magic number: int length = 5;
Magic Number,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The following statement contains a magic number: p.Length < 5
Magic Number,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The following statement contains a magic number: args = p.Substring(6);
Magic Number,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The following statement contains a magic number: switch (p)                  {                      case "endif":                          if (skip > 0)                              skip--;                          break;                      case "schema":                          if (this.rbSchema2003.Checked)                              sb.Append(_Schema2003);                          else if (this.rbSchema2005.Checked)                              sb.Append(_Schema2005);                          break;                      case "reportname":                          sb.Append(tbReportName.Text.Replace('\''' '_'));                          break;                      case "reportnameasis":                          sb.Append(tbReportName.Text);                          break;                      case "description":                          sb.Append(tbReportDescription.Text);                          break;                      case "author":                          sb.Append(tbReportAuthor.Text);                          break;                      case "connectionproperties":                          if (this.cbConnectionTypes.Text == SHARED_CONNECTION)                          {                              string file = this.tbConnection.Text;                              if (!UseFullSharedDSName)                                  file = Path.GetFileNameWithoutExtension(file);      // when we save report we use qualified name                              sb.AppendFormat("<DataSourceReference>{0}</DataSourceReference>"' file);                          }                          else                              sb.AppendFormat("<ConnectionProperties><DataProvider>{0}</DataProvider><ConnectString>{1}</ConnectString></ConnectionProperties>"'                                  GetDataProvider()' GetDataConnection());                          break;                      case "dataprovider":                          sb.Append(GetDataProvider());                          break;                      case "connectstring":                          sb.Append(tbConnection.Text);                          break;                      case "columncount":                          sb.Append(_ColumnList.Count);                          break;                      case "orientation":                          if (this.cbOrientation.SelectedIndex == 0)                          {	// Portrait is first in the list                              sb.Append("<PageHeight>11in</PageHeight><PageWidth>8.5in</PageWidth>");                          }                          else                          {                              sb.Append("<PageHeight>8.5in</PageHeight><PageWidth>11in</PageWidth>");                          }                          break;                      case "groupbycolumn":                          sb.Append(gbcolumn);                          break;                      case "reportparameters":                          DoReportSyntaxParameters(cinfo' sb);                          break;                      case "queryparameters":                          DoReportSyntaxQParameters(cinfo' sb' tbSQL.Text);                          break;                      case "sqltext":                          sb.Append(tbSQL.Text.Replace("<"' "&lt;"));                          break;                      case "sqlfields":                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              string type = sq.DataType.FullName;                              if (this.rbSchemaNo.Checked)                                  sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><TypeName>{2}</TypeName></Field>"' name' sq.Name' type);                              else                                  sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><rd:TypeName>{2}</rd:TypeName></Field>"' name' sq.Name' type);                          }                          break;                      case "listheaders":                          left = .0m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = sq.Name;                              width = name.Length / 8m;                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"  		<Textbox><Top>.3in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.2in</Height><Value>{2}</Value>  			<Style><FontWeight>Bold</FontWeight><BorderStyle><Bottom>Solid</Bottom></BorderStyle>  				<BorderWidth><Bottom>3pt</Bottom></BorderWidth></Style>  		</Textbox>"'                                  left'                                  width'                                  name);                              left += width;                          }                          break;                      case "listvalues":                          left = .0m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              DoAlignAndCanGrow(sq.DataType' out canGrow' out align);                              width = name.Length / 8m;                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"  		<Textbox Name='{2}'><Top>.1in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.25in</Height><Value>=Fields!{2}.Value</Value><CanGrow>{3}</CanGrow><Style>{4}</Style></Textbox>"'                                  left' width' name' canGrow' align);                              left += width;                          }                          bodyHeight = .4m;                          break;                      case "listwidth":		// in template list width must follow something that sets left                          sb.AppendFormat(cinfo' "{0}in"' left);                          break;                      case "tableheaders":                          // the group by column is always the first one in the table                          if (gbcolumn != null)                          {                              bodyHeight += 12m;                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems>  							</TableCell>"'                                  this.cbColumnList.Text);                          }                          bodyHeight += 12m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = sq.Name;                              if (name == this.cbColumnList.Text)                                  continue;                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems>  							</TableCell>"'                                  name);                          }                          break;                      case "tablecolumns":                          if (gbcolumn != null)                          {                              bodyHeight += 12m;                              width = gbcolumn.Length / 8m;		// TODO should really use data value                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"<TableColumn><Width>{0}in</Width></TableColumn>"' width);                          }                          bodyHeight += 12m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              width = name.Length / 8m;		// TODO should really use data value                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"<TableColumn><Width>{0}in</Width></TableColumn>"' width);                          }                          break;                      case "tablevalues":                          bodyHeight += 12m;                          if (gbcolumn != null)                          {                              sb.Append(@"<TableCell>  								<ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>None</Default><Left>Solid</Left></BorderStyle></Style></Textbox></ReportItems>  							</TableCell>");                          }                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              DoAlignAndCanGrow(sq.DataType' out canGrow' out align);                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{0}'><Value>=Fields!{0}.Value</Value><CanGrow>{1}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{2}</Style></Textbox></ReportItems>  							</TableCell>"'                                  name' canGrow' align);                          }                          break;                      case "gtablefooters":                      case "tablefooters":                          bodyHeight += 12m;                          canGrow = "false";                          align = "";                          string nameprefix = p == "gtablefooters" ? "gf" : "tf";                          if (gbcolumn != null)	// handle group by column first                          {                              int i = clbSubtotal.FindStringExact(this.cbColumnList.Text);                              SqlColumn sq = i < 0 ? null : (SqlColumn)clbSubtotal.Items[i];                              if (i >= 0 && clbSubtotal.GetItemChecked(i))                              {                                  string funct = DesignerUtility.IsNumeric(sq.DataType) ? "Sum" : "Count";                                    DoAlignAndCanGrow(((object)0).GetType()' out canGrow' out align);                                  sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems>  							</TableCell>"'                                      gbcolumn' funct' canGrow' align' nameprefix);                              }                              else                              {                                  sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>");                              }                          }                          for (int i = 0; i < this.clbSubtotal.Items.Count; i++)                          {                              SqlColumn sq = (SqlColumn)clbSubtotal.Items[i];                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              if (clbSubtotal.GetItemChecked(i))                              {                                  string funct = DesignerUtility.IsNumeric(sq.DataType) ? "Sum" : "Count";                                    DoAlignAndCanGrow(((object)0).GetType()' out canGrow' out align);                                  sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems>  							</TableCell>"'                                      name' funct' canGrow' align' nameprefix);                              }                              else                              {                                  sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>");                              }                          }                          break;                      case "bodyheight":	// Note: this must follow the table definition                          sb.AppendFormat(cinfo' "{0}pt"' bodyHeight);                          break;                      default:                          sb.Append(p);                          break;                  }
Magic Number,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The following statement contains a magic number: switch (p)                  {                      case "endif":                          if (skip > 0)                              skip--;                          break;                      case "schema":                          if (this.rbSchema2003.Checked)                              sb.Append(_Schema2003);                          else if (this.rbSchema2005.Checked)                              sb.Append(_Schema2005);                          break;                      case "reportname":                          sb.Append(tbReportName.Text.Replace('\''' '_'));                          break;                      case "reportnameasis":                          sb.Append(tbReportName.Text);                          break;                      case "description":                          sb.Append(tbReportDescription.Text);                          break;                      case "author":                          sb.Append(tbReportAuthor.Text);                          break;                      case "connectionproperties":                          if (this.cbConnectionTypes.Text == SHARED_CONNECTION)                          {                              string file = this.tbConnection.Text;                              if (!UseFullSharedDSName)                                  file = Path.GetFileNameWithoutExtension(file);      // when we save report we use qualified name                              sb.AppendFormat("<DataSourceReference>{0}</DataSourceReference>"' file);                          }                          else                              sb.AppendFormat("<ConnectionProperties><DataProvider>{0}</DataProvider><ConnectString>{1}</ConnectString></ConnectionProperties>"'                                  GetDataProvider()' GetDataConnection());                          break;                      case "dataprovider":                          sb.Append(GetDataProvider());                          break;                      case "connectstring":                          sb.Append(tbConnection.Text);                          break;                      case "columncount":                          sb.Append(_ColumnList.Count);                          break;                      case "orientation":                          if (this.cbOrientation.SelectedIndex == 0)                          {	// Portrait is first in the list                              sb.Append("<PageHeight>11in</PageHeight><PageWidth>8.5in</PageWidth>");                          }                          else                          {                              sb.Append("<PageHeight>8.5in</PageHeight><PageWidth>11in</PageWidth>");                          }                          break;                      case "groupbycolumn":                          sb.Append(gbcolumn);                          break;                      case "reportparameters":                          DoReportSyntaxParameters(cinfo' sb);                          break;                      case "queryparameters":                          DoReportSyntaxQParameters(cinfo' sb' tbSQL.Text);                          break;                      case "sqltext":                          sb.Append(tbSQL.Text.Replace("<"' "&lt;"));                          break;                      case "sqlfields":                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              string type = sq.DataType.FullName;                              if (this.rbSchemaNo.Checked)                                  sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><TypeName>{2}</TypeName></Field>"' name' sq.Name' type);                              else                                  sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><rd:TypeName>{2}</rd:TypeName></Field>"' name' sq.Name' type);                          }                          break;                      case "listheaders":                          left = .0m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = sq.Name;                              width = name.Length / 8m;                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"  		<Textbox><Top>.3in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.2in</Height><Value>{2}</Value>  			<Style><FontWeight>Bold</FontWeight><BorderStyle><Bottom>Solid</Bottom></BorderStyle>  				<BorderWidth><Bottom>3pt</Bottom></BorderWidth></Style>  		</Textbox>"'                                  left'                                  width'                                  name);                              left += width;                          }                          break;                      case "listvalues":                          left = .0m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              DoAlignAndCanGrow(sq.DataType' out canGrow' out align);                              width = name.Length / 8m;                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"  		<Textbox Name='{2}'><Top>.1in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.25in</Height><Value>=Fields!{2}.Value</Value><CanGrow>{3}</CanGrow><Style>{4}</Style></Textbox>"'                                  left' width' name' canGrow' align);                              left += width;                          }                          bodyHeight = .4m;                          break;                      case "listwidth":		// in template list width must follow something that sets left                          sb.AppendFormat(cinfo' "{0}in"' left);                          break;                      case "tableheaders":                          // the group by column is always the first one in the table                          if (gbcolumn != null)                          {                              bodyHeight += 12m;                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems>  							</TableCell>"'                                  this.cbColumnList.Text);                          }                          bodyHeight += 12m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = sq.Name;                              if (name == this.cbColumnList.Text)                                  continue;                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems>  							</TableCell>"'                                  name);                          }                          break;                      case "tablecolumns":                          if (gbcolumn != null)                          {                              bodyHeight += 12m;                              width = gbcolumn.Length / 8m;		// TODO should really use data value                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"<TableColumn><Width>{0}in</Width></TableColumn>"' width);                          }                          bodyHeight += 12m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              width = name.Length / 8m;		// TODO should really use data value                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"<TableColumn><Width>{0}in</Width></TableColumn>"' width);                          }                          break;                      case "tablevalues":                          bodyHeight += 12m;                          if (gbcolumn != null)                          {                              sb.Append(@"<TableCell>  								<ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>None</Default><Left>Solid</Left></BorderStyle></Style></Textbox></ReportItems>  							</TableCell>");                          }                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              DoAlignAndCanGrow(sq.DataType' out canGrow' out align);                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{0}'><Value>=Fields!{0}.Value</Value><CanGrow>{1}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{2}</Style></Textbox></ReportItems>  							</TableCell>"'                                  name' canGrow' align);                          }                          break;                      case "gtablefooters":                      case "tablefooters":                          bodyHeight += 12m;                          canGrow = "false";                          align = "";                          string nameprefix = p == "gtablefooters" ? "gf" : "tf";                          if (gbcolumn != null)	// handle group by column first                          {                              int i = clbSubtotal.FindStringExact(this.cbColumnList.Text);                              SqlColumn sq = i < 0 ? null : (SqlColumn)clbSubtotal.Items[i];                              if (i >= 0 && clbSubtotal.GetItemChecked(i))                              {                                  string funct = DesignerUtility.IsNumeric(sq.DataType) ? "Sum" : "Count";                                    DoAlignAndCanGrow(((object)0).GetType()' out canGrow' out align);                                  sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems>  							</TableCell>"'                                      gbcolumn' funct' canGrow' align' nameprefix);                              }                              else                              {                                  sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>");                              }                          }                          for (int i = 0; i < this.clbSubtotal.Items.Count; i++)                          {                              SqlColumn sq = (SqlColumn)clbSubtotal.Items[i];                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              if (clbSubtotal.GetItemChecked(i))                              {                                  string funct = DesignerUtility.IsNumeric(sq.DataType) ? "Sum" : "Count";                                    DoAlignAndCanGrow(((object)0).GetType()' out canGrow' out align);                                  sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems>  							</TableCell>"'                                      name' funct' canGrow' align' nameprefix);                              }                              else                              {                                  sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>");                              }                          }                          break;                      case "bodyheight":	// Note: this must follow the table definition                          sb.AppendFormat(cinfo' "{0}pt"' bodyHeight);                          break;                      default:                          sb.Append(p);                          break;                  }
Magic Number,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The following statement contains a magic number: switch (p)                  {                      case "endif":                          if (skip > 0)                              skip--;                          break;                      case "schema":                          if (this.rbSchema2003.Checked)                              sb.Append(_Schema2003);                          else if (this.rbSchema2005.Checked)                              sb.Append(_Schema2005);                          break;                      case "reportname":                          sb.Append(tbReportName.Text.Replace('\''' '_'));                          break;                      case "reportnameasis":                          sb.Append(tbReportName.Text);                          break;                      case "description":                          sb.Append(tbReportDescription.Text);                          break;                      case "author":                          sb.Append(tbReportAuthor.Text);                          break;                      case "connectionproperties":                          if (this.cbConnectionTypes.Text == SHARED_CONNECTION)                          {                              string file = this.tbConnection.Text;                              if (!UseFullSharedDSName)                                  file = Path.GetFileNameWithoutExtension(file);      // when we save report we use qualified name                              sb.AppendFormat("<DataSourceReference>{0}</DataSourceReference>"' file);                          }                          else                              sb.AppendFormat("<ConnectionProperties><DataProvider>{0}</DataProvider><ConnectString>{1}</ConnectString></ConnectionProperties>"'                                  GetDataProvider()' GetDataConnection());                          break;                      case "dataprovider":                          sb.Append(GetDataProvider());                          break;                      case "connectstring":                          sb.Append(tbConnection.Text);                          break;                      case "columncount":                          sb.Append(_ColumnList.Count);                          break;                      case "orientation":                          if (this.cbOrientation.SelectedIndex == 0)                          {	// Portrait is first in the list                              sb.Append("<PageHeight>11in</PageHeight><PageWidth>8.5in</PageWidth>");                          }                          else                          {                              sb.Append("<PageHeight>8.5in</PageHeight><PageWidth>11in</PageWidth>");                          }                          break;                      case "groupbycolumn":                          sb.Append(gbcolumn);                          break;                      case "reportparameters":                          DoReportSyntaxParameters(cinfo' sb);                          break;                      case "queryparameters":                          DoReportSyntaxQParameters(cinfo' sb' tbSQL.Text);                          break;                      case "sqltext":                          sb.Append(tbSQL.Text.Replace("<"' "&lt;"));                          break;                      case "sqlfields":                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              string type = sq.DataType.FullName;                              if (this.rbSchemaNo.Checked)                                  sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><TypeName>{2}</TypeName></Field>"' name' sq.Name' type);                              else                                  sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><rd:TypeName>{2}</rd:TypeName></Field>"' name' sq.Name' type);                          }                          break;                      case "listheaders":                          left = .0m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = sq.Name;                              width = name.Length / 8m;                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"  		<Textbox><Top>.3in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.2in</Height><Value>{2}</Value>  			<Style><FontWeight>Bold</FontWeight><BorderStyle><Bottom>Solid</Bottom></BorderStyle>  				<BorderWidth><Bottom>3pt</Bottom></BorderWidth></Style>  		</Textbox>"'                                  left'                                  width'                                  name);                              left += width;                          }                          break;                      case "listvalues":                          left = .0m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              DoAlignAndCanGrow(sq.DataType' out canGrow' out align);                              width = name.Length / 8m;                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"  		<Textbox Name='{2}'><Top>.1in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.25in</Height><Value>=Fields!{2}.Value</Value><CanGrow>{3}</CanGrow><Style>{4}</Style></Textbox>"'                                  left' width' name' canGrow' align);                              left += width;                          }                          bodyHeight = .4m;                          break;                      case "listwidth":		// in template list width must follow something that sets left                          sb.AppendFormat(cinfo' "{0}in"' left);                          break;                      case "tableheaders":                          // the group by column is always the first one in the table                          if (gbcolumn != null)                          {                              bodyHeight += 12m;                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems>  							</TableCell>"'                                  this.cbColumnList.Text);                          }                          bodyHeight += 12m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = sq.Name;                              if (name == this.cbColumnList.Text)                                  continue;                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems>  							</TableCell>"'                                  name);                          }                          break;                      case "tablecolumns":                          if (gbcolumn != null)                          {                              bodyHeight += 12m;                              width = gbcolumn.Length / 8m;		// TODO should really use data value                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"<TableColumn><Width>{0}in</Width></TableColumn>"' width);                          }                          bodyHeight += 12m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              width = name.Length / 8m;		// TODO should really use data value                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"<TableColumn><Width>{0}in</Width></TableColumn>"' width);                          }                          break;                      case "tablevalues":                          bodyHeight += 12m;                          if (gbcolumn != null)                          {                              sb.Append(@"<TableCell>  								<ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>None</Default><Left>Solid</Left></BorderStyle></Style></Textbox></ReportItems>  							</TableCell>");                          }                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              DoAlignAndCanGrow(sq.DataType' out canGrow' out align);                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{0}'><Value>=Fields!{0}.Value</Value><CanGrow>{1}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{2}</Style></Textbox></ReportItems>  							</TableCell>"'                                  name' canGrow' align);                          }                          break;                      case "gtablefooters":                      case "tablefooters":                          bodyHeight += 12m;                          canGrow = "false";                          align = "";                          string nameprefix = p == "gtablefooters" ? "gf" : "tf";                          if (gbcolumn != null)	// handle group by column first                          {                              int i = clbSubtotal.FindStringExact(this.cbColumnList.Text);                              SqlColumn sq = i < 0 ? null : (SqlColumn)clbSubtotal.Items[i];                              if (i >= 0 && clbSubtotal.GetItemChecked(i))                              {                                  string funct = DesignerUtility.IsNumeric(sq.DataType) ? "Sum" : "Count";                                    DoAlignAndCanGrow(((object)0).GetType()' out canGrow' out align);                                  sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems>  							</TableCell>"'                                      gbcolumn' funct' canGrow' align' nameprefix);                              }                              else                              {                                  sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>");                              }                          }                          for (int i = 0; i < this.clbSubtotal.Items.Count; i++)                          {                              SqlColumn sq = (SqlColumn)clbSubtotal.Items[i];                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              if (clbSubtotal.GetItemChecked(i))                              {                                  string funct = DesignerUtility.IsNumeric(sq.DataType) ? "Sum" : "Count";                                    DoAlignAndCanGrow(((object)0).GetType()' out canGrow' out align);                                  sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems>  							</TableCell>"'                                      name' funct' canGrow' align' nameprefix);                              }                              else                              {                                  sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>");                              }                          }                          break;                      case "bodyheight":	// Note: this must follow the table definition                          sb.AppendFormat(cinfo' "{0}pt"' bodyHeight);                          break;                      default:                          sb.Append(p);                          break;                  }
Magic Number,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The following statement contains a magic number: switch (p)                  {                      case "endif":                          if (skip > 0)                              skip--;                          break;                      case "schema":                          if (this.rbSchema2003.Checked)                              sb.Append(_Schema2003);                          else if (this.rbSchema2005.Checked)                              sb.Append(_Schema2005);                          break;                      case "reportname":                          sb.Append(tbReportName.Text.Replace('\''' '_'));                          break;                      case "reportnameasis":                          sb.Append(tbReportName.Text);                          break;                      case "description":                          sb.Append(tbReportDescription.Text);                          break;                      case "author":                          sb.Append(tbReportAuthor.Text);                          break;                      case "connectionproperties":                          if (this.cbConnectionTypes.Text == SHARED_CONNECTION)                          {                              string file = this.tbConnection.Text;                              if (!UseFullSharedDSName)                                  file = Path.GetFileNameWithoutExtension(file);      // when we save report we use qualified name                              sb.AppendFormat("<DataSourceReference>{0}</DataSourceReference>"' file);                          }                          else                              sb.AppendFormat("<ConnectionProperties><DataProvider>{0}</DataProvider><ConnectString>{1}</ConnectString></ConnectionProperties>"'                                  GetDataProvider()' GetDataConnection());                          break;                      case "dataprovider":                          sb.Append(GetDataProvider());                          break;                      case "connectstring":                          sb.Append(tbConnection.Text);                          break;                      case "columncount":                          sb.Append(_ColumnList.Count);                          break;                      case "orientation":                          if (this.cbOrientation.SelectedIndex == 0)                          {	// Portrait is first in the list                              sb.Append("<PageHeight>11in</PageHeight><PageWidth>8.5in</PageWidth>");                          }                          else                          {                              sb.Append("<PageHeight>8.5in</PageHeight><PageWidth>11in</PageWidth>");                          }                          break;                      case "groupbycolumn":                          sb.Append(gbcolumn);                          break;                      case "reportparameters":                          DoReportSyntaxParameters(cinfo' sb);                          break;                      case "queryparameters":                          DoReportSyntaxQParameters(cinfo' sb' tbSQL.Text);                          break;                      case "sqltext":                          sb.Append(tbSQL.Text.Replace("<"' "&lt;"));                          break;                      case "sqlfields":                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              string type = sq.DataType.FullName;                              if (this.rbSchemaNo.Checked)                                  sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><TypeName>{2}</TypeName></Field>"' name' sq.Name' type);                              else                                  sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><rd:TypeName>{2}</rd:TypeName></Field>"' name' sq.Name' type);                          }                          break;                      case "listheaders":                          left = .0m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = sq.Name;                              width = name.Length / 8m;                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"  		<Textbox><Top>.3in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.2in</Height><Value>{2}</Value>  			<Style><FontWeight>Bold</FontWeight><BorderStyle><Bottom>Solid</Bottom></BorderStyle>  				<BorderWidth><Bottom>3pt</Bottom></BorderWidth></Style>  		</Textbox>"'                                  left'                                  width'                                  name);                              left += width;                          }                          break;                      case "listvalues":                          left = .0m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              DoAlignAndCanGrow(sq.DataType' out canGrow' out align);                              width = name.Length / 8m;                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"  		<Textbox Name='{2}'><Top>.1in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.25in</Height><Value>=Fields!{2}.Value</Value><CanGrow>{3}</CanGrow><Style>{4}</Style></Textbox>"'                                  left' width' name' canGrow' align);                              left += width;                          }                          bodyHeight = .4m;                          break;                      case "listwidth":		// in template list width must follow something that sets left                          sb.AppendFormat(cinfo' "{0}in"' left);                          break;                      case "tableheaders":                          // the group by column is always the first one in the table                          if (gbcolumn != null)                          {                              bodyHeight += 12m;                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems>  							</TableCell>"'                                  this.cbColumnList.Text);                          }                          bodyHeight += 12m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = sq.Name;                              if (name == this.cbColumnList.Text)                                  continue;                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems>  							</TableCell>"'                                  name);                          }                          break;                      case "tablecolumns":                          if (gbcolumn != null)                          {                              bodyHeight += 12m;                              width = gbcolumn.Length / 8m;		// TODO should really use data value                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"<TableColumn><Width>{0}in</Width></TableColumn>"' width);                          }                          bodyHeight += 12m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              width = name.Length / 8m;		// TODO should really use data value                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"<TableColumn><Width>{0}in</Width></TableColumn>"' width);                          }                          break;                      case "tablevalues":                          bodyHeight += 12m;                          if (gbcolumn != null)                          {                              sb.Append(@"<TableCell>  								<ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>None</Default><Left>Solid</Left></BorderStyle></Style></Textbox></ReportItems>  							</TableCell>");                          }                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              DoAlignAndCanGrow(sq.DataType' out canGrow' out align);                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{0}'><Value>=Fields!{0}.Value</Value><CanGrow>{1}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{2}</Style></Textbox></ReportItems>  							</TableCell>"'                                  name' canGrow' align);                          }                          break;                      case "gtablefooters":                      case "tablefooters":                          bodyHeight += 12m;                          canGrow = "false";                          align = "";                          string nameprefix = p == "gtablefooters" ? "gf" : "tf";                          if (gbcolumn != null)	// handle group by column first                          {                              int i = clbSubtotal.FindStringExact(this.cbColumnList.Text);                              SqlColumn sq = i < 0 ? null : (SqlColumn)clbSubtotal.Items[i];                              if (i >= 0 && clbSubtotal.GetItemChecked(i))                              {                                  string funct = DesignerUtility.IsNumeric(sq.DataType) ? "Sum" : "Count";                                    DoAlignAndCanGrow(((object)0).GetType()' out canGrow' out align);                                  sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems>  							</TableCell>"'                                      gbcolumn' funct' canGrow' align' nameprefix);                              }                              else                              {                                  sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>");                              }                          }                          for (int i = 0; i < this.clbSubtotal.Items.Count; i++)                          {                              SqlColumn sq = (SqlColumn)clbSubtotal.Items[i];                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              if (clbSubtotal.GetItemChecked(i))                              {                                  string funct = DesignerUtility.IsNumeric(sq.DataType) ? "Sum" : "Count";                                    DoAlignAndCanGrow(((object)0).GetType()' out canGrow' out align);                                  sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems>  							</TableCell>"'                                      name' funct' canGrow' align' nameprefix);                              }                              else                              {                                  sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>");                              }                          }                          break;                      case "bodyheight":	// Note: this must follow the table definition                          sb.AppendFormat(cinfo' "{0}pt"' bodyHeight);                          break;                      default:                          sb.Append(p);                          break;                  }
Magic Number,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The following statement contains a magic number: switch (p)                  {                      case "endif":                          if (skip > 0)                              skip--;                          break;                      case "schema":                          if (this.rbSchema2003.Checked)                              sb.Append(_Schema2003);                          else if (this.rbSchema2005.Checked)                              sb.Append(_Schema2005);                          break;                      case "reportname":                          sb.Append(tbReportName.Text.Replace('\''' '_'));                          break;                      case "reportnameasis":                          sb.Append(tbReportName.Text);                          break;                      case "description":                          sb.Append(tbReportDescription.Text);                          break;                      case "author":                          sb.Append(tbReportAuthor.Text);                          break;                      case "connectionproperties":                          if (this.cbConnectionTypes.Text == SHARED_CONNECTION)                          {                              string file = this.tbConnection.Text;                              if (!UseFullSharedDSName)                                  file = Path.GetFileNameWithoutExtension(file);      // when we save report we use qualified name                              sb.AppendFormat("<DataSourceReference>{0}</DataSourceReference>"' file);                          }                          else                              sb.AppendFormat("<ConnectionProperties><DataProvider>{0}</DataProvider><ConnectString>{1}</ConnectString></ConnectionProperties>"'                                  GetDataProvider()' GetDataConnection());                          break;                      case "dataprovider":                          sb.Append(GetDataProvider());                          break;                      case "connectstring":                          sb.Append(tbConnection.Text);                          break;                      case "columncount":                          sb.Append(_ColumnList.Count);                          break;                      case "orientation":                          if (this.cbOrientation.SelectedIndex == 0)                          {	// Portrait is first in the list                              sb.Append("<PageHeight>11in</PageHeight><PageWidth>8.5in</PageWidth>");                          }                          else                          {                              sb.Append("<PageHeight>8.5in</PageHeight><PageWidth>11in</PageWidth>");                          }                          break;                      case "groupbycolumn":                          sb.Append(gbcolumn);                          break;                      case "reportparameters":                          DoReportSyntaxParameters(cinfo' sb);                          break;                      case "queryparameters":                          DoReportSyntaxQParameters(cinfo' sb' tbSQL.Text);                          break;                      case "sqltext":                          sb.Append(tbSQL.Text.Replace("<"' "&lt;"));                          break;                      case "sqlfields":                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              string type = sq.DataType.FullName;                              if (this.rbSchemaNo.Checked)                                  sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><TypeName>{2}</TypeName></Field>"' name' sq.Name' type);                              else                                  sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><rd:TypeName>{2}</rd:TypeName></Field>"' name' sq.Name' type);                          }                          break;                      case "listheaders":                          left = .0m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = sq.Name;                              width = name.Length / 8m;                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"  		<Textbox><Top>.3in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.2in</Height><Value>{2}</Value>  			<Style><FontWeight>Bold</FontWeight><BorderStyle><Bottom>Solid</Bottom></BorderStyle>  				<BorderWidth><Bottom>3pt</Bottom></BorderWidth></Style>  		</Textbox>"'                                  left'                                  width'                                  name);                              left += width;                          }                          break;                      case "listvalues":                          left = .0m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              DoAlignAndCanGrow(sq.DataType' out canGrow' out align);                              width = name.Length / 8m;                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"  		<Textbox Name='{2}'><Top>.1in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.25in</Height><Value>=Fields!{2}.Value</Value><CanGrow>{3}</CanGrow><Style>{4}</Style></Textbox>"'                                  left' width' name' canGrow' align);                              left += width;                          }                          bodyHeight = .4m;                          break;                      case "listwidth":		// in template list width must follow something that sets left                          sb.AppendFormat(cinfo' "{0}in"' left);                          break;                      case "tableheaders":                          // the group by column is always the first one in the table                          if (gbcolumn != null)                          {                              bodyHeight += 12m;                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems>  							</TableCell>"'                                  this.cbColumnList.Text);                          }                          bodyHeight += 12m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = sq.Name;                              if (name == this.cbColumnList.Text)                                  continue;                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems>  							</TableCell>"'                                  name);                          }                          break;                      case "tablecolumns":                          if (gbcolumn != null)                          {                              bodyHeight += 12m;                              width = gbcolumn.Length / 8m;		// TODO should really use data value                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"<TableColumn><Width>{0}in</Width></TableColumn>"' width);                          }                          bodyHeight += 12m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              width = name.Length / 8m;		// TODO should really use data value                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"<TableColumn><Width>{0}in</Width></TableColumn>"' width);                          }                          break;                      case "tablevalues":                          bodyHeight += 12m;                          if (gbcolumn != null)                          {                              sb.Append(@"<TableCell>  								<ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>None</Default><Left>Solid</Left></BorderStyle></Style></Textbox></ReportItems>  							</TableCell>");                          }                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              DoAlignAndCanGrow(sq.DataType' out canGrow' out align);                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{0}'><Value>=Fields!{0}.Value</Value><CanGrow>{1}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{2}</Style></Textbox></ReportItems>  							</TableCell>"'                                  name' canGrow' align);                          }                          break;                      case "gtablefooters":                      case "tablefooters":                          bodyHeight += 12m;                          canGrow = "false";                          align = "";                          string nameprefix = p == "gtablefooters" ? "gf" : "tf";                          if (gbcolumn != null)	// handle group by column first                          {                              int i = clbSubtotal.FindStringExact(this.cbColumnList.Text);                              SqlColumn sq = i < 0 ? null : (SqlColumn)clbSubtotal.Items[i];                              if (i >= 0 && clbSubtotal.GetItemChecked(i))                              {                                  string funct = DesignerUtility.IsNumeric(sq.DataType) ? "Sum" : "Count";                                    DoAlignAndCanGrow(((object)0).GetType()' out canGrow' out align);                                  sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems>  							</TableCell>"'                                      gbcolumn' funct' canGrow' align' nameprefix);                              }                              else                              {                                  sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>");                              }                          }                          for (int i = 0; i < this.clbSubtotal.Items.Count; i++)                          {                              SqlColumn sq = (SqlColumn)clbSubtotal.Items[i];                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              if (clbSubtotal.GetItemChecked(i))                              {                                  string funct = DesignerUtility.IsNumeric(sq.DataType) ? "Sum" : "Count";                                    DoAlignAndCanGrow(((object)0).GetType()' out canGrow' out align);                                  sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems>  							</TableCell>"'                                      name' funct' canGrow' align' nameprefix);                              }                              else                              {                                  sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>");                              }                          }                          break;                      case "bodyheight":	// Note: this must follow the table definition                          sb.AppendFormat(cinfo' "{0}pt"' bodyHeight);                          break;                      default:                          sb.Append(p);                          break;                  }
Magic Number,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The following statement contains a magic number: switch (p)                  {                      case "endif":                          if (skip > 0)                              skip--;                          break;                      case "schema":                          if (this.rbSchema2003.Checked)                              sb.Append(_Schema2003);                          else if (this.rbSchema2005.Checked)                              sb.Append(_Schema2005);                          break;                      case "reportname":                          sb.Append(tbReportName.Text.Replace('\''' '_'));                          break;                      case "reportnameasis":                          sb.Append(tbReportName.Text);                          break;                      case "description":                          sb.Append(tbReportDescription.Text);                          break;                      case "author":                          sb.Append(tbReportAuthor.Text);                          break;                      case "connectionproperties":                          if (this.cbConnectionTypes.Text == SHARED_CONNECTION)                          {                              string file = this.tbConnection.Text;                              if (!UseFullSharedDSName)                                  file = Path.GetFileNameWithoutExtension(file);      // when we save report we use qualified name                              sb.AppendFormat("<DataSourceReference>{0}</DataSourceReference>"' file);                          }                          else                              sb.AppendFormat("<ConnectionProperties><DataProvider>{0}</DataProvider><ConnectString>{1}</ConnectString></ConnectionProperties>"'                                  GetDataProvider()' GetDataConnection());                          break;                      case "dataprovider":                          sb.Append(GetDataProvider());                          break;                      case "connectstring":                          sb.Append(tbConnection.Text);                          break;                      case "columncount":                          sb.Append(_ColumnList.Count);                          break;                      case "orientation":                          if (this.cbOrientation.SelectedIndex == 0)                          {	// Portrait is first in the list                              sb.Append("<PageHeight>11in</PageHeight><PageWidth>8.5in</PageWidth>");                          }                          else                          {                              sb.Append("<PageHeight>8.5in</PageHeight><PageWidth>11in</PageWidth>");                          }                          break;                      case "groupbycolumn":                          sb.Append(gbcolumn);                          break;                      case "reportparameters":                          DoReportSyntaxParameters(cinfo' sb);                          break;                      case "queryparameters":                          DoReportSyntaxQParameters(cinfo' sb' tbSQL.Text);                          break;                      case "sqltext":                          sb.Append(tbSQL.Text.Replace("<"' "&lt;"));                          break;                      case "sqlfields":                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              string type = sq.DataType.FullName;                              if (this.rbSchemaNo.Checked)                                  sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><TypeName>{2}</TypeName></Field>"' name' sq.Name' type);                              else                                  sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><rd:TypeName>{2}</rd:TypeName></Field>"' name' sq.Name' type);                          }                          break;                      case "listheaders":                          left = .0m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = sq.Name;                              width = name.Length / 8m;                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"  		<Textbox><Top>.3in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.2in</Height><Value>{2}</Value>  			<Style><FontWeight>Bold</FontWeight><BorderStyle><Bottom>Solid</Bottom></BorderStyle>  				<BorderWidth><Bottom>3pt</Bottom></BorderWidth></Style>  		</Textbox>"'                                  left'                                  width'                                  name);                              left += width;                          }                          break;                      case "listvalues":                          left = .0m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              DoAlignAndCanGrow(sq.DataType' out canGrow' out align);                              width = name.Length / 8m;                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"  		<Textbox Name='{2}'><Top>.1in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.25in</Height><Value>=Fields!{2}.Value</Value><CanGrow>{3}</CanGrow><Style>{4}</Style></Textbox>"'                                  left' width' name' canGrow' align);                              left += width;                          }                          bodyHeight = .4m;                          break;                      case "listwidth":		// in template list width must follow something that sets left                          sb.AppendFormat(cinfo' "{0}in"' left);                          break;                      case "tableheaders":                          // the group by column is always the first one in the table                          if (gbcolumn != null)                          {                              bodyHeight += 12m;                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems>  							</TableCell>"'                                  this.cbColumnList.Text);                          }                          bodyHeight += 12m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = sq.Name;                              if (name == this.cbColumnList.Text)                                  continue;                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems>  							</TableCell>"'                                  name);                          }                          break;                      case "tablecolumns":                          if (gbcolumn != null)                          {                              bodyHeight += 12m;                              width = gbcolumn.Length / 8m;		// TODO should really use data value                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"<TableColumn><Width>{0}in</Width></TableColumn>"' width);                          }                          bodyHeight += 12m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              width = name.Length / 8m;		// TODO should really use data value                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"<TableColumn><Width>{0}in</Width></TableColumn>"' width);                          }                          break;                      case "tablevalues":                          bodyHeight += 12m;                          if (gbcolumn != null)                          {                              sb.Append(@"<TableCell>  								<ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>None</Default><Left>Solid</Left></BorderStyle></Style></Textbox></ReportItems>  							</TableCell>");                          }                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              DoAlignAndCanGrow(sq.DataType' out canGrow' out align);                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{0}'><Value>=Fields!{0}.Value</Value><CanGrow>{1}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{2}</Style></Textbox></ReportItems>  							</TableCell>"'                                  name' canGrow' align);                          }                          break;                      case "gtablefooters":                      case "tablefooters":                          bodyHeight += 12m;                          canGrow = "false";                          align = "";                          string nameprefix = p == "gtablefooters" ? "gf" : "tf";                          if (gbcolumn != null)	// handle group by column first                          {                              int i = clbSubtotal.FindStringExact(this.cbColumnList.Text);                              SqlColumn sq = i < 0 ? null : (SqlColumn)clbSubtotal.Items[i];                              if (i >= 0 && clbSubtotal.GetItemChecked(i))                              {                                  string funct = DesignerUtility.IsNumeric(sq.DataType) ? "Sum" : "Count";                                    DoAlignAndCanGrow(((object)0).GetType()' out canGrow' out align);                                  sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems>  							</TableCell>"'                                      gbcolumn' funct' canGrow' align' nameprefix);                              }                              else                              {                                  sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>");                              }                          }                          for (int i = 0; i < this.clbSubtotal.Items.Count; i++)                          {                              SqlColumn sq = (SqlColumn)clbSubtotal.Items[i];                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              if (clbSubtotal.GetItemChecked(i))                              {                                  string funct = DesignerUtility.IsNumeric(sq.DataType) ? "Sum" : "Count";                                    DoAlignAndCanGrow(((object)0).GetType()' out canGrow' out align);                                  sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems>  							</TableCell>"'                                      name' funct' canGrow' align' nameprefix);                              }                              else                              {                                  sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>");                              }                          }                          break;                      case "bodyheight":	// Note: this must follow the table definition                          sb.AppendFormat(cinfo' "{0}pt"' bodyHeight);                          break;                      default:                          sb.Append(p);                          break;                  }
Magic Number,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The following statement contains a magic number: switch (p)                  {                      case "endif":                          if (skip > 0)                              skip--;                          break;                      case "schema":                          if (this.rbSchema2003.Checked)                              sb.Append(_Schema2003);                          else if (this.rbSchema2005.Checked)                              sb.Append(_Schema2005);                          break;                      case "reportname":                          sb.Append(tbReportName.Text.Replace('\''' '_'));                          break;                      case "reportnameasis":                          sb.Append(tbReportName.Text);                          break;                      case "description":                          sb.Append(tbReportDescription.Text);                          break;                      case "author":                          sb.Append(tbReportAuthor.Text);                          break;                      case "connectionproperties":                          if (this.cbConnectionTypes.Text == SHARED_CONNECTION)                          {                              string file = this.tbConnection.Text;                              if (!UseFullSharedDSName)                                  file = Path.GetFileNameWithoutExtension(file);      // when we save report we use qualified name                              sb.AppendFormat("<DataSourceReference>{0}</DataSourceReference>"' file);                          }                          else                              sb.AppendFormat("<ConnectionProperties><DataProvider>{0}</DataProvider><ConnectString>{1}</ConnectString></ConnectionProperties>"'                                  GetDataProvider()' GetDataConnection());                          break;                      case "dataprovider":                          sb.Append(GetDataProvider());                          break;                      case "connectstring":                          sb.Append(tbConnection.Text);                          break;                      case "columncount":                          sb.Append(_ColumnList.Count);                          break;                      case "orientation":                          if (this.cbOrientation.SelectedIndex == 0)                          {	// Portrait is first in the list                              sb.Append("<PageHeight>11in</PageHeight><PageWidth>8.5in</PageWidth>");                          }                          else                          {                              sb.Append("<PageHeight>8.5in</PageHeight><PageWidth>11in</PageWidth>");                          }                          break;                      case "groupbycolumn":                          sb.Append(gbcolumn);                          break;                      case "reportparameters":                          DoReportSyntaxParameters(cinfo' sb);                          break;                      case "queryparameters":                          DoReportSyntaxQParameters(cinfo' sb' tbSQL.Text);                          break;                      case "sqltext":                          sb.Append(tbSQL.Text.Replace("<"' "&lt;"));                          break;                      case "sqlfields":                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              string type = sq.DataType.FullName;                              if (this.rbSchemaNo.Checked)                                  sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><TypeName>{2}</TypeName></Field>"' name' sq.Name' type);                              else                                  sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><rd:TypeName>{2}</rd:TypeName></Field>"' name' sq.Name' type);                          }                          break;                      case "listheaders":                          left = .0m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = sq.Name;                              width = name.Length / 8m;                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"  		<Textbox><Top>.3in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.2in</Height><Value>{2}</Value>  			<Style><FontWeight>Bold</FontWeight><BorderStyle><Bottom>Solid</Bottom></BorderStyle>  				<BorderWidth><Bottom>3pt</Bottom></BorderWidth></Style>  		</Textbox>"'                                  left'                                  width'                                  name);                              left += width;                          }                          break;                      case "listvalues":                          left = .0m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              DoAlignAndCanGrow(sq.DataType' out canGrow' out align);                              width = name.Length / 8m;                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"  		<Textbox Name='{2}'><Top>.1in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.25in</Height><Value>=Fields!{2}.Value</Value><CanGrow>{3}</CanGrow><Style>{4}</Style></Textbox>"'                                  left' width' name' canGrow' align);                              left += width;                          }                          bodyHeight = .4m;                          break;                      case "listwidth":		// in template list width must follow something that sets left                          sb.AppendFormat(cinfo' "{0}in"' left);                          break;                      case "tableheaders":                          // the group by column is always the first one in the table                          if (gbcolumn != null)                          {                              bodyHeight += 12m;                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems>  							</TableCell>"'                                  this.cbColumnList.Text);                          }                          bodyHeight += 12m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = sq.Name;                              if (name == this.cbColumnList.Text)                                  continue;                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems>  							</TableCell>"'                                  name);                          }                          break;                      case "tablecolumns":                          if (gbcolumn != null)                          {                              bodyHeight += 12m;                              width = gbcolumn.Length / 8m;		// TODO should really use data value                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"<TableColumn><Width>{0}in</Width></TableColumn>"' width);                          }                          bodyHeight += 12m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              width = name.Length / 8m;		// TODO should really use data value                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"<TableColumn><Width>{0}in</Width></TableColumn>"' width);                          }                          break;                      case "tablevalues":                          bodyHeight += 12m;                          if (gbcolumn != null)                          {                              sb.Append(@"<TableCell>  								<ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>None</Default><Left>Solid</Left></BorderStyle></Style></Textbox></ReportItems>  							</TableCell>");                          }                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              DoAlignAndCanGrow(sq.DataType' out canGrow' out align);                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{0}'><Value>=Fields!{0}.Value</Value><CanGrow>{1}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{2}</Style></Textbox></ReportItems>  							</TableCell>"'                                  name' canGrow' align);                          }                          break;                      case "gtablefooters":                      case "tablefooters":                          bodyHeight += 12m;                          canGrow = "false";                          align = "";                          string nameprefix = p == "gtablefooters" ? "gf" : "tf";                          if (gbcolumn != null)	// handle group by column first                          {                              int i = clbSubtotal.FindStringExact(this.cbColumnList.Text);                              SqlColumn sq = i < 0 ? null : (SqlColumn)clbSubtotal.Items[i];                              if (i >= 0 && clbSubtotal.GetItemChecked(i))                              {                                  string funct = DesignerUtility.IsNumeric(sq.DataType) ? "Sum" : "Count";                                    DoAlignAndCanGrow(((object)0).GetType()' out canGrow' out align);                                  sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems>  							</TableCell>"'                                      gbcolumn' funct' canGrow' align' nameprefix);                              }                              else                              {                                  sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>");                              }                          }                          for (int i = 0; i < this.clbSubtotal.Items.Count; i++)                          {                              SqlColumn sq = (SqlColumn)clbSubtotal.Items[i];                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              if (clbSubtotal.GetItemChecked(i))                              {                                  string funct = DesignerUtility.IsNumeric(sq.DataType) ? "Sum" : "Count";                                    DoAlignAndCanGrow(((object)0).GetType()' out canGrow' out align);                                  sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems>  							</TableCell>"'                                      name' funct' canGrow' align' nameprefix);                              }                              else                              {                                  sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>");                              }                          }                          break;                      case "bodyheight":	// Note: this must follow the table definition                          sb.AppendFormat(cinfo' "{0}pt"' bodyHeight);                          break;                      default:                          sb.Append(p);                          break;                  }
Magic Number,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The following statement contains a magic number: switch (p)                  {                      case "endif":                          if (skip > 0)                              skip--;                          break;                      case "schema":                          if (this.rbSchema2003.Checked)                              sb.Append(_Schema2003);                          else if (this.rbSchema2005.Checked)                              sb.Append(_Schema2005);                          break;                      case "reportname":                          sb.Append(tbReportName.Text.Replace('\''' '_'));                          break;                      case "reportnameasis":                          sb.Append(tbReportName.Text);                          break;                      case "description":                          sb.Append(tbReportDescription.Text);                          break;                      case "author":                          sb.Append(tbReportAuthor.Text);                          break;                      case "connectionproperties":                          if (this.cbConnectionTypes.Text == SHARED_CONNECTION)                          {                              string file = this.tbConnection.Text;                              if (!UseFullSharedDSName)                                  file = Path.GetFileNameWithoutExtension(file);      // when we save report we use qualified name                              sb.AppendFormat("<DataSourceReference>{0}</DataSourceReference>"' file);                          }                          else                              sb.AppendFormat("<ConnectionProperties><DataProvider>{0}</DataProvider><ConnectString>{1}</ConnectString></ConnectionProperties>"'                                  GetDataProvider()' GetDataConnection());                          break;                      case "dataprovider":                          sb.Append(GetDataProvider());                          break;                      case "connectstring":                          sb.Append(tbConnection.Text);                          break;                      case "columncount":                          sb.Append(_ColumnList.Count);                          break;                      case "orientation":                          if (this.cbOrientation.SelectedIndex == 0)                          {	// Portrait is first in the list                              sb.Append("<PageHeight>11in</PageHeight><PageWidth>8.5in</PageWidth>");                          }                          else                          {                              sb.Append("<PageHeight>8.5in</PageHeight><PageWidth>11in</PageWidth>");                          }                          break;                      case "groupbycolumn":                          sb.Append(gbcolumn);                          break;                      case "reportparameters":                          DoReportSyntaxParameters(cinfo' sb);                          break;                      case "queryparameters":                          DoReportSyntaxQParameters(cinfo' sb' tbSQL.Text);                          break;                      case "sqltext":                          sb.Append(tbSQL.Text.Replace("<"' "&lt;"));                          break;                      case "sqlfields":                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              string type = sq.DataType.FullName;                              if (this.rbSchemaNo.Checked)                                  sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><TypeName>{2}</TypeName></Field>"' name' sq.Name' type);                              else                                  sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><rd:TypeName>{2}</rd:TypeName></Field>"' name' sq.Name' type);                          }                          break;                      case "listheaders":                          left = .0m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = sq.Name;                              width = name.Length / 8m;                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"  		<Textbox><Top>.3in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.2in</Height><Value>{2}</Value>  			<Style><FontWeight>Bold</FontWeight><BorderStyle><Bottom>Solid</Bottom></BorderStyle>  				<BorderWidth><Bottom>3pt</Bottom></BorderWidth></Style>  		</Textbox>"'                                  left'                                  width'                                  name);                              left += width;                          }                          break;                      case "listvalues":                          left = .0m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              DoAlignAndCanGrow(sq.DataType' out canGrow' out align);                              width = name.Length / 8m;                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"  		<Textbox Name='{2}'><Top>.1in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.25in</Height><Value>=Fields!{2}.Value</Value><CanGrow>{3}</CanGrow><Style>{4}</Style></Textbox>"'                                  left' width' name' canGrow' align);                              left += width;                          }                          bodyHeight = .4m;                          break;                      case "listwidth":		// in template list width must follow something that sets left                          sb.AppendFormat(cinfo' "{0}in"' left);                          break;                      case "tableheaders":                          // the group by column is always the first one in the table                          if (gbcolumn != null)                          {                              bodyHeight += 12m;                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems>  							</TableCell>"'                                  this.cbColumnList.Text);                          }                          bodyHeight += 12m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = sq.Name;                              if (name == this.cbColumnList.Text)                                  continue;                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems>  							</TableCell>"'                                  name);                          }                          break;                      case "tablecolumns":                          if (gbcolumn != null)                          {                              bodyHeight += 12m;                              width = gbcolumn.Length / 8m;		// TODO should really use data value                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"<TableColumn><Width>{0}in</Width></TableColumn>"' width);                          }                          bodyHeight += 12m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              width = name.Length / 8m;		// TODO should really use data value                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"<TableColumn><Width>{0}in</Width></TableColumn>"' width);                          }                          break;                      case "tablevalues":                          bodyHeight += 12m;                          if (gbcolumn != null)                          {                              sb.Append(@"<TableCell>  								<ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>None</Default><Left>Solid</Left></BorderStyle></Style></Textbox></ReportItems>  							</TableCell>");                          }                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              DoAlignAndCanGrow(sq.DataType' out canGrow' out align);                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{0}'><Value>=Fields!{0}.Value</Value><CanGrow>{1}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{2}</Style></Textbox></ReportItems>  							</TableCell>"'                                  name' canGrow' align);                          }                          break;                      case "gtablefooters":                      case "tablefooters":                          bodyHeight += 12m;                          canGrow = "false";                          align = "";                          string nameprefix = p == "gtablefooters" ? "gf" : "tf";                          if (gbcolumn != null)	// handle group by column first                          {                              int i = clbSubtotal.FindStringExact(this.cbColumnList.Text);                              SqlColumn sq = i < 0 ? null : (SqlColumn)clbSubtotal.Items[i];                              if (i >= 0 && clbSubtotal.GetItemChecked(i))                              {                                  string funct = DesignerUtility.IsNumeric(sq.DataType) ? "Sum" : "Count";                                    DoAlignAndCanGrow(((object)0).GetType()' out canGrow' out align);                                  sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems>  							</TableCell>"'                                      gbcolumn' funct' canGrow' align' nameprefix);                              }                              else                              {                                  sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>");                              }                          }                          for (int i = 0; i < this.clbSubtotal.Items.Count; i++)                          {                              SqlColumn sq = (SqlColumn)clbSubtotal.Items[i];                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              if (clbSubtotal.GetItemChecked(i))                              {                                  string funct = DesignerUtility.IsNumeric(sq.DataType) ? "Sum" : "Count";                                    DoAlignAndCanGrow(((object)0).GetType()' out canGrow' out align);                                  sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems>  							</TableCell>"'                                      name' funct' canGrow' align' nameprefix);                              }                              else                              {                                  sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>");                              }                          }                          break;                      case "bodyheight":	// Note: this must follow the table definition                          sb.AppendFormat(cinfo' "{0}pt"' bodyHeight);                          break;                      default:                          sb.Append(p);                          break;                  }
Magic Number,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The following statement contains a magic number: switch (p)                  {                      case "endif":                          if (skip > 0)                              skip--;                          break;                      case "schema":                          if (this.rbSchema2003.Checked)                              sb.Append(_Schema2003);                          else if (this.rbSchema2005.Checked)                              sb.Append(_Schema2005);                          break;                      case "reportname":                          sb.Append(tbReportName.Text.Replace('\''' '_'));                          break;                      case "reportnameasis":                          sb.Append(tbReportName.Text);                          break;                      case "description":                          sb.Append(tbReportDescription.Text);                          break;                      case "author":                          sb.Append(tbReportAuthor.Text);                          break;                      case "connectionproperties":                          if (this.cbConnectionTypes.Text == SHARED_CONNECTION)                          {                              string file = this.tbConnection.Text;                              if (!UseFullSharedDSName)                                  file = Path.GetFileNameWithoutExtension(file);      // when we save report we use qualified name                              sb.AppendFormat("<DataSourceReference>{0}</DataSourceReference>"' file);                          }                          else                              sb.AppendFormat("<ConnectionProperties><DataProvider>{0}</DataProvider><ConnectString>{1}</ConnectString></ConnectionProperties>"'                                  GetDataProvider()' GetDataConnection());                          break;                      case "dataprovider":                          sb.Append(GetDataProvider());                          break;                      case "connectstring":                          sb.Append(tbConnection.Text);                          break;                      case "columncount":                          sb.Append(_ColumnList.Count);                          break;                      case "orientation":                          if (this.cbOrientation.SelectedIndex == 0)                          {	// Portrait is first in the list                              sb.Append("<PageHeight>11in</PageHeight><PageWidth>8.5in</PageWidth>");                          }                          else                          {                              sb.Append("<PageHeight>8.5in</PageHeight><PageWidth>11in</PageWidth>");                          }                          break;                      case "groupbycolumn":                          sb.Append(gbcolumn);                          break;                      case "reportparameters":                          DoReportSyntaxParameters(cinfo' sb);                          break;                      case "queryparameters":                          DoReportSyntaxQParameters(cinfo' sb' tbSQL.Text);                          break;                      case "sqltext":                          sb.Append(tbSQL.Text.Replace("<"' "&lt;"));                          break;                      case "sqlfields":                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              string type = sq.DataType.FullName;                              if (this.rbSchemaNo.Checked)                                  sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><TypeName>{2}</TypeName></Field>"' name' sq.Name' type);                              else                                  sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><rd:TypeName>{2}</rd:TypeName></Field>"' name' sq.Name' type);                          }                          break;                      case "listheaders":                          left = .0m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = sq.Name;                              width = name.Length / 8m;                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"  		<Textbox><Top>.3in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.2in</Height><Value>{2}</Value>  			<Style><FontWeight>Bold</FontWeight><BorderStyle><Bottom>Solid</Bottom></BorderStyle>  				<BorderWidth><Bottom>3pt</Bottom></BorderWidth></Style>  		</Textbox>"'                                  left'                                  width'                                  name);                              left += width;                          }                          break;                      case "listvalues":                          left = .0m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              DoAlignAndCanGrow(sq.DataType' out canGrow' out align);                              width = name.Length / 8m;                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"  		<Textbox Name='{2}'><Top>.1in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.25in</Height><Value>=Fields!{2}.Value</Value><CanGrow>{3}</CanGrow><Style>{4}</Style></Textbox>"'                                  left' width' name' canGrow' align);                              left += width;                          }                          bodyHeight = .4m;                          break;                      case "listwidth":		// in template list width must follow something that sets left                          sb.AppendFormat(cinfo' "{0}in"' left);                          break;                      case "tableheaders":                          // the group by column is always the first one in the table                          if (gbcolumn != null)                          {                              bodyHeight += 12m;                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems>  							</TableCell>"'                                  this.cbColumnList.Text);                          }                          bodyHeight += 12m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = sq.Name;                              if (name == this.cbColumnList.Text)                                  continue;                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems>  							</TableCell>"'                                  name);                          }                          break;                      case "tablecolumns":                          if (gbcolumn != null)                          {                              bodyHeight += 12m;                              width = gbcolumn.Length / 8m;		// TODO should really use data value                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"<TableColumn><Width>{0}in</Width></TableColumn>"' width);                          }                          bodyHeight += 12m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              width = name.Length / 8m;		// TODO should really use data value                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"<TableColumn><Width>{0}in</Width></TableColumn>"' width);                          }                          break;                      case "tablevalues":                          bodyHeight += 12m;                          if (gbcolumn != null)                          {                              sb.Append(@"<TableCell>  								<ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>None</Default><Left>Solid</Left></BorderStyle></Style></Textbox></ReportItems>  							</TableCell>");                          }                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              DoAlignAndCanGrow(sq.DataType' out canGrow' out align);                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{0}'><Value>=Fields!{0}.Value</Value><CanGrow>{1}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{2}</Style></Textbox></ReportItems>  							</TableCell>"'                                  name' canGrow' align);                          }                          break;                      case "gtablefooters":                      case "tablefooters":                          bodyHeight += 12m;                          canGrow = "false";                          align = "";                          string nameprefix = p == "gtablefooters" ? "gf" : "tf";                          if (gbcolumn != null)	// handle group by column first                          {                              int i = clbSubtotal.FindStringExact(this.cbColumnList.Text);                              SqlColumn sq = i < 0 ? null : (SqlColumn)clbSubtotal.Items[i];                              if (i >= 0 && clbSubtotal.GetItemChecked(i))                              {                                  string funct = DesignerUtility.IsNumeric(sq.DataType) ? "Sum" : "Count";                                    DoAlignAndCanGrow(((object)0).GetType()' out canGrow' out align);                                  sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems>  							</TableCell>"'                                      gbcolumn' funct' canGrow' align' nameprefix);                              }                              else                              {                                  sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>");                              }                          }                          for (int i = 0; i < this.clbSubtotal.Items.Count; i++)                          {                              SqlColumn sq = (SqlColumn)clbSubtotal.Items[i];                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              if (clbSubtotal.GetItemChecked(i))                              {                                  string funct = DesignerUtility.IsNumeric(sq.DataType) ? "Sum" : "Count";                                    DoAlignAndCanGrow(((object)0).GetType()' out canGrow' out align);                                  sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems>  							</TableCell>"'                                      name' funct' canGrow' align' nameprefix);                              }                              else                              {                                  sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>");                              }                          }                          break;                      case "bodyheight":	// Note: this must follow the table definition                          sb.AppendFormat(cinfo' "{0}pt"' bodyHeight);                          break;                      default:                          sb.Append(p);                          break;                  }
Magic Number,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The following statement contains a magic number: switch (p)                  {                      case "endif":                          if (skip > 0)                              skip--;                          break;                      case "schema":                          if (this.rbSchema2003.Checked)                              sb.Append(_Schema2003);                          else if (this.rbSchema2005.Checked)                              sb.Append(_Schema2005);                          break;                      case "reportname":                          sb.Append(tbReportName.Text.Replace('\''' '_'));                          break;                      case "reportnameasis":                          sb.Append(tbReportName.Text);                          break;                      case "description":                          sb.Append(tbReportDescription.Text);                          break;                      case "author":                          sb.Append(tbReportAuthor.Text);                          break;                      case "connectionproperties":                          if (this.cbConnectionTypes.Text == SHARED_CONNECTION)                          {                              string file = this.tbConnection.Text;                              if (!UseFullSharedDSName)                                  file = Path.GetFileNameWithoutExtension(file);      // when we save report we use qualified name                              sb.AppendFormat("<DataSourceReference>{0}</DataSourceReference>"' file);                          }                          else                              sb.AppendFormat("<ConnectionProperties><DataProvider>{0}</DataProvider><ConnectString>{1}</ConnectString></ConnectionProperties>"'                                  GetDataProvider()' GetDataConnection());                          break;                      case "dataprovider":                          sb.Append(GetDataProvider());                          break;                      case "connectstring":                          sb.Append(tbConnection.Text);                          break;                      case "columncount":                          sb.Append(_ColumnList.Count);                          break;                      case "orientation":                          if (this.cbOrientation.SelectedIndex == 0)                          {	// Portrait is first in the list                              sb.Append("<PageHeight>11in</PageHeight><PageWidth>8.5in</PageWidth>");                          }                          else                          {                              sb.Append("<PageHeight>8.5in</PageHeight><PageWidth>11in</PageWidth>");                          }                          break;                      case "groupbycolumn":                          sb.Append(gbcolumn);                          break;                      case "reportparameters":                          DoReportSyntaxParameters(cinfo' sb);                          break;                      case "queryparameters":                          DoReportSyntaxQParameters(cinfo' sb' tbSQL.Text);                          break;                      case "sqltext":                          sb.Append(tbSQL.Text.Replace("<"' "&lt;"));                          break;                      case "sqlfields":                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              string type = sq.DataType.FullName;                              if (this.rbSchemaNo.Checked)                                  sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><TypeName>{2}</TypeName></Field>"' name' sq.Name' type);                              else                                  sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><rd:TypeName>{2}</rd:TypeName></Field>"' name' sq.Name' type);                          }                          break;                      case "listheaders":                          left = .0m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = sq.Name;                              width = name.Length / 8m;                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"  		<Textbox><Top>.3in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.2in</Height><Value>{2}</Value>  			<Style><FontWeight>Bold</FontWeight><BorderStyle><Bottom>Solid</Bottom></BorderStyle>  				<BorderWidth><Bottom>3pt</Bottom></BorderWidth></Style>  		</Textbox>"'                                  left'                                  width'                                  name);                              left += width;                          }                          break;                      case "listvalues":                          left = .0m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              DoAlignAndCanGrow(sq.DataType' out canGrow' out align);                              width = name.Length / 8m;                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"  		<Textbox Name='{2}'><Top>.1in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.25in</Height><Value>=Fields!{2}.Value</Value><CanGrow>{3}</CanGrow><Style>{4}</Style></Textbox>"'                                  left' width' name' canGrow' align);                              left += width;                          }                          bodyHeight = .4m;                          break;                      case "listwidth":		// in template list width must follow something that sets left                          sb.AppendFormat(cinfo' "{0}in"' left);                          break;                      case "tableheaders":                          // the group by column is always the first one in the table                          if (gbcolumn != null)                          {                              bodyHeight += 12m;                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems>  							</TableCell>"'                                  this.cbColumnList.Text);                          }                          bodyHeight += 12m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = sq.Name;                              if (name == this.cbColumnList.Text)                                  continue;                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems>  							</TableCell>"'                                  name);                          }                          break;                      case "tablecolumns":                          if (gbcolumn != null)                          {                              bodyHeight += 12m;                              width = gbcolumn.Length / 8m;		// TODO should really use data value                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"<TableColumn><Width>{0}in</Width></TableColumn>"' width);                          }                          bodyHeight += 12m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              width = name.Length / 8m;		// TODO should really use data value                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"<TableColumn><Width>{0}in</Width></TableColumn>"' width);                          }                          break;                      case "tablevalues":                          bodyHeight += 12m;                          if (gbcolumn != null)                          {                              sb.Append(@"<TableCell>  								<ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>None</Default><Left>Solid</Left></BorderStyle></Style></Textbox></ReportItems>  							</TableCell>");                          }                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              DoAlignAndCanGrow(sq.DataType' out canGrow' out align);                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{0}'><Value>=Fields!{0}.Value</Value><CanGrow>{1}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{2}</Style></Textbox></ReportItems>  							</TableCell>"'                                  name' canGrow' align);                          }                          break;                      case "gtablefooters":                      case "tablefooters":                          bodyHeight += 12m;                          canGrow = "false";                          align = "";                          string nameprefix = p == "gtablefooters" ? "gf" : "tf";                          if (gbcolumn != null)	// handle group by column first                          {                              int i = clbSubtotal.FindStringExact(this.cbColumnList.Text);                              SqlColumn sq = i < 0 ? null : (SqlColumn)clbSubtotal.Items[i];                              if (i >= 0 && clbSubtotal.GetItemChecked(i))                              {                                  string funct = DesignerUtility.IsNumeric(sq.DataType) ? "Sum" : "Count";                                    DoAlignAndCanGrow(((object)0).GetType()' out canGrow' out align);                                  sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems>  							</TableCell>"'                                      gbcolumn' funct' canGrow' align' nameprefix);                              }                              else                              {                                  sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>");                              }                          }                          for (int i = 0; i < this.clbSubtotal.Items.Count; i++)                          {                              SqlColumn sq = (SqlColumn)clbSubtotal.Items[i];                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              if (clbSubtotal.GetItemChecked(i))                              {                                  string funct = DesignerUtility.IsNumeric(sq.DataType) ? "Sum" : "Count";                                    DoAlignAndCanGrow(((object)0).GetType()' out canGrow' out align);                                  sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems>  							</TableCell>"'                                      name' funct' canGrow' align' nameprefix);                              }                              else                              {                                  sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>");                              }                          }                          break;                      case "bodyheight":	// Note: this must follow the table definition                          sb.AppendFormat(cinfo' "{0}pt"' bodyHeight);                          break;                      default:                          sb.Append(p);                          break;                  }
Magic Number,fyiReporting.RdlDesign,DialogDatabase,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogDatabase.Designer.cs,DoReportSyntax,The following statement contains a magic number: switch (p)                  {                      case "endif":                          if (skip > 0)                              skip--;                          break;                      case "schema":                          if (this.rbSchema2003.Checked)                              sb.Append(_Schema2003);                          else if (this.rbSchema2005.Checked)                              sb.Append(_Schema2005);                          break;                      case "reportname":                          sb.Append(tbReportName.Text.Replace('\''' '_'));                          break;                      case "reportnameasis":                          sb.Append(tbReportName.Text);                          break;                      case "description":                          sb.Append(tbReportDescription.Text);                          break;                      case "author":                          sb.Append(tbReportAuthor.Text);                          break;                      case "connectionproperties":                          if (this.cbConnectionTypes.Text == SHARED_CONNECTION)                          {                              string file = this.tbConnection.Text;                              if (!UseFullSharedDSName)                                  file = Path.GetFileNameWithoutExtension(file);      // when we save report we use qualified name                              sb.AppendFormat("<DataSourceReference>{0}</DataSourceReference>"' file);                          }                          else                              sb.AppendFormat("<ConnectionProperties><DataProvider>{0}</DataProvider><ConnectString>{1}</ConnectString></ConnectionProperties>"'                                  GetDataProvider()' GetDataConnection());                          break;                      case "dataprovider":                          sb.Append(GetDataProvider());                          break;                      case "connectstring":                          sb.Append(tbConnection.Text);                          break;                      case "columncount":                          sb.Append(_ColumnList.Count);                          break;                      case "orientation":                          if (this.cbOrientation.SelectedIndex == 0)                          {	// Portrait is first in the list                              sb.Append("<PageHeight>11in</PageHeight><PageWidth>8.5in</PageWidth>");                          }                          else                          {                              sb.Append("<PageHeight>8.5in</PageHeight><PageWidth>11in</PageWidth>");                          }                          break;                      case "groupbycolumn":                          sb.Append(gbcolumn);                          break;                      case "reportparameters":                          DoReportSyntaxParameters(cinfo' sb);                          break;                      case "queryparameters":                          DoReportSyntaxQParameters(cinfo' sb' tbSQL.Text);                          break;                      case "sqltext":                          sb.Append(tbSQL.Text.Replace("<"' "&lt;"));                          break;                      case "sqlfields":                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              string type = sq.DataType.FullName;                              if (this.rbSchemaNo.Checked)                                  sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><TypeName>{2}</TypeName></Field>"' name' sq.Name' type);                              else                                  sb.AppendFormat(cinfo' "<Field Name='{0}'><DataField>{1}</DataField><rd:TypeName>{2}</rd:TypeName></Field>"' name' sq.Name' type);                          }                          break;                      case "listheaders":                          left = .0m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = sq.Name;                              width = name.Length / 8m;                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"  		<Textbox><Top>.3in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.2in</Height><Value>{2}</Value>  			<Style><FontWeight>Bold</FontWeight><BorderStyle><Bottom>Solid</Bottom></BorderStyle>  				<BorderWidth><Bottom>3pt</Bottom></BorderWidth></Style>  		</Textbox>"'                                  left'                                  width'                                  name);                              left += width;                          }                          break;                      case "listvalues":                          left = .0m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              DoAlignAndCanGrow(sq.DataType' out canGrow' out align);                              width = name.Length / 8m;                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"  		<Textbox Name='{2}'><Top>.1in</Top><Left>{0}in</Left><Width>{1}in</Width><Height>.25in</Height><Value>=Fields!{2}.Value</Value><CanGrow>{3}</CanGrow><Style>{4}</Style></Textbox>"'                                  left' width' name' canGrow' align);                              left += width;                          }                          bodyHeight = .4m;                          break;                      case "listwidth":		// in template list width must follow something that sets left                          sb.AppendFormat(cinfo' "{0}in"' left);                          break;                      case "tableheaders":                          // the group by column is always the first one in the table                          if (gbcolumn != null)                          {                              bodyHeight += 12m;                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems>  							</TableCell>"'                                  this.cbColumnList.Text);                          }                          bodyHeight += 12m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = sq.Name;                              if (name == this.cbColumnList.Text)                                  continue;                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox><Value>{0}</Value><Style><TextAlign>Center</TextAlign><BorderStyle><Default>Solid</Default></BorderStyle><FontWeight>Bold</FontWeight></Style></Textbox></ReportItems>  							</TableCell>"'                                  name);                          }                          break;                      case "tablecolumns":                          if (gbcolumn != null)                          {                              bodyHeight += 12m;                              width = gbcolumn.Length / 8m;		// TODO should really use data value                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"<TableColumn><Width>{0}in</Width></TableColumn>"' width);                          }                          bodyHeight += 12m;                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              width = name.Length / 8m;		// TODO should really use data value                              if (width < 1)                                  width = 1;                              sb.AppendFormat(cinfo' @"<TableColumn><Width>{0}in</Width></TableColumn>"' width);                          }                          break;                      case "tablevalues":                          bodyHeight += 12m;                          if (gbcolumn != null)                          {                              sb.Append(@"<TableCell>  								<ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>None</Default><Left>Solid</Left></BorderStyle></Style></Textbox></ReportItems>  							</TableCell>");                          }                          foreach (SqlColumn sq in _ColumnList)                          {                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              DoAlignAndCanGrow(sq.DataType' out canGrow' out align);                              sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{0}'><Value>=Fields!{0}.Value</Value><CanGrow>{1}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{2}</Style></Textbox></ReportItems>  							</TableCell>"'                                  name' canGrow' align);                          }                          break;                      case "gtablefooters":                      case "tablefooters":                          bodyHeight += 12m;                          canGrow = "false";                          align = "";                          string nameprefix = p == "gtablefooters" ? "gf" : "tf";                          if (gbcolumn != null)	// handle group by column first                          {                              int i = clbSubtotal.FindStringExact(this.cbColumnList.Text);                              SqlColumn sq = i < 0 ? null : (SqlColumn)clbSubtotal.Items[i];                              if (i >= 0 && clbSubtotal.GetItemChecked(i))                              {                                  string funct = DesignerUtility.IsNumeric(sq.DataType) ? "Sum" : "Count";                                    DoAlignAndCanGrow(((object)0).GetType()' out canGrow' out align);                                  sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems>  							</TableCell>"'                                      gbcolumn' funct' canGrow' align' nameprefix);                              }                              else                              {                                  sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>");                              }                          }                          for (int i = 0; i < this.clbSubtotal.Items.Count; i++)                          {                              SqlColumn sq = (SqlColumn)clbSubtotal.Items[i];                              name = GetFieldName(sq.Name);                              if (name == gbcolumn)                                  continue;                              if (clbSubtotal.GetItemChecked(i))                              {                                  string funct = DesignerUtility.IsNumeric(sq.DataType) ? "Sum" : "Count";                                    DoAlignAndCanGrow(((object)0).GetType()' out canGrow' out align);                                  sb.AppendFormat(cinfo' @"  							<TableCell>  								<ReportItems><Textbox Name='{4}_{0}'><Value>={1}(Fields!{0}.Value)</Value><CanGrow>{2}</CanGrow><Style><BorderStyle><Default>Solid</Default></BorderStyle>{3}</Style></Textbox></ReportItems>  							</TableCell>"'                                      name' funct' canGrow' align' nameprefix);                              }                              else                              {                                  sb.AppendFormat(cinfo' "<TableCell><ReportItems><Textbox><Value></Value><Style><BorderStyle><Default>Solid</Default></BorderStyle></Style></Textbox></ReportItems></TableCell>");                              }                          }                          break;                      case "bodyheight":	// Note: this must follow the table definition                          sb.AppendFormat(cinfo' "{0}pt"' bodyHeight);                          break;                      default:                          sb.Append(p);                          break;                  }
Magic Number,fyiReporting.RdlDesign,DialogEmbeddedImages,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogEmbeddedImages.Designer.cs,bImport_Click,The following statement contains a magic number: ofd.FilterIndex = 6;
Magic Number,fyiReporting.RdlDesign,DialogExprEditor,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogExprEditor.Designer.cs,ConfigureScintillaStyle,The following statement contains a magic number: var selectionColor = Color.FromArgb(255' 192' 192' 192);
Magic Number,fyiReporting.RdlDesign,DialogExprEditor,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogExprEditor.Designer.cs,ConfigureScintillaStyle,The following statement contains a magic number: var selectionColor = Color.FromArgb(255' 192' 192' 192);
Magic Number,fyiReporting.RdlDesign,DialogExprEditor,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogExprEditor.Designer.cs,ConfigureScintillaStyle,The following statement contains a magic number: var selectionColor = Color.FromArgb(255' 192' 192' 192);
Magic Number,fyiReporting.RdlDesign,DialogExprEditor,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogExprEditor.Designer.cs,ConfigureScintillaStyle,The following statement contains a magic number: var selectionColor = Color.FromArgb(255' 192' 192' 192);
Magic Number,fyiReporting.RdlDesign,DialogNewChart,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogNewChart.Designer.cs,InitValues,The following statement contains a magic number: this.cbChartType.SelectedIndex = 2;
Magic Number,fyiReporting.RdlDesign,DialogToolOptions,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogToolOptions.Designer.cs,Verify,The following statement contains a magic number: return (i >= 1 || i <= 50);
Magic Number,fyiReporting.RdlDesign,DialogToolOptions,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogToolOptions.Designer.cs,HandleRecentFilesMax,The following statement contains a magic number: i < 1 || i > 50
Magic Number,fyiReporting.RdlDesign,DialogValidValues,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogValidValues.Designer.cs,InitValues,The following statement contains a magic number: dgtbValue.Width = 75;
Magic Number,fyiReporting.RdlDesign,DialogValidValues,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogValidValues.Designer.cs,InitValues,The following statement contains a magic number: this.dgtbLabel.Width = 75;
Magic Number,fyiReporting.RdlDesign,DialogValidValues,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogValidValues.Designer.cs,InitValues,The following statement contains a magic number: string[] rowValues = new string[2];
Magic Number,fyiReporting.RdlDesign,DialogValidValues,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogValidValues.Designer.cs,InitValues,The following statement contains a magic number: ts.GridColumnStyles[0].Width = 140;
Magic Number,fyiReporting.RdlDesign,DialogValidValues,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DialogValidValues.Designer.cs,InitValues,The following statement contains a magic number: ts.GridColumnStyles[1].Width = 140;
Magic Number,fyiReporting.RdlDesign,DrillParametersDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DrillParametersDialog.Designer.cs,InitValues,The following statement contains a magic number: dgtbName.Width = 75;
Magic Number,fyiReporting.RdlDesign,DrillParametersDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DrillParametersDialog.Designer.cs,InitValues,The following statement contains a magic number: this.dgtbValue.Width = 75;
Magic Number,fyiReporting.RdlDesign,DrillParametersDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DrillParametersDialog.Designer.cs,InitValues,The following statement contains a magic number: this.dgtbOmit.Width = 75;
Magic Number,fyiReporting.RdlDesign,DrillParametersDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DrillParametersDialog.Designer.cs,InitValues,The following statement contains a magic number: string[] rowValues = new string[3];
Magic Number,fyiReporting.RdlDesign,DrillParametersDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DrillParametersDialog.Designer.cs,InitValues,The following statement contains a magic number: rowValues[2] = dp.ParameterOmit;
Magic Number,fyiReporting.RdlDesign,DrillParametersDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DrillParametersDialog.Designer.cs,InitValues,The following statement contains a magic number: ts.GridColumnStyles[0].Width = 140;
Magic Number,fyiReporting.RdlDesign,DrillParametersDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DrillParametersDialog.Designer.cs,InitValues,The following statement contains a magic number: ts.GridColumnStyles[1].Width = 140;
Magic Number,fyiReporting.RdlDesign,DrillParametersDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DrillParametersDialog.Designer.cs,InitValues,The following statement contains a magic number: ts.GridColumnStyles[2].Width = 70;
Magic Number,fyiReporting.RdlDesign,DrillParametersDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DrillParametersDialog.Designer.cs,InitValues,The following statement contains a magic number: ts.GridColumnStyles[2].Width = 70;
Magic Number,fyiReporting.RdlDesign,DrillParametersDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DrillParametersDialog.Designer.cs,bRefreshParms_Click,The following statement contains a magic number: string[] rowValues = new string[3];
Magic Number,fyiReporting.RdlDesign,DrillParametersDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DrillParametersDialog.Designer.cs,bRefreshParms_Click,The following statement contains a magic number: rowValues[2] = "false";
Magic Number,fyiReporting.RdlDesign,DrillParametersDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DrillParametersDialog.Designer.cs,GetReport,The following statement contains a magic number: r.ErrorMaxSeverity > 4
Magic Number,fyiReporting.RdlDesign,DesignRuler,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignRuler.cs,DesignRuler,The following statement contains a magic number: _Intervals = _IsMetric ? 4 : 8;
Magic Number,fyiReporting.RdlDesign,DesignRuler,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignRuler.cs,DesignRuler,The following statement contains a magic number: _Intervals = _IsMetric ? 4 : 8;
Magic Number,fyiReporting.RdlDesign,DesignRuler,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignRuler.cs,Ruler_DrawHorz,The following statement contains a magic number: yoff = this.Height/2 -2;
Magic Number,fyiReporting.RdlDesign,DesignRuler,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignRuler.cs,Ruler_DrawHorz,The following statement contains a magic number: yoff = this.Height/2 -2;
Magic Number,fyiReporting.RdlDesign,DesignRuler,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignRuler.cs,Ruler_DrawHorz,The following statement contains a magic number: mod = mod / 2.54f;
Magic Number,fyiReporting.RdlDesign,DesignRuler,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignRuler.cs,Ruler_DrawHorz,The following statement contains a magic number: f = new Font("Arial"' 8' FontStyle.Regular);
Magic Number,fyiReporting.RdlDesign,DesignRuler,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignRuler.cs,Ruler_DrawHorz,The following statement contains a magic number: g.DrawString(l' f' Brushes.Black'                                  Offset + xoff - (sz.Width / 2) - scroll' yoff - (sz.Height / 2)' drawFormat);
Magic Number,fyiReporting.RdlDesign,DesignRuler,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignRuler.cs,Ruler_DrawHorz,The following statement contains a magic number: g.DrawString(l' f' Brushes.Black'                                  Offset + xoff - (sz.Width / 2) - scroll' yoff - (sz.Height / 2)' drawFormat);
Magic Number,fyiReporting.RdlDesign,DesignRuler,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignRuler.cs,Ruler_DrawHorz,The following statement contains a magic number: g.DrawLine(Pens.Black' Offset + xoff - scroll' this.Height' Offset + xoff - scroll' this.Height - 2);
Magic Number,fyiReporting.RdlDesign,DesignRuler,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignRuler.cs,Ruler_DrawHorz,The following statement contains a magic number: xoff % mod < .1f || Math.Abs((xoff % mod) - mod) < .1f
Magic Number,fyiReporting.RdlDesign,DesignRuler,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignRuler.cs,Ruler_DrawHorz,The following statement contains a magic number: xoff % mod < .1f || Math.Abs((xoff % mod) - mod) < .1f
Magic Number,fyiReporting.RdlDesign,DesignRuler,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignRuler.cs,Ruler_DrawVert,The following statement contains a magic number: f = new Font("Arial"' 8' FontStyle.Regular);
Magic Number,fyiReporting.RdlDesign,DesignRuler,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignRuler.cs,Ruler_DrawVertPart,The following statement contains a magic number: xoff = Design.PointsX(this.Width / 2 - 2);
Magic Number,fyiReporting.RdlDesign,DesignRuler,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignRuler.cs,Ruler_DrawVertPart,The following statement contains a magic number: xoff = Design.PointsX(this.Width / 2 - 2);
Magic Number,fyiReporting.RdlDesign,DesignRuler,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignRuler.cs,Ruler_DrawVertPart,The following statement contains a magic number: mod = Design.PointsY(g.DpiY / 2.54f);
Magic Number,fyiReporting.RdlDesign,DesignRuler,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignRuler.cs,Ruler_DrawVertPart,The following statement contains a magic number: sinc + offset + yoff - scroll < g.ClipBounds.Top - 20
Magic Number,fyiReporting.RdlDesign,MDIChild,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\MDIChild.Designer.cs,MDIChild,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 13);
Magic Number,fyiReporting.RdlDesign,MDIChild,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\MDIChild.Designer.cs,MDIChild,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 13);
Magic Number,fyiReporting.RdlDesign,PropertyDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\PropertyDialog.Designer.cs,AddTab,The following statement contains a magic number: tp.Location = new System.Drawing.Point(4' 22);
Magic Number,fyiReporting.RdlDesign,PropertyDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\PropertyDialog.Designer.cs,AddTab,The following statement contains a magic number: tp.Location = new System.Drawing.Point(4' 22);
Magic Number,fyiReporting.RdlDesign,PropertyDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\PropertyDialog.Designer.cs,AddTab,The following statement contains a magic number: tp.Size = new System.Drawing.Size(552' 284);
Magic Number,fyiReporting.RdlDesign,PropertyDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\PropertyDialog.Designer.cs,AddTab,The following statement contains a magic number: tp.Size = new System.Drawing.Size(552' 284);
Magic Number,fyiReporting.RdlDesign,PropertyDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\PropertyDialog.Designer.cs,AddTab,The following statement contains a magic number: uc.Size = new System.Drawing.Size(552' 284);
Magic Number,fyiReporting.RdlDesign,PropertyDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\PropertyDialog.Designer.cs,AddTab,The following statement contains a magic number: uc.Size = new System.Drawing.Size(552' 284);
Magic Number,fyiReporting.RdlDesign,PropertyChartData,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlProperties\PropertyChart.cs,SetChartDataValue,The following statement contains a magic number: string expr2 = i == 2 ? expr : _pt.ChartData.DataValue2.Expression;
Magic Number,fyiReporting.RdlDesign,PropertyChartData,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlProperties\PropertyChart.cs,SetChartDataValue,The following statement contains a magic number: string expr3 = i == 3 ? expr : _pt.ChartData.DataValue3.Expression;
Magic Number,fyiReporting.RdlDesign,PropertyBackground,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlProperties\PropertyBackground.cs,PropertyBackground,The following statement contains a magic number: _subitems = new string[names.Length + 2];
Magic Number,fyiReporting.RdlDesign,FontCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FontCtl.cs,ApplyChanges,The following statement contains a magic number: float size=10;
Magic Number,fyiReporting.RdlDesign,FontCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FontCtl.cs,ApplyChanges,The following statement contains a magic number: size = 10;
Magic Number,fyiReporting.RdlDesign,FontCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FontCtl.cs,bFont_Click,The following statement contains a magic number: float size=10;
Magic Number,fyiReporting.RdlDesign,FontCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FontCtl.cs,bFont_Click,The following statement contains a magic number: size = 10;
Magic Number,fyiReporting.RdlDesign,PropertyAppearance,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlProperties\PropertyAppearance.cs,PropertyAppearance,The following statement contains a magic number: _subitems = new string[names.Length + 2];
Magic Number,fyiReporting.RdlDesign,PropertyBorder,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlProperties\PropertyBorder.cs,ToString,The following statement contains a magic number: _subitems[_subitems.Length - 2] = "BorderStyle";
Magic Number,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,InitToolbarInsertToggle,The following statement contains a magic number: ctl.Height = (int)fs.Height + 8;
Magic Number,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,InitToolbarInsertToggle,The following statement contains a magic number: ctl.Width = (int)fs.Width + 12;
Magic Number,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,InitToolbarInsertToggle,The following statement contains a magic number: tipb.AutomaticDelay = 500;
Magic Number,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,CreateMDIChild,The following statement contains a magic number: mc = new MDIChild(this.ClientRectangle.Width * 3 / 5' this.ClientRectangle.Height * 3 / 5);
Magic Number,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,CreateMDIChild,The following statement contains a magic number: mc = new MDIChild(this.ClientRectangle.Width * 3 / 5' this.ClientRectangle.Height * 3 / 5);
Magic Number,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,CreateMDIChild,The following statement contains a magic number: mc = new MDIChild(this.ClientRectangle.Width * 3 / 5' this.ClientRectangle.Height * 3 / 5);
Magic Number,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,CreateMDIChild,The following statement contains a magic number: mc = new MDIChild(this.ClientRectangle.Width * 3 / 5' this.ClientRectangle.Height * 3 / 5);
Magic Number,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,DesignTabChanged,The following statement contains a magic number: switch (mc.ZoomMode)                      {                          case ZoomEnum.FitWidth:                              zText = "Fit Width";                              break;                          case ZoomEnum.FitPage:                              zText = "Fit Page";                              break;                          case ZoomEnum.UseZoom:                              if (mc.Zoom == 1)                                  zText = "Actual Size";                              else                                  zText = string.Format("{0:0}"' mc.Zoom * 100f);                              break;                      }
Magic Number,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,ctlZoom_Change,The following statement contains a magic number: switch (zoomToolStripComboBox1.Text)              {                  case "Actual Size":                      mc.Zoom = 1;                      break;                  case "Fit Page":                      mc.ZoomMode = ZoomEnum.FitPage;                      break;                  case "Fit Width":                      mc.ZoomMode = ZoomEnum.FitWidth;                      break;                  default:                      string s = zoomToolStripComboBox1.Text.Substring(0' zoomToolStripComboBox1.Text.Length - 1);                      float z;                      try                      {                          z = Convert.ToSingle(s) / 100f;                          mc.Zoom = z;                      }                      catch (Exception ex)                      {                          MessageBox.Show(ex.Message' Strings.RdlDesigner_Show_ZoomValueInvalid);                      }                      break;              }
Magic Number,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,HeightChanged,The following statement contains a magic number: h *= 2.54f;
Magic Number,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,menuFilePrint_Click,The following statement contains a magic number: float height = 11;
Magic Number,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,menuFilePrint_Click,The following statement contains a magic number: float width = 8.5f;
Magic Number,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,GetStartupState,The following statement contains a magic number: switch (xNodeLoop.Name)                      {                          case "RecentFiles":                              DateTime now = DateTime.Now;                              now = now.Subtract(new TimeSpan(0' 1' 0' 0' 0));	// subtract an hour                              foreach (XmlNode xN in xNodeLoop.ChildNodes)                              {                                  Uri file = new Uri(xN.InnerText.Trim());                                  if (File.Exists(file.LocalPath)) // only add it if it exists 	                                  {                                      _RecentFiles.Add(now' file.LocalPath);                                      now = now.AddSeconds(1);                                  }                              }                              break;                          case "RecentFilesMax":                              try                              {                                  this._RecentFilesMax = Convert.ToInt32(xNodeLoop.InnerText);                              }                              catch                              {                                  this._RecentFilesMax = 5;                              }                              break;                          case "CurrentFiles":                              if (_CurrentFiles.Count > 0)	// don't open other current files if opened with argument                                  break;                              foreach (XmlNode xN in xNodeLoop.ChildNodes)                              {                                  Uri file = new Uri(xN.InnerText.Trim());                                  if (File.Exists(file.LocalPath)) // only add it if it exists                                   {                                      _CurrentFiles.Add(file);                                  }                              }                              break;                          case "Toolbar":                              _Toolbar = new List<string>();                              foreach (XmlNode xN in xNodeLoop.ChildNodes)                              {                                  string item = xN.InnerText.Trim();                                  _Toolbar.Add(item);                              }                              break;                          case "Help":                              if (xNodeLoop.InnerText.Length > 0)		//empty means to use the default                                  _HelpUrl = xNodeLoop.InnerText;                              break;                          case "Support":                              if (xNodeLoop.InnerText.Length > 0)		//empty means to use the default                                  _SupportUrl = xNodeLoop.InnerText;                              break;                          case "EditLines":                              _ShowEditLines = (xNodeLoop.InnerText.ToLower() == "true");                              break;                          case "ShowPreviewWaitDialog":                              _ShowPreviewWaitDialog = (xNodeLoop.InnerText.ToLower() == "true");                              break;                          case "OutlineReportItems":                              this.ShowReportItemOutline = (xNodeLoop.InnerText.ToLower() == "true");                              break;                          case "ShowTabbedInterface":                              this._ShowTabbedInterface = (xNodeLoop.InnerText.ToLower() == "true");                              break;                          case "PropertiesLocation":                              this._PropertiesLocation = GetPropertiesDockStyle(xNodeLoop.InnerText);                              break;                          case "PropertiesAutoHide":                              this._PropertiesAutoHide = (xNodeLoop.InnerText.ToLower() == "true");                              break;                          case "MapSubtypes":                              RdlDesigner.MapSubtypes = xNodeLoop.InnerText.Split(new char[] { ''' });                              break;                          case "CustomColors":                              break;                          default:                              break;                      }
Magic Number,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,GetCustomColors,The following statement contains a magic number: int white = 16777215;
Magic Number,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,zoomToolStripComboBox1_Change,The following statement contains a magic number: switch (zoomToolStripComboBox1.Text)              {                  case "Actual Size":                      mc.Zoom = 1;                      break;                  case "Fit Page":                      mc.ZoomMode = ZoomEnum.FitPage;                      break;                  case "Fit Width":                      mc.ZoomMode = ZoomEnum.FitWidth;                      break;                  default:                      string s = zoomToolStripComboBox1.Text.Substring(0' zoomToolStripComboBox1.Text.Length - 1);                      float z;                      try                      {                          z = Convert.ToSingle(s) / 100f;                          mc.Zoom = z;                      }                      catch (Exception ex)                      {                          MessageBox.Show(ex.Message' Strings.RdlDesigner_Show_ZoomValueInvalid);                      }                      break;              }
Magic Number,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,menuFormatPadding_Click,The following statement contains a magic number: paddiff = 4;
Magic Number,fyiReporting.RdlDesign,RdlUserControl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlUserControl.cs,DesignTabChanged,The following statement contains a magic number: switch (ZoomMode)                  {                      case ZoomEnum.FitWidth:                          zText = "Fit Width";                          break;                      case ZoomEnum.FitPage:                          zText = "Fit Page";                          break;                      case ZoomEnum.UseZoom:                          if (Zoom == 1)                              zText = "Actual Size";                          else                              zText = string.Format("{0:0}"' Zoom * 100f);                          break;                  }
Magic Number,fyiReporting.RdlDesign,RdlUserControl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlUserControl.cs,printToolStripButton2_Click,The following statement contains a magic number: float height = 11;
Magic Number,fyiReporting.RdlDesign,RdlUserControl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlUserControl.cs,printToolStripButton2_Click,The following statement contains a magic number: float width = 8.5f;
Magic Number,fyiReporting.RdlDesign,RdlUserControl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlUserControl.cs,printToolStripButton2_Click,The following statement contains a magic number: height = float.Parse(heightList[i].InnerText.Replace("in"' "")) * 100;
Magic Number,fyiReporting.RdlDesign,RdlUserControl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlUserControl.cs,printToolStripButton2_Click,The following statement contains a magic number: width = float.Parse(widthList[i].InnerText.Replace("in"' "")) * 100;
Magic Number,fyiReporting.RdlDesign,RdlUserControl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlUserControl.cs,zoomToolStripComboBox1_SelectedIndexChanged,The following statement contains a magic number: switch (zoomToolStripComboBox1.Text)              {                  case "Actual Size":                      Zoom = 1;                      break;                  case "Fit Page":                      ZoomMode = ZoomEnum.FitPage;                      break;                  case "Fit Width":                      ZoomMode = ZoomEnum.FitWidth;                      break;                  default:                      string s = zoomToolStripComboBox1.Text.Substring(0' zoomToolStripComboBox1.Text.Length - 1);                      float z;                      try                      {                          z = Convert.ToSingle(s) / 100f;                          Zoom = z;                      }                      catch (Exception ex)                      {                          MessageBox.Show(ex.Message' Strings.RdlUserControl_Show_ZoomValueInvalid);                      }                      break;              }
Magic Number,fyiReporting.RdlDesign,ReportCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ReportCtl.Designer.cs,GetPaperSizeAsInch,The following statement contains a magic number: return (paperSize / 100.0).ToString() + "in";
Magic Number,fyiReporting.RdlDesign,ReportCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ReportCtl.Designer.cs,GetPaperSizeAsMillimeter,The following statement contains a magic number: return ((paperSize / 100.0) * 25.4).ToString() + "mm";
Magic Number,fyiReporting.RdlDesign,ReportCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ReportCtl.Designer.cs,GetPaperSizeAsMillimeter,The following statement contains a magic number: return ((paperSize / 100.0) * 25.4).ToString() + "mm";
Magic Number,fyiReporting.RdlDesign,PropertyPadding,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlProperties\PropertyPadding.cs,PropertyPadding,The following statement contains a magic number: _subitems = new string[names.Length + 2];
Magic Number,fyiReporting.RdlDesign,DesignEditLines,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignEditLines.cs,Lines_Draw,The following statement contains a magic number: _LineHeight = editor.GetPositionFromCharIndex(editor.GetFirstCharIndexFromLine(2)).Y -                            editor.GetPositionFromCharIndex(editor.GetFirstCharIndexFromLine(1)).Y;
Magic Number,fyiReporting.RdlDesign,DesignEditLines,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignEditLines.cs,Lines_Draw,The following statement contains a magic number: first_index = editor.GetCharIndexFromPosition(new                       Point(0' (int)(g.VisibleClipBounds.Y + _LineHeight / 3)));
Magic Number,fyiReporting.RdlDesign,DesignEditLines,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignEditLines.cs,Lines_Draw,The following statement contains a magic number: g.DrawString(l' editor.Font' Brushes.DarkBlue'                      this.Width - (g.MeasureString(l' eFont).Width + 4)' y);
Magic Number,fyiReporting.RdlDesign,DesignerUtility,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignerUtility.cs,FormatXml,The following statement contains a magic number: xtw.Indentation = 2;
Magic Number,fyiReporting.RdlDesign,DesignerUtility,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignerUtility.cs,ValidateSize,The following statement contains a magic number: v < .1
Magic Number,fyiReporting.RdlDesign,DesignerUtility,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignerUtility.cs,MakeValidSize,The following statement contains a magic number: v < .1
Magic Number,fyiReporting.RdlDesign,DesignerUtility,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignerUtility.cs,AddParameters,The following statement contains a magic number: switch (rp.DataType.ToLower())  					{  						case "datetime":                              pvalue = new DateTime(1900' 1' 1);  							break;  						case "double":  							pvalue = new double();  							break;  						case "boolean":  							pvalue = new Boolean();  							break;  						case "string":  						default:  							pvalue = (object) "";  							break;  					}
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawReportPrimaryRegions,The following statement contains a magic number: si.FontSize = 8;
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawSelected,The following statement contains a magic number: DrawCircle(Color.Black' BorderStyleEnum.Solid' 1'                      r.X - RADIUS' r.Y - RADIUS' RADIUS * 2' true);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawSelected,The following statement contains a magic number: DrawCircle(Color.Black' BorderStyleEnum.Solid' 1'                      r.X + r.Width - RADIUS' r.Y - RADIUS' RADIUS * 2' true);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawSelected,The following statement contains a magic number: DrawCircle(Color.Black' BorderStyleEnum.Solid' 1'                      r.X - RADIUS' r.Y + r.Height - RADIUS' RADIUS * 2' true);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawSelected,The following statement contains a magic number: DrawCircle(Color.Black' BorderStyleEnum.Solid' 1'                      r.X + r.Width - RADIUS' r.Y + r.Height - RADIUS' RADIUS * 2' true);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HighLightTableRegion,The following statement contains a magic number: int descBandWitdh = 100;
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HighLightTableRegion,The following statement contains a magic number: int descColumnsHeight = 10;
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HighLightTableRegion,The following statement contains a magic number: siDefault.FontSize = 8;
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawSelectedLine,The following statement contains a magic number: DrawCircle(Color.Black' BorderStyleEnum.Solid' 1'  				p1.X - RADIUS' p1.Y - RADIUS' RADIUS*2' true);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawSelectedLine,The following statement contains a magic number: DrawCircle(Color.Black' BorderStyleEnum.Solid' 1'  				p2.X + - RADIUS' p2.Y - RADIUS' RADIUS*2' true);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetStyleInfo,The following statement contains a magic number: switch (xNodeLoop.Name)  				{  					case "BorderColor":  						GetStyleInfoBorderColor(xNodeLoop' si);  						break;  					case "BorderStyle":  						GetStyleInfoBorderStyle(xNodeLoop' si);  						break;  					case "BorderWidth":  						GetStyleInfoBorderWidth(xNodeLoop' si);  						break;  					case "BackgroundColor":  						si.BackgroundColor = GetStyleColor(xNodeLoop.InnerText);                          if (si.BackgroundColor.IsEmpty)                              si.BackgroundColorText = xNodeLoop.InnerText;                          break;  					case "BackgroundGradientType":  						si.BackgroundGradientType = StyleInfo.GetBackgroundGradientType(xNodeLoop.InnerText' BackgroundGradientTypeEnum.None);  						break;  					case "BackgroundGradientEndColor":  						si.BackgroundGradientEndColor = GetStyleColor(xNodeLoop.InnerText);  						break;  					case "BackgroundImage":  						GetStyleInfoBackgroundImage(xNodeLoop' si);  						break;  					case "FontStyle":  						si.FontStyle = StyleInfo.GetFontStyle(xNodeLoop.InnerText' FontStyleEnum.Normal);  						break;  					case "FontFamily":  						si.FontFamily = xNodeLoop.InnerText[0] == '='? "Arial": xNodeLoop.InnerText;  						break;  					case "FontSize":  						si.FontSize = xNodeLoop.InnerText[0] == '='? 10: GetSize(xNodeLoop.InnerText);  						break;  					case "FontWeight":  						si.FontWeight = StyleInfo.GetFontWeight(xNodeLoop.InnerText' FontWeightEnum.Normal);  						break;  					case "Format":  						break;  					case "TextDecoration":  						si.TextDecoration = StyleInfo.GetTextDecoration(xNodeLoop.InnerText' TextDecorationEnum.None);  						break;  					case "TextAlign":  						si.TextAlign = StyleInfo.GetTextAlign(xNodeLoop.InnerText' TextAlignEnum.General);  						break;  					case "VerticalAlign":  						si.VerticalAlign = StyleInfo.GetVerticalAlign(xNodeLoop.InnerText' VerticalAlignEnum.Middle);  						break;  					case "Color":  						si.Color = GetStyleColor(xNodeLoop.InnerText);                          if (si.Color.IsEmpty)                              si.ColorText = xNodeLoop.InnerText;  						break;  					case "PaddingLeft":  						si.PaddingLeft = GetSize(xNodeLoop.InnerText);  						break;  					case "PaddingRight":  						si.PaddingRight = GetSize(xNodeLoop.InnerText);  						break;  					case "PaddingTop":  						si.PaddingTop = GetSize(xNodeLoop.InnerText);  						break;  					case "PaddingBottom":  						si.PaddingBottom = GetSize(xNodeLoop.InnerText);  						break;  					case "LineHeight":  						si.LineHeight = GetSize(xNodeLoop.InnerText);   						break;  					case "Direction":  						si.Direction = StyleInfo.GetDirection(xNodeLoop.InnerText' DirectionEnum.LTR);  						break;  					case "WritingMode":  						si.WritingMode = StyleInfo.GetWritingMode(xNodeLoop.InnerText' WritingModeEnum.lr_tb);  						break;  					case "Language":  						si.Language = xNodeLoop.InnerText;  						break;  					case "UnicodeBiDi":  						si.UnicodeBiDirectional = StyleInfo.GetUnicodeBiDirectional(xNodeLoop.InnerText' UnicodeBiDirectionalEnum.Normal);  						break;  					case "Calendar":  						si.Calendar = StyleInfo.GetCalendar(xNodeLoop.InnerText' CalendarEnum.Gregorian);  						break;  					case "NumeralLanguage":  						break;  					case "NumeralVariant":  						break;  				}
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetStyleInfoBackgroundImage,The following statement contains a magic number: encoderParameters.Param[0] = new EncoderParameter(Encoder.Quality' 100L);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetSize,The following statement contains a magic number: switch(u)			// convert to millimeters  			{  				case "in":  					size = (int) (d * 2540m);  					break;  				case "cm":  					size = (int) (d * 1000m);  					break;  				case "mm":  					size = (int) (d * 100m);  					break;  				case "pt":  					return Convert.ToSingle(d);  				case "pc":  					size = (int) (d * (2540m / POINTSIZEM * 12m));  					break;  				default:	   					// Illegal unit  					size = (int) (d * 2540m);  					break;  			}
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetSize,The following statement contains a magic number: switch(u)			// convert to millimeters  			{  				case "in":  					size = (int) (d * 2540m);  					break;  				case "cm":  					size = (int) (d * 1000m);  					break;  				case "mm":  					size = (int) (d * 100m);  					break;  				case "pt":  					return Convert.ToSingle(d);  				case "pc":  					size = (int) (d * (2540m / POINTSIZEM * 12m));  					break;  				default:	   					// Illegal unit  					size = (int) (d * 2540m);  					break;  			}
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetSize,The following statement contains a magic number: switch(u)			// convert to millimeters  			{  				case "in":  					size = (int) (d * 2540m);  					break;  				case "cm":  					size = (int) (d * 1000m);  					break;  				case "mm":  					size = (int) (d * 100m);  					break;  				case "pt":  					return Convert.ToSingle(d);  				case "pc":  					size = (int) (d * (2540m / POINTSIZEM * 12m));  					break;  				default:	   					// Illegal unit  					size = (int) (d * 2540m);  					break;  			}
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetSize,The following statement contains a magic number: switch(u)			// convert to millimeters  			{  				case "in":  					size = (int) (d * 2540m);  					break;  				case "cm":  					size = (int) (d * 1000m);  					break;  				case "mm":  					size = (int) (d * 100m);  					break;  				case "pt":  					return Convert.ToSingle(d);  				case "pc":  					size = (int) (d * (2540m / POINTSIZEM * 12m));  					break;  				default:	   					// Illegal unit  					size = (int) (d * 2540m);  					break;  			}
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetSize,The following statement contains a magic number: switch(u)			// convert to millimeters  			{  				case "in":  					size = (int) (d * 2540m);  					break;  				case "cm":  					size = (int) (d * 1000m);  					break;  				case "mm":  					size = (int) (d * 100m);  					break;  				case "pt":  					return Convert.ToSingle(d);  				case "pc":  					size = (int) (d * (2540m / POINTSIZEM * 12m));  					break;  				default:	   					// Illegal unit  					size = (int) (d * 2540m);  					break;  			}
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetSize,The following statement contains a magic number: switch(u)			// convert to millimeters  			{  				case "in":  					size = (int) (d * 2540m);  					break;  				case "cm":  					size = (int) (d * 1000m);  					break;  				case "mm":  					size = (int) (d * 100m);  					break;  				case "pt":  					return Convert.ToSingle(d);  				case "pc":  					size = (int) (d * (2540m / POINTSIZEM * 12m));  					break;  				default:	   					// Illegal unit  					size = (int) (d * 2540m);  					break;  			}
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetSize,The following statement contains a magic number: return (float) ((double) size / 2540.0 * POINTSIZED);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawString,The following statement contains a magic number: si.FontSize = 10;
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,PasteTableMatrixOrChart,The following statement contains a magic number: sTable.Substring(0' 6) == "<Table"
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitLine,The following statement contains a magic number: rifLoc = new RectangleF(p1.X-RADIUS' p1.Y-RADIUS' 2*RADIUS' 2*RADIUS);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitLine,The following statement contains a magic number: rifLoc = new RectangleF(p1.X-RADIUS' p1.Y-RADIUS' 2*RADIUS' 2*RADIUS);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitLine,The following statement contains a magic number: rifLoc = new RectangleF(p2.X-RADIUS' p2.Y-RADIUS' 2*RADIUS' 2*RADIUS);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitLine,The following statement contains a magic number: rifLoc = new RectangleF(p2.X-RADIUS' p2.Y-RADIUS' 2*RADIUS' 2*RADIUS);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitLine,The following statement contains a magic number: PointF[] pg = new PointF[5];
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitLine,The following statement contains a magic number: pg[0] = pg[4] = new PointF(p1.X-RADIUS' p1.Y-RADIUS);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitLine,The following statement contains a magic number: pg[2] = new PointF(p2.X+RADIUS' p2.Y+RADIUS);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitLine,The following statement contains a magic number: pg[3] = new PointF(p1.X-RADIUS' p1.Y+RADIUS);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitMatrixColumnResize,The following statement contains a magic number: RectangleF cr = new RectangleF(xPos' r.Top' RADIUS * 2' r.Height);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitMatrixRowResize,The following statement contains a magic number: RectangleF mr = new RectangleF(r.Left' yPos' r.Width' RADIUS * 2);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitReportItem,The following statement contains a magic number: RectangleF rifLoc = new RectangleF(rif.X-RADIUS' rif.Y-RADIUS' rif.Width+ 2*RADIUS' rif.Height+2*RADIUS);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitReportItem,The following statement contains a magic number: RectangleF rifLoc = new RectangleF(rif.X-RADIUS' rif.Y-RADIUS' rif.Width+ 2*RADIUS' rif.Height+2*RADIUS);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitReportItem,The following statement contains a magic number: rifLoc = new RectangleF(rif.X-RADIUS' rif.Y-RADIUS' 2*RADIUS' 2*RADIUS);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitReportItem,The following statement contains a magic number: rifLoc = new RectangleF(rif.X-RADIUS' rif.Y-RADIUS' 2*RADIUS' 2*RADIUS);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitReportItem,The following statement contains a magic number: rifLoc = new RectangleF(rif.X+rif.Width-RADIUS' rif.Y-RADIUS' 2*RADIUS' 2*RADIUS);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitReportItem,The following statement contains a magic number: rifLoc = new RectangleF(rif.X+rif.Width-RADIUS' rif.Y-RADIUS' 2*RADIUS' 2*RADIUS);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitReportItem,The following statement contains a magic number: rifLoc = new RectangleF(rif.X-RADIUS' rif.Y+rif.Height-RADIUS' 2*RADIUS' 2*RADIUS);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitReportItem,The following statement contains a magic number: rifLoc = new RectangleF(rif.X-RADIUS' rif.Y+rif.Height-RADIUS' 2*RADIUS' 2*RADIUS);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitReportItem,The following statement contains a magic number: rifLoc = new RectangleF(rif.X+rif.Width-RADIUS' rif.Y+rif.Height-RADIUS' 2*RADIUS' 2*RADIUS);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitReportItem,The following statement contains a magic number: rifLoc = new RectangleF(rif.X+rif.Width-RADIUS' rif.Y+rif.Height-RADIUS' 2*RADIUS' 2*RADIUS);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitReportItem,The following statement contains a magic number: RectangleF innerRect = new RectangleF(rif.Left+RADIUS' rif.Top+RADIUS' rif.Width-RADIUS*2' rif.Height-RADIUS*2);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitReportItem,The following statement contains a magic number: RectangleF innerRect = new RectangleF(rif.Left+RADIUS' rif.Top+RADIUS' rif.Width-RADIUS*2' rif.Height-RADIUS*2);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitTableColumnResize,The following statement contains a magic number: RectangleF cr = new RectangleF(xPos' r.Top' RADIUS * 2' r.Height);
Magic Number,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitTableRowResize,The following statement contains a magic number: RectangleF tr = new RectangleF(r.Left' yPos' r.Width' RADIUS * 2);
Magic Number,fyiReporting.RdlDesign,FiltersCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FiltersCtl.cs,InitValues,The following statement contains a magic number: dgtbFE.Width = 130;
Magic Number,fyiReporting.RdlDesign,FiltersCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FiltersCtl.cs,InitValues,The following statement contains a magic number: dgtbOP.Width = 100;
Magic Number,fyiReporting.RdlDesign,FiltersCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FiltersCtl.cs,InitValues,The following statement contains a magic number: dgtbOP.DropDownWidth = 140;
Magic Number,fyiReporting.RdlDesign,FiltersCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FiltersCtl.cs,InitValues,The following statement contains a magic number: this.dgtbFV.Width = 130;
Magic Number,fyiReporting.RdlDesign,FiltersCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FiltersCtl.cs,Apply,The following statement contains a magic number: string fv = dr.Cells[2].Value as string;
Magic Number,fyiReporting.RdlDesign,FiltersCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FiltersCtl.cs,SwapRow,The following statement contains a magic number: save = tdr.Cells[2].Value;
Magic Number,fyiReporting.RdlDesign,FiltersCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FiltersCtl.cs,SwapRow,The following statement contains a magic number: tdr.Cells[2].Value = fdr.Cells[2].Value;
Magic Number,fyiReporting.RdlDesign,FiltersCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FiltersCtl.cs,SwapRow,The following statement contains a magic number: tdr.Cells[2].Value = fdr.Cells[2].Value;
Magic Number,fyiReporting.RdlDesign,FiltersCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FiltersCtl.cs,SwapRow,The following statement contains a magic number: fdr.Cells[2].Value = save;
Magic Number,fyiReporting.RdlDesign,GroupingCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\GroupingCtl.cs,InitValues,The following statement contains a magic number: dgtbGE.Width = 175;
Magic Number,fyiReporting.RdlDesign,GroupingCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\GroupingCtl.cs,InitValues,The following statement contains a magic number: ts.GridColumnStyles[0].Width = 330;
Magic Number,fyiReporting.RdlDesign,GroupingCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\GroupingCtl.cs,SwapRow,The following statement contains a magic number: save = tdr[2];
Magic Number,fyiReporting.RdlDesign,GroupingCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\GroupingCtl.cs,SwapRow,The following statement contains a magic number: tdr[2] = fdr[2];
Magic Number,fyiReporting.RdlDesign,GroupingCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\GroupingCtl.cs,SwapRow,The following statement contains a magic number: tdr[2] = fdr[2];
Magic Number,fyiReporting.RdlDesign,GroupingCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\GroupingCtl.cs,SwapRow,The following statement contains a magic number: fdr[2] = save;
Magic Number,fyiReporting.RdlDesign,ImageCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ImageCtl.cs,bExternal_Click,The following statement contains a magic number: ofd.FilterIndex = 6;
Magic Number,fyiReporting.RdlDesign,ModulesClassesCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ModulesClassesCtl.cs,BuildCodeModules,The following statement contains a magic number: dgtbCM.Width = 175;
Magic Number,fyiReporting.RdlDesign,ModulesClassesCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ModulesClassesCtl.cs,BuildCodeModules,The following statement contains a magic number: ts.GridColumnStyles[0].Width = 330;
Magic Number,fyiReporting.RdlDesign,ModulesClassesCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ModulesClassesCtl.cs,BuildClasses,The following statement contains a magic number: dgtbCL.Width = 80;
Magic Number,fyiReporting.RdlDesign,ModulesClassesCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ModulesClassesCtl.cs,BuildClasses,The following statement contains a magic number: dgtbIn.Width = 80;
Magic Number,fyiReporting.RdlDesign,ModulesClassesCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ModulesClassesCtl.cs,BuildClasses,The following statement contains a magic number: string[] rowValues = new string[2];
Magic Number,fyiReporting.RdlDesign,ModulesClassesCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ModulesClassesCtl.cs,BuildClasses,The following statement contains a magic number: ts.GridColumnStyles[0].Width = 200;
Magic Number,fyiReporting.RdlDesign,ModulesClassesCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ModulesClassesCtl.cs,BuildClasses,The following statement contains a magic number: ts.GridColumnStyles[1].Width = 130;
Magic Number,fyiReporting.RdlDesign,ModulesClassesCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ModulesClassesCtl.cs,ApplyClasses,The following statement contains a magic number: !HasRows(this._DTCL' 2)
Magic Number,fyiReporting.RdlDesign,PositionCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\PositionCtl.cs,InitializeComponent,The following statement contains a magic number: this.tbZIndex.Maximum = new decimal(new int[] {              2147483647'              0'              0'              0});
Magic Number,fyiReporting.RdlDesign,PositionCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\PositionCtl.cs,InitializeComponent,The following statement contains a magic number: this.tbColSpan.Maximum = new decimal(new int[] {              1000'              0'              0'              0});
Magic Number,fyiReporting.RdlDesign,RdlEditPreview,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlEditPreview.cs,RdlEditPreview,The following statement contains a magic number: dcTopRuler.Height = 14;
Magic Number,fyiReporting.RdlDesign,RdlEditPreview,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlEditPreview.cs,RdlEditPreview,The following statement contains a magic number: dcLeftRuler.Width = 14;
Magic Number,fyiReporting.RdlDesign,RdlEditPreview,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlEditPreview.cs,ConfigureScintillaStyle,The following statement contains a magic number: scintilla.Styles[Style.Default].Size = 10;
Magic Number,fyiReporting.RdlDesign,RdlEditPreview,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlEditPreview.cs,ConfigureScintillaStyle,The following statement contains a magic number: scintilla.Margins[0].Width = 40;
Magic Number,fyiReporting.RdlDesign,RdlEditPreview,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlEditPreview.cs,ConfigureScintillaStyle,The following statement contains a magic number: scintilla.Margins[2].Type = MarginType.Symbol;
Magic Number,fyiReporting.RdlDesign,RdlEditPreview,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlEditPreview.cs,ConfigureScintillaStyle,The following statement contains a magic number: scintilla.Margins[2].Mask = Marker.MaskFolders;
Magic Number,fyiReporting.RdlDesign,RdlEditPreview,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlEditPreview.cs,ConfigureScintillaStyle,The following statement contains a magic number: scintilla.Margins[2].Sensitive = true;
Magic Number,fyiReporting.RdlDesign,RdlEditPreview,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlEditPreview.cs,ConfigureScintillaStyle,The following statement contains a magic number: scintilla.Margins[2].Width = 20;
Magic Number,fyiReporting.RdlDesign,RdlEditPreview,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlEditPreview.cs,ConfigureScintillaStyle,The following statement contains a magic number: scintilla.Margins[2].Width = 20;
Magic Number,fyiReporting.RdlDesign,RdlEditPreview,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlEditPreview.cs,ConfigureScintillaStyle,The following statement contains a magic number: scintilla.Styles[Style.Default].Size = 10;
Magic Number,fyiReporting.RdlDesign,RdlEditPreview,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlEditPreview.cs,ShowEditLines,The following statement contains a magic number: scintilla1.Margins[0].Width = bShow ? 40 : 0;
Magic Number,fyiReporting.RdlDesign,RdlEditPreview,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlEditPreview.cs,HighlightWord,The following statement contains a magic number: scintilla1.Indicators[SEARCH_INDICATOR_NUM].OutlineAlpha = 50;
Magic Number,fyiReporting.RdlDesign,RdlEditPreview,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlEditPreview.cs,HighlightWord,The following statement contains a magic number: scintilla1.Indicators[SEARCH_INDICATOR_NUM].Alpha = 30;
Magic Number,fyiReporting.RdlDesign,RdlEditPreview,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlEditPreview.cs,InitializeComponent,The following statement contains a magic number: this.rdlPreview.Zoom = 0.5495112F;
Magic Number,fyiReporting.RdlDesign,ReportNames,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ReportNames.cs,GenerateName,The following statement contains a magic number: basename = basename.Substring(4);
Magic Number,fyiReporting.RdlDesign,SimpleButton,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SimpleButton.cs,DrawPanelPaint,The following statement contains a magic number: int x = (this.Width - this.Image.Width) / 2;
Magic Number,fyiReporting.RdlDesign,SimpleButton,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SimpleButton.cs,DrawPanelPaint,The following statement contains a magic number: int y = (this.Height - this.Image.Height) / 2;
Magic Number,fyiReporting.RdlDesign,SimpleToggle,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SimpleToggle.cs,DrawPanelPaint,The following statement contains a magic number: int x = (this.Width - this.Image.Width) / 2;
Magic Number,fyiReporting.RdlDesign,SimpleToggle,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SimpleToggle.cs,DrawPanelPaint,The following statement contains a magic number: int y = (this.Height - this.Image.Height) / 2;
Magic Number,fyiReporting.RdlDesign,SortingCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SortingCtl.cs,InitValues,The following statement contains a magic number: dgtbExpr.Width = 240;
Magic Number,fyiReporting.RdlDesign,SortingCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SortingCtl.cs,InitValues,The following statement contains a magic number: dgtbDir.Width = 90;
Magic Number,fyiReporting.RdlDesign,StyleBorderCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleBorderCtl.cs,GetSize,The following statement contains a magic number: size = 10;
Magic Number,fyiReporting.RdlDesign,StyleTextCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleTextCtl.cs,ApplyChanges,The following statement contains a magic number: float size=10;
Magic Number,fyiReporting.RdlDesign,StyleTextCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleTextCtl.cs,ApplyChanges,The following statement contains a magic number: size = 10;
Magic Number,fyiReporting.RdlDesign,StyleTextCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleTextCtl.cs,bFont_Click,The following statement contains a magic number: float size=10;
Magic Number,fyiReporting.RdlDesign,StyleTextCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleTextCtl.cs,bFont_Click,The following statement contains a magic number: size = 10;
Magic Number,fyiReporting.RdlDesign,SubreportCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SubreportCtl.cs,InitValues,The following statement contains a magic number: dgtbName.Width = 75;
Magic Number,fyiReporting.RdlDesign,SubreportCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SubreportCtl.cs,InitValues,The following statement contains a magic number: this.dgtbValue.Width = 75;
Magic Number,fyiReporting.RdlDesign,SubreportCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SubreportCtl.cs,InitValues,The following statement contains a magic number: string[] rowValues = new string[2];
Magic Number,fyiReporting.RdlDesign,SubreportCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SubreportCtl.cs,InitValues,The following statement contains a magic number: ts.GridColumnStyles[0].Width = 140;
Magic Number,fyiReporting.RdlDesign,SubreportCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SubreportCtl.cs,InitValues,The following statement contains a magic number: ts.GridColumnStyles[1].Width = 140;
Magic Number,fyiReporting.RdlDesign,SubreportCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SubreportCtl.cs,bRefreshParms_Click,The following statement contains a magic number: string[] rowValues = new string[2];
Magic Number,fyiReporting.RdlDesign,SubreportCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SubreportCtl.cs,GetReport,The following statement contains a magic number: r.ErrorMaxSeverity > 4
Missing Default,fyiReporting.RdlDesign,ChartAxisCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ChartAxisCtl.cs,bExpr_Click,The following switch statement is missing a default case: switch (b.Tag as string)  			{  				case "min":  					c = this.tbMin;  					break;  				case "max":  					c = this.tbMax;  					break;  				case "majorinterval":  					c = this.tbMajorInterval;  					break;  				case "minorinterval":  					c = this.tbMinorInterval;  					break;  			}
Missing Default,fyiReporting.RdlDesign,RdlScriptLexer,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlScriptLexer.cs,StyleText,The following switch statement is missing a default case: switch (state)  				{  					case LexerState.Unknown:  						if (c == '"' || c == '\'')  						{  							// Start of "string"  							stringStartChar = c;  							scintilla.SetStyling(1' (int)Style.String);  							state = LexerState.String;  						}  						else if (c == '{')  						{  							state = LexerState.Braces;  							goto REPROCESS;  						}  						else if (Char.IsDigit(c))  						{  							state = LexerState.Number;  							goto REPROCESS;  						}  						else if (Char.IsLetter(c))  						{  							state = LexerState.Identifier;  							goto REPROCESS;  						}  						else if (operators.Any(x => x[0] == c))  						{  							state = LexerState.Operator;  							goto REPROCESS;  						}  						else  						{  							// Everything else  							scintilla.SetStyling(1' (int)Style.Default);  						}  						break;    					case LexerState.String:  						if (c == stringStartChar)  						{  							length++;  							scintilla.SetStyling(length' (int)Style.String);  							length = 0;  							state = LexerState.Unknown;  						}  						else  						{  							length++;  						}  						break;    					case LexerState.Braces:  						if (c == '}')  						{  							length++;  							var style = Style.Identifier;  							var identifier = scintilla.GetTextRange(startPos - length + 2' length - 2);  							if (identifier.Length == 0)  							{  								style = Style.Error;  							}  							else if (identifier[0] == '!')  							{  								if (userInfo.Contains(identifier.Substring(1)))  									style = Style.UserInfo;  								else  									style = Style.Error;  							}  							else if (identifier[0] == '@')  							{  								if (globals.Contains(identifier.Substring(1)))  									style = Style.Globals;  								else  									style = Style.Error;  							}  							else if (identifier[0] == '?' && parameters != null)  							{  								if (parameters.Contains(identifier.Substring(1)))  									style = Style.Parameter;  								else  									style = Style.Error;  							}  							else  							{  								if (fields.Contains(identifier))  									style = Style.Field;  								else  									style = Style.Error;  							}    							scintilla.SetStyling(length' (int)style);  							length = 0;  							state = LexerState.Unknown;  						}  						else  							length++;  						break;    					case LexerState.Number:  						if (Char.IsDigit(c) || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F') || c == 'x')  						{  							length++;  						}  						else  						{  							scintilla.SetStyling(length' (int)Style.Number);  							length = 0;  							state = LexerState.Unknown;  							goto REPROCESS;  						}  						break;    					case LexerState.Identifier:  						if (!EOF && (Char.IsLetterOrDigit(c) || c == '.' || c == '!' || c == '_'))  						{  							length++;  						}  						else  						{  							var style = Style.Identifier;  							var identifier = scintilla.GetTextRange(startPos - length' length);  							  							var endFirstWord = identifier.IndexOf('.');  							if (endFirstWord != -1)  							{  								var firstWord = identifier.Substring(0' endFirstWord);  								var secondWord = identifier.Substring(endFirstWord + 1);  								if (calssMethods.ContainsKey(firstWord) && calssMethods[firstWord].Contains(secondWord))  								{  									style = Style.Method;  								}  								else  									style = Style.Error;  							}    							endFirstWord = identifier.IndexOf('!');  							if (endFirstWord != -1)  							{  								var firstWord = identifier.Substring(0' endFirstWord);  								var secondWord = identifier.Substring(endFirstWord +1);  								if (firstWord == "User")  								{  									if (userInfo.Contains(secondWord))  										style = Style.UserInfo;  									else  										style = Style.Error;  								}  								if (firstWord == "Globals")  								{  									if (globals.Contains(secondWord))  										style = Style.Globals;  									else  										style = Style.Error;  								}  								if (firstWord == "Parameters")  								{  									if (globals.Contains(secondWord))  										style = Style.Parameter;  									else  										style = Style.Error;  								}  								if (firstWord == "Fields")  								{  									var field = secondWord.Split('.');  									if (field.Length == 2 && fields.Contains(field[0])   										&& (field[1] == "Value" || field[1] == "IsMissing"))  										style = Style.Field;  									else  										style = Style.Error;  								}    							}    							if (simpleMethods.Contains(identifier))  								style = Style.Method;    							if (aggrMethods.Contains(identifier))  								style = Style.AggrMethod;    							scintilla.SetStyling(length' (int)style);  							length = 0;  							state = LexerState.Unknown;  							if(!EOF)  								goto REPROCESS;  						}  						break;  					case LexerState.Operator:  						var cur = scintilla.GetTextRange(startPos - length' length +1);  						if (operators.Any(x => x.StartsWith(cur)))  						{  							length++;  						}  						else  						{  							cur = scintilla.GetTextRange(startPos - length' length);  							Style style;  							if (operators.Contains(cur))  							{  								//length++;  								style = Style.Operator;  							}  							else  							{  								style = Style.Error;  							}  							scintilla.SetStyling(length' (int)style);  							length = 0;  							state = LexerState.Unknown;  							goto REPROCESS;  						}  						break;  				}
Missing Default,fyiReporting.RdlDesign,BackgroundCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\BackgroundCtl.cs,bExpr_Click,The following switch statement is missing a default case: switch (b.Tag as string)  			{  				case "bcolor":  					c = cbBackColor;  					bColor = true;  					break;  				case "bgradient":  					c = cbGradient;  					break;  				case "bendcolor":  					c = cbEndColor;  					bColor = true;  					break;                  case "database":                      c = cbValueDatabase;                      break;                  case "embedded":                      c = cbValueEmbedded;                      break;                  case "external":                      c = tbValueExternal;                      break;                  case "repeat":                      c = cbRepeat;                      break;                  case "mime":                      c = cbMIMEType;                      break;              }
Missing Default,fyiReporting.RdlDesign,DesignCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignCtl.Designer.cs,DrawPanelMouseMove,The following switch statement is missing a default case: switch (_MouseDownNode.Name)  					{  						case "TableColumn":  						case "RowGrouping":  						case "MatrixColumn":  							hle = HitLocationEnum.TableColumnResize;  							if (e.X == _MousePosition.X)  								break;    							if (_DrawPanel.TableColumnResize(_MouseDownNode' e.X - _MousePosition.X))  							{  								SelectionMoved(this' new EventArgs());  								ReportChanged(this' new EventArgs());  								_AdjustScroll = true;  								_DrawPanel.Invalidate();     							}  							else	// trying to drag into invalid area; disallow  							{  								Cursor.Position = this.PointToScreen(_MousePosition);  								newMousePosition = this.PointToClient(Cursor.Position);  							}  							break;  						case "TableRow":  						case "ColumnGrouping":  						case "MatrixRow":  							hle = HitLocationEnum.TableRowResize;  							if (e.Y == _MousePosition.Y)  								break;  							if (_DrawPanel.TableRowResize(_MouseDownNode' e.Y - _MousePosition.Y))  							{  								SelectionMoved(this' new EventArgs());  								ReportChanged(this' new EventArgs());  								_DrawPanel.Invalidate();     							}  							else	// trying to drag into invalid area; disallow  							{  								Cursor.Position = this.PointToScreen(_MousePosition);  								newMousePosition = this.PointToClient(Cursor.Position);  							}  							break;  						case "Height":  							if (e.Y == _MousePosition.Y)  								break;  							if (_DrawPanel.ChangeHeight(_MouseDownNode' e.Y - _MousePosition.Y' 0))  							{  								ReportChanged(this' new EventArgs());                                  HeightChanged(this' new HeightEventArgs(_MouseDownNode' b.InnerText));  								_DrawPanel.Invalidate();     								_AdjustScroll = true;		// this will force scroll bars to be adjusted on MouseUp  							}  							else	// trying to drag into invalid area; disallow  							{  								Cursor.Position = this.PointToScreen(_MousePosition);  								newMousePosition = this.PointToClient(Cursor.Position);  							}                              // Force scroll when off end of page                              //if (e.Y > _DrawPanel.Height)                              //{                              //    int hs = _vScroll.Value + _vScroll.SmallChange;                              //    _vScroll.Value = Math.Min(_vScroll.Maximum' hs);                              //    _DrawPanel.Refresh();                              //}                                break;  						case "Textbox":  						case "Image":  						case "Rectangle":  						case "List":  						case "Table":                          case "fyi:Grid":  						case "Matrix":  						case "Chart":  						case "Subreport":  						case "Line":                          case "CustomReportItem":  							hle = this._MouseDownLoc;  							if (e.Y == _MousePosition.Y && e.X == _MousePosition.X)  								break;    							if (_DrawPanel.MoveSelectedItems(e.X - _MousePosition.X' e.Y - _MousePosition.Y' this._MouseDownLoc))  							{  								SelectionMoved(this' new EventArgs());  								ReportChanged(this' new EventArgs());  								_DrawPanel.Invalidate();     								_AdjustScroll = true;  							}  							else	// trying to drag into invalid area; disallow  							{  								Cursor.Position = this.PointToScreen(_MousePosition);  								newMousePosition = this.PointToClient(Cursor.Position);  							}    							break;  					}
Missing Default,fyiReporting.RdlDesign,FindTab,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FindTab.Designer.cs,tcFRG_SelectedIndexChanged,The following switch statement is missing a default case: switch (tag)              {                  case "find":                      this.AcceptButton = btnNext;                      this.CancelButton = btnCancel;                      txtFind.Focus();                      break;                  case "replace":                      this.AcceptButton = this.btnFindNext;                      this.CancelButton = this.bCloseReplace;                      txtFindR.Focus();                      break;                  case "goto":                      this.AcceptButton = btnGoto;                      this.CancelButton = this.bCloseGoto;                      txtLine.Focus();                      break;              }
Missing Default,fyiReporting.RdlDesign,FontCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FontCtl.cs,InitTextStyles,The following switch statement is missing a default case: switch (lNode.Name)  				{  					case "FontStyle":  						sFontStyle = lNode.InnerText;  						break;  					case "FontFamily":  						sFontFamily = lNode.InnerText;  						break;  					case "FontWeight":  						sFontWeight = lNode.InnerText;  						break;  					case "FontSize":  						sFontSize = lNode.InnerText;  						break;  					case "TextDecoration":  						sTextDecoration = lNode.InnerText;  						break;  					case "TextAlign":  						sHorzAlign = lNode.InnerText;  						break;  					case "VerticalAlign":  						sVerticalAlign = lNode.InnerText;  						break;  					case "Color":  						sColor = lNode.InnerText;  						break;  					case "Format":  						sFormat = lNode.InnerText;  						break;  					case "Direction":  						sDirection = lNode.InnerText;  						break;  					case "WritingMode":  						sWritingMode = lNode.InnerText;  						break;  				}
Missing Default,fyiReporting.RdlDesign,FontCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\FontCtl.cs,bExpr_Click,The following switch statement is missing a default case: switch (b.Tag as string)  			{  				case "family":  					c = cbFontFamily;  					break;  				case "style":  					c = cbFontStyle;  					break;  				case "color":  					c = cbColor;  					bColor = true;  					break;  				case "size":  					c = cbFontSize;  					break;  				case "weight":  					c = cbFontWeight;  					break;  				case "decoration":  					c = cbTextDecoration;  					break;  				case "halign":  					c = cbHorzAlign;  					break;  				case "valign":  					c = cbVerticalAlign;  					break;  				case "direction":  					c = cbDirection;  					break;  				case "writing":  					c = cbWritingMode;  					break;  				case "format":  					c = cbFormat;  					break;  			}
Missing Default,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,DesignTabChanged,The following switch statement is missing a default case: switch (tab)              {                  case DesignTabs.Edit:                      bEnableEdit = true;                      if (_PropertiesAutoHide)                          bShowProp = false;                      break;                  case DesignTabs.Design:                      bEnableDesign = true;                      break;                  case DesignTabs.Preview:                      if (_PropertiesAutoHide)                          bShowProp = false;                      bEnablePreview = true;                      break;              }
Missing Default,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,DesignTabChanged,The following switch statement is missing a default case: switch (mc.ZoomMode)                      {                          case ZoomEnum.FitWidth:                              zText = "Fit Width";                              break;                          case ZoomEnum.FitPage:                              zText = "Fit Page";                              break;                          case ZoomEnum.UseZoom:                              if (mc.Zoom == 1)                                  zText = "Actual Size";                              else                                  zText = string.Format("{0:0}"' mc.Zoom * 100f);                              break;                      }
Missing Default,fyiReporting.RdlDesign,RdlDesigner,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlDesigner.Designer.cs,SaveStartupState,The following switch statement is missing a default case: switch (_PropertiesLocation)                  {                      case DockStyle.Left:                          loc = "left";                          break;                      case DockStyle.Top:                          loc = "top";                          break;                      case DockStyle.Bottom:                          loc = "bottom";                          break;                  }
Missing Default,fyiReporting.RdlDesign,RdlUserControl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlUserControl.cs,DesignTabChanged,The following switch statement is missing a default case: switch (rdlEditPreview1.DesignTab)              {                  case DesignTabs.Edit:                      bEnableEdit = true;                      break;                  case DesignTabs.Design:                      bEnableDesign = true;                      break;                  case DesignTabs.Preview:                      bEnablePreview = true;                      break;              }
Missing Default,fyiReporting.RdlDesign,RdlUserControl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlUserControl.cs,DesignTabChanged,The following switch statement is missing a default case: switch (ZoomMode)                  {                      case ZoomEnum.FitWidth:                          zText = "Fit Width";                          break;                      case ZoomEnum.FitPage:                          zText = "Fit Page";                          break;                      case ZoomEnum.UseZoom:                          if (Zoom == 1)                              zText = "Actual Size";                          else                              zText = string.Format("{0:0}"' Zoom * 100f);                          break;                  }
Missing Default,fyiReporting.RdlDesign,SingleCtlDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SingleCtlDialog.Designer.cs,SingleCtlDialog,The following switch statement is missing a default case: switch (type)              {                  case SingleCtlTypeEnum.InteractivityCtl:                      title = Strings.Tabs_Interactivity;                      uc = new InteractivityCtl(dxDraw' sNodes);                      break;                  case SingleCtlTypeEnum.VisibilityCtl:                      title = Strings.Tabs_Visibility;                      uc = new VisibilityCtl(dxDraw' sNodes);                      break;                  case SingleCtlTypeEnum.BorderCtl:                      title = Strings.Tabs_Borders;                      uc = new StyleBorderCtl(dxDraw' names' sNodes);                      break;                  case SingleCtlTypeEnum.FontCtl:                      title = Strings.Tabs_Font;                      uc = new FontCtl(dxDraw' names' sNodes);                      break;                  case SingleCtlTypeEnum.BackgroundCtl:                      title = Strings.Tabs_Background;                      uc = new BackgroundCtl(dxDraw' names' sNodes);                      break;                  case SingleCtlTypeEnum.ImageCtl:                      title = Strings.Tabs_Image;                      uc = new ImageCtl(dxDraw' sNodes);                      break;                  case SingleCtlTypeEnum.SubreportCtl:                      title = Strings.Tabs_Subreport;                      uc = new SubreportCtl(dxDraw' sNodes[0]);                      break;                  case SingleCtlTypeEnum.FiltersCtl:                      title = Strings.Tabs_Filter;                      uc = new FiltersCtl(dxDraw' sNodes[0]);                      break;                  case SingleCtlTypeEnum.SortingCtl:                      title = Strings.Tabs_Sorting;                      uc = new SortingCtl(dxDraw' sNodes[0]);                      break;                  case SingleCtlTypeEnum.GroupingCtl:                      title = Strings.Tabs_Grouping;                      uc = new GroupingCtl(dxDraw' sNodes[0]);                      break;                  case SingleCtlTypeEnum.ReportParameterCtl:                      title = Strings.Tabs_ReportParameters;                      uc = new ReportParameterCtl(dxDraw);                      break;                  case SingleCtlTypeEnum.ReportCodeCtl:                      title = Strings.Tabs_Code;                      uc = new CodeCtl(dxDraw);                      break;                  case SingleCtlTypeEnum.ReportModulesClassesCtl:                      title = Strings.Tabs_ModulesAndClasses;                      uc = new ModulesClassesCtl(dxDraw);                      break;              }
Missing Default,fyiReporting.RdlDesign,SingleCtlDialog,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\SingleCtlDialog.Designer.cs,bOK_Click,The following switch statement is missing a default case: switch (_Type)              {                  case SingleCtlTypeEnum.InteractivityCtl:                      c = Strings.SingleCtlDialog_Undo_InteractivityChange;                      break;                  case SingleCtlTypeEnum.VisibilityCtl:                      c = Strings.SingleCtlDialog_Undo_VisibilityChange;                      break;                  case SingleCtlTypeEnum.BorderCtl:                      c = Strings.SingleCtlDialog_Undo_BorderChange;                      break;                  case SingleCtlTypeEnum.FontCtl:                      c = Strings.SingleCtlDialog_Undo_AppearanceChange;                      break;                  case SingleCtlTypeEnum.BackgroundCtl:                  case SingleCtlTypeEnum.BackgroundImage:                      c = Strings.SingleCtlDialog_Undo_BackgroundChange;                      break;                  case SingleCtlTypeEnum.FiltersCtl:                      c = Strings.SingleCtlDialog_Undo_FiltersChange;                      break;                  case SingleCtlTypeEnum.SortingCtl:                      c = Strings.SingleCtlDialog_Undo_SortChange;                      break;                  case SingleCtlTypeEnum.GroupingCtl:                      c = Strings.SingleCtlDialog_Undo_GroupingChange;                      break;                  case SingleCtlTypeEnum.ReportCodeCtl:                      c = Strings.SingleCtlDialog_Undo_ReportCodeChange;                      break;                  case SingleCtlTypeEnum.ImageCtl:                      c = Strings.SingleCtlDialog_Undo_ImageChange;                      break;                  case SingleCtlTypeEnum.SubreportCtl:                      c = Strings.SingleCtlDialog_Undo_SubreportChange;                      break;                  case SingleCtlTypeEnum.ReportModulesClassesCtl:                      c = Strings.SingleCtlDialog_Undo_ReportModules_ClassesChange;                      break;              }
Missing Default,fyiReporting.RdlDesign,StaticSeriesCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StaticSeriesCtl.cs,FunctionButtonClick,The following switch statement is missing a default case: switch (myButton.Name)              {                  case ("btnSeriesName"):                      functionBox(txtSeriesName);                      break;                  case ("btnDataValue"):                      functionBox(txtDataValue);                      break;                  case ("btnLabelValue"):                      functionBox(txtLabelValue);                      break;                  case ("btnX"):                      functionBox(txtX);                      break;              }
Missing Default,fyiReporting.RdlDesign,VisibilityCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\VisibilityCtl.cs,bExpr_Click,The following switch statement is missing a default case: switch (b.Tag as string)  			{  				case "visibility":  					c = tbHidden;  					break;  			}
Missing Default,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetRectReportPrimaryRegions,The following switch statement is missing a default case: switch (xNodeLoop.Name)  				{  					case "Height":  						height = GetSize(xNodeLoop.InnerText);  						break;  					case "ReportItems":  						items = xNodeLoop;  						break;  				}
Missing Default,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetRectReportItems,The following switch statement is missing a default case: switch (xNodeLoop.Name)  				{  					case "Textbox":  					case "Image":  					case "Subreport":  					case "Chart":  					case "Line":                      case "CustomReportItem":  						rir = GetRectRI(xNodeLoop' r);  						break;  					case "Table":                      case "fyi:Grid":  						rir = GetRectTable(xNodeLoop' r);  						break;  					case "Rectangle":  					case "List":  						rir = GetRectListRectangle(xNodeLoop' r);  						break;  					case "Matrix":  						rir = GetRectMatrix(xNodeLoop' r);  						break;  				}
Missing Default,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetReportItemContainer,The following switch statement is missing a default case: switch (lNode.Name)  				{  					case "List":  					case "Body":  					case "PageHeader":  					case "PageFooter":  					case "Rectangle":  					case "Table":                      case "fyi:Grid":                      case "Matrix":  						return lNode;  				}
Missing Default,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,RightMost,The following switch statement is missing a default case: switch (xNodeLoop.Name)  				{  					case "Body":  					case "PageHeader":  					case "PageFooter":  						rm = Math.Max(rm' RightMostRI(GetNamedChildNode(xNodeLoop' "ReportItems")));  						break;  				}
Missing Default,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,ProcessReport,The following switch statement is missing a default case: switch (xNodeLoop.Name)  				{  					case "Body":  						bodyNode = xNodeLoop;  						break;  					case "PageHeader":  						phNode = xNodeLoop;  						break;  					case "PageFooter":  						pfNode = xNodeLoop;  						break;  					case "Width":  						rWidth = GetSize(xNodeLoop.InnerText);  						break;  					case "PageHeight":  						pHeight = GetSize(xNodeLoop.InnerText);  						break;  					case "PageWidth":  						pWidth = GetSize(xNodeLoop.InnerText);  						break;  					case "LeftMargin":  						lMargin = GetSize(xNodeLoop.InnerText);  						break;  					case "RightMargin":  						rMargin = GetSize(xNodeLoop.InnerText);  						break;  					case "TopMargin":  						tMargin = GetSize(xNodeLoop.InnerText);  						break;  					case "BottomMargin":  						bMargin = GetSize(xNodeLoop.InnerText);  						break;  				}
Missing Default,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawReportPrimaryRegions,The following switch statement is missing a default case: switch (xNodeLoop.Name)  				{  					case "Height":  						height = GetSize(xNodeLoop.InnerText);  						break;  					case "ReportItems":  						items = xNodeLoop;  						break;  				}
Missing Default,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawReportItems,The following switch statement is missing a default case: switch (xNodeLoop.Name)  				{  					case "Textbox":  						rir = DrawTextbox(xNodeLoop' r);  						break;  					case "Table":                      case "fyi:Grid":  						rir = DrawTable(xNodeLoop' r);  						break;  					case "Image":  						rir = DrawImage(xNodeLoop' r);  						break;                      case "CustomReportItem":                          rir = DrawCustomReportItem(xNodeLoop' r);                          break;  					case "Rectangle":  						rir = DrawRectangle(xNodeLoop' r);  						break;  					case "List":  						rir = DrawList(xNodeLoop' r);  						break;  					case "Matrix":  						rir = DrawMatrix(xNodeLoop' r);  						break;  					case "Subreport":  						rir = DrawSubreport(xNodeLoop' r);  						break;  					case "Chart":  						rir = DrawChart(xNodeLoop' r);  						break;  					case "Line":  						rir = DrawLine(xNodeLoop' r);  						break;  				}
Missing Default,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetReportItemRect,The following switch statement is missing a default case: switch (xNodeLoop.Name)  				{  					case "Top":  						t = GetSize(xNodeLoop.InnerText);  						break;  					case "Left":  						l = GetSize(xNodeLoop.InnerText);  						break;  					case "Height":  						h = GetSize(xNodeLoop.InnerText);  						break;  					case "Width":  						w = GetSize(xNodeLoop.InnerText);  						break;  				}
Missing Default,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetLineEnds,The following switch statement is missing a default case: switch (xNodeLoop.Name)  				{  					case "Top":  						y = GetSize(xNodeLoop.InnerText);  						break;  					case "Left":  						x = GetSize(xNodeLoop.InnerText);  						break;  					case "Height":  						h = GetSize(xNodeLoop.InnerText);  						break;  					case "Width":  						w = GetSize(xNodeLoop.InnerText);  						break;  				}
Missing Default,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetTableRows,The following switch statement is missing a default case: switch (cNode.Name)                  {                      case "Header":                          header = cNode;                          break;                      case "Details":                          details = cNode;                          break;                      case "Footer":                          footer = cNode;                          break;                      case "TableGroups":                          tblGroups = cNode;                          break;                  }
Missing Default,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetStyleInfo,The following switch statement is missing a default case: switch (xNodeLoop.Name)  				{  					case "BorderColor":  						GetStyleInfoBorderColor(xNodeLoop' si);  						break;  					case "BorderStyle":  						GetStyleInfoBorderStyle(xNodeLoop' si);  						break;  					case "BorderWidth":  						GetStyleInfoBorderWidth(xNodeLoop' si);  						break;  					case "BackgroundColor":  						si.BackgroundColor = GetStyleColor(xNodeLoop.InnerText);                          if (si.BackgroundColor.IsEmpty)                              si.BackgroundColorText = xNodeLoop.InnerText;                          break;  					case "BackgroundGradientType":  						si.BackgroundGradientType = StyleInfo.GetBackgroundGradientType(xNodeLoop.InnerText' BackgroundGradientTypeEnum.None);  						break;  					case "BackgroundGradientEndColor":  						si.BackgroundGradientEndColor = GetStyleColor(xNodeLoop.InnerText);  						break;  					case "BackgroundImage":  						GetStyleInfoBackgroundImage(xNodeLoop' si);  						break;  					case "FontStyle":  						si.FontStyle = StyleInfo.GetFontStyle(xNodeLoop.InnerText' FontStyleEnum.Normal);  						break;  					case "FontFamily":  						si.FontFamily = xNodeLoop.InnerText[0] == '='? "Arial": xNodeLoop.InnerText;  						break;  					case "FontSize":  						si.FontSize = xNodeLoop.InnerText[0] == '='? 10: GetSize(xNodeLoop.InnerText);  						break;  					case "FontWeight":  						si.FontWeight = StyleInfo.GetFontWeight(xNodeLoop.InnerText' FontWeightEnum.Normal);  						break;  					case "Format":  						break;  					case "TextDecoration":  						si.TextDecoration = StyleInfo.GetTextDecoration(xNodeLoop.InnerText' TextDecorationEnum.None);  						break;  					case "TextAlign":  						si.TextAlign = StyleInfo.GetTextAlign(xNodeLoop.InnerText' TextAlignEnum.General);  						break;  					case "VerticalAlign":  						si.VerticalAlign = StyleInfo.GetVerticalAlign(xNodeLoop.InnerText' VerticalAlignEnum.Middle);  						break;  					case "Color":  						si.Color = GetStyleColor(xNodeLoop.InnerText);                          if (si.Color.IsEmpty)                              si.ColorText = xNodeLoop.InnerText;  						break;  					case "PaddingLeft":  						si.PaddingLeft = GetSize(xNodeLoop.InnerText);  						break;  					case "PaddingRight":  						si.PaddingRight = GetSize(xNodeLoop.InnerText);  						break;  					case "PaddingTop":  						si.PaddingTop = GetSize(xNodeLoop.InnerText);  						break;  					case "PaddingBottom":  						si.PaddingBottom = GetSize(xNodeLoop.InnerText);  						break;  					case "LineHeight":  						si.LineHeight = GetSize(xNodeLoop.InnerText);   						break;  					case "Direction":  						si.Direction = StyleInfo.GetDirection(xNodeLoop.InnerText' DirectionEnum.LTR);  						break;  					case "WritingMode":  						si.WritingMode = StyleInfo.GetWritingMode(xNodeLoop.InnerText' WritingModeEnum.lr_tb);  						break;  					case "Language":  						si.Language = xNodeLoop.InnerText;  						break;  					case "UnicodeBiDi":  						si.UnicodeBiDirectional = StyleInfo.GetUnicodeBiDirectional(xNodeLoop.InnerText' UnicodeBiDirectionalEnum.Normal);  						break;  					case "Calendar":  						si.Calendar = StyleInfo.GetCalendar(xNodeLoop.InnerText' CalendarEnum.Gregorian);  						break;  					case "NumeralLanguage":  						break;  					case "NumeralVariant":  						break;  				}
Missing Default,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetStyleInfoBorderColor,The following switch statement is missing a default case: switch (xNodeLoop.Name)  				{  					case "Default":  						dColor = GetStyleColor(xNodeLoop.InnerText);  						break;  					case "Left":  						si.BColorLeft = GetStyleColor(xNodeLoop.InnerText);  						break;  					case "Right":  						si.BColorRight = GetStyleColor(xNodeLoop.InnerText);  						break;  					case "Top":  						si.BColorTop = GetStyleColor(xNodeLoop.InnerText);  						break;  					case "Bottom":  						si.BColorBottom = GetStyleColor(xNodeLoop.InnerText);  						break;  				}
Missing Default,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetStyleInfoBorderStyle,The following switch statement is missing a default case: switch (xNodeLoop.Name)  				{  					case "Default":  						def = GetBorderStyle(xNodeLoop.InnerText' BorderStyleEnum.None);  						break;  					case "Left":  						l = xNodeLoop.InnerText;   						break;  					case "Right":  						r = xNodeLoop.InnerText;   						break;  					case "Top":  						t = xNodeLoop.InnerText;   						break;  					case "Bottom":  						b = xNodeLoop.InnerText;   						break;  				}
Missing Default,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetStyleInfoBorderWidth,The following switch statement is missing a default case: switch (xNodeLoop.Name)  				{  					case "Default":  						def = GetSize(xNodeLoop.InnerText);  						break;  					case "Left":  						l = xNodeLoop.InnerText;  						break;  					case "Right":  						r = xNodeLoop.InnerText;  						break;  					case "Top":  						t = xNodeLoop.InnerText;  						break;  					case "Bottom":  						b = xNodeLoop.InnerText;  						break;  				}
Missing Default,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetStyleInfoBackgroundImage,The following switch statement is missing a default case: switch (xNodeLoop.Name)                      {	// TODO                          case "Source":                              if (!xNodeLoop.InnerText.StartsWith("="))                              {                                  if (xNodeLoop.InnerText == "External" ||                                      xNodeLoop.InnerText == "Embedded")                                      source = xNodeLoop.InnerText;                              }                              break;                          case "Value":                              if (!xNodeLoop.InnerText.StartsWith("="))                              {                                  val = xNodeLoop.InnerText;                              }                              break;                          case "MIMEType":    // MimeType doesn't help us                              break;                          case "BackgroundRepeat":                              switch (xNodeLoop.InnerText.ToLowerInvariant())                              {                                  case "repeat":                                      repeat = ImageRepeat.Repeat;                                      break;                                  case "norepeat":                                      repeat = ImageRepeat.NoRepeat;                                      break;                                  case "repeatx":                                      repeat = ImageRepeat.RepeatX;                                      break;                                  case "repeaty":                                      repeat = ImageRepeat.RepeatY;                                      break;                              }                              break;                      }
Missing Default,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,GetStyleInfoBackgroundImage,The following switch statement is missing a default case: switch (xNodeLoop.InnerText.ToLowerInvariant())                              {                                  case "repeat":                                      repeat = ImageRepeat.Repeat;                                      break;                                  case "norepeat":                                      repeat = ImageRepeat.NoRepeat;                                      break;                                  case "repeatx":                                      repeat = ImageRepeat.RepeatX;                                      break;                                  case "repeaty":                                      repeat = ImageRepeat.RepeatY;                                      break;                              }
Missing Default,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,DrawString,The following switch statement is missing a default case: switch (si.TextDecoration)  				{  					case TextDecorationEnum.Underline:  						fs |= System.Drawing.FontStyle.Underline;  						break;  					case TextDecorationEnum.LineThrough:  						fs |= System.Drawing.FontStyle.Strikeout;  						break;  					case TextDecorationEnum.Overline:  					case TextDecorationEnum.None:  						break;  				}
Missing Default,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,PasteNewNames,The following switch statement is missing a default case: switch (node.Name)  			{  				case "Textbox":  				case "Image":  				case "Subreport":  				case "Line":  		        case "CustomReportItem":  					ReportNames.GenerateName(node);	// generate a new name  					return;  				case "Chart":  				case "Rectangle":  				case "Table":                  case "fyi:Grid":  				case "Matrix":  				case "List":  					ReportNames.GenerateName(node);	// generate a new name  					break;  				case "Style":		// just to limit some of the dead ends we might hit  				case "Filters":  					return;  				case "Grouping":		// need to assign name to groups too  					ReportNames.GenerateGroupingName(node);  					return;  			}
Missing Default,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,SelectInReportItems,The following switch statement is missing a default case: switch (xNodeLoop.Name)  				{  					case "Textbox":  					case "Chart":  					case "Image":  					case "Subreport":                      case "CustomReportItem":  						RectangleF rif = GetReportItemRect(xNodeLoop' r);  						if (rif.IntersectsWith(_HitRect))  							this.AddSelection(xNodeLoop);  						break;  					case "Line":  						// for line a simplification is to require endpoints to be in rectangle                          // Josh: Done: more sophisticated line segment crosses rectangle but endpoints not in rect                          // Josh: Implemented formula found on http://en.wikipedia.org/wiki/Line-line_intersection                          // Detects collision of two lines and returns the point they intersect   						PointF p1;  						PointF p2;  						this.GetLineEnds(xNodeLoop' r' out p1' out p2);                          if (_HitRect.Contains(p1) || _HitRect.Contains(p2))                          {                              this.AddSelection(xNodeLoop);                          }                            if (AdvancedLineCollision(p1' p2' _HitRect))                          {                              this.AddSelection(xNodeLoop);                          }  						break;  					case "Rectangle":  						SelectInRectangle(xNodeLoop' r);  						break;  					case "Table":                      case "fyi:Grid":  						SelectInTable(xNodeLoop' r);  						break;  					case "Matrix":  						SelectInMatrix(xNodeLoop' r);  						break;  					case "List":  						SelectInList(xNodeLoop' r);  						break;  				}
Missing Default,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,HitReportItems,The following switch statement is missing a default case: switch (xNodeLoop.Name)  				{  					case "Textbox":  					case "Chart":  					case "Image":  					case "Subreport":                      case "CustomReportItem":                          hnlLoop = HitReportItem(xNodeLoop' r);   						break;  					case "Rectangle":                          hnlLoop = HitRectangle(xNodeLoop' r);  						break;  					case "Table":                      case "fyi:Grid":                          hnlLoop = HitTable(xNodeLoop' r);   						break;  					case "Matrix":                          hnlLoop = HitMatrix(xNodeLoop' r);   						break;  					case "List":                          hnlLoop = HitList(xNodeLoop' r);   						break;  					case "Line":                          hnlLoop = HitLine(xNodeLoop' r);   						break;  				}
Missing Default,fyiReporting.RdlDesign,DesignXmlDraw,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DesignXmlDraw.cs,ResizeReportItem,The following switch statement is missing a default case: switch (hle)  			{  				case HitLocationEnum.BottomLeft:  					// need to adjust x/y position and height/width  					if (wNode == null || hNode == null)  						return false;  					l += xIncPt;  					w -= xIncPt;   					h += yIncPt;  					break;  				case HitLocationEnum.BottomMiddle:  					// need to adjust height  					if (hNode == null)  						return false;  					h += yIncPt;  					break;  				case HitLocationEnum.BottomRight:  					// need to adjust width and height  					if (wNode == null || hNode == null)  						return false;  					w += xIncPt;   					h += yIncPt;  					break;  				case HitLocationEnum.LeftMiddle:  					// need to adjust x position and width  					if (wNode == null)  						return false;  					l += xIncPt;  					w -= xIncPt;   					break;  				case HitLocationEnum.RightMiddle:  					// need to adjust width  					if (wNode == null)  						return false;  					w += xIncPt;   					break;  				case HitLocationEnum.TopLeft:  					// need to adjust x'y position and height  					if (wNode == null || hNode == null)  						return false;  					l += xIncPt;  					w -= xIncPt;   					t += yIncPt;  					h -= yIncPt;  					break;  				case HitLocationEnum.TopMiddle:  					// need to adjust y position and height  					if (hNode == null)  						return false;  					t += yIncPt;  					h -= yIncPt;  					break;  				case HitLocationEnum.TopRight:  					// need to adjust y position' width and height  					if (wNode == null || hNode == null)  						return false;  					w += xIncPt;   					t += yIncPt;  					h -= yIncPt;  					break;  				case HitLocationEnum.LineLeft:  					if (l + xIncPt < 0)  					{  						xIncPt = -l;  						l = 0;  					}  					else  						l += xIncPt;  					if (t + yIncPt < 0)  					{  						yIncPt = -t;  						t = 0;  					}  					else  						t += yIncPt;  					w -= xIncPt;  					h -= yIncPt;  					break;  				case HitLocationEnum.LineRight:  					w += xIncPt;  					h += yIncPt;  					break;  			}
Missing Default,fyiReporting.RdlDesign,DGCBColumn,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\DGCBColumn.cs,PaintText,The following switch statement is missing a default case: switch (Alignment)   			{   				case HorizontalAlignment.Left:   					format.Alignment = StringAlignment.Near;   				break;   				case HorizontalAlignment.Right:   					format.Alignment = StringAlignment.Far;   				break;   				case HorizontalAlignment.Center:   					format.Alignment = StringAlignment.Center;   				break;   			}
Missing Default,fyiReporting.RdlDesign,GroupingCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\GroupingCtl.cs,bExpr_Click,The following switch statement is missing a default case: switch (b.Tag as string)  			{  				case "label":  					c = this.cbLabelExpr;  					break;  				case "parent":  					c = this.cbParentExpr;  					break;  			}
Missing Default,fyiReporting.RdlDesign,ImageCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\ImageCtl.cs,bExpr_Click,The following switch statement is missing a default case: switch (b.Tag as string)  			{  				case "external":  					c = tbValueExternal;  					break;  				case "embedded":  					c = cbValueEmbedded;  					break;  				case "mime":  					c = cbMIMEType;  					break;  				case "database":  					c = cbValueDatabase;  					break;  			}
Missing Default,fyiReporting.RdlDesign,InteractivityCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\InteractivityCtl.cs,bExpr_Click,The following switch statement is missing a default case: switch (b.Tag as string)  			{  				case "bookmark":  					c = tbBookmark;   					break;  				case "bookmarklink":  					c = tbBookmarkLink;   					break;  				case "hyperlink":  					c = tbHyperlink;                      break;  				case "visibility":  					c = tbHidden;                      break;  			}
Missing Default,fyiReporting.RdlDesign,RdlEditPreview,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlEditPreview.cs,SetFocus,The following switch statement is missing a default case: switch (_CurrentTab)  			{  				case DesignTabs.Edit:  					scintilla1.Focus();  					break;  				case DesignTabs.Preview:  					rdlPreview.Focus();  					break;  				case DesignTabs.Design:  					dcDesign.SetFocus();  					break;  			}
Missing Default,fyiReporting.RdlDesign,RdlEditPreview,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\RdlEditPreview.cs,tcEHP_SelectedIndexChanged,The following switch statement is missing a default case: switch (_DesignChanged)  			{	// Sync up the editor in every case  				case DesignTabs.Design:  					// sync up the editor  					SetTextToScintilla(dcDesign.ReportSource);  					break;  				case DesignTabs.Edit:  				case DesignTabs.Preview:  					break;  			}
Missing Default,fyiReporting.RdlDesign,StyleBorderCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleBorderCtl.cs,bExpr_Click,The following switch statement is missing a default case: switch (b.Tag as string)  			{  				case "sd":  					c = cbStyleDefault;  					break;  				case "cd":  					c = cbColorDefault;  					bColor = true;  					break;  				case "wd":  					c = tbWidthDefault;  					break;  				case "sl":  					c = cbStyleLeft;  					break;  				case "cl":  					c = cbColorLeft;  					bColor = true;  					break;  				case "wl":  					c = tbWidthLeft;  					break;  				case "sr":  					c = cbStyleRight;  					break;  				case "cr":  					c = cbColorRight;  					bColor = true;  					break;  				case "wr":  					c = tbWidthRight;  					break;  				case "st":  					c = cbStyleTop;  					break;  				case "ct":  					c = cbColorTop;  					bColor = true;  					break;  				case "wt":  					c = tbWidthTop;  					break;  				case "sb":  					c = cbStyleBottom;  					break;  				case "cb":  					c = cbColorBottom;  					bColor = true;  					break;  				case "wb":  					c = tbWidthBottom;  					break;  			}
Missing Default,fyiReporting.RdlDesign,StyleCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleCtl.cs,bExpr_Click,The following switch statement is missing a default case: switch (b.Tag as string)  			{  				case "pleft":  					c = tbPadLeft;  					break;  				case "pright":  					c = tbPadRight;  					break;  				case "ptop":  					c = tbPadTop;  					break;  				case "pbottom":  					c = tbPadBottom;  					break;  				case "bcolor":  					c = cbBackColor;  					bColor = true;  					break;  				case "bgradient":  					c = cbGradient;  					break;  				case "bendcolor":  					c = cbEndColor;  					bColor = true;  					break;  			}
Missing Default,fyiReporting.RdlDesign,StyleTextCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleTextCtl.cs,InitTextStyles,The following switch statement is missing a default case: switch (lNode.Name)  				{  					case "FontStyle":  						sFontStyle = lNode.InnerText;  						break;  					case "FontFamily":  						sFontFamily = lNode.InnerText;  						break;  					case "FontWeight":  						sFontWeight = lNode.InnerText;  						break;  					case "FontSize":  						sFontSize = lNode.InnerText;  						break;  					case "TextDecoration":  						sTextDecoration = lNode.InnerText;  						break;  					case "TextAlign":  						sHorzAlign = lNode.InnerText;  						break;  					case "VerticalAlign":  						sVerticalAlign = lNode.InnerText;  						break;  					case "Color":  						sColor = lNode.InnerText;  						break;  					case "Format":  						sFormat = lNode.InnerText;  						break;  					case "Direction":  						sDirection = lNode.InnerText;  						break;  					case "WritingMode":  						sWritingMode = lNode.InnerText;  						break;  				}
Missing Default,fyiReporting.RdlDesign,StyleTextCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\StyleTextCtl.cs,bExpr_Click,The following switch statement is missing a default case: switch (b.Tag as string)  			{  				case "value":  					c = cbValue;  					break;  				case "family":  					c = cbFontFamily;  					break;  				case "style":  					c = cbFontStyle;  					break;  				case "color":  					c = cbColor;  					bColor = true;  					break;  				case "size":  					c = cbFontSize;  					break;  				case "weight":  					c = cbFontWeight;  					break;  				case "decoration":  					c = cbTextDecoration;  					break;  				case "halign":  					c = cbHorzAlign;  					break;  				case "valign":  					c = cbVerticalAlign;  					break;  				case "direction":  					c = cbDirection;  					break;  				case "writing":  					c = cbWritingMode;  					break;  				case "format":  					c = cbFormat;  					break;  			}
Missing Default,fyiReporting.RdlDesign,TableColumnCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\TableColumnCtl.cs,bExpr_Click,The following switch statement is missing a default case: switch (b.Tag as string)  			{  				case "visibility":  					c = tbHidden;  					break;  			}
Missing Default,fyiReporting.RdlDesign,TableRowCtl,D:\research\architectureSmells\repos\majorsilence_My-FyiReporting\RdlDesign\TableRowCtl.cs,bExpr_Click,The following switch statement is missing a default case: switch (b.Tag as string)  			{  				case "visibility":  					c = tbHidden;  					break;  			}
