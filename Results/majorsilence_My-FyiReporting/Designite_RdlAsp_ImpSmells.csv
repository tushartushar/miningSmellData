Implementation smell,Namespace,Class,File,Method,Description
Long Method,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,DrawString,The method has 189 lines of code.
Long Method,fyiReporting.RdlAsp,ReportHelper,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlReport.cs,GetParameterHtml,The method has 113 lines of code.
Complex Method,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,DrawString,Cyclomatic complexity of the method is 16
Complex Method,fyiReporting.RdlAsp,ReportHelper,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlReport.cs,GetParameterHtml,Cyclomatic complexity of the method is 14
Long Parameter List,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,DrawLine,The method has 8 parameters. Parameters: c' bs' w' sb' x' y' x2' y2
Long Parameter List,fyiReporting.RdlAsp,ReportHelper,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlReport.cs,GetParameterHtml,The method has 5 parameters. Parameters: rpt' pd' context' reportFile' bShow
Long Statement,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,GetZip,The length of the statement  "                    _Pages.Count' PixelsX(_Pages.PageWidth)' PixelsY(_Pages.PageHeight))); // to do more than one use & e.g. pagecount=1&pagewidth=121 " is 130.
Long Statement,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,DoRender,The length of the statement  "                _ParameterHtml = ReportHelper.GetParameterHtml(report' ld' this.Context' this._ReportFile' _NoShow);	// build the parameter html " is 128.
Long Statement,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,GetReport,The length of the statement  "                string searchDir = this.MapPathSecure(this.ReportFile.StartsWith("~") ? "~/Bin" : "/Bin") + Path.DirectorySeparatorChar; " is 120.
Long Statement,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,DrawBackground,The length of the statement  "                        sb.AppendFormat("<GradientStop Offset=\"0\" Color=\"{0}\"/><GradientStop Offset=\".5\" Color=\"{1}\"/><GradientStop Offset=\".5\" Color=\"{1}\"/>"' c' ec' c); " is 158.
Long Statement,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,DrawImage,The length of the statement  "//            sb.Append("<Image Source=\"/dscrnshot1tn.jpg?rs:url=JustAnImage.rdl&rs:pageno=1&rs:image=n1\" Stretch=\"None\" Canvas.Left=\"260\" Canvas.Top=\"85\" Width=\"211\" Height=\"71\"/>"); " is 195.
Long Statement,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,DrawString,The length of the statement  "             sb.AppendFormat("<TextBlock TextWrapping=\"Wrap\" FontFamily=\"{0}\" Foreground=\"{1}\" FontSize=\"{2}\" Width=\"{3}\""' " is 120.
Long Statement,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,DrawString,The length of the statement  "              sb.AppendFormat("<TextBlock TextWrapping=\"Wrap\" FontFamily=\"{0}\" Foreground=\"{1}\" FontSize=\"{2}\" Width=\"{3}\""' " is 120.
Long Statement,fyiReporting.RdlAsp,RdlListReports,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlListReports.cs,Render,The length of the statement  "                        tw.Write("<tr><td><a href=\"\" onclick=\"return false;\"><span onclick=\"setReport('{0}');\" >{1}</span></a></td></tr>"' " is 120.
Long Statement,fyiReporting.RdlAsp,RdlReport,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlReport.cs,DoRender,The length of the statement  "                _ParameterHtml = ReportHelper.GetParameterHtml(report' ld' this.Context' _ReportFile' _NoShow);	// build the parameter html " is 123.
Long Statement,fyiReporting.RdlAsp,RdlReport,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlReport.cs,GetReport,The length of the statement  "                string searchDir = this.MapPathSecure(this.ReportFile.StartsWith("~") ? "~/Bin" : "/Bin") + Path.DirectorySeparatorChar; " is 120.
Long Statement,fyiReporting.RdlAsp,ReportHelper,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlReport.cs,GetParameterHtml,The length of the statement  "                            pHtml.AppendFormat("<input type=text name=\"{0}\" value=\"{1}\" tabindex=\"{2}\" size=32 onKeyPress=\"javascript:return limitinput(event' '0123456789'' true);\"/></td>"' " is 169.
Long Statement,fyiReporting.RdlAsp,ReportHelper,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlReport.cs,GetParameterHtml,The length of the statement  "                            pHtml.AppendFormat("<input type=text name=\"{0}\" value=\"{1}\" tabindex=\"{2}\" size=32 onKeyPress=\"javascript:return limitinput(event' '0123456789.'' true);\"/></td>"' " is 170.
Long Statement,fyiReporting.RdlAsp,ReportHelper,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlReport.cs,GetParameterHtml,The length of the statement  "                        pHtml.AppendFormat("<td><A id=\"lnk" + rp.Name + "\" href=\"javascript:NewCal('{0}'''ddmmmyyyy''true'24)\" runat=\"server\"><IMG height=\"16\" alt=\"Pick a date\" src=\"SmallCalendar.gif\" width=\"16\" border=\"0\"/></td>"' rp.Name); " is 233.
Long Statement,fyiReporting.RdlAsp,ReportHelper,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlReport.cs,GetParameterHtml,The length of the statement  "                            rp.DisplayValues[i].CompareTo(rp.DataValues[i]) == 0)	// When display and data values are same don't put out a value tag " is 120.
Long Statement,fyiReporting.RdlAsp,ReportHelper,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlReport.cs,GetParameterHtml,The length of the statement  "                            pHtml.AppendFormat("<option value=\"{0}\"{2}>{1}</option>"' XmlUtil.XmlAnsi(rp.DataValues[i].ToString())' XmlUtil.XmlAnsi(rp.DisplayValues[i])' selected); " is 154.
Long Statement,fyiReporting.RdlAsp,ReportHelper,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlReport.cs,GetParameterHtml,The length of the statement  "                    pHtml.AppendFormat("<td rowspan=2><table><tr><td align=right><input type=\"submit\" value=\"Run Report\" style=\"font-family:Ariel; color: black; font-size=10pt; background: gainsboro;\" tabindex=\"{0}\"/></td></tr>"' rpt.UserReportParameters.Count + 1); " is 254.
Long Statement,fyiReporting.RdlAsp,ReportHelper,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlReport.cs,GetParameterHtml,The length of the statement  "                    if (!bShow) { ReportHelper.AppendExports(pHtml' context' reportFile); } else { pHtml.AppendFormat("<tr><td align=right></td><td align=right>&nbsp;</td></tr></table></td>"); } " is 174.
Long Statement,fyiReporting.RdlAsp,ReportHelper,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlReport.cs,GetParameterHtml,The length of the statement  "                pHtml.AppendFormat("<tr><td><table><tr><td align=right><input type=\"submit\" value=\"Run Report\" style=\"font-family:Ariel; color: white; font-size=10pt; background: lightblue;\" tabindex=\"{0}\"/></td></tr>"' rpt.UserReportParameters.Count + 1); " is 248.
Long Statement,fyiReporting.RdlAsp,ReportHelper,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlReport.cs,GetParameterHtml,The length of the statement  "                if (!bShow) { ReportHelper.AppendExports(pHtml' context' reportFile); } else { pHtml.AppendFormat("<tr><td align=right></td><td align=right>&nbsp;</td></tr></table></td>"); } " is 174.
Complex Conditional,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,DrawString,The conditional expression  "(si.WritingMode == WritingModeEnum.tb_rl)                       || (si.TextAlign == TextAlignEnum.Center)                       || (si.TextAlign == TextAlignEnum.Right)                       || (si.VerticalAlign == VerticalAlignEnum.Middle)                       || (si.VerticalAlign == VerticalAlignEnum.Bottom)"  is complex.
Magic Number,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,DoRender,The following statement contains a magic number: try              {  			    for (int i=0; i < nvc.Count; i++)  			    {  				    ld.Add(nvc.GetKey(i)' nvc[i]);  			    }     //               if (!_NoShow) { report = GetCachedReport(file); }                  report = ReportHelper.GetCachedReport(file' this.Context.Cache' this.Context.Application);  			    if (report == null) // couldn't obtain report definition from cache  			    {  				    // Obtain the source  				    source = ReportHelper.GetSource(file);  				    if (source == null)			  					    return;					// GetSource reported the error    				    // Compile the report  				    report = this.GetReport(source' file);  				    if (report == null)  					    return;                      ReportHelper.SaveCachedReport(report' file' this.Context.Cache);  			    }  			    // Set the user context information: ID' language                  ReportHelper.SetUserContext(report' this.Context' new RDL.NeedPassword(GetPassword));    			    // Obtain the data if report is being generated                  if (!_NoShow)                  {  			        report.RunGetData(ld);  			        Generate(report);                  }              }              catch (Exception exe)              {                  AddError(8' "Error: {0}"' exe.Message);              }
Magic Number,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,Generate,The following statement contains a magic number: try  			{                  _Pages =  report.BuildPages();                  // create array for XAML pages.   Actual XAML will be created on demand.                  _XamlPages = new string[_Pages.Count];                  for (int i = 0; i < _XamlPages.Length; i++)                      _XamlPages[i] = null;  			}  			catch(Exception e)  			{                  AddError(8' string.Format("Exception generating report {0}"' e.Message));  			}
Magic Number,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,GetReport,The following statement contains a magic number: try  			{                  // Make sure RdlEngine is configed before we ever parse a program                  //   The config file must exist in the Bin directory.                  string searchDir = this.MapPathSecure(this.ReportFile.StartsWith("~") ? "~/Bin" : "/Bin") + Path.DirectorySeparatorChar;                  RdlEngineConfig.RdlEngineConfigInit(searchDir);    				rdlp =  new RDLParser(prog);  				string folder = Path.GetDirectoryName(file);  				if (folder == "")  					folder = Environment.CurrentDirectory;  				rdlp.Folder = folder;  				rdlp.DataSourceReferencePassword = new NeedPassword(this.GetPassword);    				r = rdlp.Parse();  				if (r.ErrorMaxSeverity > 0)  				{  					AddError(r.ErrorMaxSeverity' r.ErrorItems);  					if (r.ErrorMaxSeverity >= 8)  						r = null;  					r.ErrorReset();  				}    				// If we've loaded the report; we should tell it where it got loaded from  				if (r != null)  				{  					r.Folder = folder;  					r.Name = Path.GetFileNameWithoutExtension(file);  					r.GetDataSourceReferencePassword = new RDL.NeedPassword(GetPassword);  				}  			}  			catch(Exception e)  			{  				r = null;  				AddError(8' "Exception parsing report {0}.  {1}"' file' e.Message);  			}
Magic Number,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,GetReport,The following statement contains a magic number: try  			{                  // Make sure RdlEngine is configed before we ever parse a program                  //   The config file must exist in the Bin directory.                  string searchDir = this.MapPathSecure(this.ReportFile.StartsWith("~") ? "~/Bin" : "/Bin") + Path.DirectorySeparatorChar;                  RdlEngineConfig.RdlEngineConfigInit(searchDir);    				rdlp =  new RDLParser(prog);  				string folder = Path.GetDirectoryName(file);  				if (folder == "")  					folder = Environment.CurrentDirectory;  				rdlp.Folder = folder;  				rdlp.DataSourceReferencePassword = new NeedPassword(this.GetPassword);    				r = rdlp.Parse();  				if (r.ErrorMaxSeverity > 0)  				{  					AddError(r.ErrorMaxSeverity' r.ErrorItems);  					if (r.ErrorMaxSeverity >= 8)  						r = null;  					r.ErrorReset();  				}    				// If we've loaded the report; we should tell it where it got loaded from  				if (r != null)  				{  					r.Folder = folder;  					r.Name = Path.GetFileNameWithoutExtension(file);  					r.GetDataSourceReferencePassword = new RDL.NeedPassword(GetPassword);  				}  			}  			catch(Exception e)  			{  				r = null;  				AddError(8' "Exception parsing report {0}.  {1}"' file' e.Message);  			}
Magic Number,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,DrawLine,The following statement contains a magic number: sb.AppendFormat("<Line X1=\"{0}\" Y1=\"{1}\" X2=\"{2}\" Y2=\"{3}\" Stroke=\"{4}\" StrokeThickness=\"{5}\""'                  x' y' x2' y2' GetColor(c)'(int)(w+0.25));
Magic Number,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,DrawCurve,The following statement contains a magic number: sb.AppendFormat("<Path Stroke=\"{0}\" StrokeThickness=\"{1}\""' GetColor(c)' (int)(w + 0.25));
Magic Number,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,DrawCurve,The following statement contains a magic number: if (pc.Points.Length > 2)              {   // do a spline curve                  PointF[] tangents = GetCurveTangents(pc.Points);                  DoCurve(sb' pc.Points' tangents);              }              else              {   // we only have two points; just do a line segment                  sb.AppendFormat("<LineSegment Point=\"{0}'{1}\"/>"' PixelsX(pc.Points[1].X)' PixelsY(pc.Points[1].Y));              }
Magic Number,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,GetCurveTangents,The following statement contains a magic number: if (tangents.Length <= 2)                  return tangents;
Magic Number,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,DrawString,The following statement contains a magic number: if (si.WritingMode == WritingModeEnum.lr_tb)              {                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          ofs.X = r.Width - r3.Width;                          break;                      case TextAlignEnum.Center:                          ofs.X = r.Width / 2 - r3.Width / 2;                          break;                      case TextAlignEnum.Left:                      default:                          break;                  }                    switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          ofs.Y = r.Height - r3.Height;                          break;                      case VerticalAlignEnum.Middle:                          ofs.Y = r.Height / 2 - r3.Height / 2;                          break;                      case VerticalAlignEnum.Top:                      default:                          break;                  }              }              else              {                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          ofs.Y = r.Height  - r3.Height;                          break;                      case TextAlignEnum.Center:                          ofs.Y = r.Height / 2 - r3.Height / 2;                          break;                      case TextAlignEnum.Left:                      default:                          break;                  }                    switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          ofs.X = r.Width - r3.Width;                          break;                      case VerticalAlignEnum.Middle:                          ofs.X = r.Width / 2 - r3.Width / 2;                          break;                      case VerticalAlignEnum.Top:                      default:                          break;                  }              }
Magic Number,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,DrawString,The following statement contains a magic number: if (si.WritingMode == WritingModeEnum.lr_tb)              {                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          ofs.X = r.Width - r3.Width;                          break;                      case TextAlignEnum.Center:                          ofs.X = r.Width / 2 - r3.Width / 2;                          break;                      case TextAlignEnum.Left:                      default:                          break;                  }                    switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          ofs.Y = r.Height - r3.Height;                          break;                      case VerticalAlignEnum.Middle:                          ofs.Y = r.Height / 2 - r3.Height / 2;                          break;                      case VerticalAlignEnum.Top:                      default:                          break;                  }              }              else              {                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          ofs.Y = r.Height  - r3.Height;                          break;                      case TextAlignEnum.Center:                          ofs.Y = r.Height / 2 - r3.Height / 2;                          break;                      case TextAlignEnum.Left:                      default:                          break;                  }                    switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          ofs.X = r.Width - r3.Width;                          break;                      case VerticalAlignEnum.Middle:                          ofs.X = r.Width / 2 - r3.Width / 2;                          break;                      case VerticalAlignEnum.Top:                      default:                          break;                  }              }
Magic Number,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,DrawString,The following statement contains a magic number: if (si.WritingMode == WritingModeEnum.lr_tb)              {                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          ofs.X = r.Width - r3.Width;                          break;                      case TextAlignEnum.Center:                          ofs.X = r.Width / 2 - r3.Width / 2;                          break;                      case TextAlignEnum.Left:                      default:                          break;                  }                    switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          ofs.Y = r.Height - r3.Height;                          break;                      case VerticalAlignEnum.Middle:                          ofs.Y = r.Height / 2 - r3.Height / 2;                          break;                      case VerticalAlignEnum.Top:                      default:                          break;                  }              }              else              {                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          ofs.Y = r.Height  - r3.Height;                          break;                      case TextAlignEnum.Center:                          ofs.Y = r.Height / 2 - r3.Height / 2;                          break;                      case TextAlignEnum.Left:                      default:                          break;                  }                    switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          ofs.X = r.Width - r3.Width;                          break;                      case VerticalAlignEnum.Middle:                          ofs.X = r.Width / 2 - r3.Width / 2;                          break;                      case VerticalAlignEnum.Top:                      default:                          break;                  }              }
Magic Number,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,DrawString,The following statement contains a magic number: if (si.WritingMode == WritingModeEnum.lr_tb)              {                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          ofs.X = r.Width - r3.Width;                          break;                      case TextAlignEnum.Center:                          ofs.X = r.Width / 2 - r3.Width / 2;                          break;                      case TextAlignEnum.Left:                      default:                          break;                  }                    switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          ofs.Y = r.Height - r3.Height;                          break;                      case VerticalAlignEnum.Middle:                          ofs.Y = r.Height / 2 - r3.Height / 2;                          break;                      case VerticalAlignEnum.Top:                      default:                          break;                  }              }              else              {                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          ofs.Y = r.Height  - r3.Height;                          break;                      case TextAlignEnum.Center:                          ofs.Y = r.Height / 2 - r3.Height / 2;                          break;                      case TextAlignEnum.Left:                      default:                          break;                  }                    switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          ofs.X = r.Width - r3.Width;                          break;                      case VerticalAlignEnum.Middle:                          ofs.X = r.Width / 2 - r3.Width / 2;                          break;                      case VerticalAlignEnum.Top:                      default:                          break;                  }              }
Magic Number,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,DrawString,The following statement contains a magic number: if (si.WritingMode == WritingModeEnum.lr_tb)              {                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          ofs.X = r.Width - r3.Width;                          break;                      case TextAlignEnum.Center:                          ofs.X = r.Width / 2 - r3.Width / 2;                          break;                      case TextAlignEnum.Left:                      default:                          break;                  }                    switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          ofs.Y = r.Height - r3.Height;                          break;                      case VerticalAlignEnum.Middle:                          ofs.Y = r.Height / 2 - r3.Height / 2;                          break;                      case VerticalAlignEnum.Top:                      default:                          break;                  }              }              else              {                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          ofs.Y = r.Height  - r3.Height;                          break;                      case TextAlignEnum.Center:                          ofs.Y = r.Height / 2 - r3.Height / 2;                          break;                      case TextAlignEnum.Left:                      default:                          break;                  }                    switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          ofs.X = r.Width - r3.Width;                          break;                      case VerticalAlignEnum.Middle:                          ofs.X = r.Width / 2 - r3.Width / 2;                          break;                      case VerticalAlignEnum.Top:                      default:                          break;                  }              }
Magic Number,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,DrawString,The following statement contains a magic number: if (si.WritingMode == WritingModeEnum.lr_tb)              {                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          ofs.X = r.Width - r3.Width;                          break;                      case TextAlignEnum.Center:                          ofs.X = r.Width / 2 - r3.Width / 2;                          break;                      case TextAlignEnum.Left:                      default:                          break;                  }                    switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          ofs.Y = r.Height - r3.Height;                          break;                      case VerticalAlignEnum.Middle:                          ofs.Y = r.Height / 2 - r3.Height / 2;                          break;                      case VerticalAlignEnum.Top:                      default:                          break;                  }              }              else              {                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          ofs.Y = r.Height  - r3.Height;                          break;                      case TextAlignEnum.Center:                          ofs.Y = r.Height / 2 - r3.Height / 2;                          break;                      case TextAlignEnum.Left:                      default:                          break;                  }                    switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          ofs.X = r.Width - r3.Width;                          break;                      case VerticalAlignEnum.Middle:                          ofs.X = r.Width / 2 - r3.Width / 2;                          break;                      case VerticalAlignEnum.Top:                      default:                          break;                  }              }
Magic Number,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,DrawString,The following statement contains a magic number: if (si.WritingMode == WritingModeEnum.lr_tb)              {                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          ofs.X = r.Width - r3.Width;                          break;                      case TextAlignEnum.Center:                          ofs.X = r.Width / 2 - r3.Width / 2;                          break;                      case TextAlignEnum.Left:                      default:                          break;                  }                    switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          ofs.Y = r.Height - r3.Height;                          break;                      case VerticalAlignEnum.Middle:                          ofs.Y = r.Height / 2 - r3.Height / 2;                          break;                      case VerticalAlignEnum.Top:                      default:                          break;                  }              }              else              {                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          ofs.Y = r.Height  - r3.Height;                          break;                      case TextAlignEnum.Center:                          ofs.Y = r.Height / 2 - r3.Height / 2;                          break;                      case TextAlignEnum.Left:                      default:                          break;                  }                    switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          ofs.X = r.Width - r3.Width;                          break;                      case VerticalAlignEnum.Middle:                          ofs.X = r.Width / 2 - r3.Width / 2;                          break;                      case VerticalAlignEnum.Top:                      default:                          break;                  }              }
Magic Number,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,DrawString,The following statement contains a magic number: if (si.WritingMode == WritingModeEnum.lr_tb)              {                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          ofs.X = r.Width - r3.Width;                          break;                      case TextAlignEnum.Center:                          ofs.X = r.Width / 2 - r3.Width / 2;                          break;                      case TextAlignEnum.Left:                      default:                          break;                  }                    switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          ofs.Y = r.Height - r3.Height;                          break;                      case VerticalAlignEnum.Middle:                          ofs.Y = r.Height / 2 - r3.Height / 2;                          break;                      case VerticalAlignEnum.Top:                      default:                          break;                  }              }              else              {                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          ofs.Y = r.Height  - r3.Height;                          break;                      case TextAlignEnum.Center:                          ofs.Y = r.Height / 2 - r3.Height / 2;                          break;                      case TextAlignEnum.Left:                      default:                          break;                  }                    switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          ofs.X = r.Width - r3.Width;                          break;                      case VerticalAlignEnum.Middle:                          ofs.X = r.Width / 2 - r3.Width / 2;                          break;                      case VerticalAlignEnum.Top:                      default:                          break;                  }              }
Magic Number,fyiReporting.RdlAsp,RdlSilverViewer,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,GetColor,The following statement contains a magic number: string sb = Convert.ToString(b' 16).ToUpperInvariant();
Magic Number,fyiReporting.RdlAsp,ImageHelper,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlSilverViewer.cs,SaveImage,The following statement contains a magic number: try              {                  io = ImageHelper.GetIOStream(path' out filename' out url);                    io.Write(ba' 0' ba.Length);                  io.Close();                  io = null;                  ImageCallBack icb = new ImageCallBack();                    CacheItemRemovedCallback onRemove = new CacheItemRemovedCallback(icb.RemovedCallback);                      c.Insert(Path.GetFileNameWithoutExtension(filename)'                       filename' null' DateTime.Now.AddMinutes(5)' TimeSpan.Zero' CacheItemPriority.Normal' onRemove);                            }              finally              {                  if (io != null)                      io.Close();              }
Magic Number,fyiReporting.RdlAsp,RdlReport,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlReport.cs,Render,The following statement contains a magic number: if (_ReportFile == null)  			{  				this.AddError(8' "ReportFile not specified.");  				return;  			}  			else if (_ReportFile == STATISTICS)  			{  				DoStatistics(tw);  				return;   			}  			else if (_Html != null)  				tw.Write(_Html);  			else if (_Object != null)  			{  				// TODO -   shouldn't use control to write out object???  				throw new Exception("_Object needed in render");  			}  			else	// we never generated anything!  			{  				if (_Errors != null)  				{  					tw.RenderBeginTag(HtmlTextWriterTag.Table);  					tw.RenderBeginTag(HtmlTextWriterTag.Tr);  					tw.RenderBeginTag(HtmlTextWriterTag.Td);  					tw.Write("Errors");  					tw.RenderEndTag();  					tw.RenderEndTag();  					foreach(string e in _Errors)  					{  						tw.RenderBeginTag(HtmlTextWriterTag.Tr);  						tw.RenderBeginTag(HtmlTextWriterTag.Td);  						tw.Write(e);  						tw.RenderEndTag();  						tw.RenderEndTag();  					}  					tw.RenderEndTag();  				}  			}
Magic Number,fyiReporting.RdlAsp,RdlReport,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlReport.cs,DoRender,The following statement contains a magic number: try              {  			    for (int i=0; i < nvc.Count; i++)  			    {  				    ld.Add(nvc.GetKey(i)' nvc[i]);  			    }     //               if (!_NoShow) { report = GetCachedReport(file); }                  report = ReportHelper.GetCachedReport(file' this.Context.Cache' this.Context.Application);    			    if (report == null) // couldn't obtain report definition from cache  			    {  				    // Obtain the source  				    source = ReportHelper.GetSource(file);  				    if (source == null)			  					    return;					// GetSource reported the error    				    // Compile the report  				    report = this.GetReport(source' file);  				    if (report == null)  					    return;                        ReportHelper.SaveCachedReport(report' file' this.Context.Cache);  			    }  			    // Set the user context information: ID' language                  ReportHelper.SetUserContext(report' this.Context' new RDL.NeedPassword(GetPassword));    			    // Obtain the data if report is being generated                  if (!_NoShow)                  {  			        report.RunGetData(ld);  			        Generate(report);                  }              }              catch (Exception exe)              {                  AddError(8' "Error: {0}"' exe.Message);              }
Magic Number,fyiReporting.RdlAsp,RdlReport,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlReport.cs,GetReport,The following statement contains a magic number: try  			{                  // Make sure RdlEngine is configed before we ever parse a program                  //   The config file must exist in the Bin directory.                  string searchDir = this.MapPathSecure(this.ReportFile.StartsWith("~") ? "~/Bin" : "/Bin") + Path.DirectorySeparatorChar;                  RdlEngineConfig.RdlEngineConfigInit(searchDir);    				rdlp =  new RDLParser(prog);  				string folder = Path.GetDirectoryName(file);  				if (folder == "")  					folder = Environment.CurrentDirectory;  				rdlp.Folder = folder;  				rdlp.DataSourceReferencePassword = new NeedPassword(this.GetPassword);    				r = rdlp.Parse();  				if (r.ErrorMaxSeverity > 0)  				{  					AddError(r.ErrorMaxSeverity' r.ErrorItems);  					if (r.ErrorMaxSeverity >= 8)  						r = null;  					r.ErrorReset();  				}    				// If we've loaded the report; we should tell it where it got loaded from  				if (r != null)  				{  					r.Folder = folder;  					r.Name = Path.GetFileNameWithoutExtension(file);  					r.GetDataSourceReferencePassword = new RDL.NeedPassword(GetPassword);  				}  			}  			catch(Exception e)  			{  				r = null;  				AddError(8' "Exception parsing report {0}.  {1}"' file' e.Message);  			}
Magic Number,fyiReporting.RdlAsp,RdlReport,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlReport.cs,GetReport,The following statement contains a magic number: try  			{                  // Make sure RdlEngine is configed before we ever parse a program                  //   The config file must exist in the Bin directory.                  string searchDir = this.MapPathSecure(this.ReportFile.StartsWith("~") ? "~/Bin" : "/Bin") + Path.DirectorySeparatorChar;                  RdlEngineConfig.RdlEngineConfigInit(searchDir);    				rdlp =  new RDLParser(prog);  				string folder = Path.GetDirectoryName(file);  				if (folder == "")  					folder = Environment.CurrentDirectory;  				rdlp.Folder = folder;  				rdlp.DataSourceReferencePassword = new NeedPassword(this.GetPassword);    				r = rdlp.Parse();  				if (r.ErrorMaxSeverity > 0)  				{  					AddError(r.ErrorMaxSeverity' r.ErrorItems);  					if (r.ErrorMaxSeverity >= 8)  						r = null;  					r.ErrorReset();  				}    				// If we've loaded the report; we should tell it where it got loaded from  				if (r != null)  				{  					r.Folder = folder;  					r.Name = Path.GetFileNameWithoutExtension(file);  					r.GetDataSourceReferencePassword = new RDL.NeedPassword(GetPassword);  				}  			}  			catch(Exception e)  			{  				r = null;  				AddError(8' "Exception parsing report {0}.  {1}"' file' e.Message);  			}
Missing Default,fyiReporting.RdlAsp,RdlReport,C:\repos\majorsilence_My-FyiReporting\RdlAsp\RdlReport.cs,Generate,The following switch statement is missing a default case: switch (_RenderType)  				{  					case OutputPresentationType.ASPHTML:  					case OutputPresentationType.HTML:                          _CSS = report.CSS;//.Replace("position: relative;"' "position: absolute;");  						_JavaScript = report.JavaScript;  						_Html = sg.GetText();  						break;  					case OutputPresentationType.XML:  						_Xml = sg.GetText();  						break;                      case OutputPresentationType.CSV:                          _Csv = sg.GetText();                          break;                      case OutputPresentationType.PDF:  					{  						MemoryStream ms = sg.MemoryList[0] as MemoryStream;  						_Object = ms.ToArray();  						break;  					}  				}
