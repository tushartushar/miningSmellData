Implementation smell,Namespace,Class,File,Method,Description
Long Method,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,DrawBackground,The method has 107 lines of code.
Long Method,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,DrawString,The method has 125 lines of code.
Complex Method,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,DrawString,Cyclomatic complexity of the method is 9
Complex Method,LibRdlCrossPlatformViewer,RenderXwt,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\RenderXwt.cs,ProcessPage,Cyclomatic complexity of the method is 8
Long Parameter List,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,DrawLine,The method has 8 parameters. Parameters: c' bs' w' g' x' y' x2' y2
Long Parameter List,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,DrawCurve,The method has 7 parameters. Parameters: c' bs' w' g' points' Offset' Tension
Long Parameter List,LibRdlCrossPlatformViewer,RenderXwt,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\RenderXwt.cs,DrawLine,The method has 8 parameters. Parameters: c' bs' w' g' x' y' x2' y2
Long Statement,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,ProcessPage,The length of the statement  "            xwtContext.DrawImage(img' new Xwt.Rectangle(0' 0' gImg.Width' gImg.Height)' new Xwt.Rectangle(0' 0' gImg.Width' gImg.Height)); " is 126.
Long Statement,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,DrawPie,The length of the statement  "                g.FillPie(new SolidBrush(si.BackgroundColor)' (int)r.X' (int)r.Y' (int)r.Width' (int)r.Height' (float)pp.StartAngle' (float)pp.SweepAngle); " is 139.
Long Statement,LibRdlCrossPlatformViewer,RenderXwt,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\RenderXwt.cs,DrawBorder,The length of the statement  "            DrawLine(XwtColor.SystemColorToXwtColor(si.BColorBottom)' si.BStyleBottom' si.BWidthBottom' g' r.X' bottom' right' bottom); " is 123.
Long Statement,LibRdlCrossPlatformViewer,ReportViewer,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\ReportViewer.cs,SaveAs,The length of the statement  "                    MessageDialog.ShowMessage(String.Format("{0} is not a valid file type.  File extension must be PDF' XML' HTML' CSV' MHT' RTF' TIF' XLSX."' dlg.FileName)); " is 154.
Complex Conditional,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,IsInputKey,The conditional expression  "keyData.Key == Xwt.Key.Left ||                  keyData.Key == Xwt.Key.Right ||                  keyData.Key == Xwt.Key.Up ||                  keyData.Key == Xwt.Key.Down ||                  keyData.Key == Xwt.Key.Home ||                  keyData.Key == Xwt.Key.End ||                  keyData.Key == Xwt.Key.PageDown ||                  keyData.Key == Xwt.Key.PageUp"  is complex.
Magic Number,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,DrawImageBackground,The following statement contains a magic number: try              {                  strm = new MemoryStream(pi.ImageData);                  im = System.Drawing.Image.FromStream(strm);                    // http://www.fyireporting.com/forum/viewtopic.php?t=892                  //A.S.> convert pt to px if needed(when printing we need px' when draw preview - pt)                     RectangleF r2;                  if (g.PageUnit == GraphicsUnit.Pixel)                  {                      r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                      r.Top + (si.PaddingTop * g.DpiX) / 72'                      r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                      r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);                  }                  else                  {                      // adjust drawing rectangle based on padding                      r2 = new RectangleF(r.Left + si.PaddingLeft'                      r.Top + si.PaddingTop'                      r.Width - si.PaddingLeft - si.PaddingRight'                      r.Height - si.PaddingTop - si.PaddingBottom);                  }                      int repeatX = 0;                  int repeatY = 0;                  switch (pi.Repeat)                  {                      case ImageRepeat.Repeat:                          repeatX = (int)Math.Floor(r2.Width / pi.SamplesW);                          repeatY = (int)Math.Floor(r2.Height / pi.SamplesH);                          break;                      case ImageRepeat.RepeatX:                          repeatX = (int)Math.Floor(r2.Width / pi.SamplesW);                          repeatY = 1;                          break;                      case ImageRepeat.RepeatY:                          repeatY = (int)Math.Floor(r2.Height / pi.SamplesH);                          repeatX = 1;                          break;                      case ImageRepeat.NoRepeat:                      default:                          repeatX = repeatY = 1;                          break;                  }                    //make sure the image is drawn at least 1 times                   repeatX = Math.Max(repeatX' 1);                  repeatY = Math.Max(repeatY' 1);                    float startX = r2.Left;                  float startY = r2.Top;                    Region saveRegion = g.Clip;                  Region clipRegion = new Region(g.Clip.GetRegionData());                  clipRegion.Intersect(r2);                  g.Clip = clipRegion;                    for (int i = 0; i < repeatX; i++)                  {                      for (int j = 0; j < repeatY; j++)                      {                          float currX = startX + i * pi.SamplesW;                          float currY = startY + j * pi.SamplesH;                          g.DrawImage(im' new RectangleF(currX' currY' pi.SamplesW' pi.SamplesH));                      }                  }                  g.Clip = saveRegion;              }              finally              {                  if (strm != null)                      strm.Close();                  if (im != null)                      im.Dispose();              }
Magic Number,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,DrawImageBackground,The following statement contains a magic number: try              {                  strm = new MemoryStream(pi.ImageData);                  im = System.Drawing.Image.FromStream(strm);                    // http://www.fyireporting.com/forum/viewtopic.php?t=892                  //A.S.> convert pt to px if needed(when printing we need px' when draw preview - pt)                     RectangleF r2;                  if (g.PageUnit == GraphicsUnit.Pixel)                  {                      r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                      r.Top + (si.PaddingTop * g.DpiX) / 72'                      r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                      r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);                  }                  else                  {                      // adjust drawing rectangle based on padding                      r2 = new RectangleF(r.Left + si.PaddingLeft'                      r.Top + si.PaddingTop'                      r.Width - si.PaddingLeft - si.PaddingRight'                      r.Height - si.PaddingTop - si.PaddingBottom);                  }                      int repeatX = 0;                  int repeatY = 0;                  switch (pi.Repeat)                  {                      case ImageRepeat.Repeat:                          repeatX = (int)Math.Floor(r2.Width / pi.SamplesW);                          repeatY = (int)Math.Floor(r2.Height / pi.SamplesH);                          break;                      case ImageRepeat.RepeatX:                          repeatX = (int)Math.Floor(r2.Width / pi.SamplesW);                          repeatY = 1;                          break;                      case ImageRepeat.RepeatY:                          repeatY = (int)Math.Floor(r2.Height / pi.SamplesH);                          repeatX = 1;                          break;                      case ImageRepeat.NoRepeat:                      default:                          repeatX = repeatY = 1;                          break;                  }                    //make sure the image is drawn at least 1 times                   repeatX = Math.Max(repeatX' 1);                  repeatY = Math.Max(repeatY' 1);                    float startX = r2.Left;                  float startY = r2.Top;                    Region saveRegion = g.Clip;                  Region clipRegion = new Region(g.Clip.GetRegionData());                  clipRegion.Intersect(r2);                  g.Clip = clipRegion;                    for (int i = 0; i < repeatX; i++)                  {                      for (int j = 0; j < repeatY; j++)                      {                          float currX = startX + i * pi.SamplesW;                          float currY = startY + j * pi.SamplesH;                          g.DrawImage(im' new RectangleF(currX' currY' pi.SamplesW' pi.SamplesH));                      }                  }                  g.Clip = saveRegion;              }              finally              {                  if (strm != null)                      strm.Close();                  if (im != null)                      im.Dispose();              }
Magic Number,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,DrawImageBackground,The following statement contains a magic number: try              {                  strm = new MemoryStream(pi.ImageData);                  im = System.Drawing.Image.FromStream(strm);                    // http://www.fyireporting.com/forum/viewtopic.php?t=892                  //A.S.> convert pt to px if needed(when printing we need px' when draw preview - pt)                     RectangleF r2;                  if (g.PageUnit == GraphicsUnit.Pixel)                  {                      r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                      r.Top + (si.PaddingTop * g.DpiX) / 72'                      r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                      r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);                  }                  else                  {                      // adjust drawing rectangle based on padding                      r2 = new RectangleF(r.Left + si.PaddingLeft'                      r.Top + si.PaddingTop'                      r.Width - si.PaddingLeft - si.PaddingRight'                      r.Height - si.PaddingTop - si.PaddingBottom);                  }                      int repeatX = 0;                  int repeatY = 0;                  switch (pi.Repeat)                  {                      case ImageRepeat.Repeat:                          repeatX = (int)Math.Floor(r2.Width / pi.SamplesW);                          repeatY = (int)Math.Floor(r2.Height / pi.SamplesH);                          break;                      case ImageRepeat.RepeatX:                          repeatX = (int)Math.Floor(r2.Width / pi.SamplesW);                          repeatY = 1;                          break;                      case ImageRepeat.RepeatY:                          repeatY = (int)Math.Floor(r2.Height / pi.SamplesH);                          repeatX = 1;                          break;                      case ImageRepeat.NoRepeat:                      default:                          repeatX = repeatY = 1;                          break;                  }                    //make sure the image is drawn at least 1 times                   repeatX = Math.Max(repeatX' 1);                  repeatY = Math.Max(repeatY' 1);                    float startX = r2.Left;                  float startY = r2.Top;                    Region saveRegion = g.Clip;                  Region clipRegion = new Region(g.Clip.GetRegionData());                  clipRegion.Intersect(r2);                  g.Clip = clipRegion;                    for (int i = 0; i < repeatX; i++)                  {                      for (int j = 0; j < repeatY; j++)                      {                          float currX = startX + i * pi.SamplesW;                          float currY = startY + j * pi.SamplesH;                          g.DrawImage(im' new RectangleF(currX' currY' pi.SamplesW' pi.SamplesH));                      }                  }                  g.Clip = saveRegion;              }              finally              {                  if (strm != null)                      strm.Close();                  if (im != null)                      im.Dispose();              }
Magic Number,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,DrawImageBackground,The following statement contains a magic number: try              {                  strm = new MemoryStream(pi.ImageData);                  im = System.Drawing.Image.FromStream(strm);                    // http://www.fyireporting.com/forum/viewtopic.php?t=892                  //A.S.> convert pt to px if needed(when printing we need px' when draw preview - pt)                     RectangleF r2;                  if (g.PageUnit == GraphicsUnit.Pixel)                  {                      r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                      r.Top + (si.PaddingTop * g.DpiX) / 72'                      r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                      r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);                  }                  else                  {                      // adjust drawing rectangle based on padding                      r2 = new RectangleF(r.Left + si.PaddingLeft'                      r.Top + si.PaddingTop'                      r.Width - si.PaddingLeft - si.PaddingRight'                      r.Height - si.PaddingTop - si.PaddingBottom);                  }                      int repeatX = 0;                  int repeatY = 0;                  switch (pi.Repeat)                  {                      case ImageRepeat.Repeat:                          repeatX = (int)Math.Floor(r2.Width / pi.SamplesW);                          repeatY = (int)Math.Floor(r2.Height / pi.SamplesH);                          break;                      case ImageRepeat.RepeatX:                          repeatX = (int)Math.Floor(r2.Width / pi.SamplesW);                          repeatY = 1;                          break;                      case ImageRepeat.RepeatY:                          repeatY = (int)Math.Floor(r2.Height / pi.SamplesH);                          repeatX = 1;                          break;                      case ImageRepeat.NoRepeat:                      default:                          repeatX = repeatY = 1;                          break;                  }                    //make sure the image is drawn at least 1 times                   repeatX = Math.Max(repeatX' 1);                  repeatY = Math.Max(repeatY' 1);                    float startX = r2.Left;                  float startY = r2.Top;                    Region saveRegion = g.Clip;                  Region clipRegion = new Region(g.Clip.GetRegionData());                  clipRegion.Intersect(r2);                  g.Clip = clipRegion;                    for (int i = 0; i < repeatX; i++)                  {                      for (int j = 0; j < repeatY; j++)                      {                          float currX = startX + i * pi.SamplesW;                          float currY = startY + j * pi.SamplesH;                          g.DrawImage(im' new RectangleF(currX' currY' pi.SamplesW' pi.SamplesH));                      }                  }                  g.Clip = saveRegion;              }              finally              {                  if (strm != null)                      strm.Close();                  if (im != null)                      im.Dispose();              }
Magic Number,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,DrawImageSized,The following statement contains a magic number: if (g.PageUnit == GraphicsUnit.Pixel)              {                  r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                  r.Top + (si.PaddingTop * g.DpiX) / 72'                  r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                  r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);              }              else              {                  // adjust drawing rectangle based on padding                  r2 = new RectangleF(r.Left + si.PaddingLeft'                  r.Top + si.PaddingTop'                  r.Width - si.PaddingLeft - si.PaddingRight'                  r.Height - si.PaddingTop - si.PaddingBottom);              }
Magic Number,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,DrawImageSized,The following statement contains a magic number: if (g.PageUnit == GraphicsUnit.Pixel)              {                  r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                  r.Top + (si.PaddingTop * g.DpiX) / 72'                  r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                  r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);              }              else              {                  // adjust drawing rectangle based on padding                  r2 = new RectangleF(r.Left + si.PaddingLeft'                  r.Top + si.PaddingTop'                  r.Width - si.PaddingLeft - si.PaddingRight'                  r.Height - si.PaddingTop - si.PaddingBottom);              }
Magic Number,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,DrawImageSized,The following statement contains a magic number: if (g.PageUnit == GraphicsUnit.Pixel)              {                  r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                  r.Top + (si.PaddingTop * g.DpiX) / 72'                  r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                  r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);              }              else              {                  // adjust drawing rectangle based on padding                  r2 = new RectangleF(r.Left + si.PaddingLeft'                  r.Top + si.PaddingTop'                  r.Width - si.PaddingLeft - si.PaddingRight'                  r.Height - si.PaddingTop - si.PaddingBottom);              }
Magic Number,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,DrawImageSized,The following statement contains a magic number: if (g.PageUnit == GraphicsUnit.Pixel)              {                  r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                  r.Top + (si.PaddingTop * g.DpiX) / 72'                  r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                  r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);              }              else              {                  // adjust drawing rectangle based on padding                  r2 = new RectangleF(r.Left + si.PaddingLeft'                  r.Top + si.PaddingTop'                  r.Width - si.PaddingLeft - si.PaddingRight'                  r.Height - si.PaddingTop - si.PaddingBottom);              }
Magic Number,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,DrawLine,The following statement contains a magic number: if (g.PageUnit == GraphicsUnit.Pixel)                  tmpW = (tmpW * g.DpiX) / 72;
Magic Number,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,DrawString,The following statement contains a magic number: try              {                  // STYLE                  System.Drawing.FontStyle fs = 0;                  if (si.FontStyle == FontStyleEnum.Italic)                      fs |= System.Drawing.FontStyle.Italic;                    switch (si.TextDecoration)                  {                      case TextDecorationEnum.Underline:                          fs |= System.Drawing.FontStyle.Underline;                          break;                      case TextDecorationEnum.LineThrough:                          fs |= System.Drawing.FontStyle.Strikeout;                          break;                      case TextDecorationEnum.Overline:                      case TextDecorationEnum.None:                          break;                  }                    // WEIGHT                  switch (si.FontWeight)                  {                      case FontWeightEnum.Bold:                      case FontWeightEnum.Bolder:                      case FontWeightEnum.W500:                      case FontWeightEnum.W600:                      case FontWeightEnum.W700:                      case FontWeightEnum.W800:                      case FontWeightEnum.W900:                          fs |= System.Drawing.FontStyle.Bold;                          break;                      default:                          break;                  }                  try                  {                      drawFont = new Font(si.GetFontFamily()' si.FontSize' fs);	// si.FontSize already in points                  }                  catch (ArgumentException)                  {                      drawFont = new Font("Arial"' si.FontSize' fs);	// if this fails we'll let the error pass thru                  }                  // ALIGNMENT                  drawFormat = new StringFormat();                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          drawFormat.Alignment = StringAlignment.Far;                          break;                      case TextAlignEnum.Center:                          drawFormat.Alignment = StringAlignment.Center;                          break;                      case TextAlignEnum.Left:                      default:                          drawFormat.Alignment = StringAlignment.Near;                          break;                  }                  if (pt.SI.WritingMode == WritingModeEnum.tb_rl)                  {                      drawFormat.FormatFlags |= StringFormatFlags.DirectionRightToLeft;                      drawFormat.FormatFlags |= StringFormatFlags.DirectionVertical;                  }                  switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          drawFormat.LineAlignment = StringAlignment.Far;                          break;                      case VerticalAlignEnum.Middle:                          drawFormat.LineAlignment = StringAlignment.Center;                          break;                      case VerticalAlignEnum.Top:                      default:                          drawFormat.LineAlignment = StringAlignment.Near;                          break;                  }                  // draw the background                   DrawBackground(g' r' si);                    // adjust drawing rectangle based on padding                  // http://www.fyireporting.com/forum/viewtopic.php?t=892                  //A.S.> convert pt to px if needed(when printing we need px' when draw preview - pt)                   RectangleF r2;                  if (g.PageUnit == GraphicsUnit.Pixel)                  {                      r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                      r.Top + (si.PaddingTop * g.DpiX) / 72'                      r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                      r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);                  }                  else                  {                      // adjust drawing rectangle based on padding                      r2 = new RectangleF(r.Left + si.PaddingLeft'                      r.Top + si.PaddingTop'                      r.Width - si.PaddingLeft - si.PaddingRight'                      r.Height - si.PaddingTop - si.PaddingBottom);                  }                    drawBrush = new SolidBrush(si.Color);                  if (si.TextAlign == TextAlignEnum.Justified)                  {                      GraphicsExtended.DrawStringJustified(g' pt.Text' drawFont' drawBrush' r2);                  }                  else if (pt.NoClip)	// request not to clip text                  {                      g.DrawString(pt.Text' drawFont' drawBrush' new PointF(r.Left' r.Top)' drawFormat);                  }                  else                  {                      g.DrawString(pt.Text' drawFont' drawBrush' r2' drawFormat);                  }                }              finally              {                  if (drawFont != null)                      drawFont.Dispose();                  if (drawFormat != null)                      drawFont.Dispose();                  if (drawBrush != null)                      drawBrush.Dispose();              }
Magic Number,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,DrawString,The following statement contains a magic number: try              {                  // STYLE                  System.Drawing.FontStyle fs = 0;                  if (si.FontStyle == FontStyleEnum.Italic)                      fs |= System.Drawing.FontStyle.Italic;                    switch (si.TextDecoration)                  {                      case TextDecorationEnum.Underline:                          fs |= System.Drawing.FontStyle.Underline;                          break;                      case TextDecorationEnum.LineThrough:                          fs |= System.Drawing.FontStyle.Strikeout;                          break;                      case TextDecorationEnum.Overline:                      case TextDecorationEnum.None:                          break;                  }                    // WEIGHT                  switch (si.FontWeight)                  {                      case FontWeightEnum.Bold:                      case FontWeightEnum.Bolder:                      case FontWeightEnum.W500:                      case FontWeightEnum.W600:                      case FontWeightEnum.W700:                      case FontWeightEnum.W800:                      case FontWeightEnum.W900:                          fs |= System.Drawing.FontStyle.Bold;                          break;                      default:                          break;                  }                  try                  {                      drawFont = new Font(si.GetFontFamily()' si.FontSize' fs);	// si.FontSize already in points                  }                  catch (ArgumentException)                  {                      drawFont = new Font("Arial"' si.FontSize' fs);	// if this fails we'll let the error pass thru                  }                  // ALIGNMENT                  drawFormat = new StringFormat();                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          drawFormat.Alignment = StringAlignment.Far;                          break;                      case TextAlignEnum.Center:                          drawFormat.Alignment = StringAlignment.Center;                          break;                      case TextAlignEnum.Left:                      default:                          drawFormat.Alignment = StringAlignment.Near;                          break;                  }                  if (pt.SI.WritingMode == WritingModeEnum.tb_rl)                  {                      drawFormat.FormatFlags |= StringFormatFlags.DirectionRightToLeft;                      drawFormat.FormatFlags |= StringFormatFlags.DirectionVertical;                  }                  switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          drawFormat.LineAlignment = StringAlignment.Far;                          break;                      case VerticalAlignEnum.Middle:                          drawFormat.LineAlignment = StringAlignment.Center;                          break;                      case VerticalAlignEnum.Top:                      default:                          drawFormat.LineAlignment = StringAlignment.Near;                          break;                  }                  // draw the background                   DrawBackground(g' r' si);                    // adjust drawing rectangle based on padding                  // http://www.fyireporting.com/forum/viewtopic.php?t=892                  //A.S.> convert pt to px if needed(when printing we need px' when draw preview - pt)                   RectangleF r2;                  if (g.PageUnit == GraphicsUnit.Pixel)                  {                      r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                      r.Top + (si.PaddingTop * g.DpiX) / 72'                      r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                      r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);                  }                  else                  {                      // adjust drawing rectangle based on padding                      r2 = new RectangleF(r.Left + si.PaddingLeft'                      r.Top + si.PaddingTop'                      r.Width - si.PaddingLeft - si.PaddingRight'                      r.Height - si.PaddingTop - si.PaddingBottom);                  }                    drawBrush = new SolidBrush(si.Color);                  if (si.TextAlign == TextAlignEnum.Justified)                  {                      GraphicsExtended.DrawStringJustified(g' pt.Text' drawFont' drawBrush' r2);                  }                  else if (pt.NoClip)	// request not to clip text                  {                      g.DrawString(pt.Text' drawFont' drawBrush' new PointF(r.Left' r.Top)' drawFormat);                  }                  else                  {                      g.DrawString(pt.Text' drawFont' drawBrush' r2' drawFormat);                  }                }              finally              {                  if (drawFont != null)                      drawFont.Dispose();                  if (drawFormat != null)                      drawFont.Dispose();                  if (drawBrush != null)                      drawBrush.Dispose();              }
Magic Number,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,DrawString,The following statement contains a magic number: try              {                  // STYLE                  System.Drawing.FontStyle fs = 0;                  if (si.FontStyle == FontStyleEnum.Italic)                      fs |= System.Drawing.FontStyle.Italic;                    switch (si.TextDecoration)                  {                      case TextDecorationEnum.Underline:                          fs |= System.Drawing.FontStyle.Underline;                          break;                      case TextDecorationEnum.LineThrough:                          fs |= System.Drawing.FontStyle.Strikeout;                          break;                      case TextDecorationEnum.Overline:                      case TextDecorationEnum.None:                          break;                  }                    // WEIGHT                  switch (si.FontWeight)                  {                      case FontWeightEnum.Bold:                      case FontWeightEnum.Bolder:                      case FontWeightEnum.W500:                      case FontWeightEnum.W600:                      case FontWeightEnum.W700:                      case FontWeightEnum.W800:                      case FontWeightEnum.W900:                          fs |= System.Drawing.FontStyle.Bold;                          break;                      default:                          break;                  }                  try                  {                      drawFont = new Font(si.GetFontFamily()' si.FontSize' fs);	// si.FontSize already in points                  }                  catch (ArgumentException)                  {                      drawFont = new Font("Arial"' si.FontSize' fs);	// if this fails we'll let the error pass thru                  }                  // ALIGNMENT                  drawFormat = new StringFormat();                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          drawFormat.Alignment = StringAlignment.Far;                          break;                      case TextAlignEnum.Center:                          drawFormat.Alignment = StringAlignment.Center;                          break;                      case TextAlignEnum.Left:                      default:                          drawFormat.Alignment = StringAlignment.Near;                          break;                  }                  if (pt.SI.WritingMode == WritingModeEnum.tb_rl)                  {                      drawFormat.FormatFlags |= StringFormatFlags.DirectionRightToLeft;                      drawFormat.FormatFlags |= StringFormatFlags.DirectionVertical;                  }                  switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          drawFormat.LineAlignment = StringAlignment.Far;                          break;                      case VerticalAlignEnum.Middle:                          drawFormat.LineAlignment = StringAlignment.Center;                          break;                      case VerticalAlignEnum.Top:                      default:                          drawFormat.LineAlignment = StringAlignment.Near;                          break;                  }                  // draw the background                   DrawBackground(g' r' si);                    // adjust drawing rectangle based on padding                  // http://www.fyireporting.com/forum/viewtopic.php?t=892                  //A.S.> convert pt to px if needed(when printing we need px' when draw preview - pt)                   RectangleF r2;                  if (g.PageUnit == GraphicsUnit.Pixel)                  {                      r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                      r.Top + (si.PaddingTop * g.DpiX) / 72'                      r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                      r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);                  }                  else                  {                      // adjust drawing rectangle based on padding                      r2 = new RectangleF(r.Left + si.PaddingLeft'                      r.Top + si.PaddingTop'                      r.Width - si.PaddingLeft - si.PaddingRight'                      r.Height - si.PaddingTop - si.PaddingBottom);                  }                    drawBrush = new SolidBrush(si.Color);                  if (si.TextAlign == TextAlignEnum.Justified)                  {                      GraphicsExtended.DrawStringJustified(g' pt.Text' drawFont' drawBrush' r2);                  }                  else if (pt.NoClip)	// request not to clip text                  {                      g.DrawString(pt.Text' drawFont' drawBrush' new PointF(r.Left' r.Top)' drawFormat);                  }                  else                  {                      g.DrawString(pt.Text' drawFont' drawBrush' r2' drawFormat);                  }                }              finally              {                  if (drawFont != null)                      drawFont.Dispose();                  if (drawFormat != null)                      drawFont.Dispose();                  if (drawBrush != null)                      drawBrush.Dispose();              }
Magic Number,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,DrawString,The following statement contains a magic number: try              {                  // STYLE                  System.Drawing.FontStyle fs = 0;                  if (si.FontStyle == FontStyleEnum.Italic)                      fs |= System.Drawing.FontStyle.Italic;                    switch (si.TextDecoration)                  {                      case TextDecorationEnum.Underline:                          fs |= System.Drawing.FontStyle.Underline;                          break;                      case TextDecorationEnum.LineThrough:                          fs |= System.Drawing.FontStyle.Strikeout;                          break;                      case TextDecorationEnum.Overline:                      case TextDecorationEnum.None:                          break;                  }                    // WEIGHT                  switch (si.FontWeight)                  {                      case FontWeightEnum.Bold:                      case FontWeightEnum.Bolder:                      case FontWeightEnum.W500:                      case FontWeightEnum.W600:                      case FontWeightEnum.W700:                      case FontWeightEnum.W800:                      case FontWeightEnum.W900:                          fs |= System.Drawing.FontStyle.Bold;                          break;                      default:                          break;                  }                  try                  {                      drawFont = new Font(si.GetFontFamily()' si.FontSize' fs);	// si.FontSize already in points                  }                  catch (ArgumentException)                  {                      drawFont = new Font("Arial"' si.FontSize' fs);	// if this fails we'll let the error pass thru                  }                  // ALIGNMENT                  drawFormat = new StringFormat();                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          drawFormat.Alignment = StringAlignment.Far;                          break;                      case TextAlignEnum.Center:                          drawFormat.Alignment = StringAlignment.Center;                          break;                      case TextAlignEnum.Left:                      default:                          drawFormat.Alignment = StringAlignment.Near;                          break;                  }                  if (pt.SI.WritingMode == WritingModeEnum.tb_rl)                  {                      drawFormat.FormatFlags |= StringFormatFlags.DirectionRightToLeft;                      drawFormat.FormatFlags |= StringFormatFlags.DirectionVertical;                  }                  switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          drawFormat.LineAlignment = StringAlignment.Far;                          break;                      case VerticalAlignEnum.Middle:                          drawFormat.LineAlignment = StringAlignment.Center;                          break;                      case VerticalAlignEnum.Top:                      default:                          drawFormat.LineAlignment = StringAlignment.Near;                          break;                  }                  // draw the background                   DrawBackground(g' r' si);                    // adjust drawing rectangle based on padding                  // http://www.fyireporting.com/forum/viewtopic.php?t=892                  //A.S.> convert pt to px if needed(when printing we need px' when draw preview - pt)                   RectangleF r2;                  if (g.PageUnit == GraphicsUnit.Pixel)                  {                      r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                      r.Top + (si.PaddingTop * g.DpiX) / 72'                      r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                      r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);                  }                  else                  {                      // adjust drawing rectangle based on padding                      r2 = new RectangleF(r.Left + si.PaddingLeft'                      r.Top + si.PaddingTop'                      r.Width - si.PaddingLeft - si.PaddingRight'                      r.Height - si.PaddingTop - si.PaddingBottom);                  }                    drawBrush = new SolidBrush(si.Color);                  if (si.TextAlign == TextAlignEnum.Justified)                  {                      GraphicsExtended.DrawStringJustified(g' pt.Text' drawFont' drawBrush' r2);                  }                  else if (pt.NoClip)	// request not to clip text                  {                      g.DrawString(pt.Text' drawFont' drawBrush' new PointF(r.Left' r.Top)' drawFormat);                  }                  else                  {                      g.DrawString(pt.Text' drawFont' drawBrush' r2' drawFormat);                  }                }              finally              {                  if (drawFont != null)                      drawFont.Dispose();                  if (drawFormat != null)                      drawFont.Dispose();                  if (drawBrush != null)                      drawBrush.Dispose();              }
Magic Number,LibRdlCrossPlatformViewer,RenderXwt,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\RenderXwt.cs,DrawLine,The following statement contains a magic number: switch (bs)              {                  case BorderStyleEnum.Dashed:                      //	                p.DashStyle = DashStyle.Dash;                      g.SetLineDash(0.0' new double[] { 2' 1 });                      break;                  case BorderStyleEnum.Dotted:                      //                        p.DashStyle = DashStyle.Dot;                      g.SetLineDash(0.0' new double[] { 1 });                      break;                  case BorderStyleEnum.Double:                  case BorderStyleEnum.Groove:                  case BorderStyleEnum.Inset:                  case BorderStyleEnum.Solid:                  case BorderStyleEnum.Outset:                  case BorderStyleEnum.Ridge:                  case BorderStyleEnum.WindowInset:                  default:                      g.SetLineDash(0.0' new double[] { });                      break;              }
Magic Number,LibRdlCrossPlatformViewer,RenderXwt,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\RenderXwt.cs,DrawString,The following statement contains a magic number: float fontsize = (si.FontSize * 72 / 96);
Magic Number,LibRdlCrossPlatformViewer,RenderXwt,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\RenderXwt.cs,DrawString,The following statement contains a magic number: float fontsize = (si.FontSize * 72 / 96);
Magic Number,LibRdlCrossPlatformViewer,RenderXwt,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\RenderXwt.cs,DrawString,The following statement contains a magic number: double height = 12;
Magic Number,LibRdlCrossPlatformViewer,RenderXwt,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\RenderXwt.cs,DrawString,The following statement contains a magic number: switch (si.VerticalAlign)              {                  case VerticalAlignEnum.Top:                      y = r.Y + si.PaddingTop;                      break;                  case VerticalAlignEnum.Middle:                      y = r.Y + (r.Height - height) / 2;                      break;                  case VerticalAlignEnum.Bottom:                      y = r.Y + (r.Height - height) - si.PaddingBottom;                      break;              }
Magic Number,LibRdlCrossPlatformViewer,ReportArea,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\ReportArea.cs,SetReport,The following statement contains a magic number: this.MinHeight = (int)report.PageWidthPoints + (rep_padding * 2);
Magic Number,LibRdlCrossPlatformViewer,ReportArea,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\ReportArea.cs,SetReport,The following statement contains a magic number: this.MinWidth = (int)report.PageHeightPoints + (rep_padding * 2);
Magic Number,LibRdlCrossPlatformViewer,ReportViewer,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\ReportViewer.cs,GetReport,The following statement contains a magic number: if (r.ErrorMaxSeverity > 0)              {                    foreach (string emsg in r.ErrorItems)                  {                      Console.WriteLine(emsg);                  }                    int severity = r.ErrorMaxSeverity;                  r.ErrorReset();                  if (severity > 4)                  {                      r = null; // don't return when severe errors                  }              }
Missing Default,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,DrawBackground,The following switch statement is missing a default case: switch (si.PatternType)                      {                          case patternTypeEnum.BackwardDiagonal:                              hb = new HatchBrush(HatchStyle.BackwardDiagonal' si.Color' si.BackgroundColor);                              break;                          case patternTypeEnum.CheckerBoard:                              hb = new HatchBrush(HatchStyle.LargeCheckerBoard' si.Color' si.BackgroundColor);                              break;                          case patternTypeEnum.Cross:                              hb = new HatchBrush(HatchStyle.Cross' si.Color' si.BackgroundColor);                              break;                          case patternTypeEnum.DarkDownwardDiagonal:                              hb = new HatchBrush(HatchStyle.DarkDownwardDiagonal' si.Color' si.BackgroundColor);                              break;                          case patternTypeEnum.DarkHorizontal:                              hb = new HatchBrush(HatchStyle.DarkHorizontal' si.Color' si.BackgroundColor);                              break;                          case patternTypeEnum.DiagonalBrick:                              hb = new HatchBrush(HatchStyle.DiagonalBrick' si.Color' si.BackgroundColor);                              break;                          case patternTypeEnum.HorizontalBrick:                              hb = new HatchBrush(HatchStyle.HorizontalBrick' si.Color' si.BackgroundColor);                              break;                          case patternTypeEnum.LargeConfetti:                              hb = new HatchBrush(HatchStyle.LargeConfetti' si.Color' si.BackgroundColor);                              break;                          case patternTypeEnum.OutlinedDiamond:                              hb = new HatchBrush(HatchStyle.OutlinedDiamond' si.Color' si.BackgroundColor);                              break;                          case patternTypeEnum.SmallConfetti:                              hb = new HatchBrush(HatchStyle.SmallConfetti' si.Color' si.BackgroundColor);                              break;                          case patternTypeEnum.SolidDiamond:                              hb = new HatchBrush(HatchStyle.SolidDiamond' si.Color' si.BackgroundColor);                              break;                          case patternTypeEnum.Vertical:                              hb = new HatchBrush(HatchStyle.Vertical' si.Color' si.BackgroundColor);                              break;                      }
Missing Default,LibRdlCrossPlatformViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\PageDrawing.cs,DrawString,The following switch statement is missing a default case: switch (si.TextDecoration)                  {                      case TextDecorationEnum.Underline:                          fs |= System.Drawing.FontStyle.Underline;                          break;                      case TextDecorationEnum.LineThrough:                          fs |= System.Drawing.FontStyle.Strikeout;                          break;                      case TextDecorationEnum.Overline:                      case TextDecorationEnum.None:                          break;                  }
Missing Default,LibRdlCrossPlatformViewer,RenderXwt,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\RenderXwt.cs,DrawString,The following switch statement is missing a default case: switch (si.FontWeight)              {                  case FontWeightEnum.Bold:                  case FontWeightEnum.Bolder:                  case FontWeightEnum.W500:                  case FontWeightEnum.W600:                  case FontWeightEnum.W700:                  case FontWeightEnum.W800:                  case FontWeightEnum.W900:                      layout.Font.WithWeight(Xwt.Drawing.FontWeight.Bold);                      break;              }
Missing Default,LibRdlCrossPlatformViewer,RenderXwt,C:\repos\majorsilence_My-FyiReporting\LibRdlCrossPlatformViewer\RenderXwt.cs,DrawString,The following switch statement is missing a default case: switch (si.VerticalAlign)              {                  case VerticalAlignEnum.Top:                      y = r.Y + si.PaddingTop;                      break;                  case VerticalAlignEnum.Middle:                      y = r.Y + (r.Height - height) / 2;                      break;                  case VerticalAlignEnum.Bottom:                      y = r.Y + (r.Height - height) - si.PaddingBottom;                      break;              }
