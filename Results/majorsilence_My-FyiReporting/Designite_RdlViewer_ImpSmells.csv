Implementation smell,Namespace,Class,File,Method,Description
Long Method,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,DrawBackground,The method has 107 lines of code.
Long Method,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,DrawString,The method has 133 lines of code.
Complex Method,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,OnMouseMove,Cyclomatic complexity of the method is 11
Complex Method,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,ProcessPage,Cyclomatic complexity of the method is 11
Complex Method,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,DrawString,Cyclomatic complexity of the method is 11
Complex Method,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,HighlightString,Cyclomatic complexity of the method is 9
Complex Method,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,Find,Cyclomatic complexity of the method is 11
Complex Method,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,GetReport,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,ParametersViewClick,Cyclomatic complexity of the method is 11
Long Parameter List,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,Draw,The method has 5 parameters. Parameters: g' page' clipRectangle' drawBackground' pageOffset
Long Parameter List,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,Draw,The method has 11 parameters. Parameters: g' zoom' leftOffset' pageGap' hScroll' vScroll' clipRectangle' highLightItem' highLight' highLightCaseSensitive' highLightAll
Long Parameter List,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,DrawLine,The method has 8 parameters. Parameters: c' bs' w' g' x' y' x2' y2
Long Parameter List,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,DrawCurve,The method has 7 parameters. Parameters: c' bs' w' g' points' Offset' Tension
Long Parameter List,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,HighlightString,The method has 5 parameters. Parameters: g' dtext' r' f' sf
Long Identifier,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,,The length of the parameter GetDataSourceReferencePassword is 30.
Long Statement,fyiReporting.RdlViewer,DataSourcePassword,C:\repos\majorsilence_My-FyiReporting\RdlViewer\DataSourcePassword.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DataSourcePassword)); " is 138.
Long Statement,fyiReporting.RdlViewer,DialogMessages,C:\repos\majorsilence_My-FyiReporting\RdlViewer\DialogMessages.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DialogMessages)); " is 134.
Long Statement,fyiReporting.RdlViewer,DialogWait,C:\repos\majorsilence_My-FyiReporting\RdlViewer\DialogWait.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DialogWait)); " is 130.
Long Statement,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,OnMouseDown,The length of the statement  "                        hle.pi.HyperLink' Environment.NewLine' ex.Message' Strings.PageDrawing_OnMouseDown_UnableLink)' Strings.PageDrawing_OnMouseDown_HyperLinkError); " is 144.
Long Statement,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,DrawPie,The length of the statement  "                g.FillPie(new SolidBrush(si.BackgroundColor)' (int)r.X' (int)r.Y' (int)r.Width' (int)r.Height' (float)pp.StartAngle' (float)pp.SweepAngle); " is 139.
Long Statement,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,Rebuild,The length of the statement  "            // Aulofee customization - start. Code added (2 lines) to avoid to execute twice GetPages and so the SQL query (custo end).  " is 123.
Long Statement,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,Rebuild,The length of the statement  "                // Aulofee customization - start. Code added (2 lines) to avoid to execute twice GetPages and so the SQL query (custo end).  " is 123.
Long Statement,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,ScrollToPageItem,The length of the statement  "                ScrollEventArgs sa = new ScrollEventArgs(ScrollEventType.ThumbPosition' _vScroll.Maximum + 1); // position is intentionally wrong " is 129.
Long Statement,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,ScrollToPageItem,The length of the statement  "                ScrollEventArgs sa = new ScrollEventArgs(ScrollEventType.ThumbPosition' _hScroll.Maximum + 1); // position is intentionally wrong " is 129.
Long Statement,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,GetReportEmptyMsg,The length of the statement  "            string prog = "<Report><Width>8.5in</Width><Body><Height>1in</Height><ReportItems><Textbox><Value></Value><Style><FontWeight>Bold</FontWeight></Style><Height>.3in</Height><Width>5 in</Width></Textbox></ReportItems></Body></Report>"; " is 232.
Long Statement,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,GetReportErrorMsg,The length of the statement  "			<Textbox><Top>.1in</Top><Value>fyiReporting Software' LLC</Value><Style><FontSize>18pt</FontSize><FontWeight>Bold</FontWeight></Style></Textbox> " is 144.
Long Statement,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,GetReportErrorMsg,The length of the statement  "			<Textbox><Top>.1in</Top><Left>4.25in</Left><Value>=Globals!ExecutionTime</Value><Style><Format>dddd' MMMM dd' yyyy hh:mm:ss tt</Format><FontSize>12pt</FontSize><FontWeight>Bold</FontWeight></Style></Textbox> " is 207.
Long Statement,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,GetReportErrorMsg,The length of the statement  "			<Textbox><Top>.5in</Top><Value>Errors processing report</Value><Style><FontSize>12pt</FontSize><FontWeight>Bold</FontWeight></Style></Textbox> " is 142.
Long Statement,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,ParametersViewClick,The length of the statement  "                        MessageBox.Show(string.Format(Strings.RdlViewer_ParametersViewClick_RequiredParameterNotProvided' rp.Prompt)' Strings.RdlViewer_ParametersViewClick_ReportParameterMissing); " is 172.
Long Statement,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RdlViewer)); " is 129.
Long Statement,fyiReporting.RdlViewer,RdlViewerFind,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewerFind.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RdlViewerFind)); " is 133.
Long Statement,fyiReporting.RdlViewer,RdlViewerFind,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewerFind.cs,InitializeComponent,The length of the statement  "			this.bClose.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255))))' ((int)(((byte)(192))))' ((int)(((byte)(192))))); " is 126.
Long Statement,fyiReporting.RdlViewer,ViewerToolstrip,C:\repos\majorsilence_My-FyiReporting\RdlViewer\ViewerToolstrip.cs,SaveAsClicked,The length of the statement  "            dlg.Filter = "PDF files|*.pdf|XML files|*.xml|HTML files|*.html|CSV files|*.csv|RTF files|*.rtf|TIF files|*.tif|Excel files|*.xlsx|MHT files|*.mht"; " is 148.
Long Statement,fyiReporting.RdlViewer,ViewerToolstrip,C:\repos\majorsilence_My-FyiReporting\RdlViewer\ViewerToolstrip.cs,SaveAsClicked,The length of the statement  "                    MessageBox.Show(String.Format("{0} is not a valid file type. File extension must be PDF' XML' HTML' CSV' MHT' RTF' TIF' XLSX."' dlg.FileName)' " is 142.
Long Statement,fyiReporting.RdlViewer,ViewerToolstrip,C:\repos\majorsilence_My-FyiReporting\RdlViewer\ViewerToolstrip.cs,InitializeToolBar,The length of the statement  "            this.Items.Add(new ToolStripButton("Open"' GetImage("fyiReporting.RdlViewer.Resources.document-open.png")' OpenClicked)); " is 121.
Long Statement,fyiReporting.RdlViewer,ViewerToolstrip,C:\repos\majorsilence_My-FyiReporting\RdlViewer\ViewerToolstrip.cs,InitializeToolBar,The length of the statement  "            this.Items.Add(new ToolStripButton("Save As"' GetImage("fyiReporting.RdlViewer.Resources.document-save.png")' SaveAsClicked)); " is 126.
Long Statement,fyiReporting.RdlViewer,ViewerToolstrip,C:\repos\majorsilence_My-FyiReporting\RdlViewer\ViewerToolstrip.cs,InitializeToolBar,The length of the statement  "            this.Items.Add(new ToolStripButton("Print"' GetImage("fyiReporting.RdlViewer.Resources.document-print.png")' PrintClicked)); " is 124.
Complex Conditional,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,IsInputKey,The conditional expression  "keyData == Keys.Left ||                  keyData == Keys.Right ||                  keyData == Keys.Up ||                  keyData == Keys.Down ||                  keyData == Keys.Home ||                  keyData == Keys.End ||                  keyData == Keys.PageDown ||                  keyData == Keys.PageUp"  is complex.
Complex Conditional,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,SaveAs,The conditional expression  "!(type == OutputPresentationType.PDF || type == OutputPresentationType.PDFOldStyle ||                  type == OutputPresentationType.TIF || type == OutputPresentationType.TIFBW)"  is complex.
Empty Catch Block,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,CreateSelectionList,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,GetHitListEntry,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,HighlightString,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,GetReport,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,showWait,The method has an empty catch block.
Empty Catch Block,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,ParametersViewClick,The method has an empty catch block.
Magic Number,fyiReporting.RdlViewer,DialogWait,C:\repos\majorsilence_My-FyiReporting\RdlViewer\DialogWait.cs,DialogWait,The following statement contains a magic number: timer1.Interval = 1000;
Magic Number,fyiReporting.RdlViewer,DialogWait,C:\repos\majorsilence_My-FyiReporting\RdlViewer\DialogWait.cs,InitializeComponent,The following statement contains a magic number: this.timer1.Interval = 1000;
Magic Number,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,PageDrawing,The following statement contains a magic number: try              {                  ga = this.CreateGraphics();                  DpiX = ga.DpiX;                  DpiY = ga.DpiY;              }              catch              {                  DpiX = DpiY = 96;              }              finally              {                  if (ga != null)                      ga.Dispose();              }
Magic Number,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,ComparePageItemByPageXY,The following statement contains a magic number: if (pi1.Y != pi2.Y)              {                  return Convert.ToInt32((pi1.Y - pi2.Y) * 1000);              }
Magic Number,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,ComparePageItemByPageXY,The following statement contains a magic number: return Convert.ToInt32((pi1.X - pi2.X) * 1000);
Magic Number,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,Draw,The following statement contains a magic number: for (int p = fpage; p <= lpage; p++)              {                  _vScroll = vScroll - p * (_pgs.PageHeight + pageGap);                    System.Drawing.Rectangle pr =                      new System.Drawing.Rectangle((int)PixelsX(_left - _hScroll)' (int)PixelsY(_top - _vScroll)'                                                      (int)PixelsX(_pgs.PageWidth)' (int)PixelsY(_pgs.PageHeight));                  g.FillRectangle(Brushes.White' pr);                    ProcessPage(g' _pgs[p]' r' true);                    // Draw the page outline                  using (Pen pn = new Pen(Brushes.Black' 1))                  {                      int z3 = Math.Min((int)(3f / zoom)' 3);                      if (z3 <= 0)                          z3 = 1;                      int z4 = Math.Min((int)(4f / zoom)' 4);                      if (z4 <= 0)                          z4 = 1;                      g.DrawRectangle(pn' pr);					// outline of page                      g.FillRectangle(Brushes.Black'                          pr.X + pr.Width' pr.Y + z3' z3' pr.Height);		// right side of page                      g.FillRectangle(Brushes.Black'                          pr.X + z3' pr.Y + pr.Height' pr.Width' z4);		// bottom of page                  }              }
Magic Number,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,Draw,The following statement contains a magic number: for (int p = fpage; p <= lpage; p++)              {                  _vScroll = vScroll - p * (_pgs.PageHeight + pageGap);                    System.Drawing.Rectangle pr =                      new System.Drawing.Rectangle((int)PixelsX(_left - _hScroll)' (int)PixelsY(_top - _vScroll)'                                                      (int)PixelsX(_pgs.PageWidth)' (int)PixelsY(_pgs.PageHeight));                  g.FillRectangle(Brushes.White' pr);                    ProcessPage(g' _pgs[p]' r' true);                    // Draw the page outline                  using (Pen pn = new Pen(Brushes.Black' 1))                  {                      int z3 = Math.Min((int)(3f / zoom)' 3);                      if (z3 <= 0)                          z3 = 1;                      int z4 = Math.Min((int)(4f / zoom)' 4);                      if (z4 <= 0)                          z4 = 1;                      g.DrawRectangle(pn' pr);					// outline of page                      g.FillRectangle(Brushes.Black'                          pr.X + pr.Width' pr.Y + z3' z3' pr.Height);		// right side of page                      g.FillRectangle(Brushes.Black'                          pr.X + z3' pr.Y + pr.Height' pr.Width' z4);		// bottom of page                  }              }
Magic Number,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,DrawImageBackground,The following statement contains a magic number: try              {                  strm = new MemoryStream(pi.ImageData);                  im = System.Drawing.Image.FromStream(strm);                    // http://www.fyireporting.com/forum/viewtopic.php?t=892                  //A.S.> convert pt to px if needed(when printing we need px' when draw preview - pt)                     RectangleF r2;                  if (g.PageUnit == GraphicsUnit.Pixel)                  {                      r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                      r.Top + (si.PaddingTop * g.DpiX) / 72'                      r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                      r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);                  }                  else                  {                      // adjust drawing rectangle based on padding                      r2 = new RectangleF(r.Left + si.PaddingLeft'                      r.Top + si.PaddingTop'                      r.Width - si.PaddingLeft - si.PaddingRight'                      r.Height - si.PaddingTop - si.PaddingBottom);                  }                      int repeatX = 0;                  int repeatY = 0;                  switch (pi.Repeat)                  {                      case ImageRepeat.Repeat:                          repeatX = (int)Math.Floor(r2.Width / pi.SamplesW);                          repeatY = (int)Math.Floor(r2.Height / pi.SamplesH);                          break;                      case ImageRepeat.RepeatX:                          repeatX = (int)Math.Floor(r2.Width / pi.SamplesW);                          repeatY = 1;                          break;                      case ImageRepeat.RepeatY:                          repeatY = (int)Math.Floor(r2.Height / pi.SamplesH);                          repeatX = 1;                          break;                      case ImageRepeat.NoRepeat:                      default:                          repeatX = repeatY = 1;                          break;                  }                    //make sure the image is drawn at least 1 times                   repeatX = Math.Max(repeatX' 1);                  repeatY = Math.Max(repeatY' 1);                    float startX = r2.Left;                  float startY = r2.Top;                    Region saveRegion = g.Clip;                  Region clipRegion = new Region(g.Clip.GetRegionData());                  clipRegion.Intersect(r2);                  g.Clip = clipRegion;                    for (int i = 0; i < repeatX; i++)                  {                      for (int j = 0; j < repeatY; j++)                      {                          float currX = startX + i * pi.SamplesW;                          float currY = startY + j * pi.SamplesH;                          g.DrawImage(im' new RectangleF(currX' currY' pi.SamplesW' pi.SamplesH));                      }                  }                  g.Clip = saveRegion;              }              finally              {                  if (strm != null)                      strm.Close();                  if (im != null)                      im.Dispose();              }
Magic Number,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,DrawImageBackground,The following statement contains a magic number: try              {                  strm = new MemoryStream(pi.ImageData);                  im = System.Drawing.Image.FromStream(strm);                    // http://www.fyireporting.com/forum/viewtopic.php?t=892                  //A.S.> convert pt to px if needed(when printing we need px' when draw preview - pt)                     RectangleF r2;                  if (g.PageUnit == GraphicsUnit.Pixel)                  {                      r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                      r.Top + (si.PaddingTop * g.DpiX) / 72'                      r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                      r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);                  }                  else                  {                      // adjust drawing rectangle based on padding                      r2 = new RectangleF(r.Left + si.PaddingLeft'                      r.Top + si.PaddingTop'                      r.Width - si.PaddingLeft - si.PaddingRight'                      r.Height - si.PaddingTop - si.PaddingBottom);                  }                      int repeatX = 0;                  int repeatY = 0;                  switch (pi.Repeat)                  {                      case ImageRepeat.Repeat:                          repeatX = (int)Math.Floor(r2.Width / pi.SamplesW);                          repeatY = (int)Math.Floor(r2.Height / pi.SamplesH);                          break;                      case ImageRepeat.RepeatX:                          repeatX = (int)Math.Floor(r2.Width / pi.SamplesW);                          repeatY = 1;                          break;                      case ImageRepeat.RepeatY:                          repeatY = (int)Math.Floor(r2.Height / pi.SamplesH);                          repeatX = 1;                          break;                      case ImageRepeat.NoRepeat:                      default:                          repeatX = repeatY = 1;                          break;                  }                    //make sure the image is drawn at least 1 times                   repeatX = Math.Max(repeatX' 1);                  repeatY = Math.Max(repeatY' 1);                    float startX = r2.Left;                  float startY = r2.Top;                    Region saveRegion = g.Clip;                  Region clipRegion = new Region(g.Clip.GetRegionData());                  clipRegion.Intersect(r2);                  g.Clip = clipRegion;                    for (int i = 0; i < repeatX; i++)                  {                      for (int j = 0; j < repeatY; j++)                      {                          float currX = startX + i * pi.SamplesW;                          float currY = startY + j * pi.SamplesH;                          g.DrawImage(im' new RectangleF(currX' currY' pi.SamplesW' pi.SamplesH));                      }                  }                  g.Clip = saveRegion;              }              finally              {                  if (strm != null)                      strm.Close();                  if (im != null)                      im.Dispose();              }
Magic Number,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,DrawImageBackground,The following statement contains a magic number: try              {                  strm = new MemoryStream(pi.ImageData);                  im = System.Drawing.Image.FromStream(strm);                    // http://www.fyireporting.com/forum/viewtopic.php?t=892                  //A.S.> convert pt to px if needed(when printing we need px' when draw preview - pt)                     RectangleF r2;                  if (g.PageUnit == GraphicsUnit.Pixel)                  {                      r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                      r.Top + (si.PaddingTop * g.DpiX) / 72'                      r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                      r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);                  }                  else                  {                      // adjust drawing rectangle based on padding                      r2 = new RectangleF(r.Left + si.PaddingLeft'                      r.Top + si.PaddingTop'                      r.Width - si.PaddingLeft - si.PaddingRight'                      r.Height - si.PaddingTop - si.PaddingBottom);                  }                      int repeatX = 0;                  int repeatY = 0;                  switch (pi.Repeat)                  {                      case ImageRepeat.Repeat:                          repeatX = (int)Math.Floor(r2.Width / pi.SamplesW);                          repeatY = (int)Math.Floor(r2.Height / pi.SamplesH);                          break;                      case ImageRepeat.RepeatX:                          repeatX = (int)Math.Floor(r2.Width / pi.SamplesW);                          repeatY = 1;                          break;                      case ImageRepeat.RepeatY:                          repeatY = (int)Math.Floor(r2.Height / pi.SamplesH);                          repeatX = 1;                          break;                      case ImageRepeat.NoRepeat:                      default:                          repeatX = repeatY = 1;                          break;                  }                    //make sure the image is drawn at least 1 times                   repeatX = Math.Max(repeatX' 1);                  repeatY = Math.Max(repeatY' 1);                    float startX = r2.Left;                  float startY = r2.Top;                    Region saveRegion = g.Clip;                  Region clipRegion = new Region(g.Clip.GetRegionData());                  clipRegion.Intersect(r2);                  g.Clip = clipRegion;                    for (int i = 0; i < repeatX; i++)                  {                      for (int j = 0; j < repeatY; j++)                      {                          float currX = startX + i * pi.SamplesW;                          float currY = startY + j * pi.SamplesH;                          g.DrawImage(im' new RectangleF(currX' currY' pi.SamplesW' pi.SamplesH));                      }                  }                  g.Clip = saveRegion;              }              finally              {                  if (strm != null)                      strm.Close();                  if (im != null)                      im.Dispose();              }
Magic Number,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,DrawImageBackground,The following statement contains a magic number: try              {                  strm = new MemoryStream(pi.ImageData);                  im = System.Drawing.Image.FromStream(strm);                    // http://www.fyireporting.com/forum/viewtopic.php?t=892                  //A.S.> convert pt to px if needed(when printing we need px' when draw preview - pt)                     RectangleF r2;                  if (g.PageUnit == GraphicsUnit.Pixel)                  {                      r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                      r.Top + (si.PaddingTop * g.DpiX) / 72'                      r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                      r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);                  }                  else                  {                      // adjust drawing rectangle based on padding                      r2 = new RectangleF(r.Left + si.PaddingLeft'                      r.Top + si.PaddingTop'                      r.Width - si.PaddingLeft - si.PaddingRight'                      r.Height - si.PaddingTop - si.PaddingBottom);                  }                      int repeatX = 0;                  int repeatY = 0;                  switch (pi.Repeat)                  {                      case ImageRepeat.Repeat:                          repeatX = (int)Math.Floor(r2.Width / pi.SamplesW);                          repeatY = (int)Math.Floor(r2.Height / pi.SamplesH);                          break;                      case ImageRepeat.RepeatX:                          repeatX = (int)Math.Floor(r2.Width / pi.SamplesW);                          repeatY = 1;                          break;                      case ImageRepeat.RepeatY:                          repeatY = (int)Math.Floor(r2.Height / pi.SamplesH);                          repeatX = 1;                          break;                      case ImageRepeat.NoRepeat:                      default:                          repeatX = repeatY = 1;                          break;                  }                    //make sure the image is drawn at least 1 times                   repeatX = Math.Max(repeatX' 1);                  repeatY = Math.Max(repeatY' 1);                    float startX = r2.Left;                  float startY = r2.Top;                    Region saveRegion = g.Clip;                  Region clipRegion = new Region(g.Clip.GetRegionData());                  clipRegion.Intersect(r2);                  g.Clip = clipRegion;                    for (int i = 0; i < repeatX; i++)                  {                      for (int j = 0; j < repeatY; j++)                      {                          float currX = startX + i * pi.SamplesW;                          float currY = startY + j * pi.SamplesH;                          g.DrawImage(im' new RectangleF(currX' currY' pi.SamplesW' pi.SamplesH));                      }                  }                  g.Clip = saveRegion;              }              finally              {                  if (strm != null)                      strm.Close();                  if (im != null)                      im.Dispose();              }
Magic Number,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,DrawImageSized,The following statement contains a magic number: if (g.PageUnit == GraphicsUnit.Pixel)              {                  r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                  r.Top + (si.PaddingTop * g.DpiX) / 72'                  r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                  r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);              }              else              {                  // adjust drawing rectangle based on padding                  r2 = new RectangleF(r.Left + si.PaddingLeft'                  r.Top + si.PaddingTop'                  r.Width - si.PaddingLeft - si.PaddingRight'                  r.Height - si.PaddingTop - si.PaddingBottom);              }
Magic Number,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,DrawImageSized,The following statement contains a magic number: if (g.PageUnit == GraphicsUnit.Pixel)              {                  r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                  r.Top + (si.PaddingTop * g.DpiX) / 72'                  r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                  r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);              }              else              {                  // adjust drawing rectangle based on padding                  r2 = new RectangleF(r.Left + si.PaddingLeft'                  r.Top + si.PaddingTop'                  r.Width - si.PaddingLeft - si.PaddingRight'                  r.Height - si.PaddingTop - si.PaddingBottom);              }
Magic Number,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,DrawImageSized,The following statement contains a magic number: if (g.PageUnit == GraphicsUnit.Pixel)              {                  r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                  r.Top + (si.PaddingTop * g.DpiX) / 72'                  r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                  r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);              }              else              {                  // adjust drawing rectangle based on padding                  r2 = new RectangleF(r.Left + si.PaddingLeft'                  r.Top + si.PaddingTop'                  r.Width - si.PaddingLeft - si.PaddingRight'                  r.Height - si.PaddingTop - si.PaddingBottom);              }
Magic Number,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,DrawImageSized,The following statement contains a magic number: if (g.PageUnit == GraphicsUnit.Pixel)              {                  r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                  r.Top + (si.PaddingTop * g.DpiX) / 72'                  r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                  r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);              }              else              {                  // adjust drawing rectangle based on padding                  r2 = new RectangleF(r.Left + si.PaddingLeft'                  r.Top + si.PaddingTop'                  r.Width - si.PaddingLeft - si.PaddingRight'                  r.Height - si.PaddingTop - si.PaddingBottom);              }
Magic Number,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,DrawImageSized,The following statement contains a magic number: if (SelectTool && pi.AllowSelect && _SelectList.Contains(pi))              {                  g.FillRectangle(new SolidBrush(Color.FromArgb(50' _SelectItemColor))' ir);              }
Magic Number,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,DrawString,The following statement contains a magic number: try              {                  // STYLE                  System.Drawing.FontStyle fs = 0;                  if (si.FontStyle == FontStyleEnum.Italic)                      fs |= System.Drawing.FontStyle.Italic;                    switch (si.TextDecoration)                  {                      case TextDecorationEnum.Underline:                          fs |= System.Drawing.FontStyle.Underline;                          break;                      case TextDecorationEnum.LineThrough:                          fs |= System.Drawing.FontStyle.Strikeout;                          break;                      case TextDecorationEnum.Overline:                      case TextDecorationEnum.None:                          break;                  }                    // WEIGHT                  switch (si.FontWeight)                  {                      case FontWeightEnum.Bold:                      case FontWeightEnum.Bolder:                      case FontWeightEnum.W500:                      case FontWeightEnum.W600:                      case FontWeightEnum.W700:                      case FontWeightEnum.W800:                      case FontWeightEnum.W900:                          fs |= System.Drawing.FontStyle.Bold;                          break;                      default:                          break;                  }                  try                  {                      drawFont = new Font(si.GetFontFamily()' si.FontSize' fs);	// si.FontSize already in points                  }                  catch (ArgumentException)                  {                      drawFont = new Font("Arial"' si.FontSize' fs);	// if this fails we'll let the error pass thru                  }                  // ALIGNMENT                  drawFormat = new StringFormat();                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          drawFormat.Alignment = StringAlignment.Far;                          break;                      case TextAlignEnum.Center:                          drawFormat.Alignment = StringAlignment.Center;                          break;                      case TextAlignEnum.Left:                      default:                          drawFormat.Alignment = StringAlignment.Near;                          break;                  }                  if (pt.SI.WritingMode == WritingModeEnum.tb_rl)                  {                      drawFormat.FormatFlags |= StringFormatFlags.DirectionRightToLeft;                      drawFormat.FormatFlags |= StringFormatFlags.DirectionVertical;                  }                  switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          drawFormat.LineAlignment = StringAlignment.Far;                          break;                      case VerticalAlignEnum.Middle:                          drawFormat.LineAlignment = StringAlignment.Center;                          break;                      case VerticalAlignEnum.Top:                      default:                          drawFormat.LineAlignment = StringAlignment.Near;                          break;                  }                  // draw the background                   DrawBackground(g' r' si);                    // adjust drawing rectangle based on padding                  // http://www.fyireporting.com/forum/viewtopic.php?t=892                  //A.S.> convert pt to px if needed(when printing we need px' when draw preview - pt)                   RectangleF r2;                  if (g.PageUnit == GraphicsUnit.Pixel)                  {                      r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                      r.Top + (si.PaddingTop * g.DpiX) / 72'                      r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                      r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);                  }                  else                  {                      // adjust drawing rectangle based on padding                     r2 = new RectangleF(r.Left + si.PaddingLeft'                     r.Top + si.PaddingTop'                     r.Width - si.PaddingLeft - si.PaddingRight'                     r.Height - si.PaddingTop - si.PaddingBottom);                  }                     drawBrush = new SolidBrush(si.Color);                  if (si.TextAlign == TextAlignEnum.Justified)                  {                      GraphicsExtended.DrawStringJustified(g' pt.Text' drawFont' drawBrush' r2);                   }                  else if (pt.NoClip)	// request not to clip text                  {                      g.DrawString(pt.Text' drawFont' drawBrush' new PointF(r.Left' r.Top)' drawFormat);                      HighlightString(g' pt' new RectangleF(r.Left' r.Top' float.MaxValue' float.MaxValue)'                          drawFont' drawFormat);                  }                  else                  {                      g.DrawString(pt.Text' drawFont' drawBrush' r2' drawFormat);                      HighlightString(g' pt' r2' drawFont' drawFormat);                  }                  if (SelectTool)                  {                      if (pt.AllowSelect && _SelectList.Contains(pt))                          g.FillRectangle(new SolidBrush(Color.FromArgb(50' _SelectItemColor))' r2);                  }              }              finally              {                  if (drawFont != null)                      drawFont.Dispose();                  if (drawFormat != null)                      drawFont.Dispose();                  if (drawBrush != null)                      drawBrush.Dispose();              }
Magic Number,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,DrawString,The following statement contains a magic number: try              {                  // STYLE                  System.Drawing.FontStyle fs = 0;                  if (si.FontStyle == FontStyleEnum.Italic)                      fs |= System.Drawing.FontStyle.Italic;                    switch (si.TextDecoration)                  {                      case TextDecorationEnum.Underline:                          fs |= System.Drawing.FontStyle.Underline;                          break;                      case TextDecorationEnum.LineThrough:                          fs |= System.Drawing.FontStyle.Strikeout;                          break;                      case TextDecorationEnum.Overline:                      case TextDecorationEnum.None:                          break;                  }                    // WEIGHT                  switch (si.FontWeight)                  {                      case FontWeightEnum.Bold:                      case FontWeightEnum.Bolder:                      case FontWeightEnum.W500:                      case FontWeightEnum.W600:                      case FontWeightEnum.W700:                      case FontWeightEnum.W800:                      case FontWeightEnum.W900:                          fs |= System.Drawing.FontStyle.Bold;                          break;                      default:                          break;                  }                  try                  {                      drawFont = new Font(si.GetFontFamily()' si.FontSize' fs);	// si.FontSize already in points                  }                  catch (ArgumentException)                  {                      drawFont = new Font("Arial"' si.FontSize' fs);	// if this fails we'll let the error pass thru                  }                  // ALIGNMENT                  drawFormat = new StringFormat();                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          drawFormat.Alignment = StringAlignment.Far;                          break;                      case TextAlignEnum.Center:                          drawFormat.Alignment = StringAlignment.Center;                          break;                      case TextAlignEnum.Left:                      default:                          drawFormat.Alignment = StringAlignment.Near;                          break;                  }                  if (pt.SI.WritingMode == WritingModeEnum.tb_rl)                  {                      drawFormat.FormatFlags |= StringFormatFlags.DirectionRightToLeft;                      drawFormat.FormatFlags |= StringFormatFlags.DirectionVertical;                  }                  switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          drawFormat.LineAlignment = StringAlignment.Far;                          break;                      case VerticalAlignEnum.Middle:                          drawFormat.LineAlignment = StringAlignment.Center;                          break;                      case VerticalAlignEnum.Top:                      default:                          drawFormat.LineAlignment = StringAlignment.Near;                          break;                  }                  // draw the background                   DrawBackground(g' r' si);                    // adjust drawing rectangle based on padding                  // http://www.fyireporting.com/forum/viewtopic.php?t=892                  //A.S.> convert pt to px if needed(when printing we need px' when draw preview - pt)                   RectangleF r2;                  if (g.PageUnit == GraphicsUnit.Pixel)                  {                      r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                      r.Top + (si.PaddingTop * g.DpiX) / 72'                      r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                      r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);                  }                  else                  {                      // adjust drawing rectangle based on padding                     r2 = new RectangleF(r.Left + si.PaddingLeft'                     r.Top + si.PaddingTop'                     r.Width - si.PaddingLeft - si.PaddingRight'                     r.Height - si.PaddingTop - si.PaddingBottom);                  }                     drawBrush = new SolidBrush(si.Color);                  if (si.TextAlign == TextAlignEnum.Justified)                  {                      GraphicsExtended.DrawStringJustified(g' pt.Text' drawFont' drawBrush' r2);                   }                  else if (pt.NoClip)	// request not to clip text                  {                      g.DrawString(pt.Text' drawFont' drawBrush' new PointF(r.Left' r.Top)' drawFormat);                      HighlightString(g' pt' new RectangleF(r.Left' r.Top' float.MaxValue' float.MaxValue)'                          drawFont' drawFormat);                  }                  else                  {                      g.DrawString(pt.Text' drawFont' drawBrush' r2' drawFormat);                      HighlightString(g' pt' r2' drawFont' drawFormat);                  }                  if (SelectTool)                  {                      if (pt.AllowSelect && _SelectList.Contains(pt))                          g.FillRectangle(new SolidBrush(Color.FromArgb(50' _SelectItemColor))' r2);                  }              }              finally              {                  if (drawFont != null)                      drawFont.Dispose();                  if (drawFormat != null)                      drawFont.Dispose();                  if (drawBrush != null)                      drawBrush.Dispose();              }
Magic Number,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,DrawString,The following statement contains a magic number: try              {                  // STYLE                  System.Drawing.FontStyle fs = 0;                  if (si.FontStyle == FontStyleEnum.Italic)                      fs |= System.Drawing.FontStyle.Italic;                    switch (si.TextDecoration)                  {                      case TextDecorationEnum.Underline:                          fs |= System.Drawing.FontStyle.Underline;                          break;                      case TextDecorationEnum.LineThrough:                          fs |= System.Drawing.FontStyle.Strikeout;                          break;                      case TextDecorationEnum.Overline:                      case TextDecorationEnum.None:                          break;                  }                    // WEIGHT                  switch (si.FontWeight)                  {                      case FontWeightEnum.Bold:                      case FontWeightEnum.Bolder:                      case FontWeightEnum.W500:                      case FontWeightEnum.W600:                      case FontWeightEnum.W700:                      case FontWeightEnum.W800:                      case FontWeightEnum.W900:                          fs |= System.Drawing.FontStyle.Bold;                          break;                      default:                          break;                  }                  try                  {                      drawFont = new Font(si.GetFontFamily()' si.FontSize' fs);	// si.FontSize already in points                  }                  catch (ArgumentException)                  {                      drawFont = new Font("Arial"' si.FontSize' fs);	// if this fails we'll let the error pass thru                  }                  // ALIGNMENT                  drawFormat = new StringFormat();                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          drawFormat.Alignment = StringAlignment.Far;                          break;                      case TextAlignEnum.Center:                          drawFormat.Alignment = StringAlignment.Center;                          break;                      case TextAlignEnum.Left:                      default:                          drawFormat.Alignment = StringAlignment.Near;                          break;                  }                  if (pt.SI.WritingMode == WritingModeEnum.tb_rl)                  {                      drawFormat.FormatFlags |= StringFormatFlags.DirectionRightToLeft;                      drawFormat.FormatFlags |= StringFormatFlags.DirectionVertical;                  }                  switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          drawFormat.LineAlignment = StringAlignment.Far;                          break;                      case VerticalAlignEnum.Middle:                          drawFormat.LineAlignment = StringAlignment.Center;                          break;                      case VerticalAlignEnum.Top:                      default:                          drawFormat.LineAlignment = StringAlignment.Near;                          break;                  }                  // draw the background                   DrawBackground(g' r' si);                    // adjust drawing rectangle based on padding                  // http://www.fyireporting.com/forum/viewtopic.php?t=892                  //A.S.> convert pt to px if needed(when printing we need px' when draw preview - pt)                   RectangleF r2;                  if (g.PageUnit == GraphicsUnit.Pixel)                  {                      r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                      r.Top + (si.PaddingTop * g.DpiX) / 72'                      r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                      r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);                  }                  else                  {                      // adjust drawing rectangle based on padding                     r2 = new RectangleF(r.Left + si.PaddingLeft'                     r.Top + si.PaddingTop'                     r.Width - si.PaddingLeft - si.PaddingRight'                     r.Height - si.PaddingTop - si.PaddingBottom);                  }                     drawBrush = new SolidBrush(si.Color);                  if (si.TextAlign == TextAlignEnum.Justified)                  {                      GraphicsExtended.DrawStringJustified(g' pt.Text' drawFont' drawBrush' r2);                   }                  else if (pt.NoClip)	// request not to clip text                  {                      g.DrawString(pt.Text' drawFont' drawBrush' new PointF(r.Left' r.Top)' drawFormat);                      HighlightString(g' pt' new RectangleF(r.Left' r.Top' float.MaxValue' float.MaxValue)'                          drawFont' drawFormat);                  }                  else                  {                      g.DrawString(pt.Text' drawFont' drawBrush' r2' drawFormat);                      HighlightString(g' pt' r2' drawFont' drawFormat);                  }                  if (SelectTool)                  {                      if (pt.AllowSelect && _SelectList.Contains(pt))                          g.FillRectangle(new SolidBrush(Color.FromArgb(50' _SelectItemColor))' r2);                  }              }              finally              {                  if (drawFont != null)                      drawFont.Dispose();                  if (drawFormat != null)                      drawFont.Dispose();                  if (drawBrush != null)                      drawBrush.Dispose();              }
Magic Number,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,DrawString,The following statement contains a magic number: try              {                  // STYLE                  System.Drawing.FontStyle fs = 0;                  if (si.FontStyle == FontStyleEnum.Italic)                      fs |= System.Drawing.FontStyle.Italic;                    switch (si.TextDecoration)                  {                      case TextDecorationEnum.Underline:                          fs |= System.Drawing.FontStyle.Underline;                          break;                      case TextDecorationEnum.LineThrough:                          fs |= System.Drawing.FontStyle.Strikeout;                          break;                      case TextDecorationEnum.Overline:                      case TextDecorationEnum.None:                          break;                  }                    // WEIGHT                  switch (si.FontWeight)                  {                      case FontWeightEnum.Bold:                      case FontWeightEnum.Bolder:                      case FontWeightEnum.W500:                      case FontWeightEnum.W600:                      case FontWeightEnum.W700:                      case FontWeightEnum.W800:                      case FontWeightEnum.W900:                          fs |= System.Drawing.FontStyle.Bold;                          break;                      default:                          break;                  }                  try                  {                      drawFont = new Font(si.GetFontFamily()' si.FontSize' fs);	// si.FontSize already in points                  }                  catch (ArgumentException)                  {                      drawFont = new Font("Arial"' si.FontSize' fs);	// if this fails we'll let the error pass thru                  }                  // ALIGNMENT                  drawFormat = new StringFormat();                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          drawFormat.Alignment = StringAlignment.Far;                          break;                      case TextAlignEnum.Center:                          drawFormat.Alignment = StringAlignment.Center;                          break;                      case TextAlignEnum.Left:                      default:                          drawFormat.Alignment = StringAlignment.Near;                          break;                  }                  if (pt.SI.WritingMode == WritingModeEnum.tb_rl)                  {                      drawFormat.FormatFlags |= StringFormatFlags.DirectionRightToLeft;                      drawFormat.FormatFlags |= StringFormatFlags.DirectionVertical;                  }                  switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          drawFormat.LineAlignment = StringAlignment.Far;                          break;                      case VerticalAlignEnum.Middle:                          drawFormat.LineAlignment = StringAlignment.Center;                          break;                      case VerticalAlignEnum.Top:                      default:                          drawFormat.LineAlignment = StringAlignment.Near;                          break;                  }                  // draw the background                   DrawBackground(g' r' si);                    // adjust drawing rectangle based on padding                  // http://www.fyireporting.com/forum/viewtopic.php?t=892                  //A.S.> convert pt to px if needed(when printing we need px' when draw preview - pt)                   RectangleF r2;                  if (g.PageUnit == GraphicsUnit.Pixel)                  {                      r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                      r.Top + (si.PaddingTop * g.DpiX) / 72'                      r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                      r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);                  }                  else                  {                      // adjust drawing rectangle based on padding                     r2 = new RectangleF(r.Left + si.PaddingLeft'                     r.Top + si.PaddingTop'                     r.Width - si.PaddingLeft - si.PaddingRight'                     r.Height - si.PaddingTop - si.PaddingBottom);                  }                     drawBrush = new SolidBrush(si.Color);                  if (si.TextAlign == TextAlignEnum.Justified)                  {                      GraphicsExtended.DrawStringJustified(g' pt.Text' drawFont' drawBrush' r2);                   }                  else if (pt.NoClip)	// request not to clip text                  {                      g.DrawString(pt.Text' drawFont' drawBrush' new PointF(r.Left' r.Top)' drawFormat);                      HighlightString(g' pt' new RectangleF(r.Left' r.Top' float.MaxValue' float.MaxValue)'                          drawFont' drawFormat);                  }                  else                  {                      g.DrawString(pt.Text' drawFont' drawBrush' r2' drawFormat);                      HighlightString(g' pt' r2' drawFont' drawFormat);                  }                  if (SelectTool)                  {                      if (pt.AllowSelect && _SelectList.Contains(pt))                          g.FillRectangle(new SolidBrush(Color.FromArgb(50' _SelectItemColor))' r2);                  }              }              finally              {                  if (drawFont != null)                      drawFont.Dispose();                  if (drawFormat != null)                      drawFont.Dispose();                  if (drawBrush != null)                      drawBrush.Dispose();              }
Magic Number,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,DrawString,The following statement contains a magic number: try              {                  // STYLE                  System.Drawing.FontStyle fs = 0;                  if (si.FontStyle == FontStyleEnum.Italic)                      fs |= System.Drawing.FontStyle.Italic;                    switch (si.TextDecoration)                  {                      case TextDecorationEnum.Underline:                          fs |= System.Drawing.FontStyle.Underline;                          break;                      case TextDecorationEnum.LineThrough:                          fs |= System.Drawing.FontStyle.Strikeout;                          break;                      case TextDecorationEnum.Overline:                      case TextDecorationEnum.None:                          break;                  }                    // WEIGHT                  switch (si.FontWeight)                  {                      case FontWeightEnum.Bold:                      case FontWeightEnum.Bolder:                      case FontWeightEnum.W500:                      case FontWeightEnum.W600:                      case FontWeightEnum.W700:                      case FontWeightEnum.W800:                      case FontWeightEnum.W900:                          fs |= System.Drawing.FontStyle.Bold;                          break;                      default:                          break;                  }                  try                  {                      drawFont = new Font(si.GetFontFamily()' si.FontSize' fs);	// si.FontSize already in points                  }                  catch (ArgumentException)                  {                      drawFont = new Font("Arial"' si.FontSize' fs);	// if this fails we'll let the error pass thru                  }                  // ALIGNMENT                  drawFormat = new StringFormat();                  switch (si.TextAlign)                  {                      case TextAlignEnum.Right:                          drawFormat.Alignment = StringAlignment.Far;                          break;                      case TextAlignEnum.Center:                          drawFormat.Alignment = StringAlignment.Center;                          break;                      case TextAlignEnum.Left:                      default:                          drawFormat.Alignment = StringAlignment.Near;                          break;                  }                  if (pt.SI.WritingMode == WritingModeEnum.tb_rl)                  {                      drawFormat.FormatFlags |= StringFormatFlags.DirectionRightToLeft;                      drawFormat.FormatFlags |= StringFormatFlags.DirectionVertical;                  }                  switch (si.VerticalAlign)                  {                      case VerticalAlignEnum.Bottom:                          drawFormat.LineAlignment = StringAlignment.Far;                          break;                      case VerticalAlignEnum.Middle:                          drawFormat.LineAlignment = StringAlignment.Center;                          break;                      case VerticalAlignEnum.Top:                      default:                          drawFormat.LineAlignment = StringAlignment.Near;                          break;                  }                  // draw the background                   DrawBackground(g' r' si);                    // adjust drawing rectangle based on padding                  // http://www.fyireporting.com/forum/viewtopic.php?t=892                  //A.S.> convert pt to px if needed(when printing we need px' when draw preview - pt)                   RectangleF r2;                  if (g.PageUnit == GraphicsUnit.Pixel)                  {                      r2 = new RectangleF(r.Left + (si.PaddingLeft * g.DpiX) / 72'                      r.Top + (si.PaddingTop * g.DpiX) / 72'                      r.Width - ((si.PaddingLeft + si.PaddingRight) * g.DpiX) / 72'                      r.Height - ((si.PaddingTop + si.PaddingBottom) * g.DpiX) / 72);                  }                  else                  {                      // adjust drawing rectangle based on padding                     r2 = new RectangleF(r.Left + si.PaddingLeft'                     r.Top + si.PaddingTop'                     r.Width - si.PaddingLeft - si.PaddingRight'                     r.Height - si.PaddingTop - si.PaddingBottom);                  }                     drawBrush = new SolidBrush(si.Color);                  if (si.TextAlign == TextAlignEnum.Justified)                  {                      GraphicsExtended.DrawStringJustified(g' pt.Text' drawFont' drawBrush' r2);                   }                  else if (pt.NoClip)	// request not to clip text                  {                      g.DrawString(pt.Text' drawFont' drawBrush' new PointF(r.Left' r.Top)' drawFormat);                      HighlightString(g' pt' new RectangleF(r.Left' r.Top' float.MaxValue' float.MaxValue)'                          drawFont' drawFormat);                  }                  else                  {                      g.DrawString(pt.Text' drawFont' drawBrush' r2' drawFormat);                      HighlightString(g' pt' r2' drawFont' drawFormat);                  }                  if (SelectTool)                  {                      if (pt.AllowSelect && _SelectList.Contains(pt))                          g.FillRectangle(new SolidBrush(Color.FromArgb(50' _SelectItemColor))' r2);                  }              }              finally              {                  if (drawFont != null)                      drawFont.Dispose();                  if (drawFormat != null)                      drawFont.Dispose();                  if (drawBrush != null)                      drawBrush.Dispose();              }
Magic Number,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,HighlightString,The following statement contains a magic number: try              {                  // Create a CharacterRange array with the highlight location and length                  // Handle multiple occurences of text                  List<CharacterRange> rangel = new List<CharacterRange>();                  int loc = text.IndexOf(hlt);                  int hlen = hlt.Length;                  int len = text.Length;                  while (loc >= 0)                  {                      rangel.Add(new CharacterRange(loc' hlen));                      if (loc + hlen < len)  // out of range of text                          loc = text.IndexOf(hlt' loc + hlen);                      else                          loc = -1;                  }                    if (rangel.Count <= 0)      // we should have gotten one; but                      return;                    CharacterRange[] ranges = rangel.ToArray();                    // Construct a new StringFormat object.                  sf2 = sf.Clone() as StringFormat;                    // Set the ranges on the StringFormat object.                  sf2.SetMeasurableCharacterRanges(ranges);                    // Get the Regions to highlight by calling the                   // MeasureCharacterRanges method.                  if (r.Width <= 0 || r.Height <= 0)                  {                      SizeF ts = g.MeasureString(dtext.Text' f);                      r.Height = ts.Height;                      r.Width = ts.Width;                  }                  Region[] charRegion = g.MeasureCharacterRanges(dtext.Text' f' r' sf2);                    // Fill in the region using a semi-transparent color to highlight                  foreach (Region rg in charRegion)                  {                      Color hl = bhighlightItem ? _HighlightItemColor : _HighlightAllColor;                      g.FillRegion(new SolidBrush(Color.FromArgb(50' hl))' rg);                  }              }              catch { }   // if highlighting fails we don't care; need to continue              finally              {                  if (sf2 != null)                      sf2.Dispose();              }
Magic Number,fyiReporting.RdlViewer,HitListEntry,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,PointInPolygon,The following statement contains a magic number: if (poly.Length < 3)                  {                      return false;                  }
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,RdlViewer,The following statement contains a magic number: try              {                  g = this.CreateGraphics();                  DpiX = g.DpiX;                  DpiY = g.DpiY;              }              catch              {                  DpiX = DpiY = 96;              }              finally              {                  if (g != null)                      g.Dispose();              }
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,RdlViewer,The following statement contains a magic number: _vScrollToolTip.AutomaticDelay = 100;
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,RdlViewer,The following statement contains a magic number: _vScrollToolTip.AutoPopDelay = 1000;
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,RdlViewer,The following statement contains a magic number: _vScrollToolTip.ReshowDelay = 100;
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,RdlViewer,The following statement contains a magic number: _vScrollToolTip.InitialDelay = 10;
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,RdlViewer,The following statement contains a magic number: _WarningButton.Width = 15;
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,RdlViewer,The following statement contains a magic number: _WarningButton.Height = 15;
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,RdlViewer,The following statement contains a magic number: tip.AutomaticDelay = 500;
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,RdlViewer,The following statement contains a magic number: _FindCtl.Height = 27;
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,DrawPanelPaint,The following statement contains a magic number: try         // never want to die in here              {                  if (!_InLoading)                // If we're in the process of loading don't paint                  {                      LoadPageIfNeeded();             // make sure we have something to show                        if (_zoom < 0)                          CalcZoom();             // new report or resize client requires new zoom factor                        // Draw the page                      _DrawPanel.Draw(g' _zoom' _leftMargin' _pageGap'                          PointsX(_hScroll.Value)' PointsY(_vScroll.Value)'                          e.ClipRectangle'                          _HighlightItem' _HighlightText' _HighlightCaseSensitive' _HighlightAll);                  }              }              catch (Exception ex)              {   // don't want to kill process if we die                  using (Font font = new Font("Arial"' 8))                      g.DrawString(ex.Message + "\r\n" + ex.StackTrace' font' Brushes.Black' 0' 0);              }
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,CalcZoom,The following statement contains a magic number: if (w > (this._PageWidth + _leftGap + _rightGap) * _zoom)                  _leftMargin = ((w - (this._PageWidth + _leftGap + _rightGap) * _zoom) / 2) / _zoom;              else                  _leftMargin = _leftGap;
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,GetReport,The following statement contains a magic number: try              {                  _errorMsgs = null;                  rdlp = new RDLParser(prog);                  rdlp.DataSourceReferencePassword = GetDataSourceReferencePassword;                  if (_SourceFileName != null)                      rdlp.Folder = Path.GetDirectoryName(_SourceFileName.LocalPath);                  else                      rdlp.Folder = this.Folder;                    // EBN 31/03/2014                  // Cross objects                  rdlp.OnSubReportGetContent.SubReportGetContent = dSubReportGetContent;                    r = rdlp.Parse();                  if (r.ErrorMaxSeverity > 0)                  {                      _errorMsgs = r.ErrorItems;      // keep a copy of the errors                        int severity = r.ErrorMaxSeverity;                      r.ErrorReset();                      if (severity > 4)                      {                          r = null;           // don't return when severe errors                          _loadFailed = true;                      }                  }                  // If we've loaded the report; we should tell it where it got loaded from                  if (r != null && !_loadFailed)                  {   // Don't care much if this fails; and don't want to null out report if it does                      try                      {                          if (_SourceFileName != null)                          {                              r.Name = Path.GetFileNameWithoutExtension(_SourceFileName.LocalPath);                              r.Folder = Path.GetDirectoryName(_SourceFileName.LocalPath);                          }                          else                          {                              r.Folder = this.Folder;                              r.Name = this.ReportName;                          }                      }                      catch                      {                      }                  }              }              catch (Exception ex)              {                  _loadFailed = true;                  _errorMsgs = new List<string>();        // create new error list                  _errorMsgs.Add(ex.Message);         // put the message in it                  _errorMsgs.Add(ex.StackTrace);      //   and the stack trace                  r = null;              }
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,GetReportErrorMsg,The following statement contains a magic number: StringBuilder sb = new StringBuilder(data1' data1.Length + data2.Length + 1000);
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,ParametersBuild,The following statement contains a magic number: int yPos = 10;
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,ParametersBuild,The following statement contains a magic number: foreach (UserReportParameter rp in r.UserReportParameters)              {                  if (rp.Prompt == null || rp.Prompt.Length == 0)		// skip parameters that don't have a prompt                      continue;                    // Create a label                  Label label = new Label();                  label.Parent = _ParameterPanel;                  label.AutoSize = true;                  label.Text = rp.Prompt;                  label.Location = new Point(10' yPos);                    // Create a control                  Control v;                  int width = 90;                  if (rp.DisplayValues == null)                  {                      TextBox tb = new TextBox();                      v = tb;                      tb.Height = tb.PreferredHeight;                      tb.Validated += new System.EventHandler(ParametersTextValidated);                  }                  else                  {                      ComboBox cb = new ComboBox();                      // create a label to auto                      Label l = new Label();                      l.AutoSize = true;                      l.Visible = false;                        cb.Leave += new EventHandler(ParametersLeave);                      v = cb;                      width = 0;                      foreach (string s in rp.DisplayValues)                      {                          l.Text = s;                          if (width < l.Width)                              width = l.Width;                          cb.Items.Add(s);                      }                      if (width > 0)                      {                          l.Text = "XX";                          width += l.Width;       // give some extra room for the drop down arrow                      }                      else                          width = 90;             // just force the default                  }                  v.Parent = _ParameterPanel;                  v.Width = width;                  v.Location = new Point(label.Location.X + label.Width + 5' yPos);                  if (rp.DefaultValue != null)                  {                      StringBuilder sb = new StringBuilder();                      for (int i = 0; i < rp.DefaultValue.Length; i++)                      {                          if (i > 0)                              sb.Append("' ");                          sb.Append(rp.DefaultValue[i].ToString());                      }                      v.Text = sb.ToString();                  }                  v.Tag = rp;                    yPos += Math.Max(label.Height' v.Height) + 5;              }
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,ParametersBuild,The following statement contains a magic number: foreach (UserReportParameter rp in r.UserReportParameters)              {                  if (rp.Prompt == null || rp.Prompt.Length == 0)		// skip parameters that don't have a prompt                      continue;                    // Create a label                  Label label = new Label();                  label.Parent = _ParameterPanel;                  label.AutoSize = true;                  label.Text = rp.Prompt;                  label.Location = new Point(10' yPos);                    // Create a control                  Control v;                  int width = 90;                  if (rp.DisplayValues == null)                  {                      TextBox tb = new TextBox();                      v = tb;                      tb.Height = tb.PreferredHeight;                      tb.Validated += new System.EventHandler(ParametersTextValidated);                  }                  else                  {                      ComboBox cb = new ComboBox();                      // create a label to auto                      Label l = new Label();                      l.AutoSize = true;                      l.Visible = false;                        cb.Leave += new EventHandler(ParametersLeave);                      v = cb;                      width = 0;                      foreach (string s in rp.DisplayValues)                      {                          l.Text = s;                          if (width < l.Width)                              width = l.Width;                          cb.Items.Add(s);                      }                      if (width > 0)                      {                          l.Text = "XX";                          width += l.Width;       // give some extra room for the drop down arrow                      }                      else                          width = 90;             // just force the default                  }                  v.Parent = _ParameterPanel;                  v.Width = width;                  v.Location = new Point(label.Location.X + label.Width + 5' yPos);                  if (rp.DefaultValue != null)                  {                      StringBuilder sb = new StringBuilder();                      for (int i = 0; i < rp.DefaultValue.Length; i++)                      {                          if (i > 0)                              sb.Append("' ");                          sb.Append(rp.DefaultValue[i].ToString());                      }                      v.Text = sb.ToString();                  }                  v.Tag = rp;                    yPos += Math.Max(label.Height' v.Height) + 5;              }
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,ParametersBuild,The following statement contains a magic number: foreach (UserReportParameter rp in r.UserReportParameters)              {                  if (rp.Prompt == null || rp.Prompt.Length == 0)		// skip parameters that don't have a prompt                      continue;                    // Create a label                  Label label = new Label();                  label.Parent = _ParameterPanel;                  label.AutoSize = true;                  label.Text = rp.Prompt;                  label.Location = new Point(10' yPos);                    // Create a control                  Control v;                  int width = 90;                  if (rp.DisplayValues == null)                  {                      TextBox tb = new TextBox();                      v = tb;                      tb.Height = tb.PreferredHeight;                      tb.Validated += new System.EventHandler(ParametersTextValidated);                  }                  else                  {                      ComboBox cb = new ComboBox();                      // create a label to auto                      Label l = new Label();                      l.AutoSize = true;                      l.Visible = false;                        cb.Leave += new EventHandler(ParametersLeave);                      v = cb;                      width = 0;                      foreach (string s in rp.DisplayValues)                      {                          l.Text = s;                          if (width < l.Width)                              width = l.Width;                          cb.Items.Add(s);                      }                      if (width > 0)                      {                          l.Text = "XX";                          width += l.Width;       // give some extra room for the drop down arrow                      }                      else                          width = 90;             // just force the default                  }                  v.Parent = _ParameterPanel;                  v.Width = width;                  v.Location = new Point(label.Location.X + label.Width + 5' yPos);                  if (rp.DefaultValue != null)                  {                      StringBuilder sb = new StringBuilder();                      for (int i = 0; i < rp.DefaultValue.Length; i++)                      {                          if (i > 0)                              sb.Append("' ");                          sb.Append(rp.DefaultValue[i].ToString());                      }                      v.Text = sb.ToString();                  }                  v.Tag = rp;                    yPos += Math.Max(label.Height' v.Height) + 5;              }
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,ParametersBuild,The following statement contains a magic number: foreach (UserReportParameter rp in r.UserReportParameters)              {                  if (rp.Prompt == null || rp.Prompt.Length == 0)		// skip parameters that don't have a prompt                      continue;                    // Create a label                  Label label = new Label();                  label.Parent = _ParameterPanel;                  label.AutoSize = true;                  label.Text = rp.Prompt;                  label.Location = new Point(10' yPos);                    // Create a control                  Control v;                  int width = 90;                  if (rp.DisplayValues == null)                  {                      TextBox tb = new TextBox();                      v = tb;                      tb.Height = tb.PreferredHeight;                      tb.Validated += new System.EventHandler(ParametersTextValidated);                  }                  else                  {                      ComboBox cb = new ComboBox();                      // create a label to auto                      Label l = new Label();                      l.AutoSize = true;                      l.Visible = false;                        cb.Leave += new EventHandler(ParametersLeave);                      v = cb;                      width = 0;                      foreach (string s in rp.DisplayValues)                      {                          l.Text = s;                          if (width < l.Width)                              width = l.Width;                          cb.Items.Add(s);                      }                      if (width > 0)                      {                          l.Text = "XX";                          width += l.Width;       // give some extra room for the drop down arrow                      }                      else                          width = 90;             // just force the default                  }                  v.Parent = _ParameterPanel;                  v.Width = width;                  v.Location = new Point(label.Location.X + label.Width + 5' yPos);                  if (rp.DefaultValue != null)                  {                      StringBuilder sb = new StringBuilder();                      for (int i = 0; i < rp.DefaultValue.Length; i++)                      {                          if (i > 0)                              sb.Append("' ");                          sb.Append(rp.DefaultValue[i].ToString());                      }                      v.Text = sb.ToString();                  }                  v.Tag = rp;                    yPos += Math.Max(label.Height' v.Height) + 5;              }
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,ParametersBuild,The following statement contains a magic number: foreach (UserReportParameter rp in r.UserReportParameters)              {                  if (rp.Prompt == null || rp.Prompt.Length == 0)		// skip parameters that don't have a prompt                      continue;                    // Create a label                  Label label = new Label();                  label.Parent = _ParameterPanel;                  label.AutoSize = true;                  label.Text = rp.Prompt;                  label.Location = new Point(10' yPos);                    // Create a control                  Control v;                  int width = 90;                  if (rp.DisplayValues == null)                  {                      TextBox tb = new TextBox();                      v = tb;                      tb.Height = tb.PreferredHeight;                      tb.Validated += new System.EventHandler(ParametersTextValidated);                  }                  else                  {                      ComboBox cb = new ComboBox();                      // create a label to auto                      Label l = new Label();                      l.AutoSize = true;                      l.Visible = false;                        cb.Leave += new EventHandler(ParametersLeave);                      v = cb;                      width = 0;                      foreach (string s in rp.DisplayValues)                      {                          l.Text = s;                          if (width < l.Width)                              width = l.Width;                          cb.Items.Add(s);                      }                      if (width > 0)                      {                          l.Text = "XX";                          width += l.Width;       // give some extra room for the drop down arrow                      }                      else                          width = 90;             // just force the default                  }                  v.Parent = _ParameterPanel;                  v.Width = width;                  v.Location = new Point(label.Location.X + label.Width + 5' yPos);                  if (rp.DefaultValue != null)                  {                      StringBuilder sb = new StringBuilder();                      for (int i = 0; i < rp.DefaultValue.Length; i++)                      {                          if (i > 0)                              sb.Append("' ");                          sb.Append(rp.DefaultValue[i].ToString());                      }                      v.Text = sb.ToString();                  }                  v.Tag = rp;                    yPos += Math.Max(label.Height' v.Height) + 5;              }
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,SetScrollControlsV,The following statement contains a magic number: if (this._zoomMode == ZoomEnum.FitPage)              {                  _vScroll.LargeChange = (int)(_vScroll.Maximum / _pgs.PageCount);                  _vScroll.SmallChange = _vScroll.LargeChange;              }              else              {                  _vScroll.LargeChange = (int)(Math.Max(_DrawPanel.Height' 0) / _zoom);                  _vScroll.SmallChange = _vScroll.LargeChange / 5;              }
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,SetScrollControlsH,The following statement contains a magic number: _hScroll.SmallChange = _hScroll.LargeChange / 5;
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,DrawPanelMouseWheel,The following statement contains a magic number: if (bCtrlOn)              {   // when ctrl key on and wheel rotated we zoom in or out                  float zoom = Zoom;                    if (e.Delta < 0)                  {                      zoom -= .1f;                      if (zoom < .1f)                          zoom = .1f;                  }                  else                  {                      zoom += .1f;                      if (zoom > 10)                          zoom = 10;                  }                  Zoom = zoom;                  _DrawPanel.Refresh();                  return;              }
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,DrawPanelMouseWheel,The following statement contains a magic number: if (bCtrlOn)              {   // when ctrl key on and wheel rotated we zoom in or out                  float zoom = Zoom;                    if (e.Delta < 0)                  {                      zoom -= .1f;                      if (zoom < .1f)                          zoom = .1f;                  }                  else                  {                      zoom += .1f;                      if (zoom > 10)                          zoom = 10;                  }                  Zoom = zoom;                  _DrawPanel.Refresh();                  return;              }
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,RdlViewer_Layout,The following statement contains a magic number: if (_ShowParameters)              {   // Only the parameter panel is visible                  _ParameterPanel.Visible = true;                  _RunButton.Visible = true;                    _WarningButton.Visible = WarningVisible();                    _ParameterPanel.Location = new Point(0' 0);                  _ParameterPanel.Width = this.Width - _RunButton.Width - _WarningButton.Width - 5;                  pHeight = this.Height / 3;                  if (pHeight > _ParametersMaxHeight)                      pHeight = _ParametersMaxHeight;                  if (pHeight < _RunButton.Height + 15)                      pHeight = _RunButton.Height + 15;                  _ParameterPanel.Height = pHeight;              }              else              {                  //				pHeight=_RunButton.Height + 15;                  pHeight = 0;                  _RunButton.Visible = false;                  _WarningButton.Visible = false;                  _ParameterPanel.Visible = false;              }
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,RdlViewer_Layout,The following statement contains a magic number: if (_ShowParameters)              {   // Only the parameter panel is visible                  _ParameterPanel.Visible = true;                  _RunButton.Visible = true;                    _WarningButton.Visible = WarningVisible();                    _ParameterPanel.Location = new Point(0' 0);                  _ParameterPanel.Width = this.Width - _RunButton.Width - _WarningButton.Width - 5;                  pHeight = this.Height / 3;                  if (pHeight > _ParametersMaxHeight)                      pHeight = _ParametersMaxHeight;                  if (pHeight < _RunButton.Height + 15)                      pHeight = _RunButton.Height + 15;                  _ParameterPanel.Height = pHeight;              }              else              {                  //				pHeight=_RunButton.Height + 15;                  pHeight = 0;                  _RunButton.Visible = false;                  _WarningButton.Visible = false;                  _ParameterPanel.Visible = false;              }
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,RdlViewer_Layout,The following statement contains a magic number: if (_ShowParameters)              {   // Only the parameter panel is visible                  _ParameterPanel.Visible = true;                  _RunButton.Visible = true;                    _WarningButton.Visible = WarningVisible();                    _ParameterPanel.Location = new Point(0' 0);                  _ParameterPanel.Width = this.Width - _RunButton.Width - _WarningButton.Width - 5;                  pHeight = this.Height / 3;                  if (pHeight > _ParametersMaxHeight)                      pHeight = _ParametersMaxHeight;                  if (pHeight < _RunButton.Height + 15)                      pHeight = _RunButton.Height + 15;                  _ParameterPanel.Height = pHeight;              }              else              {                  //				pHeight=_RunButton.Height + 15;                  pHeight = 0;                  _RunButton.Visible = false;                  _WarningButton.Visible = false;                  _ParameterPanel.Visible = false;              }
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,RdlViewer_Layout,The following statement contains a magic number: if (_ShowParameters)              {   // Only the parameter panel is visible                  _ParameterPanel.Visible = true;                  _RunButton.Visible = true;                    _WarningButton.Visible = WarningVisible();                    _ParameterPanel.Location = new Point(0' 0);                  _ParameterPanel.Width = this.Width - _RunButton.Width - _WarningButton.Width - 5;                  pHeight = this.Height / 3;                  if (pHeight > _ParametersMaxHeight)                      pHeight = _ParametersMaxHeight;                  if (pHeight < _RunButton.Height + 15)                      pHeight = _RunButton.Height + 15;                  _ParameterPanel.Height = pHeight;              }              else              {                  //				pHeight=_RunButton.Height + 15;                  pHeight = 0;                  _RunButton.Visible = false;                  _WarningButton.Visible = false;                  _ParameterPanel.Visible = false;              }
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,RdlViewer_Layout,The following statement contains a magic number: _RunButton.Location = new Point(this.Width - _RunButton.Width - 2 - _WarningButton.Width' 10);
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,RdlViewer_Layout,The following statement contains a magic number: _RunButton.Location = new Point(this.Width - _RunButton.Width - 2 - _WarningButton.Width' 10);
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,RdlViewer_Layout,The following statement contains a magic number: _WarningButton.Location = new Point(_RunButton.Location.X + _RunButton.Width + 2' 13);
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,RdlViewer_Layout,The following statement contains a magic number: _WarningButton.Location = new Point(_RunButton.Location.X + _RunButton.Width + 2' 13);
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,_WarningButton_Paint,The following statement contains a magic number: int midPoint = _WarningButton.Width / 2;
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,_WarningButton_Paint,The following statement contains a magic number: Point[] triangle = new Point[5];
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,_WarningButton_Paint,The following statement contains a magic number: triangle[0] = triangle[4] = new Point(midPoint - 1' 0);
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,_WarningButton_Paint,The following statement contains a magic number: triangle[2] = new Point(_WarningButton.Width' _WarningButton.Height - 1);
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,_WarningButton_Paint,The following statement contains a magic number: triangle[3] = new Point(midPoint + 1' 0);
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,_WarningButton_Paint,The following statement contains a magic number: g.FillRectangle(Brushes.Red' midPoint - 1' 5' 2' 5);
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,_WarningButton_Paint,The following statement contains a magic number: g.FillRectangle(Brushes.Red' midPoint - 1' 5' 2' 5);
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,_WarningButton_Paint,The following statement contains a magic number: g.FillRectangle(Brushes.Red' midPoint - 1' 5' 2' 5);
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,_WarningButton_Paint,The following statement contains a magic number: g.FillRectangle(Brushes.Red' midPoint - 1' 11' 2' 2);
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,_WarningButton_Paint,The following statement contains a magic number: g.FillRectangle(Brushes.Red' midPoint - 1' 11' 2' 2);
Magic Number,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,_WarningButton_Paint,The following statement contains a magic number: g.FillRectangle(Brushes.Red' midPoint - 1' 11' 2' 2);
Magic Number,fyiReporting.RdlViewer,RdlViewerFind,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewerFind.cs,InitializeComponent,The following statement contains a magic number: this.bClose.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255))))' ((int)(((byte)(192))))' ((int)(((byte)(192)))));
Magic Number,fyiReporting.RdlViewer,RdlViewerFind,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewerFind.cs,InitializeComponent,The following statement contains a magic number: this.bClose.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255))))' ((int)(((byte)(192))))' ((int)(((byte)(192)))));
Magic Number,fyiReporting.RdlViewer,RdlViewerFind,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewerFind.cs,InitializeComponent,The following statement contains a magic number: this.bClose.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255))))' ((int)(((byte)(192))))' ((int)(((byte)(192)))));
Missing Default,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,DrawBackground,The following switch statement is missing a default case: switch (si.PatternType)                      {                          case patternTypeEnum.BackwardDiagonal:                              hb = new HatchBrush(HatchStyle.BackwardDiagonal' si.Color' si.BackgroundColor);                              break;                          case patternTypeEnum.CheckerBoard:                              hb = new HatchBrush(HatchStyle.LargeCheckerBoard' si.Color' si.BackgroundColor);                              break;                          case patternTypeEnum.Cross:                              hb = new HatchBrush(HatchStyle.Cross' si.Color' si.BackgroundColor);                              break;                          case patternTypeEnum.DarkDownwardDiagonal:                              hb = new HatchBrush(HatchStyle.DarkDownwardDiagonal' si.Color' si.BackgroundColor);                              break;                          case patternTypeEnum.DarkHorizontal:                              hb = new HatchBrush(HatchStyle.DarkHorizontal' si.Color' si.BackgroundColor);                              break;                          case patternTypeEnum.DiagonalBrick:                              hb = new HatchBrush(HatchStyle.DiagonalBrick' si.Color' si.BackgroundColor);                              break;                          case patternTypeEnum.HorizontalBrick:                              hb = new HatchBrush(HatchStyle.HorizontalBrick' si.Color' si.BackgroundColor);                              break;                          case patternTypeEnum.LargeConfetti:                              hb = new HatchBrush(HatchStyle.LargeConfetti' si.Color' si.BackgroundColor);                              break;                          case patternTypeEnum.OutlinedDiamond:                              hb = new HatchBrush(HatchStyle.OutlinedDiamond' si.Color' si.BackgroundColor);                              break;                          case patternTypeEnum.SmallConfetti:                              hb = new HatchBrush(HatchStyle.SmallConfetti' si.Color' si.BackgroundColor);                              break;                          case patternTypeEnum.SolidDiamond:                              hb = new HatchBrush(HatchStyle.SolidDiamond' si.Color' si.BackgroundColor);                              break;                          case patternTypeEnum.Vertical:                              hb = new HatchBrush(HatchStyle.Vertical' si.Color' si.BackgroundColor);                              break;                      }
Missing Default,fyiReporting.RdlViewer,PageDrawing,C:\repos\majorsilence_My-FyiReporting\RdlViewer\PageDrawing.cs,DrawString,The following switch statement is missing a default case: switch (si.TextDecoration)                  {                      case TextDecorationEnum.Underline:                          fs |= System.Drawing.FontStyle.Underline;                          break;                      case TextDecorationEnum.LineThrough:                          fs |= System.Drawing.FontStyle.Strikeout;                          break;                      case TextDecorationEnum.Overline:                      case TextDecorationEnum.None:                          break;                  }
Missing Default,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,_Print,The following switch statement is missing a default case: switch (pd.PrinterSettings.PrintRange)              {                  case PrintRange.AllPages:                      printCurrentPage = 0;                      printEndPage = _pgs.PageCount - 1;                      break;                  case PrintRange.Selection:                      printCurrentPage = pd.PrinterSettings.FromPage - 1;                      printEndPage = pd.PrinterSettings.FromPage - 1;                      break;                  case PrintRange.SomePages:                      printCurrentPage = pd.PrinterSettings.FromPage - 1;                      if (printCurrentPage < 0)                          printCurrentPage = 0;                      printEndPage = pd.PrinterSettings.ToPage - 1;                      if (printEndPage >= _pgs.PageCount)                          printEndPage = _pgs.PageCount - 1;                      break;              }
Missing Default,fyiReporting.RdlViewer,RdlViewer,C:\repos\majorsilence_My-FyiReporting\RdlViewer\RdlViewer.cs,CalcZoom,The following switch statement is missing a default case: switch (_zoomMode)              {                  case ZoomEnum.UseZoom:                      if (_zoom <= 0)			// normalize invalid values                          _zoom = 1;                      break;                  // nothing to calculate                  case ZoomEnum.FitWidth:                      CalcZoomFitWidth();                      break;                  case ZoomEnum.FitPage:                      CalcZoomFitPage();                      break;              }
