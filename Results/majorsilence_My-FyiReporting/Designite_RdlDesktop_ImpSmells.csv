Implementation smell,Namespace,Class,File,Method,Description
Long Method,fyiReporting.RdlDesktop,ConnectionThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ConnectionThread.cs,ProcessReportFile,The method has 142 lines of code.
Long Method,fyiReporting.RdlDesktop,ConnectionThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ConnectionThread.cs,HandleConnection,The method has 165 lines of code.
Long Method,fyiReporting.RdlDesktop,ConsoleThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ConsoleThread.cs,HandleConsole,The method has 135 lines of code.
Complex Method,fyiReporting.RdlDesktop,ConnectionThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ConnectionThread.cs,ProcessDirectory,Cyclomatic complexity of the method is 8
Complex Method,fyiReporting.RdlDesktop,ConnectionThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ConnectionThread.cs,ProcessReportFile,Cyclomatic complexity of the method is 12
Complex Method,fyiReporting.RdlDesktop,ConnectionThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ConnectionThread.cs,HandleConnection,Cyclomatic complexity of the method is 16
Complex Method,fyiReporting.RdlDesktop,ReportRender,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ReportRender.cs,ParameterHtml,Cyclomatic complexity of the method is 12
Long Parameter List,fyiReporting.RdlDesktop,ConnectionThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ConnectionThread.cs,ProcessReportFile,The method has 5 parameters. Parameters: url' file' parms' lastUpdateTime' mimeType
Long Parameter List,fyiReporting.RdlDesktop,ConnectionThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ConnectionThread.cs,SendHeader,The method has 6 parameters. Parameters: sHttpVersion' sMIMEHeader' iTotBytes' sStatusCode' modifiedTime' mySocket
Long Statement,fyiReporting.RdlDesktop,ConnectionThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ConnectionThread.cs,ProcessReportFile,The length of the statement  "				return Encoding.ASCII.GetBytes(String.Format("<H2>Report '{0}' has the following syntax errors.</H2><p>{1}"' url' msgs)); " is 121.
Long Statement,fyiReporting.RdlDesktop,ConsoleThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ConsoleThread.cs,HandleConsole,The length of the statement  "							Console.WriteLine("Thread: {0} {1} {2}"' pt.Id' pt.ThreadState' pt.ThreadState == System.Diagnostics.ThreadState.Wait? pt.WaitReason.ToString(): ""); " is 149.
Long Statement,fyiReporting.RdlDesktop,ConsoleThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ConsoleThread.cs,HandleConsole,The length of the statement  "						Console.WriteLine("trace # (t): sets the console error verbosity. If number isn't supplied current trace level is shown."); " is 123.
Long Statement,fyiReporting.RdlDesktop,RdlDesktop,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\RdlDesktop.cs,GetConfigInfo,The length of the statement  "								Console.WriteLine("config.xml file: maxReadCacheEntrySize value is not a valid number.  Defaulting to {0}"' maxReadCacheEntrySize); " is 131.
Long Statement,fyiReporting.RdlDesktop,ReportRender,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ReportRender.cs,MainHtml,The length of the statement  "			sb.AppendFormat("<frame src=\"{0}\" name=\"parms\" scrolling=\"Auto\" marginwidth=\"0\" marginheight=\"0\"/>"' parmUrl); " is 120.
Long Statement,fyiReporting.RdlDesktop,ReportRender,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ReportRender.cs,MainHtml,The length of the statement  "			sb.AppendFormat("<frame src=\"{0}\" name=\"report\" scrolling=\"Auto\" marginwidth=\"0\" marginheight=\"0\"/>"' renderUrl); " is 123.
Long Statement,fyiReporting.RdlDesktop,ReportRender,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ReportRender.cs,ParameterHtml,The length of the statement  "							rp.DisplayValues[i].CompareTo(rp.DataValues[i]) == 0)	// When display and data values are same don't put out a value tag " is 120.
Long Statement,fyiReporting.RdlDesktop,ReportRender,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ReportRender.cs,ParameterHtml,The length of the statement  "							pHtml.AppendFormat("<option value=\"{0}\"{2}>{1}</option>"' XmlUtil.XmlAnsi(rp.DataValues[i].ToString())' XmlUtil.XmlAnsi(rp.DisplayValues[i])' selected); " is 154.
Long Statement,fyiReporting.RdlDesktop,ReportRender,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ReportRender.cs,ParameterHtml,The length of the statement  "					pHtml.Append("<td rowspan=2><table><tr><td align=right><input type=\"submit\" value=\"Run Report\" style=\"font-family:Ariel; color: black; font-size=10pt; background: gainsboro;\"/></td></tr>"); " is 195.
Long Statement,fyiReporting.RdlDesktop,ReportRender,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ReportRender.cs,ParameterHtml,The length of the statement  "					pHtml.AppendFormat("<tr><td align=right><select name=\"rs:Format\" size=1><option{0}>HTML</option><option{1}>PDF</option><option{2}>XML</option></select></td></tr></table></td>"' rHTML' rPDF' rXML); " is 198.
Long Statement,fyiReporting.RdlDesktop,ReportRender,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ReportRender.cs,ParameterHtml,The length of the statement  "				pHtml.Append("<tr><td><table><tr><td align=right><input type=\"submit\" value=\"Run Report\" style=\"font-family:Ariel; color: white; font-size=10pt; background: lightblue;\"/></td></tr>"); " is 189.
Long Statement,fyiReporting.RdlDesktop,ReportRender,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ReportRender.cs,ParameterHtml,The length of the statement  "				pHtml.AppendFormat("<tr><td align=right><select name=\"rs:Format\" size=1><option{0}>HTML</option><option{1}>PDF</option><option{2}>XML</option></select></td></tr></table></td></tr>"' rHTML' rPDF' rXML); " is 203.
Magic Number,fyiReporting.RdlDesktop,BackgroundThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\BackgroundThread.cs,HandleBackground,The following statement contains a magic number: while(_continue)  			{  				Thread.Sleep(1000);		// sleep for a second  				if (!_continue)			// before we do any work check to see 	  					break;  				count++;  				// Check on the caches  				if (count % cacheCheck == 0)	// every 5 minutes check on the caches  				{	// run as higher priority because server blocks on the caches  					Thread.CurrentThread.Priority = ThreadPriority.AboveNormal;		// let's get our work done  					int citems' ritems;  					citems = rserver.Cache.Clear(new TimeSpan(0' 0' 0' fileCacheTimeout' 0));		// clear out file cache   					ritems = rserver.ReadCache.Clear(new TimeSpan(0' 0' 0' readCacheTimeout' 0));	// clear out read cache   					Thread.CurrentThread.Priority = ThreadPriority.Normal;  					//Console.WriteLine("Cache items cleared {0:#'##0}"' citems);  					//Console.WriteLine("Read cache items cleared {0:#'##0}"' ritems);  				}  			}
Magic Number,fyiReporting.RdlDesktop,ConnectionThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ConnectionThread.cs,ProcessReportFile,The following statement contains a magic number: try   			{  				ListDictionary ld = ProcessReportGetParms(parms);	// split parms into dictionary    				OutputPresentationType type;  				string stype = (string) ld["rs:Format"];  				if (stype == null)  					stype = "html";  				else  					stype = stype.ToLower();  				switch (stype)  				{  					case "pdf":  						type = OutputPresentationType.PDF;  						break;  					case "xml":  						type = OutputPresentationType.XML;  						string ext = (string) ld["rs:FileExtension"];  						if (ext != null)  							stype = ext;  						break;  					case "html":  						type = OutputPresentationType.HTML;  						break;  					default:  						type = OutputPresentationType.HTML;  						stype = "html";  						break;  				}    				StreamGen sg = new StreamGen(serverRoot' WorkingDir' stype);  				  				ProcessReport pr = new ProcessReport(report' sg);    				pr.Run(ld' type);    				// handle any error messages  				if (report.ErrorMaxSeverity > 0)  				{  					string errs=null;  					if (report.ErrorMaxSeverity > 4)  					{  						mimeType = "text/html";			// force to html  						errs = "<H2>Severe errors encountered when running report.</H2>";  					}  					foreach (String emsg in report.ErrorItems)  					{  						if (report.ErrorMaxSeverity > 4)  							errs += ("<p>" + emsg + "</p>");  						else  						{  							if (_server.TraceLevel > 0)   								Console.WriteLine(emsg);		// output message to console  						}  					}  					if (errs != null)  						result = Encoding.ASCII.GetBytes(errs);  					report.ErrorReset();  				}    				// Only read the result if significant errors didn't occur  				if (result == null)  				{						  					ReportRender rr = new ReportRender(report);  					rr.ActionUrl = "/" + url;  					  					string p = rr.ParameterHtml(ld);  					// put this into a file.  					string parmUrl;  					StreamWriter sw=null;  					try   					{  						sw = new StreamWriter(sg.GetIOStream(out parmUrl' "html"));  						sw.Write(p);  					}  					finally  					{  						if (sw != null)  							sw.Close();  					}    					// Add it to the file list  					IList newlist = _server.Cache.Add(url + (parms==null?"":parms)' sg.FileList);  					dbgFilename = (string) newlist[0];		// this is the first fully qualified name    					FileInfo fi = new FileInfo(dbgFilename);  					string mHtml = rr.MainHtml(report' parmUrl' sg.RelativeDirectory+fi.Name);  					string mUrl;  					sw=null;  					try   					{  						sw = new StreamWriter(sg.GetIOStream(out mUrl' "html"));  						sw.Write(mHtml);  					}  					finally  					{  						if (sw != null)  							sw.Close();  					}    					result = Encoding.ASCII.GetBytes(mHtml);  					  				}  			}  			catch (Exception ex)  			{  				if (_server.TraceLevel >= 0)   					Console.WriteLine("Exception in ProcessReportFile: {0} {1}"' file' ex.Message);  				result = Encoding.ASCII.GetBytes(string.Format("<H2>{0}</H2><p>{1}</p>"' ex.Message' ex.StackTrace));  				mimeType = "text/html";			// force to html  			}
Magic Number,fyiReporting.RdlDesktop,ConnectionThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ConnectionThread.cs,ProcessReportFile,The following statement contains a magic number: try   			{  				ListDictionary ld = ProcessReportGetParms(parms);	// split parms into dictionary    				OutputPresentationType type;  				string stype = (string) ld["rs:Format"];  				if (stype == null)  					stype = "html";  				else  					stype = stype.ToLower();  				switch (stype)  				{  					case "pdf":  						type = OutputPresentationType.PDF;  						break;  					case "xml":  						type = OutputPresentationType.XML;  						string ext = (string) ld["rs:FileExtension"];  						if (ext != null)  							stype = ext;  						break;  					case "html":  						type = OutputPresentationType.HTML;  						break;  					default:  						type = OutputPresentationType.HTML;  						stype = "html";  						break;  				}    				StreamGen sg = new StreamGen(serverRoot' WorkingDir' stype);  				  				ProcessReport pr = new ProcessReport(report' sg);    				pr.Run(ld' type);    				// handle any error messages  				if (report.ErrorMaxSeverity > 0)  				{  					string errs=null;  					if (report.ErrorMaxSeverity > 4)  					{  						mimeType = "text/html";			// force to html  						errs = "<H2>Severe errors encountered when running report.</H2>";  					}  					foreach (String emsg in report.ErrorItems)  					{  						if (report.ErrorMaxSeverity > 4)  							errs += ("<p>" + emsg + "</p>");  						else  						{  							if (_server.TraceLevel > 0)   								Console.WriteLine(emsg);		// output message to console  						}  					}  					if (errs != null)  						result = Encoding.ASCII.GetBytes(errs);  					report.ErrorReset();  				}    				// Only read the result if significant errors didn't occur  				if (result == null)  				{						  					ReportRender rr = new ReportRender(report);  					rr.ActionUrl = "/" + url;  					  					string p = rr.ParameterHtml(ld);  					// put this into a file.  					string parmUrl;  					StreamWriter sw=null;  					try   					{  						sw = new StreamWriter(sg.GetIOStream(out parmUrl' "html"));  						sw.Write(p);  					}  					finally  					{  						if (sw != null)  							sw.Close();  					}    					// Add it to the file list  					IList newlist = _server.Cache.Add(url + (parms==null?"":parms)' sg.FileList);  					dbgFilename = (string) newlist[0];		// this is the first fully qualified name    					FileInfo fi = new FileInfo(dbgFilename);  					string mHtml = rr.MainHtml(report' parmUrl' sg.RelativeDirectory+fi.Name);  					string mUrl;  					sw=null;  					try   					{  						sw = new StreamWriter(sg.GetIOStream(out mUrl' "html"));  						sw.Write(mHtml);  					}  					finally  					{  						if (sw != null)  							sw.Close();  					}    					result = Encoding.ASCII.GetBytes(mHtml);  					  				}  			}  			catch (Exception ex)  			{  				if (_server.TraceLevel >= 0)   					Console.WriteLine("Exception in ProcessReportFile: {0} {1}"' file' ex.Message);  				result = Encoding.ASCII.GetBytes(string.Format("<H2>{0}</H2><p>{1}</p>"' ex.Message' ex.StackTrace));  				mimeType = "text/html";			// force to html  			}
Magic Number,fyiReporting.RdlDesktop,ConnectionThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ConnectionThread.cs,ProcessReportCompile,The following statement contains a magic number: try  			{  				rdlp =  new RDLParser(prog);  				rdlp.Folder = Path.GetDirectoryName(file);  				rdlp.DataSourceReferencePassword = new NeedPassword(this.GetPassword);    				r = rdlp.Parse();  				if (r.ErrorMaxSeverity > 0)   				{  					// have errors fill out the msgs   					foreach (String emsg in r.ErrorItems)  					{  						if (_server.TraceLevel > 0)  							Console.WriteLine(emsg);		// output message to console  						msgs += (emsg + "<p>");  					}  					int severity = r.ErrorMaxSeverity;  					r.ErrorReset();  					if (severity > 4)  						r = null;			// don't return when severe errors  				}  				// If we've loaded the report; we should tell it where it got loaded from  				if (r != null)  				{  					r.Folder = Path.GetDirectoryName(file);  					r.Name = Path.GetFileNameWithoutExtension(file);  					r.GetDataSourceReferencePassword = new RDL.NeedPassword(GetPassword);  				}  			}  			catch (Exception ex)  			{  				msgs = string.Format("<H2>{0}</H2>"' ex.Message);  				r = null;  			}
Magic Number,fyiReporting.RdlDesktop,ConnectionThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ConnectionThread.cs,SendToBrowser,The following statement contains a magic number: try  			{  				if (mySocket.Connected)  				{  					if (( numBytes = mySocket.Send(bSendData' bSendData.Length'0)) == -1)  					{  						if (_server.TraceLevel >= 0)   							Console.WriteLine("Socket Error cannot Send Packet");  					}  				}  				else  				{  					if (_server.TraceLevel >= 4)   						Console.WriteLine("Connection Dropped....");  				}  			}  			catch (Exception  e)  			{  				if (_server.TraceLevel >= 0)   					Console.WriteLine("Error Occurred : {0} "' e );  			}
Magic Number,fyiReporting.RdlDesktop,ConnectionThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ConnectionThread.cs,HandleConnection,The following statement contains a magic number: if (_server.TraceLevel >= 4)   			{  				Console.WriteLine("\nClient connected IP={0} -- {1} active connection{2}"'   					mySocket.RemoteEndPoint' connections' connections > 1? "s": "") ;  			}
Magic Number,fyiReporting.RdlDesktop,ConnectionThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ConnectionThread.cs,HandleConnection,The following statement contains a magic number: Byte[] data = new Byte[1024] ;
Magic Number,fyiReporting.RdlDesktop,ConnectionThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ConnectionThread.cs,HandleConnection,The following statement contains a magic number: if (sBuffer.Substring(0'3) != "GET" )  			{  				string req = sBuffer.Substring(0'30);  				if (_server.TraceLevel >= 0)   					Console.WriteLine("{0} not supported.  Only Get Method is supported."' req);  				mySocket.Close();  				connections--;  				this.AccumTimeSpan(DateTime.Now - sDateTime);  				return;  			}
Magic Number,fyiReporting.RdlDesktop,ConnectionThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ConnectionThread.cs,HandleConnection,The following statement contains a magic number: if (sBuffer.Substring(0'3) != "GET" )  			{  				string req = sBuffer.Substring(0'30);  				if (_server.TraceLevel >= 0)   					Console.WriteLine("{0} not supported.  Only Get Method is supported."' req);  				mySocket.Close();  				connections--;  				this.AccumTimeSpan(DateTime.Now - sDateTime);  				return;  			}
Magic Number,fyiReporting.RdlDesktop,ConnectionThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ConnectionThread.cs,HandleConnection,The following statement contains a magic number: string sHttpVersion = sBuffer.Substring(iStartPos'8);
Magic Number,fyiReporting.RdlDesktop,ConnectionThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ConnectionThread.cs,HandleConnection,The following statement contains a magic number: if (_server.TraceLevel >= 4)   				Console.WriteLine("Request=" + UnescapeRequest(sRequest));
Magic Number,fyiReporting.RdlDesktop,ConnectionThread,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\ConnectionThread.cs,HandleConnection,The following statement contains a magic number: sDirName = sRequest.Substring(sRequest.IndexOf("/")' sRequest.LastIndexOf("/")-3);
Magic Number,fyiReporting.RdlDesktop,FileReadCache,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\FileReadCache.cs,Reduce,The following statement contains a magic number: int max = (int) (maxFiles / 4);
Magic Number,fyiReporting.RdlDesktop,RdlDesktop,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\RdlDesktop.cs,RunServer,The following statement contains a magic number: try  			{  				//start listing on the given port  				if (this.bLocalOnly)  				{  					IPAddress ipAddress = Dns.GetHostEntry("localhost").AddressList[0];  					myListener = new TcpListener(ipAddress' port) ;  				}  				else  					myListener = new TcpListener(port);  				myListener.Start();  //				int maxThreads;				// worker threads in the thread pool  //				int completionPortThreads;	// asynchronous I/O threads in the thread pool  //				ThreadPool.GetMaxThreads(out maxThreads' out completionPortThreads);  				  				Console.WriteLine(string.Format("RDL Desktop version {0}' Copyright (C) 2005 fyiReporting Software' LLC"'  							Assembly.GetExecutingAssembly().GetName().Version.ToString()));    				Console.WriteLine("");  				Console.WriteLine("RDL Desktop comes with ABSOLUTELY NO WARRANTY.  This is free software'");  				Console.WriteLine("and you are welcome to redistribute it under certain conditions.");  				Console.WriteLine("Type 'license' for details.");  				Console.WriteLine("");  				Console.WriteLine("RDL Desktop running on port {0}"' port);  				Console.WriteLine("Type '?' for list of console commands.");  				Console.Write(">");  				while(_continue)  				{  					while(!myListener.Pending() && _continue)  					{  						Thread.Sleep(100);  					}  					if (_continue)  					{  						ConnectionThread c = new ConnectionThread(this' myListener' sr' wd);  						ThreadPool.QueueUserWorkItem(new WaitCallback(c.HandleConnection));  					}  				}  			}  			catch(Exception e)  			{  				if (this._TraceLevel >= 0)   					Console.WriteLine("An Exception Occurred while Listening :" +e.ToString());  			}
Magic Number,fyiReporting.RdlDesktop,RdlDesktop,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\RdlDesktop.cs,Main,The following statement contains a magic number: BackgroundThread bk = new BackgroundThread(server' 60 * 5' 60 * 5' 60 * 5);
Magic Number,fyiReporting.RdlDesktop,RdlDesktop,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\RdlDesktop.cs,Main,The following statement contains a magic number: BackgroundThread bk = new BackgroundThread(server' 60 * 5' 60 * 5' 60 * 5);
Magic Number,fyiReporting.RdlDesktop,RdlDesktop,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\RdlDesktop.cs,Main,The following statement contains a magic number: BackgroundThread bk = new BackgroundThread(server' 60 * 5' 60 * 5' 60 * 5);
Magic Number,fyiReporting.RdlDesktop,RdlDesktop,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\RdlDesktop.cs,Main,The following statement contains a magic number: BackgroundThread bk = new BackgroundThread(server' 60 * 5' 60 * 5' 60 * 5);
Magic Number,fyiReporting.RdlDesktop,RdlDesktop,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\RdlDesktop.cs,Main,The following statement contains a magic number: BackgroundThread bk = new BackgroundThread(server' 60 * 5' 60 * 5' 60 * 5);
Magic Number,fyiReporting.RdlDesktop,RdlDesktop,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\RdlDesktop.cs,Main,The following statement contains a magic number: BackgroundThread bk = new BackgroundThread(server' 60 * 5' 60 * 5' 60 * 5);
Magic Number,fyiReporting.RdlDesktop,RdlDesktop,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\RdlDesktop.cs,GetConfigInfo,The following statement contains a magic number: try  			{  				XmlDocument xDoc = new XmlDocument();  				xDoc.PreserveWhitespace = false;  				xDoc.Load(optFileName);  				XmlNode xNode;  				xNode = xDoc.SelectSingleNode("//config");    				// Loop thru all the child nodes  				foreach(XmlNode xNodeLoop in xNode.ChildNodes)  				{  					if (xNodeLoop.NodeType != XmlNodeType.Element)  						continue;  					switch (xNodeLoop.Name.ToLower())  					{  						case "port":  							try  							{  								port = Convert.ToInt32(xNodeLoop.InnerText);  							}  							catch  							{  								port = 8080;  								Console.WriteLine("config.xml file: port value is not a valid number.  Defaulting to {0}"' port);  							}  							break;  						case "localhostonly":  							string tf = xNodeLoop.InnerText.ToLower();  							if (tf == "false")  								this.bLocalOnly = false;  							break;  						case "serverroot":  							sr = xNodeLoop.InnerText;  							break;  						case "cachedirectory":  							wd = xNodeLoop.InnerText;  							break;  						case "tracelevel":  							try  							{  								_TraceLevel = Convert.ToInt32(xNodeLoop.InnerText);  							}  							catch  							{  								_TraceLevel = 0;  								Console.WriteLine("config.xml file: tracelevel value is not a valid number.  Defaulting to {0}"' _TraceLevel);  							}  							break;  						case "maxreadcache":  							try  							{  								maxReadCache = Convert.ToInt32(xNodeLoop.InnerText);  							}  							catch  							{  								maxReadCache = 100;  								Console.WriteLine("config.xml file: maxreadcache value is not a valid number.  Defaulting to {0}"' maxReadCache);  							}  							break;  						case "maxreadcacheentrysize":  							try  							{  								maxReadCacheEntrySize = Convert.ToInt32(xNodeLoop.InnerText);  							}  							catch  							{  								maxReadCacheEntrySize = 50000;  								Console.WriteLine("config.xml file: maxReadCacheEntrySize value is not a valid number.  Defaulting to {0}"' maxReadCacheEntrySize);  							}  							break;  						case "mimetypes":  							GetConfigInfoMimes(xNodeLoop);  							break;  						default:  							Console.WriteLine("config.xml file: {0} is unknown and will be ignored."' xNodeLoop.Name);  							break;  					}  				}  				if (sr == null)			// no server root specified?  					throw new Exception(Strings.RdlDesktop_Error_ServerrootMustSpecified);  			}  			catch (Exception ex)  			{		// Didn't sucessfully get the startup state don't use  				Console.WriteLine("Error processing config.xml. {0}"' ex.Message);  				throw ex;  			}
Magic Number,fyiReporting.RdlDesktop,RdlDesktop,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\RdlDesktop.cs,GetConfigInfo,The following statement contains a magic number: try  			{  				XmlDocument xDoc = new XmlDocument();  				xDoc.PreserveWhitespace = false;  				xDoc.Load(optFileName);  				XmlNode xNode;  				xNode = xDoc.SelectSingleNode("//config");    				// Loop thru all the child nodes  				foreach(XmlNode xNodeLoop in xNode.ChildNodes)  				{  					if (xNodeLoop.NodeType != XmlNodeType.Element)  						continue;  					switch (xNodeLoop.Name.ToLower())  					{  						case "port":  							try  							{  								port = Convert.ToInt32(xNodeLoop.InnerText);  							}  							catch  							{  								port = 8080;  								Console.WriteLine("config.xml file: port value is not a valid number.  Defaulting to {0}"' port);  							}  							break;  						case "localhostonly":  							string tf = xNodeLoop.InnerText.ToLower();  							if (tf == "false")  								this.bLocalOnly = false;  							break;  						case "serverroot":  							sr = xNodeLoop.InnerText;  							break;  						case "cachedirectory":  							wd = xNodeLoop.InnerText;  							break;  						case "tracelevel":  							try  							{  								_TraceLevel = Convert.ToInt32(xNodeLoop.InnerText);  							}  							catch  							{  								_TraceLevel = 0;  								Console.WriteLine("config.xml file: tracelevel value is not a valid number.  Defaulting to {0}"' _TraceLevel);  							}  							break;  						case "maxreadcache":  							try  							{  								maxReadCache = Convert.ToInt32(xNodeLoop.InnerText);  							}  							catch  							{  								maxReadCache = 100;  								Console.WriteLine("config.xml file: maxreadcache value is not a valid number.  Defaulting to {0}"' maxReadCache);  							}  							break;  						case "maxreadcacheentrysize":  							try  							{  								maxReadCacheEntrySize = Convert.ToInt32(xNodeLoop.InnerText);  							}  							catch  							{  								maxReadCacheEntrySize = 50000;  								Console.WriteLine("config.xml file: maxReadCacheEntrySize value is not a valid number.  Defaulting to {0}"' maxReadCacheEntrySize);  							}  							break;  						case "mimetypes":  							GetConfigInfoMimes(xNodeLoop);  							break;  						default:  							Console.WriteLine("config.xml file: {0} is unknown and will be ignored."' xNodeLoop.Name);  							break;  					}  				}  				if (sr == null)			// no server root specified?  					throw new Exception(Strings.RdlDesktop_Error_ServerrootMustSpecified);  			}  			catch (Exception ex)  			{		// Didn't sucessfully get the startup state don't use  				Console.WriteLine("Error processing config.xml. {0}"' ex.Message);  				throw ex;  			}
Magic Number,fyiReporting.RdlDesktop,RdlDesktop,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\RdlDesktop.cs,GetConfigInfo,The following statement contains a magic number: try  			{  				XmlDocument xDoc = new XmlDocument();  				xDoc.PreserveWhitespace = false;  				xDoc.Load(optFileName);  				XmlNode xNode;  				xNode = xDoc.SelectSingleNode("//config");    				// Loop thru all the child nodes  				foreach(XmlNode xNodeLoop in xNode.ChildNodes)  				{  					if (xNodeLoop.NodeType != XmlNodeType.Element)  						continue;  					switch (xNodeLoop.Name.ToLower())  					{  						case "port":  							try  							{  								port = Convert.ToInt32(xNodeLoop.InnerText);  							}  							catch  							{  								port = 8080;  								Console.WriteLine("config.xml file: port value is not a valid number.  Defaulting to {0}"' port);  							}  							break;  						case "localhostonly":  							string tf = xNodeLoop.InnerText.ToLower();  							if (tf == "false")  								this.bLocalOnly = false;  							break;  						case "serverroot":  							sr = xNodeLoop.InnerText;  							break;  						case "cachedirectory":  							wd = xNodeLoop.InnerText;  							break;  						case "tracelevel":  							try  							{  								_TraceLevel = Convert.ToInt32(xNodeLoop.InnerText);  							}  							catch  							{  								_TraceLevel = 0;  								Console.WriteLine("config.xml file: tracelevel value is not a valid number.  Defaulting to {0}"' _TraceLevel);  							}  							break;  						case "maxreadcache":  							try  							{  								maxReadCache = Convert.ToInt32(xNodeLoop.InnerText);  							}  							catch  							{  								maxReadCache = 100;  								Console.WriteLine("config.xml file: maxreadcache value is not a valid number.  Defaulting to {0}"' maxReadCache);  							}  							break;  						case "maxreadcacheentrysize":  							try  							{  								maxReadCacheEntrySize = Convert.ToInt32(xNodeLoop.InnerText);  							}  							catch  							{  								maxReadCacheEntrySize = 50000;  								Console.WriteLine("config.xml file: maxReadCacheEntrySize value is not a valid number.  Defaulting to {0}"' maxReadCacheEntrySize);  							}  							break;  						case "mimetypes":  							GetConfigInfoMimes(xNodeLoop);  							break;  						default:  							Console.WriteLine("config.xml file: {0} is unknown and will be ignored."' xNodeLoop.Name);  							break;  					}  				}  				if (sr == null)			// no server root specified?  					throw new Exception(Strings.RdlDesktop_Error_ServerrootMustSpecified);  			}  			catch (Exception ex)  			{		// Didn't sucessfully get the startup state don't use  				Console.WriteLine("Error processing config.xml. {0}"' ex.Message);  				throw ex;  			}
Magic Number,fyiReporting.RdlDesktop,RdlDesktop,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\RdlDesktop.cs,HandleArguments,The following statement contains a magic number: foreach(string s in args)  			{  				string t = s.Substring(0'2);  				switch (t)  				{  					case "/p":  						this._dsrPassword = s.Substring(2);  						break;  					case "/t":  						try  						{  							_TraceLevel = Convert.ToInt32(s.Substring(2));  						}  						catch  						{  							Console.WriteLine("/t value is not a valid number.  Using {0}"' _TraceLevel);  						}  						break;  					default:  						Console.WriteLine("Unknown command line argument '{0}' ignored."' s);  						break;  				}  			}
Magic Number,fyiReporting.RdlDesktop,RdlDesktop,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\RdlDesktop.cs,HandleArguments,The following statement contains a magic number: foreach(string s in args)  			{  				string t = s.Substring(0'2);  				switch (t)  				{  					case "/p":  						this._dsrPassword = s.Substring(2);  						break;  					case "/t":  						try  						{  							_TraceLevel = Convert.ToInt32(s.Substring(2));  						}  						catch  						{  							Console.WriteLine("/t value is not a valid number.  Using {0}"' _TraceLevel);  						}  						break;  					default:  						Console.WriteLine("Unknown command line argument '{0}' ignored."' s);  						break;  				}  			}
Magic Number,fyiReporting.RdlDesktop,RdlDesktop,C:\repos\majorsilence_My-FyiReporting\RdlDesktop\RdlDesktop.cs,HandleArguments,The following statement contains a magic number: foreach(string s in args)  			{  				string t = s.Substring(0'2);  				switch (t)  				{  					case "/p":  						this._dsrPassword = s.Substring(2);  						break;  					case "/t":  						try  						{  							_TraceLevel = Convert.ToInt32(s.Substring(2));  						}  						catch  						{  							Console.WriteLine("/t value is not a valid number.  Using {0}"' _TraceLevel);  						}  						break;  					default:  						Console.WriteLine("Unknown command line argument '{0}' ignored."' s);  						break;  				}  			}
