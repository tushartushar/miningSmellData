Implementation smell,Namespace,Class,File,Method,Description
Magic Number,GameOfLife,Life,C:\repos\JetBrains_resharper-workshop\11-Other\GameOfLife\Program.cs,RedrawLife,The following statement contains a magic number: for (int row = 0; row < HEIGHT; ++row)              {                  for (int col = 0; col < WIDTH; ++col)                  {                      data = currentLife[col' row];                      if (data == 0)                      {                          stdout.Write(' ');                      }                      else if (data == 1)                      {                          stdout.Write((char) 9632);                      }                      else                      {                          stdout.Write(' ');                      }                  }                  if (row != HEIGHT - 1) stdout.Write("\n");              }
Magic Number,GameOfLife,Life,C:\repos\JetBrains_resharper-workshop\11-Other\GameOfLife\Program.cs,CountNeighbours,The following statement contains a magic number: for (int sx = x - 1; sx < x + 2; sx++)              {                  for (int sy = y - 1; sy < y + 2; sy++)                  {                      if ((sx == x) && (sy == y))                      {                          // don't count self                          continue;                      }                      x1 = sx;                      y1 = sy;                      EdgeWrap(ref x1' ref y1);                      if (currentLife[x1' y1] == 1)                      {                          count++;                      }                  }              }
Magic Number,GameOfLife,Life,C:\repos\JetBrains_resharper-workshop\11-Other\GameOfLife\Program.cs,CountNeighbours,The following statement contains a magic number: for (int sx = x - 1; sx < x + 2; sx++)              {                  for (int sy = y - 1; sy < y + 2; sy++)                  {                      if ((sx == x) && (sy == y))                      {                          // don't count self                          continue;                      }                      x1 = sx;                      y1 = sy;                      EdgeWrap(ref x1' ref y1);                      if (currentLife[x1' y1] == 1)                      {                          count++;                      }                  }              }
Magic Number,GameOfLife,Life,C:\repos\JetBrains_resharper-workshop\11-Other\GameOfLife\Program.cs,Update,The following statement contains a magic number: for (int x = 0; x < WIDTH; x++)              {                  for (int y = 0; y < HEIGHT; y++)                  {                      n = CountNeighbours(x' y);                        if (n < 2)                      {                          // Die due to isolation                          nextLife[x' y] = (byte) (currentLife[x' y] == 1 ? 2 : 0);                      }                      else if (n == 2)                      {                          // 2 neighbours - stable                          nextLife[x' y] = currentLife[x' y];                      }                      else if (n == 3)                      {                          // 3 neighbours - new life (or same old life)                          nextLife[x' y] = 1;                      }                      else                      {                          // 4 or more - die due to overcrowding                          nextLife[x' y] = 0;                      }                  }              }
Magic Number,GameOfLife,Life,C:\repos\JetBrains_resharper-workshop\11-Other\GameOfLife\Program.cs,Update,The following statement contains a magic number: for (int x = 0; x < WIDTH; x++)              {                  for (int y = 0; y < HEIGHT; y++)                  {                      n = CountNeighbours(x' y);                        if (n < 2)                      {                          // Die due to isolation                          nextLife[x' y] = (byte) (currentLife[x' y] == 1 ? 2 : 0);                      }                      else if (n == 2)                      {                          // 2 neighbours - stable                          nextLife[x' y] = currentLife[x' y];                      }                      else if (n == 3)                      {                          // 3 neighbours - new life (or same old life)                          nextLife[x' y] = 1;                      }                      else                      {                          // 4 or more - die due to overcrowding                          nextLife[x' y] = 0;                      }                  }              }
Magic Number,GameOfLife,Life,C:\repos\JetBrains_resharper-workshop\11-Other\GameOfLife\Program.cs,Update,The following statement contains a magic number: for (int x = 0; x < WIDTH; x++)              {                  for (int y = 0; y < HEIGHT; y++)                  {                      n = CountNeighbours(x' y);                        if (n < 2)                      {                          // Die due to isolation                          nextLife[x' y] = (byte) (currentLife[x' y] == 1 ? 2 : 0);                      }                      else if (n == 2)                      {                          // 2 neighbours - stable                          nextLife[x' y] = currentLife[x' y];                      }                      else if (n == 3)                      {                          // 3 neighbours - new life (or same old life)                          nextLife[x' y] = 1;                      }                      else                      {                          // 4 or more - die due to overcrowding                          nextLife[x' y] = 0;                      }                  }              }
Magic Number,GameOfLife,Life,C:\repos\JetBrains_resharper-workshop\11-Other\GameOfLife\Program.cs,Update,The following statement contains a magic number: for (int x = 0; x < WIDTH; x++)              {                  for (int y = 0; y < HEIGHT; y++)                  {                      n = CountNeighbours(x' y);                        if (n < 2)                      {                          // Die due to isolation                          nextLife[x' y] = (byte) (currentLife[x' y] == 1 ? 2 : 0);                      }                      else if (n == 2)                      {                          // 2 neighbours - stable                          nextLife[x' y] = currentLife[x' y];                      }                      else if (n == 3)                      {                          // 3 neighbours - new life (or same old life)                          nextLife[x' y] = 1;                      }                      else                      {                          // 4 or more - die due to overcrowding                          nextLife[x' y] = 0;                      }                  }              }
Magic Number,GameOfLife,Life,C:\repos\JetBrains_resharper-workshop\11-Other\GameOfLife\Program.cs,Main,The following statement contains a magic number: while (!Console.KeyAvailable)              {                  Update();                  System.Threading.Thread.Sleep(100);              }
