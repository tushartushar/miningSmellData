Implementation smell,Namespace,Class,File,Method,Description
Long Method,MARC.Everest.Connectors,Util,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Connectors\Util.cs,TryFromWireFormat,The method has 103 lines of code.
Complex Method,MARC.Everest.Connectors,Util,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Connectors\Util.cs,ParseXSITypeNameInternal,Cyclomatic complexity of the method is 8
Complex Method,MARC.Everest.Connectors,Util,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Connectors\Util.cs,TryFromWireFormat,Cyclomatic complexity of the method is 20
Complex Method,MARC.Everest.DataTypes,ED,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\ED.cs,UnCompressInternal,Cyclomatic complexity of the method is 11
Complex Method,MARC.Everest.DataTypes,ED,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\ED.cs,CompressInternal,Cyclomatic complexity of the method is 9
Complex Method,MARC.Everest.DataTypes,QSET,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\QSET.cs,TranslateToSXPR,Cyclomatic complexity of the method is 8
Complex Method,MARC.Everest.DataTypes,SXPR,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\SXPR.cs,TranslateToQSETInternal,Cyclomatic complexity of the method is 24
Complex Method,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,Cyclomatic complexity of the method is 10
Complex Method,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,TranslateDateInternal,Cyclomatic complexity of the method is 27
Complex Method,MARC.Everest.Design,NewInstanceTypeEditor,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Design\NewInstanceTypeEditor.cs,EditValue,Cyclomatic complexity of the method is 9
Long Parameter List,MARC.Everest.Connectors,NotImplementedElementResultDetail,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Connectors\ResultDetail.cs,NotImplementedElementResultDetail,The method has 5 parameters.
Long Parameter List,MARC.Everest.Connectors,PropertyValuePropagatedResultDetail,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Connectors\ResultDetail.cs,PropertyValuePropagatedResultDetail,The method has 5 parameters.
Long Parameter List,MARC.Everest.DataTypes,CD,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\CD.cs,CD,The method has 6 parameters.
Long Parameter List,MARC.Everest.DataTypes,CE,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\CE.cs,CE,The method has 6 parameters.
Long Parameter List,MARC.Everest.DataTypes,CV,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\CV.cs,CV,The method has 6 parameters.
Long Statement,MARC.Everest.Connectors,Util,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Connectors\Util.cs,ParseMaps,The length of the statement  "					s_enumerationMaps.Add (string.Format ("{0}.{1}"' t.FullName' (ea [0] as EnumerationAttribute).Value)' fi.Name.ToString ()); " is 123.
Long Statement,MARC.Everest.Connectors,Util,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Connectors\Util.cs,Convert,The length of the statement  "		throw new FormatterException (String.Format ("Can't find valid cast to from '{0}' to '{1}'"' value.GetType ()' typeof(T))); " is 123.
Long Statement,MARC.Everest.Connectors,Util,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Connectors\Util.cs,FromWireFormat,The length of the statement  "		throw new FormatterException (String.Format ("Can't find valid cast to from '{0}' to '{1}'"' value.GetType ()' destType)); " is 122.
Long Statement,MARC.Everest.Connectors,Util,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Connectors\Util.cs,FindConverter,The length of the statement  "			if (mi.GetParameters ().Length == 1 && (mi.ReturnType.IsSubclassOf (destType) || destType == mi.ReturnType) && mi.GetParameters () [0].ParameterType.FullName == sourceType.FullName) " is 181.
Long Statement,MARC.Everest.Connectors,Util,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Connectors\Util.cs,ToWireFormat,The length of the statement  "	Type realType = instanceValue.GetType ().IsEnum ? instanceValue.GetType () : instanceValue.GetType ().IsGenericType ? instanceValue.GetType ().GetGenericArguments () [0] : // Coded value " is 186.
Long Statement,MARC.Everest.Connectors,Util,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Connectors\Util.cs,ParseXSITypeNameInternal,The length of the statement  "				throw new InvalidOperationException ("Should not be here' could not construct a data type with the specified parameters"); " is 122.
Long Statement,MARC.Everest.Connectors,Util,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Connectors\Util.cs,CreateXSITypeName,The length of the statement  "			if (stAtt.Length > 0 && (stAtt [0] as StructureAttribute).StructureType == StructureAttribute.StructureAttributeType.DataType) { " is 128.
Long Statement,MARC.Everest.Connectors,Util,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Connectors\Util.cs,TryFromWireFormat,The length of the statement  "		if (!s_enumerationMaps.ContainsKey (string.Format ("{0}.{1}"' m_destType.FullName' value)) && !requiresExplicitCastCall) " is 120.
Long Statement,MARC.Everest.Connectors,Util,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Connectors\Util.cs,TryFromWireFormat,The length of the statement  "			throw new VocabularyException (string.Format ("Can't find value '{0}' in domain '{1}'."' value' m_destType.Name)' value.ToString ()' m_destType.Name' null); " is 156.
Long Statement,MARC.Everest.Connectors,Util,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Connectors\Util.cs,TryFromWireFormat,The length of the statement  "				throw new VocabularyException (string.Format ("Can't find value '{0}' in domain '{1}'."' value' m_destType.Name)' value.ToString ()' m_destType.Name' null); " is 156.
Long Statement,MARC.Everest.Connectors,Util,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Connectors\Util.cs,TryFromWireFormat,The length of the statement  "			if (value.GetType ().IsGenericType && destType.IsGenericType && destType.GetGenericArguments () [0] != value.GetType ().GetGenericArguments () [0] && destType.GetGenericTypeDefinition () != value.GetType ().GetGenericTypeDefinition ()) { " is 237.
Long Statement,MARC.Everest.DataTypes,AD,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\AD.cs,Equals,The length of the statement  "		bool result = other.IsNotOrdered == this.IsNotOrdered && (other.Use != null ? other.Use.Equals (this.Use) : this.Use == null) && (other.UseablePeriod != null ? other.UseablePeriod.Equals (this.UseablePeriod) : this.UseablePeriod == null); " is 238.
Long Statement,MARC.Everest.DataTypes,ADXP,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\ADXP.cs,Validate,The length of the statement  "	return (NullFlavor != null) ^ (Value != null && ((Code != null && CodeSystem != null) || Code == null) && ((CodeSystemVersion != null && CodeSystem != null) || CodeSystemVersion == null)); " is 188.
Long Statement,MARC.Everest.DataTypes,ADXP,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\ADXP.cs,Equals,The length of the statement  "		return base.Equals ((ANY)other) && other.Code == this.Code && other.CodeSystem == this.CodeSystem && other.CodeSystemVersion == this.CodeSystemVersion && other.Value == this.Value && other.Type == this.Type; " is 207.
Long Statement,MARC.Everest.DataTypes,ANY,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\ANY.cs,Equals,The length of the statement  "		result = other.ControlActExt == this.ControlActExt && other.ControlActRoot == this.ControlActRoot && other.Flavor == this.Flavor && (other.NullFlavor == null ? this.NullFlavor == null : other.NullFlavor.Equals (this.NullFlavor)) && (other.UpdateMode == null ? this.UpdateMode == null : other.UpdateMode.Equals (this.UpdateMode)) && (other.ValidTimeHigh == null ? this.ValidTimeHigh == null : other.ValidTimeHigh.Equals (this.ValidTimeHigh)) && (other.ValidTimeLow == null ? this.ValidTimeLow == null : other.ValidTimeLow.Equals (this.ValidTimeLow)) && (this.DataType == other.DataType); " is 586.
Long Statement,MARC.Everest.DataTypes,ANY,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\ANY.cs,Validate,The length of the statement  "	bool isAny = this.GetType () == typeof(ANY)' isNullFlavorSet = this.NullFlavor != null' isNullFlavorINV = isNullFlavorSet && ((NullFlavor)this.NullFlavor).IsChildConcept (MARC.Everest.DataTypes.NullFlavor.Invalid); " is 214.
Long Statement,MARC.Everest.DataTypes,BAG,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\BAG.cs,SemanticEquals,The length of the statement  "			isEqual &= otherBAG.FindAll (o => itm.SemanticEquals (o as IAny) == true).Count == this.FindAll (o => itm.SemanticEquals (o as IAny) == true).Count; " is 148.
Long Statement,MARC.Everest.DataTypes,CD,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\CD.cs,Equals,The length of the statement  "		result = base.Equals ((CE<T>)other) && (other.Qualifier != null ? other.Qualifier.Equals (this.Qualifier) : this.Qualifier == null); " is 132.
Long Statement,MARC.Everest.DataTypes,CDGroup,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\CDGroup.cs,Equals,The length of the statement  "		result = base.Equals ((ANY)other) && other.Qualifier != null ? other.Qualifier.Equals (this.Qualifier) : this.Qualifier == null; " is 128.
Long Statement,MARC.Everest.DataTypes,CE,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\CE.cs,Equals,The length of the statement  "		result = base.Equals ((CV<T>)other) && (other.Translation != null ? other.Translation.Equals (this.Translation) : this.Translation == null); " is 140.
Long Statement,MARC.Everest.DataTypes,CO,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\CO.cs,Validate,The length of the statement  "	return (NullFlavor != null) ^ (Code != null || Value != null && Value.HasValue) && ((Code != null && Code.Validate ()) || Code == null); " is 136.
Long Statement,MARC.Everest.DataTypes,CO,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\CO.cs,Equals,The length of the statement  "		result = base.Equals ((QTY<Decimal?>)other) && (this.Code != null ? this.Code.Equals (other.Code) : (bool)(other.Code == null)); " is 128.
Long Statement,MARC.Everest.DataTypes,CR,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\CR.cs,Validate,The length of the statement  "	bool isValid = (NullFlavor != null) ^ (Value != null && Name != null && Value.OriginalText == null && Value.Validate () && Name.Validate ()); " is 141.
Long Statement,MARC.Everest.DataTypes,CR,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\CR.cs,Equals,The length of the statement  "		result = base.Equals ((ANY)other) && other.Inverted == this.Inverted && (other.Name != null ? other.Name.Equals (this.Name) : this.Name == null) && (other.Value != null ? other.Value.Equals (this.Value) : this.Value == null); " is 225.
Long Statement,MARC.Everest.DataTypes,CS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\CS.cs,SemanticEquals,The length of the statement  "	return !this.IsNull && !(other as ANY).IsNull && this.Code != null && (other as ICodedSimple).CodeValue != null && Util.ToWireFormat (this.Code).Equals (Util.ToWireFormat ((other as ICodedSimple).CodeValue)); " is 208.
Long Statement,MARC.Everest.DataTypes,CV,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\CV.cs,GetCodeSystem,The length of the statement  "	object[] ea = typeof(T).GetField (value.ToString ()).GetCustomAttributes (typeof(EnumerationAttribute)' false)' oa = typeof(T).GetCustomAttributes (typeof(StructureAttribute)' false); " is 183.
Long Statement,MARC.Everest.DataTypes,CV,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\CV.cs,Validate,The length of the statement  "		isValid &= (((Code != null) ^ (NullFlavor != null)) && ((CodeSystemName != null && CodeSystem != null) || (CodeSystemName == null)) && ((CodeSystemVersion != null && CodeSystem != null) || (CodeSystemVersion == null)) && ((CodeSystem != null && (Code != null || (NullFlavor)NullFlavor == DataTypes.NullFlavor.Other)) || (CodeSystem == null)) && // Code System cannot be specified without a code' unless a nullFlavor of other is specified " is 437.
Long Statement,MARC.Everest.DataTypes,CV,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\CV.cs,Validate,The length of the statement  "		((DisplayName != null && Code != null) || (DisplayName == null)) && ((Code != null && Code.IsAlternateCodeSpecified && CodeSystem != null) || (Code == null || !Code.IsAlternateCodeSpecified)) && ((ValueSetVersion != null && ValueSet != null) || (ValueSetVersion == null)) && ((NullFlavor != null && ((DataTypes.NullFlavor)NullFlavor).IsChildConcept (DataTypes.NullFlavor.Other)) || (NullFlavor == null))); " is 405.
Long Statement,MARC.Everest.DataTypes,CV,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\CV.cs,Validate,The length of the statement  "		isValid &= Code == null && DisplayName == null && CodeSystem == null && CodeSystemName == null && CodeSystemVersion == null && OriginalText == null && ValueSet == null && ValueSetVersion == null; " is 195.
Long Statement,MARC.Everest.DataTypes,CV,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\CV.cs,Equals,The length of the statement  "		result = base.Equals ((CS<T>)other) && (other.CodingRationale != null ? other.CodingRationale.Equals (this.CodingRationale) : this.CodingRationale == null) && (other.DisplayName == null ? this.DisplayName == null : other.DisplayName.Equals (this.DisplayName)) && (other.OriginalText != null ? other.OriginalText.Equals (this.OriginalText) : this.OriginalText == null) && (this.CodeSystem ?? GetCodeSystem (Code)) == (other.CodeSystem ?? GetCodeSystem (other.Code)) && this.CodeSystemName == other.CodeSystemName && this.CodeSystemVersion == other.CodeSystemVersion && this.ValueSet == other.ValueSet && this.ValueSetVersion == other.ValueSetVersion; " is 649.
Long Statement,MARC.Everest.DataTypes,ED,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\ED.cs,UnCompressInternal,The length of the statement  "		throw new InvalidOperationException ("The compression algorithm required to compress the data is not implemented in this version of .NET"); " is 139.
Long Statement,MARC.Everest.DataTypes,ED,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\ED.cs,CompressInternal,The length of the statement  "		throw new InvalidOperationException ("The compression algorithm required to compress the data is not implemented in this version of .NET"); " is 139.
Long Statement,MARC.Everest.DataTypes,ED,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\ED.cs,IsValidTextFlavor,The length of the statement  "	return ed.Representation == EncapsulatedDataRepresentation.TXT && ed.Compression == null && ed.IntegrityCheckAlgorithm == null && ed.MediaType == "text/plain"; " is 159.
Long Statement,MARC.Everest.DataTypes,ED,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\ED.cs,IsValidImageFlavor,The length of the statement  "	return ed.MediaType != null && ed.MediaType.StartsWith ("image/") && (ed.Data != null && ed.Representation == EncapsulatedDataRepresentation.B64 || ed.Data == null); " is 165.
Long Statement,MARC.Everest.DataTypes,ED,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\ED.cs,IsValidSignatureFlavor,The length of the statement  "	return ed.Representation == EncapsulatedDataRepresentation.XML && ed.IntegrityCheck == null && ed.Thumbnail == null && ed.Compression == null && ed.Language == null && ed.Translation == null && ed.MediaType != null && ed.MediaType == "text/xml"; " is 245.
Long Statement,MARC.Everest.DataTypes,ED,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\ED.cs,Validate,The length of the statement  "	return ((((this.Data != null) ^ (this.Reference != null))) ^ (this.NullFlavor != null)) && (((this.Data != null || this.Reference != null)) || (this.Data == null && this.Reference == null)) && (this.Translation != null && this.Translation.FindAll (o => o.Translation == null).Count == this.Translation.Count || this.Translation == null) && (this.Reference == null || TEL.IsValidUrlFlavor (this.Reference)) && (this.Thumbnail == null || this.Thumbnail.Thumbnail == null && this.Thumbnail.Reference == null); " is 506.
Long Statement,MARC.Everest.DataTypes,ED,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\ED.cs,Equals,The length of the statement  "		result = base.Equals ((ANY)other) && other.Compression == this.Compression && other.IntegrityCheckAlgorithm == this.IntegrityCheckAlgorithm && ByteEquality (other.Data' this.Data) && ByteEquality (other.IntegrityCheck' this.IntegrityCheck) && other.Language == this.Language && other.MediaType == this.MediaType && (other.Reference != null ? other.Reference.Equals (this.Reference) : this.Reference == null) && other.Representation == this.Representation && (other.Thumbnail != null ? other.Thumbnail.Equals (this.Thumbnail) : this.Thumbnail == null) && (other.Translation != null ? other.Translation.Equals (this.Translation) : this.Translation == null) && (other.Description != null ? other.Description.Equals (this.Description) : this.Description == null); " is 759.
Long Statement,MARC.Everest.DataTypes,EIVL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\EIVL.cs,Equals,The length of the statement  "		result = base.Equals ((SXCM<T>)other) && (other.Event != null ? other.Event.Equals (this.Event) : this.Event == null) && (other.Offset != null ? other.Offset.Equals (this.Offset) : this.Offset == null) && (other.Value != null ? other.Value.Equals (this.Value) : this.Value == null); " is 282.
Long Statement,MARC.Everest.DataTypes,EIVL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\EIVL.cs,SemanticEquals,The length of the statement  "		return (eivlOther.Event == null ? this.Event == null : (bool)eivlOther.Event.SemanticEquals (this.Event)) && (eivlOther.Offset == null ? this.Offset == null : (bool)eivlOther.Offset.SemanticEquals (this.Offset)); " is 212.
Long Statement,MARC.Everest.DataTypes,ENXP,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\ENXP.cs,Equals,The length of the statement  "		return base.Equals ((ANY)other) && other.Code == this.Code && other.CodeSystem == this.CodeSystem && other.CodeSystemVersion == this.CodeSystemVersion && other.Value == this.Value && (other.Qualifier == null ? this.Qualifier == null : other.Qualifier.Equals (this.Qualifier)) && other.Type == this.Type; " is 303.
Long Statement,MARC.Everest.DataTypes,GTS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\GTS.cs,Validate,The length of the statement  "	return (this.Hull != null) ^ (this.NullFlavor != null) && ((this.Hull != null && this.Hull.Validate ()) || this.Hull == null); " is 126.
Long Statement,MARC.Everest.DataTypes,II,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\II.cs,IsValidTokenFlavor,The length of the statement  "	return ii.Displayable == null && ii.Use == null && (ii.Root != null && IsRootGuid (ii) && ii.Extension == null) ^ (ii.NullFlavor != null); " is 138.
Long Statement,MARC.Everest.DataTypes,II,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\II.cs,IsValidPublicFlavor,The length of the statement  "	return ii.Displayable == true && ii.Use == IdentifierUse.Business && (ii.Root != null && ii.Extension != null && IsRootOid (ii)) ^ (ii.NullFlavor != null); " is 155.
Long Statement,MARC.Everest.DataTypes,II,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\II.cs,IsValidBusFlavor,The length of the statement  "	return ii.Displayable == null && ii.Use == IdentifierUse.Business && (ii.Root != null && ((IsRootOid (ii) && ii.Extension != null) || (IsRootGuid (ii) && ii.Extension == null))) ^ (ii.NullFlavor != null); " is 204.
Long Statement,MARC.Everest.DataTypes,II,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\II.cs,IsValidVerFlavor,The length of the statement  "	return ii.Displayable == null && ii.Use == IdentifierUse.Version && (ii.Root != null && ii.Extension == null && IsRootGuid (ii)) ^ (ii.NullFlavor != null); " is 155.
Long Statement,MARC.Everest.DataTypes,II,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\II.cs,Equals,The length of the statement  "		result = base.Equals ((ANY)other) && this.AssigningAuthorityName == other.AssigningAuthorityName && this.Displayable == other.Displayable && this.Extension == other.Extension && this.IdentifierName == other.IdentifierName && this.Reliability == other.Reliability && this.Root == other.Root && this.Scope == other.Scope; " is 319.
Long Statement,MARC.Everest.DataTypes,II,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\II.cs,SemanticEquals,The length of the statement  "	return otherII != null && !other.IsNull && !this.IsNull && otherII.Root == this.Root && (otherII.Extension == this.Extension); " is 126.
Long Statement,MARC.Everest.DataTypes,INT,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\INT.cs,SemanticEquals,The length of the statement  "	else if (intOther.UncertainRange != null && !intOther.UncertainRange.IsNull && this.UncertainRange != null && !this.UncertainRange.IsNull) " is 138.
Long Statement,MARC.Everest.DataTypes,IVL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\IVL.cs,IsValidWidthFlavor,The length of the statement  "	return (ivl.Low == null && ivl.High == null && !ivl.LowClosed.HasValue && !ivl.HighClosed.HasValue && ivl.Width != null) ^ (ivl.NullFlavor != null); " is 148.
Long Statement,MARC.Everest.DataTypes,IVL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\IVL.cs,IsValidHighFlavor,The length of the statement  "	return (ivl.Low == null && ivl.High != null && !ivl.LowClosed.HasValue && ivl.HighClosed == true && ivl.Width == null) ^ (ivl.NullFlavor != null); " is 146.
Long Statement,MARC.Everest.DataTypes,IVL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\IVL.cs,IsValidLowFlavor,The length of the statement  "	return (ivl.Low != null && ivl.High == null && ivl.LowClosed == true && !ivl.HighClosed.HasValue && ivl.Width == null) ^ (ivl.NullFlavor != null); " is 146.
Long Statement,MARC.Everest.DataTypes,IVL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\IVL.cs,SemanticEquals,The length of the statement  "		bool otherHighInfinite = (ivlOther.High == null || (NullFlavor)ivlOther.High.NullFlavor == DataTypes.NullFlavor.PositiveInfinity)' thisHighInfinite = (this.High == null || (NullFlavor)this.High.NullFlavor == DataTypes.NullFlavor.PositiveInfinity)' otherLowInifinite = (ivlOther.Low == null || (NullFlavor)ivlOther.Low.NullFlavor == DataTypes.NullFlavor.NegativeInfinity)' thisLowInfinite = (this.Low == null || (NullFlavor)this.Low.NullFlavor == DataTypes.NullFlavor.NegativeInfinity)' isOtherUnbound = (ivlOther.High == null || ivlOther.High.IsNull) && !otherHighInfinite || (ivlOther.Low == null || ivlOther.Low.IsNull) && !otherLowInifinite' isThisUnbound = (this.High == null || this.High.IsNull) && !thisHighInfinite || (this.Low == null || this.Low.IsNull) && !thisLowInfinite; " is 783.
Long Statement,MARC.Everest.DataTypes,IVL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\IVL.cs,SemanticEquals,The length of the statement  "			return ((otherHighInfinite && thisHighInfinite) || (bool)this.High.SemanticEquals (ivlOther.High)) && ((otherLowInifinite && thisLowInfinite) || (bool)this.Low.SemanticEquals (ivlOther.Low)); " is 191.
Long Statement,MARC.Everest.DataTypes,IVL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\IVL.cs,Validate,The length of the statement  "	return (NullFlavor != null) ^ ((Low != null || High != null || Width != null || Value != null) && ((LowClosed != null && Low != null) || LowClosed == null) && ((HighClosed != null && High != null) || HighClosed == null)); " is 221.
Long Statement,MARC.Everest.DataTypes,IVL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\IVL.cs,Equals,The length of the statement  "		result = base.Equals ((SXCM<T>)other) && (other.High != null ? other.High.Equals (this.High) : this.High == null) && other.HighClosed == this.HighClosed && (other.Low != null ? other.Low.Equals (this.Low) : this.Low == null) && other.LowClosed == this.LowClosed && (other.OriginalText != null ? other.OriginalText.Equals (this.OriginalText) : this.OriginalText == null) && (other.Width != null ? other.Width.Equals (this.Width) : this.Width == null); " is 450.
Long Statement,MARC.Everest.DataTypes,IVL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\IVL.cs,Translate,The length of the statement  "	IPqTranslatable<T> pqLow = low as IPqTranslatable<T>' pqHigh = high as IPqTranslatable<T>' pqValue = value as IPqTranslatable<T>; " is 129.
Long Statement,MARC.Everest.DataTypes,IVL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\IVL.cs,ToSet,The length of the statement  "		throw new InvalidOperationException (String.Format ("Cannot enumerate '{0}' to construct the resultant set"' typeof(T).FullName)); " is 130.
Long Statement,MARC.Everest.DataTypes,MO,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\MO.cs,Validate,The length of the statement  "	return ((Value != null || UncertainRange != null) ^ (NullFlavor != null)) && (((Value != null || UncertainRange != null) && Currency != null) || (Value == null && UncertainRange == null)) && ((Value != null) ^ (UncertainRange != null) || (Value == null && UncertainRange == null)); " is 281.
Long Statement,MARC.Everest.DataTypes,MO,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\MO.cs,Equals,The length of the statement  "		result = base.Equals ((QTY<Nullable<Decimal>>)other) && this.Currency == other.Currency && this.Precision == other.Precision; " is 125.
Long Statement,MARC.Everest.DataTypes,MO,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\MO.cs,SemanticEquals,The length of the statement  "	if ((this.Value == null && otherMo.Value == null || this.Value.Equals (otherMo.Value)) && (this.Currency == null && otherMo.Currency == null || this.Currency.Equals (otherMo.Currency))) " is 185.
Long Statement,MARC.Everest.DataTypes,MO,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\MO.cs,SemanticEquals,The length of the statement  "	else if (this.UncertainRange != null && otherMo.UncertainRange != null && this.UncertainRange.Equals (otherMo.UncertainRange)) " is 126.
Long Statement,MARC.Everest.DataTypes,PIVL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\PIVL.cs,Validate,The length of the statement  "	return ((NullFlavor != null && Period == null && Phase == null && Frequency == null) || (NullFlavor == null)) && ((NullFlavor == null && (Period != null) ^ (Frequency != null)) && ((this.Phase != null && this.Phase.Width != null && this.Period != null && this.Period.CompareTo (this.Phase.Width) >= 0) || (this.Phase == null || this.Period == null || this.Phase.Width == null)) || (NullFlavor != null)); " is 403.
Long Statement,MARC.Everest.DataTypes,PIVL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\PIVL.cs,Equals,The length of the statement  "		result = base.Equals ((SXCM<T>)other) && (other.Phase != null ? other.Phase.Equals (this.Phase) : this.Phase == null) && (other.Period != null ? other.Period.Equals (this.Period) : this.Period == null) && (other.Count != null ? other.Count.Equals (this.Count) : this.Count == null) && other.Alignment == this.Alignment && other.InstitutionSpecified == this.InstitutionSpecified; " is 378.
Long Statement,MARC.Everest.DataTypes,PIVL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\PIVL.cs,SemanticEquals,The length of the statement  "		return (eivlOther.Period == null ? this.Period == null : (bool)eivlOther.Period.SemanticEquals (this.Period)) && (eivlOther.Frequency == null ? this.Frequency == null : (bool)eivlOther.Frequency.SemanticEquals (this.Frequency)) && (eivlOther.Phase == null ? this.Phase == null : (bool)eivlOther.Phase.SemanticEquals (this.Phase)); " is 330.
Long Statement,MARC.Everest.DataTypes,PN,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\PN.cs,Validate,The length of the statement  "		isValid &= part.Qualifier == null || part.Qualifier.Find (ob => ob.Code.Equals (EntityNamePartQualifier.LegalStatus)) == null; " is 126.
Long Statement,MARC.Everest.DataTypes,PQ,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\PQ.cs,ToString,The length of the statement  "		return String.Format ("{0}{1}{2}"' strValue' this.Value != null && !String.IsNullOrEmpty (this.Unit) ? " " : ""' this.Unit); " is 124.
Long Statement,MARC.Everest.DataTypes,PQ,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\PQ.cs,Validate,The length of the statement  "	return (this.Value != null || this.UncertainRange != null) ^ (this.NullFlavor != null) && ((this.Value != null || this.UncertainRange != null && ((this.Value != null) ^ (this.UncertainRange != null))) || (this.Value == null && this.UncertainRange == null)) && ((this.Uncertainty != null && this.Uncertainty is PQ && (this.Uncertainty as PQ).IsUnitComparable (this.Unit)) || this.Uncertainty == null) && ((this.UncertainRange != null && this.UncertainRange.Low is PQ && this.UncertainRange.High is PQ) || (this.UncertainRange == null)) && ((this.UncertainRange != null && this.UncertainRange.Low != null && this.UncertainRange.High != null && (this.UncertainRange.Low as PQ).IsUnitComparable ((this.UncertainRange.High as PQ).Unit)) || (this.UncertainRange == null)); " is 766.
Long Statement,MARC.Everest.DataTypes,PQ,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\PQ.cs,Equals,The length of the statement  "		result = base.Equals ((QTY<Nullable<Decimal>>)other) && (other.CodingRationale != null ? other.CodingRationale.Equals (this.CodingRationale) : this.CodingRationale == null) && other.Precision == this.Precision && (other.Translation != null ? other.Translation.Equals (this.Translation) : this.Translation == null) && other.Unit == this.Unit; " is 341.
Long Statement,MARC.Everest.DataTypes,PQ,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\PQ.cs,SemanticEquals,The length of the statement  "	else if (this.UncertainRange != null && !this.UncertainRange.IsNull && pqOther.UncertainRange != null && !pqOther.UncertainRange.IsNull) " is 136.
Long Statement,MARC.Everest.DataTypes,PQ,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\PQ.cs,ToIVL,The length of the statement  "	decimal tValue = this.Value.Value * (decimal)Math.Pow (10' Precision)' min = Math.Floor (tValue)' max = Math.Ceiling (tValue + (decimal)Math.Pow (10' -(20 - Precision))) - (decimal)Math.Pow (10' -(20 - Precision)); " is 214.
Long Statement,MARC.Everest.DataTypes,PQ,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\PQ.cs,ToIVL,The length of the statement  "	return new IVL<PQ> (new PQ (min / (decimal)Math.Pow (10' Precision)' this.Unit)' new PQ (max / (decimal)Math.Pow (10' Precision)' this.Unit)) { " is 143.
Long Statement,MARC.Everest.DataTypes,QSD,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\QSD.cs,Validate,The length of the statement  "	bool isValid = (this.NullFlavor != null) ^ (this.Minuend != null && !this.Minuend.IsNull && this.Subtrahend != null && !this.Subtrahend.IsNull); " is 144.
Long Statement,MARC.Everest.DataTypes,QSET,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\QSET.cs,Equals,The length of the statement  "		result = (this.OriginalText != null ? this.OriginalText.Equals (other.OriginalText) : other.OriginalText == null) && base.Equals (other); " is 137.
Long Statement,MARC.Everest.DataTypes,QSET,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\QSET.cs,TranslateToSXPR,The length of the statement  "					throw new InvalidOperationException ("Cannot interpret the member of the set with type '{0}' as it cannot be converted to a union of interval"); " is 144.
Long Statement,MARC.Everest.DataTypes,QSP,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\QSP.cs,Validate,The length of the statement  "	bool isValid = (this.NullFlavor != null) ^ (this.Low != null && !this.Low.IsNull && this.High != null && !this.High.IsNull); " is 124.
Long Statement,MARC.Everest.DataTypes,QTY,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\QTY.cs,Validate,The length of the statement  "	valid &= ((UncertainRange != null && UncertainRange.Width == null && UncertainRange.Value == null) || UncertainRange == null); " is 126.
Long Statement,MARC.Everest.DataTypes,QTY,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\QTY.cs,Equals,The length of the statement  "		result = (base.Equals ((PDV<T>)other) && (other.Expression != null ? other.Expression.Equals (this.Expression) : this.Expression == null) && (other.OriginalText != null ? other.OriginalText.Equals (this.OriginalText) : this.OriginalText == null) && (other.Uncertainty != null ? other.Uncertainty.Equals (this.Uncertainty) : this.Uncertainty == null) && (other.UncertainRange != null ? other.UncertainRange.Equals (this.UncertainRange) : this.UncertainRange == null) && other.UncertaintyType == this.UncertaintyType) || (base.Equals ((ANY)other) && this.Value == null && other.Value == null && (other.UncertainRange != null ? other.UncertainRange.Equals (this.UncertainRange) : this.UncertainRange == null)); " is 707.
Long Statement,MARC.Everest.DataTypes,REAL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\REAL.cs,Equals,The length of the statement  "		result = base.Equals ((QTY<Nullable<Double>>)other) && (other.Precision == 0 ? this.Precision : other.Precision) == (this.Precision == 0 ? other.Precision : this.Precision); " is 173.
Long Statement,MARC.Everest.DataTypes,REAL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\REAL.cs,ToIVL,The length of the statement  "	double tValue = this.Value.Value * Math.Pow (10' Precision)' min = Math.Floor (tValue)' max = Math.Ceiling (tValue) - Math.Pow (10' -(14 - Precision)); " is 151.
Long Statement,MARC.Everest.DataTypes,REAL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\REAL.cs,SemanticEquals,The length of the statement  "	else if (realOther.Value.HasValue && this.Value.HasValue && Math.Abs (realOther.Value.Value - this.Value.Value) <= Math.Abs (realOther.Value.Value * this.p_floatingPointEqualityTolerance)) " is 188.
Long Statement,MARC.Everest.DataTypes,REAL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\REAL.cs,SemanticEquals,The length of the statement  "	else if (realOther.UncertainRange != null && !realOther.UncertainRange.IsNull && this.UncertainRange != null && !this.UncertainRange.IsNull) " is 140.
Long Statement,MARC.Everest.DataTypes,SET,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\SET.cs,Add,The length of the statement  "		throw new DuplicateItemException ("Item already exists in the SET' items are only allowed to appear once in any given SET"); " is 124.
Long Statement,MARC.Everest.DataTypes,RTO,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\RTO.cs,Validate,The length of the statement  "	return (NullFlavor != null) ^ (Denominator != null || Numerator != null) && ((Numerator != null && Denominator != null && Denominator.Validate () && Numerator.Validate ()) || (Numerator == null && Denominator == null)) && UncertainRange == null; " is 245.
Long Statement,MARC.Everest.DataTypes,RTO,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\RTO.cs,Equals,The length of the statement  "		result = (base.Equals ((PDV<Double?>)other) && (other.Expression != null ? other.Expression.Equals (this.Expression) : this.Expression == null) && (other.OriginalText != null ? other.OriginalText.Equals (this.OriginalText) : this.OriginalText == null) && (other.Uncertainty != null ? other.Uncertainty.Equals (this.Uncertainty) : this.Uncertainty == null) && other.UncertaintyType == this.UncertaintyType) && (other.Denominator != null ? other.Denominator.Equals (this.Denominator) : this.Denominator == null) && (other.Numerator != null ? other.Numerator.Equals (this.Numerator) : this.Numerator == null) || (base.Equals ((ANY)other) && this.Numerator == null && other.Numerator == null && this.Denominator == null && other.Denominator == null && (other.UncertainRange != null ? other.UncertainRange.Equals (this.UncertainRange) : this.UncertainRange == null)); " is 862.
Long Statement,MARC.Everest.DataTypes,RTO,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\RTO.cs,SemanticEquals,The length of the statement  "	else if (rtoOther.Numerator != null && rtoOther.Denominator != null && this.Numerator != null && this.Denominator != null) " is 122.
Long Statement,MARC.Everest.DataTypes,ST,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\ST.cs,Equals,The length of the statement  "		result = base.Equals ((PDV<string>)other) && other.Language == this.Language && (other.Translation != null ? other.Translation.Equals (this.Translation) : this.Translation == null); " is 181.
Long Statement,MARC.Everest.DataTypes,ST,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\ST.cs,Validate,The length of the statement  "	return ((this.Value != null) ^ (this.NullFlavor != null)) && (this.Translation != null && this.Translation.FindAll (o => o.Translation == null).Count == this.Translation.Count || this.Translation == null); " is 205.
Long Statement,MARC.Everest.DataTypes,TEL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TEL.cs,Equals,The length of the statement  "		result = base.Equals ((PDV<String>)other) && (other.Use != null ? other.Use.Equals (this.Use) : this.Use == null) && (other.UseablePeriod != null ? other.UseablePeriod.Equals (this.UseablePeriod) : this.UseablePeriod == null) && (other.Capabilities != null ? other.Capabilities.Equals (this.Capabilities) : this.Capabilities == null); " is 334.
Long Statement,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,IsValidDateTimeFlavor,The length of the statement  "	return ts.DateValuePrecision <= DatePrecision.MinuteNoTimezone || ts.Value.Contains ("-") && ts.DateValuePrecision <= DatePrecision.Minute; " is 139.
Long Statement,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The length of the statement  "		return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) { " is 194.
Long Statement,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The length of the statement  "		return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) { " is 237.
Long Statement,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The length of the statement  "		return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) { " is 264.
Long Statement,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The length of the statement  "		return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) { " is 299.
Long Statement,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The length of the statement  "		return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) { " is 338.
Long Statement,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The length of the statement  "		return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 999)' DatePrecision.Full)) { " is 377.
Long Statement,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,Equals,The length of the statement  "		result = base.Equals ((QTY<String>)other) && (this.DateValuePrecision ?? DatePrecision.Full) == (other.DateValuePrecision ?? DatePrecision.Full) && (this.DateValue.ToString (m_precisionFormats [this.DateValuePrecision ?? DatePrecision.Full]) == other.DateValue.ToString (m_precisionFormats [other.DateValuePrecision ?? DatePrecision.Full])); " is 341.
Long Statement,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,Validate,The length of the statement  "	return (NullFlavor != null) ^ ((DateValue != default(DateTime) || UncertainRange != null) && ((this.Uncertainty != null && this.Uncertainty is PQ && PQ.IsValidTimeFlavor (this.Uncertainty as PQ)) || (this.Uncertainty == null)) && ((this.UncertainRange != null && this.UncertainRange.Low is PQ && this.UncertainRange.High is PQ && PQ.IsValidTimeFlavor (this.UncertainRange.Low as PQ) && PQ.IsValidTimeFlavor (this.UncertainRange.High as PQ)) || this.UncertainRange == null) && (((DateValue != default(DateTime)) ^ (this.UncertainRange != null)) || (this.DateValue == null && this.UncertainRange == null))); " is 605.
Long Statement,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,SemanticEquals,The length of the statement  "	else if (tsOther.DateValuePrecision.HasValue && this.DateValuePrecision.HasValue && tsOther.DateValuePrecision.Value.HasTimeZone () ^ this.DateValuePrecision.Value.HasTimeZone ()) " is 179.
Long Statement,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,SemanticEquals,The length of the statement  "	else if (tsOther.UncertainRange != null && this.UncertainRange != null && !tsOther.UncertainRange.IsNull && !this.UncertainRange.IsNull) " is 136.
Long Statement,MARC.Everest.DataTypes,URG,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\URG.cs,Validate,The length of the statement  "	return (NullFlavor != null) ^ ((Low != null || Width != null || High != null || Value != null) && ((LowClosed != null && Low != null) || LowClosed == null) && ((HighClosed != null && High != null) || HighClosed == null)); " is 221.
Long Statement,MARC.Everest.DataTypes,URG,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\URG.cs,Equals,The length of the statement  "		result = base.Equals ((UVP<T>)other) && (other.High != null ? other.High.Equals (this.High) : this.High == null) && other.HighClosed == this.HighClosed && (other.Low != null ? other.Low.Equals (this.Low) : this.Low == null) && other.LowClosed == this.LowClosed && (other.OriginalText != null ? other.OriginalText.Equals (this.OriginalText) : this.OriginalText == null) && (other.Width != null ? other.Width.Equals (this.Width) : this.Width == null); " is 449.
Long Statement,MARC.Everest.DataTypes,UVP,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\UVP.cs,SemanticEquals,The length of the statement  "	return (this.Value == null ? uvOther.Value == null : this.Value.Equals (uvOther.Value)) && (this.Probability == null ? uvOther.Probability == null : this.Probability.Equals (uvOther.Probability)); " is 196.
Long Statement,MARC.Everest.DataTypes.Converters,SimpleSiUnitConverter,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\Converters\SiUnitConverter.cs,CanConvert,The length of the statement  "	bool isSiMeasure = !String.IsNullOrEmpty (GetSiUnit (unitTo).Value) && !String.IsNullOrEmpty (GetSiUnit (from.Unit).Value); " is 123.
Long Statement,MARC.Everest.DataTypes.Converters,SimpleSiUnitConverter,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\Converters\SiUnitConverter.cs,Convert,The length of the statement  "		double oldSiBase = SimpleSiUnitConverter.s_siPrefixes [oldSiData.Key]' newSiBase = SimpleSiUnitConverter.s_siPrefixes [newSiData.Key]; " is 134.
Long Statement,MARC.Everest.Design,DataTypeConverter,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Design\DataTypeConverter.cs,ConvertFrom,The length of the statement  "		if (mi.Name == "op_Implicit" && mi.GetParameters () [0].ParameterType == t.GetGenericArguments () [0] && t.GetGenericArguments () [0].IsEnum) " is 141.
Long Statement,MARC.Everest.Design,DataTypeConverter,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Design\DataTypeConverter.cs,ConvertTo,The length of the statement  "	//    if (mi.Name == "op_Implicit" && mi.GetParameters()[0].ParameterType == t.GetGenericArguments()[0] && t.GetGenericArguments()[0].IsEnum) " is 141.
Long Statement,MARC.Everest.Design,DataTypeConverter,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Design\DataTypeConverter.cs,GetStandardValues,The length of the statement  "		foreach (System.Reflection.FieldInfo fi in t.GetGenericArguments () [0].GetFields (BindingFlags.Public | BindingFlags.Static)) " is 126.
Long Statement,MARC.Everest.Design,NewInstanceTypeEditor,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Design\NewInstanceTypeEditor.cs,CreateControl,The length of the statement  "		if (mi.Name == "op_Implicit" && mi.GetParameters () [0].ParameterType == typeof(System.String) && retVal == null)// Use a text box! " is 131.
Long Statement,MARC.Everest.Design,NewInstanceTypeEditor,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Design\NewInstanceTypeEditor.cs,CreateControl,The length of the statement  "			retVal = AppDomain.CurrentDomain.CreateInstanceAndUnwrap ("System.Windows.Forms' Version=2.0.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089"' "System.Windows.Forms.TextBox"); " is 181.
Long Statement,MARC.Everest.Design,NewInstanceTypeEditor,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Design\NewInstanceTypeEditor.cs,CreateControl,The length of the statement  "		retVal = AppDomain.CurrentDomain.CreateInstanceAndUnwrap ("System.Windows.Forms' Version=2.0.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089"' "System.Windows.Forms.ListBox"); " is 181.
Long Statement,MARC.Everest.Design,NewInstanceTypeEditor,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Design\NewInstanceTypeEditor.cs,CreateControl,The length of the statement  "		retVal = AppDomain.CurrentDomain.CreateInstanceAndUnwrap ("System.Windows.Forms' Version=2.0.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089"' "System.Windows.Forms.ListBox"); " is 181.
Long Statement,MARC.Everest.Design,NewInstanceTypeEditor,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Design\NewInstanceTypeEditor.cs,EditValue,The length of the statement  "	if (provider == null || provider.GetType ().FullName != "System.Windows.Forms.PropertyGridInternal.PropertyDescriptorGridEntry") " is 128.
Long Statement,MARC.Everest.Design,NewInstanceTypeEditor,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Design\NewInstanceTypeEditor.cs,EditValue,The length of the statement  "	object[] propertyAttributes = context.Instance.GetType ().GetProperty (context.PropertyDescriptor.Name).GetCustomAttributes (typeof(PropertyAttribute)' true); " is 158.
Long Statement,MARC.Everest.Design,NewInstanceTypeEditor,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Design\NewInstanceTypeEditor.cs,EditValue,The length of the statement  "	if (lb.GetType ().GetProperty ("SelectedItem") != null && lb.GetType ().GetProperty ("SelectedItem").GetValue (lb' null) == null) " is 129.
Long Statement,MARC.Everest.Design,NewInstanceTypeEditor,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Design\NewInstanceTypeEditor.cs,EditValue,The length of the statement  "	else if (lb.GetType ().GetProperty ("SelectedItem") != null && lb.GetType ().GetProperty ("SelectedItem").GetValue (lb' null).ToString () == "Create new Instance") " is 163.
Long Statement,MARC.Everest.Design,NewInstanceTypeEditor,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Design\NewInstanceTypeEditor.cs,EditValue,The length of the statement  "			value = (selectedItem as CreateTypeReference).Type.Assembly.CreateInstance ((selectedItem as CreateTypeReference).Type.FullName); " is 129.
Long Statement,MARC.Everest.Design,NewInstanceTypeEditor,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Design\NewInstanceTypeEditor.cs,EditValue,The length of the statement  "	else if (lb.GetType ().GetProperty ("Text") != null && lb.GetType ().GetProperty ("Text").GetValue (lb' null).ToString ().Length > 0)// Textual " is 143.
Long Statement,MARC.Everest.Xml,XmlStateReader,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Xml\XmlStateReader.cs,AddFakeAttribute,The length of the statement  "	//throw new InvalidOperationException(String.Format("The fake attribute '{0}' already exists in this state reader."' attributeName)); " is 133.
Long Statement,MARC.Everest.Xml,XmlStateReader,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Xml\XmlStateReader.cs,Read,The length of the statement  "			XmlQualifiedName openName = this.nameStack.Pop ()' thisName = new XmlQualifiedName (innerReader.LocalName' innerReader.NamespaceURI); " is 133.
Long Statement,MARC.Everest.Xml,XmlStateReader,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Xml\XmlStateReader.cs,Read,The length of the statement  "				throw new MARC.Everest.Exceptions.MessageValidationException (String.Format ("XML Processing Error : Start element {0} does not match expected end element {1}"' openName.Name' thisName.Name)); " is 192.
Complex Conditional,MARC.Everest.Connectors,Util,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Connectors\Util.cs,FindConverter,The conditional expression  "mi.GetParameters ().Length == 1 && (mi.ReturnType.IsSubclassOf (destType) || destType == mi.ReturnType) && mi.GetParameters () [0].ParameterType.FullName == sourceType.FullName"  is complex.
Complex Conditional,MARC.Everest.Connectors,Util,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Connectors\Util.cs,TryFromWireFormat,The conditional expression  "value.GetType ().IsGenericType && destType.IsGenericType && destType.GetGenericArguments () [0] != value.GetType ().GetGenericArguments () [0] && destType.GetGenericTypeDefinition () != value.GetType ().GetGenericTypeDefinition ()"  is complex.
Complex Conditional,MARC.Everest.DataTypes,BL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\BL.cs,Implies,The conditional expression  "this == null || other == null || this.IsNull || other.IsNull"  is complex.
Complex Conditional,MARC.Everest.DataTypes,BL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\BL.cs,Implies,The conditional expression  "this == false && other == false || this == true && other == true"  is complex.
Complex Conditional,MARC.Everest.DataTypes,INT,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\INT.cs,SemanticEquals,The conditional expression  "intOther.UncertainRange != null && !intOther.UncertainRange.IsNull && this.UncertainRange != null && !this.UncertainRange.IsNull"  is complex.
Complex Conditional,MARC.Everest.DataTypes,MO,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\MO.cs,SemanticEquals,The conditional expression  "(this.Value == null && otherMo.Value == null || this.Value.Equals (otherMo.Value)) && (this.Currency == null && otherMo.Currency == null || this.Currency.Equals (otherMo.Currency))"  is complex.
Complex Conditional,MARC.Everest.DataTypes,PDV,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\PDV.cs,Equals,The conditional expression  "(other.Value is float? || other.Value is double?) && this.Value != null && other.Value != null"  is complex.
Complex Conditional,MARC.Everest.DataTypes,PQ,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\PQ.cs,SemanticEquals,The conditional expression  "this.UncertainRange != null && !this.UncertainRange.IsNull && pqOther.UncertainRange != null && !pqOther.UncertainRange.IsNull"  is complex.
Complex Conditional,MARC.Everest.DataTypes,REAL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\REAL.cs,SemanticEquals,The conditional expression  "realOther.UncertainRange != null && !realOther.UncertainRange.IsNull && this.UncertainRange != null && !this.UncertainRange.IsNull"  is complex.
Complex Conditional,MARC.Everest.DataTypes,RTO,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\RTO.cs,SemanticEquals,The conditional expression  "rtoOther.Numerator != null && rtoOther.Denominator != null && this.Numerator != null && this.Denominator != null"  is complex.
Complex Conditional,MARC.Everest.DataTypes,SXPR,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\SXPR.cs,TranslateToQSET,The conditional expression  "thisTerm.Equals (lastTerm) || count == 0 || currentQset == null && likeTerms.Count == 1"  is complex.
Complex Conditional,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,SemanticEquals,The conditional expression  "tsOther.UncertainRange != null && this.UncertainRange != null && !tsOther.UncertainRange.IsNull && !this.UncertainRange.IsNull"  is complex.
Complex Conditional,MARC.Everest.Design,DataTypeConverter,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Design\DataTypeConverter.cs,ConvertFrom,The conditional expression  "value == null || context == null || value.ToString ().Length == 0 || value.ToString () == "[No Value]""  is complex.
Complex Conditional,MARC.Everest.Design,DataTypeConverter,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Design\DataTypeConverter.cs,ConvertTo,The conditional expression  "value == null || context == null || value.ToString ().Length == 0 || value.ToString () == "[No Value]""  is complex.
Magic Number,MARC.Everest.Connectors,ConnectionStringParser,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Connectors\ConnectionStringParser.cs,ParseConnectionString,The following statement contains a magic number: foreach (String kvPair in connectionString.Split (';')) {  	string[] kv = kvPair.Split ('=');  	if (kv.Length != 2)  		continue;  	string key = kv [0].ToLower ().Trim ()' value = kv [1].Trim ();  	if (!retVal.ContainsKey (key))  		retVal.Add (key' new List<string> (new string[] {  			value  		}));  	else  		retVal [key].Add (kv [1].Trim ());  }  
Magic Number,MARC.Everest.Connectors,ConnectionStringParser,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Connectors\ConnectionStringParser.cs,ParseConnectionString,The following statement contains a magic number: if (kv.Length != 2)  	continue;  
Magic Number,MARC.Everest.DataTypes,IVL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\IVL.cs,ToSet,The following statement contains a magic number: if (lh.Low is IOrderedDataType<T> && lh.Low is IComparable<T>) {  	SET<T> retVal = new SET<T> (10);  	var current = lh.Low as IOrderedDataType<T>;  	while ((current as IComparable<T>).CompareTo (lh.High) <= (lh.HighClosed == true ? 0 : -1)) {  		retVal.Add ((T)current);  		current = current.NextValue () as IOrderedDataType<T>;  	}  	return retVal;  }  else  	throw new InvalidOperationException (String.Format ("Cannot enumerate '{0}' to construct the resultant set"' typeof(T).FullName));  
Magic Number,MARC.Everest.DataTypes,PQ,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\PQ.cs,ToIVL,The following statement contains a magic number: return new IVL<PQ> (new PQ (min / (decimal)Math.Pow (10' Precision)' this.Unit)' new PQ (max / (decimal)Math.Pow (10' Precision)' this.Unit)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,PQ,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\PQ.cs,ToIVL,The following statement contains a magic number: return new IVL<PQ> (new PQ (min / (decimal)Math.Pow (10' Precision)' this.Unit)' new PQ (max / (decimal)Math.Pow (10' Precision)' this.Unit)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,REAL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\REAL.cs,ToIVL,The following statement contains a magic number: return new IVL<REAL> (min / Math.Pow (10' Precision)' max / Math.Pow (10' Precision)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,REAL,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\REAL.cs,ToIVL,The following statement contains a magic number: return new IVL<REAL> (min / Math.Pow (10' Precision)' max / Math.Pow (10' Precision)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: switch (this.DateValuePrecision) {  case DatePrecision.Year:  	// Year precision : from Jan 1 YEAR to Dec 31 YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Month:  	// Month precision : from MONTH 1 YEAR to MONTH max YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Day:  	// Day precision  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Hour:  // Hour precision  case DatePrecision.HourNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Minute:  // Minute precision  case DatePrecision.MinuteNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Second:  // Second precision  case DatePrecision.SecondNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  default:  	return new IVL<TS> (this' this) {    	};  }  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: switch (this.DateValuePrecision) {  case DatePrecision.Year:  	// Year precision : from Jan 1 YEAR to Dec 31 YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Month:  	// Month precision : from MONTH 1 YEAR to MONTH max YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Day:  	// Day precision  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Hour:  // Hour precision  case DatePrecision.HourNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Minute:  // Minute precision  case DatePrecision.MinuteNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Second:  // Second precision  case DatePrecision.SecondNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  default:  	return new IVL<TS> (this' this) {    	};  }  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: switch (this.DateValuePrecision) {  case DatePrecision.Year:  	// Year precision : from Jan 1 YEAR to Dec 31 YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Month:  	// Month precision : from MONTH 1 YEAR to MONTH max YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Day:  	// Day precision  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Hour:  // Hour precision  case DatePrecision.HourNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Minute:  // Minute precision  case DatePrecision.MinuteNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Second:  // Second precision  case DatePrecision.SecondNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  default:  	return new IVL<TS> (this' this) {    	};  }  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: switch (this.DateValuePrecision) {  case DatePrecision.Year:  	// Year precision : from Jan 1 YEAR to Dec 31 YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Month:  	// Month precision : from MONTH 1 YEAR to MONTH max YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Day:  	// Day precision  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Hour:  // Hour precision  case DatePrecision.HourNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Minute:  // Minute precision  case DatePrecision.MinuteNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Second:  // Second precision  case DatePrecision.SecondNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  default:  	return new IVL<TS> (this' this) {    	};  }  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: switch (this.DateValuePrecision) {  case DatePrecision.Year:  	// Year precision : from Jan 1 YEAR to Dec 31 YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Month:  	// Month precision : from MONTH 1 YEAR to MONTH max YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Day:  	// Day precision  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Hour:  // Hour precision  case DatePrecision.HourNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Minute:  // Minute precision  case DatePrecision.MinuteNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Second:  // Second precision  case DatePrecision.SecondNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  default:  	return new IVL<TS> (this' this) {    	};  }  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: switch (this.DateValuePrecision) {  case DatePrecision.Year:  	// Year precision : from Jan 1 YEAR to Dec 31 YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Month:  	// Month precision : from MONTH 1 YEAR to MONTH max YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Day:  	// Day precision  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Hour:  // Hour precision  case DatePrecision.HourNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Minute:  // Minute precision  case DatePrecision.MinuteNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Second:  // Second precision  case DatePrecision.SecondNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  default:  	return new IVL<TS> (this' this) {    	};  }  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: switch (this.DateValuePrecision) {  case DatePrecision.Year:  	// Year precision : from Jan 1 YEAR to Dec 31 YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Month:  	// Month precision : from MONTH 1 YEAR to MONTH max YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Day:  	// Day precision  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Hour:  // Hour precision  case DatePrecision.HourNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Minute:  // Minute precision  case DatePrecision.MinuteNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Second:  // Second precision  case DatePrecision.SecondNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  default:  	return new IVL<TS> (this' this) {    	};  }  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: switch (this.DateValuePrecision) {  case DatePrecision.Year:  	// Year precision : from Jan 1 YEAR to Dec 31 YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Month:  	// Month precision : from MONTH 1 YEAR to MONTH max YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Day:  	// Day precision  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Hour:  // Hour precision  case DatePrecision.HourNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Minute:  // Minute precision  case DatePrecision.MinuteNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Second:  // Second precision  case DatePrecision.SecondNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  default:  	return new IVL<TS> (this' this) {    	};  }  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: switch (this.DateValuePrecision) {  case DatePrecision.Year:  	// Year precision : from Jan 1 YEAR to Dec 31 YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Month:  	// Month precision : from MONTH 1 YEAR to MONTH max YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Day:  	// Day precision  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Hour:  // Hour precision  case DatePrecision.HourNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Minute:  // Minute precision  case DatePrecision.MinuteNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Second:  // Second precision  case DatePrecision.SecondNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  default:  	return new IVL<TS> (this' this) {    	};  }  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: switch (this.DateValuePrecision) {  case DatePrecision.Year:  	// Year precision : from Jan 1 YEAR to Dec 31 YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Month:  	// Month precision : from MONTH 1 YEAR to MONTH max YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Day:  	// Day precision  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Hour:  // Hour precision  case DatePrecision.HourNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Minute:  // Minute precision  case DatePrecision.MinuteNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Second:  // Second precision  case DatePrecision.SecondNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  default:  	return new IVL<TS> (this' this) {    	};  }  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: switch (this.DateValuePrecision) {  case DatePrecision.Year:  	// Year precision : from Jan 1 YEAR to Dec 31 YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Month:  	// Month precision : from MONTH 1 YEAR to MONTH max YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Day:  	// Day precision  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Hour:  // Hour precision  case DatePrecision.HourNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Minute:  // Minute precision  case DatePrecision.MinuteNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Second:  // Second precision  case DatePrecision.SecondNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  default:  	return new IVL<TS> (this' this) {    	};  }  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: switch (this.DateValuePrecision) {  case DatePrecision.Year:  	// Year precision : from Jan 1 YEAR to Dec 31 YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Month:  	// Month precision : from MONTH 1 YEAR to MONTH max YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Day:  	// Day precision  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Hour:  // Hour precision  case DatePrecision.HourNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Minute:  // Minute precision  case DatePrecision.MinuteNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Second:  // Second precision  case DatePrecision.SecondNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  default:  	return new IVL<TS> (this' this) {    	};  }  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: switch (this.DateValuePrecision) {  case DatePrecision.Year:  	// Year precision : from Jan 1 YEAR to Dec 31 YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Month:  	// Month precision : from MONTH 1 YEAR to MONTH max YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Day:  	// Day precision  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Hour:  // Hour precision  case DatePrecision.HourNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Minute:  // Minute precision  case DatePrecision.MinuteNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Second:  // Second precision  case DatePrecision.SecondNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  default:  	return new IVL<TS> (this' this) {    	};  }  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: switch (this.DateValuePrecision) {  case DatePrecision.Year:  	// Year precision : from Jan 1 YEAR to Dec 31 YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Month:  	// Month precision : from MONTH 1 YEAR to MONTH max YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Day:  	// Day precision  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Hour:  // Hour precision  case DatePrecision.HourNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Minute:  // Minute precision  case DatePrecision.MinuteNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Second:  // Second precision  case DatePrecision.SecondNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  default:  	return new IVL<TS> (this' this) {    	};  }  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: switch (this.DateValuePrecision) {  case DatePrecision.Year:  	// Year precision : from Jan 1 YEAR to Dec 31 YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Month:  	// Month precision : from MONTH 1 YEAR to MONTH max YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Day:  	// Day precision  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Hour:  // Hour precision  case DatePrecision.HourNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Minute:  // Minute precision  case DatePrecision.MinuteNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Second:  // Second precision  case DatePrecision.SecondNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  default:  	return new IVL<TS> (this' this) {    	};  }  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: switch (this.DateValuePrecision) {  case DatePrecision.Year:  	// Year precision : from Jan 1 YEAR to Dec 31 YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Month:  	// Month precision : from MONTH 1 YEAR to MONTH max YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Day:  	// Day precision  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Hour:  // Hour precision  case DatePrecision.HourNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Minute:  // Minute precision  case DatePrecision.MinuteNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Second:  // Second precision  case DatePrecision.SecondNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  default:  	return new IVL<TS> (this' this) {    	};  }  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: switch (this.DateValuePrecision) {  case DatePrecision.Year:  	// Year precision : from Jan 1 YEAR to Dec 31 YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Month:  	// Month precision : from MONTH 1 YEAR to MONTH max YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Day:  	// Day precision  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Hour:  // Hour precision  case DatePrecision.HourNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Minute:  // Minute precision  case DatePrecision.MinuteNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Second:  // Second precision  case DatePrecision.SecondNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  default:  	return new IVL<TS> (this' this) {    	};  }  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: switch (this.DateValuePrecision) {  case DatePrecision.Year:  	// Year precision : from Jan 1 YEAR to Dec 31 YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Month:  	// Month precision : from MONTH 1 YEAR to MONTH max YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Day:  	// Day precision  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Hour:  // Hour precision  case DatePrecision.HourNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Minute:  // Minute precision  case DatePrecision.MinuteNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Second:  // Second precision  case DatePrecision.SecondNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  default:  	return new IVL<TS> (this' this) {    	};  }  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: switch (this.DateValuePrecision) {  case DatePrecision.Year:  	// Year precision : from Jan 1 YEAR to Dec 31 YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Month:  	// Month precision : from MONTH 1 YEAR to MONTH max YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Day:  	// Day precision  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Hour:  // Hour precision  case DatePrecision.HourNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Minute:  // Minute precision  case DatePrecision.MinuteNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Second:  // Second precision  case DatePrecision.SecondNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  default:  	return new IVL<TS> (this' this) {    	};  }  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: switch (this.DateValuePrecision) {  case DatePrecision.Year:  	// Year precision : from Jan 1 YEAR to Dec 31 YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Month:  	// Month precision : from MONTH 1 YEAR to MONTH max YEAR  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Day:  	// Day precision  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Hour:  // Hour precision  case DatePrecision.HourNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Minute:  // Minute precision  case DatePrecision.MinuteNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  case DatePrecision.Second:  // Second precision  case DatePrecision.SecondNoTimezone:  	return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 999)' DatePrecision.Full)) {  		LowClosed = true'  		HighClosed = true  	};  default:  	return new IVL<TS> (this' this) {    	};  }  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' 1' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' 12' 31' 23' 59' 59' 999)' DatePrecision.Full)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' 1' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' maxMonth' 23' 59' 59' 999)' DatePrecision.Full)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 0' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' 23' 59' 59' 999)' DatePrecision.Full)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 0' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' 59' 59' 999)' DatePrecision.Full)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 0' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' 59' 999)' DatePrecision.Full)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.DataTypes,TS,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\TS.cs,ToIVL,The following statement contains a magic number: return new IVL<TS> (new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 0)' DatePrecision.Full)' new TS (new DateTime (this.DateValue.Year' this.DateValue.Month' this.DateValue.Day' this.DateValue.Hour' this.DateValue.Minute' this.DateValue.Second' 999)' DatePrecision.Full)) {  	LowClosed = true'  	HighClosed = true  };  
Magic Number,MARC.Everest.Xml,XmlStateReader,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Xml\XmlStateReader.cs,XmlStateReader,The following statement contains a magic number: nameStack = new Stack<XmlQualifiedName> (100);  
Missing Default,MARC.Everest.DataTypes,ED,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\ED.cs,ComputeIntegrityCheck,The following switch statement is missing a default case: switch (algorithm) {  case EncapsulatedDataIntegrityAlgorithm.SHA256:  	SHA256Managed sha256 = new SHA256Managed ();  	return sha256.ComputeHash (data);  case EncapsulatedDataIntegrityAlgorithm.SHA1:  	SHA1Managed sha1 = new SHA1Managed ();  	return sha1.ComputeHash (data);  }  
Missing Default,MARC.Everest.DataTypes,SXPR,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\DataTypes\SXPR.cs,TranslateToQSETInternal,The following switch statement is missing a default case: switch (operation) {  case SetOperator.Exclusive:// difference   {  	// QSD must be broken into groups of two  	int iofs = 0;  	QSD<T> diffSet = null;  	if (context == null)// Null' then the minuend is our first term  	 {  		diffSet = new QSD<T> (collectedTerms [0].TranslateToQSetComponent ()' null);  		iofs = 1;  	}  	else  		// Not' then the current QSET is the minuend  		diffSet = new QSD<T> (context' null);  	for (int i = iofs; i < collectedTerms.Count; i++) {  		diffSet.Subtrahend = collectedTerms [i].TranslateToQSetComponent ();  		if (i + 1 < collectedTerms.Count)  			// We need to make a new QSD where this is the minuend  			diffSet = new QSD<T> (diffSet' null);  	}  	context = diffSet;  	break;  }  case SetOperator.Inclusive:// union is pretty easy   {  	QSU<T> unionSet = new QSU<T> ();  	bool isQssCandidate = true;  	if (context != null) {  		isQssCandidate &= (context is QSS<T>) && (context as QSS<T>).Count () == 1;  		unionSet.Add (context);  	}  	foreach (var itm in collectedTerms) {  		var qsuItem = itm.TranslateToQSetComponent ();  		isQssCandidate &= (qsuItem is QSS<T>) && (qsuItem as QSS<T>).Count () == 1;  		unionSet.Add (qsuItem);  	}  	// Is the union set composed entirely of QSS instances with one item?  	if (isQssCandidate) {  		var qssSet = new QSS<T> ();  		foreach (var itm in unionSet)  			qssSet.Add ((itm as QSS<T>).First ());  		context = qssSet;  	}  	else  		context = unionSet;  	break;  }  case SetOperator.Intersect:// intersect' also pretty easy   {  	QSI<T> intersectSet = new QSI<T> ();  	if (context != null)  		intersectSet.Add (context);  	foreach (var itm in collectedTerms)  		intersectSet.Add (itm.TranslateToQSetComponent ());  	context = intersectSet;  	break;  }  case SetOperator.PeriodicHull:// periodic hull' same as difference   {  	// QSP must be broken into groups of two  	int iofs = 0;  	QSP<T> periodSet = null;  	if (context == null)// Null' then the minuend is our first term  	 {  		periodSet = new QSP<T> (collectedTerms [0].TranslateToQSetComponent ()' null);  		iofs = 1;  	}  	else  		// Not' then the current QSET is the minuend  		periodSet = new QSP<T> (context' null);  	for (int i = iofs; i < collectedTerms.Count; i++) {  		periodSet.High = collectedTerms [i].TranslateToQSetComponent ();  		if (i + 1 < collectedTerms.Count)  			// We need to make a new QSD where this is the minuend  			periodSet = new QSP<T> (periodSet' null);  	}  	context = periodSet;  	break;  }  case SetOperator.Hull:// convex hull   {  	throw new InvalidOperationException ("Cannot represent a HULL value");  }  }  
Missing Default,MARC.Everest.Xml,XmlStateReader,C:\repos\cdaapi_cdaapi_everest_CDA\MARC.Everest\Xml\XmlStateReader.cs,Read,The following switch statement is missing a default case: switch (innerReader.NodeType) {  case XmlNodeType.Element:  	fakeAttributes.Clear ();  	// clear fake attributes  	if (!innerReader.IsEmptyElement)  		// push only if the element isn't empty  		this.nameStack.Push (new XmlQualifiedName (innerReader.LocalName' innerReader.NamespaceURI));  	break;  case XmlNodeType.EndElement:  	XmlQualifiedName openName = this.nameStack.Pop ()' thisName = new XmlQualifiedName (innerReader.LocalName' innerReader.NamespaceURI);  	if (thisName.Name != openName.Name)  		throw new MARC.Everest.Exceptions.MessageValidationException (String.Format ("XML Processing Error : Start element {0} does not match expected end element {1}"' openName.Name' thisName.Name));  	break;  }  
