Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Thinktecture.IdentityModel.WinRT,WebAuthentication,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel.45\Samples\Web API Security\Clients\WinStoreClient\Thinktecture.IdentityModel.WinRT\WebAuthentication.cs,DoImplicitFlowAsync,The length of the statement  "	return await DoImplicitFlowAsync (endpoint' clientId' scope' WebAuthenticationBroker.GetCurrentApplicationCallbackUri ()); " is 122.
Long Statement,Thinktecture.IdentityModel.WinRT,WebAuthentication,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel.45\Samples\Web API Security\Clients\WinStoreClient\Thinktecture.IdentityModel.WinRT\WebAuthentication.cs,DoImplicitFlowAsync,The length of the statement  "	var startUri = new Uri (string.Format ("{0}?client_id={1}&scope={2}&redirect_uri={3}&response_type=token"' endpoint.AbsoluteUri' Uri.EscapeDataString (clientId)' Uri.EscapeDataString (scope)' Uri.EscapeDataString (callbackUri.AbsoluteUri))); " is 241.
Empty Catch Block,Thinktecture.IdentityModel.WinRT,TokenVault,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel.45\Samples\Web API Security\Clients\WinStoreClient\Thinktecture.IdentityModel.WinRT\TokenVault.cs,TryGetToken,The method has an empty catch block.
Magic Number,Thinktecture.IdentityModel.WinRT,WebAuthentication,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel.45\Samples\Web API Security\Clients\WinStoreClient\Thinktecture.IdentityModel.WinRT\WebAuthentication.cs,ParseImplicitResponse,The following statement contains a magic number: foreach (var param in qparams) {  	var parts = param.Split ('=');  	if (parts.Length == 2) {  		if (parts [0].Equals ("access_token"' StringComparison.Ordinal)) {  			response.AccessToken = parts [1];  		} else if (parts [0].Equals ("expires_in"' StringComparison.Ordinal)) {  			var expiresIn = int.Parse (parts [1]);  			var expiresInDateTime = DateTime.UtcNow.AddSeconds (expiresIn);  			var epoch = expiresInDateTime.ToEpochTime ();  			response.ExpiresIn = (int)epoch;  		}  	} else {  		throw new InvalidOperationException ("Malformed token response.");  	}  }  
Magic Number,Thinktecture.IdentityModel.WinRT,WebAuthentication,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel.45\Samples\Web API Security\Clients\WinStoreClient\Thinktecture.IdentityModel.WinRT\WebAuthentication.cs,ParseImplicitResponse,The following statement contains a magic number: if (parts.Length == 2) {  	if (parts [0].Equals ("access_token"' StringComparison.Ordinal)) {  		response.AccessToken = parts [1];  	} else if (parts [0].Equals ("expires_in"' StringComparison.Ordinal)) {  		var expiresIn = int.Parse (parts [1]);  		var expiresInDateTime = DateTime.UtcNow.AddSeconds (expiresIn);  		var epoch = expiresInDateTime.ToEpochTime ();  		response.ExpiresIn = (int)epoch;  	}  } else {  	throw new InvalidOperationException ("Malformed token response.");  }  
Magic Number,Thinktecture.IdentityModel.Extensions,DateTimeExtensions,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel.45\Samples\Web API Security\Clients\WinStoreClient\Thinktecture.IdentityModel.WinRT\DateTimeExtensions.cs,ToDateTimeFromEpoch,The following statement contains a magic number: return new DateTime (1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).AddSeconds (intDate);  
Magic Number,Thinktecture.IdentityModel.Extensions,DateTimeExtensions,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel.45\Samples\Web API Security\Clients\WinStoreClient\Thinktecture.IdentityModel.WinRT\DateTimeExtensions.cs,ToDateTimeOffsetFromEpoch,The following statement contains a magic number: return new DateTimeOffset (1970' 1' 1' 0' 0' 0' TimeSpan.Zero).AddSeconds (intDate);  
