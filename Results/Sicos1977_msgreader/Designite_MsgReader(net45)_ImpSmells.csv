Implementation smell,Namespace,Class,File,Method,Description
Long Method,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The method has 160 lines of code.
Long Method,MsgReader.Helpers,MimeType,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\MimeType.cs,GetExtensionFromMimeType,The method has 424 lines of code.
Long Method,MsgReader.Mime.Decode,Rfc2231Decoder,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\Rfc2231Decoder.cs,DecodePairs,The method has 105 lines of code.
Long Method,MsgReader.Mime.Decode,Rfc2822DateTime,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\Rfc2822DateTime.cs,MatchEvaluator,The method has 116 lines of code.
Long Method,MsgReader.Mime.Header,MessageHeader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Header\MessageHeader.cs,ParseHeader,The method has 130 lines of code.
Long Method,MsgReader.Outlook,Appointment,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Appointment.cs,Appointment,The method has 138 lines of code.
Long Method,MsgReader.Outlook,Contact,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Contact.cs,Contact,The method has 132 lines of code.
Long Method,MsgReader.Outlook,RecipientRow,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,RecipientRow,The method has 197 lines of code.
Long Method,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,ExtractMsgEmailHeader,The method has 127 lines of code.
Long Method,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,WriteEmlStreamEmail,The method has 107 lines of code.
Long Method,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,WriteMsgAppointment,The method has 128 lines of code.
Long Method,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,WriteMsgTask,The method has 130 lines of code.
Long Method,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,WriteMsgContact,The method has 262 lines of code.
Long Method,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,PreProcessMsgFile,The method has 167 lines of code.
Long Method,MsgReader.Rtf,DocumentWriter,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DocumentWriter.cs,WriteStartDocument,The method has 171 lines of code.
Long Method,MsgReader.Rtf,DocumentWriter,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DocumentWriter.cs,WriteStartString,The method has 101 lines of code.
Long Method,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,Load,The method has 1099 lines of code.
Long Method,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,AddContentElement,The method has 113 lines of code.
Long Method,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,CombineTable,The method has 107 lines of code.
Long Method,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,UpdateTableCells,The method has 334 lines of code.
Long Method,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadHtmlContent,The method has 199 lines of code.
Complex Method,MsgReader.Helpers,DateDifference,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\DateDifference.cs,ToString,Cyclomatic complexity of the method is 22
Complex Method,MsgReader.Helpers,DateDifference,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\DateDifference.cs,Difference,Cyclomatic complexity of the method is 37
Complex Method,MsgReader.Helpers,MimeType,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\MimeType.cs,GetExtensionFromMimeType,Cyclomatic complexity of the method is 205
Complex Method,MsgReader.Mime.Decode,Rfc2231Decoder,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\Rfc2231Decoder.cs,DecodePairs,Cyclomatic complexity of the method is 10
Complex Method,MsgReader.Mime.Decode,Rfc2822DateTime,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\Rfc2822DateTime.cs,MatchEvaluator,Cyclomatic complexity of the method is 36
Complex Method,MsgReader.Mime.Decode,UUEncode,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\UUEncode.cs,Decode,Cyclomatic complexity of the method is 8
Complex Method,MsgReader.Mime.Header,HeaderFieldParser,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Header\HeaderFieldParser.cs,ParseContentTransferEncoding,Cyclomatic complexity of the method is 8
Complex Method,MsgReader.Mime.Header,HeaderFieldParser,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Header\HeaderFieldParser.cs,ParseContentType,Cyclomatic complexity of the method is 9
Complex Method,MsgReader.Mime.Header,HeaderFieldParser,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Header\HeaderFieldParser.cs,ParseContentDisposition,Cyclomatic complexity of the method is 11
Complex Method,MsgReader.Mime.Header,MessageHeader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Header\MessageHeader.cs,ParseHeader,Cyclomatic complexity of the method is 26
Complex Method,MsgReader.Mime,Message,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Message.cs,Message,Cyclomatic complexity of the method is 8
Complex Method,MsgReader.Mime,Message,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Message.cs,GetEmailAddresses,Cyclomatic complexity of the method is 12
Complex Method,MsgReader.Mime,MessagePart,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\MessagePart.cs,FindFileName,Cyclomatic complexity of the method is 8
Complex Method,MsgReader.Outlook,Storage,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Appointment.cs,GetMapiPropertyFromStreamOrStorage,Cyclomatic complexity of the method is 12
Complex Method,MsgReader.Outlook,Storage,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Appointment.cs,GetMapiPropertyFromPropertyStream,Cyclomatic complexity of the method is 9
Complex Method,MsgReader.Outlook,Appointment,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Appointment.cs,Appointment,Cyclomatic complexity of the method is 23
Complex Method,MsgReader.Outlook,Attachment,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Attachment.cs,Attachment,Cyclomatic complexity of the method is 10
Complex Method,MsgReader.Outlook,Contact,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Contact.cs,Contact,Cyclomatic complexity of the method is 21
Complex Method,MsgReader.Outlook,MapiTagMapper,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTagMapper.cs,GetMapping,Cyclomatic complexity of the method is 8
Complex Method,MsgReader.Outlook,Message,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Message.cs,LoadStorage,Cyclomatic complexity of the method is 16
Complex Method,MsgReader.Outlook,Message,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Message.cs,ProcessSignedContent,Cyclomatic complexity of the method is 8
Complex Method,MsgReader.Outlook,Message,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Message.cs,SetEmailSenderAndRepresentingSender,Cyclomatic complexity of the method is 18
Complex Method,MsgReader.Outlook,Message,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Message.cs,GetEmailSender,Cyclomatic complexity of the method is 13
Complex Method,MsgReader.Outlook,Message,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Message.cs,GetEmailRecipients,Cyclomatic complexity of the method is 9
Complex Method,MsgReader.Outlook,Message,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Message.cs,GetEmailRecipients,Cyclomatic complexity of the method is 9
Complex Method,MsgReader.Outlook,Recipient,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Recipient.cs,Recipient,Cyclomatic complexity of the method is 12
Complex Method,MsgReader.Outlook,RtfDecompressor,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\RtfDecompressor.cs,DecompressRtf,Cyclomatic complexity of the method is 10
Complex Method,MsgReader.Outlook,Task,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Task.cs,Task,Cyclomatic complexity of the method is 8
Complex Method,MsgReader.Outlook,RecipientRow,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,RecipientRow,Cyclomatic complexity of the method is 41
Complex Method,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,CheckFileNameAndOutputFolder,Cyclomatic complexity of the method is 9
Complex Method,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,ExtractToFolder,Cyclomatic complexity of the method is 9
Complex Method,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,ExtractMsgEmailHeader,Cyclomatic complexity of the method is 9
Complex Method,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,ExtractMsgEmailHeader,Cyclomatic complexity of the method is 18
Complex Method,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,WriteEmlStreamEmail,Cyclomatic complexity of the method is 11
Complex Method,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,WriteEmlEmail,Cyclomatic complexity of the method is 10
Complex Method,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,WriteMsgAppointment,Cyclomatic complexity of the method is 12
Complex Method,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,WriteMsgTask,Cyclomatic complexity of the method is 15
Complex Method,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,WriteMsgContact,Cyclomatic complexity of the method is 45
Complex Method,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,PreProcessMsgFile,Cyclomatic complexity of the method is 21
Complex Method,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,PreProcessEmlStream,Cyclomatic complexity of the method is 8
Complex Method,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,PreProcessEmlFile,Cyclomatic complexity of the method is 9
Complex Method,MsgReader.Rtf,DocumentFormatInfo,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DocumentFormatInfo.cs,EqualsSettings,Cyclomatic complexity of the method is 33
Complex Method,MsgReader.Rtf,DocumentWriter,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DocumentWriter.cs,WriteStartDocument,Cyclomatic complexity of the method is 25
Complex Method,MsgReader.Rtf,DocumentWriter,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DocumentWriter.cs,WriteStartParagraph,Cyclomatic complexity of the method is 11
Complex Method,MsgReader.Rtf,DocumentWriter,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DocumentWriter.cs,WriteFont,Cyclomatic complexity of the method is 8
Complex Method,MsgReader.Rtf,DocumentWriter,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DocumentWriter.cs,WriteStartString,Cyclomatic complexity of the method is 20
Complex Method,MsgReader.Rtf,DocumentWriter,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DocumentWriter.cs,WriteEndString,Cyclomatic complexity of the method is 9
Complex Method,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,Load,Cyclomatic complexity of the method is 242
Complex Method,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,FixElements,Cyclomatic complexity of the method is 13
Complex Method,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,AddContentElement,Cyclomatic complexity of the method is 22
Complex Method,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,CombineTable,Cyclomatic complexity of the method is 22
Complex Method,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,UpdateTableCells,Cyclomatic complexity of the method is 69
Complex Method,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadListOverrideTable,Cyclomatic complexity of the method is 10
Complex Method,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadListTable,Cyclomatic complexity of the method is 23
Complex Method,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadFontTable,Cyclomatic complexity of the method is 16
Complex Method,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadColorTable,Cyclomatic complexity of the method is 8
Complex Method,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadDocumentInfo,Cyclomatic complexity of the method is 10
Complex Method,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadDateTime,Cyclomatic complexity of the method is 8
Complex Method,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadDomObject,Cyclomatic complexity of the method is 22
Complex Method,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadDomField,Cyclomatic complexity of the method is 16
Complex Method,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadInnerText,Cyclomatic complexity of the method is 9
Complex Method,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ToDomString,Cyclomatic complexity of the method is 9
Complex Method,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadHtmlContent,Cyclomatic complexity of the method is 40
Complex Method,MsgReader.Rtf,Lex,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\Lex.cs,ParseKeyword,Cyclomatic complexity of the method is 11
Complex Method,MsgReader.Rtf,NodeGroup,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\NodeGroup.cs,MergeText,Cyclomatic complexity of the method is 11
Complex Method,MsgReader.Rtf,RawDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\RawDocument.cs,ReadFontTable,Cyclomatic complexity of the method is 10
Complex Method,MsgReader.Rtf,RawDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\RawDocument.cs,ReadColorTable,Cyclomatic complexity of the method is 8
Complex Method,MsgReader.Rtf,RawDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\RawDocument.cs,Load,Cyclomatic complexity of the method is 13
Complex Method,MsgReader.Rtf,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\Reader.cs,ReadToken,Cyclomatic complexity of the method is 8
Complex Method,MsgReader.Rtf,TextContainer,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\TextContainer.cs,Accept,Cyclomatic complexity of the method is 14
Long Parameter List,MsgReader.Outlook,RecipientRow,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,RecipientRow,The method has 10 parameters. Parameters: binaryReader' addressType' supportsRtf' displayNameIncluded' emailAddressIncluded' addressTypeIncluded' simpleDisplayNameIncluded' transmittableDisplayNameSameAsDisplayName' transmittableDisplayNameIncluded' stringsInUnicode
Long Parameter List,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,ExtractToFolder,The method has 5 parameters. Parameters: inputFile' outputFolder' hyperlinks' messageType' logStream
Long Parameter List,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,WriteHeaderLine,The method has 5 parameters. Parameters: header' htmlBody' labelPadRightWidth' label' text
Long Parameter List,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,WriteHeaderLineNoEncoding,The method has 5 parameters. Parameters: header' htmlBody' labelPadRightWidth' label' text
Long Parameter List,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,PreProcessMsgFile,The method has 9 parameters. Parameters: message' hyperlinks' outputFolder' fileName' htmlBody' body' contactPhotoFileName' attachments' files
Long Parameter List,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,PreProcessEmlStream,The method has 6 parameters. Parameters: message' hyperlinks' htmlBody' body' attachments' attachStreams
Long Parameter List,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,PreProcessEmlFile,The method has 8 parameters. Parameters: message' hyperlinks' outputFolder' fileName' htmlBody' body' attachments' files
Long Parameter List,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadInnerText,The method has 5 parameters. Parameters: reader' firstToken' deeply' breakMeetControlWord' htmlMode
Long Parameter List,MsgReader.Rtf,AnsiEncoding,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,GetBytes,The method has 5 parameters. Parameters: chars' charIndex' charCount' bytes' byteIndex
Long Parameter List,MsgReader.Rtf,AnsiEncoding,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,GetChars,The method has 5 parameters. Parameters: bytes' byteIndex' byteCount' chars' charIndex
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ALTERNATE_RECIPIENT_ALLOWED is 30.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_CONTENT_CONFIDENTIALITY_ALGORITHM_ID is 39.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_CONVERSION_WITH_LOSS_PROHIBITED is 34.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_IMPLICIT_CONVERSION_PROHIBITED is 33.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINALLY_INTENDED_RECIPIENT_NAME is 37.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINATOR_DELIVERY_REPORT_REQUESTED is 39.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_PROOF_OF_SUBMISSION_REQUESTED is 32.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_RECIPIENT_REASSIGNMENT_PROHIBITED is 36.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_SENT_REPRESENTING_SEARCH_KEY is 31.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_RCVD_REPRESENTING_SEARCH_KEY is 31.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINAL_SENT_REPRESENTING_NAME is 34.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINAL_SENT_REPRESENTING_NAME_W is 36.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINAL_SENT_REPRESENTING_NAME_A is 36.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINAL_SENT_REPRESENTING_ENTRYID is 37.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINAL_SENT_REPRESENTING_SEARCH_KEY is 40.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_SENT_REPRESENTING_ADDRTYPE_W is 31.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_SENT_REPRESENTING_ADDRTYPE_A is 31.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_SENT_REPRESENTING_EMAIL_ADDRESS is 34.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_SENT_REPRESENTING_EMAIL_ADDRESS_W is 36.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_SENT_REPRESENTING_EMAIL_ADDRESS_A is 36.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINAL_SENDER_EMAIL_ADDRESS is 32.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINAL_SENDER_EMAIL_ADDRESS_W is 34.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINAL_SENDER_EMAIL_ADDRESS_A is 34.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINAL_SENT_REPRESENTING_ADDRTYPE is 38.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINAL_SENT_REPRESENTING_ADDRTYPE_W is 40.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINAL_SENT_REPRESENTING_ADDRTYPE_A is 40.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINAL_SENT_REPRESENTING_EMAIL_ADDRESS is 43.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINAL_SENT_REPRESENTING_EMAIL_ADDRESS_W is 45.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINAL_SENT_REPRESENTING_EMAIL_ADDRESS_A is 45.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_RECEIVED_BY_EMAIL_ADDRESS_W is 30.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_RECEIVED_BY_EMAIL_ADDRESS_A is 30.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_RCVD_REPRESENTING_ADDRTYPE_W is 31.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_RCVD_REPRESENTING_ADDRTYPE_A is 31.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_RCVD_REPRESENTING_EMAIL_ADDRESS is 34.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_RCVD_REPRESENTING_EMAIL_ADDRESS_W is 36.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_RCVD_REPRESENTING_EMAIL_ADDRESS_A is 36.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINAL_AUTHOR_EMAIL_ADDRESS is 32.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINAL_AUTHOR_EMAIL_ADDRESS_W is 34.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINAL_AUTHOR_EMAIL_ADDRESS_A is 34.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINALLY_INTENDED_RECIP_ADDRTYPE is 37.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINALLY_INTENDED_RECIP_ADDRTYPE_W is 39.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINALLY_INTENDED_RECIP_ADDRTYPE_A is 39.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINALLY_INTENDED_RECIP_EMAIL_ADDRESS is 42.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINALLY_INTENDED_RECIP_EMAIL_ADDRESS_W is 44.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINALLY_INTENDED_RECIP_EMAIL_ADDRESS_A is 44.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_TRANSPORT_MESSAGE_HEADERS_W is 30.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_TRANSPORT_MESSAGE_HEADERS_A is 30.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINATOR_AND_DL_EXPANSION_HISTORY is 38.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINALLY_INTENDED_RECIP_ENTRYID is 36.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_NON_RECEIPT_NOTIFICATION_REQUESTED is 37.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINATOR_NON_DELIVERY_REPORT_REQUESTED is 43.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINATOR_REQUESTED_ALTERNATE_RECIPIENT is 43.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_PHYSICAL_DELIVERY_BUREAU_FAX_DELIVERY is 40.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_PHYSICAL_DELIVERY_REPORT_REQUEST is 35.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_PHYSICAL_FORWARDING_ADDRESS is 30.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_PHYSICAL_FORWARDING_ADDRESS_REQUESTED is 40.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_PHYSICAL_FORWARDING_PROHIBITED is 33.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_PHYSICAL_RENDITION_ATTRIBUTES is 32.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_PROOF_OF_DELIVERY_REQUESTED is 30.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_RECIPIENT_NUMBER_FOR_ADVICE is 30.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_RECIPIENT_NUMBER_FOR_ADVICE_W is 32.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_RECIPIENT_NUMBER_FOR_ADVICE_A is 32.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ORIGINATING_MTA_CERTIFICATE is 30.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_CALLBACK_TELEPHONE_NUMBER_W is 30.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_CALLBACK_TELEPHONE_NUMBER_A is 30.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_BUSINESS_TELEPHONE_NUMBER_W is 30.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_BUSINESS_TELEPHONE_NUMBER_A is 30.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_BUSINESS2_TELEPHONE_NUMBER_W is 31.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_BUSINESS2_TELEPHONE_NUMBER_A is 31.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_CELLULAR_TELEPHONE_NUMBER_W is 30.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_CELLULAR_TELEPHONE_NUMBER_A is 30.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_TRANSMITABLE_DISPLAY_NAME_W is 30.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_TRANSMITABLE_DISPLAY_NAME_A is 30.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_BUSINESS_ADDRESS_STATE_OR_PROVINCE is 37.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_BUSINESS_ADDRESS_STATE_OR_PROVINCE_W is 39.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_BUSINESS_ADDRESS_STATE_OR_PROVINCE_A is 39.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_BUSINESS_ADDRESS_POSTAL_CODE is 31.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_BUSINESS_ADDRESS_POSTAL_CODE_W is 33.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_BUSINESS_ADDRESS_POSTAL_CODE_A is 33.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_BUSINESS_ADDRESS_POST_OFFICE_BOX is 35.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_BUSINESS_ADDRESS_POST_OFFICE_BOX_W is 37.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_BUSINESS_ADDRESS_POST_OFFICE_BOX_A is 37.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ASSISTANT_TELEPHONE_NUMBER_W is 31.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_ASSISTANT_TELEPHONE_NUMBER_A is 31.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_CONTACT_DEFAULT_ADDRESS_INDEX is 32.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_COMPANY_MAIN_PHONE_NUMBER_W is 30.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_COMPANY_MAIN_PHONE_NUMBER_A is 30.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_HOME_ADDRESS_STATE_OR_PROVINCE is 33.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_HOME_ADDRESS_STATE_OR_PROVINCE_W is 35.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_HOME_ADDRESS_STATE_OR_PROVINCE_A is 35.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_HOME_ADDRESS_POST_OFFICE_BOX is 31.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_HOME_ADDRESS_POST_OFFICE_BOX_W is 33.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_HOME_ADDRESS_POST_OFFICE_BOX_A is 33.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_OTHER_ADDRESS_POSTAL_CODE_W is 30.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_OTHER_ADDRESS_POSTAL_CODE_A is 30.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_OTHER_ADDRESS_STATE_OR_PROVINCE is 34.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_OTHER_ADDRESS_STATE_OR_PROVINCE_W is 36.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_OTHER_ADDRESS_STATE_OR_PROVINCE_A is 36.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_OTHER_ADDRESS_POST_OFFICE_BOX is 32.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_OTHER_ADDRESS_POST_OFFICE_BOX_W is 34.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_OTHER_ADDRESS_POST_OFFICE_BOX_A is 34.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_X400_DEFERRED_DELIVERY_CANCEL is 32.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PropertiesStreamHeaderEmbedded is 30.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PropertiesStreamHeaderAttachOrRecip is 35.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter AppointmentUnsendableRecipients is 31.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_SENT_REPRESENTING_SMTP_ADDRESS is 33.
Long Identifier,MsgReader.Outlook,MapiTags,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTags.cs,,The length of the parameter PR_CONVERSATION_INDEX_TRACKING is 30.
Long Identifier,MsgReader.Outlook,RecipientRow,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,RecipientRow,The length of the parameter transmittableDisplayNameSameAsDisplayName is 41.
Long Identifier,MsgReader.Outlook,RecipientRow,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,RecipientRow,The length of the parameter transmittableDisplayNameIncluded is 32.
Long Statement,MsgReader.Helpers,FileManager,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileManager.cs,RemoveInvalidFileNameChars,The length of the statement  "            return Path.GetInvalidFileNameChars().Aggregate(fileName' (current' c) => current.Replace(c.ToString(CultureInfo.InvariantCulture)' string.Empty)); " is 147.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0xD0' 0xCF' 0x11' 0xE0' 0xA1' 0xB1' 0x1A' 0xE1 }' MicroSoftOffice' "Microsoft Office applications (Word' Powerpoint' Excel' Works)")); " is 182.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x50' 0x4B }' ZipOrOffice2007' "Zip or Microsoft Office 2007' 2010 or 2013 document")); " is 135.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0xC5' 0x00' 0x00' 0x00' 0x00' 0x00' 0x0D }' "cold"' "FileNet COLD document")); " is 126.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(Stb("# Microsoft Developer Studio")' "dsp"' "Microsoft Developer Studio project file")); " is 123.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x00' 0x01' 0x00' 0x00' 0x53' 0x74' 0x61' 0x6E' 0x64' 0x61' 0x72' 0x64' 0x20' 0x4A' 0x65' 0x74' 0x20' 0x44' 0x42 }' "mdb"' "Microsoft Access file")); " is 197.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x00' 0x01' 0x00' 0x00' 0x53' 0x74' 0x61' 0x6E' 0x64' 0x61' 0x72' 0x64' 0x20' 0x41' 0x43' 0x45' 0x20' 0x44' 0x42 }' "accdb"' "Microsoft Access 2007 file")); " is 204.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x9C' 0xCB' 0xCB' 0x8D' 0x13' 0x75' 0xD2' 0x11' 0x91' 0x58' 0x00' 0xC0' 0x4F' 0x79' 0x56' 0xA4 }' "wab"' "Outlook address file")); " is 178.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x50' 0x4B' 0x03' 0x04' 0x14' 0x00' 0x01' 0x00 }' "zip"' "ZLock Pro encrypted ZIP")); " is 133.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x37' 0x7A' 0xBC' 0xAF' 0x27' 0x1C }' "7z"' "7-Zip compressed file")); // 7Z zip formaat	 " is 136.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(Stb("PKSFX")' "zip"' "PKSFX self-extracting executable compressed file (see also PKZIP)")); " is 126.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(Stb("<?xml version=\"1.0\" encoding=\"utf-16\"")' "xml"' "XML File (UTF16 encoding)")); " is 122.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(Stb("<?xml version=\"1.0\" encoding=\"utf-8\"")' "xml"' "XML File (UTF8 encoding)")); " is 120.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(Stb("<?xml version=\"1.0\" encoding=\"utf-7\"")' "xml"' "XML File (UTF7 encoding)")); " is 120.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x52' 0x65' 0x74' 0x75' 0x72' 0x6E' 0x2D' 0x50' 0x61' 0x74' 0x68' 0x3A' 0x20 }' "eml"' "A commmon file extension for e-mail files")); " is 181.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x46' 0x72' 0x6F' 0x6D' 0x20' 0x3F' 0x3F' 0x3F }' "eml"' "E-mail markup language file")); " is 137.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x46' 0x72' 0x6F' 0x6D' 0x20' 0x20' 0x20 }' "eml"' "E-mail markup language file")); " is 131.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x46' 0x72' 0x6F' 0x6D' 0x3A' 0x20 }' "eml"' "E-mail markup language file")); " is 125.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x4D' 0x4D' 0x00' 0x2B }' "tif"' "BigTIFF files; Tagged Image File Format files > 4 GB")); " is 138.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x4D' 0x4D' 0x00' 0x2A }' "tif"' "Tagged Image File Format file (big endian' i.e.' LSB last in the byte; Motorola)")); " is 166.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x49' 0x49' 0x2A' 0x00 }' "tif"' "Tagged Image File Format file (little endian' i.e.' LSB first in the byte; Intel)")); " is 167.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x41' 0x43' 0x31' 0x30' 0x30' 0x32 }' "dwg"' "Generic AutoCAD drawing - AutoCAD R2.5")); " is 136.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x41' 0x43' 0x31' 0x30' 0x30' 0x33 }' "dwg"' "Generic AutoCAD drawing - AutoCAD R2.6")); " is 136.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x41' 0x43' 0x31' 0x30' 0x30' 0x34 }' "dwg"' "Generic AutoCAD drawing - AutoCAD R9")); " is 134.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x41' 0x43' 0x31' 0x30' 0x30' 0x36 }' "dwg"' "Generic AutoCAD drawing - AutoCAD R10")); " is 135.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x41' 0x43' 0x31' 0x30' 0x30' 0x39 }' "dwg"' "Generic AutoCAD drawing - AutoCAD R11/R12")); " is 139.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x41' 0x43' 0x31' 0x30' 0x31' 0x30 }' "dwg"' "Generic AutoCAD drawing - AutoCAD R13 (subtype 10)")); " is 148.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x41' 0x43' 0x31' 0x30' 0x31' 0x31 }' "dwg"' "Generic AutoCAD drawing - AutoCAD R13 (subtype 11)")); " is 148.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x41' 0x43' 0x31' 0x30' 0x31' 0x32 }' "dwg"' "Generic AutoCAD drawing - AutoCAD R13 (subtype 12)")); " is 148.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x41' 0x43' 0x31' 0x30' 0x31' 0x33 }' "dwg"' "Generic AutoCAD drawing - AutoCAD R13 (subtype 13)")); " is 148.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x41' 0x43' 0x31' 0x30' 0x31' 0x34 }' "dwg"' "Generic AutoCAD drawing - AutoCAD R13 (subtype 14)")); " is 148.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x41' 0x43' 0x31' 0x30' 0x31' 0x35 }' "dwg"' "Generic AutoCAD drawing - AutoCAD R2000")); " is 137.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x41' 0x43' 0x31' 0x30' 0x31' 0x38 }' "dwg"' "Generic AutoCAD drawing - AutoCAD R2004")); " is 137.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x41' 0x43' 0x31' 0x30' 0x32' 0x31 }' "dwg"' "Generic AutoCAD drawing - AutoCAD R2007")); " is 137.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0xFF' 0xD8' 0xFF' 0xE8 }' "jpg"' "Still Picture Interchange File Format (SPIFF)")); " is 131.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x2E' 0x52' 0x4D' 0x46' 0x00' 0x00' 0x00' 0x12' 0x00 }' "ra"' "RealAudio file")); " is 129.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x2E' 0x72' 0x61' 0xFD' 0x00 }' "ra"' "RealAudio streaming media file")); " is 121.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x00' 0x01' 0x00' 0x08' 0x00' 0x01' 0x00' 0x01' 0x01 }' "img"' "Image Format Bitmap file")); " is 140.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x50' 0x49' 0x43' 0x54' 0x00' 0x08 }' "img"' "ADEX Corp. ChromaGraph Graphics Card Bitmap Graphic file")); " is 154.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x45' 0x6C' 0x66' 0x46' 0x69' 0x6C' 0x65' 0x00 }' "evtx"' "Windows Vista event log file")); " is 139.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x30' 0x00' 0x00' 0x00' 0x4C' 0x66' 0x4C' 0x65 }' "evt"' "Windows Event Viewer file")); " is 135.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x49' 0x54' 0x53' 0x46 }' "chm"' "Microsoft Compiled HTM   L Help File")); " is 122.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x49' 0x53' 0x63' 0x28 }' "cab"' "Install Shield v5.x or 6.x compressed file")); " is 128.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x52' 0x61' 0x72' 0x21' 0x1A' 0x07' 0x00 }' "rar"' "WinRAR compressed archive file")); " is 134.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x1A' 0x45' 0xD5' 0xA3' 0x93' 0x42' 0x82' 0x88' 0x6D' 0x61' 0x74' 0x72' 0x6F' 0x73' 0x6B }' "mkv"' "Matroska open movie format")); " is 178.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x30' 0x26' 0xB2' 0x75' 0x8E' 0x66' 0xCF' 0x11' 0xA6' 0xD9' 0x00' 0xAA' 0x00' 0x62' 0xCE' 0x6C }' "wmv"' "Microsoft Windows Media Audio/Video File (Advanced Streaming Format")); " is 225.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x30' 0x26' 0xB2' 0x75' 0x8E' 0x66' 0xCF' 0x11' 0xA6' 0xD9' 0x00' 0xAA' 0x00' 0x62' 0xCE' 0x6C }' "wma"' "	Microsoft Windows Media Audio/Video File (Advanced Streaming Format)")); " is 227.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(Stb("Windows Registry Editor Version 5.00")' "reg"' "Windows Registry Editor Version 5.00 file")); " is 133.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x00' 0x00' 0x00' 0x18' 0x66' 0x74' 0x79' 0x70' 0x33' 0x67' 0x70' 0x35 }' "mp4"' "MPEG-4 video files")); " is 152.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x49' 0x49' 0x1A' 0x00' 0x00' 0x00' 0x48' 0x45' 0x41' 0x50' 0x43' 0x43' 0x44' 0x52' 0x02' 0x00 }' "crw"' "Canon digital camera RAW file")); " is 187.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x00' 0x00' 0x00' 0x20' 0x66' 0x74' 0x79' 0x70' 0x4D' 0x34' 0x41' 0x20' 0x00' 0x00' 0x00' 0x00 }' "mov"' "Apple QuickTime movie file")); " is 184.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x4C' 0x00' 0x00' 0x00' 0x01' 0x14' 0x02' 0x00 }' "lnk"' "Windows shortcut file")); " is 131.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x52' 0x45' 0x47' 0x45' 0x44' 0x49' 0x54 }' "reg"' "Windows NT Registry and Registry Undo files")); " is 147.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x43' 0x50' 0x54' 0x46' 0x49' 0x4C' 0x45 }' "cpt"' "Corel Photopaint file")); " is 125.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x4A' 0x41' 0x52' 0x43' 0x53' 0x00 }' "jar"' "JARCS compressed archive")); " is 122.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x01' 0x0F' 0x00' 0x00 }' "mdf"' "Microsoft SQL Server 2000 database")); " is 120.
Long Statement,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,GetFileTypes,The length of the statement  "            fileTypes.Add(new FileTypeFileInfo(new byte[] { 0x00' 0x00' 0x01' 0xBA }' "vob"' "DVD Video Movie File (video/dvd' video/mpeg)")); " is 130.
Long Statement,MsgReader.Mime.Decode,Rfc2822DateTime,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\Rfc2822DateTime.cs,ExtractDateTime,The length of the statement  "                    strDate = strDate.Substring(0' strDate.Length - parts[parts.Length - 1].Length).Trim(); //Use the length of the old last part " is 125.
Long Statement,MsgReader.Mime.Header,RfcMailAddress,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Header\RfcMailAddress.cs,ParseMailAddress,The length of the statement  "            //Find the index of the first angle bracket in this series of angle brackets' e.g "a>b" <<blah@email.com>> wouldn't find the angle bracket in the display name " is 158.
Long Statement,MsgReader.Mime.Header,RfcMailAddress,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Header\RfcMailAddress.cs,ParseMailAddress,The length of the statement  "                input[firstOpenAngleBracketIdx - 1] == '<' && //The character before the last open angle bracket is another open angle bracket " is 126.
Long Statement,MsgReader.Mime.Header,RfcMailAddress,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Header\RfcMailAddress.cs,ParseMailAddress,The length of the statement  "                input[firstCloseAngleBracketIdx - 1] == '>') //The character before the last close angle bracket is another close angle bracket " is 127.
Long Statement,MsgReader.Mime.Header,RfcMailAddress,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Header\RfcMailAddress.cs,ParseMailAddress,The length of the statement  "                    input.Substring(lastOpenAngleBracketIdx' firstCloseAngleBracketIdx - lastOpenAngleBracketIdx + 1); //actual email address' including one angle bracket either side " is 162.
Long Statement,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,PreProcessMsgFile,The length of the statement  "                                $"Attachment was marked as inline but the body did not contain the content id '{attach.ContentId}' so mark it as a normal attachment"); " is 135.
Long Statement,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,PreProcessMsgFile,The length of the statement  "                            "<table style=\"width: 70px; display: inline; text-align: center; font-family: Times New Roman; font-size: 12pt;\"><tr><td>" + " is 126.
Long Statement,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,PreProcessEmlStream,The length of the statement  "                            Logger.WriteToLog($"Attachment was marked as inline but the body did not contain the content id '{attachment.ContentId}' so mark it as a normal attachment"); " is 157.
Long Statement,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,PreProcessEmlStream,The length of the statement  "                    Logger.WriteToLog($"Attachment written to '{attachmentFileName}' with size '{FileManager.GetFileSizeString(attachment.Body.Length)}'"); " is 135.
Long Statement,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,PreProcessEmlFile,The length of the statement  "                            Logger.WriteToLog($"Attachment was marked as inline but the body did not contain the content id '{attachment.ContentId}' so mark it as a normal attachment"); " is 157.
Long Statement,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,PreProcessEmlFile,The length of the statement  "                    Logger.WriteToLog($"Attachment written to '{attachmentFileName}' with size '{FileManager.GetFileSizeString(attachment.Body.Length)}'"); " is 135.
Long Statement,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,UpdateTableCells,The length of the statement  "			        cell.Format.BackColor = cell.HasAttribute(Consts.Clcbpat) ? ColorTable.GetColor(cell.Attributes[Consts.Clcbpat]' Color.Transparent) : Color.Transparent; " is 152.
Long Statement,MsgReader.Rtf,RawDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\RawDocument.cs,ReadDocumentInfo,The length of the statement  "                    InternalInfo.SetInfo(node.Keyword' node.HasParameter ? node.Parameter.ToString(CultureInfo.InvariantCulture) : node.Nodes.Text); " is 128.
Complex Conditional,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,StripByteOrderMarker,The conditional expression  "IndexOf(magicBytes' new byte[] { 0xDD' 0x73' 0x66' 0x73 }' 0) == 0 ||                  IndexOf(magicBytes' new byte[] { 0xFF' 0xFE' 0x00' 0x00 }' 0) == 0 ||                  IndexOf(magicBytes' new byte[] { 0x00' 0x00' 0xFE' 0xFF }' 0) == 0 ||                  IndexOf(magicBytes' new byte[] { 0x84' 0x31' 0x95' 0x33 }' 0) == 0"  is complex.
Complex Conditional,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,StripByteOrderMarker,The conditional expression  "IndexOf(magicBytes' new byte[] { 0xEF' 0xBB' 0xBF }' 0) == 0 ||                  IndexOf(magicBytes' new byte[] { 0x2B' 0x2F' 0x76 }' 0) == 0 ||                  IndexOf(magicBytes' new byte[] { 0x0E' 0xFE' 0xFF }' 0) == 0 ||                  IndexOf(magicBytes' new byte[] { 0xFB' 0xEE' 0x28 }' 0) == 0 ||                  IndexOf(magicBytes' new byte[] { 0xF7' 0x64' 0x4C }' 0) == 0"  is complex.
Complex Conditional,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,PreProcessEmlFile,The conditional expression  "htmlBody && attachment.IsInline &&                           (!string.IsNullOrEmpty(attachment.ContentId) && body.Contains($"cid:{attachment.ContentId}") ||                            (body.Contains($"cid:{attachment.FileName}")))"  is complex.
Complex Conditional,MsgReader.Rtf,ByteBuffer,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\ByteBuffer.cs,Add,The conditional expression  "bs != null && startIndex >= 0 && (startIndex + length ) <= bs.Length && length > 0"  is complex.
Complex Conditional,MsgReader.Rtf,DocumentInfo,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DocumentInfo.cs,Write,The conditional expression  "strKey == "edmins"                      || strKey == "vern"                      || strKey == "nofpages"                      || strKey == "nofwords"                      || strKey == "nofchars"                      || strKey == "nofcharsws"                      || strKey == "id""  is complex.
Complex Conditional,MsgReader.Rtf,DocumentWriter,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DocumentWriter.cs,WriteStartString,The conditional expression  "info.LeftBorder                  || info.TopBorder                  || info.RightBorder                  || info.BottomBorder"  is complex.
Complex Conditional,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,FixForParagraphs,The conditional expression  "element is DomParagraph  			        || element is DomTableRow  			        || element is DomTable  			        || element is DomTableCell"  is complex.
Complex Conditional,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,AddContentElement,The conditional expression  "newElement is DomText  			        || newElement is DomImage  			        || newElement is DomObject  			        || newElement is DomShape  			        || newElement is DomShapeGroup"  is complex.
Complex Conditional,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,AddContentElement,The conditional expression  "newElement is DomText  						        || newElement is DomImage  						        || newElement is DomObject  						        || newElement is DomShape  						        || newElement is DomShapeGroup  						        || newElement is DomField  						        || newElement is DomBookmark  						        || newElement is DomLineBreak"  is complex.
Complex Conditional,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,AddContentElement,The conditional expression  "element2 is DomTableRow  								        || element2 is DomTableCell  								        || element2 is DomField  								        || element2 is DomParagraph"  is complex.
Complex Conditional,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadHtmlContent,The conditional expression  "reader.LastToken?.Key == "'" && reader?.Keyword != "'" && hexBuffer != string.Empty && !encoding.IsSingleByte"  is complex.
Complex Conditional,MsgReader.Rtf,Lex,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\Lex.cs,PeekTokenType,The conditional expression  "c == '\r'                     || c == '\n'                     || c == '\t'                     || c == '\0'"  is complex.
Complex Conditional,MsgReader.Rtf,Lex,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\Lex.cs,NextToken,The conditional expression  "c == '\r'                     || c == '\n'                     || c == '\t'                     || c == '\0'"  is complex.
Complex Conditional,MsgReader.Rtf,Lex,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\Lex.cs,ParseText,The conditional expression  "c != '\\' && c != '}' && c != '{' && c != Eof"  is complex.
Complex Conditional,MsgReader.Rtf,Lex,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\Lex.cs,ClearWhiteSpace,The conditional expression  "c == '\r'                     || c == '\n'                     || c == '\t'                     || c == '\0'"  is complex.
Virtual Method Call from Constructor,MsgReader.Outlook,Storage,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Appointment.cs,Storage,The constructor "Storage" calls a virtual method "LoadStorage".
Empty Catch Block,MsgReader.Helpers,Logger,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\Logger.cs,WriteToLog,The method has an empty catch block.
Empty Catch Block,MsgReader.Mime.Decode,Rfc2822DateTime,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\Rfc2822DateTime.cs,ExtractDateTime,The method has an empty catch block.
Empty Catch Block,MsgReader.Mime.Decode,Rfc2822DateTime,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\Rfc2822DateTime.cs,ExtractDateTime,The method has an empty catch block.
Empty Catch Block,MsgReader.Mime.Header,RfcMailAddress,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Header\RfcMailAddress.cs,ParseMailAddress,The method has an empty catch block.
Empty Catch Block,MsgReader.Mime,MessagePart,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\MessagePart.cs,FindFileName,The method has an empty catch block.
Empty Catch Block,MsgReader.Outlook,Attachment,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Attachment.cs,ResolveAttachment,The method has an empty catch block.
Magic Number,MsgReader.Helpers,DateDifference,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\DateDifference.cs,Difference,The following statement contains a magic number: dateDiff.Months = 12 - dateTime1.Month + dateTime2.Month;
Magic Number,MsgReader.Helpers,DateDifference,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\DateDifference.cs,Difference,The following statement contains a magic number: dateDiff.Weeks = dateDiff.Days/7;
Magic Number,MsgReader.Helpers,DateDifference,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\DateDifference.cs,Difference,The following statement contains a magic number: dateDiff.Days = dateDiff.Days%7;
Magic Number,MsgReader.Helpers,DateDifference,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\DateDifference.cs,Difference,The following statement contains a magic number: dateDiff.Hours = 24 - dateTime1.Hour + dateTime2.Hour;
Magic Number,MsgReader.Helpers,DateDifference,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\DateDifference.cs,Difference,The following statement contains a magic number: dateDiff.Minutes = 60 - dateTime1.Minute + dateTime2.Minute;
Magic Number,MsgReader.Helpers,DateDifference,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\DateDifference.cs,Difference,The following statement contains a magic number: dateDiff.Seconds = 60 - dateTime1.Second + dateTime2.Second;
Magic Number,MsgReader.Helpers,FileManager,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileManager.cs,FileExistsMakeNew,The following statement contains a magic number: var i = 2;
Magic Number,MsgReader.Helpers,FileManager,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileManager.cs,GetFileSizeString,The following statement contains a magic number: size = String.Format(CultureInfo.InvariantCulture' "{0:##.##}"' bytes / 1073741824.0) + " GB";
Magic Number,MsgReader.Helpers,FileManager,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileManager.cs,GetFileSizeString,The following statement contains a magic number: bytes >= 1073741824.0
Magic Number,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,StripByteOrderMarker,The following statement contains a magic number: return magicBytes.Select(m => m).Skip(4).ToArray();
Magic Number,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,StripByteOrderMarker,The following statement contains a magic number: return magicBytes.Select(m => m).Skip(3).ToArray();
Magic Number,MsgReader.Helpers,FileTypeSelector,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\FileTypeSelector.cs,StripByteOrderMarker,The following statement contains a magic number: return magicBytes.Select(m => m).Skip(2).ToArray();
Magic Number,MsgReader.Helpers,Strings,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\Strings.cs,ReadNullTerminatedUnicodeString,The following statement contains a magic number: var b = binaryReader.ReadBytes(2);
Magic Number,MsgReader.Helpers,Strings,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\Strings.cs,ReadNullTerminatedUnicodeString,The following statement contains a magic number: result.WriteByte(b[2]);
Magic Number,MsgReader.Helpers,Strings,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Helpers\Strings.cs,ReadNullTerminatedUnicodeString,The following statement contains a magic number: b = binaryReader.ReadBytes(2);
Magic Number,MsgReader.Mime.Decode,Base64,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\Base64.cs,Decode,The following statement contains a magic number: const int inputBlockSize = 4;
Magic Number,MsgReader.Mime.Decode,QuotedPrintable,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\QuotedPrintable.cs,Rfc2047QuotedPrintableDecode,The following statement contains a magic number: toDecode.Length - i < 3
Magic Number,MsgReader.Mime.Decode,QuotedPrintable,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\QuotedPrintable.cs,Rfc2047QuotedPrintableDecode,The following statement contains a magic number: var quotedPrintablePart = toDecode.Substring(i' 3);
Magic Number,MsgReader.Mime.Decode,QuotedPrintable,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\QuotedPrintable.cs,Rfc2047QuotedPrintableDecode,The following statement contains a magic number: i += 2;
Magic Number,MsgReader.Mime.Decode,QuotedPrintable,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\QuotedPrintable.cs,DecodeEqualSignNotLongEnough,The following statement contains a magic number: decode.Length >= 3
Magic Number,MsgReader.Mime.Decode,QuotedPrintable,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\QuotedPrintable.cs,DecodeEqualSign,The following statement contains a magic number: decode.Length != 3
Magic Number,MsgReader.Mime.Decode,QuotedPrintable,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\QuotedPrintable.cs,DecodeEqualSign,The following statement contains a magic number: var oneByte = new[] {Convert.ToByte(numberString' 16)};
Magic Number,MsgReader.Mime.Decode,Rfc2231Decoder,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\Rfc2231Decoder.cs,Decode,The following statement contains a magic number: var keyValue = part.Trim().Split(new[] {'='}' 2);
Magic Number,MsgReader.Mime.Decode,Rfc2231Decoder,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\Rfc2231Decoder.cs,Decode,The following statement contains a magic number: switch (keyValue.Length)  	            {  	                case 1:  	                    collection.Add(new KeyValuePair<string' string>(""' keyValue[0]));  	                    break;  	                case 2:  	                    collection.Add(new KeyValuePair<string' string>(keyValue[0]' keyValue[1]));  	                    break;  	                default:  	                    throw new ArgumentException("When splitting the part \"" + part + "\" by = there was " +  	                                                keyValue.Length +  	                                                " parts. Only 1 and 2 are supported");  	            }
Magic Number,MsgReader.Mime.Decode,SizeParser,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\SizeParser.cs,InitializeSizes,The following statement contains a magic number: return new Dictionary<string' long>  	        {  	            {""' 1L}' // No unit is the same as a byte  	            {"B"' 1L}' // Byte  	            {"KB"' 1024L}' // Kilobyte  	            {"MB"' 1024L*1024L}' // Megabyte  	            {"GB"' 1024L*1024L*1024L}' // Gigabyte  	            {"TB"' 1024L*1024L*1024L*1024L} // Terabyte  	        };
Magic Number,MsgReader.Mime.Decode,SizeParser,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\SizeParser.cs,InitializeSizes,The following statement contains a magic number: return new Dictionary<string' long>  	        {  	            {""' 1L}' // No unit is the same as a byte  	            {"B"' 1L}' // Byte  	            {"KB"' 1024L}' // Kilobyte  	            {"MB"' 1024L*1024L}' // Megabyte  	            {"GB"' 1024L*1024L*1024L}' // Gigabyte  	            {"TB"' 1024L*1024L*1024L*1024L} // Terabyte  	        };
Magic Number,MsgReader.Mime.Decode,SizeParser,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\SizeParser.cs,InitializeSizes,The following statement contains a magic number: return new Dictionary<string' long>  	        {  	            {""' 1L}' // No unit is the same as a byte  	            {"B"' 1L}' // Byte  	            {"KB"' 1024L}' // Kilobyte  	            {"MB"' 1024L*1024L}' // Megabyte  	            {"GB"' 1024L*1024L*1024L}' // Gigabyte  	            {"TB"' 1024L*1024L*1024L*1024L} // Terabyte  	        };
Magic Number,MsgReader.Mime.Decode,SizeParser,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\SizeParser.cs,InitializeSizes,The following statement contains a magic number: return new Dictionary<string' long>  	        {  	            {""' 1L}' // No unit is the same as a byte  	            {"B"' 1L}' // Byte  	            {"KB"' 1024L}' // Kilobyte  	            {"MB"' 1024L*1024L}' // Megabyte  	            {"GB"' 1024L*1024L*1024L}' // Gigabyte  	            {"TB"' 1024L*1024L*1024L*1024L} // Terabyte  	        };
Magic Number,MsgReader.Mime.Decode,SizeParser,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\SizeParser.cs,InitializeSizes,The following statement contains a magic number: return new Dictionary<string' long>  	        {  	            {""' 1L}' // No unit is the same as a byte  	            {"B"' 1L}' // Byte  	            {"KB"' 1024L}' // Kilobyte  	            {"MB"' 1024L*1024L}' // Megabyte  	            {"GB"' 1024L*1024L*1024L}' // Gigabyte  	            {"TB"' 1024L*1024L*1024L*1024L} // Terabyte  	        };
Magic Number,MsgReader.Mime.Decode,SizeParser,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\SizeParser.cs,InitializeSizes,The following statement contains a magic number: return new Dictionary<string' long>  	        {  	            {""' 1L}' // No unit is the same as a byte  	            {"B"' 1L}' // Byte  	            {"KB"' 1024L}' // Kilobyte  	            {"MB"' 1024L*1024L}' // Megabyte  	            {"GB"' 1024L*1024L*1024L}' // Gigabyte  	            {"TB"' 1024L*1024L*1024L*1024L} // Terabyte  	        };
Magic Number,MsgReader.Mime.Decode,SizeParser,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\SizeParser.cs,InitializeSizes,The following statement contains a magic number: return new Dictionary<string' long>  	        {  	            {""' 1L}' // No unit is the same as a byte  	            {"B"' 1L}' // Byte  	            {"KB"' 1024L}' // Kilobyte  	            {"MB"' 1024L*1024L}' // Megabyte  	            {"GB"' 1024L*1024L*1024L}' // Gigabyte  	            {"TB"' 1024L*1024L*1024L*1024L} // Terabyte  	        };
Magic Number,MsgReader.Mime.Decode,SizeParser,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\SizeParser.cs,InitializeSizes,The following statement contains a magic number: return new Dictionary<string' long>  	        {  	            {""' 1L}' // No unit is the same as a byte  	            {"B"' 1L}' // Byte  	            {"KB"' 1024L}' // Kilobyte  	            {"MB"' 1024L*1024L}' // Megabyte  	            {"GB"' 1024L*1024L*1024L}' // Gigabyte  	            {"TB"' 1024L*1024L*1024L*1024L} // Terabyte  	        };
Magic Number,MsgReader.Mime.Decode,SizeParser,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\SizeParser.cs,InitializeSizes,The following statement contains a magic number: return new Dictionary<string' long>  	        {  	            {""' 1L}' // No unit is the same as a byte  	            {"B"' 1L}' // Byte  	            {"KB"' 1024L}' // Kilobyte  	            {"MB"' 1024L*1024L}' // Megabyte  	            {"GB"' 1024L*1024L*1024L}' // Gigabyte  	            {"TB"' 1024L*1024L*1024L*1024L} // Terabyte  	        };
Magic Number,MsgReader.Mime.Decode,SizeParser,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\SizeParser.cs,InitializeSizes,The following statement contains a magic number: return new Dictionary<string' long>  	        {  	            {""' 1L}' // No unit is the same as a byte  	            {"B"' 1L}' // Byte  	            {"KB"' 1024L}' // Kilobyte  	            {"MB"' 1024L*1024L}' // Megabyte  	            {"GB"' 1024L*1024L*1024L}' // Gigabyte  	            {"TB"' 1024L*1024L*1024L*1024L} // Terabyte  	        };
Magic Number,MsgReader.Mime.Decode,Utility,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\Utility.cs,RemoveQuotesIfAny,The following statement contains a magic number: return text.Substring(1' text.Length - 2);
Magic Number,MsgReader.Mime.Decode,UUEncode,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\UUEncode.cs,Decode,The following statement contains a magic number: output.WriteByte((byte)(((A << 2) & 255) | ((B >> 4) & 3)));
Magic Number,MsgReader.Mime.Decode,UUEncode,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\UUEncode.cs,Decode,The following statement contains a magic number: output.WriteByte((byte)(((A << 2) & 255) | ((B >> 4) & 3)));
Magic Number,MsgReader.Mime.Decode,UUEncode,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\UUEncode.cs,Decode,The following statement contains a magic number: output.WriteByte((byte)(((A << 2) & 255) | ((B >> 4) & 3)));
Magic Number,MsgReader.Mime.Decode,UUEncode,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\UUEncode.cs,Decode,The following statement contains a magic number: output.WriteByte((byte)(((A << 2) & 255) | ((B >> 4) & 3)));
Magic Number,MsgReader.Mime.Decode,UUEncode,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\UUEncode.cs,Decode,The following statement contains a magic number: output.WriteByte((byte)(((B << 4) & 255) | ((C >> 2) & 15)));
Magic Number,MsgReader.Mime.Decode,UUEncode,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\UUEncode.cs,Decode,The following statement contains a magic number: output.WriteByte((byte)(((B << 4) & 255) | ((C >> 2) & 15)));
Magic Number,MsgReader.Mime.Decode,UUEncode,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\UUEncode.cs,Decode,The following statement contains a magic number: output.WriteByte((byte)(((B << 4) & 255) | ((C >> 2) & 15)));
Magic Number,MsgReader.Mime.Decode,UUEncode,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\UUEncode.cs,Decode,The following statement contains a magic number: output.WriteByte((byte)(((B << 4) & 255) | ((C >> 2) & 15)));
Magic Number,MsgReader.Mime.Decode,UUEncode,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\UUEncode.cs,Decode,The following statement contains a magic number: output.WriteByte((byte)(((C << 6) & 255) | (D & 63)));
Magic Number,MsgReader.Mime.Decode,UUEncode,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\UUEncode.cs,Decode,The following statement contains a magic number: output.WriteByte((byte)(((C << 6) & 255) | (D & 63)));
Magic Number,MsgReader.Mime.Decode,UUEncode,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\UUEncode.cs,Decode,The following statement contains a magic number: output.WriteByte((byte)(((C << 6) & 255) | (D & 63)));
Magic Number,MsgReader.Mime.Decode,UUEncode,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\UUEncode.cs,Decode,The following statement contains a magic number: didx += 3;
Magic Number,MsgReader.Mime.Decode,UUEncode,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\UUEncode.cs,Decode,The following statement contains a magic number: output.WriteByte((byte)(((A << 2) & 255) | ((B >> 4) & 3)));
Magic Number,MsgReader.Mime.Decode,UUEncode,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\UUEncode.cs,Decode,The following statement contains a magic number: output.WriteByte((byte)(((A << 2) & 255) | ((B >> 4) & 3)));
Magic Number,MsgReader.Mime.Decode,UUEncode,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\UUEncode.cs,Decode,The following statement contains a magic number: output.WriteByte((byte)(((A << 2) & 255) | ((B >> 4) & 3)));
Magic Number,MsgReader.Mime.Decode,UUEncode,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\UUEncode.cs,Decode,The following statement contains a magic number: output.WriteByte((byte)(((A << 2) & 255) | ((B >> 4) & 3)));
Magic Number,MsgReader.Mime.Decode,UUEncode,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\UUEncode.cs,Decode,The following statement contains a magic number: output.WriteByte((byte)(((B << 4) & 255) | ((C >> 2) & 15)));
Magic Number,MsgReader.Mime.Decode,UUEncode,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\UUEncode.cs,Decode,The following statement contains a magic number: output.WriteByte((byte)(((B << 4) & 255) | ((C >> 2) & 15)));
Magic Number,MsgReader.Mime.Decode,UUEncode,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\UUEncode.cs,Decode,The following statement contains a magic number: output.WriteByte((byte)(((B << 4) & 255) | ((C >> 2) & 15)));
Magic Number,MsgReader.Mime.Decode,UUEncode,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Mime\Decode\UUEncode.cs,Decode,The following statement contains a magic number: output.WriteByte((byte)(((B << 4) & 255) | ((C >> 2) & 15)));
Magic Number,MsgReader.Outlook,AddressBookEntryId,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\AddressBookEntryId.cs,AddressBookEntryId,The following statement contains a magic number: Flags = binaryReader.ReadBytes(4);
Magic Number,MsgReader.Outlook,AddressBookEntryId,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\AddressBookEntryId.cs,AddressBookEntryId,The following statement contains a magic number: ProviderUid = binaryReader.ReadBytes(16);
Magic Number,MsgReader.Outlook,AddressBookEntryId,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\AddressBookEntryId.cs,AddressBookEntryId,The following statement contains a magic number: Version = binaryReader.ReadBytes(4);
Magic Number,MsgReader.Outlook,AddressBookEntryId,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\AddressBookEntryId.cs,AddressBookEntryId,The following statement contains a magic number: Type = (AddressBookEntryIdType) Convert.ToInt32(binaryReader.ReadBytes(4));
Magic Number,MsgReader.Outlook,Storage,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Appointment.cs,GetMapiPropertyFromStreamOrStorage,The following statement contains a magic number: propTag = propKey.Substring(12' 8);
Magic Number,MsgReader.Outlook,Storage,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Appointment.cs,GetMapiPropertyFromStreamOrStorage,The following statement contains a magic number: propTag = propKey.Substring(12' 8);
Magic Number,MsgReader.Outlook,Storage,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Appointment.cs,GetMapiPropertyFromStreamOrStorage,The following statement contains a magic number: propType = (PropertyType) ushort.Parse(propKey.Substring(16' 4)' NumberStyles.HexNumber);
Magic Number,MsgReader.Outlook,Storage,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Appointment.cs,GetMapiPropertyFromStreamOrStorage,The following statement contains a magic number: propType = (PropertyType) ushort.Parse(propKey.Substring(16' 4)' NumberStyles.HexNumber);
Magic Number,MsgReader.Outlook,Storage,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Appointment.cs,GetMapiPropertyFromPropertyStream,The following statement contains a magic number: var propIdent = new[] { propBytes[i + 3]' propBytes[i + 2] };
Magic Number,MsgReader.Outlook,Storage,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Appointment.cs,GetMapiPropertyFromPropertyStream,The following statement contains a magic number: var propIdent = new[] { propBytes[i + 3]' propBytes[i + 2] };
Magic Number,MsgReader.Outlook,Storage,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Appointment.cs,GetMapiPropertyFromPropertyStream,The following statement contains a magic number: switch (propType)                  {                      case PropertyType.PT_SHORT:                          return BitConverter.ToInt16(propBytes' i + 8);                        case PropertyType.PT_LONG:                          return BitConverter.ToInt32(propBytes' i + 8);                        case PropertyType.PT_DOUBLE:                          return BitConverter.ToDouble(propBytes' i + 8);                        case PropertyType.PT_SYSTIME:                          var fileTime = BitConverter.ToInt64(propBytes' i + 8);                          return DateTime.FromFileTime(fileTime);                        case PropertyType.PT_APPTIME:                          var appTime = BitConverter.ToInt64(propBytes' i + 8);                          return DateTime.FromOADate(appTime);                        case PropertyType.PT_BOOLEAN:                          return BitConverter.ToBoolean(propBytes' i + 8);                  }
Magic Number,MsgReader.Outlook,Storage,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Appointment.cs,GetMapiPropertyFromPropertyStream,The following statement contains a magic number: switch (propType)                  {                      case PropertyType.PT_SHORT:                          return BitConverter.ToInt16(propBytes' i + 8);                        case PropertyType.PT_LONG:                          return BitConverter.ToInt32(propBytes' i + 8);                        case PropertyType.PT_DOUBLE:                          return BitConverter.ToDouble(propBytes' i + 8);                        case PropertyType.PT_SYSTIME:                          var fileTime = BitConverter.ToInt64(propBytes' i + 8);                          return DateTime.FromFileTime(fileTime);                        case PropertyType.PT_APPTIME:                          var appTime = BitConverter.ToInt64(propBytes' i + 8);                          return DateTime.FromOADate(appTime);                        case PropertyType.PT_BOOLEAN:                          return BitConverter.ToBoolean(propBytes' i + 8);                  }
Magic Number,MsgReader.Outlook,Storage,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Appointment.cs,GetMapiPropertyFromPropertyStream,The following statement contains a magic number: switch (propType)                  {                      case PropertyType.PT_SHORT:                          return BitConverter.ToInt16(propBytes' i + 8);                        case PropertyType.PT_LONG:                          return BitConverter.ToInt32(propBytes' i + 8);                        case PropertyType.PT_DOUBLE:                          return BitConverter.ToDouble(propBytes' i + 8);                        case PropertyType.PT_SYSTIME:                          var fileTime = BitConverter.ToInt64(propBytes' i + 8);                          return DateTime.FromFileTime(fileTime);                        case PropertyType.PT_APPTIME:                          var appTime = BitConverter.ToInt64(propBytes' i + 8);                          return DateTime.FromOADate(appTime);                        case PropertyType.PT_BOOLEAN:                          return BitConverter.ToBoolean(propBytes' i + 8);                  }
Magic Number,MsgReader.Outlook,Storage,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Appointment.cs,GetMapiPropertyFromPropertyStream,The following statement contains a magic number: switch (propType)                  {                      case PropertyType.PT_SHORT:                          return BitConverter.ToInt16(propBytes' i + 8);                        case PropertyType.PT_LONG:                          return BitConverter.ToInt32(propBytes' i + 8);                        case PropertyType.PT_DOUBLE:                          return BitConverter.ToDouble(propBytes' i + 8);                        case PropertyType.PT_SYSTIME:                          var fileTime = BitConverter.ToInt64(propBytes' i + 8);                          return DateTime.FromFileTime(fileTime);                        case PropertyType.PT_APPTIME:                          var appTime = BitConverter.ToInt64(propBytes' i + 8);                          return DateTime.FromOADate(appTime);                        case PropertyType.PT_BOOLEAN:                          return BitConverter.ToBoolean(propBytes' i + 8);                  }
Magic Number,MsgReader.Outlook,Storage,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Appointment.cs,GetMapiPropertyFromPropertyStream,The following statement contains a magic number: switch (propType)                  {                      case PropertyType.PT_SHORT:                          return BitConverter.ToInt16(propBytes' i + 8);                        case PropertyType.PT_LONG:                          return BitConverter.ToInt32(propBytes' i + 8);                        case PropertyType.PT_DOUBLE:                          return BitConverter.ToDouble(propBytes' i + 8);                        case PropertyType.PT_SYSTIME:                          var fileTime = BitConverter.ToInt64(propBytes' i + 8);                          return DateTime.FromFileTime(fileTime);                        case PropertyType.PT_APPTIME:                          var appTime = BitConverter.ToInt64(propBytes' i + 8);                          return DateTime.FromOADate(appTime);                        case PropertyType.PT_BOOLEAN:                          return BitConverter.ToBoolean(propBytes' i + 8);                  }
Magic Number,MsgReader.Outlook,Storage,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Appointment.cs,GetMapiPropertyFromPropertyStream,The following statement contains a magic number: switch (propType)                  {                      case PropertyType.PT_SHORT:                          return BitConverter.ToInt16(propBytes' i + 8);                        case PropertyType.PT_LONG:                          return BitConverter.ToInt32(propBytes' i + 8);                        case PropertyType.PT_DOUBLE:                          return BitConverter.ToDouble(propBytes' i + 8);                        case PropertyType.PT_SYSTIME:                          var fileTime = BitConverter.ToInt64(propBytes' i + 8);                          return DateTime.FromFileTime(fileTime);                        case PropertyType.PT_APPTIME:                          var appTime = BitConverter.ToInt64(propBytes' i + 8);                          return DateTime.FromOADate(appTime);                        case PropertyType.PT_BOOLEAN:                          return BitConverter.ToBoolean(propBytes' i + 8);                  }
Magic Number,MsgReader.Outlook,Attachment,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Attachment.cs,Attachment,The following statement contains a magic number: switch (attachmentMethod)                  {                      case MapiTags.ATTACH_BY_REFERENCE:                      case MapiTags.ATTACH_BY_REF_RESOLVE:                      case MapiTags.ATTACH_BY_REF_ONLY:                          ResolveAttachment();                          break;                        case MapiTags.ATTACH_OLE:                          var storage = GetMapiProperty(MapiTags.PR_ATTACH_DATA_BIN) as CFStorage;                          var attachmentOle = new Attachment(new Storage(storage)' null);                          _data = attachmentOle.GetStreamBytes("CONTENTS");                          if (_data != null)                          {                              var fileTypeInfo = FileTypeSelector.GetFileTypeFileInfo(Data);                                if (string.IsNullOrEmpty(FileName))                                  FileName = fileTypeInfo.Description;                                FileName += "." + fileTypeInfo.Extension.ToLower();                          }                          else                              // http://www.devsuperpage.com/search/Articles.aspx?G=10&ArtID=142729                              _data = attachmentOle.GetStreamBytes("\u0002OlePres000");                            if (_data != null)                          {                              try                              {                                  SaveImageAsPng(40);                              }                              catch (ArgumentException)                              {                                  SaveImageAsPng(0);                              }                          }                          else                              throw new MRUnknownAttachmentFormat("Can not read the attachment");                            OleAttachment = true;                          IsInline = true;                          break;                  }
Magic Number,MsgReader.Outlook,MapiTagMapper,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTagMapper.cs,GetMapping,The following statement contains a magic number: var entryOffset = (identValue - 32768)*8;
Magic Number,MsgReader.Outlook,MapiTagMapper,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTagMapper.cs,GetMapping,The following statement contains a magic number: var entryOffset = (identValue - 32768)*8;
Magic Number,MsgReader.Outlook,MapiTagMapper,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\MapiTagMapper.cs,GetMapping,The following statement contains a magic number: stringOffset += 4;
Magic Number,MsgReader.Outlook,Message,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Message.cs,LoadStorage,The following statement contains a magic number: var propIdentString = name.Substring(12' 4);
Magic Number,MsgReader.Outlook,Message,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Message.cs,LoadStorage,The following statement contains a magic number: var propIdentString = name.Substring(12' 4);
Magic Number,MsgReader.Outlook,Message,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Message.cs,LoadStorage,The following statement contains a magic number: value >= 32768 && value <= 65534
Magic Number,MsgReader.Outlook,Message,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Message.cs,LoadStorage,The following statement contains a magic number: value >= 32768 && value <= 65534
Magic Number,MsgReader.Outlook,Message,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Message.cs,LoadStorage,The following statement contains a magic number: var propIdent = new[] { propBytes[i + 3]' propBytes[i + 2] };
Magic Number,MsgReader.Outlook,Message,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Message.cs,LoadStorage,The following statement contains a magic number: var propIdent = new[] { propBytes[i + 3]' propBytes[i + 2] };
Magic Number,MsgReader.Outlook,Message,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Message.cs,LoadStorage,The following statement contains a magic number: value >= 32768 && value <= 65534
Magic Number,MsgReader.Outlook,Message,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Message.cs,LoadStorage,The following statement contains a magic number: value >= 32768 && value <= 65534
Magic Number,MsgReader.Outlook,Property,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Property.cs,ByteArrayToDecimal,The following statement contains a magic number: var i2 = BitConverter.ToInt32(source' offset + 4);
Magic Number,MsgReader.Outlook,Property,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Property.cs,ByteArrayToDecimal,The following statement contains a magic number: var i3 = BitConverter.ToInt32(source' offset + 8);
Magic Number,MsgReader.Outlook,Property,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Property.cs,ByteArrayToDecimal,The following statement contains a magic number: var i4 = BitConverter.ToInt32(source' offset + 12);
Magic Number,MsgReader.Outlook,RtfDecompressor,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\RtfDecompressor.cs,CalculateCrc32,The following statement contains a magic number: c = Crc32Table[(c ^ buf[i]) & 0xFF] ^ (c >> 8);
Magic Number,MsgReader.Outlook,RtfDecompressor,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\RtfDecompressor.cs,GetU32,The following statement contains a magic number: return ((buf[offset] & 0xFF) | ((buf[offset + 1] & 0xFF) << 8) | ((buf[offset + 2] & 0xFF) << 16) |                      ((buf[offset + 3] & 0xFF) << 24)) & 0x00000000FFFFFFFFL;
Magic Number,MsgReader.Outlook,RtfDecompressor,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\RtfDecompressor.cs,GetU32,The following statement contains a magic number: return ((buf[offset] & 0xFF) | ((buf[offset + 1] & 0xFF) << 8) | ((buf[offset + 2] & 0xFF) << 16) |                      ((buf[offset + 3] & 0xFF) << 24)) & 0x00000000FFFFFFFFL;
Magic Number,MsgReader.Outlook,RtfDecompressor,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\RtfDecompressor.cs,GetU32,The following statement contains a magic number: return ((buf[offset] & 0xFF) | ((buf[offset + 1] & 0xFF) << 8) | ((buf[offset + 2] & 0xFF) << 16) |                      ((buf[offset + 3] & 0xFF) << 24)) & 0x00000000FFFFFFFFL;
Magic Number,MsgReader.Outlook,RtfDecompressor,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\RtfDecompressor.cs,GetU32,The following statement contains a magic number: return ((buf[offset] & 0xFF) | ((buf[offset + 1] & 0xFF) << 8) | ((buf[offset + 2] & 0xFF) << 16) |                      ((buf[offset + 3] & 0xFF) << 24)) & 0x00000000FFFFFFFFL;
Magic Number,MsgReader.Outlook,RtfDecompressor,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\RtfDecompressor.cs,GetU32,The following statement contains a magic number: return ((buf[offset] & 0xFF) | ((buf[offset + 1] & 0xFF) << 8) | ((buf[offset + 2] & 0xFF) << 16) |                      ((buf[offset + 3] & 0xFF) << 24)) & 0x00000000FFFFFFFFL;
Magic Number,MsgReader.Outlook,RtfDecompressor,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\RtfDecompressor.cs,DecompressRtf,The following statement contains a magic number: src == null || src.Length < 16
Magic Number,MsgReader.Outlook,RtfDecompressor,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\RtfDecompressor.cs,DecompressRtf,The following statement contains a magic number: inPos += 4;
Magic Number,MsgReader.Outlook,RtfDecompressor,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\RtfDecompressor.cs,DecompressRtf,The following statement contains a magic number: inPos += 4;
Magic Number,MsgReader.Outlook,RtfDecompressor,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\RtfDecompressor.cs,DecompressRtf,The following statement contains a magic number: inPos += 4;
Magic Number,MsgReader.Outlook,RtfDecompressor,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\RtfDecompressor.cs,DecompressRtf,The following statement contains a magic number: compressedSize != src.Length - 4
Magic Number,MsgReader.Outlook,RtfDecompressor,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\RtfDecompressor.cs,DecompressRtf,The following statement contains a magic number: switch (magic)              {                  case 0x414c454d:                      dst = new byte[uncompressedSize];                      Array.Copy(src' inPos' dst' outPos' uncompressedSize- inPos); // just copy it as it is                      break;                    case 0x75465a4c:                      {                          var crc32 = (int)GetU32(src' inPos);                          inPos += 4;                            if (crc32 != CalculateCrc32(src' 16' src.Length - 16))                              throw new Exception("compressed-RTF CRC32 failed");                                                    // magic number that identifies the stream as a compressed stream                          dst = new byte[_compressedRtfPrebuf.Length + uncompressedSize];                          Array.Copy(_compressedRtfPrebuf' 0' dst' 0' _compressedRtfPrebuf.Length);                          outPos = _compressedRtfPrebuf.Length;                          var flagCount = 0;                          var flags = 0;                          while (outPos < dst.Length)                          {                              // each flag byte flags 8 literals/references' 1 per bit                              flags = (flagCount++ % 8 == 0) ? GetU8(src' inPos++) : flags >> 1;                              if ((flags & 1) == 1)                              { // each flag bit is 1 for reference' 0 for literal                                  var offset = GetU8(src' inPos++);                                  var length = GetU8(src' inPos++);                                  //!!!!!!!!!            offset = (offset << 4) | (length >>> 4); // the offset relative to block start                                  offset = (offset << 4) | (length >> 4); // the offset relative to block start                                  length = (length & 0xF) + 2; // the number of bytes to copy                                  // the decompression buffer is supposed to wrap around back                                  // to the beginning when the end is reached. we save the                                  // need for such a buffer by pointing straight into the data                                  // buffer' and simulating this behaviour by modifying the                                  // pointers appropriately.                                  offset = (outPos / 4096) * 4096 + offset;                                  if (offset >= outPos) // take from previous block                                      offset -= 4096;                                  // ReSharper disable once CommentTypo                                  // note: can't use System.arraycopy' because the referenced                                  // bytes can cross through the current out position.                                  var end = offset + length;                                  while (offset < end)                                      dst[outPos++] = dst[offset++];                              }                              else                              { // literal                                  dst[outPos++] = src[inPos++];                              }                          }                          // copy it back without the pre buffered data                          src = dst;                          dst = new byte[uncompressedSize];                          Array.Copy(src' _compressedRtfPrebuf.Length' dst' 0' uncompressedSize);                      }                      break;                    default:                      throw new Exception("Unknown compression type (magic number " + magic + ")");              }
Magic Number,MsgReader.Outlook,RtfDecompressor,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\RtfDecompressor.cs,DecompressRtf,The following statement contains a magic number: switch (magic)              {                  case 0x414c454d:                      dst = new byte[uncompressedSize];                      Array.Copy(src' inPos' dst' outPos' uncompressedSize- inPos); // just copy it as it is                      break;                    case 0x75465a4c:                      {                          var crc32 = (int)GetU32(src' inPos);                          inPos += 4;                            if (crc32 != CalculateCrc32(src' 16' src.Length - 16))                              throw new Exception("compressed-RTF CRC32 failed");                                                    // magic number that identifies the stream as a compressed stream                          dst = new byte[_compressedRtfPrebuf.Length + uncompressedSize];                          Array.Copy(_compressedRtfPrebuf' 0' dst' 0' _compressedRtfPrebuf.Length);                          outPos = _compressedRtfPrebuf.Length;                          var flagCount = 0;                          var flags = 0;                          while (outPos < dst.Length)                          {                              // each flag byte flags 8 literals/references' 1 per bit                              flags = (flagCount++ % 8 == 0) ? GetU8(src' inPos++) : flags >> 1;                              if ((flags & 1) == 1)                              { // each flag bit is 1 for reference' 0 for literal                                  var offset = GetU8(src' inPos++);                                  var length = GetU8(src' inPos++);                                  //!!!!!!!!!            offset = (offset << 4) | (length >>> 4); // the offset relative to block start                                  offset = (offset << 4) | (length >> 4); // the offset relative to block start                                  length = (length & 0xF) + 2; // the number of bytes to copy                                  // the decompression buffer is supposed to wrap around back                                  // to the beginning when the end is reached. we save the                                  // need for such a buffer by pointing straight into the data                                  // buffer' and simulating this behaviour by modifying the                                  // pointers appropriately.                                  offset = (outPos / 4096) * 4096 + offset;                                  if (offset >= outPos) // take from previous block                                      offset -= 4096;                                  // ReSharper disable once CommentTypo                                  // note: can't use System.arraycopy' because the referenced                                  // bytes can cross through the current out position.                                  var end = offset + length;                                  while (offset < end)                                      dst[outPos++] = dst[offset++];                              }                              else                              { // literal                                  dst[outPos++] = src[inPos++];                              }                          }                          // copy it back without the pre buffered data                          src = dst;                          dst = new byte[uncompressedSize];                          Array.Copy(src' _compressedRtfPrebuf.Length' dst' 0' uncompressedSize);                      }                      break;                    default:                      throw new Exception("Unknown compression type (magic number " + magic + ")");              }
Magic Number,MsgReader.Outlook,RtfDecompressor,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\RtfDecompressor.cs,DecompressRtf,The following statement contains a magic number: switch (magic)              {                  case 0x414c454d:                      dst = new byte[uncompressedSize];                      Array.Copy(src' inPos' dst' outPos' uncompressedSize- inPos); // just copy it as it is                      break;                    case 0x75465a4c:                      {                          var crc32 = (int)GetU32(src' inPos);                          inPos += 4;                            if (crc32 != CalculateCrc32(src' 16' src.Length - 16))                              throw new Exception("compressed-RTF CRC32 failed");                                                    // magic number that identifies the stream as a compressed stream                          dst = new byte[_compressedRtfPrebuf.Length + uncompressedSize];                          Array.Copy(_compressedRtfPrebuf' 0' dst' 0' _compressedRtfPrebuf.Length);                          outPos = _compressedRtfPrebuf.Length;                          var flagCount = 0;                          var flags = 0;                          while (outPos < dst.Length)                          {                              // each flag byte flags 8 literals/references' 1 per bit                              flags = (flagCount++ % 8 == 0) ? GetU8(src' inPos++) : flags >> 1;                              if ((flags & 1) == 1)                              { // each flag bit is 1 for reference' 0 for literal                                  var offset = GetU8(src' inPos++);                                  var length = GetU8(src' inPos++);                                  //!!!!!!!!!            offset = (offset << 4) | (length >>> 4); // the offset relative to block start                                  offset = (offset << 4) | (length >> 4); // the offset relative to block start                                  length = (length & 0xF) + 2; // the number of bytes to copy                                  // the decompression buffer is supposed to wrap around back                                  // to the beginning when the end is reached. we save the                                  // need for such a buffer by pointing straight into the data                                  // buffer' and simulating this behaviour by modifying the                                  // pointers appropriately.                                  offset = (outPos / 4096) * 4096 + offset;                                  if (offset >= outPos) // take from previous block                                      offset -= 4096;                                  // ReSharper disable once CommentTypo                                  // note: can't use System.arraycopy' because the referenced                                  // bytes can cross through the current out position.                                  var end = offset + length;                                  while (offset < end)                                      dst[outPos++] = dst[offset++];                              }                              else                              { // literal                                  dst[outPos++] = src[inPos++];                              }                          }                          // copy it back without the pre buffered data                          src = dst;                          dst = new byte[uncompressedSize];                          Array.Copy(src' _compressedRtfPrebuf.Length' dst' 0' uncompressedSize);                      }                      break;                    default:                      throw new Exception("Unknown compression type (magic number " + magic + ")");              }
Magic Number,MsgReader.Outlook,RtfDecompressor,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\RtfDecompressor.cs,DecompressRtf,The following statement contains a magic number: switch (magic)              {                  case 0x414c454d:                      dst = new byte[uncompressedSize];                      Array.Copy(src' inPos' dst' outPos' uncompressedSize- inPos); // just copy it as it is                      break;                    case 0x75465a4c:                      {                          var crc32 = (int)GetU32(src' inPos);                          inPos += 4;                            if (crc32 != CalculateCrc32(src' 16' src.Length - 16))                              throw new Exception("compressed-RTF CRC32 failed");                                                    // magic number that identifies the stream as a compressed stream                          dst = new byte[_compressedRtfPrebuf.Length + uncompressedSize];                          Array.Copy(_compressedRtfPrebuf' 0' dst' 0' _compressedRtfPrebuf.Length);                          outPos = _compressedRtfPrebuf.Length;                          var flagCount = 0;                          var flags = 0;                          while (outPos < dst.Length)                          {                              // each flag byte flags 8 literals/references' 1 per bit                              flags = (flagCount++ % 8 == 0) ? GetU8(src' inPos++) : flags >> 1;                              if ((flags & 1) == 1)                              { // each flag bit is 1 for reference' 0 for literal                                  var offset = GetU8(src' inPos++);                                  var length = GetU8(src' inPos++);                                  //!!!!!!!!!            offset = (offset << 4) | (length >>> 4); // the offset relative to block start                                  offset = (offset << 4) | (length >> 4); // the offset relative to block start                                  length = (length & 0xF) + 2; // the number of bytes to copy                                  // the decompression buffer is supposed to wrap around back                                  // to the beginning when the end is reached. we save the                                  // need for such a buffer by pointing straight into the data                                  // buffer' and simulating this behaviour by modifying the                                  // pointers appropriately.                                  offset = (outPos / 4096) * 4096 + offset;                                  if (offset >= outPos) // take from previous block                                      offset -= 4096;                                  // ReSharper disable once CommentTypo                                  // note: can't use System.arraycopy' because the referenced                                  // bytes can cross through the current out position.                                  var end = offset + length;                                  while (offset < end)                                      dst[outPos++] = dst[offset++];                              }                              else                              { // literal                                  dst[outPos++] = src[inPos++];                              }                          }                          // copy it back without the pre buffered data                          src = dst;                          dst = new byte[uncompressedSize];                          Array.Copy(src' _compressedRtfPrebuf.Length' dst' 0' uncompressedSize);                      }                      break;                    default:                      throw new Exception("Unknown compression type (magic number " + magic + ")");              }
Magic Number,MsgReader.Outlook,RtfDecompressor,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\RtfDecompressor.cs,DecompressRtf,The following statement contains a magic number: switch (magic)              {                  case 0x414c454d:                      dst = new byte[uncompressedSize];                      Array.Copy(src' inPos' dst' outPos' uncompressedSize- inPos); // just copy it as it is                      break;                    case 0x75465a4c:                      {                          var crc32 = (int)GetU32(src' inPos);                          inPos += 4;                            if (crc32 != CalculateCrc32(src' 16' src.Length - 16))                              throw new Exception("compressed-RTF CRC32 failed");                                                    // magic number that identifies the stream as a compressed stream                          dst = new byte[_compressedRtfPrebuf.Length + uncompressedSize];                          Array.Copy(_compressedRtfPrebuf' 0' dst' 0' _compressedRtfPrebuf.Length);                          outPos = _compressedRtfPrebuf.Length;                          var flagCount = 0;                          var flags = 0;                          while (outPos < dst.Length)                          {                              // each flag byte flags 8 literals/references' 1 per bit                              flags = (flagCount++ % 8 == 0) ? GetU8(src' inPos++) : flags >> 1;                              if ((flags & 1) == 1)                              { // each flag bit is 1 for reference' 0 for literal                                  var offset = GetU8(src' inPos++);                                  var length = GetU8(src' inPos++);                                  //!!!!!!!!!            offset = (offset << 4) | (length >>> 4); // the offset relative to block start                                  offset = (offset << 4) | (length >> 4); // the offset relative to block start                                  length = (length & 0xF) + 2; // the number of bytes to copy                                  // the decompression buffer is supposed to wrap around back                                  // to the beginning when the end is reached. we save the                                  // need for such a buffer by pointing straight into the data                                  // buffer' and simulating this behaviour by modifying the                                  // pointers appropriately.                                  offset = (outPos / 4096) * 4096 + offset;                                  if (offset >= outPos) // take from previous block                                      offset -= 4096;                                  // ReSharper disable once CommentTypo                                  // note: can't use System.arraycopy' because the referenced                                  // bytes can cross through the current out position.                                  var end = offset + length;                                  while (offset < end)                                      dst[outPos++] = dst[offset++];                              }                              else                              { // literal                                  dst[outPos++] = src[inPos++];                              }                          }                          // copy it back without the pre buffered data                          src = dst;                          dst = new byte[uncompressedSize];                          Array.Copy(src' _compressedRtfPrebuf.Length' dst' 0' uncompressedSize);                      }                      break;                    default:                      throw new Exception("Unknown compression type (magic number " + magic + ")");              }
Magic Number,MsgReader.Outlook,RtfDecompressor,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\RtfDecompressor.cs,DecompressRtf,The following statement contains a magic number: switch (magic)              {                  case 0x414c454d:                      dst = new byte[uncompressedSize];                      Array.Copy(src' inPos' dst' outPos' uncompressedSize- inPos); // just copy it as it is                      break;                    case 0x75465a4c:                      {                          var crc32 = (int)GetU32(src' inPos);                          inPos += 4;                            if (crc32 != CalculateCrc32(src' 16' src.Length - 16))                              throw new Exception("compressed-RTF CRC32 failed");                                                    // magic number that identifies the stream as a compressed stream                          dst = new byte[_compressedRtfPrebuf.Length + uncompressedSize];                          Array.Copy(_compressedRtfPrebuf' 0' dst' 0' _compressedRtfPrebuf.Length);                          outPos = _compressedRtfPrebuf.Length;                          var flagCount = 0;                          var flags = 0;                          while (outPos < dst.Length)                          {                              // each flag byte flags 8 literals/references' 1 per bit                              flags = (flagCount++ % 8 == 0) ? GetU8(src' inPos++) : flags >> 1;                              if ((flags & 1) == 1)                              { // each flag bit is 1 for reference' 0 for literal                                  var offset = GetU8(src' inPos++);                                  var length = GetU8(src' inPos++);                                  //!!!!!!!!!            offset = (offset << 4) | (length >>> 4); // the offset relative to block start                                  offset = (offset << 4) | (length >> 4); // the offset relative to block start                                  length = (length & 0xF) + 2; // the number of bytes to copy                                  // the decompression buffer is supposed to wrap around back                                  // to the beginning when the end is reached. we save the                                  // need for such a buffer by pointing straight into the data                                  // buffer' and simulating this behaviour by modifying the                                  // pointers appropriately.                                  offset = (outPos / 4096) * 4096 + offset;                                  if (offset >= outPos) // take from previous block                                      offset -= 4096;                                  // ReSharper disable once CommentTypo                                  // note: can't use System.arraycopy' because the referenced                                  // bytes can cross through the current out position.                                  var end = offset + length;                                  while (offset < end)                                      dst[outPos++] = dst[offset++];                              }                              else                              { // literal                                  dst[outPos++] = src[inPos++];                              }                          }                          // copy it back without the pre buffered data                          src = dst;                          dst = new byte[uncompressedSize];                          Array.Copy(src' _compressedRtfPrebuf.Length' dst' 0' uncompressedSize);                      }                      break;                    default:                      throw new Exception("Unknown compression type (magic number " + magic + ")");              }
Magic Number,MsgReader.Outlook,RtfDecompressor,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\RtfDecompressor.cs,DecompressRtf,The following statement contains a magic number: switch (magic)              {                  case 0x414c454d:                      dst = new byte[uncompressedSize];                      Array.Copy(src' inPos' dst' outPos' uncompressedSize- inPos); // just copy it as it is                      break;                    case 0x75465a4c:                      {                          var crc32 = (int)GetU32(src' inPos);                          inPos += 4;                            if (crc32 != CalculateCrc32(src' 16' src.Length - 16))                              throw new Exception("compressed-RTF CRC32 failed");                                                    // magic number that identifies the stream as a compressed stream                          dst = new byte[_compressedRtfPrebuf.Length + uncompressedSize];                          Array.Copy(_compressedRtfPrebuf' 0' dst' 0' _compressedRtfPrebuf.Length);                          outPos = _compressedRtfPrebuf.Length;                          var flagCount = 0;                          var flags = 0;                          while (outPos < dst.Length)                          {                              // each flag byte flags 8 literals/references' 1 per bit                              flags = (flagCount++ % 8 == 0) ? GetU8(src' inPos++) : flags >> 1;                              if ((flags & 1) == 1)                              { // each flag bit is 1 for reference' 0 for literal                                  var offset = GetU8(src' inPos++);                                  var length = GetU8(src' inPos++);                                  //!!!!!!!!!            offset = (offset << 4) | (length >>> 4); // the offset relative to block start                                  offset = (offset << 4) | (length >> 4); // the offset relative to block start                                  length = (length & 0xF) + 2; // the number of bytes to copy                                  // the decompression buffer is supposed to wrap around back                                  // to the beginning when the end is reached. we save the                                  // need for such a buffer by pointing straight into the data                                  // buffer' and simulating this behaviour by modifying the                                  // pointers appropriately.                                  offset = (outPos / 4096) * 4096 + offset;                                  if (offset >= outPos) // take from previous block                                      offset -= 4096;                                  // ReSharper disable once CommentTypo                                  // note: can't use System.arraycopy' because the referenced                                  // bytes can cross through the current out position.                                  var end = offset + length;                                  while (offset < end)                                      dst[outPos++] = dst[offset++];                              }                              else                              { // literal                                  dst[outPos++] = src[inPos++];                              }                          }                          // copy it back without the pre buffered data                          src = dst;                          dst = new byte[uncompressedSize];                          Array.Copy(src' _compressedRtfPrebuf.Length' dst' 0' uncompressedSize);                      }                      break;                    default:                      throw new Exception("Unknown compression type (magic number " + magic + ")");              }
Magic Number,MsgReader.Outlook,RtfDecompressor,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\RtfDecompressor.cs,DecompressRtf,The following statement contains a magic number: switch (magic)              {                  case 0x414c454d:                      dst = new byte[uncompressedSize];                      Array.Copy(src' inPos' dst' outPos' uncompressedSize- inPos); // just copy it as it is                      break;                    case 0x75465a4c:                      {                          var crc32 = (int)GetU32(src' inPos);                          inPos += 4;                            if (crc32 != CalculateCrc32(src' 16' src.Length - 16))                              throw new Exception("compressed-RTF CRC32 failed");                                                    // magic number that identifies the stream as a compressed stream                          dst = new byte[_compressedRtfPrebuf.Length + uncompressedSize];                          Array.Copy(_compressedRtfPrebuf' 0' dst' 0' _compressedRtfPrebuf.Length);                          outPos = _compressedRtfPrebuf.Length;                          var flagCount = 0;                          var flags = 0;                          while (outPos < dst.Length)                          {                              // each flag byte flags 8 literals/references' 1 per bit                              flags = (flagCount++ % 8 == 0) ? GetU8(src' inPos++) : flags >> 1;                              if ((flags & 1) == 1)                              { // each flag bit is 1 for reference' 0 for literal                                  var offset = GetU8(src' inPos++);                                  var length = GetU8(src' inPos++);                                  //!!!!!!!!!            offset = (offset << 4) | (length >>> 4); // the offset relative to block start                                  offset = (offset << 4) | (length >> 4); // the offset relative to block start                                  length = (length & 0xF) + 2; // the number of bytes to copy                                  // the decompression buffer is supposed to wrap around back                                  // to the beginning when the end is reached. we save the                                  // need for such a buffer by pointing straight into the data                                  // buffer' and simulating this behaviour by modifying the                                  // pointers appropriately.                                  offset = (outPos / 4096) * 4096 + offset;                                  if (offset >= outPos) // take from previous block                                      offset -= 4096;                                  // ReSharper disable once CommentTypo                                  // note: can't use System.arraycopy' because the referenced                                  // bytes can cross through the current out position.                                  var end = offset + length;                                  while (offset < end)                                      dst[outPos++] = dst[offset++];                              }                              else                              { // literal                                  dst[outPos++] = src[inPos++];                              }                          }                          // copy it back without the pre buffered data                          src = dst;                          dst = new byte[uncompressedSize];                          Array.Copy(src' _compressedRtfPrebuf.Length' dst' 0' uncompressedSize);                      }                      break;                    default:                      throw new Exception("Unknown compression type (magic number " + magic + ")");              }
Magic Number,MsgReader.Outlook,RtfDecompressor,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\RtfDecompressor.cs,DecompressRtf,The following statement contains a magic number: switch (magic)              {                  case 0x414c454d:                      dst = new byte[uncompressedSize];                      Array.Copy(src' inPos' dst' outPos' uncompressedSize- inPos); // just copy it as it is                      break;                    case 0x75465a4c:                      {                          var crc32 = (int)GetU32(src' inPos);                          inPos += 4;                            if (crc32 != CalculateCrc32(src' 16' src.Length - 16))                              throw new Exception("compressed-RTF CRC32 failed");                                                    // magic number that identifies the stream as a compressed stream                          dst = new byte[_compressedRtfPrebuf.Length + uncompressedSize];                          Array.Copy(_compressedRtfPrebuf' 0' dst' 0' _compressedRtfPrebuf.Length);                          outPos = _compressedRtfPrebuf.Length;                          var flagCount = 0;                          var flags = 0;                          while (outPos < dst.Length)                          {                              // each flag byte flags 8 literals/references' 1 per bit                              flags = (flagCount++ % 8 == 0) ? GetU8(src' inPos++) : flags >> 1;                              if ((flags & 1) == 1)                              { // each flag bit is 1 for reference' 0 for literal                                  var offset = GetU8(src' inPos++);                                  var length = GetU8(src' inPos++);                                  //!!!!!!!!!            offset = (offset << 4) | (length >>> 4); // the offset relative to block start                                  offset = (offset << 4) | (length >> 4); // the offset relative to block start                                  length = (length & 0xF) + 2; // the number of bytes to copy                                  // the decompression buffer is supposed to wrap around back                                  // to the beginning when the end is reached. we save the                                  // need for such a buffer by pointing straight into the data                                  // buffer' and simulating this behaviour by modifying the                                  // pointers appropriately.                                  offset = (outPos / 4096) * 4096 + offset;                                  if (offset >= outPos) // take from previous block                                      offset -= 4096;                                  // ReSharper disable once CommentTypo                                  // note: can't use System.arraycopy' because the referenced                                  // bytes can cross through the current out position.                                  var end = offset + length;                                  while (offset < end)                                      dst[outPos++] = dst[offset++];                              }                              else                              { // literal                                  dst[outPos++] = src[inPos++];                              }                          }                          // copy it back without the pre buffered data                          src = dst;                          dst = new byte[uncompressedSize];                          Array.Copy(src' _compressedRtfPrebuf.Length' dst' 0' uncompressedSize);                      }                      break;                    default:                      throw new Exception("Unknown compression type (magic number " + magic + ")");              }
Magic Number,MsgReader.Outlook,RtfDecompressor,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\RtfDecompressor.cs,DecompressRtf,The following statement contains a magic number: switch (magic)              {                  case 0x414c454d:                      dst = new byte[uncompressedSize];                      Array.Copy(src' inPos' dst' outPos' uncompressedSize- inPos); // just copy it as it is                      break;                    case 0x75465a4c:                      {                          var crc32 = (int)GetU32(src' inPos);                          inPos += 4;                            if (crc32 != CalculateCrc32(src' 16' src.Length - 16))                              throw new Exception("compressed-RTF CRC32 failed");                                                    // magic number that identifies the stream as a compressed stream                          dst = new byte[_compressedRtfPrebuf.Length + uncompressedSize];                          Array.Copy(_compressedRtfPrebuf' 0' dst' 0' _compressedRtfPrebuf.Length);                          outPos = _compressedRtfPrebuf.Length;                          var flagCount = 0;                          var flags = 0;                          while (outPos < dst.Length)                          {                              // each flag byte flags 8 literals/references' 1 per bit                              flags = (flagCount++ % 8 == 0) ? GetU8(src' inPos++) : flags >> 1;                              if ((flags & 1) == 1)                              { // each flag bit is 1 for reference' 0 for literal                                  var offset = GetU8(src' inPos++);                                  var length = GetU8(src' inPos++);                                  //!!!!!!!!!            offset = (offset << 4) | (length >>> 4); // the offset relative to block start                                  offset = (offset << 4) | (length >> 4); // the offset relative to block start                                  length = (length & 0xF) + 2; // the number of bytes to copy                                  // the decompression buffer is supposed to wrap around back                                  // to the beginning when the end is reached. we save the                                  // need for such a buffer by pointing straight into the data                                  // buffer' and simulating this behaviour by modifying the                                  // pointers appropriately.                                  offset = (outPos / 4096) * 4096 + offset;                                  if (offset >= outPos) // take from previous block                                      offset -= 4096;                                  // ReSharper disable once CommentTypo                                  // note: can't use System.arraycopy' because the referenced                                  // bytes can cross through the current out position.                                  var end = offset + length;                                  while (offset < end)                                      dst[outPos++] = dst[offset++];                              }                              else                              { // literal                                  dst[outPos++] = src[inPos++];                              }                          }                          // copy it back without the pre buffered data                          src = dst;                          dst = new byte[uncompressedSize];                          Array.Copy(src' _compressedRtfPrebuf.Length' dst' 0' uncompressedSize);                      }                      break;                    default:                      throw new Exception("Unknown compression type (magic number " + magic + ")");              }
Magic Number,MsgReader.Outlook,UnsendableRecipients,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,UnsendableRecipients,The following statement contains a magic number: var b = new BitArray(binaryReader.ReadBytes(4));
Magic Number,MsgReader.Outlook,UnsendableRecipients,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,UnsendableRecipients,The following statement contains a magic number: TransmittableDisplayNameIncluded = b[2];
Magic Number,MsgReader.Outlook,UnsendableRecipients,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,UnsendableRecipients,The following statement contains a magic number: DisplayNameIncluded = b[3];
Magic Number,MsgReader.Outlook,UnsendableRecipients,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,UnsendableRecipients,The following statement contains a magic number: EmailAddressIncluded = b[4];
Magic Number,MsgReader.Outlook,UnsendableRecipients,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,UnsendableRecipients,The following statement contains a magic number: var bt = new BitArray(3);
Magic Number,MsgReader.Outlook,UnsendableRecipients,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,UnsendableRecipients,The following statement contains a magic number: bt.Set(0' b[5]);
Magic Number,MsgReader.Outlook,UnsendableRecipients,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,UnsendableRecipients,The following statement contains a magic number: bt.Set(1' b[6]);
Magic Number,MsgReader.Outlook,UnsendableRecipients,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,UnsendableRecipients,The following statement contains a magic number: bt.Set(2' b[7]);
Magic Number,MsgReader.Outlook,UnsendableRecipients,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,UnsendableRecipients,The following statement contains a magic number: bt.Set(2' b[7]);
Magic Number,MsgReader.Outlook,UnsendableRecipients,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,UnsendableRecipients,The following statement contains a magic number: AddressTypeIncluded = b[8];
Magic Number,MsgReader.Outlook,UnsendableRecipients,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,UnsendableRecipients,The following statement contains a magic number: SimpleDisplayNameIncluded = b[13];
Magic Number,MsgReader.Outlook,UnsendableRecipients,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,UnsendableRecipients,The following statement contains a magic number: StringsInUnicode = b[14];
Magic Number,MsgReader.Outlook,UnsendableRecipients,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,UnsendableRecipients,The following statement contains a magic number: var supportsRtf = !b[15];
Magic Number,MsgReader.Outlook,RecipientRow,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,RecipientRow,The following statement contains a magic number: binaryReader.ReadBytes(6);
Magic Number,MsgReader.Outlook,RecipientRow,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,RecipientRow,The following statement contains a magic number: switch (type)                  {                      case PropertyType.PT_NULL:                      {                          data = new byte[0];                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_BOOLEAN:                      {                          data = binaryReader.ReadBytes(1);                          binaryReader.ReadByte();                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_SHORT:                      {                          data = binaryReader.ReadBytes(2);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_LONG:                      case PropertyType.PT_FLOAT:                      case PropertyType.PT_ERROR:                      {                          data = binaryReader.ReadBytes(4);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_DOUBLE:                      case PropertyType.PT_APPTIME:                      case PropertyType.PT_I8:                      case PropertyType.PT_SYSTIME:                      {                          data = binaryReader.ReadBytes(8);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_CLSID:                      {                          data = binaryReader.ReadBytes(16);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_OBJECT:                          throw new NotSupportedException("The PT_OBJECT type is not supported");                        case PropertyType.PT_STRING8:                      case PropertyType.PT_UNICODE:                      case PropertyType.PT_BINARY:                      {                          var length = binaryReader.ReadInt16();                          data = binaryReader.ReadBytes(length);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_MV_SHORT:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(2);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_LONG:                      case PropertyType.PT_MV_FLOAT:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(4);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_DOUBLE:                      case PropertyType.PT_MV_APPTIME:                      case PropertyType.PT_MV_LONGLONG:                      case PropertyType.PT_MV_SYSTIME:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(8);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_TSTRING:                      case PropertyType.PT_MV_STRING8:                      case PropertyType.PT_MV_BINARY:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              var length = binaryReader.ReadInt16();                              data = binaryReader.ReadBytes(length);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_CLSID:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(16);                              RecipientProperties.Add(new Property(id' type' data));                          }                          break;                      }                        default:                          throw new ArgumentOutOfRangeException();                  }
Magic Number,MsgReader.Outlook,RecipientRow,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,RecipientRow,The following statement contains a magic number: switch (type)                  {                      case PropertyType.PT_NULL:                      {                          data = new byte[0];                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_BOOLEAN:                      {                          data = binaryReader.ReadBytes(1);                          binaryReader.ReadByte();                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_SHORT:                      {                          data = binaryReader.ReadBytes(2);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_LONG:                      case PropertyType.PT_FLOAT:                      case PropertyType.PT_ERROR:                      {                          data = binaryReader.ReadBytes(4);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_DOUBLE:                      case PropertyType.PT_APPTIME:                      case PropertyType.PT_I8:                      case PropertyType.PT_SYSTIME:                      {                          data = binaryReader.ReadBytes(8);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_CLSID:                      {                          data = binaryReader.ReadBytes(16);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_OBJECT:                          throw new NotSupportedException("The PT_OBJECT type is not supported");                        case PropertyType.PT_STRING8:                      case PropertyType.PT_UNICODE:                      case PropertyType.PT_BINARY:                      {                          var length = binaryReader.ReadInt16();                          data = binaryReader.ReadBytes(length);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_MV_SHORT:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(2);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_LONG:                      case PropertyType.PT_MV_FLOAT:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(4);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_DOUBLE:                      case PropertyType.PT_MV_APPTIME:                      case PropertyType.PT_MV_LONGLONG:                      case PropertyType.PT_MV_SYSTIME:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(8);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_TSTRING:                      case PropertyType.PT_MV_STRING8:                      case PropertyType.PT_MV_BINARY:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              var length = binaryReader.ReadInt16();                              data = binaryReader.ReadBytes(length);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_CLSID:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(16);                              RecipientProperties.Add(new Property(id' type' data));                          }                          break;                      }                        default:                          throw new ArgumentOutOfRangeException();                  }
Magic Number,MsgReader.Outlook,RecipientRow,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,RecipientRow,The following statement contains a magic number: switch (type)                  {                      case PropertyType.PT_NULL:                      {                          data = new byte[0];                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_BOOLEAN:                      {                          data = binaryReader.ReadBytes(1);                          binaryReader.ReadByte();                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_SHORT:                      {                          data = binaryReader.ReadBytes(2);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_LONG:                      case PropertyType.PT_FLOAT:                      case PropertyType.PT_ERROR:                      {                          data = binaryReader.ReadBytes(4);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_DOUBLE:                      case PropertyType.PT_APPTIME:                      case PropertyType.PT_I8:                      case PropertyType.PT_SYSTIME:                      {                          data = binaryReader.ReadBytes(8);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_CLSID:                      {                          data = binaryReader.ReadBytes(16);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_OBJECT:                          throw new NotSupportedException("The PT_OBJECT type is not supported");                        case PropertyType.PT_STRING8:                      case PropertyType.PT_UNICODE:                      case PropertyType.PT_BINARY:                      {                          var length = binaryReader.ReadInt16();                          data = binaryReader.ReadBytes(length);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_MV_SHORT:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(2);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_LONG:                      case PropertyType.PT_MV_FLOAT:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(4);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_DOUBLE:                      case PropertyType.PT_MV_APPTIME:                      case PropertyType.PT_MV_LONGLONG:                      case PropertyType.PT_MV_SYSTIME:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(8);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_TSTRING:                      case PropertyType.PT_MV_STRING8:                      case PropertyType.PT_MV_BINARY:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              var length = binaryReader.ReadInt16();                              data = binaryReader.ReadBytes(length);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_CLSID:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(16);                              RecipientProperties.Add(new Property(id' type' data));                          }                          break;                      }                        default:                          throw new ArgumentOutOfRangeException();                  }
Magic Number,MsgReader.Outlook,RecipientRow,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,RecipientRow,The following statement contains a magic number: switch (type)                  {                      case PropertyType.PT_NULL:                      {                          data = new byte[0];                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_BOOLEAN:                      {                          data = binaryReader.ReadBytes(1);                          binaryReader.ReadByte();                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_SHORT:                      {                          data = binaryReader.ReadBytes(2);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_LONG:                      case PropertyType.PT_FLOAT:                      case PropertyType.PT_ERROR:                      {                          data = binaryReader.ReadBytes(4);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_DOUBLE:                      case PropertyType.PT_APPTIME:                      case PropertyType.PT_I8:                      case PropertyType.PT_SYSTIME:                      {                          data = binaryReader.ReadBytes(8);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_CLSID:                      {                          data = binaryReader.ReadBytes(16);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_OBJECT:                          throw new NotSupportedException("The PT_OBJECT type is not supported");                        case PropertyType.PT_STRING8:                      case PropertyType.PT_UNICODE:                      case PropertyType.PT_BINARY:                      {                          var length = binaryReader.ReadInt16();                          data = binaryReader.ReadBytes(length);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_MV_SHORT:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(2);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_LONG:                      case PropertyType.PT_MV_FLOAT:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(4);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_DOUBLE:                      case PropertyType.PT_MV_APPTIME:                      case PropertyType.PT_MV_LONGLONG:                      case PropertyType.PT_MV_SYSTIME:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(8);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_TSTRING:                      case PropertyType.PT_MV_STRING8:                      case PropertyType.PT_MV_BINARY:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              var length = binaryReader.ReadInt16();                              data = binaryReader.ReadBytes(length);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_CLSID:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(16);                              RecipientProperties.Add(new Property(id' type' data));                          }                          break;                      }                        default:                          throw new ArgumentOutOfRangeException();                  }
Magic Number,MsgReader.Outlook,RecipientRow,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,RecipientRow,The following statement contains a magic number: switch (type)                  {                      case PropertyType.PT_NULL:                      {                          data = new byte[0];                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_BOOLEAN:                      {                          data = binaryReader.ReadBytes(1);                          binaryReader.ReadByte();                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_SHORT:                      {                          data = binaryReader.ReadBytes(2);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_LONG:                      case PropertyType.PT_FLOAT:                      case PropertyType.PT_ERROR:                      {                          data = binaryReader.ReadBytes(4);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_DOUBLE:                      case PropertyType.PT_APPTIME:                      case PropertyType.PT_I8:                      case PropertyType.PT_SYSTIME:                      {                          data = binaryReader.ReadBytes(8);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_CLSID:                      {                          data = binaryReader.ReadBytes(16);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_OBJECT:                          throw new NotSupportedException("The PT_OBJECT type is not supported");                        case PropertyType.PT_STRING8:                      case PropertyType.PT_UNICODE:                      case PropertyType.PT_BINARY:                      {                          var length = binaryReader.ReadInt16();                          data = binaryReader.ReadBytes(length);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_MV_SHORT:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(2);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_LONG:                      case PropertyType.PT_MV_FLOAT:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(4);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_DOUBLE:                      case PropertyType.PT_MV_APPTIME:                      case PropertyType.PT_MV_LONGLONG:                      case PropertyType.PT_MV_SYSTIME:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(8);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_TSTRING:                      case PropertyType.PT_MV_STRING8:                      case PropertyType.PT_MV_BINARY:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              var length = binaryReader.ReadInt16();                              data = binaryReader.ReadBytes(length);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_CLSID:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(16);                              RecipientProperties.Add(new Property(id' type' data));                          }                          break;                      }                        default:                          throw new ArgumentOutOfRangeException();                  }
Magic Number,MsgReader.Outlook,RecipientRow,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,RecipientRow,The following statement contains a magic number: switch (type)                  {                      case PropertyType.PT_NULL:                      {                          data = new byte[0];                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_BOOLEAN:                      {                          data = binaryReader.ReadBytes(1);                          binaryReader.ReadByte();                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_SHORT:                      {                          data = binaryReader.ReadBytes(2);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_LONG:                      case PropertyType.PT_FLOAT:                      case PropertyType.PT_ERROR:                      {                          data = binaryReader.ReadBytes(4);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_DOUBLE:                      case PropertyType.PT_APPTIME:                      case PropertyType.PT_I8:                      case PropertyType.PT_SYSTIME:                      {                          data = binaryReader.ReadBytes(8);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_CLSID:                      {                          data = binaryReader.ReadBytes(16);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_OBJECT:                          throw new NotSupportedException("The PT_OBJECT type is not supported");                        case PropertyType.PT_STRING8:                      case PropertyType.PT_UNICODE:                      case PropertyType.PT_BINARY:                      {                          var length = binaryReader.ReadInt16();                          data = binaryReader.ReadBytes(length);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_MV_SHORT:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(2);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_LONG:                      case PropertyType.PT_MV_FLOAT:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(4);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_DOUBLE:                      case PropertyType.PT_MV_APPTIME:                      case PropertyType.PT_MV_LONGLONG:                      case PropertyType.PT_MV_SYSTIME:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(8);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_TSTRING:                      case PropertyType.PT_MV_STRING8:                      case PropertyType.PT_MV_BINARY:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              var length = binaryReader.ReadInt16();                              data = binaryReader.ReadBytes(length);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_CLSID:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(16);                              RecipientProperties.Add(new Property(id' type' data));                          }                          break;                      }                        default:                          throw new ArgumentOutOfRangeException();                  }
Magic Number,MsgReader.Outlook,RecipientRow,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,RecipientRow,The following statement contains a magic number: switch (type)                  {                      case PropertyType.PT_NULL:                      {                          data = new byte[0];                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_BOOLEAN:                      {                          data = binaryReader.ReadBytes(1);                          binaryReader.ReadByte();                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_SHORT:                      {                          data = binaryReader.ReadBytes(2);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_LONG:                      case PropertyType.PT_FLOAT:                      case PropertyType.PT_ERROR:                      {                          data = binaryReader.ReadBytes(4);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_DOUBLE:                      case PropertyType.PT_APPTIME:                      case PropertyType.PT_I8:                      case PropertyType.PT_SYSTIME:                      {                          data = binaryReader.ReadBytes(8);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_CLSID:                      {                          data = binaryReader.ReadBytes(16);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_OBJECT:                          throw new NotSupportedException("The PT_OBJECT type is not supported");                        case PropertyType.PT_STRING8:                      case PropertyType.PT_UNICODE:                      case PropertyType.PT_BINARY:                      {                          var length = binaryReader.ReadInt16();                          data = binaryReader.ReadBytes(length);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_MV_SHORT:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(2);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_LONG:                      case PropertyType.PT_MV_FLOAT:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(4);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_DOUBLE:                      case PropertyType.PT_MV_APPTIME:                      case PropertyType.PT_MV_LONGLONG:                      case PropertyType.PT_MV_SYSTIME:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(8);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_TSTRING:                      case PropertyType.PT_MV_STRING8:                      case PropertyType.PT_MV_BINARY:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              var length = binaryReader.ReadInt16();                              data = binaryReader.ReadBytes(length);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_CLSID:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(16);                              RecipientProperties.Add(new Property(id' type' data));                          }                          break;                      }                        default:                          throw new ArgumentOutOfRangeException();                  }
Magic Number,MsgReader.Outlook,RecipientRow,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,RecipientRow,The following statement contains a magic number: switch (type)                  {                      case PropertyType.PT_NULL:                      {                          data = new byte[0];                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_BOOLEAN:                      {                          data = binaryReader.ReadBytes(1);                          binaryReader.ReadByte();                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_SHORT:                      {                          data = binaryReader.ReadBytes(2);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_LONG:                      case PropertyType.PT_FLOAT:                      case PropertyType.PT_ERROR:                      {                          data = binaryReader.ReadBytes(4);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_DOUBLE:                      case PropertyType.PT_APPTIME:                      case PropertyType.PT_I8:                      case PropertyType.PT_SYSTIME:                      {                          data = binaryReader.ReadBytes(8);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_CLSID:                      {                          data = binaryReader.ReadBytes(16);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_OBJECT:                          throw new NotSupportedException("The PT_OBJECT type is not supported");                        case PropertyType.PT_STRING8:                      case PropertyType.PT_UNICODE:                      case PropertyType.PT_BINARY:                      {                          var length = binaryReader.ReadInt16();                          data = binaryReader.ReadBytes(length);                          RecipientProperties.Add(new Property(id' type' data));                          break;                      }                        case PropertyType.PT_MV_SHORT:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(2);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_LONG:                      case PropertyType.PT_MV_FLOAT:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(4);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_DOUBLE:                      case PropertyType.PT_MV_APPTIME:                      case PropertyType.PT_MV_LONGLONG:                      case PropertyType.PT_MV_SYSTIME:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(8);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_TSTRING:                      case PropertyType.PT_MV_STRING8:                      case PropertyType.PT_MV_BINARY:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              var length = binaryReader.ReadInt16();                              data = binaryReader.ReadBytes(length);                              RecipientProperties.Add(new Property(id' type' data' true));                          }                          break;                      }                        case PropertyType.PT_MV_CLSID:                      {                          var count = binaryReader.ReadInt16();                          for (var j = 0; j < count; j++)                          {                              data = binaryReader.ReadBytes(16);                              RecipientProperties.Add(new Property(id' type' data));                          }                          break;                      }                        default:                          throw new ArgumentOutOfRangeException();                  }
Magic Number,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,CheckFileNameAndOutputFolder,The following statement contains a magic number: var header = new byte[2];
Magic Number,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,CheckFileNameAndOutputFolder,The following statement contains a magic number: fileStream.Read(header' 0' 2);
Magic Number,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,ExtractMsgEmailHeader,The following statement contains a magic number: maxLength = languageConsts.Select(languageConst => languageConst.Length).Concat(new[] {0}).Max() + 2;
Magic Number,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,WriteEmlStreamEmail,The following statement contains a magic number: maxLength = languageConsts.Select(languageConst => languageConst.Length).Concat(new[] { 0 }).Max() + 2;
Magic Number,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,WriteEmlEmail,The following statement contains a magic number: maxLength = languageConsts.Select(languageConst => languageConst.Length).Concat(new[] { 0 }).Max() + 2;
Magic Number,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,WriteMsgAppointment,The following statement contains a magic number: maxLength = languageConsts.Select(languageConst => languageConst.Length).Concat(new[] {0}).Max() + 2;
Magic Number,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,WriteMsgTask,The following statement contains a magic number: maxLength = languageConsts.Select(languageConst => languageConst.Length).Concat(new[] {0}).Max() + 2;
Magic Number,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,WriteMsgTask,The following statement contains a magic number: WriteHeaderLine(taskHeader' htmlBody' maxLength' LanguageConsts.TaskPercentageCompleteLabel'                      (message.Task.PercentageComplete*100) + "%");
Magic Number,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,WriteMsgContact,The following statement contains a magic number: maxLength = languageConsts.Select(languageConst => languageConst.Length).Concat(new[] {0}).Max() + 2;
Magic Number,MsgReader.Rtf,ByteBuffer,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\ByteBuffer.cs,Clear,The following statement contains a magic number: BsBuffer = new byte[ 16 ];
Magic Number,MsgReader.Rtf,ByteBuffer,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\ByteBuffer.cs,FixBuffer,The following statement contains a magic number: newSize = (int)( BsBuffer.Length * 1.5 );
Magic Number,MsgReader.Rtf,ByteBuffer,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\ByteBuffer.cs,FixBuffer,The following statement contains a magic number: newSize < (int)( BsBuffer.Length * 1.5 )
Magic Number,MsgReader.Rtf,ColorTable,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\ColorTable.cs,Add,The following statement contains a magic number: c = Color.FromArgb(255' c);
Magic Number,MsgReader.Rtf,ColorTable,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\ColorTable.cs,Add,The following statement contains a magic number: c.A != 255
Magic Number,MsgReader.Rtf,ColorTable,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\ColorTable.cs,IndexOf,The following statement contains a magic number: c = Color.FromArgb(255' c);
Magic Number,MsgReader.Rtf,ColorTable,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\ColorTable.cs,IndexOf,The following statement contains a magic number: c.A != 255
Magic Number,MsgReader.Rtf,DocumentFormatInfo,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DocumentFormatInfo.cs,DocumentFormatInfo,The following statement contains a magic number: FontSize = 12f;
Magic Number,MsgReader.Rtf,DocumentFormatInfo,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DocumentFormatInfo.cs,DocumentFormatInfo,The following statement contains a magic number: StandTabWidth = 100;
Magic Number,MsgReader.Rtf,DocumentFormatInfo,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DocumentFormatInfo.cs,Reset,The following statement contains a magic number: FontSize = 12;
Magic Number,MsgReader.Rtf,DocumentWriter,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DocumentWriter.cs,WriteStartString,The following statement contains a magic number: Writer.WriteKeyword("fs" + Convert.ToInt32(info.FontSize*2));
Magic Number,MsgReader.Rtf,DocumentWriter,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DocumentWriter.cs,WriteImage,The following statement contains a magic number: Writer.WriteKeyword("picscalex" + Convert.ToInt32(width*100.0/image.Size.Width));
Magic Number,MsgReader.Rtf,DocumentWriter,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DocumentWriter.cs,WriteImage,The following statement contains a magic number: Writer.WriteKeyword("picscaley" + Convert.ToInt32(height*100.0/image.Size.Height));
Magic Number,MsgReader.Rtf,DocumentWriter,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DocumentWriter.cs,WriteImage,The following statement contains a magic number: Writer.WriteKeyword("picwgoal" + Convert.ToString(image.Size.Width*15));
Magic Number,MsgReader.Rtf,DocumentWriter,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DocumentWriter.cs,WriteImage,The following statement contains a magic number: Writer.WriteKeyword("pichgoal" + Convert.ToString(image.Size.Height*15));
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,DomDocument,The following statement contains a magic number: DefaultRowHeight = 400;
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,DomDocument,The following statement contains a magic number: FooterDistance = 720;
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,DomDocument,The following statement contains a magic number: HeaderDistance = 720;
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,DomDocument,The following statement contains a magic number: BottomMargin = 1440;
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,DomDocument,The following statement contains a magic number: RightMargin = 1800;
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,DomDocument,The following statement contains a magic number: TopMargin = 1440;
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,DomDocument,The following statement contains a magic number: LeftMargin = 1800;
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,DomDocument,The following statement contains a magic number: PaperHeight = 15840;
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,DomDocument,The following statement contains a magic number: PaperWidth = 12240;
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,Load,The following statement contains a magic number: reader.TokenCount - _tokenCount > 100
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,Load,The following statement contains a magic number: switch (reader.Keyword)                      {                          case Consts.FromHtml:                              // Extract html from rtf                              ReadHtmlContent(reader);                              return;                            #region Read document information                          case Consts.Listtable:                              ReadListTable(reader);                              return;                            case Consts.ListOverride:                              // Unknow keyword                              ReadToEndOfGroup(reader);                              break;                            case Consts.Ansi:                              break;                            case Consts.Ansicpg:                              // Read default encoding                              _defaultEncoding = Encoding.GetEncoding(reader.Parameter);                              break;                            case Consts.Fonttbl:                              // Read font table                              ReadFontTable(reader);                              break;                            case Consts.ListOverrideTable:                              ReadListOverrideTable(reader);                              break;                            case Consts.FileTable:                              // Unsupport file list                              ReadToEndOfGroup(reader);                              break; // Finish current level                            case Consts.Colortbl:                              // Read color table                              ReadColorTable(reader);                              return; // Finish current level                            case Consts.StyleSheet:                              // Unsupport style sheet list                              ReadToEndOfGroup(reader);                              break;                            case Consts.Generator:                              // Read document generator                              Generator = ReadInnerText(reader' true);                              break;                            case Consts.Info:                              // Read document information                              ReadDocumentInfo(reader);                              return;                            case Consts.Headery:                              if (reader.HasParam)                                  HeaderDistance = reader.Parameter;                              break;                            case Consts.Footery:                              if (reader.HasParam)                                  FooterDistance = reader.Parameter;                              break;                            case Consts.Header:                              // Analyse header                              var header = new DomHeader {Style = RtfHeaderFooterStyle.AllPages};                              AppendChild(header);                              Load(reader' parentFormat);                              header.Locked = true;                              _paragraphFormat = new DocumentFormatInfo();                              break;                            case Consts.Headerl:                              // Analyse header                              var header1 = new DomHeader {Style = RtfHeaderFooterStyle.LeftPages};                              AppendChild(header1);                              Load(reader' parentFormat);                              header1.Locked = true;                              _paragraphFormat = new DocumentFormatInfo();                              break;                            case Consts.Headerr:                              // Analyse header                              var headerr = new DomHeader {Style = RtfHeaderFooterStyle.RightPages};                              AppendChild(headerr);                              Load(reader' parentFormat);                              headerr.Locked = true;                              _paragraphFormat = new DocumentFormatInfo();                              break;                            case Consts.Headerf:                              // Analyse header                              var headerf = new DomHeader {Style = RtfHeaderFooterStyle.FirstPage};                              AppendChild(headerf);                              Load(reader' parentFormat);                              headerf.Locked = true;                              _paragraphFormat = new DocumentFormatInfo();                              break;                            case Consts.Footer:                              // Analyse footer                              var footer = new DomFooter {Style = RtfHeaderFooterStyle.FirstPage};                              AppendChild(footer);                              Load(reader' parentFormat);                              footer.Locked = true;                              _paragraphFormat = new DocumentFormatInfo();                              break;                            case Consts.Footerl:                              // analyse footer                              var footerl = new DomFooter {Style = RtfHeaderFooterStyle.LeftPages};                              AppendChild(footerl);                              Load(reader' parentFormat);                              footerl.Locked = true;                              _paragraphFormat = new DocumentFormatInfo();                              break;                            case Consts.Footerr:                              // Analyse footer                              var footerr = new DomFooter {Style = RtfHeaderFooterStyle.RightPages};                              AppendChild(footerr);                              Load(reader' parentFormat);                              footerr.Locked = true;                              _paragraphFormat = new DocumentFormatInfo();                              break;                            case Consts.Footerf:                              // analyse footer                              var footerf = new DomFooter {Style = RtfHeaderFooterStyle.FirstPage};                              AppendChild(footerf);                              Load(reader' parentFormat);                              footerf.Locked = true;                              _paragraphFormat = new DocumentFormatInfo();                              break;                            case Consts.Xmlns:                              // Unsupport xml namespace                              ReadToEndOfGroup(reader);                              break;                            case Consts.Nonesttables:                              // I support nest table ' then ignore this keyword                              ReadToEndOfGroup(reader);                              break;                            case Consts.Xmlopen:                              // Unsupport xmlopen keyword                              break;                            case Consts.Revtbl:                              //ReadToEndGround(reader);                              break;                          #endregion                            #region Read document information                          case Consts.Paperw:                              // Read paper width                              PaperWidth = reader.Parameter;                              break;                            case Consts.Paperh:                              // Read paper height                              PaperHeight = reader.Parameter;                              break;                            case Consts.Margl:                              // Read left margin                              LeftMargin = reader.Parameter;                              break;                            case Consts.Margr:                              // Read right margin                              RightMargin = reader.Parameter;                              break;                            case Consts.Margb:                              // Read bottom margin                              BottomMargin = reader.Parameter;                              break;                            case Consts.Margt:                              // Read top margin                               TopMargin = reader.Parameter;                              break;                            case Consts.Landscape:                              // Set landscape                              Landscape = true;                              break;                            case Consts.Fchars:                              FollowingChars = ReadInnerText(reader' true);                              break;                            case Consts.Lchars:                              LeadingChars = ReadInnerText(reader' true);                              break;                            case "pnseclvl":                              // Ignore this keyword                              ReadToEndOfGroup(reader);                              break;                          #endregion                            #region Read paragraph format                          case Consts.Pard:                              _startContent = true;                              if (forbitPard)                                  continue;                                // Clear paragraph format                              _paragraphFormat.ResetParagraph();                              // Format.ResetParagraph();                              break;                            case Consts.Par:                              _startContent = true;                              // New paragraph                              if (GetLastElement(typeof(DomParagraph)) == null)                              {                                  var paragraph = new DomParagraph {Format = _paragraphFormat};                                  _paragraphFormat = _paragraphFormat.Clone();                                  AddContentElement(paragraph);                                  paragraph.Locked = true;                              }                              else                              {                                  CompleteParagraph();                                  var p = new DomParagraph {Format = _paragraphFormat};                                  AddContentElement(p);                              }                                _startContent = true;                              break;                            case Consts.Page:                              _startContent = true;                              CompleteParagraph();                              AddContentElement(new DomPageBreak());                              break;                            case Consts.Pagebb:                              _startContent = true;                              _paragraphFormat.PageBreak = true;                              break;                            case Consts.Ql:                              // Left alignment                              _startContent = true;                              _paragraphFormat.Align = RtfAlignment.Left;                              break;                            case Consts.Qc:                              // Center alignment                              _startContent = true;                              _paragraphFormat.Align = RtfAlignment.Center;                              break;                            case Consts.Qr:                              // Right alignment                              _startContent = true;                              _paragraphFormat.Align = RtfAlignment.Right;                              break;                            case Consts.Qj:                              // Jusitify alignment                              _startContent = true;                              _paragraphFormat.Align = RtfAlignment.Justify;                              break;                            case Consts.Sl:                              // Line spacing                              _startContent = true;                              if (reader.Parameter >= 0)                                  _paragraphFormat.LineSpacing = reader.Parameter;                              break;                            case Consts.Slmult:                              _startContent = true;                              _paragraphFormat.MultipleLineSpacing = (reader.Parameter == 1);                              break;                            case Consts.Sb:                              // Spacing before paragraph                              _startContent = true;                              _paragraphFormat.SpacingBefore = reader.Parameter;                              break;                            case Consts.Sa:                              // Spacing after paragraph                              _startContent = true;                              _paragraphFormat.SpacingAfter = reader.Parameter;                              break;                            case Consts.Fi:                              // Indent first line                              _startContent = true;                              _paragraphFormat.ParagraphFirstLineIndent = reader.Parameter;                              break;                            case Consts.Brdrw:                              _startContent = true;                              if (reader.HasParam)                                  _paragraphFormat.BorderWidth = reader.Parameter;                              break;                            case Consts.Pn:                              _startContent = true;                              _paragraphFormat.ListId = -1;                              break;                            case Consts.Pntext:                              break;                            case Consts.Pntxtb:                              break;                            case Consts.Pntxta:                              break;                            case Consts.Pnlvlbody:                              _startContent = true;                              break;                            case Consts.Pnlvlblt:                              _startContent = true;                              break;                            case Consts.Listtext:                              _startContent = true;                              var text = ReadInnerText(reader' true);                              if (text != null)                              {                                  text = text.Trim();                                  _listTextFlag = text.StartsWith("l") ? 1 : 2;                              }                                break;                            case Consts.Ls:                              _startContent = true;                              _paragraphFormat.ListId = reader.Parameter;                              _listTextFlag = 0;                              break;                            case Consts.Li:                              _startContent = true;                              if (reader.HasParam)                                  _paragraphFormat.LeftIndent = reader.Parameter;                              break;                            case Consts.Line:                              _startContent = true;                              if (format.ReadText)                              {                                  var line = new DomLineBreak                                  {                                      NativeLevel = reader.Level                                  };                                  AddContentElement(line);                              }                                break;                          #endregion                            #region Read text format                          case Consts.Insrsid:                              break;                            case Consts.Plain:                              // Clear text format                              _startContent = true;                              format.ResetText();                              break;                            case Consts.F:                              // Font name                              _startContent = true;                              if (format.ReadText)                              {                                  var fontName = FontTable.GetFontName(reader.Parameter);                                  if (fontName != null)                                      fontName = fontName.Trim();                                  if (string.IsNullOrEmpty(fontName))                                      fontName = DefaultFontName;                                    if (ChangeTimesNewRoman)                                  {                                      if (fontName == "Times New Roman")                                          fontName = DefaultFontName;                                  }                                    format.FontName = fontName;                              }                                _fontChartset = FontTable[reader.Parameter].Encoding;                              break;                            case Consts.Af:                              _associateFontChartset = FontTable[reader.Parameter].Encoding;                              break;                            case Consts.Fs:                              // Font size                              _startContent = true;                              if (format.ReadText)                              {                                  if (reader.HasParam)                                      format.FontSize = reader.Parameter / 2.0f;                              }                                break;                            case Consts.Cf:                              // Font color                              _startContent = true;                              if (format.ReadText)                              {                                  if (reader.HasParam)                                      format.TextColor = ColorTable.GetColor(reader.Parameter' Color.Black);                              }                                break;                            case Consts.Cb:                          case Consts.Chcbpat:                              // Background color                              _startContent = true;                              if (format.ReadText)                              {                                  if (reader.HasParam)                                  {                                      format.BackColor = ColorTable.GetColor(reader.Parameter' Color.Empty);                                  }                              }                                break;                            case Consts.B:                              // Bold                              _startContent = true;                              if (format.ReadText)                                  format.Bold = (reader.HasParam == false || reader.Parameter != 0);                              break;                            case Consts.V:                              // Hidden text                              _startContent = true;                              if (format.ReadText)                              {                                  if (reader.HasParam && reader.Parameter == 0)                                      format.Hidden = false;                                  else                                      format.Hidden = true;                              }                                break;                            case Consts.Highlight:                              // Highlight content                              _startContent = true;                              if (format.ReadText)                              {                                  if (reader.HasParam)                                      format.BackColor = ColorTable.GetColor(                                          reader.Parameter'                                          Color.Empty);                              }                                break;                            case Consts.I:                              // Italic                              _startContent = true;                              if (format.ReadText)                                  format.Italic = (reader.HasParam == false || reader.Parameter != 0);                              break;                            case Consts.Ul:                              // Under line                              _startContent = true;                              if (format.ReadText)                                  format.Underline = (reader.HasParam == false || reader.Parameter != 0);                              break;                            case Consts.Strike:                              // Strikeout                              _startContent = true;                              if (format.ReadText)                                  format.Strikeout = (reader.HasParam == false || reader.Parameter != 0);                              break;                            case Consts.Sub:                              // Subscript                              _startContent = true;                              if (format.ReadText)                                  format.Subscript = (reader.HasParam == false || reader.Parameter != 0);                              break;                            case Consts.Super:                              // superscript                              _startContent = true;                              if (format.ReadText)                                  format.Superscript = (reader.HasParam == false || reader.Parameter != 0);                              break;                            case Consts.Nosupersub:                              // nosupersub                              _startContent = true;                              format.Subscript = false;                              format.Superscript = false;                              break;                            case Consts.Brdrb:                              _startContent = true;                              //format.ParagraphBorder.Bottom = true;                              _paragraphFormat.BottomBorder = true;                              break;                            case Consts.Brdrl:                              _startContent = true;                              //format.ParagraphBorder.Left = true ;                              _paragraphFormat.LeftBorder = true;                              break;                            case Consts.Brdrr:                              _startContent = true;                              //format.ParagraphBorder.Right = true ;                              _paragraphFormat.RightBorder = true;                              break;                            case Consts.Brdrt:                              _startContent = true;                              //format.ParagraphBorder.Top = true;                              _paragraphFormat.BottomBorder = true;                              break;                            case Consts.Brdrcf:                              _startContent = true;                              var element = GetLastElement(typeof(DomTableRow)' false);                              if (element is DomTableRow)                              {                                  // Reading a table row                                  var row = (DomTableRow) element;                                  if (row.CellSettings.Count > 0)                                  {                                      var style = (AttributeList) row.CellSettings[row.CellSettings.Count - 1];                                      style.Add(reader.Keyword' reader.Parameter);                                  }                              }                              else                              {                                  _paragraphFormat.BorderColor = ColorTable.GetColor(reader.Parameter' Color.Black);                                  format.BorderColor = format.BorderColor;                              }                                break;                            case Consts.Brdrs:                              _startContent = true;                              _paragraphFormat.BorderThickness = false;                              format.BorderThickness = false;                              break;                            case Consts.Brdrth:                              _startContent = true;                              _paragraphFormat.BorderThickness = true;                              format.BorderThickness = true;                              break;                            case Consts.Brdrdot:                              _startContent = true;                              _paragraphFormat.BorderStyle = DashStyle.Dot;                              format.BorderStyle = DashStyle.Dot;                              break;                            case Consts.Brdrdash:                              _startContent = true;                              _paragraphFormat.BorderStyle = DashStyle.Dash;                              format.BorderStyle = DashStyle.Dash;                              break;                            case Consts.Brdrdashd:                              _startContent = true;                              _paragraphFormat.BorderStyle = DashStyle.DashDot;                              format.BorderStyle = DashStyle.DashDot;                              break;                            case Consts.Brdrdashdd:                              _startContent = true;                              _paragraphFormat.BorderStyle = DashStyle.DashDotDot;                              format.BorderStyle = DashStyle.DashDotDot;                              break;                            case Consts.Brdrnil:                              _startContent = true;                              _paragraphFormat.LeftBorder = false;                              _paragraphFormat.TopBorder = false;                              _paragraphFormat.RightBorder = false;                              _paragraphFormat.BottomBorder = false;                                format.LeftBorder = false;                              format.TopBorder = false;                              format.RightBorder = false;                              format.BottomBorder = false;                              break;                            case Consts.Brsp:                              _startContent = true;                              if (reader.HasParam)                                  _paragraphFormat.BorderSpacing = reader.Parameter;                              break;                            case Consts.Chbrdr:                              _startContent = true;                              format.LeftBorder = true;                              format.TopBorder = true;                              format.RightBorder = true;                              format.BottomBorder = true;                              break;                            case Consts.Bkmkstart:                              // Book mark                              _startContent = true;                              if (format.ReadText && _startContent)                              {                                  var bk = new DomBookmark();                                  bk.Name = ReadInnerText(reader' true);                                  bk.Locked = true;                                  AddContentElement(bk);                              }                                break;                            case Consts.Bkmkend:                              forbitPard = true;                              format.ReadText = false;                              break;                            case Consts.Field:                              // Field                              _startContent = true;                              ReadDomField(reader' format);                              return; // finish current level                          //break;                          #endregion                            #region Read object                          case Consts.Object:                          {                              // object                              _startContent = true;                              ReadDomObject(reader' format);                              return; // finish current level                          }                          #endregion                            #region Read image                          case Consts.Shppict:                              // Continue the following token                              break;                            case Consts.Nonshppict:                              // unsupport keyword                              ReadToEndOfGroup(reader);                              break;                            case Consts.Pict:                          {                              // Read image data                              //ReadDomImage(reader' format);                              _startContent = true;                              var image = new DomImage();                              image.NativeLevel = reader.Level;                              AddContentElement(image);                              break;                          }                            case Consts.Picscalex:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.ScaleX = reader.Parameter;                              break;                          }                            case Consts.Picscaley:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.ScaleY = reader.Parameter;                              break;                          }                            case Consts.Picwgoal:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.DesiredWidth = reader.Parameter;                              break;                          }                            case Consts.Pichgoal:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.DesiredHeight = reader.Parameter;                              break;                          }                            case Consts.Blipuid:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.Id = ReadInnerText(reader' true);                              break;                          }                            case Consts.Emfblip:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.PicType = RtfPictureType.Emfblip;                              break;                          }                            case Consts.Pngblip:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.PicType = RtfPictureType.Pngblip;                              break;                          }                            case Consts.Jpegblip:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.PicType = RtfPictureType.Jpegblip;                              break;                          }                            case Consts.Macpict:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.PicType = RtfPictureType.Macpict;                              break;                          }                            case Consts.Pmmetafile:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.PicType = RtfPictureType.Pmmetafile;                              break;                          }                            case Consts.Wmetafile:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.PicType = RtfPictureType.Wmetafile;                              break;                          }                            case Consts.Dibitmap:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.PicType = RtfPictureType.Dibitmap;                              break;                          }                            case Consts.Wbitmap:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.PicType = RtfPictureType.Wbitmap;                              break;                          }                          #endregion                            #region Read shape                          case Consts.Sp:                          {                              // Begin read shape property                              var level = 0;                              string vName = null;                              string vValue = null;                              while (reader.ReadToken() != null)                              {                                  if (reader.TokenType == RtfTokenType.GroupStart)                                      level++;                                  else if (reader.TokenType == RtfTokenType.GroupEnd)                                  {                                      level--;                                      if (level < 0)                                      {                                          break;                                      }                                  }                                  else                                      switch (reader.Keyword)                                      {                                          case Consts.Sn:                                              vName = ReadInnerText(reader' true);                                              break;                                          case Consts.Sv:                                              vValue = ReadInnerText(reader' true);                                              break;                                      }                              }                                var shape = (DomShape) GetLastElement(typeof(DomShape));                                if (shape != null)                                  shape.ExtAttrbutes[vName] = vValue;                              else                              {                                  var g = (DomShapeGroup) GetLastElement(typeof(DomShapeGroup));                                  if (g != null)                                  {                                      g.ExtAttrbutes[vName] = vValue;                                  }                              }                                break;                          }                            case Consts.Shptxt:                              // handle following token                              break;                            case Consts.Shprslt:                              // ignore this level                              ReadToEndOfGroup(reader);                              break;                            case Consts.Shp:                          {                              _startContent = true;                              var shape = new DomShape();                              shape.NativeLevel = reader.Level;                              AddContentElement(shape);                              break;                          }                          case Consts.Shpleft:                          {                              var shape = (DomShape) GetLastElement(typeof(DomShape));                              if (shape != null)                                  shape.Left = reader.Parameter;                              break;                          }                            case Consts.Shptop:                          {                              var shape = (DomShape) GetLastElement(typeof(DomShape));                              if (shape != null)                                  shape.Top = reader.Parameter;                              break;                          }                            case Consts.Shpright:                          {                              var shape = (DomShape) GetLastElement(typeof(DomShape));                              if (shape != null)                                  shape.Width = reader.Parameter - shape.Left;                              break;                          }                            case Consts.Shpbottom:                          {                              var shape = (DomShape) GetLastElement(typeof(DomShape));                              if (shape != null)                                  shape.Height = reader.Parameter - shape.Top;                              break;                          }                            case Consts.Shplid:                          {                              var shape = (DomShape) GetLastElement(typeof(DomShape));                              if (shape != null)                                  shape.Id = reader.Parameter;                              break;                          }                            case Consts.Shpz:                          {                              var shape = (DomShape) GetLastElement(typeof(DomShape));                              if (shape != null)                                  shape.ZIndex = reader.Parameter;                              break;                          }                            case Consts.Shpgrp:                          {                              var group = new DomShapeGroup();                              group.NativeLevel = reader.Level;                              AddContentElement(group);                              break;                          }                            case Consts.Shpinst:                              break;                          #endregion                            #region Read table                          case Consts.Intbl:                          case Consts.Trowd:                          case Consts.Itap:                          {                              // These keyword said than current paragraph is a table row                              _startContent = true;                              var es = GetLastElements(true);                              DomElement lastUnlockElement = null;                              DomElement lastTableElement = null;                              for (var count = es.Length - 1; count >= 0; count--)                              {                                  var e = es[count];                                  if (e.Locked == false)                                  {                                      if (lastUnlockElement == null && !(e is DomParagraph))                                          lastUnlockElement = e;                                      if (e is DomTableRow || e is DomTableCell)                                          lastTableElement = e;                                      break;                                  }                              }                                if (reader.Keyword == Consts.Intbl)                              {                                  if (lastTableElement == null)                                  {                                      // if can not find unlocked row                                       // then new row                                      var row = new DomTableRow {NativeLevel = reader.Level};                                      if (lastUnlockElement != null)                                          lastUnlockElement.AppendChild(row);                                  }                              }                              else if (reader.Keyword == Consts.Trowd)                              {                                  // clear row format                                  DomTableRow row;                                  if (lastTableElement == null)                                  {                                      row = new DomTableRow {NativeLevel = reader.Level};                                      if (lastUnlockElement != null)                                          lastUnlockElement.AppendChild(row);                                  }                                  else                                  {                                      row = lastTableElement as DomTableRow ?? (DomTableRow) lastTableElement.Parent;                                  }                                    row.Attributes.Clear();                                  row.CellSettings.Clear();                                  _paragraphFormat.ResetParagraph();                              }                              else if (reader.Keyword == Consts.Itap)                              {                                  // set nested level                                    if (reader.Parameter == 0)                                  {                                      // is the 0 level ' belong to document ' not to a table                                      //foreach (RTFDomElement element in es)                                      //{                                      //    if (element is RTFDomTableRow || element is RTFDomTableCell)                                      //    {                                      //        element.Locked = true;                                      //    }                                      //}                                  }                                  else                                  {                                      // in a row                                      DomTableRow row;                                      if (lastTableElement == null)                                      {                                          row = new DomTableRow {NativeLevel = reader.Level};                                          if (lastUnlockElement != null)                                              lastUnlockElement.AppendChild(row);                                      }                                      else                                          row = lastTableElement as DomTableRow ?? (DomTableRow) lastTableElement.Parent;                                        if (reader.Parameter == row.Level)                                      {                                      }                                      else if (reader.Parameter > row.Level)                                      {                                          // nested row                                          var newRow = new DomTableRow {Level = reader.Parameter};                                          var parentCell = (DomTableCell) GetLastElement(typeof(DomTableCell)' false);                                          if (parentCell == null)                                              AddContentElement(newRow);                                          else                                              parentCell.AppendChild(newRow);                                      }                                      else if (reader.Parameter < row.Level)                                      {                                          // exit nested row                                      }                                  }                              }                                break;                          }                            case Consts.Nesttableprops:                              // ignore                              break;                            case Consts.Row:                          {                              // finish read row                              _startContent = true;                              var es = GetLastElements(true);                              for (var count = es.Length - 1; count >= 0; count--)                              {                                  es[count].Locked = true;                                  if (es[count] is DomTableRow)                                      break;                              }                                break;                          }                            case Consts.Nestrow:                          {                              // finish nested row                              _startContent = true;                              var es = GetLastElements(true);                              for (var count = es.Length - 1; count >= 0; count--)                              {                                  es[count].Locked = true;                                  if (es[count] is DomTableRow)                                      break;                              }                                break;                          }                            case Consts.Trrh:                          case Consts.Trautofit:                          case Consts.Irowband:                          case Consts.Trhdr:                          case Consts.Trkeep:                          case Consts.Trkeepfollow:                          case Consts.Trleft:                          case Consts.Trqc:                          case Consts.Trql:                          case Consts.Trqr:                          case Consts.Trcbpat:                          case Consts.Trcfpat:                          case Consts.Trpat:                          case Consts.Trshdng:                          case Consts.TrwWidth:                          case Consts.TrwWidthA:                          case Consts.Irow:                          case Consts.Trpaddb:                          case Consts.Trpaddl:                          case Consts.Trpaddr:                          case Consts.Trpaddt:                          case Consts.Trpaddfb:                          case Consts.Trpaddfl:                          case Consts.Trpaddfr:                          case Consts.Trpaddft:                          case Consts.Lastrow:                          {                              // meet row control word ' not parse at first ' just save it                               _startContent = true;                              var row = (DomTableRow) GetLastElement(typeof(DomTableRow)' false);                              if (row != null)                              {                                  row.Attributes.Add(reader.Keyword' reader.Parameter);                              }                                break;                          }                            case Consts.Clvmgf:                          case Consts.Clvmrg:                          case Consts.Cellx:                          case Consts.Clvertalt:                          case Consts.Clvertalc:                          case Consts.Clvertalb:                          case Consts.ClNoWrap:                          case Consts.Clcbpat:                          case Consts.Clcfpat:                          case Consts.Clpadl:                          case Consts.Clpadt:                          case Consts.Clpadr:                          case Consts.Clpadb:                          case Consts.Clbrdrl:                          case Consts.Clbrdrt:                          case Consts.Clbrdrr:                          case Consts.Clbrdrb:                          case Consts.Brdrtbl:                          case Consts.Brdrnone:                          {                              // Meet cell control word ' no parse at first ' just save it                              var row = (DomTableRow) GetLastElement(typeof(DomTableRow)' false);                              if (row == null) break;                              _startContent = true;                              AttributeList style = null;                              if (row.CellSettings.Count > 0)                              {                                  style = (AttributeList) row.CellSettings[row.CellSettings.Count - 1];                                  if (style.Contains(Consts.Cellx))                                  {                                      // if find repeat control word ' then can consider this control word                                      // belong to the next cell . userly cellx is the last control word of                                       // a cell ' when meet cellx ' the current cell defind is finished.                                      style = new AttributeList();                                      row.CellSettings.Add(style);                                  }                              }                                if (style == null)                              {                                  style = new AttributeList();                                  row.CellSettings.Add(style);                              }                                style.Add(reader.Keyword' reader.Parameter);                              break;                          }                            case Consts.Cell:                          {                              // finish cell content                              _startContent = true;                              AddContentElement(null);                              CompleteParagraph();                              _paragraphFormat.Reset();                              format.Reset();                              var es = GetLastElements(true);                              for (var count = es.Length - 1; count >= 0; count--)                              {                                  if (es[count].Locked == false)                                  {                                      es[count].Locked = true;                                      if (es[count] is DomTableCell)                                          break;                                  }                              }                                break;                          }                            case Consts.Nestcell:                          {                              // finish nested cell content                              _startContent = true;                              AddContentElement(null);                              CompleteParagraph();                              var es = GetLastElements(false);                              for (var count = es.Length - 1; count >= 0; count--)                              {                                  es[count].Locked = true;                                  if (es[count] is DomTableCell)                                  {                                      ((DomTableCell) es[count]).Format = format;                                      break;                                  }                              }                                break;                          }                          #endregion                            default:                              // Unsupport keyword                              if (reader.TokenType == RtfTokenType.ExtKeyword && reader.FirstTokenInGroup)                              {                                  // If we have an unsupport extern keyword ' and this token is the first token in                                   // then current group ' then ingore the whole group.                                  ReadToEndOfGroup(reader);                              }                                break;                      }
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,Load,The following statement contains a magic number: switch (reader.Keyword)                      {                          case Consts.FromHtml:                              // Extract html from rtf                              ReadHtmlContent(reader);                              return;                            #region Read document information                          case Consts.Listtable:                              ReadListTable(reader);                              return;                            case Consts.ListOverride:                              // Unknow keyword                              ReadToEndOfGroup(reader);                              break;                            case Consts.Ansi:                              break;                            case Consts.Ansicpg:                              // Read default encoding                              _defaultEncoding = Encoding.GetEncoding(reader.Parameter);                              break;                            case Consts.Fonttbl:                              // Read font table                              ReadFontTable(reader);                              break;                            case Consts.ListOverrideTable:                              ReadListOverrideTable(reader);                              break;                            case Consts.FileTable:                              // Unsupport file list                              ReadToEndOfGroup(reader);                              break; // Finish current level                            case Consts.Colortbl:                              // Read color table                              ReadColorTable(reader);                              return; // Finish current level                            case Consts.StyleSheet:                              // Unsupport style sheet list                              ReadToEndOfGroup(reader);                              break;                            case Consts.Generator:                              // Read document generator                              Generator = ReadInnerText(reader' true);                              break;                            case Consts.Info:                              // Read document information                              ReadDocumentInfo(reader);                              return;                            case Consts.Headery:                              if (reader.HasParam)                                  HeaderDistance = reader.Parameter;                              break;                            case Consts.Footery:                              if (reader.HasParam)                                  FooterDistance = reader.Parameter;                              break;                            case Consts.Header:                              // Analyse header                              var header = new DomHeader {Style = RtfHeaderFooterStyle.AllPages};                              AppendChild(header);                              Load(reader' parentFormat);                              header.Locked = true;                              _paragraphFormat = new DocumentFormatInfo();                              break;                            case Consts.Headerl:                              // Analyse header                              var header1 = new DomHeader {Style = RtfHeaderFooterStyle.LeftPages};                              AppendChild(header1);                              Load(reader' parentFormat);                              header1.Locked = true;                              _paragraphFormat = new DocumentFormatInfo();                              break;                            case Consts.Headerr:                              // Analyse header                              var headerr = new DomHeader {Style = RtfHeaderFooterStyle.RightPages};                              AppendChild(headerr);                              Load(reader' parentFormat);                              headerr.Locked = true;                              _paragraphFormat = new DocumentFormatInfo();                              break;                            case Consts.Headerf:                              // Analyse header                              var headerf = new DomHeader {Style = RtfHeaderFooterStyle.FirstPage};                              AppendChild(headerf);                              Load(reader' parentFormat);                              headerf.Locked = true;                              _paragraphFormat = new DocumentFormatInfo();                              break;                            case Consts.Footer:                              // Analyse footer                              var footer = new DomFooter {Style = RtfHeaderFooterStyle.FirstPage};                              AppendChild(footer);                              Load(reader' parentFormat);                              footer.Locked = true;                              _paragraphFormat = new DocumentFormatInfo();                              break;                            case Consts.Footerl:                              // analyse footer                              var footerl = new DomFooter {Style = RtfHeaderFooterStyle.LeftPages};                              AppendChild(footerl);                              Load(reader' parentFormat);                              footerl.Locked = true;                              _paragraphFormat = new DocumentFormatInfo();                              break;                            case Consts.Footerr:                              // Analyse footer                              var footerr = new DomFooter {Style = RtfHeaderFooterStyle.RightPages};                              AppendChild(footerr);                              Load(reader' parentFormat);                              footerr.Locked = true;                              _paragraphFormat = new DocumentFormatInfo();                              break;                            case Consts.Footerf:                              // analyse footer                              var footerf = new DomFooter {Style = RtfHeaderFooterStyle.FirstPage};                              AppendChild(footerf);                              Load(reader' parentFormat);                              footerf.Locked = true;                              _paragraphFormat = new DocumentFormatInfo();                              break;                            case Consts.Xmlns:                              // Unsupport xml namespace                              ReadToEndOfGroup(reader);                              break;                            case Consts.Nonesttables:                              // I support nest table ' then ignore this keyword                              ReadToEndOfGroup(reader);                              break;                            case Consts.Xmlopen:                              // Unsupport xmlopen keyword                              break;                            case Consts.Revtbl:                              //ReadToEndGround(reader);                              break;                          #endregion                            #region Read document information                          case Consts.Paperw:                              // Read paper width                              PaperWidth = reader.Parameter;                              break;                            case Consts.Paperh:                              // Read paper height                              PaperHeight = reader.Parameter;                              break;                            case Consts.Margl:                              // Read left margin                              LeftMargin = reader.Parameter;                              break;                            case Consts.Margr:                              // Read right margin                              RightMargin = reader.Parameter;                              break;                            case Consts.Margb:                              // Read bottom margin                              BottomMargin = reader.Parameter;                              break;                            case Consts.Margt:                              // Read top margin                               TopMargin = reader.Parameter;                              break;                            case Consts.Landscape:                              // Set landscape                              Landscape = true;                              break;                            case Consts.Fchars:                              FollowingChars = ReadInnerText(reader' true);                              break;                            case Consts.Lchars:                              LeadingChars = ReadInnerText(reader' true);                              break;                            case "pnseclvl":                              // Ignore this keyword                              ReadToEndOfGroup(reader);                              break;                          #endregion                            #region Read paragraph format                          case Consts.Pard:                              _startContent = true;                              if (forbitPard)                                  continue;                                // Clear paragraph format                              _paragraphFormat.ResetParagraph();                              // Format.ResetParagraph();                              break;                            case Consts.Par:                              _startContent = true;                              // New paragraph                              if (GetLastElement(typeof(DomParagraph)) == null)                              {                                  var paragraph = new DomParagraph {Format = _paragraphFormat};                                  _paragraphFormat = _paragraphFormat.Clone();                                  AddContentElement(paragraph);                                  paragraph.Locked = true;                              }                              else                              {                                  CompleteParagraph();                                  var p = new DomParagraph {Format = _paragraphFormat};                                  AddContentElement(p);                              }                                _startContent = true;                              break;                            case Consts.Page:                              _startContent = true;                              CompleteParagraph();                              AddContentElement(new DomPageBreak());                              break;                            case Consts.Pagebb:                              _startContent = true;                              _paragraphFormat.PageBreak = true;                              break;                            case Consts.Ql:                              // Left alignment                              _startContent = true;                              _paragraphFormat.Align = RtfAlignment.Left;                              break;                            case Consts.Qc:                              // Center alignment                              _startContent = true;                              _paragraphFormat.Align = RtfAlignment.Center;                              break;                            case Consts.Qr:                              // Right alignment                              _startContent = true;                              _paragraphFormat.Align = RtfAlignment.Right;                              break;                            case Consts.Qj:                              // Jusitify alignment                              _startContent = true;                              _paragraphFormat.Align = RtfAlignment.Justify;                              break;                            case Consts.Sl:                              // Line spacing                              _startContent = true;                              if (reader.Parameter >= 0)                                  _paragraphFormat.LineSpacing = reader.Parameter;                              break;                            case Consts.Slmult:                              _startContent = true;                              _paragraphFormat.MultipleLineSpacing = (reader.Parameter == 1);                              break;                            case Consts.Sb:                              // Spacing before paragraph                              _startContent = true;                              _paragraphFormat.SpacingBefore = reader.Parameter;                              break;                            case Consts.Sa:                              // Spacing after paragraph                              _startContent = true;                              _paragraphFormat.SpacingAfter = reader.Parameter;                              break;                            case Consts.Fi:                              // Indent first line                              _startContent = true;                              _paragraphFormat.ParagraphFirstLineIndent = reader.Parameter;                              break;                            case Consts.Brdrw:                              _startContent = true;                              if (reader.HasParam)                                  _paragraphFormat.BorderWidth = reader.Parameter;                              break;                            case Consts.Pn:                              _startContent = true;                              _paragraphFormat.ListId = -1;                              break;                            case Consts.Pntext:                              break;                            case Consts.Pntxtb:                              break;                            case Consts.Pntxta:                              break;                            case Consts.Pnlvlbody:                              _startContent = true;                              break;                            case Consts.Pnlvlblt:                              _startContent = true;                              break;                            case Consts.Listtext:                              _startContent = true;                              var text = ReadInnerText(reader' true);                              if (text != null)                              {                                  text = text.Trim();                                  _listTextFlag = text.StartsWith("l") ? 1 : 2;                              }                                break;                            case Consts.Ls:                              _startContent = true;                              _paragraphFormat.ListId = reader.Parameter;                              _listTextFlag = 0;                              break;                            case Consts.Li:                              _startContent = true;                              if (reader.HasParam)                                  _paragraphFormat.LeftIndent = reader.Parameter;                              break;                            case Consts.Line:                              _startContent = true;                              if (format.ReadText)                              {                                  var line = new DomLineBreak                                  {                                      NativeLevel = reader.Level                                  };                                  AddContentElement(line);                              }                                break;                          #endregion                            #region Read text format                          case Consts.Insrsid:                              break;                            case Consts.Plain:                              // Clear text format                              _startContent = true;                              format.ResetText();                              break;                            case Consts.F:                              // Font name                              _startContent = true;                              if (format.ReadText)                              {                                  var fontName = FontTable.GetFontName(reader.Parameter);                                  if (fontName != null)                                      fontName = fontName.Trim();                                  if (string.IsNullOrEmpty(fontName))                                      fontName = DefaultFontName;                                    if (ChangeTimesNewRoman)                                  {                                      if (fontName == "Times New Roman")                                          fontName = DefaultFontName;                                  }                                    format.FontName = fontName;                              }                                _fontChartset = FontTable[reader.Parameter].Encoding;                              break;                            case Consts.Af:                              _associateFontChartset = FontTable[reader.Parameter].Encoding;                              break;                            case Consts.Fs:                              // Font size                              _startContent = true;                              if (format.ReadText)                              {                                  if (reader.HasParam)                                      format.FontSize = reader.Parameter / 2.0f;                              }                                break;                            case Consts.Cf:                              // Font color                              _startContent = true;                              if (format.ReadText)                              {                                  if (reader.HasParam)                                      format.TextColor = ColorTable.GetColor(reader.Parameter' Color.Black);                              }                                break;                            case Consts.Cb:                          case Consts.Chcbpat:                              // Background color                              _startContent = true;                              if (format.ReadText)                              {                                  if (reader.HasParam)                                  {                                      format.BackColor = ColorTable.GetColor(reader.Parameter' Color.Empty);                                  }                              }                                break;                            case Consts.B:                              // Bold                              _startContent = true;                              if (format.ReadText)                                  format.Bold = (reader.HasParam == false || reader.Parameter != 0);                              break;                            case Consts.V:                              // Hidden text                              _startContent = true;                              if (format.ReadText)                              {                                  if (reader.HasParam && reader.Parameter == 0)                                      format.Hidden = false;                                  else                                      format.Hidden = true;                              }                                break;                            case Consts.Highlight:                              // Highlight content                              _startContent = true;                              if (format.ReadText)                              {                                  if (reader.HasParam)                                      format.BackColor = ColorTable.GetColor(                                          reader.Parameter'                                          Color.Empty);                              }                                break;                            case Consts.I:                              // Italic                              _startContent = true;                              if (format.ReadText)                                  format.Italic = (reader.HasParam == false || reader.Parameter != 0);                              break;                            case Consts.Ul:                              // Under line                              _startContent = true;                              if (format.ReadText)                                  format.Underline = (reader.HasParam == false || reader.Parameter != 0);                              break;                            case Consts.Strike:                              // Strikeout                              _startContent = true;                              if (format.ReadText)                                  format.Strikeout = (reader.HasParam == false || reader.Parameter != 0);                              break;                            case Consts.Sub:                              // Subscript                              _startContent = true;                              if (format.ReadText)                                  format.Subscript = (reader.HasParam == false || reader.Parameter != 0);                              break;                            case Consts.Super:                              // superscript                              _startContent = true;                              if (format.ReadText)                                  format.Superscript = (reader.HasParam == false || reader.Parameter != 0);                              break;                            case Consts.Nosupersub:                              // nosupersub                              _startContent = true;                              format.Subscript = false;                              format.Superscript = false;                              break;                            case Consts.Brdrb:                              _startContent = true;                              //format.ParagraphBorder.Bottom = true;                              _paragraphFormat.BottomBorder = true;                              break;                            case Consts.Brdrl:                              _startContent = true;                              //format.ParagraphBorder.Left = true ;                              _paragraphFormat.LeftBorder = true;                              break;                            case Consts.Brdrr:                              _startContent = true;                              //format.ParagraphBorder.Right = true ;                              _paragraphFormat.RightBorder = true;                              break;                            case Consts.Brdrt:                              _startContent = true;                              //format.ParagraphBorder.Top = true;                              _paragraphFormat.BottomBorder = true;                              break;                            case Consts.Brdrcf:                              _startContent = true;                              var element = GetLastElement(typeof(DomTableRow)' false);                              if (element is DomTableRow)                              {                                  // Reading a table row                                  var row = (DomTableRow) element;                                  if (row.CellSettings.Count > 0)                                  {                                      var style = (AttributeList) row.CellSettings[row.CellSettings.Count - 1];                                      style.Add(reader.Keyword' reader.Parameter);                                  }                              }                              else                              {                                  _paragraphFormat.BorderColor = ColorTable.GetColor(reader.Parameter' Color.Black);                                  format.BorderColor = format.BorderColor;                              }                                break;                            case Consts.Brdrs:                              _startContent = true;                              _paragraphFormat.BorderThickness = false;                              format.BorderThickness = false;                              break;                            case Consts.Brdrth:                              _startContent = true;                              _paragraphFormat.BorderThickness = true;                              format.BorderThickness = true;                              break;                            case Consts.Brdrdot:                              _startContent = true;                              _paragraphFormat.BorderStyle = DashStyle.Dot;                              format.BorderStyle = DashStyle.Dot;                              break;                            case Consts.Brdrdash:                              _startContent = true;                              _paragraphFormat.BorderStyle = DashStyle.Dash;                              format.BorderStyle = DashStyle.Dash;                              break;                            case Consts.Brdrdashd:                              _startContent = true;                              _paragraphFormat.BorderStyle = DashStyle.DashDot;                              format.BorderStyle = DashStyle.DashDot;                              break;                            case Consts.Brdrdashdd:                              _startContent = true;                              _paragraphFormat.BorderStyle = DashStyle.DashDotDot;                              format.BorderStyle = DashStyle.DashDotDot;                              break;                            case Consts.Brdrnil:                              _startContent = true;                              _paragraphFormat.LeftBorder = false;                              _paragraphFormat.TopBorder = false;                              _paragraphFormat.RightBorder = false;                              _paragraphFormat.BottomBorder = false;                                format.LeftBorder = false;                              format.TopBorder = false;                              format.RightBorder = false;                              format.BottomBorder = false;                              break;                            case Consts.Brsp:                              _startContent = true;                              if (reader.HasParam)                                  _paragraphFormat.BorderSpacing = reader.Parameter;                              break;                            case Consts.Chbrdr:                              _startContent = true;                              format.LeftBorder = true;                              format.TopBorder = true;                              format.RightBorder = true;                              format.BottomBorder = true;                              break;                            case Consts.Bkmkstart:                              // Book mark                              _startContent = true;                              if (format.ReadText && _startContent)                              {                                  var bk = new DomBookmark();                                  bk.Name = ReadInnerText(reader' true);                                  bk.Locked = true;                                  AddContentElement(bk);                              }                                break;                            case Consts.Bkmkend:                              forbitPard = true;                              format.ReadText = false;                              break;                            case Consts.Field:                              // Field                              _startContent = true;                              ReadDomField(reader' format);                              return; // finish current level                          //break;                          #endregion                            #region Read object                          case Consts.Object:                          {                              // object                              _startContent = true;                              ReadDomObject(reader' format);                              return; // finish current level                          }                          #endregion                            #region Read image                          case Consts.Shppict:                              // Continue the following token                              break;                            case Consts.Nonshppict:                              // unsupport keyword                              ReadToEndOfGroup(reader);                              break;                            case Consts.Pict:                          {                              // Read image data                              //ReadDomImage(reader' format);                              _startContent = true;                              var image = new DomImage();                              image.NativeLevel = reader.Level;                              AddContentElement(image);                              break;                          }                            case Consts.Picscalex:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.ScaleX = reader.Parameter;                              break;                          }                            case Consts.Picscaley:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.ScaleY = reader.Parameter;                              break;                          }                            case Consts.Picwgoal:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.DesiredWidth = reader.Parameter;                              break;                          }                            case Consts.Pichgoal:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.DesiredHeight = reader.Parameter;                              break;                          }                            case Consts.Blipuid:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.Id = ReadInnerText(reader' true);                              break;                          }                            case Consts.Emfblip:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.PicType = RtfPictureType.Emfblip;                              break;                          }                            case Consts.Pngblip:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.PicType = RtfPictureType.Pngblip;                              break;                          }                            case Consts.Jpegblip:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.PicType = RtfPictureType.Jpegblip;                              break;                          }                            case Consts.Macpict:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.PicType = RtfPictureType.Macpict;                              break;                          }                            case Consts.Pmmetafile:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.PicType = RtfPictureType.Pmmetafile;                              break;                          }                            case Consts.Wmetafile:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.PicType = RtfPictureType.Wmetafile;                              break;                          }                            case Consts.Dibitmap:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.PicType = RtfPictureType.Dibitmap;                              break;                          }                            case Consts.Wbitmap:                          {                              var image = (DomImage) GetLastElement(typeof(DomImage));                              if (image != null)                                  image.PicType = RtfPictureType.Wbitmap;                              break;                          }                          #endregion                            #region Read shape                          case Consts.Sp:                          {                              // Begin read shape property                              var level = 0;                              string vName = null;                              string vValue = null;                              while (reader.ReadToken() != null)                              {                                  if (reader.TokenType == RtfTokenType.GroupStart)                                      level++;                                  else if (reader.TokenType == RtfTokenType.GroupEnd)                                  {                                      level--;                                      if (level < 0)                                      {                                          break;                                      }                                  }                                  else                                      switch (reader.Keyword)                                      {                                          case Consts.Sn:                                              vName = ReadInnerText(reader' true);                                              break;                                          case Consts.Sv:                                              vValue = ReadInnerText(reader' true);                                              break;                                      }                              }                                var shape = (DomShape) GetLastElement(typeof(DomShape));                                if (shape != null)                                  shape.ExtAttrbutes[vName] = vValue;                              else                              {                                  var g = (DomShapeGroup) GetLastElement(typeof(DomShapeGroup));                                  if (g != null)                                  {                                      g.ExtAttrbutes[vName] = vValue;                                  }                              }                                break;                          }                            case Consts.Shptxt:                              // handle following token                              break;                            case Consts.Shprslt:                              // ignore this level                              ReadToEndOfGroup(reader);                              break;                            case Consts.Shp:                          {                              _startContent = true;                              var shape = new DomShape();                              shape.NativeLevel = reader.Level;                              AddContentElement(shape);                              break;                          }                          case Consts.Shpleft:                          {                              var shape = (DomShape) GetLastElement(typeof(DomShape));                              if (shape != null)                                  shape.Left = reader.Parameter;                              break;                          }                            case Consts.Shptop:                          {                              var shape = (DomShape) GetLastElement(typeof(DomShape));                              if (shape != null)                                  shape.Top = reader.Parameter;                              break;                          }                            case Consts.Shpright:                          {                              var shape = (DomShape) GetLastElement(typeof(DomShape));                              if (shape != null)                                  shape.Width = reader.Parameter - shape.Left;                              break;                          }                            case Consts.Shpbottom:                          {                              var shape = (DomShape) GetLastElement(typeof(DomShape));                              if (shape != null)                                  shape.Height = reader.Parameter - shape.Top;                              break;                          }                            case Consts.Shplid:                          {                              var shape = (DomShape) GetLastElement(typeof(DomShape));                              if (shape != null)                                  shape.Id = reader.Parameter;                              break;                          }                            case Consts.Shpz:                          {                              var shape = (DomShape) GetLastElement(typeof(DomShape));                              if (shape != null)                                  shape.ZIndex = reader.Parameter;                              break;                          }                            case Consts.Shpgrp:                          {                              var group = new DomShapeGroup();                              group.NativeLevel = reader.Level;                              AddContentElement(group);                              break;                          }                            case Consts.Shpinst:                              break;                          #endregion                            #region Read table                          case Consts.Intbl:                          case Consts.Trowd:                          case Consts.Itap:                          {                              // These keyword said than current paragraph is a table row                              _startContent = true;                              var es = GetLastElements(true);                              DomElement lastUnlockElement = null;                              DomElement lastTableElement = null;                              for (var count = es.Length - 1; count >= 0; count--)                              {                                  var e = es[count];                                  if (e.Locked == false)                                  {                                      if (lastUnlockElement == null && !(e is DomParagraph))                                          lastUnlockElement = e;                                      if (e is DomTableRow || e is DomTableCell)                                          lastTableElement = e;                                      break;                                  }                              }                                if (reader.Keyword == Consts.Intbl)                              {                                  if (lastTableElement == null)                                  {                                      // if can not find unlocked row                                       // then new row                                      var row = new DomTableRow {NativeLevel = reader.Level};                                      if (lastUnlockElement != null)                                          lastUnlockElement.AppendChild(row);                                  }                              }                              else if (reader.Keyword == Consts.Trowd)                              {                                  // clear row format                                  DomTableRow row;                                  if (lastTableElement == null)                                  {                                      row = new DomTableRow {NativeLevel = reader.Level};                                      if (lastUnlockElement != null)                                          lastUnlockElement.AppendChild(row);                                  }                                  else                                  {                                      row = lastTableElement as DomTableRow ?? (DomTableRow) lastTableElement.Parent;                                  }                                    row.Attributes.Clear();                                  row.CellSettings.Clear();                                  _paragraphFormat.ResetParagraph();                              }                              else if (reader.Keyword == Consts.Itap)                              {                                  // set nested level                                    if (reader.Parameter == 0)                                  {                                      // is the 0 level ' belong to document ' not to a table                                      //foreach (RTFDomElement element in es)                                      //{                                      //    if (element is RTFDomTableRow || element is RTFDomTableCell)                                      //    {                                      //        element.Locked = true;                                      //    }                                      //}                                  }                                  else                                  {                                      // in a row                                      DomTableRow row;                                      if (lastTableElement == null)                                      {                                          row = new DomTableRow {NativeLevel = reader.Level};                                          if (lastUnlockElement != null)                                              lastUnlockElement.AppendChild(row);                                      }                                      else                                          row = lastTableElement as DomTableRow ?? (DomTableRow) lastTableElement.Parent;                                        if (reader.Parameter == row.Level)                                      {                                      }                                      else if (reader.Parameter > row.Level)                                      {                                          // nested row                                          var newRow = new DomTableRow {Level = reader.Parameter};                                          var parentCell = (DomTableCell) GetLastElement(typeof(DomTableCell)' false);                                          if (parentCell == null)                                              AddContentElement(newRow);                                          else                                              parentCell.AppendChild(newRow);                                      }                                      else if (reader.Parameter < row.Level)                                      {                                          // exit nested row                                      }                                  }                              }                                break;                          }                            case Consts.Nesttableprops:                              // ignore                              break;                            case Consts.Row:                          {                              // finish read row                              _startContent = true;                              var es = GetLastElements(true);                              for (var count = es.Length - 1; count >= 0; count--)                              {                                  es[count].Locked = true;                                  if (es[count] is DomTableRow)                                      break;                              }                                break;                          }                            case Consts.Nestrow:                          {                              // finish nested row                              _startContent = true;                              var es = GetLastElements(true);                              for (var count = es.Length - 1; count >= 0; count--)                              {                                  es[count].Locked = true;                                  if (es[count] is DomTableRow)                                      break;                              }                                break;                          }                            case Consts.Trrh:                          case Consts.Trautofit:                          case Consts.Irowband:                          case Consts.Trhdr:                          case Consts.Trkeep:                          case Consts.Trkeepfollow:                          case Consts.Trleft:                          case Consts.Trqc:                          case Consts.Trql:                          case Consts.Trqr:                          case Consts.Trcbpat:                          case Consts.Trcfpat:                          case Consts.Trpat:                          case Consts.Trshdng:                          case Consts.TrwWidth:                          case Consts.TrwWidthA:                          case Consts.Irow:                          case Consts.Trpaddb:                          case Consts.Trpaddl:                          case Consts.Trpaddr:                          case Consts.Trpaddt:                          case Consts.Trpaddfb:                          case Consts.Trpaddfl:                          case Consts.Trpaddfr:                          case Consts.Trpaddft:                          case Consts.Lastrow:                          {                              // meet row control word ' not parse at first ' just save it                               _startContent = true;                              var row = (DomTableRow) GetLastElement(typeof(DomTableRow)' false);                              if (row != null)                              {                                  row.Attributes.Add(reader.Keyword' reader.Parameter);                              }                                break;                          }                            case Consts.Clvmgf:                          case Consts.Clvmrg:                          case Consts.Cellx:                          case Consts.Clvertalt:                          case Consts.Clvertalc:                          case Consts.Clvertalb:                          case Consts.ClNoWrap:                          case Consts.Clcbpat:                          case Consts.Clcfpat:                          case Consts.Clpadl:                          case Consts.Clpadt:                          case Consts.Clpadr:                          case Consts.Clpadb:                          case Consts.Clbrdrl:                          case Consts.Clbrdrt:                          case Consts.Clbrdrr:                          case Consts.Clbrdrb:                          case Consts.Brdrtbl:                          case Consts.Brdrnone:                          {                              // Meet cell control word ' no parse at first ' just save it                              var row = (DomTableRow) GetLastElement(typeof(DomTableRow)' false);                              if (row == null) break;                              _startContent = true;                              AttributeList style = null;                              if (row.CellSettings.Count > 0)                              {                                  style = (AttributeList) row.CellSettings[row.CellSettings.Count - 1];                                  if (style.Contains(Consts.Cellx))                                  {                                      // if find repeat control word ' then can consider this control word                                      // belong to the next cell . userly cellx is the last control word of                                       // a cell ' when meet cellx ' the current cell defind is finished.                                      style = new AttributeList();                                      row.CellSettings.Add(style);                                  }                              }                                if (style == null)                              {                                  style = new AttributeList();                                  row.CellSettings.Add(style);                              }                                style.Add(reader.Keyword' reader.Parameter);                              break;                          }                            case Consts.Cell:                          {                              // finish cell content                              _startContent = true;                              AddContentElement(null);                              CompleteParagraph();                              _paragraphFormat.Reset();                              format.Reset();                              var es = GetLastElements(true);                              for (var count = es.Length - 1; count >= 0; count--)                              {                                  if (es[count].Locked == false)                                  {                                      es[count].Locked = true;                                      if (es[count] is DomTableCell)                                          break;                                  }                              }                                break;                          }                            case Consts.Nestcell:                          {                              // finish nested cell content                              _startContent = true;                              AddContentElement(null);                              CompleteParagraph();                              var es = GetLastElements(false);                              for (var count = es.Length - 1; count >= 0; count--)                              {                                  es[count].Locked = true;                                  if (es[count] is DomTableCell)                                  {                                      ((DomTableCell) es[count]).Format = format;                                      break;                                  }                              }                                break;                          }                          #endregion                            default:                              // Unsupport keyword                              if (reader.TokenType == RtfTokenType.ExtKeyword && reader.FirstTokenInGroup)                              {                                  // If we have an unsupport extern keyword ' and this token is the first token in                                   // then current group ' then ingore the whole group.                                  ReadToEndOfGroup(reader);                              }                                break;                      }
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,HexToBytes,The following statement contains a magic number: value = value * 16 + index;
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,HexToBytes,The following statement contains a magic number: charCount > 0 && (charCount % 2) == 0
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,UpdateTableCells,The following statement contains a magic number: var cellWidth = 2763;
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,UpdateTableCells,The following statement contains a magic number: cellWidth = 100;
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,UpdateTableCells,The following statement contains a magic number: cellWidth < 100
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,UpdateTableCells,The following statement contains a magic number: Math.Abs(right - (int)t) < 45
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ApplyText,The following statement contains a magic number: image.Width = image.DesiredWidth * image.ScaleX / 100;
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ApplyText,The following statement contains a magic number: image.Height = image.DesiredHeight * image.ScaleY / 100;
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadListTable,The following statement contains a magic number: switch (reader.CurrentToken.Key)  				        {  					        case "listtemplateid":  						        currentList.ListTemplateId = reader.CurrentToken.Param;  						        break;    					        case "listid":  						        currentList.ListId = reader.CurrentToken.Param;  						        break;    					        case "listhybrid":  						        currentList.ListHybrid = true;  						        break;    					        case "levelfollow":  						        currentList.LevelFollow = reader.CurrentToken.Param;  						        break;    					        case "levelstartat":  						        currentList.LevelStartAt = reader.CurrentToken.Param;  						        break;    					        case "levelnfc":  						        if (currentList.LevelNfc == RtfLevelNumberType.None)  							        currentList.LevelNfc = (RtfLevelNumberType)reader.CurrentToken.Param;  						        break;    					        case "levelnfcn":  						        if (currentList.LevelNfc == RtfLevelNumberType.None)  							        currentList.LevelNfc = (RtfLevelNumberType)reader.CurrentToken.Param;  						        break;    					        case "leveljc":  						        currentList.LevelJc = reader.CurrentToken.Param;  						        break;    					        case "leveltext":  						        if (string.IsNullOrEmpty(currentList.LevelText))  						        {  							        var text = ReadInnerText(reader' true);  							        if (text != null && text.Length > 2)  							        {  								        int len = text[0];  								        len = Math.Min(len' text.Length - 1);  								        text = text.Substring(1' len);  							        }  							        currentList.LevelText = text;  						        }  						        break;    					        case "f":  						        currentList.FontName = FontTable.GetFontName(reader.CurrentToken.Param);  						        break;  				        }
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadColorTable,The following statement contains a magic number: switch (reader.Keyword)  		        {  			        case "red":  				        r = reader.Parameter;  				        break;  			        case "green":  				        g = reader.Parameter;  				        break;  			        case "blue":  				        b = reader.Parameter;  				        break;  			        case ";":  				        if (r >= 0 && g >= 0 && b >= 0)  				        {  					        var c = Color.FromArgb(255' r' g' b);  					        ColorTable.Add(c);  					        r = -1;  					        g = -1;  					        b = -1;  				        }  				        break;  		        }
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadColorTable,The following statement contains a magic number: var c = Color.FromArgb(255' r' g' b);
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadDateTime,The following statement contains a magic number: var yr = 1900;
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadHtmlContent,The following statement contains a magic number: switch (reader.Keyword)  		        {                      //case Consts.Lang:                      //case Consts.DefLang:                      //    break;                        case Consts.Fonttbl:                          // Read font table                          ReadFontTable(reader);                          break;                        case Consts.F:                          if (reader.HasParam)                              fontIndex = reader.Parameter;                          break;                        case Consts.HtmlRtf:  			        case Consts.MHtmlTag:  				        if (reader.HasParam && reader.Parameter == 0)  				            htmlState = false;  				        else  				        {  				            if (hexBuffer != string.Empty)  				            {  				                var buff = new[] {byte.Parse(hexBuffer' NumberStyles.HexNumber)};  				                hexBuffer = string.Empty;  				                stringBuilder.Append(encoding.GetString(buff));  				            }  				            htmlState = true;  				        }  				        break;    			        case Consts.HtmlTag:  				        if (reader.InnerReader.Peek() == ' ')  					        reader.InnerReader.Read();    				        var text = ReadInnerText(reader' null' true' false' true);                            fontIndex = null;                          encoding = _defaultEncoding;                            if (!string.IsNullOrEmpty(text))                              stringBuilder.Append(text);                          break;                        default:    				        switch (reader.TokenType)  				        {  					        case RtfTokenType.Control:  						        if (!htmlState)  						        {                                      switch (reader.Keyword)  							        {  								        case "'":                                                if (FontTable != null && fontIndex.HasValue && fontIndex <= FontTable.Count)                                              {                                                  var font = FontTable[fontIndex.Value];                                                  encoding = font.Encoding ?? _defaultEncoding;                                              }                                                // Convert HEX value directly when we have a single byte charset                                              if (encoding.IsSingleByte)  									        {  									            if (string.IsNullOrEmpty(hexBuffer))  									                hexBuffer = reader.CurrentToken.Hex;                                                    var buff = new[] { byte.Parse(hexBuffer' NumberStyles.HexNumber) };                                                  hexBuffer = string.Empty;                                                  stringBuilder.Append(encoding.GetString(buff));                                              }  									        else  									        {  									            // If we have a double byte charset like chinese then store the value and wait for the next HEX value  									            if (hexBuffer == string.Empty)  									                hexBuffer = reader.CurrentToken.Hex;  									            else  									            {  									                // Append the second HEX value and convert it   									                var buff = new[]  									                {  									                    byte.Parse(hexBuffer' NumberStyles.HexNumber)'  									                    byte.Parse(reader.CurrentToken.Hex' NumberStyles.HexNumber)  									                };    									                stringBuilder.Append(encoding.GetString(buff));    									                // Empty the HEX buffer   									                hexBuffer = string.Empty;  									            }  									        }  									        break;                                            case "u":                                              stringBuilder.Append(HttpUtility.UrlDecode("*"' _defaultEncoding));                                              break;                                      }                                  }  						        break;    					        case RtfTokenType.ExtKeyword:  					        case RtfTokenType.Keyword:    						        if (!htmlState)  						        {  							        switch (reader.Keyword)  							        {  								        case Consts.Par:  									        stringBuilder.Append(Environment.NewLine);  									        break;    								        case Consts.Line:  									        stringBuilder.Append(Environment.NewLine);  									        break;    								        case Consts.Tab:  									        stringBuilder.Append("\t");  									        break;    								        case Consts.Lquote:  									        stringBuilder.Append("&lsquo;");  									        break;    								        case Consts.Rquote:  									        stringBuilder.Append("&rsquo;");  									        break;    								        case Consts.LdblQuote:  									        stringBuilder.Append("&ldquo;");  									        break;    								        case Consts.RdblQuote:  									        stringBuilder.Append("&rdquo;");  									        break;    								        case Consts.Bullet:  									        stringBuilder.Append("&bull;");  									        break;    								        case Consts.Endash:  									        stringBuilder.Append("&ndash;");  									        break;    								        case Consts.Emdash:  									        stringBuilder.Append("&mdash;");  									        break;    								        case Consts.Tilde:  									        stringBuilder.Append("&nbsp;");  									        break;    								        case Consts.Underscore:  									        stringBuilder.Append("&shy;");  									        break;                                            case Consts.Pntext:                                              ReadToEndOfGroup(reader);                                              break;    								        case Consts.U:                                                if (reader.Parameter.ToString().StartsWith("c"' StringComparison.InvariantCultureIgnoreCase))                                                  throw new Exception("\\uc parameter not yet supported' please contact the developer on GitHub");    								            if (reader.Parameter.ToString().StartsWith("-"))  								            {                                                  // The Unicode standard permanently reserves these code point values for                                                  // UTF-16 encoding of the high and low surrogates  								                // U+D800 to U+DFFF                                                  // 55296  -  57343                                                    var value = 65536 + int.Parse(reader.Parameter.ToString());    								                if (value >= 0xD800 && value <= 0xDFFF)  								                {  								                    if (!reader.ParsingHighLowSurrogate)  								                    {  								                        reader.ParsingHighLowSurrogate = true;  								                        reader.HighSurrogateValue = value;  								                    }  								                    else  								                    {  								                        var combined = ((reader.HighSurrogateValue - 0xD800) << 10) + (value - 0xDC00) + 0x10000;  								                        stringBuilder.Append("&#" + combined + ";");  								                        reader.ParsingHighLowSurrogate = false;  								                        reader.HighSurrogateValue = null;  								                    }  								                }  								                else  								                {  								                    reader.ParsingHighLowSurrogate = false;  								                    stringBuilder.Append("&#" + value + ";");  								                }  								            }  								            else  								                stringBuilder.Append("&#" + reader.Parameter + ";");  									        break;  							        }  						        }  						        break;    					        case RtfTokenType.Text:  						        if (htmlState == false)  							        stringBuilder.Append(reader.Keyword);  						        break;  				        }  				        break;  		        }
Magic Number,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadHtmlContent,The following statement contains a magic number: switch (reader.Keyword)  		        {                      //case Consts.Lang:                      //case Consts.DefLang:                      //    break;                        case Consts.Fonttbl:                          // Read font table                          ReadFontTable(reader);                          break;                        case Consts.F:                          if (reader.HasParam)                              fontIndex = reader.Parameter;                          break;                        case Consts.HtmlRtf:  			        case Consts.MHtmlTag:  				        if (reader.HasParam && reader.Parameter == 0)  				            htmlState = false;  				        else  				        {  				            if (hexBuffer != string.Empty)  				            {  				                var buff = new[] {byte.Parse(hexBuffer' NumberStyles.HexNumber)};  				                hexBuffer = string.Empty;  				                stringBuilder.Append(encoding.GetString(buff));  				            }  				            htmlState = true;  				        }  				        break;    			        case Consts.HtmlTag:  				        if (reader.InnerReader.Peek() == ' ')  					        reader.InnerReader.Read();    				        var text = ReadInnerText(reader' null' true' false' true);                            fontIndex = null;                          encoding = _defaultEncoding;                            if (!string.IsNullOrEmpty(text))                              stringBuilder.Append(text);                          break;                        default:    				        switch (reader.TokenType)  				        {  					        case RtfTokenType.Control:  						        if (!htmlState)  						        {                                      switch (reader.Keyword)  							        {  								        case "'":                                                if (FontTable != null && fontIndex.HasValue && fontIndex <= FontTable.Count)                                              {                                                  var font = FontTable[fontIndex.Value];                                                  encoding = font.Encoding ?? _defaultEncoding;                                              }                                                // Convert HEX value directly when we have a single byte charset                                              if (encoding.IsSingleByte)  									        {  									            if (string.IsNullOrEmpty(hexBuffer))  									                hexBuffer = reader.CurrentToken.Hex;                                                    var buff = new[] { byte.Parse(hexBuffer' NumberStyles.HexNumber) };                                                  hexBuffer = string.Empty;                                                  stringBuilder.Append(encoding.GetString(buff));                                              }  									        else  									        {  									            // If we have a double byte charset like chinese then store the value and wait for the next HEX value  									            if (hexBuffer == string.Empty)  									                hexBuffer = reader.CurrentToken.Hex;  									            else  									            {  									                // Append the second HEX value and convert it   									                var buff = new[]  									                {  									                    byte.Parse(hexBuffer' NumberStyles.HexNumber)'  									                    byte.Parse(reader.CurrentToken.Hex' NumberStyles.HexNumber)  									                };    									                stringBuilder.Append(encoding.GetString(buff));    									                // Empty the HEX buffer   									                hexBuffer = string.Empty;  									            }  									        }  									        break;                                            case "u":                                              stringBuilder.Append(HttpUtility.UrlDecode("*"' _defaultEncoding));                                              break;                                      }                                  }  						        break;    					        case RtfTokenType.ExtKeyword:  					        case RtfTokenType.Keyword:    						        if (!htmlState)  						        {  							        switch (reader.Keyword)  							        {  								        case Consts.Par:  									        stringBuilder.Append(Environment.NewLine);  									        break;    								        case Consts.Line:  									        stringBuilder.Append(Environment.NewLine);  									        break;    								        case Consts.Tab:  									        stringBuilder.Append("\t");  									        break;    								        case Consts.Lquote:  									        stringBuilder.Append("&lsquo;");  									        break;    								        case Consts.Rquote:  									        stringBuilder.Append("&rsquo;");  									        break;    								        case Consts.LdblQuote:  									        stringBuilder.Append("&ldquo;");  									        break;    								        case Consts.RdblQuote:  									        stringBuilder.Append("&rdquo;");  									        break;    								        case Consts.Bullet:  									        stringBuilder.Append("&bull;");  									        break;    								        case Consts.Endash:  									        stringBuilder.Append("&ndash;");  									        break;    								        case Consts.Emdash:  									        stringBuilder.Append("&mdash;");  									        break;    								        case Consts.Tilde:  									        stringBuilder.Append("&nbsp;");  									        break;    								        case Consts.Underscore:  									        stringBuilder.Append("&shy;");  									        break;                                            case Consts.Pntext:                                              ReadToEndOfGroup(reader);                                              break;    								        case Consts.U:                                                if (reader.Parameter.ToString().StartsWith("c"' StringComparison.InvariantCultureIgnoreCase))                                                  throw new Exception("\\uc parameter not yet supported' please contact the developer on GitHub");    								            if (reader.Parameter.ToString().StartsWith("-"))  								            {                                                  // The Unicode standard permanently reserves these code point values for                                                  // UTF-16 encoding of the high and low surrogates  								                // U+D800 to U+DFFF                                                  // 55296  -  57343                                                    var value = 65536 + int.Parse(reader.Parameter.ToString());    								                if (value >= 0xD800 && value <= 0xDFFF)  								                {  								                    if (!reader.ParsingHighLowSurrogate)  								                    {  								                        reader.ParsingHighLowSurrogate = true;  								                        reader.HighSurrogateValue = value;  								                    }  								                    else  								                    {  								                        var combined = ((reader.HighSurrogateValue - 0xD800) << 10) + (value - 0xDC00) + 0x10000;  								                        stringBuilder.Append("&#" + combined + ";");  								                        reader.ParsingHighLowSurrogate = false;  								                        reader.HighSurrogateValue = null;  								                    }  								                }  								                else  								                {  								                    reader.ParsingHighLowSurrogate = false;  								                    stringBuilder.Append("&#" + value + ";");  								                }  								            }  								            else  								                stringBuilder.Append("&#" + reader.Parameter + ";");  									        break;  							        }  						        }  						        break;    					        case RtfTokenType.Text:  						        if (htmlState == false)  							        stringBuilder.Append(reader.Keyword);  						        break;  				        }  				        break;  		        }
Magic Number,MsgReader.Rtf,DomElement,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomElement.cs,ToDomString,The following statement contains a magic number: stringBuilder.Append(new string(' '' level*4));
Magic Number,MsgReader.Rtf,DomImage,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomImage.cs,DomImage,The following statement contains a magic number: ScaleY = 100;
Magic Number,MsgReader.Rtf,DomImage,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomImage.cs,DomImage,The following statement contains a magic number: ScaleX = 100;
Magic Number,MsgReader.Rtf,DomImage,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomImage.cs,ToString,The following statement contains a magic number: text = text + " " + Convert.ToDouble( Data.Length / 1024.0).ToString("0.00") + "KB";
Magic Number,MsgReader.Rtf,DomObject,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomObject.cs,DomObject,The following statement contains a magic number: ScaleX = 100;
Magic Number,MsgReader.Rtf,DomObject,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomObject.cs,DomObject,The following statement contains a magic number: ScaleY = 100;
Magic Number,MsgReader.Rtf,DomObject,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomObject.cs,ToString,The following statement contains a magic number: text = text + " " + Convert.ToDouble(Content.Length / 1024.0).ToString("0.00") + "KB";
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[77] = Encoding.GetEncoding(10000);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[77] = Encoding.GetEncoding(10000);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[78] = Encoding.GetEncoding(10001);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[78] = Encoding.GetEncoding(10001);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[79] = Encoding.GetEncoding(10003);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[79] = Encoding.GetEncoding(10003);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[80] = Encoding.GetEncoding(10008);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[80] = Encoding.GetEncoding(10008);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[81] = Encoding.GetEncoding(10002);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[81] = Encoding.GetEncoding(10002);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[83] = Encoding.GetEncoding(10005);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[83] = Encoding.GetEncoding(10005);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[84] = Encoding.GetEncoding(10004);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[84] = Encoding.GetEncoding(10004);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[85] = Encoding.GetEncoding(10006);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[85] = Encoding.GetEncoding(10006);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[86] = Encoding.GetEncoding(10081);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[86] = Encoding.GetEncoding(10081);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[87] = Encoding.GetEncoding(10021);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[87] = Encoding.GetEncoding(10021);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[88] = Encoding.GetEncoding(10029);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[88] = Encoding.GetEncoding(10029);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[89] = Encoding.GetEncoding(10007);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[89] = Encoding.GetEncoding(10007);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[128] = Encoding.GetEncoding(932);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[128] = Encoding.GetEncoding(932);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[129] = Encoding.GetEncoding(949);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[129] = Encoding.GetEncoding(949);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[130] = Encoding.GetEncoding(1361);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[130] = Encoding.GetEncoding(1361);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[134] = Encoding.GetEncoding(936);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[134] = Encoding.GetEncoding(936);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[136] = Encoding.GetEncoding(950);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[136] = Encoding.GetEncoding(950);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[161] = Encoding.GetEncoding(1253);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[161] = Encoding.GetEncoding(1253);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[162] = Encoding.GetEncoding(1254);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[162] = Encoding.GetEncoding(1254);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[163] = Encoding.GetEncoding(1258);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[163] = Encoding.GetEncoding(1258);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[177] = Encoding.GetEncoding(1255);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[177] = Encoding.GetEncoding(1255);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[178] = Encoding.GetEncoding(1256);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[178] = Encoding.GetEncoding(1256);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[186] = Encoding.GetEncoding(1257);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[186] = Encoding.GetEncoding(1257);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[204] = Encoding.GetEncoding(1251);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[204] = Encoding.GetEncoding(1251);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[222] = Encoding.GetEncoding(874);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[222] = Encoding.GetEncoding(874);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[238] = Encoding.GetEncoding(1250);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[238] = Encoding.GetEncoding(1250);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[254] = Encoding.GetEncoding(437);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[254] = Encoding.GetEncoding(437);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[255] = Encoding.GetEncoding(850);
Magic Number,MsgReader.Rtf,Font,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\FontTable.cs,CheckEncodingCharsets,The following statement contains a magic number: _encodingCharsets[255] = Encoding.GetEncoding(850);
Magic Number,MsgReader.Rtf,RawDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\RawDocument.cs,ReadColorTable,The following statement contains a magic number: var c = Color.FromArgb(255' r' g' b);
Magic Number,MsgReader.Rtf,RawDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\RawDocument.cs,ReadColorTable,The following statement contains a magic number: var c = Color.FromArgb(255' r' g' b);
Magic Number,MsgReader.Rtf,RawDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\RawDocument.cs,ReadDateTime,The following statement contains a magic number: var yr = node.Nodes.GetParameter("yr"' 1900);
Magic Number,MsgReader.Rtf,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\Reader.cs,LoadRtfText,The following statement contains a magic number: text != null && text.Length > 3
Magic Number,MsgReader.Rtf,Writer,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\Writer.cs,WriteUnicodeText,The following statement contains a magic number: c > 127
Magic Number,MsgReader.Rtf,Writer,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\Writer.cs,InnerWriteChar,The following statement contains a magic number: c > 32 && c < 127
Magic Number,MsgReader.Rtf,Writer,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\Writer.cs,InnerWriteChar,The following statement contains a magic number: c > 32 && c < 127
Magic Number,MsgReader.Rtf,Writer,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\Writer.cs,WriteBytes,The following statement contains a magic number: (count%32) == 0
Magic Number,MsgReader.Rtf,Writer,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\Writer.cs,WriteBytes,The following statement contains a magic number: var h = (b & 0xf0) >> 4;
Magic Number,MsgReader.Rtf,Writer,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\Writer.cs,WriteBytes,The following statement contains a magic number: _position += 2;
Magic Number,MsgReader.Rtf,Writer,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\Writer.cs,WriteByte,The following statement contains a magic number: var h = (b & 0xf0) >> 4;
Magic Number,MsgReader.Rtf,Writer,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\Writer.cs,WriteByte,The following statement contains a magic number: _position += 2;
Missing Default,MsgReader.Outlook,Storage,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Appointment.cs,Storage,The following switch statement is missing a default case: switch(FileAccess)              {                  case FileAccess.Read:                      _compoundFile = new CompoundFile(storageFilePath);                      break;                  case FileAccess.Write:                  case FileAccess.ReadWrite:                      _compoundFile = new CompoundFile(storageFilePath' CFSUpdateMode.Update' CFSConfiguration.Default);                      break;              }
Missing Default,MsgReader.Outlook,Storage,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Appointment.cs,Storage,The following switch statement is missing a default case: switch (FileAccess)              {                  case FileAccess.Read:                      _compoundFile = new CompoundFile(storageStream);                      break;                  case FileAccess.Write:                  case FileAccess.ReadWrite:                      _compoundFile = new CompoundFile(storageStream' CFSUpdateMode.Update' CFSConfiguration.Default);                      break;              }
Missing Default,MsgReader.Outlook,Storage,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Appointment.cs,GetMapiPropertyFromPropertyStream,The following switch statement is missing a default case: switch (propType)                  {                      case PropertyType.PT_SHORT:                          return BitConverter.ToInt16(propBytes' i + 8);                        case PropertyType.PT_LONG:                          return BitConverter.ToInt32(propBytes' i + 8);                        case PropertyType.PT_DOUBLE:                          return BitConverter.ToDouble(propBytes' i + 8);                        case PropertyType.PT_SYSTIME:                          var fileTime = BitConverter.ToInt64(propBytes' i + 8);                          return DateTime.FromFileTime(fileTime);                        case PropertyType.PT_APPTIME:                          var appTime = BitConverter.ToInt64(propBytes' i + 8);                          return DateTime.FromOADate(appTime);                        case PropertyType.PT_BOOLEAN:                          return BitConverter.ToBoolean(propBytes' i + 8);                  }
Missing Default,MsgReader.Outlook,Appointment,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Appointment.cs,Appointment,The following switch statement is missing a default case: switch (RecurrenceType)                      {                          case AppointmentRecurrenceType.Daily:                              RecurrenceTypeText = LanguageConsts.AppointmentReccurenceTypeDailyText;                              break;                            case AppointmentRecurrenceType.Weekly:                              RecurrenceTypeText = LanguageConsts.AppointmentReccurenceTypeWeeklyText;                              break;                            case AppointmentRecurrenceType.Monthly:                              RecurrenceTypeText = LanguageConsts.AppointmentReccurenceTypeMonthlyText;                              break;                            case AppointmentRecurrenceType.Yearly:                              RecurrenceTypeText = LanguageConsts.AppointmentReccurenceTypeYearlyText;                              break;                      }
Missing Default,MsgReader.Outlook,Attachment,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Attachment.cs,Attachment,The following switch statement is missing a default case: switch (attachmentMethod)                  {                      case MapiTags.ATTACH_BY_REFERENCE:                      case MapiTags.ATTACH_BY_REF_RESOLVE:                      case MapiTags.ATTACH_BY_REF_ONLY:                          ResolveAttachment();                          break;                        case MapiTags.ATTACH_OLE:                          var storage = GetMapiProperty(MapiTags.PR_ATTACH_DATA_BIN) as CFStorage;                          var attachmentOle = new Attachment(new Storage(storage)' null);                          _data = attachmentOle.GetStreamBytes("CONTENTS");                          if (_data != null)                          {                              var fileTypeInfo = FileTypeSelector.GetFileTypeFileInfo(Data);                                if (string.IsNullOrEmpty(FileName))                                  FileName = fileTypeInfo.Description;                                FileName += "." + fileTypeInfo.Extension.ToLower();                          }                          else                              // http://www.devsuperpage.com/search/Articles.aspx?G=10&ArtID=142729                              _data = attachmentOle.GetStreamBytes("\u0002OlePres000");                            if (_data != null)                          {                              try                              {                                  SaveImageAsPng(40);                              }                              catch (ArgumentException)                              {                                  SaveImageAsPng(0);                              }                          }                          else                              throw new MRUnknownAttachmentFormat("Can not read the attachment");                            OleAttachment = true;                          IsInline = true;                          break;                  }
Missing Default,MsgReader.Outlook,Message,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\Message.cs,GetEmailRecipients,The following switch statement is missing a default case: switch (type)                      {                          case RecipientType.To:                              if (Headers.To != null)                                  recipients.AddRange(                                      Headers.To.Select(                                          to => new RecipientPlaceHolder(to.Address' to.DisplayName' string.Empty)));                              break;                            case RecipientType.Cc:                              if (Headers.Cc != null)                                  recipients.AddRange(                                      Headers.Cc.Select(                                          cc => new RecipientPlaceHolder(cc.Address' cc.DisplayName' string.Empty)));                              break;                            case RecipientType.Bcc:                              if (Headers.Bcc != null)                                  recipients.AddRange(                                      Headers.Bcc.Select(                                          bcc => new RecipientPlaceHolder(bcc.Address' bcc.DisplayName' string.Empty)));                              break;                      }
Missing Default,MsgReader.Outlook,RecipientRow,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Outlook\UnsendableRecipients.cs,RecipientRow,The following switch statement is missing a default case: switch (AddressType)              {                  case AddressType.X500Dn:                      AddressPrefixUsed = binaryReader.ReadByte();                      DisplayType = (DisplayType) binaryReader.ReadByte();                      X500Dn = Strings.ReadNullTerminatedAsciiString(binaryReader);                      break;                    case AddressType.PersonalDistributionList1:                  case AddressType.PersonalDistributionList2:                      EntryIdSize = binaryReader.ReadUInt16();                      EntryId = new AddressBookEntryId(binaryReader);                      SearchKeySize = binaryReader.ReadUInt16();                      if (SearchKeySize > 0)                          SearchKey = binaryReader.ReadBytes((int) SearchKeySize);                      break;                    case AddressType.NoType:                      if (addressTypeIncluded) AddresType = Strings.ReadNullTerminatedAsciiString(binaryReader);                      break;              }
Missing Default,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,ExtractToFolder,The following switch statement is missing a default case: switch (extension)              {                  case ".EML":                      Logger.WriteToLog($"Extracting EML file '{inputFile}' to output folder '{outputFolder}'");                        using (var stream = File.Open(inputFile' FileMode.Open' FileAccess.Read))                      {                          var message = Mime.Message.Load(stream);                          return WriteEmlEmail(message' outputFolder' hyperlinks).ToArray();                      }                    case ".MSG":                      Logger.WriteToLog($"Extracting MSG file '{inputFile}' to output folder '{outputFolder}'");                        using (var stream = File.Open(inputFile' FileMode.Open' FileAccess.Read))                      using (var message = new Storage.Message(stream))                      {                          if (messageType == null)                              messageType = message.Type;                            Logger.WriteToLog($"MSG file has the type '{messageType.ToString()}'");                            switch (messageType)                          {                              case MessageType.Email:                              case MessageType.EmailSms:                              case MessageType.EmailNonDeliveryReport:                              case MessageType.EmailDeliveryReport:                              case MessageType.EmailDelayedDeliveryReport:                              case MessageType.EmailReadReceipt:                              case MessageType.EmailNonReadReceipt:                              case MessageType.EmailEncryptedAndMaybeSigned:                              case MessageType.EmailEncryptedAndMaybeSignedNonDelivery:                              case MessageType.EmailEncryptedAndMaybeSignedDelivery:                              case MessageType.EmailClearSignedReadReceipt:                              case MessageType.EmailClearSignedNonDelivery:                              case MessageType.EmailClearSignedDelivery:                              case MessageType.EmailBmaStub:                              case MessageType.CiscoUnityVoiceMessage:                              case MessageType.EmailClearSigned:                              case MessageType.RightFaxAdv:                              case MessageType.SkypeForBusinessMissedMessage:                              case MessageType.SkypeForBusinessConversation:                                  return WriteMsgEmail(message' outputFolder' hyperlinks).ToArray();                                //case MessageType.EmailClearSigned:                              //    throw new MRFileTypeNotSupported("A clear signed message is not supported");                                case MessageType.Appointment:                              case MessageType.AppointmentNotification:                              case MessageType.AppointmentSchedule:                              case MessageType.AppointmentRequest:                              case MessageType.AppointmentRequestNonDelivery:                              case MessageType.AppointmentResponse:                              case MessageType.AppointmentResponsePositive:                              case MessageType.AppointmentResponsePositiveNonDelivery:                              case MessageType.AppointmentResponseNegative:                              case MessageType.AppointmentResponseNegativeNonDelivery:                              case MessageType.AppointmentResponseTentative:                              case MessageType.AppointmentResponseTentativeNonDelivery:                                  return WriteMsgAppointment(message' outputFolder' hyperlinks).ToArray();                                case MessageType.Contact:                                  return WriteMsgContact(message' outputFolder' hyperlinks).ToArray();                                case MessageType.Task:                              case MessageType.TaskRequestAccept:                              case MessageType.TaskRequestDecline:                              case MessageType.TaskRequestUpdate:                                  return WriteMsgTask(message' outputFolder' hyperlinks).ToArray();                                                                case MessageType.StickyNote:                                  return WriteMsgStickyNote(message' outputFolder).ToArray();                                case MessageType.Unknown:                                  const string unknown = "Unsupported message type";                                  Logger.WriteToLog(unknown);                                  throw new MRFileTypeNotSupported(unknown);                          }                      }                        break;              }
Missing Default,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,ExtractToFolder,The following switch statement is missing a default case: switch (messageType)                          {                              case MessageType.Email:                              case MessageType.EmailSms:                              case MessageType.EmailNonDeliveryReport:                              case MessageType.EmailDeliveryReport:                              case MessageType.EmailDelayedDeliveryReport:                              case MessageType.EmailReadReceipt:                              case MessageType.EmailNonReadReceipt:                              case MessageType.EmailEncryptedAndMaybeSigned:                              case MessageType.EmailEncryptedAndMaybeSignedNonDelivery:                              case MessageType.EmailEncryptedAndMaybeSignedDelivery:                              case MessageType.EmailClearSignedReadReceipt:                              case MessageType.EmailClearSignedNonDelivery:                              case MessageType.EmailClearSignedDelivery:                              case MessageType.EmailBmaStub:                              case MessageType.CiscoUnityVoiceMessage:                              case MessageType.EmailClearSigned:                              case MessageType.RightFaxAdv:                              case MessageType.SkypeForBusinessMissedMessage:                              case MessageType.SkypeForBusinessConversation:                                  return WriteMsgEmail(message' outputFolder' hyperlinks).ToArray();                                //case MessageType.EmailClearSigned:                              //    throw new MRFileTypeNotSupported("A clear signed message is not supported");                                case MessageType.Appointment:                              case MessageType.AppointmentNotification:                              case MessageType.AppointmentSchedule:                              case MessageType.AppointmentRequest:                              case MessageType.AppointmentRequestNonDelivery:                              case MessageType.AppointmentResponse:                              case MessageType.AppointmentResponsePositive:                              case MessageType.AppointmentResponsePositiveNonDelivery:                              case MessageType.AppointmentResponseNegative:                              case MessageType.AppointmentResponseNegativeNonDelivery:                              case MessageType.AppointmentResponseTentative:                              case MessageType.AppointmentResponseTentativeNonDelivery:                                  return WriteMsgAppointment(message' outputFolder' hyperlinks).ToArray();                                case MessageType.Contact:                                  return WriteMsgContact(message' outputFolder' hyperlinks).ToArray();                                case MessageType.Task:                              case MessageType.TaskRequestAccept:                              case MessageType.TaskRequestDecline:                              case MessageType.TaskRequestUpdate:                                  return WriteMsgTask(message' outputFolder' hyperlinks).ToArray();                                                                case MessageType.StickyNote:                                  return WriteMsgStickyNote(message' outputFolder).ToArray();                                case MessageType.Unknown:                                  const string unknown = "Unsupported message type";                                  Logger.WriteToLog(unknown);                                  throw new MRFileTypeNotSupported(unknown);                          }
Missing Default,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,WriteEmlStreamEmail,The following switch statement is missing a default case: switch (message.Headers.Importance)              {                  case MailPriority.Low:                      importanceText = LanguageConsts.ImportanceLowText;                      break;                    case MailPriority.Normal:                      importanceText = LanguageConsts.ImportanceNormalText;                      break;                    case MailPriority.High:                      importanceText = LanguageConsts.ImportanceHighText;                      break;              }
Missing Default,MsgReader,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Reader.cs,WriteEmlEmail,The following switch statement is missing a default case: switch (message.Headers.Importance)              {                  case MailPriority.Low:                      importanceText = LanguageConsts.ImportanceLowText;                      break;                    case MailPriority.Normal:                      importanceText = LanguageConsts.ImportanceNormalText;                      break;                    case MailPriority.High:                      importanceText = LanguageConsts.ImportanceHighText;                      break;              }
Missing Default,MsgReader.Rtf,DocumentWriter,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DocumentWriter.cs,WriteStartParagraph,The following switch statement is missing a default case: switch (info.Align)                  {                      case RtfAlignment.Left:                          Writer.WriteKeyword("ql");                          break;                        case RtfAlignment.Center:                          Writer.WriteKeyword("qc");                          break;                                            case RtfAlignment.Right:                          Writer.WriteKeyword("qr");                          break;                                            case RtfAlignment.Justify:                          Writer.WriteKeyword("qj");                          break;                  }
Missing Default,MsgReader.Rtf,DocumentWriter,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DocumentWriter.cs,WriteStartString,The following switch statement is missing a default case: switch (info.Align)              {                  case RtfAlignment.Left:                      Writer.WriteKeyword("ql");                      break;                                case RtfAlignment.Center:                      Writer.WriteKeyword("qc");                      break;                                    case RtfAlignment.Right:                      Writer.WriteKeyword("qr");                      break;                                   case RtfAlignment.Justify:                      Writer.WriteKeyword("qj");                      break;              }
Missing Default,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,Load,The following switch statement is missing a default case: switch (reader.Keyword)                                      {                                          case Consts.Sn:                                              vName = ReadInnerText(reader' true);                                              break;                                          case Consts.Sv:                                              vValue = ReadInnerText(reader' true);                                              break;                                      }
Missing Default,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadListOverrideTable,The following switch statement is missing a default case: switch (reader.CurrentToken.Key)  				        {  					        case Consts.ListId:  						        record.ListId = reader.CurrentToken.Param;  						        break;    					        case Consts.ListOverrideCount:  						        record.ListOverrideCount = reader.CurrentToken.Param;  						        break;    					        case Consts.Ls:  						        record.Id = reader.CurrentToken.Param;  						        break;  				        }
Missing Default,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadListTable,The following switch statement is missing a default case: switch (reader.CurrentToken.Key)  				        {  					        case "listtemplateid":  						        currentList.ListTemplateId = reader.CurrentToken.Param;  						        break;    					        case "listid":  						        currentList.ListId = reader.CurrentToken.Param;  						        break;    					        case "listhybrid":  						        currentList.ListHybrid = true;  						        break;    					        case "levelfollow":  						        currentList.LevelFollow = reader.CurrentToken.Param;  						        break;    					        case "levelstartat":  						        currentList.LevelStartAt = reader.CurrentToken.Param;  						        break;    					        case "levelnfc":  						        if (currentList.LevelNfc == RtfLevelNumberType.None)  							        currentList.LevelNfc = (RtfLevelNumberType)reader.CurrentToken.Param;  						        break;    					        case "levelnfcn":  						        if (currentList.LevelNfc == RtfLevelNumberType.None)  							        currentList.LevelNfc = (RtfLevelNumberType)reader.CurrentToken.Param;  						        break;    					        case "leveljc":  						        currentList.LevelJc = reader.CurrentToken.Param;  						        break;    					        case "leveltext":  						        if (string.IsNullOrEmpty(currentList.LevelText))  						        {  							        var text = ReadInnerText(reader' true);  							        if (text != null && text.Length > 2)  							        {  								        int len = text[0];  								        len = Math.Min(len' text.Length - 1);  								        text = text.Substring(1' len);  							        }  							        currentList.LevelText = text;  						        }  						        break;    					        case "f":  						        currentList.FontName = FontTable.GetFontName(reader.CurrentToken.Param);  						        break;  				        }
Missing Default,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadColorTable,The following switch statement is missing a default case: switch (reader.Keyword)  		        {  			        case "red":  				        r = reader.Parameter;  				        break;  			        case "green":  				        g = reader.Parameter;  				        break;  			        case "blue":  				        b = reader.Parameter;  				        break;  			        case ";":  				        if (r >= 0 && g >= 0 && b >= 0)  				        {  					        var c = Color.FromArgb(255' r' g' b);  					        ColorTable.Add(c);  					        r = -1;  					        g = -1;  					        b = -1;  				        }  				        break;  		        }
Missing Default,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadDateTime,The following switch statement is missing a default case: switch (reader.Keyword)  		        {  			        case "yr":  				        yr = reader.Parameter;  				        break;    			        case "mo":  				        mo = reader.Parameter;  				        break;    			        case "dy":  				        dy = reader.Parameter;  				        break;    			        case "hr":  				        hr = reader.Parameter;  				        break;    			        case "min":  				        min = reader.Parameter;  				        break;    			        case "sec":  				        sec = reader.Parameter;  				        break;  		        }
Missing Default,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadDomObject,The following switch statement is missing a default case: switch (reader.Keyword)  		        {  			        case Consts.Objautlink:  				        domObject.Type = RtfObjectType.AutLink;  				        break;    			        case Consts.Objclass:  				        domObject.ClassName = ReadInnerText(reader' true);  				        break;    			        case Consts.Objdata:  				        var data = ReadInnerText(reader' true);  				        domObject.Content = HexToBytes(data);  				        break;    			        case Consts.Objemb:  				        domObject.Type = RtfObjectType.Emb;  				        break;    			        case Consts.Objh:  				        domObject.Height = reader.Parameter;  				        break;    			        case Consts.Objhtml:  				        domObject.Type = RtfObjectType.Html;  				        break;    			        case Consts.Objicemb:  				        domObject.Type = RtfObjectType.Icemb;  				        break;    			        case Consts.Objlink:  				        domObject.Type = RtfObjectType.Link;  				        break;    			        case Consts.Objname:  				        domObject.Name = ReadInnerText(reader' true);  				        break;    			        case Consts.Objocx:  				        domObject.Type = RtfObjectType.Ocx;  				        break;    			        case Consts.Objpub:  				        domObject.Type = RtfObjectType.Pub;  				        break;    			        case Consts.Objsub:  				        domObject.Type = RtfObjectType.Sub;  				        break;    			        case Consts.Objtime:  				        break;    			        case Consts.Objw:  				        domObject.Width = reader.Parameter;  				        break;    			        case Consts.Objscalex:  				        domObject.ScaleX = reader.Parameter;  				        break;    			        case Consts.Objscaley:  				        domObject.ScaleY = reader.Parameter;  				        break;    			        case Consts.Result:  				        var result = new ElementContainer { Name = Consts.Result };  				        domObject.AppendChild(result);  				        Load(reader' format);  				        result.Locked = true;  				        break;  		        }
Missing Default,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadDomField,The following switch statement is missing a default case: switch (reader.Keyword)  			        {  				        case Consts.Flddirty:  					        field.Method = RtfDomFieldMethod.Dirty;  					        break;    				        case Consts.Fldedit:  					        field.Method = RtfDomFieldMethod.Edit;  					        break;    				        case Consts.Fldlock:  					        field.Method = RtfDomFieldMethod.Lock;  					        break;    				        case Consts.Fldpriv:  					        field.Method = RtfDomFieldMethod.Priv;  					        break;    				        case Consts.Fldrslt:  					        var result = new ElementContainer { Name = Consts.Fldrslt };  					        field.AppendChild(result);  					        Load(reader' format);  					        result.Locked = true;  					        break;    				        case Consts.Fldinst:  					        var inst = new ElementContainer { Name = Consts.Fldinst };  					        field.AppendChild(inst);  					        Load(reader' format);  					        inst.Locked = true;  					        var txt = inst.InnerText;  					        if (txt != null)  					        {  						        var index = txt.IndexOf(Consts.Hyperlink' StringComparison.Ordinal);  						        if (index >= 0)  						        {  							        var index1 = txt.IndexOf('\"'' index);  							        if (index1 > 0 && txt.Length > index1 + 2)  							        {  								        var index2 = txt.IndexOf('\"'' index1 + 2);  								        if (index2 > index1)  								        {  									        var link = txt.Substring(index1 + 1' index2 - index1 - 1);  									        if (format.Parent != null)  									        {  										        if (link.StartsWith("_Toc"))  											        link = "#" + link;  										        format.Parent.Link = link;  									        }  								        }  							        }  						        }  					        }    					        break;  			        }
Missing Default,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadHtmlContent,The following switch statement is missing a default case: switch (reader.TokenType)  				        {  					        case RtfTokenType.Control:  						        if (!htmlState)  						        {                                      switch (reader.Keyword)  							        {  								        case "'":                                                if (FontTable != null && fontIndex.HasValue && fontIndex <= FontTable.Count)                                              {                                                  var font = FontTable[fontIndex.Value];                                                  encoding = font.Encoding ?? _defaultEncoding;                                              }                                                // Convert HEX value directly when we have a single byte charset                                              if (encoding.IsSingleByte)  									        {  									            if (string.IsNullOrEmpty(hexBuffer))  									                hexBuffer = reader.CurrentToken.Hex;                                                    var buff = new[] { byte.Parse(hexBuffer' NumberStyles.HexNumber) };                                                  hexBuffer = string.Empty;                                                  stringBuilder.Append(encoding.GetString(buff));                                              }  									        else  									        {  									            // If we have a double byte charset like chinese then store the value and wait for the next HEX value  									            if (hexBuffer == string.Empty)  									                hexBuffer = reader.CurrentToken.Hex;  									            else  									            {  									                // Append the second HEX value and convert it   									                var buff = new[]  									                {  									                    byte.Parse(hexBuffer' NumberStyles.HexNumber)'  									                    byte.Parse(reader.CurrentToken.Hex' NumberStyles.HexNumber)  									                };    									                stringBuilder.Append(encoding.GetString(buff));    									                // Empty the HEX buffer   									                hexBuffer = string.Empty;  									            }  									        }  									        break;                                            case "u":                                              stringBuilder.Append(HttpUtility.UrlDecode("*"' _defaultEncoding));                                              break;                                      }                                  }  						        break;    					        case RtfTokenType.ExtKeyword:  					        case RtfTokenType.Keyword:    						        if (!htmlState)  						        {  							        switch (reader.Keyword)  							        {  								        case Consts.Par:  									        stringBuilder.Append(Environment.NewLine);  									        break;    								        case Consts.Line:  									        stringBuilder.Append(Environment.NewLine);  									        break;    								        case Consts.Tab:  									        stringBuilder.Append("\t");  									        break;    								        case Consts.Lquote:  									        stringBuilder.Append("&lsquo;");  									        break;    								        case Consts.Rquote:  									        stringBuilder.Append("&rsquo;");  									        break;    								        case Consts.LdblQuote:  									        stringBuilder.Append("&ldquo;");  									        break;    								        case Consts.RdblQuote:  									        stringBuilder.Append("&rdquo;");  									        break;    								        case Consts.Bullet:  									        stringBuilder.Append("&bull;");  									        break;    								        case Consts.Endash:  									        stringBuilder.Append("&ndash;");  									        break;    								        case Consts.Emdash:  									        stringBuilder.Append("&mdash;");  									        break;    								        case Consts.Tilde:  									        stringBuilder.Append("&nbsp;");  									        break;    								        case Consts.Underscore:  									        stringBuilder.Append("&shy;");  									        break;                                            case Consts.Pntext:                                              ReadToEndOfGroup(reader);                                              break;    								        case Consts.U:                                                if (reader.Parameter.ToString().StartsWith("c"' StringComparison.InvariantCultureIgnoreCase))                                                  throw new Exception("\\uc parameter not yet supported' please contact the developer on GitHub");    								            if (reader.Parameter.ToString().StartsWith("-"))  								            {                                                  // The Unicode standard permanently reserves these code point values for                                                  // UTF-16 encoding of the high and low surrogates  								                // U+D800 to U+DFFF                                                  // 55296  -  57343                                                    var value = 65536 + int.Parse(reader.Parameter.ToString());    								                if (value >= 0xD800 && value <= 0xDFFF)  								                {  								                    if (!reader.ParsingHighLowSurrogate)  								                    {  								                        reader.ParsingHighLowSurrogate = true;  								                        reader.HighSurrogateValue = value;  								                    }  								                    else  								                    {  								                        var combined = ((reader.HighSurrogateValue - 0xD800) << 10) + (value - 0xDC00) + 0x10000;  								                        stringBuilder.Append("&#" + combined + ";");  								                        reader.ParsingHighLowSurrogate = false;  								                        reader.HighSurrogateValue = null;  								                    }  								                }  								                else  								                {  								                    reader.ParsingHighLowSurrogate = false;  								                    stringBuilder.Append("&#" + value + ";");  								                }  								            }  								            else  								                stringBuilder.Append("&#" + reader.Parameter + ";");  									        break;  							        }  						        }  						        break;    					        case RtfTokenType.Text:  						        if (htmlState == false)  							        stringBuilder.Append(reader.Keyword);  						        break;  				        }
Missing Default,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadHtmlContent,The following switch statement is missing a default case: switch (reader.Keyword)  							        {  								        case "'":                                                if (FontTable != null && fontIndex.HasValue && fontIndex <= FontTable.Count)                                              {                                                  var font = FontTable[fontIndex.Value];                                                  encoding = font.Encoding ?? _defaultEncoding;                                              }                                                // Convert HEX value directly when we have a single byte charset                                              if (encoding.IsSingleByte)  									        {  									            if (string.IsNullOrEmpty(hexBuffer))  									                hexBuffer = reader.CurrentToken.Hex;                                                    var buff = new[] { byte.Parse(hexBuffer' NumberStyles.HexNumber) };                                                  hexBuffer = string.Empty;                                                  stringBuilder.Append(encoding.GetString(buff));                                              }  									        else  									        {  									            // If we have a double byte charset like chinese then store the value and wait for the next HEX value  									            if (hexBuffer == string.Empty)  									                hexBuffer = reader.CurrentToken.Hex;  									            else  									            {  									                // Append the second HEX value and convert it   									                var buff = new[]  									                {  									                    byte.Parse(hexBuffer' NumberStyles.HexNumber)'  									                    byte.Parse(reader.CurrentToken.Hex' NumberStyles.HexNumber)  									                };    									                stringBuilder.Append(encoding.GetString(buff));    									                // Empty the HEX buffer   									                hexBuffer = string.Empty;  									            }  									        }  									        break;                                            case "u":                                              stringBuilder.Append(HttpUtility.UrlDecode("*"' _defaultEncoding));                                              break;                                      }
Missing Default,MsgReader.Rtf,DomDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\DomDocument.cs,ReadHtmlContent,The following switch statement is missing a default case: switch (reader.Keyword)  							        {  								        case Consts.Par:  									        stringBuilder.Append(Environment.NewLine);  									        break;    								        case Consts.Line:  									        stringBuilder.Append(Environment.NewLine);  									        break;    								        case Consts.Tab:  									        stringBuilder.Append("\t");  									        break;    								        case Consts.Lquote:  									        stringBuilder.Append("&lsquo;");  									        break;    								        case Consts.Rquote:  									        stringBuilder.Append("&rsquo;");  									        break;    								        case Consts.LdblQuote:  									        stringBuilder.Append("&ldquo;");  									        break;    								        case Consts.RdblQuote:  									        stringBuilder.Append("&rdquo;");  									        break;    								        case Consts.Bullet:  									        stringBuilder.Append("&bull;");  									        break;    								        case Consts.Endash:  									        stringBuilder.Append("&ndash;");  									        break;    								        case Consts.Emdash:  									        stringBuilder.Append("&mdash;");  									        break;    								        case Consts.Tilde:  									        stringBuilder.Append("&nbsp;");  									        break;    								        case Consts.Underscore:  									        stringBuilder.Append("&shy;");  									        break;                                            case Consts.Pntext:                                              ReadToEndOfGroup(reader);                                              break;    								        case Consts.U:                                                if (reader.Parameter.ToString().StartsWith("c"' StringComparison.InvariantCultureIgnoreCase))                                                  throw new Exception("\\uc parameter not yet supported' please contact the developer on GitHub");    								            if (reader.Parameter.ToString().StartsWith("-"))  								            {                                                  // The Unicode standard permanently reserves these code point values for                                                  // UTF-16 encoding of the high and low surrogates  								                // U+D800 to U+DFFF                                                  // 55296  -  57343                                                    var value = 65536 + int.Parse(reader.Parameter.ToString());    								                if (value >= 0xD800 && value <= 0xDFFF)  								                {  								                    if (!reader.ParsingHighLowSurrogate)  								                    {  								                        reader.ParsingHighLowSurrogate = true;  								                        reader.HighSurrogateValue = value;  								                    }  								                    else  								                    {  								                        var combined = ((reader.HighSurrogateValue - 0xD800) << 10) + (value - 0xDC00) + 0x10000;  								                        stringBuilder.Append("&#" + combined + ";");  								                        reader.ParsingHighLowSurrogate = false;  								                        reader.HighSurrogateValue = null;  								                    }  								                }  								                else  								                {  								                    reader.ParsingHighLowSurrogate = false;  								                    stringBuilder.Append("&#" + value + ";");  								                }  								            }  								            else  								                stringBuilder.Append("&#" + reader.Parameter + ";");  									        break;  							        }
Missing Default,MsgReader.Rtf,Node,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\Node.cs,Write,The following switch statement is missing a default case: switch (Type)              {                  case RtfNodeType.ExtKeyword:                  case RtfNodeType.Keyword:                  case RtfNodeType.Control:                        if (HasParameter)                          writer.WriteKeyword(InternalKeyword + Parameter' Type == RtfNodeType.ExtKeyword);                      else                          writer.WriteKeyword(InternalKeyword' Type == RtfNodeType.ExtKeyword);                      break;                                    case RtfNodeType.Text:                      writer.WriteText(InternalKeyword);                      break;              }
Missing Default,MsgReader.Rtf,RawDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\RawDocument.cs,Load,The following switch statement is missing a default case: switch (newGroup.Keyword)                          {                              case Consts.Fonttbl:                                  // Read font table                                  ReadFontTable(newGroup);                                  break;                                case Consts.Colortbl:                                  // Read color table                                  ReadColorTable(newGroup);                                  break;                                case Consts.Info:                                  // Read document information                                  ReadDocumentInfo(newGroup);                                  break;                          }
Missing Default,MsgReader.Rtf,RawDocument,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\RawDocument.cs,Load,The following switch statement is missing a default case: switch (newNode.Keyword)                      {                          case Consts.F:                          {                              var font = FontTable[newNode.Parameter];                              _fontChartset = font != null ? font.Encoding : null;                              //myFontChartset = RTFFont.GetRTFEncoding( NewNode.Parameter );                          }                              break;                            case Consts.Af:                          {                              var font = FontTable[newNode.Parameter];                              _associatedFontChartset = font != null ? font.Encoding : null;                          }                              break;                        }
Missing Default,MsgReader.Rtf,Reader,D:\research\architectureSmells\repos1\Sicos1977_msgreader\MsgReaderCore\Rtf\Reader.cs,DefaultProcess,The following switch statement is missing a default case: switch (CurrentToken.Key)              {                  case "uc":                      CurrentLayerInfo.UcValue = Parameter;                      break;  				case "u":  		            if (InnerReader.Peek() == '?')  			            InnerReader.Read();  		            break;              }
