Implementation smell,Namespace,Class,File,Method,Description
Long Method,Itenso.Sys,StringTool,C:\repos\Sicos1977_msgreader\Sys\StringTool.cs,SplitQuoted,The method has 126 lines of code.
Complex Method,Itenso.Sys,StringTool,C:\repos\Sicos1977_msgreader\Sys\StringTool.cs,SplitQuoted,Cyclomatic complexity of the method is 11
Long Parameter List,Itenso.Sys,StringTool,C:\repos\Sicos1977_msgreader\Sys\StringTool.cs,SplitQuoted,The method has 5 parameters. Parameters: toSplit' quote' escape' includeEmptyUnquotedSections' separator
Long Parameter List,Itenso.Sys.Collection,CollectionTool,C:\repos\Sicos1977_msgreader\Sys\Collection\CollectionTool.cs,ToString,The method has 5 parameters. Parameters: enumerable' startText' endText' delimiterText' undefinedValueText
Complex Conditional,Itenso.Sys.Collection,CollectionTool,C:\repos\Sicos1977_msgreader\Sys\Collection\CollectionTool.cs,AreEqual,The conditional expression  "!equal && enumerable != null && obj != null && enumerable.GetType() == obj.GetType()"  is complex.
Magic Number,Itenso.Sys,HashTool,C:\repos\Sicos1977_msgreader\Sys\HashTool.cs,AddHashCode,The following statement contains a magic number: if ( hash != 0 ) // perform this check to prevent FxCop warning 'op could overflow'  			{  				combinedHash += hash * 31;  			}
Magic Number,Itenso.Sys,HashTool,C:\repos\Sicos1977_msgreader\Sys\HashTool.cs,AddHashCode,The following statement contains a magic number: if ( hash != 0 ) // perform this check to prevent FxCop warning 'op could overflow'  			{  				combinedHash += hash * 31;  			}
Magic Number,Itenso.Sys,HashTool,C:\repos\Sicos1977_msgreader\Sys\HashTool.cs,ComputeHashCode,The following statement contains a magic number: foreach ( object item in enumerable )  			{  				hash = hash * 31 + ( item != null ? item.GetHashCode() : 0 );  			}
Magic Number,Itenso.Sys,StringTool,C:\repos\Sicos1977_msgreader\Sys\StringTool.cs,SplitQuoted,The following statement contains a magic number: for ( int i = 0; i < length; i++ )  			{  				char c = toSplit[ i ];  				if ( c == escape )  				{  					if ( i < length - 1 )  					{  						if ( section == null )  						{  							section = new StringBuilder();  						}  						i++;  						c = toSplit[ i ];  						switch ( c )  						{  							case 'n':  								section.Append( '\n' );  								break;  							case 'r':  								section.Append( '\r' );  								break;  							case 't':  								section.Append( '\t' );  								break;  							case 'x':  								if ( i < length - 2 )  								{  									int upperHexNibble = GetHexValue( toSplit[ i + 1 ] ) * 16;  									int lowerHexNibble = GetHexValue( toSplit[ i + 2 ] );  									char hexChar = (char)( upperHexNibble + lowerHexNibble );  									section.Append( hexChar );  									i += 2;  								}  								else  								{  									throw new ArgumentException( Strings.StringToolMissingEscapedHexCode' "toSplit" );  								}  								break;  							default:  								section.Append( c );  								break;  						}  					}  					else  					{  						throw new ArgumentException( Strings.StringToolMissingEscapedChar' "toSplit" );  					}  				}  				else if ( c == quote )  				{  					if ( section != null )  					{  						sections.Add( section.ToString() );  						section = null;  					}  					else if ( inQuotedSection )  					{  						sections.Add( string.Empty );  					}  					inQuotedSection = !inQuotedSection;  				}  				else if ( separators.IndexOf( c ) >= 0 )  				{  					if ( inQuotedSection )  					{  						if ( section == null )  						{  							section = new StringBuilder();  						}  						section.Append( c );  					}  					else  					{  						if ( section != null )  						{  							sections.Add( section.ToString() );  							section = null;  						}  						else if ( includeEmptyUnquotedSections )  						{  							if ( i == 0 || separators.IndexOf( toSplit[ i - 1 ] ) >= 0 )  							{  								sections.Add( string.Empty );  							}  						}  					}  				}  				else  				{  					if ( section == null )  					{  						section = new StringBuilder();  					}  					section.Append( c );  				}  			}
Magic Number,Itenso.Sys,StringTool,C:\repos\Sicos1977_msgreader\Sys\StringTool.cs,SplitQuoted,The following statement contains a magic number: for ( int i = 0; i < length; i++ )  			{  				char c = toSplit[ i ];  				if ( c == escape )  				{  					if ( i < length - 1 )  					{  						if ( section == null )  						{  							section = new StringBuilder();  						}  						i++;  						c = toSplit[ i ];  						switch ( c )  						{  							case 'n':  								section.Append( '\n' );  								break;  							case 'r':  								section.Append( '\r' );  								break;  							case 't':  								section.Append( '\t' );  								break;  							case 'x':  								if ( i < length - 2 )  								{  									int upperHexNibble = GetHexValue( toSplit[ i + 1 ] ) * 16;  									int lowerHexNibble = GetHexValue( toSplit[ i + 2 ] );  									char hexChar = (char)( upperHexNibble + lowerHexNibble );  									section.Append( hexChar );  									i += 2;  								}  								else  								{  									throw new ArgumentException( Strings.StringToolMissingEscapedHexCode' "toSplit" );  								}  								break;  							default:  								section.Append( c );  								break;  						}  					}  					else  					{  						throw new ArgumentException( Strings.StringToolMissingEscapedChar' "toSplit" );  					}  				}  				else if ( c == quote )  				{  					if ( section != null )  					{  						sections.Add( section.ToString() );  						section = null;  					}  					else if ( inQuotedSection )  					{  						sections.Add( string.Empty );  					}  					inQuotedSection = !inQuotedSection;  				}  				else if ( separators.IndexOf( c ) >= 0 )  				{  					if ( inQuotedSection )  					{  						if ( section == null )  						{  							section = new StringBuilder();  						}  						section.Append( c );  					}  					else  					{  						if ( section != null )  						{  							sections.Add( section.ToString() );  							section = null;  						}  						else if ( includeEmptyUnquotedSections )  						{  							if ( i == 0 || separators.IndexOf( toSplit[ i - 1 ] ) >= 0 )  							{  								sections.Add( string.Empty );  							}  						}  					}  				}  				else  				{  					if ( section == null )  					{  						section = new StringBuilder();  					}  					section.Append( c );  				}  			}
Magic Number,Itenso.Sys,StringTool,C:\repos\Sicos1977_msgreader\Sys\StringTool.cs,SplitQuoted,The following statement contains a magic number: for ( int i = 0; i < length; i++ )  			{  				char c = toSplit[ i ];  				if ( c == escape )  				{  					if ( i < length - 1 )  					{  						if ( section == null )  						{  							section = new StringBuilder();  						}  						i++;  						c = toSplit[ i ];  						switch ( c )  						{  							case 'n':  								section.Append( '\n' );  								break;  							case 'r':  								section.Append( '\r' );  								break;  							case 't':  								section.Append( '\t' );  								break;  							case 'x':  								if ( i < length - 2 )  								{  									int upperHexNibble = GetHexValue( toSplit[ i + 1 ] ) * 16;  									int lowerHexNibble = GetHexValue( toSplit[ i + 2 ] );  									char hexChar = (char)( upperHexNibble + lowerHexNibble );  									section.Append( hexChar );  									i += 2;  								}  								else  								{  									throw new ArgumentException( Strings.StringToolMissingEscapedHexCode' "toSplit" );  								}  								break;  							default:  								section.Append( c );  								break;  						}  					}  					else  					{  						throw new ArgumentException( Strings.StringToolMissingEscapedChar' "toSplit" );  					}  				}  				else if ( c == quote )  				{  					if ( section != null )  					{  						sections.Add( section.ToString() );  						section = null;  					}  					else if ( inQuotedSection )  					{  						sections.Add( string.Empty );  					}  					inQuotedSection = !inQuotedSection;  				}  				else if ( separators.IndexOf( c ) >= 0 )  				{  					if ( inQuotedSection )  					{  						if ( section == null )  						{  							section = new StringBuilder();  						}  						section.Append( c );  					}  					else  					{  						if ( section != null )  						{  							sections.Add( section.ToString() );  							section = null;  						}  						else if ( includeEmptyUnquotedSections )  						{  							if ( i == 0 || separators.IndexOf( toSplit[ i - 1 ] ) >= 0 )  							{  								sections.Add( string.Empty );  							}  						}  					}  				}  				else  				{  					if ( section == null )  					{  						section = new StringBuilder();  					}  					section.Append( c );  				}  			}
Magic Number,Itenso.Sys,StringTool,C:\repos\Sicos1977_msgreader\Sys\StringTool.cs,SplitQuoted,The following statement contains a magic number: for ( int i = 0; i < length; i++ )  			{  				char c = toSplit[ i ];  				if ( c == escape )  				{  					if ( i < length - 1 )  					{  						if ( section == null )  						{  							section = new StringBuilder();  						}  						i++;  						c = toSplit[ i ];  						switch ( c )  						{  							case 'n':  								section.Append( '\n' );  								break;  							case 'r':  								section.Append( '\r' );  								break;  							case 't':  								section.Append( '\t' );  								break;  							case 'x':  								if ( i < length - 2 )  								{  									int upperHexNibble = GetHexValue( toSplit[ i + 1 ] ) * 16;  									int lowerHexNibble = GetHexValue( toSplit[ i + 2 ] );  									char hexChar = (char)( upperHexNibble + lowerHexNibble );  									section.Append( hexChar );  									i += 2;  								}  								else  								{  									throw new ArgumentException( Strings.StringToolMissingEscapedHexCode' "toSplit" );  								}  								break;  							default:  								section.Append( c );  								break;  						}  					}  					else  					{  						throw new ArgumentException( Strings.StringToolMissingEscapedChar' "toSplit" );  					}  				}  				else if ( c == quote )  				{  					if ( section != null )  					{  						sections.Add( section.ToString() );  						section = null;  					}  					else if ( inQuotedSection )  					{  						sections.Add( string.Empty );  					}  					inQuotedSection = !inQuotedSection;  				}  				else if ( separators.IndexOf( c ) >= 0 )  				{  					if ( inQuotedSection )  					{  						if ( section == null )  						{  							section = new StringBuilder();  						}  						section.Append( c );  					}  					else  					{  						if ( section != null )  						{  							sections.Add( section.ToString() );  							section = null;  						}  						else if ( includeEmptyUnquotedSections )  						{  							if ( i == 0 || separators.IndexOf( toSplit[ i - 1 ] ) >= 0 )  							{  								sections.Add( string.Empty );  							}  						}  					}  				}  				else  				{  					if ( section == null )  					{  						section = new StringBuilder();  					}  					section.Append( c );  				}  			}
Magic Number,Itenso.Sys,StringTool,C:\repos\Sicos1977_msgreader\Sys\StringTool.cs,GetHexValue,The following statement contains a magic number: if ( c >= 'a' && c <= 'f' )  			{  				return c - 'a' + 10;  			}
Magic Number,Itenso.Sys,StringTool,C:\repos\Sicos1977_msgreader\Sys\StringTool.cs,GetHexValue,The following statement contains a magic number: if ( c >= 'A' && c <= 'F' )  			{  				return c - 'A' + 10;  			}
Magic Number,Itenso.Sys.Collection,CollectionTool,C:\repos\Sicos1977_msgreader\Sys\Collection\CollectionTool.cs,AddHashCode,The following statement contains a magic number: if ( hash != 0 ) // perform this check to prevent FxCop warning 'op could overflow'  			{  				combinedHash += hash * 31;  			}
Magic Number,Itenso.Sys.Collection,CollectionTool,C:\repos\Sicos1977_msgreader\Sys\Collection\CollectionTool.cs,AddHashCode,The following statement contains a magic number: if ( hash != 0 ) // perform this check to prevent FxCop warning 'op could overflow'  			{  				combinedHash += hash * 31;  			}
Magic Number,Itenso.Sys.Collection,CollectionTool,C:\repos\Sicos1977_msgreader\Sys\Collection\CollectionTool.cs,ComputeHashCode,The following statement contains a magic number: foreach ( object item in enumerable )  			{  				hash = hash * 31 + ( item != null ? item.GetHashCode() : 0 );  			}
