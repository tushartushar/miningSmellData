Implementation smell,Namespace,Class,File,Method,Description
Long Method,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,The method has 159 lines of code.
Complex Method,Kamilla.CodeHighlighting,SimpleCodeHighlighter,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\CodeHighlighting\CodeHighlighter.cs,Highlight,Cyclomatic complexity of the method is 13
Complex Method,Kamilla,CollectionExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\CollectionExtensions.cs,AddRange,Cyclomatic complexity of the method is 9
Complex Method,Kamilla,CollectionExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\CollectionExtensions.cs,InternalSequenceEqual,Cyclomatic complexity of the method is 20
Complex Method,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,AsByteArrayNoSpaces,Cyclomatic complexity of the method is 8
Complex Method,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,AsByteArrayWithSpaces,Cyclomatic complexity of the method is 13
Complex Method,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,Cyclomatic complexity of the method is 9
Complex Method,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,Cyclomatic complexity of the method is 21
Complex Method,Kamilla,StringReverseComparer,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringReverseComparer.cs,Compare,Cyclomatic complexity of the method is 9
Complex Method,Kamilla,TypeManager,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\TypeManager.cs,Initialize,Cyclomatic complexity of the method is 8
Complex Method,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,InternalReadOneChar,Cyclomatic complexity of the method is 10
Complex Method,Kamilla.Network.Logging,Krpd2NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\Network\Logging\Krpd2NetworkLog.cs,InternalOpenForReading,Cyclomatic complexity of the method is 9
Complex Method,Kamilla.Network.Logging,NetworkLogFactory,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\Network\Logging\NetworkLogFactory.cs,Initialize,Cyclomatic complexity of the method is 11
Complex Method,Kamilla.Network.Logging,NetworkLogFactory,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\Network\Logging\NetworkLogFactory.cs,GetNetworkLog,Cyclomatic complexity of the method is 8
Complex Method,Kamilla.Network.Parsing,PacketParser,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\Network\Parsing\PacketParser.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,Kamilla.Network.Protocols,ProtocolManager,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\Network\Protocols\ProtocolManager.cs,Initialize,Cyclomatic complexity of the method is 10
Long Parameter List,Kamilla,CollectionExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\CollectionExtensions.cs,SequenceEqual,The method has 6 parameters. Parameters: collection' collection2' index' index2' count' comparer
Long Parameter List,Kamilla,CollectionExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\CollectionExtensions.cs,SequenceEqual,The method has 5 parameters. Parameters: collection' collection2' index' index2' comparer
Long Parameter List,Kamilla,CollectionExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\CollectionExtensions.cs,SequenceEqual,The method has 5 parameters. Parameters: collection' collection2' index' index2' count
Long Parameter List,Kamilla,CollectionExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\CollectionExtensions.cs,InternalSequenceEqual,The method has 7 parameters. Parameters: collection' collection2' index' index2' count' comparer' countKnown
Long Parameter List,Kamilla,CollectionExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\CollectionExtensions.cs,BinaryIndexOf,The method has 5 parameters. Parameters: list' index' length' item' comparison
Long Parameter List,Kamilla,CollectionExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\CollectionExtensions.cs,BinaryIndexOf,The method has 5 parameters. Parameters: list' index' length' item' comparer
Long Parameter List,Kamilla,Win32,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\Win32.cs,AdjustTokenPrivileges,The method has 6 parameters. Parameters: TokenHandle' DisableAllPrivileges' NewState' BufferLength' PreviousState' ReturnLength
Long Parameter List,Kamilla,Win32,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\Win32.cs,ReadProcessMemory,The method has 5 parameters. Parameters: hProcess' lpBaseAddress' lpBuffer' nSize' lpNumberOfBytesRead
Long Parameter List,Kamilla.Network,Packet,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\Network\Packet.cs,Packet,The method has 5 parameters. Parameters: data' direction' flags' arrivalTime' arrivalTicks
Long Identifier,Kamilla.CodeHighlighting,SimpleCodeHighlighter,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\CodeHighlighting\CodeHighlighter.cs,Highlight,The length of the parameter oneLineCommentsStartWithLength is 30.
Long Identifier,Kamilla.Network.Protocols,DefaultProtocol,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\Network\Protocols\DefaultProtocol.cs,,The length of the parameter m_itemVisualDataQueriedHandler is 30.
Long Identifier,Kamilla.WPF,WindowBehavior,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\WPF\WindowBehavior.cs,,The length of the parameter HasTitleBarCloseButtonProperty is 30.
Long Identifier,Kamilla.WPF,WindowBehavior,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\WPF\WindowBehavior.cs,,The length of the parameter HasTitleBarMinimizeButtonProperty is 33.
Long Identifier,Kamilla.WPF,WindowBehavior,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\WPF\WindowBehavior.cs,,The length of the parameter HasTitleBarMaximizeButtonProperty is 33.
Complex Conditional,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The conditional expression  "detectRussian && (c == 0xD0 || c == 0xD1) && iterator < byteArray.Length - 1"  is complex.
Complex Conditional,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,The conditional expression  "ones > 1 && ones < 5 && (tens < 10 || tens > 19)"  is complex.
Complex Conditional,Kamilla.Network.Protocols,DefaultProtocol,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\Network\Protocols\DefaultProtocol.cs,Load,The conditional expression  "columnOrder == null || columnOrder.Length != nColumns                  || columnOrder.Any(val => val >= nColumns || val < 0)"  is complex.
Empty Catch Block,Kamilla,UICulture,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\UICulture.cs,Initialize,The method has an empty catch block.
Magic Number,Kamilla.CodeHighlighting,SimpleCodeHighlighter,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\CodeHighlighting\CodeHighlighter.cs,Highlight,The following statement contains a magic number: var result = new List<HighlightedItem>(64);
Magic Number,Kamilla.CodeHighlighting,SimpleCodeHighlighter,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\CodeHighlighting\CodeHighlighter.cs,Highlight,The following statement contains a magic number: var builder = new StringBuilder(text[i] + ""' 32);
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,AsByteArrayNoSpaces,The following statement contains a magic number: var bytes = new List<byte>(len / 2);
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,AsByteArrayWithSpaces,The following statement contains a magic number: var bytes = new List<byte>(len / 2);
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexString,The following statement contains a magic number: var builder = new StringBuilder(byteArray.Length * (insertSpaces ? 3 : 2));
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexString,The following statement contains a magic number: var builder = new StringBuilder(byteArray.Length * (insertSpaces ? 3 : 2));
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: StringBuilder output = new StringBuilder(80 * ((length + 15) / 16 + 4));
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: StringBuilder output = new StringBuilder(80 * ((length + 15) / 16 + 4));
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: StringBuilder output = new StringBuilder(80 * ((length + 15) / 16 + 4));
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: StringBuilder output = new StringBuilder(80 * ((length + 15) / 16 + 4));
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: StringBuilder output = new StringBuilder(80 * ((length + 15) / 16 + 4));
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: StringBuilder output = new StringBuilder(80 * ((length + 15) / 16 + 4));
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: StringBuilder output = new StringBuilder(80 * ((length + 15) / 16 + 4));
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: StringBuilder output = new StringBuilder(80 * ((length + 15) / 16 + 4));
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: int lines = (length + 15) / 16;
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: int lines = (length + 15) / 16;
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: var chars = new StringBuilder(16);
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: j < 16
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,FixNewLines,The following statement contains a magic number: var builder = new StringBuilder((int)(tofix.Length * 1.1));
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,The following statement contains a magic number: var builder = new StringBuilder(format.Length + args.Length * 8);
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,The following statement contains a magic number: index = index * 10 + format[j] - '0';
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,The following statement contains a magic number: Func<string> readString = () =>                          {                              var builder2 = new StringBuilder(16);                                if (format[j] != ':' && format[j] != '?')                                  throw new FormatException();                                ++j;                              while (format[j] != ':' && format[j] != '}')                              {                                  builder2.Append(format[j]);                                  ++j;                              }                              return builder2.ToString();                          };
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,The following statement contains a magic number: switch (type)                          {                              // left' if value is true or non-zero or non-null                              // otherwise' right                              case "bool":                              {                                  var ifTrue = readString();                                  var ifFalse = readString();                                  bool cond;                                  var obj = index < args.Length ? args[index] : null;                                  if (obj == null)                                  {                                      cond = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          cond = ((IConvertible)obj).ToInt64(null) != 0L;                                      }                                      catch                                      {                                          cond = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (cond)                                      builder.Append(ifTrue);                                  else                                      builder.Append(ifFalse);                                    break;                              }                              case "plural-ru":                              {                                  var one = readString();                                  var two = readString();                                  var three = readString();                                    var obj = args[index];                                  ulong value;                                  if (obj == null)                                  {                                      value = 0L;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          value = ((IConvertible)obj).ToUInt64(null);                                      }                                      catch                                      {                                          try                                          {                                              value = (ulong)Math.Abs(((IConvertible)obj).ToInt64(null));                                          }                                          catch                                          {                                              value = 0;                                          }                                      }                                  }                                  else                                      throw new ArgumentException();                                    var ones = value % 10;                                  var tens = value % 100;                                    if (ones == 1 && tens != 11)                                      builder.Append(one);                                  else if (ones > 1 && ones < 5 && (tens < 10 || tens > 19))                                      builder.Append(two);                                  else                                      builder.Append(three);                                    break;                              }                              case "plural-en":                              {                                  var ifOne = readString();                                  var ifMany = readString();                                    bool isOne;                                  var obj = args[index];                                  if (obj == null)                                  {                                      isOne = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          var val = ((IConvertible)obj).ToInt64(null);                                          isOne = val == 1L || val == -1L;                                      }                                      catch                                      {                                          isOne = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (isOne)                                      builder.Append(ifOne);                                  else                                      builder.Append(ifMany);                                  break;                              }                              default:                                  throw new FormatException();                          }
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,The following statement contains a magic number: switch (type)                          {                              // left' if value is true or non-zero or non-null                              // otherwise' right                              case "bool":                              {                                  var ifTrue = readString();                                  var ifFalse = readString();                                  bool cond;                                  var obj = index < args.Length ? args[index] : null;                                  if (obj == null)                                  {                                      cond = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          cond = ((IConvertible)obj).ToInt64(null) != 0L;                                      }                                      catch                                      {                                          cond = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (cond)                                      builder.Append(ifTrue);                                  else                                      builder.Append(ifFalse);                                    break;                              }                              case "plural-ru":                              {                                  var one = readString();                                  var two = readString();                                  var three = readString();                                    var obj = args[index];                                  ulong value;                                  if (obj == null)                                  {                                      value = 0L;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          value = ((IConvertible)obj).ToUInt64(null);                                      }                                      catch                                      {                                          try                                          {                                              value = (ulong)Math.Abs(((IConvertible)obj).ToInt64(null));                                          }                                          catch                                          {                                              value = 0;                                          }                                      }                                  }                                  else                                      throw new ArgumentException();                                    var ones = value % 10;                                  var tens = value % 100;                                    if (ones == 1 && tens != 11)                                      builder.Append(one);                                  else if (ones > 1 && ones < 5 && (tens < 10 || tens > 19))                                      builder.Append(two);                                  else                                      builder.Append(three);                                    break;                              }                              case "plural-en":                              {                                  var ifOne = readString();                                  var ifMany = readString();                                    bool isOne;                                  var obj = args[index];                                  if (obj == null)                                  {                                      isOne = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          var val = ((IConvertible)obj).ToInt64(null);                                          isOne = val == 1L || val == -1L;                                      }                                      catch                                      {                                          isOne = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (isOne)                                      builder.Append(ifOne);                                  else                                      builder.Append(ifMany);                                  break;                              }                              default:                                  throw new FormatException();                          }
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,The following statement contains a magic number: switch (type)                          {                              // left' if value is true or non-zero or non-null                              // otherwise' right                              case "bool":                              {                                  var ifTrue = readString();                                  var ifFalse = readString();                                  bool cond;                                  var obj = index < args.Length ? args[index] : null;                                  if (obj == null)                                  {                                      cond = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          cond = ((IConvertible)obj).ToInt64(null) != 0L;                                      }                                      catch                                      {                                          cond = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (cond)                                      builder.Append(ifTrue);                                  else                                      builder.Append(ifFalse);                                    break;                              }                              case "plural-ru":                              {                                  var one = readString();                                  var two = readString();                                  var three = readString();                                    var obj = args[index];                                  ulong value;                                  if (obj == null)                                  {                                      value = 0L;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          value = ((IConvertible)obj).ToUInt64(null);                                      }                                      catch                                      {                                          try                                          {                                              value = (ulong)Math.Abs(((IConvertible)obj).ToInt64(null));                                          }                                          catch                                          {                                              value = 0;                                          }                                      }                                  }                                  else                                      throw new ArgumentException();                                    var ones = value % 10;                                  var tens = value % 100;                                    if (ones == 1 && tens != 11)                                      builder.Append(one);                                  else if (ones > 1 && ones < 5 && (tens < 10 || tens > 19))                                      builder.Append(two);                                  else                                      builder.Append(three);                                    break;                              }                              case "plural-en":                              {                                  var ifOne = readString();                                  var ifMany = readString();                                    bool isOne;                                  var obj = args[index];                                  if (obj == null)                                  {                                      isOne = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          var val = ((IConvertible)obj).ToInt64(null);                                          isOne = val == 1L || val == -1L;                                      }                                      catch                                      {                                          isOne = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (isOne)                                      builder.Append(ifOne);                                  else                                      builder.Append(ifMany);                                  break;                              }                              default:                                  throw new FormatException();                          }
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,The following statement contains a magic number: switch (type)                          {                              // left' if value is true or non-zero or non-null                              // otherwise' right                              case "bool":                              {                                  var ifTrue = readString();                                  var ifFalse = readString();                                  bool cond;                                  var obj = index < args.Length ? args[index] : null;                                  if (obj == null)                                  {                                      cond = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          cond = ((IConvertible)obj).ToInt64(null) != 0L;                                      }                                      catch                                      {                                          cond = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (cond)                                      builder.Append(ifTrue);                                  else                                      builder.Append(ifFalse);                                    break;                              }                              case "plural-ru":                              {                                  var one = readString();                                  var two = readString();                                  var three = readString();                                    var obj = args[index];                                  ulong value;                                  if (obj == null)                                  {                                      value = 0L;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          value = ((IConvertible)obj).ToUInt64(null);                                      }                                      catch                                      {                                          try                                          {                                              value = (ulong)Math.Abs(((IConvertible)obj).ToInt64(null));                                          }                                          catch                                          {                                              value = 0;                                          }                                      }                                  }                                  else                                      throw new ArgumentException();                                    var ones = value % 10;                                  var tens = value % 100;                                    if (ones == 1 && tens != 11)                                      builder.Append(one);                                  else if (ones > 1 && ones < 5 && (tens < 10 || tens > 19))                                      builder.Append(two);                                  else                                      builder.Append(three);                                    break;                              }                              case "plural-en":                              {                                  var ifOne = readString();                                  var ifMany = readString();                                    bool isOne;                                  var obj = args[index];                                  if (obj == null)                                  {                                      isOne = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          var val = ((IConvertible)obj).ToInt64(null);                                          isOne = val == 1L || val == -1L;                                      }                                      catch                                      {                                          isOne = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (isOne)                                      builder.Append(ifOne);                                  else                                      builder.Append(ifMany);                                  break;                              }                              default:                                  throw new FormatException();                          }
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,The following statement contains a magic number: switch (type)                          {                              // left' if value is true or non-zero or non-null                              // otherwise' right                              case "bool":                              {                                  var ifTrue = readString();                                  var ifFalse = readString();                                  bool cond;                                  var obj = index < args.Length ? args[index] : null;                                  if (obj == null)                                  {                                      cond = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          cond = ((IConvertible)obj).ToInt64(null) != 0L;                                      }                                      catch                                      {                                          cond = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (cond)                                      builder.Append(ifTrue);                                  else                                      builder.Append(ifFalse);                                    break;                              }                              case "plural-ru":                              {                                  var one = readString();                                  var two = readString();                                  var three = readString();                                    var obj = args[index];                                  ulong value;                                  if (obj == null)                                  {                                      value = 0L;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          value = ((IConvertible)obj).ToUInt64(null);                                      }                                      catch                                      {                                          try                                          {                                              value = (ulong)Math.Abs(((IConvertible)obj).ToInt64(null));                                          }                                          catch                                          {                                              value = 0;                                          }                                      }                                  }                                  else                                      throw new ArgumentException();                                    var ones = value % 10;                                  var tens = value % 100;                                    if (ones == 1 && tens != 11)                                      builder.Append(one);                                  else if (ones > 1 && ones < 5 && (tens < 10 || tens > 19))                                      builder.Append(two);                                  else                                      builder.Append(three);                                    break;                              }                              case "plural-en":                              {                                  var ifOne = readString();                                  var ifMany = readString();                                    bool isOne;                                  var obj = args[index];                                  if (obj == null)                                  {                                      isOne = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          var val = ((IConvertible)obj).ToInt64(null);                                          isOne = val == 1L || val == -1L;                                      }                                      catch                                      {                                          isOne = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (isOne)                                      builder.Append(ifOne);                                  else                                      builder.Append(ifMany);                                  break;                              }                              default:                                  throw new FormatException();                          }
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,The following statement contains a magic number: switch (type)                          {                              // left' if value is true or non-zero or non-null                              // otherwise' right                              case "bool":                              {                                  var ifTrue = readString();                                  var ifFalse = readString();                                  bool cond;                                  var obj = index < args.Length ? args[index] : null;                                  if (obj == null)                                  {                                      cond = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          cond = ((IConvertible)obj).ToInt64(null) != 0L;                                      }                                      catch                                      {                                          cond = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (cond)                                      builder.Append(ifTrue);                                  else                                      builder.Append(ifFalse);                                    break;                              }                              case "plural-ru":                              {                                  var one = readString();                                  var two = readString();                                  var three = readString();                                    var obj = args[index];                                  ulong value;                                  if (obj == null)                                  {                                      value = 0L;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          value = ((IConvertible)obj).ToUInt64(null);                                      }                                      catch                                      {                                          try                                          {                                              value = (ulong)Math.Abs(((IConvertible)obj).ToInt64(null));                                          }                                          catch                                          {                                              value = 0;                                          }                                      }                                  }                                  else                                      throw new ArgumentException();                                    var ones = value % 10;                                  var tens = value % 100;                                    if (ones == 1 && tens != 11)                                      builder.Append(one);                                  else if (ones > 1 && ones < 5 && (tens < 10 || tens > 19))                                      builder.Append(two);                                  else                                      builder.Append(three);                                    break;                              }                              case "plural-en":                              {                                  var ifOne = readString();                                  var ifMany = readString();                                    bool isOne;                                  var obj = args[index];                                  if (obj == null)                                  {                                      isOne = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          var val = ((IConvertible)obj).ToInt64(null);                                          isOne = val == 1L || val == -1L;                                      }                                      catch                                      {                                          isOne = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (isOne)                                      builder.Append(ifOne);                                  else                                      builder.Append(ifMany);                                  break;                              }                              default:                                  throw new FormatException();                          }
Magic Number,Kamilla,StringExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ParseUInt32,The following statement contains a magic number: return uint.Parse(str.Substring(2)' NumberStyles.AllowHexSpecifier);
Magic Number,Kamilla,TypeManager,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\TypeManager.cs,Initialize,The following statement contains a magic number: var types = new List<Type>(assemblies.Length * 200);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,FlushUnalignedBits,The following statement contains a magic number: m_unalignedBits != 8
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,InternalResetUnalignedBits,The following statement contains a magic number: m_unalignedBits = 8;
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,UnalignedWriteInt,The following statement contains a magic number: CheckBits(bits' 64);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,UnalignedWriteInt,The following statement contains a magic number: CheckBits(bits' 32);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,UnalignedWriteInt,The following statement contains a magic number: CheckBits(bits' 16);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,UnalignedWriteInt,The following statement contains a magic number: CheckBits(bits' 8);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteChar,The following statement contains a magic number: count = m_encoder.GetBytes(&ch' 1' numRef' 16' true);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteDecimal,The following statement contains a magic number: this.WriteInt32(bits[2]);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteDecimal,The following statement contains a magic number: this.WriteInt32(bits[3]);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteDouble,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 8);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteSingle,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 4);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteInt32,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 4);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteInt64,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 8);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteInt16,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 2);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteUInt32,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 4);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteUInt64,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 8);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteUInt16,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 2);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteVector2,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 4 * 2);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteVector2,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 4 * 2);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteVector3,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 4 * 3);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteVector3,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 4 * 3);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,InternalReadOneChar,The following statement contains a magic number: byteCount = m_2BytesPerChar ? 2 : 1;
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,InternalReadOneChar,The following statement contains a magic number: byteCount == 2
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,FillBuffer,The following statement contains a magic number: m_unalignedBits = 8;
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,Read,The following statement contains a magic number: bufferSize != 16
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,InternalReadBits,The following statement contains a magic number: m_unalignedBits == 8
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,InternalReadBits,The following statement contains a magic number: int readNow = Math.Min(8 - m_unalignedBits' count);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,InternalReadBits,The following statement contains a magic number: ret |= (ulong)(m_buffer[0] >> (8 - readNow)) << count;
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,UnalignedReadBigInt,The following statement contains a magic number: CheckBits(bits' 64);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,UnalignedReadInt,The following statement contains a magic number: CheckBits(bits' 32);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,UnalignedReadInt,The following statement contains a magic number: CheckBits(bits' 32);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,UnalignedReadSmallInt,The following statement contains a magic number: CheckBits(bits' 16);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,UnalignedReadTinyInt,The following statement contains a magic number: CheckBits(bits' 8);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: this.FillBuffer(16);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int lo = ((m_buffer[0] | (m_buffer[1] << 8)) | (m_buffer[2] << 16)) | (m_buffer[3] << 24);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int lo = ((m_buffer[0] | (m_buffer[1] << 8)) | (m_buffer[2] << 16)) | (m_buffer[3] << 24);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int lo = ((m_buffer[0] | (m_buffer[1] << 8)) | (m_buffer[2] << 16)) | (m_buffer[3] << 24);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int lo = ((m_buffer[0] | (m_buffer[1] << 8)) | (m_buffer[2] << 16)) | (m_buffer[3] << 24);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int lo = ((m_buffer[0] | (m_buffer[1] << 8)) | (m_buffer[2] << 16)) | (m_buffer[3] << 24);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int mid = ((m_buffer[4] | (m_buffer[5] << 8)) | (m_buffer[6] << 16)) | (m_buffer[7] << 24);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int mid = ((m_buffer[4] | (m_buffer[5] << 8)) | (m_buffer[6] << 16)) | (m_buffer[7] << 24);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int mid = ((m_buffer[4] | (m_buffer[5] << 8)) | (m_buffer[6] << 16)) | (m_buffer[7] << 24);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int mid = ((m_buffer[4] | (m_buffer[5] << 8)) | (m_buffer[6] << 16)) | (m_buffer[7] << 24);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int mid = ((m_buffer[4] | (m_buffer[5] << 8)) | (m_buffer[6] << 16)) | (m_buffer[7] << 24);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int mid = ((m_buffer[4] | (m_buffer[5] << 8)) | (m_buffer[6] << 16)) | (m_buffer[7] << 24);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int mid = ((m_buffer[4] | (m_buffer[5] << 8)) | (m_buffer[6] << 16)) | (m_buffer[7] << 24);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int hi = ((m_buffer[8] | (m_buffer[9] << 8)) | (m_buffer[10] << 16)) | (m_buffer[11] << 24);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int hi = ((m_buffer[8] | (m_buffer[9] << 8)) | (m_buffer[10] << 16)) | (m_buffer[11] << 24);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int hi = ((m_buffer[8] | (m_buffer[9] << 8)) | (m_buffer[10] << 16)) | (m_buffer[11] << 24);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int hi = ((m_buffer[8] | (m_buffer[9] << 8)) | (m_buffer[10] << 16)) | (m_buffer[11] << 24);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int hi = ((m_buffer[8] | (m_buffer[9] << 8)) | (m_buffer[10] << 16)) | (m_buffer[11] << 24);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int hi = ((m_buffer[8] | (m_buffer[9] << 8)) | (m_buffer[10] << 16)) | (m_buffer[11] << 24);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int hi = ((m_buffer[8] | (m_buffer[9] << 8)) | (m_buffer[10] << 16)) | (m_buffer[11] << 24);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: return new decimal(new int[] { lo' mid' hi'                  ((m_buffer[12] | (m_buffer[13] << 8)) | (m_buffer[14] << 16)) | (m_buffer[15] << 24) });
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: return new decimal(new int[] { lo' mid' hi'                  ((m_buffer[12] | (m_buffer[13] << 8)) | (m_buffer[14] << 16)) | (m_buffer[15] << 24) });
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: return new decimal(new int[] { lo' mid' hi'                  ((m_buffer[12] | (m_buffer[13] << 8)) | (m_buffer[14] << 16)) | (m_buffer[15] << 24) });
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: return new decimal(new int[] { lo' mid' hi'                  ((m_buffer[12] | (m_buffer[13] << 8)) | (m_buffer[14] << 16)) | (m_buffer[15] << 24) });
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: return new decimal(new int[] { lo' mid' hi'                  ((m_buffer[12] | (m_buffer[13] << 8)) | (m_buffer[14] << 16)) | (m_buffer[15] << 24) });
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: return new decimal(new int[] { lo' mid' hi'                  ((m_buffer[12] | (m_buffer[13] << 8)) | (m_buffer[14] << 16)) | (m_buffer[15] << 24) });
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: return new decimal(new int[] { lo' mid' hi'                  ((m_buffer[12] | (m_buffer[13] << 8)) | (m_buffer[14] << 16)) | (m_buffer[15] << 24) });
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDouble,The following statement contains a magic number: this.FillBuffer(8);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDouble,The following statement contains a magic number: this.FillBuffer(8);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadInt16,The following statement contains a magic number: this.FillBuffer(2);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadInt16,The following statement contains a magic number: this.FillBuffer(2);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadInt32,The following statement contains a magic number: this.FillBuffer(4);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadInt32,The following statement contains a magic number: this.FillBuffer(4);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadInt64,The following statement contains a magic number: this.FillBuffer(8);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadInt64,The following statement contains a magic number: this.FillBuffer(8);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadSingle,The following statement contains a magic number: this.FillBuffer(4);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadSingle,The following statement contains a magic number: this.FillBuffer(4);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadCString,The following statement contains a magic number: const int allocationCount = 100;
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadUInt16,The following statement contains a magic number: this.FillBuffer(2);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadUInt32,The following statement contains a magic number: this.FillBuffer(4);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadUInt32,The following statement contains a magic number: this.FillBuffer(4);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadUInt64,The following statement contains a magic number: this.FillBuffer(8);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadUInt64,The following statement contains a magic number: this.FillBuffer(8);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadVector3,The following statement contains a magic number: this.FillBuffer(4 * 3);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadVector3,The following statement contains a magic number: this.FillBuffer(4 * 3);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadVector2,The following statement contains a magic number: this.FillBuffer(4 * 2);
Magic Number,Kamilla.IO,StreamHandler,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadVector2,The following statement contains a magic number: this.FillBuffer(4 * 2);
Magic Number,Kamilla.Network.Logging,Krpd2NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\Network\Logging\Krpd2NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: this.ClientAddress = new IPAddress(reader.ReadBytes(4));
Magic Number,Kamilla.Network.Logging,Krpd2NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\Network\Logging\Krpd2NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: this.ServerAddress = new IPAddress(reader.ReadBytes(4));
Magic Number,Kamilla.Network.Logging,Krpd2NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\Network\Logging\Krpd2NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: this.ClientAddress = new IPAddress(reader.ReadBytes(16));
Magic Number,Kamilla.Network.Logging,Krpd2NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\Network\Logging\Krpd2NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: this.ServerAddress = new IPAddress(reader.ReadBytes(16));
Magic Number,Kamilla.Network.Logging,Krpd2NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\Network\Logging\Krpd2NetworkLog.cs,InternalRead,The following statement contains a magic number: int newProgress = i * 100 / m_nPackets;
Magic Number,Kamilla.Network.Logging,KrpdNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\Network\Logging\KrpdNetworkLog.cs,InternalRead,The following statement contains a magic number: int newProgress = i * 100 / m_nPackets;
Magic Number,Kamilla.Network.Protocols,ProtocolManager,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\Network\Protocols\ProtocolManager.cs,Initialize,The following statement contains a magic number: var protocolTypes = new List<Type>(16);
Magic Number,Kamilla.Network.Protocols,ProtocolManager,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\Network\Protocols\ProtocolManager.cs,Initialize,The following statement contains a magic number: var parserTypes = new List<Type>(2048);
Magic Number,Kamilla.WPF,MessageWindow,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\WPF\MessageWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 9 "..\..\..\WPF\MessageWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 2:              this.ui_tbMain = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Kamilla.WPF,WpfExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\WPF\WpfExtensions.cs,GetDisplayString,The following statement contains a magic number: var builder = new StringBuilder(32);
Missing Default,Kamilla.WPF,MessageWindow,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla\WPF\MessageWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 9 "..\..\..\WPF\MessageWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 2:              this.ui_tbMain = ((System.Windows.Controls.TextBox)(target));              return;              }
