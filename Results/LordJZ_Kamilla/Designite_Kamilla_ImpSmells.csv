Implementation smell,Namespace,Class,File,Method,Description
Long Method,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,The method has 159 lines of code.
Complex Method,Kamilla,CollectionExtensions,C:\repos\LordJZ_Kamilla\Kamilla\CollectionExtensions.cs,AddRange,Cyclomatic complexity of the method is 9
Complex Method,Kamilla,CollectionExtensions,C:\repos\LordJZ_Kamilla\Kamilla\CollectionExtensions.cs,InternalSequenceEqual,Cyclomatic complexity of the method is 15
Complex Method,Kamilla,EnumExtensions,C:\repos\LordJZ_Kamilla\Kamilla\EnumExtensions.cs,GetName,Cyclomatic complexity of the method is 11
Complex Method,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,Cyclomatic complexity of the method is 9
Complex Method,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,InternalReadOneChar,Cyclomatic complexity of the method is 10
Complex Method,Kamilla.Network.Logging,NetworkLogFactory,C:\repos\LordJZ_Kamilla\Kamilla\Network\Logging\NetworkLogFactory.cs,Initialize,Cyclomatic complexity of the method is 11
Complex Method,Kamilla.Network.Protocols,ProtocolManager,C:\repos\LordJZ_Kamilla\Kamilla\Network\Protocols\ProtocolManager.cs,Initialize,Cyclomatic complexity of the method is 9
Long Parameter List,Kamilla,CollectionExtensions,C:\repos\LordJZ_Kamilla\Kamilla\CollectionExtensions.cs,SequenceEqual,The method has 6 parameters. Parameters: collection' collection2' index' index2' count' comparer
Long Parameter List,Kamilla,CollectionExtensions,C:\repos\LordJZ_Kamilla\Kamilla\CollectionExtensions.cs,SequenceEqual,The method has 5 parameters. Parameters: collection' collection2' index' index2' comparer
Long Parameter List,Kamilla,CollectionExtensions,C:\repos\LordJZ_Kamilla\Kamilla\CollectionExtensions.cs,SequenceEqual,The method has 5 parameters. Parameters: collection' collection2' index' index2' count
Long Parameter List,Kamilla,CollectionExtensions,C:\repos\LordJZ_Kamilla\Kamilla\CollectionExtensions.cs,InternalSequenceEqual,The method has 7 parameters. Parameters: collection' collection2' index' index2' count' comparer' countKnown
Long Parameter List,Kamilla,CollectionExtensions,C:\repos\LordJZ_Kamilla\Kamilla\CollectionExtensions.cs,BinaryIndexOf,The method has 5 parameters. Parameters: list' index' length' item' comparison
Long Parameter List,Kamilla,CollectionExtensions,C:\repos\LordJZ_Kamilla\Kamilla\CollectionExtensions.cs,BinaryIndexOf,The method has 5 parameters. Parameters: list' index' length' item' comparer
Long Parameter List,Kamilla,Win32,C:\repos\LordJZ_Kamilla\Kamilla\Win32.cs,AdjustTokenPrivileges,The method has 6 parameters. Parameters: TokenHandle' DisableAllPrivileges' NewState' BufferLength' PreviousState' ReturnLength
Long Parameter List,Kamilla,Win32,C:\repos\LordJZ_Kamilla\Kamilla\Win32.cs,ReadProcessMemory,The method has 5 parameters. Parameters: hProcess' lpBaseAddress' lpBuffer' nSize' lpNumberOfBytesRead
Long Parameter List,Kamilla.Network,Packet,C:\repos\LordJZ_Kamilla\Kamilla\Network\Packet.cs,Packet,The method has 5 parameters. Parameters: data' direction' flags' arrivalTime' arrivalTicks
Long Identifier,Kamilla.CodeHighlighting,SimpleCodeHighlighter,C:\repos\LordJZ_Kamilla\Kamilla\CodeHighlighting\CodeHighlighter.cs,Highlight,The length of the parameter oneLineCommentsStartWithLength is 30.
Long Identifier,Kamilla.Network.Protocols,DefaultProtocol,C:\repos\LordJZ_Kamilla\Kamilla\Network\Protocols\DefaultProtocol.cs,,The length of the parameter m_itemVisualDataQueriedHandler is 30.
Long Identifier,Kamilla.WPF,WindowBehavior,C:\repos\LordJZ_Kamilla\Kamilla\WPF\WindowBehavior.cs,,The length of the parameter HasTitleBarCloseButtonProperty is 30.
Long Identifier,Kamilla.WPF,WindowBehavior,C:\repos\LordJZ_Kamilla\Kamilla\WPF\WindowBehavior.cs,,The length of the parameter HasTitleBarMinimizeButtonProperty is 33.
Long Identifier,Kamilla.WPF,WindowBehavior,C:\repos\LordJZ_Kamilla\Kamilla\WPF\WindowBehavior.cs,,The length of the parameter HasTitleBarMaximizeButtonProperty is 33.
Complex Conditional,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The conditional expression  "detectRussian && (c == 0xD0 || c == 0xD1) && iterator < byteArray.Length - 1"  is complex.
Complex Conditional,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,The conditional expression  "ones > 1 && ones < 5 && (tens < 10 || tens > 19)"  is complex.
Complex Conditional,Kamilla.Network.Protocols,DefaultProtocol,C:\repos\LordJZ_Kamilla\Kamilla\Network\Protocols\DefaultProtocol.cs,Load,The conditional expression  "columnOrder == null || columnOrder.Length != nColumns                  || columnOrder.Any(val => val >= nColumns || val < 0)"  is complex.
Empty Catch Block,Kamilla,UICulture,C:\repos\LordJZ_Kamilla\Kamilla\UICulture.cs,Initialize,The method has an empty catch block.
Magic Number,Kamilla.CodeHighlighting,SimpleCodeHighlighter,C:\repos\LordJZ_Kamilla\Kamilla\CodeHighlighting\CodeHighlighter.cs,Highlight,The following statement contains a magic number: var result = new List<HighlightedItem>(64);
Magic Number,Kamilla.CodeHighlighting,SimpleCodeHighlighter,C:\repos\LordJZ_Kamilla\Kamilla\CodeHighlighting\CodeHighlighter.cs,Highlight,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  if (char.IsLetter(text[i]))                  {                      // Read identifier                      var builder = new StringBuilder(text[i] + ""' 32);                      int j = i + 1;                      while (j < len && char.IsLetterOrDigit(text[j]))                      {                          builder.Append(text[j]);                          ++j;                      }                      var ident = builder.ToString();                      if (profile.Keywords.Contains(ident' !profile.KeywordsCaseSensitive                          ? StringComparer.InvariantCultureIgnoreCase : StringComparer.InvariantCulture))                      {                          result.Add(new HighlightedItem(i' j' CodeTokens.Keyword));                          i = j;                      }                  }                  else if (char.IsDigit(text[i]))                  {                      // Read numeric                      int begin = i;                      ++i;                      while (i < len && (char.IsDigit(text[i]) || text[i] == '.'))                          ++i;                        result.Add(new HighlightedItem(begin' i' CodeTokens.Number));                  }                  else if (text[i] == '"')                  {                      int begin = i;                      ++i;                      while (i < len && (text[i] != '"' || text[i - 1] == '\\'))                          ++i;                      ++i;                        result.Add(new HighlightedItem(begin' i' CodeTokens.String));                  }                  else if (text[i] == '\'')                  {                      int begin = i;                      ++i;                      while (i < len && (text[i] != '\'' || text[i - 1] == '\\'))                          ++i;                      ++i;                        result.Add(new HighlightedItem(begin' i' CodeTokens.String));                  }                  else if (oneLineCommentsStartWithLength > 0 && i >= oneLineCommentsStartWithLength                      && text.SubstringEquals(i - oneLineCommentsStartWithLength' oneLineCommentsStartWith))                  {                      int end = text.IndexOf('\n'' i);                      if (text[i - 1] == '\r')                          --end;                        result.Add(new HighlightedItem(i - oneLineCommentsStartWithLength' end' CodeTokens.OneLineComment));                      i = end;                  }              }
Magic Number,Kamilla,EnumExtensions,C:\repos\LordJZ_Kamilla\Kamilla\EnumExtensions.cs,GetName,The following statement contains a magic number: if (!info.TryGetValue(value' out obj))              {                  if (checkForFlags)                  {                      if (value == 0)                          return "0";                        ulong uvalue = (ulong)value;                      var builder = new StringBuilder(1024);                        bool builderEmpty = true;                      ulong bit = 1;                      for (int i = 0; i < sizeof(ulong) * 8; ++i' bit <<= 1)                      {                          if ((uvalue & bit) != 0)                          {                              if (builderEmpty)                                  builderEmpty = false;                              else                                  builder.Append("' ");                                builder.Append(GetName((long)bit' resources' info' false));                          }                      }                        return builder.ToString();                  }                    return value.ToString();              }
Magic Number,Kamilla,EnumExtensions,C:\repos\LordJZ_Kamilla\Kamilla\EnumExtensions.cs,GetName,The following statement contains a magic number: if (!info.TryGetValue(value' out obj))              {                  if (checkForFlags)                  {                      if (value == 0)                          return "0";                        ulong uvalue = (ulong)value;                      var builder = new StringBuilder(1024);                        bool builderEmpty = true;                      ulong bit = 1;                      for (int i = 0; i < sizeof(ulong) * 8; ++i' bit <<= 1)                      {                          if ((uvalue & bit) != 0)                          {                              if (builderEmpty)                                  builderEmpty = false;                              else                                  builder.Append("' ");                                builder.Append(GetName((long)bit' resources' info' false));                          }                      }                        return builder.ToString();                  }                    return value.ToString();              }
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,AsByteArrayNoSpaces,The following statement contains a magic number: var bytes = new List<byte>(len / 2);
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,AsByteArrayNoSpaces,The following statement contains a magic number: for (int i = 0; i < len; ++i)              {                  if ((i & 1) == 0)                      bytes.Add(0);                    int lastByte = bytes.Count - 1;                  bytes[lastByte] *= 0x10;                    var ch = input[i];                  if (ch >= '0' && ch <= '9')                      bytes[lastByte] += (byte)(ch - '0');                  else if (ch >= 'a' & ch <= 'f')                      bytes[lastByte] += (byte)(ch - 'a' + 10);                  else if (ch >= 'A' & ch <= 'F')                      bytes[lastByte] += (byte)(ch - 'A' + 10);                  else                      throw new ArgumentException();              }
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,AsByteArrayNoSpaces,The following statement contains a magic number: for (int i = 0; i < len; ++i)              {                  if ((i & 1) == 0)                      bytes.Add(0);                    int lastByte = bytes.Count - 1;                  bytes[lastByte] *= 0x10;                    var ch = input[i];                  if (ch >= '0' && ch <= '9')                      bytes[lastByte] += (byte)(ch - '0');                  else if (ch >= 'a' & ch <= 'f')                      bytes[lastByte] += (byte)(ch - 'a' + 10);                  else if (ch >= 'A' & ch <= 'F')                      bytes[lastByte] += (byte)(ch - 'A' + 10);                  else                      throw new ArgumentException();              }
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,AsByteArrayWithSpaces,The following statement contains a magic number: var bytes = new List<byte>(len / 2);
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,AsByteArrayWithSpaces,The following statement contains a magic number: for (int i = 0; i < len; ++i)              {                  var ch = input[i];                  if (char.IsWhiteSpace(ch))                  {                      nDigits = 0;                  }                  else if (ch >= '0' && ch <= '9')                  {                      if (nDigits == 2)                          throw new ArgumentException();                      else if (nDigits == 0)                          bytes.Add(0);                        int lastByte = bytes.Count - 1;                      bytes[lastByte] *= 0x10;                      bytes[lastByte] += (byte)(ch - '0');                      ++nDigits;                  }                  else if (ch >= 'a' & ch <= 'f')                  {                      if (nDigits == 2)                          throw new ArgumentException();                      else if (nDigits == 0)                          bytes.Add(0);                        int lastByte = bytes.Count - 1;                      bytes[lastByte] *= 0x10;                      bytes[lastByte] += (byte)(ch - 'a' + 10);                      ++nDigits;                  }                  else if (ch >= 'A' & ch <= 'F')                  {                      if (nDigits == 2)                          throw new ArgumentException();                      else if (nDigits == 0)                          bytes.Add(0);                        int lastByte = bytes.Count - 1;                      bytes[lastByte] *= 0x10;                      bytes[lastByte] += (byte)(ch - 'A' + 10);                      ++nDigits;                  }                  else                      throw new ArgumentException();              }
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,AsByteArrayWithSpaces,The following statement contains a magic number: for (int i = 0; i < len; ++i)              {                  var ch = input[i];                  if (char.IsWhiteSpace(ch))                  {                      nDigits = 0;                  }                  else if (ch >= '0' && ch <= '9')                  {                      if (nDigits == 2)                          throw new ArgumentException();                      else if (nDigits == 0)                          bytes.Add(0);                        int lastByte = bytes.Count - 1;                      bytes[lastByte] *= 0x10;                      bytes[lastByte] += (byte)(ch - '0');                      ++nDigits;                  }                  else if (ch >= 'a' & ch <= 'f')                  {                      if (nDigits == 2)                          throw new ArgumentException();                      else if (nDigits == 0)                          bytes.Add(0);                        int lastByte = bytes.Count - 1;                      bytes[lastByte] *= 0x10;                      bytes[lastByte] += (byte)(ch - 'a' + 10);                      ++nDigits;                  }                  else if (ch >= 'A' & ch <= 'F')                  {                      if (nDigits == 2)                          throw new ArgumentException();                      else if (nDigits == 0)                          bytes.Add(0);                        int lastByte = bytes.Count - 1;                      bytes[lastByte] *= 0x10;                      bytes[lastByte] += (byte)(ch - 'A' + 10);                      ++nDigits;                  }                  else                      throw new ArgumentException();              }
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,AsByteArrayWithSpaces,The following statement contains a magic number: for (int i = 0; i < len; ++i)              {                  var ch = input[i];                  if (char.IsWhiteSpace(ch))                  {                      nDigits = 0;                  }                  else if (ch >= '0' && ch <= '9')                  {                      if (nDigits == 2)                          throw new ArgumentException();                      else if (nDigits == 0)                          bytes.Add(0);                        int lastByte = bytes.Count - 1;                      bytes[lastByte] *= 0x10;                      bytes[lastByte] += (byte)(ch - '0');                      ++nDigits;                  }                  else if (ch >= 'a' & ch <= 'f')                  {                      if (nDigits == 2)                          throw new ArgumentException();                      else if (nDigits == 0)                          bytes.Add(0);                        int lastByte = bytes.Count - 1;                      bytes[lastByte] *= 0x10;                      bytes[lastByte] += (byte)(ch - 'a' + 10);                      ++nDigits;                  }                  else if (ch >= 'A' & ch <= 'F')                  {                      if (nDigits == 2)                          throw new ArgumentException();                      else if (nDigits == 0)                          bytes.Add(0);                        int lastByte = bytes.Count - 1;                      bytes[lastByte] *= 0x10;                      bytes[lastByte] += (byte)(ch - 'A' + 10);                      ++nDigits;                  }                  else                      throw new ArgumentException();              }
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,AsByteArrayWithSpaces,The following statement contains a magic number: for (int i = 0; i < len; ++i)              {                  var ch = input[i];                  if (char.IsWhiteSpace(ch))                  {                      nDigits = 0;                  }                  else if (ch >= '0' && ch <= '9')                  {                      if (nDigits == 2)                          throw new ArgumentException();                      else if (nDigits == 0)                          bytes.Add(0);                        int lastByte = bytes.Count - 1;                      bytes[lastByte] *= 0x10;                      bytes[lastByte] += (byte)(ch - '0');                      ++nDigits;                  }                  else if (ch >= 'a' & ch <= 'f')                  {                      if (nDigits == 2)                          throw new ArgumentException();                      else if (nDigits == 0)                          bytes.Add(0);                        int lastByte = bytes.Count - 1;                      bytes[lastByte] *= 0x10;                      bytes[lastByte] += (byte)(ch - 'a' + 10);                      ++nDigits;                  }                  else if (ch >= 'A' & ch <= 'F')                  {                      if (nDigits == 2)                          throw new ArgumentException();                      else if (nDigits == 0)                          bytes.Add(0);                        int lastByte = bytes.Count - 1;                      bytes[lastByte] *= 0x10;                      bytes[lastByte] += (byte)(ch - 'A' + 10);                      ++nDigits;                  }                  else                      throw new ArgumentException();              }
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,AsByteArrayWithSpaces,The following statement contains a magic number: for (int i = 0; i < len; ++i)              {                  var ch = input[i];                  if (char.IsWhiteSpace(ch))                  {                      nDigits = 0;                  }                  else if (ch >= '0' && ch <= '9')                  {                      if (nDigits == 2)                          throw new ArgumentException();                      else if (nDigits == 0)                          bytes.Add(0);                        int lastByte = bytes.Count - 1;                      bytes[lastByte] *= 0x10;                      bytes[lastByte] += (byte)(ch - '0');                      ++nDigits;                  }                  else if (ch >= 'a' & ch <= 'f')                  {                      if (nDigits == 2)                          throw new ArgumentException();                      else if (nDigits == 0)                          bytes.Add(0);                        int lastByte = bytes.Count - 1;                      bytes[lastByte] *= 0x10;                      bytes[lastByte] += (byte)(ch - 'a' + 10);                      ++nDigits;                  }                  else if (ch >= 'A' & ch <= 'F')                  {                      if (nDigits == 2)                          throw new ArgumentException();                      else if (nDigits == 0)                          bytes.Add(0);                        int lastByte = bytes.Count - 1;                      bytes[lastByte] *= 0x10;                      bytes[lastByte] += (byte)(ch - 'A' + 10);                      ++nDigits;                  }                  else                      throw new ArgumentException();              }
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexString,The following statement contains a magic number: var builder = new StringBuilder(byteArray.Length * (insertSpaces ? 3 : 2));
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexString,The following statement contains a magic number: var builder = new StringBuilder(byteArray.Length * (insertSpaces ? 3 : 2));
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: StringBuilder output = new StringBuilder(80 * ((length + 15) / 16 + 4));
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: StringBuilder output = new StringBuilder(80 * ((length + 15) / 16 + 4));
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: StringBuilder output = new StringBuilder(80 * ((length + 15) / 16 + 4));
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: StringBuilder output = new StringBuilder(80 * ((length + 15) / 16 + 4));
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: StringBuilder output = new StringBuilder(80 * ((length + 15) / 16 + 4));
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: StringBuilder output = new StringBuilder(80 * ((length + 15) / 16 + 4));
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: StringBuilder output = new StringBuilder(80 * ((length + 15) / 16 + 4));
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: StringBuilder output = new StringBuilder(80 * ((length + 15) / 16 + 4));
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: int lines = (length + 15) / 16;
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: int lines = (length + 15) / 16;
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: var chars = new StringBuilder(16);
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: for (int i = 0; i < lines; ++i' byteIndex += 16)              {                  output                      .Append('|')                      .Append(byteIndex.ToString("X8"))                      .Append("| ");                    for (int j = 0; j < 16; ++j)                  {                      ++iterator;                      if (!noData && byteArray.Length <= iterator)                          noData = true;                        if (noData)                      {                          output.Append("-- ");                          chars.Append('.');                      }                      else                      {                          byte c = byteArray[iterator];                          output                              .Append(c.ToString("X2"))                              .Append(' ');                            // UTF-8                          if (detectRussian && (c == 0xD0 || c == 0xD1) && iterator < byteArray.Length - 1)                          {                              byte peek = byteArray[iterator + 1];                                if (peek >= 0x80 && peek <= 0xBF)                              {                                  if (c == 0xD0)                                      chars.Append((char)(0x400 | (peek - 0x80)));                                  else                                      chars.Append((char)(0x400 | (peek - 0x40)));                                    continue;                              }                          }                            chars.Append(c >= 0x20 && c < 0x7F ? (char)c : '.');                      }                  }                    output                      .Append('|')                      .Append(chars.ToString())                      .Append('|')                      .AppendLine();                    chars.Clear();              }
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ToHexDump,The following statement contains a magic number: for (int i = 0; i < lines; ++i' byteIndex += 16)              {                  output                      .Append('|')                      .Append(byteIndex.ToString("X8"))                      .Append("| ");                    for (int j = 0; j < 16; ++j)                  {                      ++iterator;                      if (!noData && byteArray.Length <= iterator)                          noData = true;                        if (noData)                      {                          output.Append("-- ");                          chars.Append('.');                      }                      else                      {                          byte c = byteArray[iterator];                          output                              .Append(c.ToString("X2"))                              .Append(' ');                            // UTF-8                          if (detectRussian && (c == 0xD0 || c == 0xD1) && iterator < byteArray.Length - 1)                          {                              byte peek = byteArray[iterator + 1];                                if (peek >= 0x80 && peek <= 0xBF)                              {                                  if (c == 0xD0)                                      chars.Append((char)(0x400 | (peek - 0x80)));                                  else                                      chars.Append((char)(0x400 | (peek - 0x40)));                                    continue;                              }                          }                            chars.Append(c >= 0x20 && c < 0x7F ? (char)c : '.');                      }                  }                    output                      .Append('|')                      .Append(chars.ToString())                      .Append('|')                      .AppendLine();                    chars.Clear();              }
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,FixNewLines,The following statement contains a magic number: var builder = new StringBuilder((int)(tofix.Length * 1.1));
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,The following statement contains a magic number: var builder = new StringBuilder(format.Length + args.Length * 8);
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,The following statement contains a magic number: for (int i = 0; i < length; ++i)              {                  var ch = format[i];                    if (ch == '{')                  {                      if (length > i + 1 && format[i + 1] == '{')                          goto writeChar;                        int j = i + 1;                      try                      {                          int index = 0;                          while (char.IsNumber(format[j]))                          {                              index = index * 10 + format[j] - '0';                              ++j;                          }                            if (format[j] != '?')                              goto writeChar;                            Func<string> readString = () =>                          {                              var builder2 = new StringBuilder(16);                                if (format[j] != ':' && format[j] != '?')                                  throw new FormatException();                                ++j;                              while (format[j] != ':' && format[j] != '}')                              {                                  builder2.Append(format[j]);                                  ++j;                              }                              return builder2.ToString();                          };                            var type = readString();                            if (index >= args.Length && type != "bool")                              throw new FormatException();                            switch (type)                          {                              // left' if value is true or non-zero or non-null                              // otherwise' right                              case "bool":                              {                                  var ifTrue = readString();                                  var ifFalse = readString();                                  bool cond;                                  var obj = index < args.Length ? args[index] : null;                                  if (obj == null)                                  {                                      cond = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          cond = ((IConvertible)obj).ToInt64(null) != 0L;                                      }                                      catch                                      {                                          cond = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (cond)                                      builder.Append(ifTrue);                                  else                                      builder.Append(ifFalse);                                    break;                              }                              case "plural-ru":                              {                                  var one = readString();                                  var two = readString();                                  var three = readString();                                    var obj = args[index];                                  ulong value;                                  if (obj == null)                                  {                                      value = 0L;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          value = ((IConvertible)obj).ToUInt64(null);                                      }                                      catch                                      {                                          try                                          {                                              value = (ulong)Math.Abs(((IConvertible)obj).ToInt64(null));                                          }                                          catch                                          {                                              value = 0;                                          }                                      }                                  }                                  else                                      throw new ArgumentException();                                    var ones = value % 10;                                  var tens = value % 100;                                    if (ones == 1 && tens != 11)                                      builder.Append(one);                                  else if (ones > 1 && ones < 5 && (tens < 10 || tens > 19))                                      builder.Append(two);                                  else                                      builder.Append(three);                                    break;                              }                              case "plural-en":                              {                                  var ifOne = readString();                                  var ifMany = readString();                                    bool isOne;                                  var obj = args[index];                                  if (obj == null)                                  {                                      isOne = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          var val = ((IConvertible)obj).ToInt64(null);                                          isOne = val == 1L || val == -1L;                                      }                                      catch                                      {                                          isOne = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (isOne)                                      builder.Append(ifOne);                                  else                                      builder.Append(ifMany);                                  break;                              }                              default:                                  throw new FormatException();                          }                            if (format[j] != '}')                              throw new FormatException();                            i = j;                          continue;                      }                      catch (ArgumentOutOfRangeException)                      {                          throw new FormatException();                      }                  }                writeChar:                  builder.Append(ch);              }
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,The following statement contains a magic number: for (int i = 0; i < length; ++i)              {                  var ch = format[i];                    if (ch == '{')                  {                      if (length > i + 1 && format[i + 1] == '{')                          goto writeChar;                        int j = i + 1;                      try                      {                          int index = 0;                          while (char.IsNumber(format[j]))                          {                              index = index * 10 + format[j] - '0';                              ++j;                          }                            if (format[j] != '?')                              goto writeChar;                            Func<string> readString = () =>                          {                              var builder2 = new StringBuilder(16);                                if (format[j] != ':' && format[j] != '?')                                  throw new FormatException();                                ++j;                              while (format[j] != ':' && format[j] != '}')                              {                                  builder2.Append(format[j]);                                  ++j;                              }                              return builder2.ToString();                          };                            var type = readString();                            if (index >= args.Length && type != "bool")                              throw new FormatException();                            switch (type)                          {                              // left' if value is true or non-zero or non-null                              // otherwise' right                              case "bool":                              {                                  var ifTrue = readString();                                  var ifFalse = readString();                                  bool cond;                                  var obj = index < args.Length ? args[index] : null;                                  if (obj == null)                                  {                                      cond = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          cond = ((IConvertible)obj).ToInt64(null) != 0L;                                      }                                      catch                                      {                                          cond = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (cond)                                      builder.Append(ifTrue);                                  else                                      builder.Append(ifFalse);                                    break;                              }                              case "plural-ru":                              {                                  var one = readString();                                  var two = readString();                                  var three = readString();                                    var obj = args[index];                                  ulong value;                                  if (obj == null)                                  {                                      value = 0L;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          value = ((IConvertible)obj).ToUInt64(null);                                      }                                      catch                                      {                                          try                                          {                                              value = (ulong)Math.Abs(((IConvertible)obj).ToInt64(null));                                          }                                          catch                                          {                                              value = 0;                                          }                                      }                                  }                                  else                                      throw new ArgumentException();                                    var ones = value % 10;                                  var tens = value % 100;                                    if (ones == 1 && tens != 11)                                      builder.Append(one);                                  else if (ones > 1 && ones < 5 && (tens < 10 || tens > 19))                                      builder.Append(two);                                  else                                      builder.Append(three);                                    break;                              }                              case "plural-en":                              {                                  var ifOne = readString();                                  var ifMany = readString();                                    bool isOne;                                  var obj = args[index];                                  if (obj == null)                                  {                                      isOne = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          var val = ((IConvertible)obj).ToInt64(null);                                          isOne = val == 1L || val == -1L;                                      }                                      catch                                      {                                          isOne = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (isOne)                                      builder.Append(ifOne);                                  else                                      builder.Append(ifMany);                                  break;                              }                              default:                                  throw new FormatException();                          }                            if (format[j] != '}')                              throw new FormatException();                            i = j;                          continue;                      }                      catch (ArgumentOutOfRangeException)                      {                          throw new FormatException();                      }                  }                writeChar:                  builder.Append(ch);              }
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,The following statement contains a magic number: for (int i = 0; i < length; ++i)              {                  var ch = format[i];                    if (ch == '{')                  {                      if (length > i + 1 && format[i + 1] == '{')                          goto writeChar;                        int j = i + 1;                      try                      {                          int index = 0;                          while (char.IsNumber(format[j]))                          {                              index = index * 10 + format[j] - '0';                              ++j;                          }                            if (format[j] != '?')                              goto writeChar;                            Func<string> readString = () =>                          {                              var builder2 = new StringBuilder(16);                                if (format[j] != ':' && format[j] != '?')                                  throw new FormatException();                                ++j;                              while (format[j] != ':' && format[j] != '}')                              {                                  builder2.Append(format[j]);                                  ++j;                              }                              return builder2.ToString();                          };                            var type = readString();                            if (index >= args.Length && type != "bool")                              throw new FormatException();                            switch (type)                          {                              // left' if value is true or non-zero or non-null                              // otherwise' right                              case "bool":                              {                                  var ifTrue = readString();                                  var ifFalse = readString();                                  bool cond;                                  var obj = index < args.Length ? args[index] : null;                                  if (obj == null)                                  {                                      cond = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          cond = ((IConvertible)obj).ToInt64(null) != 0L;                                      }                                      catch                                      {                                          cond = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (cond)                                      builder.Append(ifTrue);                                  else                                      builder.Append(ifFalse);                                    break;                              }                              case "plural-ru":                              {                                  var one = readString();                                  var two = readString();                                  var three = readString();                                    var obj = args[index];                                  ulong value;                                  if (obj == null)                                  {                                      value = 0L;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          value = ((IConvertible)obj).ToUInt64(null);                                      }                                      catch                                      {                                          try                                          {                                              value = (ulong)Math.Abs(((IConvertible)obj).ToInt64(null));                                          }                                          catch                                          {                                              value = 0;                                          }                                      }                                  }                                  else                                      throw new ArgumentException();                                    var ones = value % 10;                                  var tens = value % 100;                                    if (ones == 1 && tens != 11)                                      builder.Append(one);                                  else if (ones > 1 && ones < 5 && (tens < 10 || tens > 19))                                      builder.Append(two);                                  else                                      builder.Append(three);                                    break;                              }                              case "plural-en":                              {                                  var ifOne = readString();                                  var ifMany = readString();                                    bool isOne;                                  var obj = args[index];                                  if (obj == null)                                  {                                      isOne = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          var val = ((IConvertible)obj).ToInt64(null);                                          isOne = val == 1L || val == -1L;                                      }                                      catch                                      {                                          isOne = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (isOne)                                      builder.Append(ifOne);                                  else                                      builder.Append(ifMany);                                  break;                              }                              default:                                  throw new FormatException();                          }                            if (format[j] != '}')                              throw new FormatException();                            i = j;                          continue;                      }                      catch (ArgumentOutOfRangeException)                      {                          throw new FormatException();                      }                  }                writeChar:                  builder.Append(ch);              }
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,The following statement contains a magic number: for (int i = 0; i < length; ++i)              {                  var ch = format[i];                    if (ch == '{')                  {                      if (length > i + 1 && format[i + 1] == '{')                          goto writeChar;                        int j = i + 1;                      try                      {                          int index = 0;                          while (char.IsNumber(format[j]))                          {                              index = index * 10 + format[j] - '0';                              ++j;                          }                            if (format[j] != '?')                              goto writeChar;                            Func<string> readString = () =>                          {                              var builder2 = new StringBuilder(16);                                if (format[j] != ':' && format[j] != '?')                                  throw new FormatException();                                ++j;                              while (format[j] != ':' && format[j] != '}')                              {                                  builder2.Append(format[j]);                                  ++j;                              }                              return builder2.ToString();                          };                            var type = readString();                            if (index >= args.Length && type != "bool")                              throw new FormatException();                            switch (type)                          {                              // left' if value is true or non-zero or non-null                              // otherwise' right                              case "bool":                              {                                  var ifTrue = readString();                                  var ifFalse = readString();                                  bool cond;                                  var obj = index < args.Length ? args[index] : null;                                  if (obj == null)                                  {                                      cond = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          cond = ((IConvertible)obj).ToInt64(null) != 0L;                                      }                                      catch                                      {                                          cond = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (cond)                                      builder.Append(ifTrue);                                  else                                      builder.Append(ifFalse);                                    break;                              }                              case "plural-ru":                              {                                  var one = readString();                                  var two = readString();                                  var three = readString();                                    var obj = args[index];                                  ulong value;                                  if (obj == null)                                  {                                      value = 0L;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          value = ((IConvertible)obj).ToUInt64(null);                                      }                                      catch                                      {                                          try                                          {                                              value = (ulong)Math.Abs(((IConvertible)obj).ToInt64(null));                                          }                                          catch                                          {                                              value = 0;                                          }                                      }                                  }                                  else                                      throw new ArgumentException();                                    var ones = value % 10;                                  var tens = value % 100;                                    if (ones == 1 && tens != 11)                                      builder.Append(one);                                  else if (ones > 1 && ones < 5 && (tens < 10 || tens > 19))                                      builder.Append(two);                                  else                                      builder.Append(three);                                    break;                              }                              case "plural-en":                              {                                  var ifOne = readString();                                  var ifMany = readString();                                    bool isOne;                                  var obj = args[index];                                  if (obj == null)                                  {                                      isOne = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          var val = ((IConvertible)obj).ToInt64(null);                                          isOne = val == 1L || val == -1L;                                      }                                      catch                                      {                                          isOne = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (isOne)                                      builder.Append(ifOne);                                  else                                      builder.Append(ifMany);                                  break;                              }                              default:                                  throw new FormatException();                          }                            if (format[j] != '}')                              throw new FormatException();                            i = j;                          continue;                      }                      catch (ArgumentOutOfRangeException)                      {                          throw new FormatException();                      }                  }                writeChar:                  builder.Append(ch);              }
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,The following statement contains a magic number: for (int i = 0; i < length; ++i)              {                  var ch = format[i];                    if (ch == '{')                  {                      if (length > i + 1 && format[i + 1] == '{')                          goto writeChar;                        int j = i + 1;                      try                      {                          int index = 0;                          while (char.IsNumber(format[j]))                          {                              index = index * 10 + format[j] - '0';                              ++j;                          }                            if (format[j] != '?')                              goto writeChar;                            Func<string> readString = () =>                          {                              var builder2 = new StringBuilder(16);                                if (format[j] != ':' && format[j] != '?')                                  throw new FormatException();                                ++j;                              while (format[j] != ':' && format[j] != '}')                              {                                  builder2.Append(format[j]);                                  ++j;                              }                              return builder2.ToString();                          };                            var type = readString();                            if (index >= args.Length && type != "bool")                              throw new FormatException();                            switch (type)                          {                              // left' if value is true or non-zero or non-null                              // otherwise' right                              case "bool":                              {                                  var ifTrue = readString();                                  var ifFalse = readString();                                  bool cond;                                  var obj = index < args.Length ? args[index] : null;                                  if (obj == null)                                  {                                      cond = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          cond = ((IConvertible)obj).ToInt64(null) != 0L;                                      }                                      catch                                      {                                          cond = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (cond)                                      builder.Append(ifTrue);                                  else                                      builder.Append(ifFalse);                                    break;                              }                              case "plural-ru":                              {                                  var one = readString();                                  var two = readString();                                  var three = readString();                                    var obj = args[index];                                  ulong value;                                  if (obj == null)                                  {                                      value = 0L;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          value = ((IConvertible)obj).ToUInt64(null);                                      }                                      catch                                      {                                          try                                          {                                              value = (ulong)Math.Abs(((IConvertible)obj).ToInt64(null));                                          }                                          catch                                          {                                              value = 0;                                          }                                      }                                  }                                  else                                      throw new ArgumentException();                                    var ones = value % 10;                                  var tens = value % 100;                                    if (ones == 1 && tens != 11)                                      builder.Append(one);                                  else if (ones > 1 && ones < 5 && (tens < 10 || tens > 19))                                      builder.Append(two);                                  else                                      builder.Append(three);                                    break;                              }                              case "plural-en":                              {                                  var ifOne = readString();                                  var ifMany = readString();                                    bool isOne;                                  var obj = args[index];                                  if (obj == null)                                  {                                      isOne = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          var val = ((IConvertible)obj).ToInt64(null);                                          isOne = val == 1L || val == -1L;                                      }                                      catch                                      {                                          isOne = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (isOne)                                      builder.Append(ifOne);                                  else                                      builder.Append(ifMany);                                  break;                              }                              default:                                  throw new FormatException();                          }                            if (format[j] != '}')                              throw new FormatException();                            i = j;                          continue;                      }                      catch (ArgumentOutOfRangeException)                      {                          throw new FormatException();                      }                  }                writeChar:                  builder.Append(ch);              }
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,The following statement contains a magic number: for (int i = 0; i < length; ++i)              {                  var ch = format[i];                    if (ch == '{')                  {                      if (length > i + 1 && format[i + 1] == '{')                          goto writeChar;                        int j = i + 1;                      try                      {                          int index = 0;                          while (char.IsNumber(format[j]))                          {                              index = index * 10 + format[j] - '0';                              ++j;                          }                            if (format[j] != '?')                              goto writeChar;                            Func<string> readString = () =>                          {                              var builder2 = new StringBuilder(16);                                if (format[j] != ':' && format[j] != '?')                                  throw new FormatException();                                ++j;                              while (format[j] != ':' && format[j] != '}')                              {                                  builder2.Append(format[j]);                                  ++j;                              }                              return builder2.ToString();                          };                            var type = readString();                            if (index >= args.Length && type != "bool")                              throw new FormatException();                            switch (type)                          {                              // left' if value is true or non-zero or non-null                              // otherwise' right                              case "bool":                              {                                  var ifTrue = readString();                                  var ifFalse = readString();                                  bool cond;                                  var obj = index < args.Length ? args[index] : null;                                  if (obj == null)                                  {                                      cond = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          cond = ((IConvertible)obj).ToInt64(null) != 0L;                                      }                                      catch                                      {                                          cond = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (cond)                                      builder.Append(ifTrue);                                  else                                      builder.Append(ifFalse);                                    break;                              }                              case "plural-ru":                              {                                  var one = readString();                                  var two = readString();                                  var three = readString();                                    var obj = args[index];                                  ulong value;                                  if (obj == null)                                  {                                      value = 0L;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          value = ((IConvertible)obj).ToUInt64(null);                                      }                                      catch                                      {                                          try                                          {                                              value = (ulong)Math.Abs(((IConvertible)obj).ToInt64(null));                                          }                                          catch                                          {                                              value = 0;                                          }                                      }                                  }                                  else                                      throw new ArgumentException();                                    var ones = value % 10;                                  var tens = value % 100;                                    if (ones == 1 && tens != 11)                                      builder.Append(one);                                  else if (ones > 1 && ones < 5 && (tens < 10 || tens > 19))                                      builder.Append(two);                                  else                                      builder.Append(three);                                    break;                              }                              case "plural-en":                              {                                  var ifOne = readString();                                  var ifMany = readString();                                    bool isOne;                                  var obj = args[index];                                  if (obj == null)                                  {                                      isOne = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          var val = ((IConvertible)obj).ToInt64(null);                                          isOne = val == 1L || val == -1L;                                      }                                      catch                                      {                                          isOne = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (isOne)                                      builder.Append(ifOne);                                  else                                      builder.Append(ifMany);                                  break;                              }                              default:                                  throw new FormatException();                          }                            if (format[j] != '}')                              throw new FormatException();                            i = j;                          continue;                      }                      catch (ArgumentOutOfRangeException)                      {                          throw new FormatException();                      }                  }                writeChar:                  builder.Append(ch);              }
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,The following statement contains a magic number: for (int i = 0; i < length; ++i)              {                  var ch = format[i];                    if (ch == '{')                  {                      if (length > i + 1 && format[i + 1] == '{')                          goto writeChar;                        int j = i + 1;                      try                      {                          int index = 0;                          while (char.IsNumber(format[j]))                          {                              index = index * 10 + format[j] - '0';                              ++j;                          }                            if (format[j] != '?')                              goto writeChar;                            Func<string> readString = () =>                          {                              var builder2 = new StringBuilder(16);                                if (format[j] != ':' && format[j] != '?')                                  throw new FormatException();                                ++j;                              while (format[j] != ':' && format[j] != '}')                              {                                  builder2.Append(format[j]);                                  ++j;                              }                              return builder2.ToString();                          };                            var type = readString();                            if (index >= args.Length && type != "bool")                              throw new FormatException();                            switch (type)                          {                              // left' if value is true or non-zero or non-null                              // otherwise' right                              case "bool":                              {                                  var ifTrue = readString();                                  var ifFalse = readString();                                  bool cond;                                  var obj = index < args.Length ? args[index] : null;                                  if (obj == null)                                  {                                      cond = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          cond = ((IConvertible)obj).ToInt64(null) != 0L;                                      }                                      catch                                      {                                          cond = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (cond)                                      builder.Append(ifTrue);                                  else                                      builder.Append(ifFalse);                                    break;                              }                              case "plural-ru":                              {                                  var one = readString();                                  var two = readString();                                  var three = readString();                                    var obj = args[index];                                  ulong value;                                  if (obj == null)                                  {                                      value = 0L;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          value = ((IConvertible)obj).ToUInt64(null);                                      }                                      catch                                      {                                          try                                          {                                              value = (ulong)Math.Abs(((IConvertible)obj).ToInt64(null));                                          }                                          catch                                          {                                              value = 0;                                          }                                      }                                  }                                  else                                      throw new ArgumentException();                                    var ones = value % 10;                                  var tens = value % 100;                                    if (ones == 1 && tens != 11)                                      builder.Append(one);                                  else if (ones > 1 && ones < 5 && (tens < 10 || tens > 19))                                      builder.Append(two);                                  else                                      builder.Append(three);                                    break;                              }                              case "plural-en":                              {                                  var ifOne = readString();                                  var ifMany = readString();                                    bool isOne;                                  var obj = args[index];                                  if (obj == null)                                  {                                      isOne = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          var val = ((IConvertible)obj).ToInt64(null);                                          isOne = val == 1L || val == -1L;                                      }                                      catch                                      {                                          isOne = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (isOne)                                      builder.Append(ifOne);                                  else                                      builder.Append(ifMany);                                  break;                              }                              default:                                  throw new FormatException();                          }                            if (format[j] != '}')                              throw new FormatException();                            i = j;                          continue;                      }                      catch (ArgumentOutOfRangeException)                      {                          throw new FormatException();                      }                  }                writeChar:                  builder.Append(ch);              }
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,LocalizedFormat,The following statement contains a magic number: for (int i = 0; i < length; ++i)              {                  var ch = format[i];                    if (ch == '{')                  {                      if (length > i + 1 && format[i + 1] == '{')                          goto writeChar;                        int j = i + 1;                      try                      {                          int index = 0;                          while (char.IsNumber(format[j]))                          {                              index = index * 10 + format[j] - '0';                              ++j;                          }                            if (format[j] != '?')                              goto writeChar;                            Func<string> readString = () =>                          {                              var builder2 = new StringBuilder(16);                                if (format[j] != ':' && format[j] != '?')                                  throw new FormatException();                                ++j;                              while (format[j] != ':' && format[j] != '}')                              {                                  builder2.Append(format[j]);                                  ++j;                              }                              return builder2.ToString();                          };                            var type = readString();                            if (index >= args.Length && type != "bool")                              throw new FormatException();                            switch (type)                          {                              // left' if value is true or non-zero or non-null                              // otherwise' right                              case "bool":                              {                                  var ifTrue = readString();                                  var ifFalse = readString();                                  bool cond;                                  var obj = index < args.Length ? args[index] : null;                                  if (obj == null)                                  {                                      cond = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          cond = ((IConvertible)obj).ToInt64(null) != 0L;                                      }                                      catch                                      {                                          cond = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (cond)                                      builder.Append(ifTrue);                                  else                                      builder.Append(ifFalse);                                    break;                              }                              case "plural-ru":                              {                                  var one = readString();                                  var two = readString();                                  var three = readString();                                    var obj = args[index];                                  ulong value;                                  if (obj == null)                                  {                                      value = 0L;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          value = ((IConvertible)obj).ToUInt64(null);                                      }                                      catch                                      {                                          try                                          {                                              value = (ulong)Math.Abs(((IConvertible)obj).ToInt64(null));                                          }                                          catch                                          {                                              value = 0;                                          }                                      }                                  }                                  else                                      throw new ArgumentException();                                    var ones = value % 10;                                  var tens = value % 100;                                    if (ones == 1 && tens != 11)                                      builder.Append(one);                                  else if (ones > 1 && ones < 5 && (tens < 10 || tens > 19))                                      builder.Append(two);                                  else                                      builder.Append(three);                                    break;                              }                              case "plural-en":                              {                                  var ifOne = readString();                                  var ifMany = readString();                                    bool isOne;                                  var obj = args[index];                                  if (obj == null)                                  {                                      isOne = false;                                  }                                  else if (obj is IConvertible)                                  {                                      try                                      {                                          var val = ((IConvertible)obj).ToInt64(null);                                          isOne = val == 1L || val == -1L;                                      }                                      catch                                      {                                          isOne = false;                                      }                                  }                                  else                                      throw new ArgumentException();                                    if (isOne)                                      builder.Append(ifOne);                                  else                                      builder.Append(ifMany);                                  break;                              }                              default:                                  throw new FormatException();                          }                            if (format[j] != '}')                              throw new FormatException();                            i = j;                          continue;                      }                      catch (ArgumentOutOfRangeException)                      {                          throw new FormatException();                      }                  }                writeChar:                  builder.Append(ch);              }
Magic Number,Kamilla,StringExtensions,C:\repos\LordJZ_Kamilla\Kamilla\StringExtensions.cs,ParseUInt32,The following statement contains a magic number: if (str.StartsWith("0x"' StringComparison.InvariantCultureIgnoreCase))                  return uint.Parse(str.Substring(2)' NumberStyles.AllowHexSpecifier);
Magic Number,Kamilla,TypeManager,C:\repos\LordJZ_Kamilla\Kamilla\TypeManager.cs,Initialize,The following statement contains a magic number: var types = new List<Type>(assemblies.Length * 200);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,FlushUnalignedBits,The following statement contains a magic number: if (m_unalignedBits != 8)                  InternalFlushUnalignedBits();
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,InternalResetUnalignedBits,The following statement contains a magic number: m_unalignedBits = 8;
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,UnalignedWriteInt,The following statement contains a magic number: CheckBits(bits' 64);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,UnalignedWriteInt,The following statement contains a magic number: CheckBits(bits' 32);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,UnalignedWriteInt,The following statement contains a magic number: CheckBits(bits' 16);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,UnalignedWriteInt,The following statement contains a magic number: CheckBits(bits' 8);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteChar,The following statement contains a magic number: fixed (byte* numRef = m_buffer)              {                  count = m_encoder.GetBytes(&ch' 1' numRef' 16' true);              }
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteDecimal,The following statement contains a magic number: this.WriteInt32(bits[2]);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteDecimal,The following statement contains a magic number: this.WriteInt32(bits[3]);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteDouble,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 8);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteSingle,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 4);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteInt32,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 4);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteInt64,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 8);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteInt16,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 2);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteUInt32,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 4);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteUInt64,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 8);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteUInt16,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 2);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteVector2,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 4 * 2);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteVector2,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 4 * 2);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteVector3,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 4 * 3);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,WriteVector3,The following statement contains a magic number: m_stream.Write(m_buffer' 0' 4 * 3);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,InternalReadOneChar,The following statement contains a magic number: while (num == 0)              {                  byteCount = m_2BytesPerChar ? 2 : 1;                  int num4 = m_stream.ReadByte();                  m_charBytes[0] = (byte)num4;                  if (num4 == -1)                      byteCount = 0;                    if (byteCount == 2)                  {                      num4 = m_stream.ReadByte();                      m_charBytes[1] = (byte)num4;                      if (num4 == -1)                          byteCount = 1;                  }                    if (byteCount == 0)                      return -1;                    try                  {                      num = m_decoder.GetChars(m_charBytes' 0' byteCount' m_singleChar' 0);                      continue;                  }                  catch                  {                      if (m_stream.CanSeek)                          m_stream.Seek(position - m_stream.Position' SeekOrigin.Current);                        throw;                  }              }
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,InternalReadOneChar,The following statement contains a magic number: while (num == 0)              {                  byteCount = m_2BytesPerChar ? 2 : 1;                  int num4 = m_stream.ReadByte();                  m_charBytes[0] = (byte)num4;                  if (num4 == -1)                      byteCount = 0;                    if (byteCount == 2)                  {                      num4 = m_stream.ReadByte();                      m_charBytes[1] = (byte)num4;                      if (num4 == -1)                          byteCount = 1;                  }                    if (byteCount == 0)                      return -1;                    try                  {                      num = m_decoder.GetChars(m_charBytes' 0' byteCount' m_singleChar' 0);                      continue;                  }                  catch                  {                      if (m_stream.CanSeek)                          m_stream.Seek(position - m_stream.Position' SeekOrigin.Current);                        throw;                  }              }
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,FillBuffer,The following statement contains a magic number: m_unalignedBits = 8;
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,Read,The following statement contains a magic number: if (bufferSize != 16)                  throw new NotImplementedException();
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,InternalReadBits,The following statement contains a magic number: while (count > 0)              {                  if (m_unalignedBits == 8)                  {                      this.FillBuffer(1);                      m_unalignedBits = 0;                  }                    int readNow = Math.Min(8 - m_unalignedBits' count);                  m_unalignedBits += readNow;                  count -= readNow;                  ret |= (ulong)(m_buffer[0] >> (8 - readNow)) << count;                  m_buffer[0] <<= readNow;              }
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,InternalReadBits,The following statement contains a magic number: while (count > 0)              {                  if (m_unalignedBits == 8)                  {                      this.FillBuffer(1);                      m_unalignedBits = 0;                  }                    int readNow = Math.Min(8 - m_unalignedBits' count);                  m_unalignedBits += readNow;                  count -= readNow;                  ret |= (ulong)(m_buffer[0] >> (8 - readNow)) << count;                  m_buffer[0] <<= readNow;              }
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,InternalReadBits,The following statement contains a magic number: while (count > 0)              {                  if (m_unalignedBits == 8)                  {                      this.FillBuffer(1);                      m_unalignedBits = 0;                  }                    int readNow = Math.Min(8 - m_unalignedBits' count);                  m_unalignedBits += readNow;                  count -= readNow;                  ret |= (ulong)(m_buffer[0] >> (8 - readNow)) << count;                  m_buffer[0] <<= readNow;              }
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,UnalignedReadBigInt,The following statement contains a magic number: CheckBits(bits' 64);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,UnalignedReadInt,The following statement contains a magic number: CheckBits(bits' 32);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,UnalignedReadInt,The following statement contains a magic number: CheckBits(bits' 32);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,UnalignedReadSmallInt,The following statement contains a magic number: CheckBits(bits' 16);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,UnalignedReadTinyInt,The following statement contains a magic number: CheckBits(bits' 8);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: this.FillBuffer(16);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int lo = ((m_buffer[0] | (m_buffer[1] << 8)) | (m_buffer[2] << 16)) | (m_buffer[3] << 24);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int lo = ((m_buffer[0] | (m_buffer[1] << 8)) | (m_buffer[2] << 16)) | (m_buffer[3] << 24);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int lo = ((m_buffer[0] | (m_buffer[1] << 8)) | (m_buffer[2] << 16)) | (m_buffer[3] << 24);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int lo = ((m_buffer[0] | (m_buffer[1] << 8)) | (m_buffer[2] << 16)) | (m_buffer[3] << 24);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int lo = ((m_buffer[0] | (m_buffer[1] << 8)) | (m_buffer[2] << 16)) | (m_buffer[3] << 24);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int mid = ((m_buffer[4] | (m_buffer[5] << 8)) | (m_buffer[6] << 16)) | (m_buffer[7] << 24);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int mid = ((m_buffer[4] | (m_buffer[5] << 8)) | (m_buffer[6] << 16)) | (m_buffer[7] << 24);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int mid = ((m_buffer[4] | (m_buffer[5] << 8)) | (m_buffer[6] << 16)) | (m_buffer[7] << 24);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int mid = ((m_buffer[4] | (m_buffer[5] << 8)) | (m_buffer[6] << 16)) | (m_buffer[7] << 24);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int mid = ((m_buffer[4] | (m_buffer[5] << 8)) | (m_buffer[6] << 16)) | (m_buffer[7] << 24);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int mid = ((m_buffer[4] | (m_buffer[5] << 8)) | (m_buffer[6] << 16)) | (m_buffer[7] << 24);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int mid = ((m_buffer[4] | (m_buffer[5] << 8)) | (m_buffer[6] << 16)) | (m_buffer[7] << 24);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int hi = ((m_buffer[8] | (m_buffer[9] << 8)) | (m_buffer[10] << 16)) | (m_buffer[11] << 24);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int hi = ((m_buffer[8] | (m_buffer[9] << 8)) | (m_buffer[10] << 16)) | (m_buffer[11] << 24);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int hi = ((m_buffer[8] | (m_buffer[9] << 8)) | (m_buffer[10] << 16)) | (m_buffer[11] << 24);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int hi = ((m_buffer[8] | (m_buffer[9] << 8)) | (m_buffer[10] << 16)) | (m_buffer[11] << 24);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int hi = ((m_buffer[8] | (m_buffer[9] << 8)) | (m_buffer[10] << 16)) | (m_buffer[11] << 24);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int hi = ((m_buffer[8] | (m_buffer[9] << 8)) | (m_buffer[10] << 16)) | (m_buffer[11] << 24);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: int hi = ((m_buffer[8] | (m_buffer[9] << 8)) | (m_buffer[10] << 16)) | (m_buffer[11] << 24);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: return new decimal(new int[] { lo' mid' hi'                  ((m_buffer[12] | (m_buffer[13] << 8)) | (m_buffer[14] << 16)) | (m_buffer[15] << 24) });
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: return new decimal(new int[] { lo' mid' hi'                  ((m_buffer[12] | (m_buffer[13] << 8)) | (m_buffer[14] << 16)) | (m_buffer[15] << 24) });
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: return new decimal(new int[] { lo' mid' hi'                  ((m_buffer[12] | (m_buffer[13] << 8)) | (m_buffer[14] << 16)) | (m_buffer[15] << 24) });
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: return new decimal(new int[] { lo' mid' hi'                  ((m_buffer[12] | (m_buffer[13] << 8)) | (m_buffer[14] << 16)) | (m_buffer[15] << 24) });
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: return new decimal(new int[] { lo' mid' hi'                  ((m_buffer[12] | (m_buffer[13] << 8)) | (m_buffer[14] << 16)) | (m_buffer[15] << 24) });
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: return new decimal(new int[] { lo' mid' hi'                  ((m_buffer[12] | (m_buffer[13] << 8)) | (m_buffer[14] << 16)) | (m_buffer[15] << 24) });
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDecimal,The following statement contains a magic number: return new decimal(new int[] { lo' mid' hi'                  ((m_buffer[12] | (m_buffer[13] << 8)) | (m_buffer[14] << 16)) | (m_buffer[15] << 24) });
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDouble,The following statement contains a magic number: this.FillBuffer(8);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadDouble,The following statement contains a magic number: this.FillBuffer(8);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadInt16,The following statement contains a magic number: this.FillBuffer(2);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadInt16,The following statement contains a magic number: this.FillBuffer(2);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadInt32,The following statement contains a magic number: this.FillBuffer(4);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadInt32,The following statement contains a magic number: this.FillBuffer(4);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadInt64,The following statement contains a magic number: this.FillBuffer(8);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadInt64,The following statement contains a magic number: this.FillBuffer(8);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadSingle,The following statement contains a magic number: this.FillBuffer(4);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadSingle,The following statement contains a magic number: this.FillBuffer(4);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadCString,The following statement contains a magic number: const int allocationCount = 100;
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadUInt16,The following statement contains a magic number: this.FillBuffer(2);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadUInt32,The following statement contains a magic number: this.FillBuffer(4);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadUInt32,The following statement contains a magic number: this.FillBuffer(4);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadUInt64,The following statement contains a magic number: this.FillBuffer(8);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadUInt64,The following statement contains a magic number: this.FillBuffer(8);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadVector3,The following statement contains a magic number: this.FillBuffer(4 * 3);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadVector3,The following statement contains a magic number: this.FillBuffer(4 * 3);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadVector2,The following statement contains a magic number: this.FillBuffer(4 * 2);
Magic Number,Kamilla.IO,StreamHandler,C:\repos\LordJZ_Kamilla\Kamilla\IO\StreamHandler.cs,ReadVector2,The following statement contains a magic number: this.FillBuffer(4 * 2);
Magic Number,Kamilla.Network.Logging,Krpd2NetworkLog,C:\repos\LordJZ_Kamilla\Kamilla\Network\Logging\Krpd2NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: if (extraLen > 0)              {                  byte[] extraData = new byte[extraLen];                  stream.Read(extraData' 0' extraLen);                  using (var reader = new StreamHandler(extraData))                  {                      ExtraDataFlags flags = mainHeader->ExtraInfoFlags;                      if (flags.HasFlag(ExtraDataFlags.HasClientIPv4))                          this.ClientAddress = new IPAddress(reader.ReadBytes(4));                      if (flags.HasFlag(ExtraDataFlags.HasServerIPv4))                          this.ServerAddress = new IPAddress(reader.ReadBytes(4));                      if (flags.HasFlag(ExtraDataFlags.HasClientIPv6))                          this.ClientAddress = new IPAddress(reader.ReadBytes(16));                      if (flags.HasFlag(ExtraDataFlags.HasServerIPv6))                          this.ServerAddress = new IPAddress(reader.ReadBytes(16));                      if (flags.HasFlag(ExtraDataFlags.HasClientPort))                          this.ClientPort = reader.ReadInt32();                      if (flags.HasFlag(ExtraDataFlags.HasServerPort))                          this.ServerPort = reader.ReadInt32();                      if (flags.HasFlag(ExtraDataFlags.HasSnifferIdString))                      {                          int origLen = reader.ReadInt32();                          int cmprLen = reader.ReadInt32();                          var arr = new byte[origLen];                            using (var iStream = new MemoryStream(reader.ReadBytes(cmprLen)))                          using (var ds = new DeflateStream(iStream' CompressionMode.Decompress' true))                              ds.Read(arr' 0' arr.Length);                            this.SnifferDesc = Encoding.UTF8.GetString(arr);                      }                  }              }
Magic Number,Kamilla.Network.Logging,Krpd2NetworkLog,C:\repos\LordJZ_Kamilla\Kamilla\Network\Logging\Krpd2NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: if (extraLen > 0)              {                  byte[] extraData = new byte[extraLen];                  stream.Read(extraData' 0' extraLen);                  using (var reader = new StreamHandler(extraData))                  {                      ExtraDataFlags flags = mainHeader->ExtraInfoFlags;                      if (flags.HasFlag(ExtraDataFlags.HasClientIPv4))                          this.ClientAddress = new IPAddress(reader.ReadBytes(4));                      if (flags.HasFlag(ExtraDataFlags.HasServerIPv4))                          this.ServerAddress = new IPAddress(reader.ReadBytes(4));                      if (flags.HasFlag(ExtraDataFlags.HasClientIPv6))                          this.ClientAddress = new IPAddress(reader.ReadBytes(16));                      if (flags.HasFlag(ExtraDataFlags.HasServerIPv6))                          this.ServerAddress = new IPAddress(reader.ReadBytes(16));                      if (flags.HasFlag(ExtraDataFlags.HasClientPort))                          this.ClientPort = reader.ReadInt32();                      if (flags.HasFlag(ExtraDataFlags.HasServerPort))                          this.ServerPort = reader.ReadInt32();                      if (flags.HasFlag(ExtraDataFlags.HasSnifferIdString))                      {                          int origLen = reader.ReadInt32();                          int cmprLen = reader.ReadInt32();                          var arr = new byte[origLen];                            using (var iStream = new MemoryStream(reader.ReadBytes(cmprLen)))                          using (var ds = new DeflateStream(iStream' CompressionMode.Decompress' true))                              ds.Read(arr' 0' arr.Length);                            this.SnifferDesc = Encoding.UTF8.GetString(arr);                      }                  }              }
Magic Number,Kamilla.Network.Logging,Krpd2NetworkLog,C:\repos\LordJZ_Kamilla\Kamilla\Network\Logging\Krpd2NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: if (extraLen > 0)              {                  byte[] extraData = new byte[extraLen];                  stream.Read(extraData' 0' extraLen);                  using (var reader = new StreamHandler(extraData))                  {                      ExtraDataFlags flags = mainHeader->ExtraInfoFlags;                      if (flags.HasFlag(ExtraDataFlags.HasClientIPv4))                          this.ClientAddress = new IPAddress(reader.ReadBytes(4));                      if (flags.HasFlag(ExtraDataFlags.HasServerIPv4))                          this.ServerAddress = new IPAddress(reader.ReadBytes(4));                      if (flags.HasFlag(ExtraDataFlags.HasClientIPv6))                          this.ClientAddress = new IPAddress(reader.ReadBytes(16));                      if (flags.HasFlag(ExtraDataFlags.HasServerIPv6))                          this.ServerAddress = new IPAddress(reader.ReadBytes(16));                      if (flags.HasFlag(ExtraDataFlags.HasClientPort))                          this.ClientPort = reader.ReadInt32();                      if (flags.HasFlag(ExtraDataFlags.HasServerPort))                          this.ServerPort = reader.ReadInt32();                      if (flags.HasFlag(ExtraDataFlags.HasSnifferIdString))                      {                          int origLen = reader.ReadInt32();                          int cmprLen = reader.ReadInt32();                          var arr = new byte[origLen];                            using (var iStream = new MemoryStream(reader.ReadBytes(cmprLen)))                          using (var ds = new DeflateStream(iStream' CompressionMode.Decompress' true))                              ds.Read(arr' 0' arr.Length);                            this.SnifferDesc = Encoding.UTF8.GetString(arr);                      }                  }              }
Magic Number,Kamilla.Network.Logging,Krpd2NetworkLog,C:\repos\LordJZ_Kamilla\Kamilla\Network\Logging\Krpd2NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: if (extraLen > 0)              {                  byte[] extraData = new byte[extraLen];                  stream.Read(extraData' 0' extraLen);                  using (var reader = new StreamHandler(extraData))                  {                      ExtraDataFlags flags = mainHeader->ExtraInfoFlags;                      if (flags.HasFlag(ExtraDataFlags.HasClientIPv4))                          this.ClientAddress = new IPAddress(reader.ReadBytes(4));                      if (flags.HasFlag(ExtraDataFlags.HasServerIPv4))                          this.ServerAddress = new IPAddress(reader.ReadBytes(4));                      if (flags.HasFlag(ExtraDataFlags.HasClientIPv6))                          this.ClientAddress = new IPAddress(reader.ReadBytes(16));                      if (flags.HasFlag(ExtraDataFlags.HasServerIPv6))                          this.ServerAddress = new IPAddress(reader.ReadBytes(16));                      if (flags.HasFlag(ExtraDataFlags.HasClientPort))                          this.ClientPort = reader.ReadInt32();                      if (flags.HasFlag(ExtraDataFlags.HasServerPort))                          this.ServerPort = reader.ReadInt32();                      if (flags.HasFlag(ExtraDataFlags.HasSnifferIdString))                      {                          int origLen = reader.ReadInt32();                          int cmprLen = reader.ReadInt32();                          var arr = new byte[origLen];                            using (var iStream = new MemoryStream(reader.ReadBytes(cmprLen)))                          using (var ds = new DeflateStream(iStream' CompressionMode.Decompress' true))                              ds.Read(arr' 0' arr.Length);                            this.SnifferDesc = Encoding.UTF8.GetString(arr);                      }                  }              }
Magic Number,Kamilla.Network.Logging,Krpd2NetworkLog,C:\repos\LordJZ_Kamilla\Kamilla\Network\Logging\Krpd2NetworkLog.cs,InternalRead,The following statement contains a magic number: fixed (byte* headerBytesPtr = headerBytes)              {                  var header = (ChunkHeader*)headerBytesPtr;                  int progress = 0;                    //var startTime = this.StartTime;                  var startTicks = this.StartTicks;                    for (int i = 0; i < m_nPackets; ++i)                  {                      if (m_stream.Read(headerBytes' 0' headerSize) != headerSize)                          throw new EndOfStreamException();                        var packet = new Packet(m_stream.ReadBytes(header->DataLength)' header->Direction'                          PacketFlags.None' this.StartTime.AddMilliseconds(header->TickCount - startTicks)'                          header->TickCount);                      this.InternalAddPacket(packet);                      this.OnPacketAdded(packet);                        if (reportProgressDelegate != null)                      {                          int newProgress = i * 100 / m_nPackets;                          if (newProgress != progress)                          {                              progress = newProgress;                              reportProgressDelegate(progress);                          }                      }                  }              }
Magic Number,Kamilla.Network.Logging,KrpdNetworkLog,C:\repos\LordJZ_Kamilla\Kamilla\Network\Logging\KrpdNetworkLog.cs,InternalRead,The following statement contains a magic number: fixed (byte* headerBytesPtr = headerBytes)              {                  var header = (ChunkHeader*)headerBytesPtr;                  int progress = 0;                    var startTime = this.StartTime;                  var startTicks = this.StartTicks;                    for (int i = 0; i < m_nPackets; ++i)                  {                      if (m_stream.Read(headerBytes' 0' headerSize) != headerSize)                          throw new EndOfStreamException();                        var packet = new Packet(m_stream.ReadBytes(header->DataLength)' header->Direction'                          PacketFlags.None' this.StartTime.AddMilliseconds(header->TickCount - startTicks)'                          header->TickCount);                      this.InternalAddPacket(packet);                      this.OnPacketAdded(packet);                        if (reportProgressDelegate != null)                      {                          int newProgress = i * 100 / m_nPackets;                          if (newProgress != progress)                          {                              progress = newProgress;                              reportProgressDelegate(progress);                          }                      }                  }              }
Magic Number,Kamilla.Network.Protocols,ProtocolManager,C:\repos\LordJZ_Kamilla\Kamilla\Network\Protocols\ProtocolManager.cs,Initialize,The following statement contains a magic number: var protocolTypes = new List<Type>(16);
Magic Number,Kamilla.Network.Protocols,ProtocolManager,C:\repos\LordJZ_Kamilla\Kamilla\Network\Protocols\ProtocolManager.cs,Initialize,The following statement contains a magic number: var parserTypes = new List<Type>(2048);
Magic Number,Kamilla.WPF,MessageWindow,C:\repos\LordJZ_Kamilla\Kamilla\WPF\MessageWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 9 "..\..\..\WPF\MessageWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 2:              this.ui_tbMain = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Kamilla.WPF,WpfExtensions,C:\repos\LordJZ_Kamilla\Kamilla\WPF\WpfExtensions.cs,GetDisplayString,The following statement contains a magic number: if (mods != ModifierKeys.None)              {                  var builder = new StringBuilder(32);                    if ((mods & ModifierKeys.Windows) != 0)                      builder.Append("Win+");                  if ((mods & ModifierKeys.Alt) != 0)                      builder.Append("Alt+");                  if ((mods & ModifierKeys.Control) != 0)                      builder.Append("Ctrl+");                  if ((mods & ModifierKeys.Shift) != 0)                      builder.Append("Shift+");                    builder.Append(gesture.Key.ToString());                    return builder.ToString();              }
Missing Default,Kamilla.WPF,MessageWindow,C:\repos\LordJZ_Kamilla\Kamilla\WPF\MessageWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 9 "..\..\..\WPF\MessageWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 2:              this.ui_tbMain = ((System.Windows.Controls.TextBox)(target));              return;              }
