Implementation smell,Namespace,Class,File,Method,Description
Long Method,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,MainWindow,The method has 114 lines of code.
Long Method,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,GetSearchMatcher,The method has 128 lines of code.
Complex Method,NetworkLogViewer,ParsingHelper,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\ParsingHelper.cs,ExtractBinaryDatas,Cyclomatic complexity of the method is 14
Complex Method,NetworkLogViewer,ParsingHelper,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\ParsingHelper.cs,ExtractImages,Cyclomatic complexity of the method is 8
Complex Method,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,MainWindow,Cyclomatic complexity of the method is 12
Complex Method,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,SetNViews,Cyclomatic complexity of the method is 10
Complex Method,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,GetSearchMatcher,Cyclomatic complexity of the method is 24
Long Statement,NetworkLogViewer,SearchWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\SearchWindow.xaml.cs,ui_rbSearchMode_Checked,The length of the statement  "	ui_cbAllowSpecialChars.IsEnabled = mode != SearchMode.Opcodes && mode != SearchMode.PacketContents && mode != SearchMode.BinaryContents; " is 136.
Long Statement,NetworkLogViewer,SearchWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\SearchWindow.xaml.cs,ui_rbSearchMode_Checked,The length of the statement  "	ui_cbRegex.IsEnabled = ui_cbMatchCase.IsEnabled = mode != SearchMode.PacketContents && mode != SearchMode.BinaryContents; " is 121.
Long Statement,NetworkLogViewer,ViewerImplementation,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\ViewerImplementation.cs,SetProtocol,The length of the statement  "	Console.WriteLine ("Debug: Switching Protocol:{0}       Old: {1}{2}       New: {3}"' Environment.NewLine' old != null ? old.Name : "null"' Environment.NewLine' value != null ? value.Name : "null"); " is 197.
Long Statement,NetworkLogViewer,ViewerImplementation,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\ViewerImplementation.cs,UnregisterPluginCommand,The length of the statement  "		_.ui_miPlugins.Items.Remove (_.ui_miPlugins.Items.Cast<MenuItem> ().Single (item => (PluginCommand)((MenuItem)item).Tag == command)); " is 133.
Long Statement,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,OpenFile,The length of the statement  "	this.LoadingStatePush (new LoadingState (string.Format (Strings.LoadingFile' filename)' _ => _.ui_readingWorker.CancelAsync ())); " is 129.
Long Statement,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,SetNViews,The length of the statement  "	var distances = Configuration.GetValue ("View" + nViews + " Distances Pct"' Enumerable.Repeat (1.0 / nViews' nViews).ToArray ()); " is 129.
Long Statement,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,SetNViews,The length of the statement  "	var selectedTabs = Configuration.GetValue ("View" + nViews + " Selected Tabs"' Enumerable.Range (0' nViews).ToArray ()); " is 120.
Long Statement,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,ui_searchWorker_DoWork,The length of the statement  "				this.ThreadSafeBegin (w => w.LoadingStatePush (new LoadingState (Strings.Searching' _ => _.ui_searchWorker.CancelAsync ()))); " is 125.
Complex Conditional,NetworkLogViewer.ViewTabs,TextContents,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\ViewTabs\TextContents.xaml.cs,ui_cbDatas_SelectionChanged,The conditional expression  "index >= 0 && (m_strings != null && m_strings.Length > 0 || m_binaryDatas != null && m_binaryDatas.Length > 0)"  is complex.
Empty Catch Block,NetworkLogViewer,ParsingHelper,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\ParsingHelper.cs,ExtractStrings,The method has an empty catch block.
Empty Catch Block,NetworkLogViewer,ParsingHelper,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\ParsingHelper.cs,ExtractBinaryDatas,The method has an empty catch block.
Empty Catch Block,NetworkLogViewer,ParsingHelper,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\ParsingHelper.cs,ExtractBinaryDatas,The method has an empty catch block.
Empty Catch Block,NetworkLogViewer,ParsingHelper,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\ParsingHelper.cs,ExtractImages,The method has an empty catch block.
Empty Catch Block,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,ApplicationOpen_Executed,The method has an empty catch block.
Empty Catch Block,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,ui_readingWorker_DoWork,The method has an empty catch block.
Empty Catch Block,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,ui_miSaveParserOutput_Click,The method has an empty catch block.
Empty Catch Block,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,ui_miSaveTextContents_Click,The method has an empty catch block.
Empty Catch Block,NetworkLogViewer.ViewTabs,BinaryContents,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\ViewTabs\BinaryContents.xaml.cs,ui_btnSave_Click,The method has an empty catch block.
Empty Catch Block,NetworkLogViewer.ViewTabs,TextContents,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\ViewTabs\TextContents.xaml.cs,ui_btn_Click,The method has an empty catch block.
Magic Number,NetworkLogViewer,App,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\App.xaml.cs,TitleBar_MouseLeftButtonDown,The following statement contains a magic number: if (window != null) {  	if (e.ClickCount == 2 && WindowBehavior.GetHasTitleBarMaximizeButton (window)) {  		if (window.WindowState == WindowState.Normal)  			window.WindowState = WindowState.Maximized;  		else  			window.WindowState = WindowState.Normal;  	} else  		window.DragMove ();  }  
Magic Number,NetworkLogViewer,App,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\App.xaml.cs,TitleBar_MouseLeftButtonDown,The following statement contains a magic number: if (e.ClickCount == 2 && WindowBehavior.GetHasTitleBarMaximizeButton (window)) {  	if (window.WindowState == WindowState.Normal)  		window.WindowState = WindowState.Maximized;  	else  		window.WindowState = WindowState.Normal;  } else  	window.DragMove ();  
Magic Number,NetworkLogViewer,ViewerImplementation,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\ViewerImplementation.cs,m_parsingWorker_DoWork,The following statement contains a magic number: while (!worker.CancellationPending) {  	ViewerItem item = null;  	lock (m_parsingQueue) {  		if (m_parsingQueue.Count > 0)  			item = m_parsingQueue.Dequeue ();  	}  	if (item == null) {  		++turnOffTimes;  		if (turnOffTimes == 50)  			return;  		Thread.Sleep (100);  		continue;  	}  	if (item.Viewer != this || item.Log != m_currentLog)  		continue;  	var parser = item.Parser;  	if (parser == null) {  		turnOffTimes = 0;  		protocol.CreateParser (item);  		parser = item.Parser;  	}  	if (!parser.IsParsed) {  		turnOffTimes = 0;  		parser.Parse ();  	}  }  
Magic Number,NetworkLogViewer,ViewerImplementation,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\ViewerImplementation.cs,m_parsingWorker_DoWork,The following statement contains a magic number: while (!worker.CancellationPending) {  	ViewerItem item = null;  	lock (m_parsingQueue) {  		if (m_parsingQueue.Count > 0)  			item = m_parsingQueue.Dequeue ();  	}  	if (item == null) {  		++turnOffTimes;  		if (turnOffTimes == 50)  			return;  		Thread.Sleep (100);  		continue;  	}  	if (item.Viewer != this || item.Log != m_currentLog)  		continue;  	var parser = item.Parser;  	if (parser == null) {  		turnOffTimes = 0;  		protocol.CreateParser (item);  		parser = item.Parser;  	}  	if (!parser.IsParsed) {  		turnOffTimes = 0;  		parser.Parse ();  	}  }  
Magic Number,NetworkLogViewer,ViewerImplementation,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\ViewerImplementation.cs,m_parsingWorker_DoWork,The following statement contains a magic number: if (item == null) {  	++turnOffTimes;  	if (turnOffTimes == 50)  		return;  	Thread.Sleep (100);  	continue;  }  
Magic Number,NetworkLogViewer,ViewerImplementation,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\ViewerImplementation.cs,m_parsingWorker_DoWork,The following statement contains a magic number: if (item == null) {  	++turnOffTimes;  	if (turnOffTimes == 50)  		return;  	Thread.Sleep (100);  	continue;  }  
Magic Number,NetworkLogViewer,ViewerImplementation,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\ViewerImplementation.cs,m_parsingWorker_DoWork,The following statement contains a magic number: if (turnOffTimes == 50)  	return;  
Magic Number,NetworkLogViewer,ViewerImplementation,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\ViewerImplementation.cs,m_parsingWorker_DoWork,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,NetworkLogViewer,ConsoleWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\ConsoleWindow.xaml.cs,ConsoleWindow,The following statement contains a magic number: m_maxConsoleEntries = Configuration.GetValue ("Max Console Entries"' 512);  
Magic Number,NetworkLogViewer,ConsoleWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\ConsoleWindow.xaml.cs,Window_Deactivated,The following statement contains a magic number: this.Opacity = 0.5;  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (state != WindowState.Maximized) {  	var screenHeight = SystemParameters.PrimaryScreenHeight;  	var screenWidth = SystemParameters.PrimaryScreenWidth;  	var height = Configuration.GetValue ("Window Height"' this.Height);  	var width = Configuration.GetValue ("Window Width"' this.Width);  	if (width / screenWidth > 0.8)  		width = screenWidth * 0.8;  	if (height / screenHeight > 0.8)  		height = screenHeight * 0.8;  	this.Width = width;  	this.Height = height;  	var left = Math.Max (Configuration.GetValue ("Window Left"' this.Left)' 0.0);  	var top = Math.Max (Configuration.GetValue ("Window Top"' this.Top)' 0.0);  	if (left != 0.0 && top != 0.0) {  		if (left + width > screenWidth)  			left = screenWidth - width;  		if (top + height > screenHeight)  			top = screenHeight - top;  		this.Left = left;  		this.Top = top;  	}  }  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (state != WindowState.Maximized) {  	var screenHeight = SystemParameters.PrimaryScreenHeight;  	var screenWidth = SystemParameters.PrimaryScreenWidth;  	var height = Configuration.GetValue ("Window Height"' this.Height);  	var width = Configuration.GetValue ("Window Width"' this.Width);  	if (width / screenWidth > 0.8)  		width = screenWidth * 0.8;  	if (height / screenHeight > 0.8)  		height = screenHeight * 0.8;  	this.Width = width;  	this.Height = height;  	var left = Math.Max (Configuration.GetValue ("Window Left"' this.Left)' 0.0);  	var top = Math.Max (Configuration.GetValue ("Window Top"' this.Top)' 0.0);  	if (left != 0.0 && top != 0.0) {  		if (left + width > screenWidth)  			left = screenWidth - width;  		if (top + height > screenHeight)  			top = screenHeight - top;  		this.Left = left;  		this.Top = top;  	}  }  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (state != WindowState.Maximized) {  	var screenHeight = SystemParameters.PrimaryScreenHeight;  	var screenWidth = SystemParameters.PrimaryScreenWidth;  	var height = Configuration.GetValue ("Window Height"' this.Height);  	var width = Configuration.GetValue ("Window Width"' this.Width);  	if (width / screenWidth > 0.8)  		width = screenWidth * 0.8;  	if (height / screenHeight > 0.8)  		height = screenHeight * 0.8;  	this.Width = width;  	this.Height = height;  	var left = Math.Max (Configuration.GetValue ("Window Left"' this.Left)' 0.0);  	var top = Math.Max (Configuration.GetValue ("Window Top"' this.Top)' 0.0);  	if (left != 0.0 && top != 0.0) {  		if (left + width > screenWidth)  			left = screenWidth - width;  		if (top + height > screenHeight)  			top = screenHeight - top;  		this.Left = left;  		this.Top = top;  	}  }  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (state != WindowState.Maximized) {  	var screenHeight = SystemParameters.PrimaryScreenHeight;  	var screenWidth = SystemParameters.PrimaryScreenWidth;  	var height = Configuration.GetValue ("Window Height"' this.Height);  	var width = Configuration.GetValue ("Window Width"' this.Width);  	if (width / screenWidth > 0.8)  		width = screenWidth * 0.8;  	if (height / screenHeight > 0.8)  		height = screenHeight * 0.8;  	this.Width = width;  	this.Height = height;  	var left = Math.Max (Configuration.GetValue ("Window Left"' this.Left)' 0.0);  	var top = Math.Max (Configuration.GetValue ("Window Top"' this.Top)' 0.0);  	if (left != 0.0 && top != 0.0) {  		if (left + width > screenWidth)  			left = screenWidth - width;  		if (top + height > screenHeight)  			top = screenHeight - top;  		this.Left = left;  		this.Top = top;  	}  }  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (width / screenWidth > 0.8)  	width = screenWidth * 0.8;  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (width / screenWidth > 0.8)  	width = screenWidth * 0.8;  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: width = screenWidth * 0.8;  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (height / screenHeight > 0.8)  	height = screenHeight * 0.8;  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (height / screenHeight > 0.8)  	height = screenHeight * 0.8;  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: height = screenHeight * 0.8;  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (result != null && result.Length == 2) {  	this.VerticalGrid.RowDefinitions [1].Height = new GridLength (result [0]' GridUnitType.Star);  	this.VerticalGrid.RowDefinitions [2].Height = new GridLength (result [1]' GridUnitType.Star);  }  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (result != null && result.Length == 2) {  	this.VerticalGrid.RowDefinitions [1].Height = new GridLength (result [0]' GridUnitType.Star);  	this.VerticalGrid.RowDefinitions [2].Height = new GridLength (result [1]' GridUnitType.Star);  }  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.VerticalGrid.RowDefinitions [2].Height = new GridLength (result [1]' GridUnitType.Star);  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,Window_Closing,The following statement contains a magic number: using (Configuration.SuspendSaving ()) {  	m_implementation.SaveSettings ();  	Configuration.SetValue ("Number of Views"' m_currentNViews);  	this.SaveCurrentViews ();  	this.SaveRecentFiles ();  	Configuration.SetValue ("Last File Name"' m_currentFile ?? string.Empty);  	Configuration.SetValue ("Last File Position"' ui_lvPackets.SelectedIndex);  	Configuration.SetValue ("Vertical Splitter"' new[] {  		this.VerticalGrid.RowDefinitions [1].Height.Value'  		this.VerticalGrid.RowDefinitions [2].Height.Value'  	});  	Configuration.SetValue ("Window State"' this.WindowState);  	Configuration.SetValue ("Window Height"' this.Height);  	Configuration.SetValue ("Window Width"' this.Width);  	Configuration.SetValue ("Window Left"' this.Left);  	Configuration.SetValue ("Window Top"' this.Top);  	m_implementation.CloseFile ();  	this.CurrentProtocol = null;  }  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,Window_Closing,The following statement contains a magic number: Configuration.SetValue ("Vertical Splitter"' new[] {  	this.VerticalGrid.RowDefinitions [1].Height.Value'  	this.VerticalGrid.RowDefinitions [2].Height.Value'  });  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,ui_loadingWorker_RunWorkerCompleted,The following statement contains a magic number: if (args.Length == 2)  	filename = args [1];  else {  	filename = Configuration.GetValue ("Last File Name"' string.Empty);  	pos = Configuration.GetValue ("Last File Position"' -1);  }  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,SetNViews,The following statement contains a magic number: for (int i = 0; i < nViews; ++i) {  	var column = new ColumnDefinition ();  	column.Width = new GridLength (distances [i]' GridUnitType.Star);  	column.MinWidth = 50.0;  	ViewsGrid.ColumnDefinitions.Add (column);  }  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,SetNViews,The following statement contains a magic number: column.MinWidth = 50.0;  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,SetNViews,The following statement contains a magic number: for (int i = 0; i < m_splitters.Length; ++i) {  	var splitter = new GridSplitter ();  	Panel.SetZIndex (splitter' 100);  	splitter.Background = Brushes.Transparent;  	splitter.Width = 6;  	splitter.HorizontalAlignment = HorizontalAlignment.Left;  	splitter.VerticalAlignment = VerticalAlignment.Stretch;  	splitter.Margin = new Thickness (-3.0' 0.0' 0.0' 0.0);  	ViewsGrid.Children.Add (splitter);  	Grid.SetColumn (splitter' i + 1);  }  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,SetNViews,The following statement contains a magic number: for (int i = 0; i < m_splitters.Length; ++i) {  	var splitter = new GridSplitter ();  	Panel.SetZIndex (splitter' 100);  	splitter.Background = Brushes.Transparent;  	splitter.Width = 6;  	splitter.HorizontalAlignment = HorizontalAlignment.Left;  	splitter.VerticalAlignment = VerticalAlignment.Stretch;  	splitter.Margin = new Thickness (-3.0' 0.0' 0.0' 0.0);  	ViewsGrid.Children.Add (splitter);  	Grid.SetColumn (splitter' i + 1);  }  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,SetNViews,The following statement contains a magic number: for (int i = 0; i < m_splitters.Length; ++i) {  	var splitter = new GridSplitter ();  	Panel.SetZIndex (splitter' 100);  	splitter.Background = Brushes.Transparent;  	splitter.Width = 6;  	splitter.HorizontalAlignment = HorizontalAlignment.Left;  	splitter.VerticalAlignment = VerticalAlignment.Stretch;  	splitter.Margin = new Thickness (-3.0' 0.0' 0.0' 0.0);  	ViewsGrid.Children.Add (splitter);  	Grid.SetColumn (splitter' i + 1);  }  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,SetNViews,The following statement contains a magic number: Panel.SetZIndex (splitter' 100);  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,SetNViews,The following statement contains a magic number: splitter.Width = 6;  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,SetNViews,The following statement contains a magic number: splitter.Margin = new Thickness (-3.0' 0.0' 0.0' 0.0);  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,ui_savingWorker_DoWork,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	if (worker.CancellationPending)  		return;  	var item = items [i];  	func (writer' item' i);  	int newProgress = i * 100 / count;  	if (newProgress != progress) {  		progress = newProgress;  		worker.ReportProgress (progress);  	}  }  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,GetSearchMatcher,The following statement contains a magic number: switch (m_searchMode) {  case SearchMode.Opcodes:  	var type = this.CurrentProtocol.OpcodesEnumType;  	if (type == null) {  		MessageWindow.Show (this' Strings.Error' Strings.SearchFailedNoOpcodes);  		return null;  	}  	if (m_regex) {  		try {  			regex = new Regex (text' m_matchCase ? RegexOptions.None : RegexOptions.IgnoreCase);  		} catch {  			MessageWindow.Show (this' Strings.Error' Strings.SearchString2RegexFailed.LocalizedFormat (text));  			return null;  		}  		var fields = type.GetFields (BindingFlags.Static | BindingFlags.Public);  		var count = fields.Length;  		var opcodes = new List<uint> (count / 2);  		for (int i = 0; i < count; ++i) {  			var field = fields [i];  			if (regex.IsMatch (field.Name))  				opcodes.Add ((uint)field.GetRawConstantValue ());  		}  		if (opcodes.Count == 0) {  			MessageWindow.Show (this' Strings.Error' Strings.SearchFailedNoMatchingOpcodes);  			return null;  		}  		var arr = opcodes.ToArray ();  		return item => {  			var packet = item.Packet as IPacketWithOpcode;  			if (packet == null)  				return false;  			return arr.Contains (packet.Opcode);  		};  	} else {  		uint opcode;  		try {  			try {  				opcode = (uint)Enum.Parse (type' text' !m_matchCase);  			} catch {  				opcode = text.ParseUInt32 ();  			}  		} catch {  			MessageWindow.Show (this' Strings.Error' Strings.SearchString2OpcodeFailed.LocalizedFormat (text));  			return null;  		}  		return item => {  			var packet = item.Packet as IPacketWithOpcode;  			if (packet == null)  				return false;  			return packet.Opcode == opcode;  		};  	}  case SearchMode.BinaryContents:  	if (!ToByteSequence (text' out byteSequence))  		return null;  	return item => {  		var parser = item.Parser;  		if (parser == null) {  			this.CurrentProtocol.CreateParser (item);  			parser = item.Parser;  		}  		if (!parser.IsParsed)  			parser.Parse ();  		var datas = ParsingHelper.ExtractBinaryDatas (this.CurrentProtocol' item);  		for (int i = 0; i < datas.Length; i++) {  			if (datas [i].Item2.IndexOfSequence (byteSequence) >= 0)  				return true;  		}  		return false;  	};  case SearchMode.PacketContents:  	if (!ToByteSequence (text' out byteSequence))  		return null;  	return item => item.Packet.Data.IndexOfSequence (byteSequence) >= 0;  case SearchMode.ParserOutput:  case SearchMode.TextContents:  	if (m_regex) {  		try {  			regex = new Regex (text' m_matchCase ? RegexOptions.None : RegexOptions.IgnoreCase);  		} catch {  			MessageWindow.Show (this' Strings.Error' Strings.SearchString2RegexFailed.LocalizedFormat (text));  			return null;  		}  		textMatcher = s => regex.IsMatch (s);  	} else {  		var searchPattern = text;  		if (m_allowChars) {  			searchPattern = searchPattern.Replace ("\\r"' "\r").Replace ("\\n"' "\n").Replace ("\\t"' "\t").Replace ("\\0"' "\0");  		}  		var comparison = m_matchCase ? StringComparison.InvariantCulture : StringComparison.InvariantCultureIgnoreCase;  		textMatcher = s => s.IndexOf (searchPattern' comparison) >= 0;  	}  	if (m_searchMode == SearchMode.TextContents) {  		return item => {  			var parser = item.Parser;  			if (parser == null) {  				this.CurrentProtocol.CreateParser (item);  				parser = item.Parser;  			}  			if (!parser.IsParsed)  				parser.Parse ();  			var datas = ParsingHelper.ExtractStrings (this.CurrentProtocol' item);  			for (int i = 0; i < datas.Length; i++) {  				if (textMatcher (datas [i].Item2))  					return true;  			}  			return false;  		};  	} else {  		return item => {  			var parser = item.Parser;  			if (parser == null) {  				this.CurrentProtocol.CreateParser (item);  				parser = item.Parser;  			}  			if (!parser.IsParsed)  				parser.Parse ();  			return textMatcher (parser.ParsedText ?? string.Empty);  		};  	}  }  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,GetSearchMatcher,The following statement contains a magic number: if (m_regex) {  	try {  		regex = new Regex (text' m_matchCase ? RegexOptions.None : RegexOptions.IgnoreCase);  	} catch {  		MessageWindow.Show (this' Strings.Error' Strings.SearchString2RegexFailed.LocalizedFormat (text));  		return null;  	}  	var fields = type.GetFields (BindingFlags.Static | BindingFlags.Public);  	var count = fields.Length;  	var opcodes = new List<uint> (count / 2);  	for (int i = 0; i < count; ++i) {  		var field = fields [i];  		if (regex.IsMatch (field.Name))  			opcodes.Add ((uint)field.GetRawConstantValue ());  	}  	if (opcodes.Count == 0) {  		MessageWindow.Show (this' Strings.Error' Strings.SearchFailedNoMatchingOpcodes);  		return null;  	}  	var arr = opcodes.ToArray ();  	return item => {  		var packet = item.Packet as IPacketWithOpcode;  		if (packet == null)  			return false;  		return arr.Contains (packet.Opcode);  	};  } else {  	uint opcode;  	try {  		try {  			opcode = (uint)Enum.Parse (type' text' !m_matchCase);  		} catch {  			opcode = text.ParseUInt32 ();  		}  	} catch {  		MessageWindow.Show (this' Strings.Error' Strings.SearchString2OpcodeFailed.LocalizedFormat (text));  		return null;  	}  	return item => {  		var packet = item.Packet as IPacketWithOpcode;  		if (packet == null)  			return false;  		return packet.Opcode == opcode;  	};  }  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,ui_searchWorker_DoWork,The following statement contains a magic number: try {  	UICulture.Initialize ();  	var request = (SearchRequest)e.Argument;  	var worker = (BackgroundWorker)sender;  	int delta = request.IsDown ? 1 : -1;  	int start = request.IsContinue ? (ui_lvPackets.ThreadSafe (_ => _.SelectedIndex) + delta) : 0;  	int progress = 0;  	var items = m_implementation.m_items;  	int count = items.Count;  	ViewerItem result = null;  	int ms = Environment.TickCount;  	for (int i = start; i < count && i >= 0; i += delta) {  		if (worker.CancellationPending)  			return;  		var item = items [i];  		if (request.Matches (item)) {  			result = item;  			break;  		}  		int newProgress = i * 100 / count;  		if (newProgress != progress) {  			progress = newProgress;  			worker.ReportProgress (progress);  		}  		if (!statePushed && Environment.TickCount - ms > 200) {  			statePushed = true;  			this.ThreadSafeBegin (w => w.LoadingStatePush (new LoadingState (Strings.Searching' _ => _.ui_searchWorker.CancelAsync ())));  		}  	}  	e.Result = new Tuple<SearchRequest' ViewerItem> (request' result);  } finally {  	if (statePushed)  		this.ThreadSafeBegin (w => w.LoadingStatePop ());  }  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,ui_searchWorker_DoWork,The following statement contains a magic number: try {  	UICulture.Initialize ();  	var request = (SearchRequest)e.Argument;  	var worker = (BackgroundWorker)sender;  	int delta = request.IsDown ? 1 : -1;  	int start = request.IsContinue ? (ui_lvPackets.ThreadSafe (_ => _.SelectedIndex) + delta) : 0;  	int progress = 0;  	var items = m_implementation.m_items;  	int count = items.Count;  	ViewerItem result = null;  	int ms = Environment.TickCount;  	for (int i = start; i < count && i >= 0; i += delta) {  		if (worker.CancellationPending)  			return;  		var item = items [i];  		if (request.Matches (item)) {  			result = item;  			break;  		}  		int newProgress = i * 100 / count;  		if (newProgress != progress) {  			progress = newProgress;  			worker.ReportProgress (progress);  		}  		if (!statePushed && Environment.TickCount - ms > 200) {  			statePushed = true;  			this.ThreadSafeBegin (w => w.LoadingStatePush (new LoadingState (Strings.Searching' _ => _.ui_searchWorker.CancelAsync ())));  		}  	}  	e.Result = new Tuple<SearchRequest' ViewerItem> (request' result);  } finally {  	if (statePushed)  		this.ThreadSafeBegin (w => w.LoadingStatePop ());  }  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,ui_searchWorker_DoWork,The following statement contains a magic number: for (int i = start; i < count && i >= 0; i += delta) {  	if (worker.CancellationPending)  		return;  	var item = items [i];  	if (request.Matches (item)) {  		result = item;  		break;  	}  	int newProgress = i * 100 / count;  	if (newProgress != progress) {  		progress = newProgress;  		worker.ReportProgress (progress);  	}  	if (!statePushed && Environment.TickCount - ms > 200) {  		statePushed = true;  		this.ThreadSafeBegin (w => w.LoadingStatePush (new LoadingState (Strings.Searching' _ => _.ui_searchWorker.CancelAsync ())));  	}  }  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,ui_searchWorker_DoWork,The following statement contains a magic number: for (int i = start; i < count && i >= 0; i += delta) {  	if (worker.CancellationPending)  		return;  	var item = items [i];  	if (request.Matches (item)) {  		result = item;  		break;  	}  	int newProgress = i * 100 / count;  	if (newProgress != progress) {  		progress = newProgress;  		worker.ReportProgress (progress);  	}  	if (!statePushed && Environment.TickCount - ms > 200) {  		statePushed = true;  		this.ThreadSafeBegin (w => w.LoadingStatePush (new LoadingState (Strings.Searching' _ => _.ui_searchWorker.CancelAsync ())));  	}  }  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,ui_searchWorker_DoWork,The following statement contains a magic number: if (!statePushed && Environment.TickCount - ms > 200) {  	statePushed = true;  	this.ThreadSafeBegin (w => w.LoadingStatePush (new LoadingState (Strings.Searching' _ => _.ui_searchWorker.CancelAsync ())));  }  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,UpdateRecentFilesMenu,The following statement contains a magic number: this.ThreadSafeBegin (x => {  	ui_miRecentFiles.Items.Clear ();  	ui_miRecentFiles.IsEnabled = m_recentFiles.Count > 0;  	int i = 0;  	foreach (var _path in m_recentFiles) {  		var path = _path;  		++i;  		var item = new MenuItem ();  		item.Tag = path;  		if (path.Length > maxRecentFileLength) {  			path = path.Replace ("_"' "__");  			char sep = Path.DirectorySeparatorChar;  			var parts = path.Split (new char[] {  				sep  			}' StringSplitOptions.RemoveEmptyEntries);  			var builder = new StringBuilder (150);  			builder.Append (parts [0]).Append (sep).Append ("...");  			int j = parts.Length;  			int len = builder.Length;  			while (len < maxRecentFileLength) {  				len += parts [--j].Length + 1;  				builder.Append (sep).Append (parts [j]);  			}  			item.Header = i + ". " + builder.ToString ();  		} else  			item.Header = i + ". " + path.Replace ("_"' "__");  		item.Click += new RoutedEventHandler (ui_recentFileMenuItem_Click);  		ui_miRecentFiles.Items.Add (item);  	}  });  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,UpdateRecentFilesMenu,The following statement contains a magic number: foreach (var _path in m_recentFiles) {  	var path = _path;  	++i;  	var item = new MenuItem ();  	item.Tag = path;  	if (path.Length > maxRecentFileLength) {  		path = path.Replace ("_"' "__");  		char sep = Path.DirectorySeparatorChar;  		var parts = path.Split (new char[] {  			sep  		}' StringSplitOptions.RemoveEmptyEntries);  		var builder = new StringBuilder (150);  		builder.Append (parts [0]).Append (sep).Append ("...");  		int j = parts.Length;  		int len = builder.Length;  		while (len < maxRecentFileLength) {  			len += parts [--j].Length + 1;  			builder.Append (sep).Append (parts [j]);  		}  		item.Header = i + ". " + builder.ToString ();  	} else  		item.Header = i + ". " + path.Replace ("_"' "__");  	item.Click += new RoutedEventHandler (ui_recentFileMenuItem_Click);  	ui_miRecentFiles.Items.Add (item);  }  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,UpdateRecentFilesMenu,The following statement contains a magic number: if (path.Length > maxRecentFileLength) {  	path = path.Replace ("_"' "__");  	char sep = Path.DirectorySeparatorChar;  	var parts = path.Split (new char[] {  		sep  	}' StringSplitOptions.RemoveEmptyEntries);  	var builder = new StringBuilder (150);  	builder.Append (parts [0]).Append (sep).Append ("...");  	int j = parts.Length;  	int len = builder.Length;  	while (len < maxRecentFileLength) {  		len += parts [--j].Length + 1;  		builder.Append (sep).Append (parts [j]);  	}  	item.Header = i + ". " + builder.ToString ();  } else  	item.Header = i + ". " + path.Replace ("_"' "__");  
Magic Number,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,SaveRecentFiles,The following statement contains a magic number: if (m_recentFiles != null) {  	var builder = new StringBuilder (256);  	foreach (var filename in m_recentFiles)  		builder.Append (filename).Append (Path.PathSeparator);  	Configuration.SetValue ("RecentFiles"' builder.ToString ());  }  
Missing Default,NetworkLogViewer,MainWindow,F:\newReposMay17\LordJZ_Kamilla\NetworkLogViewer\MainWindow.xaml.cs,GetSearchMatcher,The following switch statement is missing a default case: switch (m_searchMode) {  case SearchMode.Opcodes:  	var type = this.CurrentProtocol.OpcodesEnumType;  	if (type == null) {  		MessageWindow.Show (this' Strings.Error' Strings.SearchFailedNoOpcodes);  		return null;  	}  	if (m_regex) {  		try {  			regex = new Regex (text' m_matchCase ? RegexOptions.None : RegexOptions.IgnoreCase);  		} catch {  			MessageWindow.Show (this' Strings.Error' Strings.SearchString2RegexFailed.LocalizedFormat (text));  			return null;  		}  		var fields = type.GetFields (BindingFlags.Static | BindingFlags.Public);  		var count = fields.Length;  		var opcodes = new List<uint> (count / 2);  		for (int i = 0; i < count; ++i) {  			var field = fields [i];  			if (regex.IsMatch (field.Name))  				opcodes.Add ((uint)field.GetRawConstantValue ());  		}  		if (opcodes.Count == 0) {  			MessageWindow.Show (this' Strings.Error' Strings.SearchFailedNoMatchingOpcodes);  			return null;  		}  		var arr = opcodes.ToArray ();  		return item => {  			var packet = item.Packet as IPacketWithOpcode;  			if (packet == null)  				return false;  			return arr.Contains (packet.Opcode);  		};  	} else {  		uint opcode;  		try {  			try {  				opcode = (uint)Enum.Parse (type' text' !m_matchCase);  			} catch {  				opcode = text.ParseUInt32 ();  			}  		} catch {  			MessageWindow.Show (this' Strings.Error' Strings.SearchString2OpcodeFailed.LocalizedFormat (text));  			return null;  		}  		return item => {  			var packet = item.Packet as IPacketWithOpcode;  			if (packet == null)  				return false;  			return packet.Opcode == opcode;  		};  	}  case SearchMode.BinaryContents:  	if (!ToByteSequence (text' out byteSequence))  		return null;  	return item => {  		var parser = item.Parser;  		if (parser == null) {  			this.CurrentProtocol.CreateParser (item);  			parser = item.Parser;  		}  		if (!parser.IsParsed)  			parser.Parse ();  		var datas = ParsingHelper.ExtractBinaryDatas (this.CurrentProtocol' item);  		for (int i = 0; i < datas.Length; i++) {  			if (datas [i].Item2.IndexOfSequence (byteSequence) >= 0)  				return true;  		}  		return false;  	};  case SearchMode.PacketContents:  	if (!ToByteSequence (text' out byteSequence))  		return null;  	return item => item.Packet.Data.IndexOfSequence (byteSequence) >= 0;  case SearchMode.ParserOutput:  case SearchMode.TextContents:  	if (m_regex) {  		try {  			regex = new Regex (text' m_matchCase ? RegexOptions.None : RegexOptions.IgnoreCase);  		} catch {  			MessageWindow.Show (this' Strings.Error' Strings.SearchString2RegexFailed.LocalizedFormat (text));  			return null;  		}  		textMatcher = s => regex.IsMatch (s);  	} else {  		var searchPattern = text;  		if (m_allowChars) {  			searchPattern = searchPattern.Replace ("\\r"' "\r").Replace ("\\n"' "\n").Replace ("\\t"' "\t").Replace ("\\0"' "\0");  		}  		var comparison = m_matchCase ? StringComparison.InvariantCulture : StringComparison.InvariantCultureIgnoreCase;  		textMatcher = s => s.IndexOf (searchPattern' comparison) >= 0;  	}  	if (m_searchMode == SearchMode.TextContents) {  		return item => {  			var parser = item.Parser;  			if (parser == null) {  				this.CurrentProtocol.CreateParser (item);  				parser = item.Parser;  			}  			if (!parser.IsParsed)  				parser.Parse ();  			var datas = ParsingHelper.ExtractStrings (this.CurrentProtocol' item);  			for (int i = 0; i < datas.Length; i++) {  				if (textMatcher (datas [i].Item2))  					return true;  			}  			return false;  		};  	} else {  		return item => {  			var parser = item.Parser;  			if (parser == null) {  				this.CurrentProtocol.CreateParser (item);  				parser = item.Parser;  			}  			if (!parser.IsParsed)  				parser.Parse ();  			return textMatcher (parser.ParsedText ?? string.Empty);  		};  	}  }  
