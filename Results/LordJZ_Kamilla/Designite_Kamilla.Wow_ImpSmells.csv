Implementation smell,Namespace,Class,File,Method,Description
Long Method,Kamilla.Network.Logging.Wow,MangosNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The method has 134 lines of code.
Complex Method,Kamilla.Network.Logging.Wow,MangosNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,Cyclomatic complexity of the method is 24
Long Parameter List,Kamilla.Network.Protocols.Wow,WowPacket,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Protocols\Wow\WowPacket.cs,WowPacket,The method has 8 parameters. Parameters: data' direction' flags' wowFlags' arrivalTime' arrivalTicks' opcode' connectionId
Empty Catch Block,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The method has an empty catch block.
Empty Catch Block,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The method has an empty catch block.
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: int newProgress = (int)(m_streamReader.BaseStream.Position * 100 / m_streamReader.BaseStream.Length);
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: var langBytes = stackalloc byte[5];
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: langBytes[2] = (byte)'-';
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: langBytes[3] = header->Lang[2];
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: langBytes[3] = header->Lang[2];
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: langBytes[4] = header->Lang[3];
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: langBytes[4] = header->Lang[3];
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: var lang = new string((sbyte*)langBytes' 0' 5);
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: Marshal.Copy(new IntPtr(header->SessionKey)' m_sessionKey' 0' 40);
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: reader.Skip(16);
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: this.TCAD = reader.ReadBytes(32);
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: this.InternalSetCapacity((int)((m_stream.Length - m_stream.Position) / 100));
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalRead,The following statement contains a magic number: var data = m_stream.ReadBytes(header->DataLength - 4);
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalRead,The following statement contains a magic number: int newProgress = (int)(                              (m_stream.Position - m_streamOriginalPosition) * 100                              / (m_stream.Length - m_streamOriginalPosition));
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 8;                        // ACAD                      optLen += 16;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.TCAD != null)                          optLen += 32;                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 0;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime();                          index += 4;                          *(uint*)(bytesPtr + index) = this.StartTicks;                          index += 4;                          // ACAD                          index += 16;                            if (!string.IsNullOrEmpty(this.SnifferDesc))                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if (this.TCAD != null)                          {                              Buffer.BlockCopy(this.TCAD' 0' bytes' index' 32);                              index += 32;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 8;                        // ACAD                      optLen += 16;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.TCAD != null)                          optLen += 32;                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 0;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime();                          index += 4;                          *(uint*)(bytesPtr + index) = this.StartTicks;                          index += 4;                          // ACAD                          index += 16;                            if (!string.IsNullOrEmpty(this.SnifferDesc))                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if (this.TCAD != null)                          {                              Buffer.BlockCopy(this.TCAD' 0' bytes' index' 32);                              index += 32;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 8;                        // ACAD                      optLen += 16;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.TCAD != null)                          optLen += 32;                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 0;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime();                          index += 4;                          *(uint*)(bytesPtr + index) = this.StartTicks;                          index += 4;                          // ACAD                          index += 16;                            if (!string.IsNullOrEmpty(this.SnifferDesc))                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if (this.TCAD != null)                          {                              Buffer.BlockCopy(this.TCAD' 0' bytes' index' 32);                              index += 32;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 8;                        // ACAD                      optLen += 16;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.TCAD != null)                          optLen += 32;                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 0;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime();                          index += 4;                          *(uint*)(bytesPtr + index) = this.StartTicks;                          index += 4;                          // ACAD                          index += 16;                            if (!string.IsNullOrEmpty(this.SnifferDesc))                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if (this.TCAD != null)                          {                              Buffer.BlockCopy(this.TCAD' 0' bytes' index' 32);                              index += 32;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 8;                        // ACAD                      optLen += 16;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.TCAD != null)                          optLen += 32;                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 0;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime();                          index += 4;                          *(uint*)(bytesPtr + index) = this.StartTicks;                          index += 4;                          // ACAD                          index += 16;                            if (!string.IsNullOrEmpty(this.SnifferDesc))                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if (this.TCAD != null)                          {                              Buffer.BlockCopy(this.TCAD' 0' bytes' index' 32);                              index += 32;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 8;                        // ACAD                      optLen += 16;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.TCAD != null)                          optLen += 32;                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 0;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime();                          index += 4;                          *(uint*)(bytesPtr + index) = this.StartTicks;                          index += 4;                          // ACAD                          index += 16;                            if (!string.IsNullOrEmpty(this.SnifferDesc))                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if (this.TCAD != null)                          {                              Buffer.BlockCopy(this.TCAD' 0' bytes' index' 32);                              index += 32;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 8;                        // ACAD                      optLen += 16;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.TCAD != null)                          optLen += 32;                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 0;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime();                          index += 4;                          *(uint*)(bytesPtr + index) = this.StartTicks;                          index += 4;                          // ACAD                          index += 16;                            if (!string.IsNullOrEmpty(this.SnifferDesc))                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if (this.TCAD != null)                          {                              Buffer.BlockCopy(this.TCAD' 0' bytes' index' 32);                              index += 32;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 8;                        // ACAD                      optLen += 16;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.TCAD != null)                          optLen += 32;                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 0;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime();                          index += 4;                          *(uint*)(bytesPtr + index) = this.StartTicks;                          index += 4;                          // ACAD                          index += 16;                            if (!string.IsNullOrEmpty(this.SnifferDesc))                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if (this.TCAD != null)                          {                              Buffer.BlockCopy(this.TCAD' 0' bytes' index' 32);                              index += 32;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 8;                        // ACAD                      optLen += 16;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.TCAD != null)                          optLen += 32;                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 0;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime();                          index += 4;                          *(uint*)(bytesPtr + index) = this.StartTicks;                          index += 4;                          // ACAD                          index += 16;                            if (!string.IsNullOrEmpty(this.SnifferDesc))                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if (this.TCAD != null)                          {                              Buffer.BlockCopy(this.TCAD' 0' bytes' index' 32);                              index += 32;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 8;                        // ACAD                      optLen += 16;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.TCAD != null)                          optLen += 32;                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 0;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime();                          index += 4;                          *(uint*)(bytesPtr + index) = this.StartTicks;                          index += 4;                          // ACAD                          index += 16;                            if (!string.IsNullOrEmpty(this.SnifferDesc))                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if (this.TCAD != null)                          {                              Buffer.BlockCopy(this.TCAD' 0' bytes' index' 32);                              index += 32;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 8;                        // ACAD                      optLen += 16;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.TCAD != null)                          optLen += 32;                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 0;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime();                          index += 4;                          *(uint*)(bytesPtr + index) = this.StartTicks;                          index += 4;                          // ACAD                          index += 16;                            if (!string.IsNullOrEmpty(this.SnifferDesc))                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if (this.TCAD != null)                          {                              Buffer.BlockCopy(this.TCAD' 0' bytes' index' 32);                              index += 32;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 8;                        // ACAD                      optLen += 16;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.TCAD != null)                          optLen += 32;                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 0;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime();                          index += 4;                          *(uint*)(bytesPtr + index) = this.StartTicks;                          index += 4;                          // ACAD                          index += 16;                            if (!string.IsNullOrEmpty(this.SnifferDesc))                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if (this.TCAD != null)                          {                              Buffer.BlockCopy(this.TCAD' 0' bytes' index' 32);                              index += 32;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 8;                        // ACAD                      optLen += 16;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.TCAD != null)                          optLen += 32;                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 0;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime();                          index += 4;                          *(uint*)(bytesPtr + index) = this.StartTicks;                          index += 4;                          // ACAD                          index += 16;                            if (!string.IsNullOrEmpty(this.SnifferDesc))                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if (this.TCAD != null)                          {                              Buffer.BlockCopy(this.TCAD' 0' bytes' index' 32);                              index += 32;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 8;                        // ACAD                      optLen += 16;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.TCAD != null)                          optLen += 32;                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 0;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime();                          index += 4;                          *(uint*)(bytesPtr + index) = this.StartTicks;                          index += 4;                          // ACAD                          index += 16;                            if (!string.IsNullOrEmpty(this.SnifferDesc))                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if (this.TCAD != null)                          {                              Buffer.BlockCopy(this.TCAD' 0' bytes' index' 32);                              index += 32;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 8;                        // ACAD                      optLen += 16;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.TCAD != null)                          optLen += 32;                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 0;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime();                          index += 4;                          *(uint*)(bytesPtr + index) = this.StartTicks;                          index += 4;                          // ACAD                          index += 16;                            if (!string.IsNullOrEmpty(this.SnifferDesc))                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if (this.TCAD != null)                          {                              Buffer.BlockCopy(this.TCAD' 0' bytes' index' 32);                              index += 32;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWritePacket2,The following statement contains a magic number: header->m_header.DataLength = data.Length + 4;
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWritePacket2,The following statement contains a magic number: header->m_header.OptionalDataLength = 2;
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: var langBytes = stackalloc byte[5];
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: langBytes[2] = (byte)'-';
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: langBytes[3] = header->Lang[2];
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: langBytes[3] = header->Lang[2];
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: langBytes[4] = header->Lang[3];
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: langBytes[4] = header->Lang[3];
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: var lang = new string((sbyte*)langBytes' 0' 5);
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: Marshal.Copy(new IntPtr(header->SessionKey)' m_sessionKey' 0' 40);
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: reader.Skip(4);
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: this.FCAD = reader.ReadBytes(16);
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: this.SCAD = reader.ReadBytes(16);
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: this.InternalSetCapacity((int)((m_stream.Length - m_stream.Position) / 100));
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalRead,The following statement contains a magic number: var data = m_stream.ReadBytes(header->DataLength - 4);
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalRead,The following statement contains a magic number: int newProgress = (int)(                              (m_stream.Position - m_streamOriginalPosition) * 100                              / (m_stream.Length - m_streamOriginalPosition));
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  var flags = OptHeaderFlags.None;                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 4;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          flags |= OptHeaderFlags.HasSnifferDescString;                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.FCAD != null)                      {                          flags |= OptHeaderFlags.HasFCAD;                          optLen += 16;                      }                        if (this.SCAD != null)                      {                          flags |= OptHeaderFlags.HasSCAD;                          optLen += 16;                      }                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 1;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->StartedOnUnix = this.StartTime.ToUnixTime();                      header->StartedOnTicks = this.StartTicks;                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = (uint)flags;                          index += 4;                            if ((flags & OptHeaderFlags.HasSnifferDescString) != 0)                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if ((flags & OptHeaderFlags.HasFCAD) != 0)                          {                              Buffer.BlockCopy(this.FCAD' 0' bytes' index' 16);                              index += 16;                          }                            if ((flags & OptHeaderFlags.HasSCAD) != 0)                          {                              Buffer.BlockCopy(this.SCAD' 0' bytes' index' 16);                              index += 16;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  var flags = OptHeaderFlags.None;                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 4;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          flags |= OptHeaderFlags.HasSnifferDescString;                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.FCAD != null)                      {                          flags |= OptHeaderFlags.HasFCAD;                          optLen += 16;                      }                        if (this.SCAD != null)                      {                          flags |= OptHeaderFlags.HasSCAD;                          optLen += 16;                      }                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 1;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->StartedOnUnix = this.StartTime.ToUnixTime();                      header->StartedOnTicks = this.StartTicks;                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = (uint)flags;                          index += 4;                            if ((flags & OptHeaderFlags.HasSnifferDescString) != 0)                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if ((flags & OptHeaderFlags.HasFCAD) != 0)                          {                              Buffer.BlockCopy(this.FCAD' 0' bytes' index' 16);                              index += 16;                          }                            if ((flags & OptHeaderFlags.HasSCAD) != 0)                          {                              Buffer.BlockCopy(this.SCAD' 0' bytes' index' 16);                              index += 16;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  var flags = OptHeaderFlags.None;                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 4;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          flags |= OptHeaderFlags.HasSnifferDescString;                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.FCAD != null)                      {                          flags |= OptHeaderFlags.HasFCAD;                          optLen += 16;                      }                        if (this.SCAD != null)                      {                          flags |= OptHeaderFlags.HasSCAD;                          optLen += 16;                      }                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 1;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->StartedOnUnix = this.StartTime.ToUnixTime();                      header->StartedOnTicks = this.StartTicks;                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = (uint)flags;                          index += 4;                            if ((flags & OptHeaderFlags.HasSnifferDescString) != 0)                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if ((flags & OptHeaderFlags.HasFCAD) != 0)                          {                              Buffer.BlockCopy(this.FCAD' 0' bytes' index' 16);                              index += 16;                          }                            if ((flags & OptHeaderFlags.HasSCAD) != 0)                          {                              Buffer.BlockCopy(this.SCAD' 0' bytes' index' 16);                              index += 16;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  var flags = OptHeaderFlags.None;                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 4;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          flags |= OptHeaderFlags.HasSnifferDescString;                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.FCAD != null)                      {                          flags |= OptHeaderFlags.HasFCAD;                          optLen += 16;                      }                        if (this.SCAD != null)                      {                          flags |= OptHeaderFlags.HasSCAD;                          optLen += 16;                      }                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 1;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->StartedOnUnix = this.StartTime.ToUnixTime();                      header->StartedOnTicks = this.StartTicks;                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = (uint)flags;                          index += 4;                            if ((flags & OptHeaderFlags.HasSnifferDescString) != 0)                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if ((flags & OptHeaderFlags.HasFCAD) != 0)                          {                              Buffer.BlockCopy(this.FCAD' 0' bytes' index' 16);                              index += 16;                          }                            if ((flags & OptHeaderFlags.HasSCAD) != 0)                          {                              Buffer.BlockCopy(this.SCAD' 0' bytes' index' 16);                              index += 16;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  var flags = OptHeaderFlags.None;                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 4;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          flags |= OptHeaderFlags.HasSnifferDescString;                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.FCAD != null)                      {                          flags |= OptHeaderFlags.HasFCAD;                          optLen += 16;                      }                        if (this.SCAD != null)                      {                          flags |= OptHeaderFlags.HasSCAD;                          optLen += 16;                      }                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 1;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->StartedOnUnix = this.StartTime.ToUnixTime();                      header->StartedOnTicks = this.StartTicks;                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = (uint)flags;                          index += 4;                            if ((flags & OptHeaderFlags.HasSnifferDescString) != 0)                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if ((flags & OptHeaderFlags.HasFCAD) != 0)                          {                              Buffer.BlockCopy(this.FCAD' 0' bytes' index' 16);                              index += 16;                          }                            if ((flags & OptHeaderFlags.HasSCAD) != 0)                          {                              Buffer.BlockCopy(this.SCAD' 0' bytes' index' 16);                              index += 16;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  var flags = OptHeaderFlags.None;                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 4;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          flags |= OptHeaderFlags.HasSnifferDescString;                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.FCAD != null)                      {                          flags |= OptHeaderFlags.HasFCAD;                          optLen += 16;                      }                        if (this.SCAD != null)                      {                          flags |= OptHeaderFlags.HasSCAD;                          optLen += 16;                      }                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 1;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->StartedOnUnix = this.StartTime.ToUnixTime();                      header->StartedOnTicks = this.StartTicks;                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = (uint)flags;                          index += 4;                            if ((flags & OptHeaderFlags.HasSnifferDescString) != 0)                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if ((flags & OptHeaderFlags.HasFCAD) != 0)                          {                              Buffer.BlockCopy(this.FCAD' 0' bytes' index' 16);                              index += 16;                          }                            if ((flags & OptHeaderFlags.HasSCAD) != 0)                          {                              Buffer.BlockCopy(this.SCAD' 0' bytes' index' 16);                              index += 16;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  var flags = OptHeaderFlags.None;                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 4;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          flags |= OptHeaderFlags.HasSnifferDescString;                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.FCAD != null)                      {                          flags |= OptHeaderFlags.HasFCAD;                          optLen += 16;                      }                        if (this.SCAD != null)                      {                          flags |= OptHeaderFlags.HasSCAD;                          optLen += 16;                      }                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 1;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->StartedOnUnix = this.StartTime.ToUnixTime();                      header->StartedOnTicks = this.StartTicks;                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = (uint)flags;                          index += 4;                            if ((flags & OptHeaderFlags.HasSnifferDescString) != 0)                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if ((flags & OptHeaderFlags.HasFCAD) != 0)                          {                              Buffer.BlockCopy(this.FCAD' 0' bytes' index' 16);                              index += 16;                          }                            if ((flags & OptHeaderFlags.HasSCAD) != 0)                          {                              Buffer.BlockCopy(this.SCAD' 0' bytes' index' 16);                              index += 16;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  var flags = OptHeaderFlags.None;                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 4;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          flags |= OptHeaderFlags.HasSnifferDescString;                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.FCAD != null)                      {                          flags |= OptHeaderFlags.HasFCAD;                          optLen += 16;                      }                        if (this.SCAD != null)                      {                          flags |= OptHeaderFlags.HasSCAD;                          optLen += 16;                      }                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 1;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->StartedOnUnix = this.StartTime.ToUnixTime();                      header->StartedOnTicks = this.StartTicks;                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = (uint)flags;                          index += 4;                            if ((flags & OptHeaderFlags.HasSnifferDescString) != 0)                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if ((flags & OptHeaderFlags.HasFCAD) != 0)                          {                              Buffer.BlockCopy(this.FCAD' 0' bytes' index' 16);                              index += 16;                          }                            if ((flags & OptHeaderFlags.HasSCAD) != 0)                          {                              Buffer.BlockCopy(this.SCAD' 0' bytes' index' 16);                              index += 16;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  var flags = OptHeaderFlags.None;                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 4;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          flags |= OptHeaderFlags.HasSnifferDescString;                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.FCAD != null)                      {                          flags |= OptHeaderFlags.HasFCAD;                          optLen += 16;                      }                        if (this.SCAD != null)                      {                          flags |= OptHeaderFlags.HasSCAD;                          optLen += 16;                      }                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 1;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->StartedOnUnix = this.StartTime.ToUnixTime();                      header->StartedOnTicks = this.StartTicks;                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = (uint)flags;                          index += 4;                            if ((flags & OptHeaderFlags.HasSnifferDescString) != 0)                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if ((flags & OptHeaderFlags.HasFCAD) != 0)                          {                              Buffer.BlockCopy(this.FCAD' 0' bytes' index' 16);                              index += 16;                          }                            if ((flags & OptHeaderFlags.HasSCAD) != 0)                          {                              Buffer.BlockCopy(this.SCAD' 0' bytes' index' 16);                              index += 16;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  var flags = OptHeaderFlags.None;                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 4;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          flags |= OptHeaderFlags.HasSnifferDescString;                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.FCAD != null)                      {                          flags |= OptHeaderFlags.HasFCAD;                          optLen += 16;                      }                        if (this.SCAD != null)                      {                          flags |= OptHeaderFlags.HasSCAD;                          optLen += 16;                      }                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 1;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->StartedOnUnix = this.StartTime.ToUnixTime();                      header->StartedOnTicks = this.StartTicks;                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = (uint)flags;                          index += 4;                            if ((flags & OptHeaderFlags.HasSnifferDescString) != 0)                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if ((flags & OptHeaderFlags.HasFCAD) != 0)                          {                              Buffer.BlockCopy(this.FCAD' 0' bytes' index' 16);                              index += 16;                          }                            if ((flags & OptHeaderFlags.HasSCAD) != 0)                          {                              Buffer.BlockCopy(this.SCAD' 0' bytes' index' 16);                              index += 16;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  var flags = OptHeaderFlags.None;                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 4;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          flags |= OptHeaderFlags.HasSnifferDescString;                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.FCAD != null)                      {                          flags |= OptHeaderFlags.HasFCAD;                          optLen += 16;                      }                        if (this.SCAD != null)                      {                          flags |= OptHeaderFlags.HasSCAD;                          optLen += 16;                      }                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 1;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->StartedOnUnix = this.StartTime.ToUnixTime();                      header->StartedOnTicks = this.StartTicks;                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = (uint)flags;                          index += 4;                            if ((flags & OptHeaderFlags.HasSnifferDescString) != 0)                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if ((flags & OptHeaderFlags.HasFCAD) != 0)                          {                              Buffer.BlockCopy(this.FCAD' 0' bytes' index' 16);                              index += 16;                          }                            if ((flags & OptHeaderFlags.HasSCAD) != 0)                          {                              Buffer.BlockCopy(this.SCAD' 0' bytes' index' 16);                              index += 16;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  var flags = OptHeaderFlags.None;                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 4;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          flags |= OptHeaderFlags.HasSnifferDescString;                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.FCAD != null)                      {                          flags |= OptHeaderFlags.HasFCAD;                          optLen += 16;                      }                        if (this.SCAD != null)                      {                          flags |= OptHeaderFlags.HasSCAD;                          optLen += 16;                      }                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 1;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->StartedOnUnix = this.StartTime.ToUnixTime();                      header->StartedOnTicks = this.StartTicks;                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = (uint)flags;                          index += 4;                            if ((flags & OptHeaderFlags.HasSnifferDescString) != 0)                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if ((flags & OptHeaderFlags.HasFCAD) != 0)                          {                              Buffer.BlockCopy(this.FCAD' 0' bytes' index' 16);                              index += 16;                          }                            if ((flags & OptHeaderFlags.HasSCAD) != 0)                          {                              Buffer.BlockCopy(this.SCAD' 0' bytes' index' 16);                              index += 16;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  var flags = OptHeaderFlags.None;                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 4;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          flags |= OptHeaderFlags.HasSnifferDescString;                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.FCAD != null)                      {                          flags |= OptHeaderFlags.HasFCAD;                          optLen += 16;                      }                        if (this.SCAD != null)                      {                          flags |= OptHeaderFlags.HasSCAD;                          optLen += 16;                      }                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 1;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->StartedOnUnix = this.StartTime.ToUnixTime();                      header->StartedOnTicks = this.StartTicks;                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = (uint)flags;                          index += 4;                            if ((flags & OptHeaderFlags.HasSnifferDescString) != 0)                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if ((flags & OptHeaderFlags.HasFCAD) != 0)                          {                              Buffer.BlockCopy(this.FCAD' 0' bytes' index' 16);                              index += 16;                          }                            if ((flags & OptHeaderFlags.HasSCAD) != 0)                          {                              Buffer.BlockCopy(this.SCAD' 0' bytes' index' 16);                              index += 16;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  var flags = OptHeaderFlags.None;                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 4;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          flags |= OptHeaderFlags.HasSnifferDescString;                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.FCAD != null)                      {                          flags |= OptHeaderFlags.HasFCAD;                          optLen += 16;                      }                        if (this.SCAD != null)                      {                          flags |= OptHeaderFlags.HasSCAD;                          optLen += 16;                      }                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 1;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->StartedOnUnix = this.StartTime.ToUnixTime();                      header->StartedOnTicks = this.StartTicks;                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = (uint)flags;                          index += 4;                            if ((flags & OptHeaderFlags.HasSnifferDescString) != 0)                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if ((flags & OptHeaderFlags.HasFCAD) != 0)                          {                              Buffer.BlockCopy(this.FCAD' 0' bytes' index' 16);                              index += 16;                          }                            if ((flags & OptHeaderFlags.HasSCAD) != 0)                          {                              Buffer.BlockCopy(this.SCAD' 0' bytes' index' 16);                              index += 16;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt(m_streamOriginalPosition' () =>              {                  var flags = OptHeaderFlags.None;                  int optLen = 0;                  byte[] descStr = null;                    if (this.SnifferId == PktSnifferId.Kamilla)                  {                      optLen += 4;                        if (!string.IsNullOrEmpty(this.SnifferDesc))                      {                          flags |= OptHeaderFlags.HasSnifferDescString;                          descStr = Encoding.ASCII.GetBytes(this.SnifferDesc);                          optLen += descStr.Length + 1;                      }                        if (this.FCAD != null)                      {                          flags |= OptHeaderFlags.HasFCAD;                          optLen += 16;                      }                        if (this.SCAD != null)                      {                          flags |= OptHeaderFlags.HasSCAD;                          optLen += 16;                      }                  }                    var bytes = new byte[MainHeader.Size + optLen];                    fixed (byte* bytesPtr = bytes)                  {                      var header = (MainHeader*)bytesPtr;                      var langBytes = this.LangBytes;                        header->Signature[0] = (byte)'P';                      header->Signature[1] = (byte)'K';                      header->Signature[2] = (byte)'T';                      header->MinorVersion = 1;                      header->MajorVersion = 3;                      header->SnifferId = (byte)this.SnifferId;                      header->ClientBuild = (uint)this.ClientVersion.Revision;                      header->Lang[0] = langBytes[0];                      header->Lang[1] = langBytes[1];                      header->Lang[2] = langBytes[2];                      header->Lang[3] = langBytes[3];                      Marshal.Copy(this.SessionKey' 0' new IntPtr(header->SessionKey)' 40);                      header->StartedOnUnix = this.StartTime.ToUnixTime();                      header->StartedOnTicks = this.StartTicks;                      header->OptionalHeaderLength = optLen;                        if (this.SnifferId == PktSnifferId.Kamilla)                      {                          int index = MainHeader.Size;                          *(uint*)(bytesPtr + index) = (uint)flags;                          index += 4;                            if ((flags & OptHeaderFlags.HasSnifferDescString) != 0)                          {                              Buffer.BlockCopy(descStr' 0' bytes' index' descStr.Length);                              index += descStr.Length;                              bytes[index] = 0;                              ++index;                          }                            if ((flags & OptHeaderFlags.HasFCAD) != 0)                          {                              Buffer.BlockCopy(this.FCAD' 0' bytes' index' 16);                              index += 16;                          }                            if ((flags & OptHeaderFlags.HasSCAD) != 0)                          {                              Buffer.BlockCopy(this.SCAD' 0' bytes' index' 16);                              index += 16;                          }                      }                  }                    m_stream.WriteBytes(bytes);              });
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWritePacket2,The following statement contains a magic number: header->m_header.DataLength = data.Length + 4;
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: s_clientBuildInfos = new List<ClientBuildInfo>(50);
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(3' 3' 5)' new uint[] {                  11993' // World of Warcraft patch 3.3.5 PTR                  12213' // World of Warcraft patch 3.3.5 "Defending the Ruby Sanctum"                  12340' // World of Warcraft patch 3.3.5a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(3' 3' 5)' new uint[] {                  11993' // World of Warcraft patch 3.3.5 PTR                  12213' // World of Warcraft patch 3.3.5 "Defending the Ruby Sanctum"                  12340' // World of Warcraft patch 3.3.5a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(3' 3' 5)' new uint[] {                  11993' // World of Warcraft patch 3.3.5 PTR                  12213' // World of Warcraft patch 3.3.5 "Defending the Ruby Sanctum"                  12340' // World of Warcraft patch 3.3.5a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(3' 3' 5)' new uint[] {                  11993' // World of Warcraft patch 3.3.5 PTR                  12213' // World of Warcraft patch 3.3.5 "Defending the Ruby Sanctum"                  12340' // World of Warcraft patch 3.3.5a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(3' 3' 5)' new uint[] {                  11993' // World of Warcraft patch 3.3.5 PTR                  12213' // World of Warcraft patch 3.3.5 "Defending the Ruby Sanctum"                  12340' // World of Warcraft patch 3.3.5a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(3' 3' 5)' new uint[] {                  11993' // World of Warcraft patch 3.3.5 PTR                  12213' // World of Warcraft patch 3.3.5 "Defending the Ruby Sanctum"                  12340' // World of Warcraft patch 3.3.5a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add(new Version(4' 0' 0' 11792)' 13329);
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add(new Version(4' 0' 0' 11792)' 13329);
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add(new Version(4' 0' 0' 11792)' 13329);
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add(new Version(4' 0' 1' 13131)' 13329);
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add(new Version(4' 0' 1' 13131)' 13329);
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add(new Version(4' 0' 1' 13131)' 13329);
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add(new Version(4' 0' 1' 13164)' 13329);
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add(new Version(4' 0' 1' 13164)' 13329);
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add(new Version(4' 0' 1' 13164)' 13329);
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add(new Version(4' 0' 1' 13205)' 13329);
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add(new Version(4' 0' 1' 13205)' 13329);
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add(new Version(4' 0' 1' 13205)' 13329);
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add(new Version(4' 0' 3' 13287)' 13329);
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add(new Version(4' 0' 3' 13287)' 13329);
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add(new Version(4' 0' 3' 13287)' 13329);
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add(new Version(4' 0' 3' 13287)' 13329);
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add(new Version(4' 0' 3' 13329)' 13329);
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add(new Version(4' 0' 3' 13329)' 13329);
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add(new Version(4' 0' 3' 13329)' 13329);
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add(new Version(4' 0' 3' 13329)' 13329);
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 0' 6)' new uint[] {                  13561' // World of Warcraft patch 4.0.6 PTR                  13596' // World of Warcraft patch 4.0.6                  13623' // World of Warcraft patch 4.0.6a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 0' 6)' new uint[] {                  13561' // World of Warcraft patch 4.0.6 PTR                  13596' // World of Warcraft patch 4.0.6                  13623' // World of Warcraft patch 4.0.6a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 0' 6)' new uint[] {                  13561' // World of Warcraft patch 4.0.6 PTR                  13596' // World of Warcraft patch 4.0.6                  13623' // World of Warcraft patch 4.0.6a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 0' 6)' new uint[] {                  13561' // World of Warcraft patch 4.0.6 PTR                  13596' // World of Warcraft patch 4.0.6                  13623' // World of Warcraft patch 4.0.6a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 0' 6)' new uint[] {                  13561' // World of Warcraft patch 4.0.6 PTR                  13596' // World of Warcraft patch 4.0.6                  13623' // World of Warcraft patch 4.0.6a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 1' 0)' new uint[] {                  13682' // World of Warcraft patch 4.1.0 PTR                  13707' // World of Warcraft patch 4.1.0 PTR                  13726' // World of Warcraft patch 4.1.0 PTR                  13750' // World of Warcraft patch 4.1.0 PTR                  13793' // World of Warcraft patch 4.1.0 PTR                  13812' // World of Warcraft patch 4.1.0 PTR                  13850' // World of Warcraft patch 4.1.0 PTR                  13860' // World of Warcraft patch 4.1.0 PTR                  13875' // World of Warcraft patch 4.1.0 PTR                  13914' // World of Warcraft patch 4.1.0 "Rise of the Zandalari"                  14007' // World of Warcraft patch 4.1.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 1' 0)' new uint[] {                  13682' // World of Warcraft patch 4.1.0 PTR                  13707' // World of Warcraft patch 4.1.0 PTR                  13726' // World of Warcraft patch 4.1.0 PTR                  13750' // World of Warcraft patch 4.1.0 PTR                  13793' // World of Warcraft patch 4.1.0 PTR                  13812' // World of Warcraft patch 4.1.0 PTR                  13850' // World of Warcraft patch 4.1.0 PTR                  13860' // World of Warcraft patch 4.1.0 PTR                  13875' // World of Warcraft patch 4.1.0 PTR                  13914' // World of Warcraft patch 4.1.0 "Rise of the Zandalari"                  14007' // World of Warcraft patch 4.1.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 1' 0)' new uint[] {                  13682' // World of Warcraft patch 4.1.0 PTR                  13707' // World of Warcraft patch 4.1.0 PTR                  13726' // World of Warcraft patch 4.1.0 PTR                  13750' // World of Warcraft patch 4.1.0 PTR                  13793' // World of Warcraft patch 4.1.0 PTR                  13812' // World of Warcraft patch 4.1.0 PTR                  13850' // World of Warcraft patch 4.1.0 PTR                  13860' // World of Warcraft patch 4.1.0 PTR                  13875' // World of Warcraft patch 4.1.0 PTR                  13914' // World of Warcraft patch 4.1.0 "Rise of the Zandalari"                  14007' // World of Warcraft patch 4.1.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 1' 0)' new uint[] {                  13682' // World of Warcraft patch 4.1.0 PTR                  13707' // World of Warcraft patch 4.1.0 PTR                  13726' // World of Warcraft patch 4.1.0 PTR                  13750' // World of Warcraft patch 4.1.0 PTR                  13793' // World of Warcraft patch 4.1.0 PTR                  13812' // World of Warcraft patch 4.1.0 PTR                  13850' // World of Warcraft patch 4.1.0 PTR                  13860' // World of Warcraft patch 4.1.0 PTR                  13875' // World of Warcraft patch 4.1.0 PTR                  13914' // World of Warcraft patch 4.1.0 "Rise of the Zandalari"                  14007' // World of Warcraft patch 4.1.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 1' 0)' new uint[] {                  13682' // World of Warcraft patch 4.1.0 PTR                  13707' // World of Warcraft patch 4.1.0 PTR                  13726' // World of Warcraft patch 4.1.0 PTR                  13750' // World of Warcraft patch 4.1.0 PTR                  13793' // World of Warcraft patch 4.1.0 PTR                  13812' // World of Warcraft patch 4.1.0 PTR                  13850' // World of Warcraft patch 4.1.0 PTR                  13860' // World of Warcraft patch 4.1.0 PTR                  13875' // World of Warcraft patch 4.1.0 PTR                  13914' // World of Warcraft patch 4.1.0 "Rise of the Zandalari"                  14007' // World of Warcraft patch 4.1.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 1' 0)' new uint[] {                  13682' // World of Warcraft patch 4.1.0 PTR                  13707' // World of Warcraft patch 4.1.0 PTR                  13726' // World of Warcraft patch 4.1.0 PTR                  13750' // World of Warcraft patch 4.1.0 PTR                  13793' // World of Warcraft patch 4.1.0 PTR                  13812' // World of Warcraft patch 4.1.0 PTR                  13850' // World of Warcraft patch 4.1.0 PTR                  13860' // World of Warcraft patch 4.1.0 PTR                  13875' // World of Warcraft patch 4.1.0 PTR                  13914' // World of Warcraft patch 4.1.0 "Rise of the Zandalari"                  14007' // World of Warcraft patch 4.1.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 1' 0)' new uint[] {                  13682' // World of Warcraft patch 4.1.0 PTR                  13707' // World of Warcraft patch 4.1.0 PTR                  13726' // World of Warcraft patch 4.1.0 PTR                  13750' // World of Warcraft patch 4.1.0 PTR                  13793' // World of Warcraft patch 4.1.0 PTR                  13812' // World of Warcraft patch 4.1.0 PTR                  13850' // World of Warcraft patch 4.1.0 PTR                  13860' // World of Warcraft patch 4.1.0 PTR                  13875' // World of Warcraft patch 4.1.0 PTR                  13914' // World of Warcraft patch 4.1.0 "Rise of the Zandalari"                  14007' // World of Warcraft patch 4.1.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 1' 0)' new uint[] {                  13682' // World of Warcraft patch 4.1.0 PTR                  13707' // World of Warcraft patch 4.1.0 PTR                  13726' // World of Warcraft patch 4.1.0 PTR                  13750' // World of Warcraft patch 4.1.0 PTR                  13793' // World of Warcraft patch 4.1.0 PTR                  13812' // World of Warcraft patch 4.1.0 PTR                  13850' // World of Warcraft patch 4.1.0 PTR                  13860' // World of Warcraft patch 4.1.0 PTR                  13875' // World of Warcraft patch 4.1.0 PTR                  13914' // World of Warcraft patch 4.1.0 "Rise of the Zandalari"                  14007' // World of Warcraft patch 4.1.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 1' 0)' new uint[] {                  13682' // World of Warcraft patch 4.1.0 PTR                  13707' // World of Warcraft patch 4.1.0 PTR                  13726' // World of Warcraft patch 4.1.0 PTR                  13750' // World of Warcraft patch 4.1.0 PTR                  13793' // World of Warcraft patch 4.1.0 PTR                  13812' // World of Warcraft patch 4.1.0 PTR                  13850' // World of Warcraft patch 4.1.0 PTR                  13860' // World of Warcraft patch 4.1.0 PTR                  13875' // World of Warcraft patch 4.1.0 PTR                  13914' // World of Warcraft patch 4.1.0 "Rise of the Zandalari"                  14007' // World of Warcraft patch 4.1.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 1' 0)' new uint[] {                  13682' // World of Warcraft patch 4.1.0 PTR                  13707' // World of Warcraft patch 4.1.0 PTR                  13726' // World of Warcraft patch 4.1.0 PTR                  13750' // World of Warcraft patch 4.1.0 PTR                  13793' // World of Warcraft patch 4.1.0 PTR                  13812' // World of Warcraft patch 4.1.0 PTR                  13850' // World of Warcraft patch 4.1.0 PTR                  13860' // World of Warcraft patch 4.1.0 PTR                  13875' // World of Warcraft patch 4.1.0 PTR                  13914' // World of Warcraft patch 4.1.0 "Rise of the Zandalari"                  14007' // World of Warcraft patch 4.1.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 1' 0)' new uint[] {                  13682' // World of Warcraft patch 4.1.0 PTR                  13707' // World of Warcraft patch 4.1.0 PTR                  13726' // World of Warcraft patch 4.1.0 PTR                  13750' // World of Warcraft patch 4.1.0 PTR                  13793' // World of Warcraft patch 4.1.0 PTR                  13812' // World of Warcraft patch 4.1.0 PTR                  13850' // World of Warcraft patch 4.1.0 PTR                  13860' // World of Warcraft patch 4.1.0 PTR                  13875' // World of Warcraft patch 4.1.0 PTR                  13914' // World of Warcraft patch 4.1.0 "Rise of the Zandalari"                  14007' // World of Warcraft patch 4.1.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 1' 0)' new uint[] {                  13682' // World of Warcraft patch 4.1.0 PTR                  13707' // World of Warcraft patch 4.1.0 PTR                  13726' // World of Warcraft patch 4.1.0 PTR                  13750' // World of Warcraft patch 4.1.0 PTR                  13793' // World of Warcraft patch 4.1.0 PTR                  13812' // World of Warcraft patch 4.1.0 PTR                  13850' // World of Warcraft patch 4.1.0 PTR                  13860' // World of Warcraft patch 4.1.0 PTR                  13875' // World of Warcraft patch 4.1.0 PTR                  13914' // World of Warcraft patch 4.1.0 "Rise of the Zandalari"                  14007' // World of Warcraft patch 4.1.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 2' 0)' new uint[] {                  14002' // World of Warcraft patch 4.2.0 PTR                  14040' // World of Warcraft patch 4.2.0 PTR                  14107' // World of Warcraft patch 4.2.0 PTR                  14133' // World of Warcraft patch 4.2.0 PTR                  14199' // World of Warcraft patch 4.2.0 PTR                  14241' // World of Warcraft patch 4.2.0 PTR                  14265' // World of Warcraft patch 4.2.0 PTR                  14288' // World of Warcraft patch 4.2.0 PTR                  14299' // World of Warcraft patch 4.2.0 PTR                  14313' // World of Warcraft patch 4.2.0 PTR                  14316' // World of Warcraft patch 4.2.0 PTR                  14333' // World of Warcraft patch 4.2.0 "Rage of the Firelands"                  14480' // World of Warcraft patch 4.2.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 2' 0)' new uint[] {                  14002' // World of Warcraft patch 4.2.0 PTR                  14040' // World of Warcraft patch 4.2.0 PTR                  14107' // World of Warcraft patch 4.2.0 PTR                  14133' // World of Warcraft patch 4.2.0 PTR                  14199' // World of Warcraft patch 4.2.0 PTR                  14241' // World of Warcraft patch 4.2.0 PTR                  14265' // World of Warcraft patch 4.2.0 PTR                  14288' // World of Warcraft patch 4.2.0 PTR                  14299' // World of Warcraft patch 4.2.0 PTR                  14313' // World of Warcraft patch 4.2.0 PTR                  14316' // World of Warcraft patch 4.2.0 PTR                  14333' // World of Warcraft patch 4.2.0 "Rage of the Firelands"                  14480' // World of Warcraft patch 4.2.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 2' 0)' new uint[] {                  14002' // World of Warcraft patch 4.2.0 PTR                  14040' // World of Warcraft patch 4.2.0 PTR                  14107' // World of Warcraft patch 4.2.0 PTR                  14133' // World of Warcraft patch 4.2.0 PTR                  14199' // World of Warcraft patch 4.2.0 PTR                  14241' // World of Warcraft patch 4.2.0 PTR                  14265' // World of Warcraft patch 4.2.0 PTR                  14288' // World of Warcraft patch 4.2.0 PTR                  14299' // World of Warcraft patch 4.2.0 PTR                  14313' // World of Warcraft patch 4.2.0 PTR                  14316' // World of Warcraft patch 4.2.0 PTR                  14333' // World of Warcraft patch 4.2.0 "Rage of the Firelands"                  14480' // World of Warcraft patch 4.2.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 2' 0)' new uint[] {                  14002' // World of Warcraft patch 4.2.0 PTR                  14040' // World of Warcraft patch 4.2.0 PTR                  14107' // World of Warcraft patch 4.2.0 PTR                  14133' // World of Warcraft patch 4.2.0 PTR                  14199' // World of Warcraft patch 4.2.0 PTR                  14241' // World of Warcraft patch 4.2.0 PTR                  14265' // World of Warcraft patch 4.2.0 PTR                  14288' // World of Warcraft patch 4.2.0 PTR                  14299' // World of Warcraft patch 4.2.0 PTR                  14313' // World of Warcraft patch 4.2.0 PTR                  14316' // World of Warcraft patch 4.2.0 PTR                  14333' // World of Warcraft patch 4.2.0 "Rage of the Firelands"                  14480' // World of Warcraft patch 4.2.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 2' 0)' new uint[] {                  14002' // World of Warcraft patch 4.2.0 PTR                  14040' // World of Warcraft patch 4.2.0 PTR                  14107' // World of Warcraft patch 4.2.0 PTR                  14133' // World of Warcraft patch 4.2.0 PTR                  14199' // World of Warcraft patch 4.2.0 PTR                  14241' // World of Warcraft patch 4.2.0 PTR                  14265' // World of Warcraft patch 4.2.0 PTR                  14288' // World of Warcraft patch 4.2.0 PTR                  14299' // World of Warcraft patch 4.2.0 PTR                  14313' // World of Warcraft patch 4.2.0 PTR                  14316' // World of Warcraft patch 4.2.0 PTR                  14333' // World of Warcraft patch 4.2.0 "Rage of the Firelands"                  14480' // World of Warcraft patch 4.2.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 2' 0)' new uint[] {                  14002' // World of Warcraft patch 4.2.0 PTR                  14040' // World of Warcraft patch 4.2.0 PTR                  14107' // World of Warcraft patch 4.2.0 PTR                  14133' // World of Warcraft patch 4.2.0 PTR                  14199' // World of Warcraft patch 4.2.0 PTR                  14241' // World of Warcraft patch 4.2.0 PTR                  14265' // World of Warcraft patch 4.2.0 PTR                  14288' // World of Warcraft patch 4.2.0 PTR                  14299' // World of Warcraft patch 4.2.0 PTR                  14313' // World of Warcraft patch 4.2.0 PTR                  14316' // World of Warcraft patch 4.2.0 PTR                  14333' // World of Warcraft patch 4.2.0 "Rage of the Firelands"                  14480' // World of Warcraft patch 4.2.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 2' 0)' new uint[] {                  14002' // World of Warcraft patch 4.2.0 PTR                  14040' // World of Warcraft patch 4.2.0 PTR                  14107' // World of Warcraft patch 4.2.0 PTR                  14133' // World of Warcraft patch 4.2.0 PTR                  14199' // World of Warcraft patch 4.2.0 PTR                  14241' // World of Warcraft patch 4.2.0 PTR                  14265' // World of Warcraft patch 4.2.0 PTR                  14288' // World of Warcraft patch 4.2.0 PTR                  14299' // World of Warcraft patch 4.2.0 PTR                  14313' // World of Warcraft patch 4.2.0 PTR                  14316' // World of Warcraft patch 4.2.0 PTR                  14333' // World of Warcraft patch 4.2.0 "Rage of the Firelands"                  14480' // World of Warcraft patch 4.2.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 2' 0)' new uint[] {                  14002' // World of Warcraft patch 4.2.0 PTR                  14040' // World of Warcraft patch 4.2.0 PTR                  14107' // World of Warcraft patch 4.2.0 PTR                  14133' // World of Warcraft patch 4.2.0 PTR                  14199' // World of Warcraft patch 4.2.0 PTR                  14241' // World of Warcraft patch 4.2.0 PTR                  14265' // World of Warcraft patch 4.2.0 PTR                  14288' // World of Warcraft patch 4.2.0 PTR                  14299' // World of Warcraft patch 4.2.0 PTR                  14313' // World of Warcraft patch 4.2.0 PTR                  14316' // World of Warcraft patch 4.2.0 PTR                  14333' // World of Warcraft patch 4.2.0 "Rage of the Firelands"                  14480' // World of Warcraft patch 4.2.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 2' 0)' new uint[] {                  14002' // World of Warcraft patch 4.2.0 PTR                  14040' // World of Warcraft patch 4.2.0 PTR                  14107' // World of Warcraft patch 4.2.0 PTR                  14133' // World of Warcraft patch 4.2.0 PTR                  14199' // World of Warcraft patch 4.2.0 PTR                  14241' // World of Warcraft patch 4.2.0 PTR                  14265' // World of Warcraft patch 4.2.0 PTR                  14288' // World of Warcraft patch 4.2.0 PTR                  14299' // World of Warcraft patch 4.2.0 PTR                  14313' // World of Warcraft patch 4.2.0 PTR                  14316' // World of Warcraft patch 4.2.0 PTR                  14333' // World of Warcraft patch 4.2.0 "Rage of the Firelands"                  14480' // World of Warcraft patch 4.2.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 2' 0)' new uint[] {                  14002' // World of Warcraft patch 4.2.0 PTR                  14040' // World of Warcraft patch 4.2.0 PTR                  14107' // World of Warcraft patch 4.2.0 PTR                  14133' // World of Warcraft patch 4.2.0 PTR                  14199' // World of Warcraft patch 4.2.0 PTR                  14241' // World of Warcraft patch 4.2.0 PTR                  14265' // World of Warcraft patch 4.2.0 PTR                  14288' // World of Warcraft patch 4.2.0 PTR                  14299' // World of Warcraft patch 4.2.0 PTR                  14313' // World of Warcraft patch 4.2.0 PTR                  14316' // World of Warcraft patch 4.2.0 PTR                  14333' // World of Warcraft patch 4.2.0 "Rage of the Firelands"                  14480' // World of Warcraft patch 4.2.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 2' 0)' new uint[] {                  14002' // World of Warcraft patch 4.2.0 PTR                  14040' // World of Warcraft patch 4.2.0 PTR                  14107' // World of Warcraft patch 4.2.0 PTR                  14133' // World of Warcraft patch 4.2.0 PTR                  14199' // World of Warcraft patch 4.2.0 PTR                  14241' // World of Warcraft patch 4.2.0 PTR                  14265' // World of Warcraft patch 4.2.0 PTR                  14288' // World of Warcraft patch 4.2.0 PTR                  14299' // World of Warcraft patch 4.2.0 PTR                  14313' // World of Warcraft patch 4.2.0 PTR                  14316' // World of Warcraft patch 4.2.0 PTR                  14333' // World of Warcraft patch 4.2.0 "Rage of the Firelands"                  14480' // World of Warcraft patch 4.2.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 2' 0)' new uint[] {                  14002' // World of Warcraft patch 4.2.0 PTR                  14040' // World of Warcraft patch 4.2.0 PTR                  14107' // World of Warcraft patch 4.2.0 PTR                  14133' // World of Warcraft patch 4.2.0 PTR                  14199' // World of Warcraft patch 4.2.0 PTR                  14241' // World of Warcraft patch 4.2.0 PTR                  14265' // World of Warcraft patch 4.2.0 PTR                  14288' // World of Warcraft patch 4.2.0 PTR                  14299' // World of Warcraft patch 4.2.0 PTR                  14313' // World of Warcraft patch 4.2.0 PTR                  14316' // World of Warcraft patch 4.2.0 PTR                  14333' // World of Warcraft patch 4.2.0 "Rage of the Firelands"                  14480' // World of Warcraft patch 4.2.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 2' 0)' new uint[] {                  14002' // World of Warcraft patch 4.2.0 PTR                  14040' // World of Warcraft patch 4.2.0 PTR                  14107' // World of Warcraft patch 4.2.0 PTR                  14133' // World of Warcraft patch 4.2.0 PTR                  14199' // World of Warcraft patch 4.2.0 PTR                  14241' // World of Warcraft patch 4.2.0 PTR                  14265' // World of Warcraft patch 4.2.0 PTR                  14288' // World of Warcraft patch 4.2.0 PTR                  14299' // World of Warcraft patch 4.2.0 PTR                  14313' // World of Warcraft patch 4.2.0 PTR                  14316' // World of Warcraft patch 4.2.0 PTR                  14333' // World of Warcraft patch 4.2.0 "Rage of the Firelands"                  14480' // World of Warcraft patch 4.2.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 2' 0)' new uint[] {                  14002' // World of Warcraft patch 4.2.0 PTR                  14040' // World of Warcraft patch 4.2.0 PTR                  14107' // World of Warcraft patch 4.2.0 PTR                  14133' // World of Warcraft patch 4.2.0 PTR                  14199' // World of Warcraft patch 4.2.0 PTR                  14241' // World of Warcraft patch 4.2.0 PTR                  14265' // World of Warcraft patch 4.2.0 PTR                  14288' // World of Warcraft patch 4.2.0 PTR                  14299' // World of Warcraft patch 4.2.0 PTR                  14313' // World of Warcraft patch 4.2.0 PTR                  14316' // World of Warcraft patch 4.2.0 PTR                  14333' // World of Warcraft patch 4.2.0 "Rage of the Firelands"                  14480' // World of Warcraft patch 4.2.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 2' 0)' new uint[] {                  14002' // World of Warcraft patch 4.2.0 PTR                  14040' // World of Warcraft patch 4.2.0 PTR                  14107' // World of Warcraft patch 4.2.0 PTR                  14133' // World of Warcraft patch 4.2.0 PTR                  14199' // World of Warcraft patch 4.2.0 PTR                  14241' // World of Warcraft patch 4.2.0 PTR                  14265' // World of Warcraft patch 4.2.0 PTR                  14288' // World of Warcraft patch 4.2.0 PTR                  14299' // World of Warcraft patch 4.2.0 PTR                  14313' // World of Warcraft patch 4.2.0 PTR                  14316' // World of Warcraft patch 4.2.0 PTR                  14333' // World of Warcraft patch 4.2.0 "Rage of the Firelands"                  14480' // World of Warcraft patch 4.2.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 2' 2)' new uint[] {                  14522' // World of Warcraft patch 4.2.2 PTR                  14534' // World of Warcraft patch 4.2.2 PTR                  14545' // World of Warcraft patch 4.2.2              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 2' 2)' new uint[] {                  14522' // World of Warcraft patch 4.2.2 PTR                  14534' // World of Warcraft patch 4.2.2 PTR                  14545' // World of Warcraft patch 4.2.2              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 2' 2)' new uint[] {                  14522' // World of Warcraft patch 4.2.2 PTR                  14534' // World of Warcraft patch 4.2.2 PTR                  14545' // World of Warcraft patch 4.2.2              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 2' 2)' new uint[] {                  14522' // World of Warcraft patch 4.2.2 PTR                  14534' // World of Warcraft patch 4.2.2 PTR                  14545' // World of Warcraft patch 4.2.2              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 2' 2)' new uint[] {                  14522' // World of Warcraft patch 4.2.2 PTR                  14534' // World of Warcraft patch 4.2.2 PTR                  14545' // World of Warcraft patch 4.2.2              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 2' 2)' new uint[] {                  14522' // World of Warcraft patch 4.2.2 PTR                  14534' // World of Warcraft patch 4.2.2 PTR                  14545' // World of Warcraft patch 4.2.2              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 0)' new uint[] {                  14732' // World of Warcraft patch 4.3.0 PTR                  14791' // World of Warcraft patch 4.3.0 PTR                  14809' // World of Warcraft patch 4.3.0 PTR                  14849' // World of Warcraft patch 4.3.0 PTR                  14890' // World of Warcraft patch 4.3.0 PTR                  14899' // World of Warcraft patch 4.3.0 PTR                  14911' // World of Warcraft patch 4.3.0 PTR                  14942' // World of Warcraft patch 4.3.0 PTR                  14966' // World of Warcraft patch 4.3.0 PTR                  14976' // World of Warcraft patch 4.3.0 PTR                  14980' // World of Warcraft patch 4.3.0 PTR                  14995' // World of Warcraft patch 4.3.0 PTR                  15005' // World of Warcraft patch 4.3.0                  15050' // World of Warcraft patch 4.3.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 0)' new uint[] {                  14732' // World of Warcraft patch 4.3.0 PTR                  14791' // World of Warcraft patch 4.3.0 PTR                  14809' // World of Warcraft patch 4.3.0 PTR                  14849' // World of Warcraft patch 4.3.0 PTR                  14890' // World of Warcraft patch 4.3.0 PTR                  14899' // World of Warcraft patch 4.3.0 PTR                  14911' // World of Warcraft patch 4.3.0 PTR                  14942' // World of Warcraft patch 4.3.0 PTR                  14966' // World of Warcraft patch 4.3.0 PTR                  14976' // World of Warcraft patch 4.3.0 PTR                  14980' // World of Warcraft patch 4.3.0 PTR                  14995' // World of Warcraft patch 4.3.0 PTR                  15005' // World of Warcraft patch 4.3.0                  15050' // World of Warcraft patch 4.3.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 0)' new uint[] {                  14732' // World of Warcraft patch 4.3.0 PTR                  14791' // World of Warcraft patch 4.3.0 PTR                  14809' // World of Warcraft patch 4.3.0 PTR                  14849' // World of Warcraft patch 4.3.0 PTR                  14890' // World of Warcraft patch 4.3.0 PTR                  14899' // World of Warcraft patch 4.3.0 PTR                  14911' // World of Warcraft patch 4.3.0 PTR                  14942' // World of Warcraft patch 4.3.0 PTR                  14966' // World of Warcraft patch 4.3.0 PTR                  14976' // World of Warcraft patch 4.3.0 PTR                  14980' // World of Warcraft patch 4.3.0 PTR                  14995' // World of Warcraft patch 4.3.0 PTR                  15005' // World of Warcraft patch 4.3.0                  15050' // World of Warcraft patch 4.3.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 0)' new uint[] {                  14732' // World of Warcraft patch 4.3.0 PTR                  14791' // World of Warcraft patch 4.3.0 PTR                  14809' // World of Warcraft patch 4.3.0 PTR                  14849' // World of Warcraft patch 4.3.0 PTR                  14890' // World of Warcraft patch 4.3.0 PTR                  14899' // World of Warcraft patch 4.3.0 PTR                  14911' // World of Warcraft patch 4.3.0 PTR                  14942' // World of Warcraft patch 4.3.0 PTR                  14966' // World of Warcraft patch 4.3.0 PTR                  14976' // World of Warcraft patch 4.3.0 PTR                  14980' // World of Warcraft patch 4.3.0 PTR                  14995' // World of Warcraft patch 4.3.0 PTR                  15005' // World of Warcraft patch 4.3.0                  15050' // World of Warcraft patch 4.3.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 0)' new uint[] {                  14732' // World of Warcraft patch 4.3.0 PTR                  14791' // World of Warcraft patch 4.3.0 PTR                  14809' // World of Warcraft patch 4.3.0 PTR                  14849' // World of Warcraft patch 4.3.0 PTR                  14890' // World of Warcraft patch 4.3.0 PTR                  14899' // World of Warcraft patch 4.3.0 PTR                  14911' // World of Warcraft patch 4.3.0 PTR                  14942' // World of Warcraft patch 4.3.0 PTR                  14966' // World of Warcraft patch 4.3.0 PTR                  14976' // World of Warcraft patch 4.3.0 PTR                  14980' // World of Warcraft patch 4.3.0 PTR                  14995' // World of Warcraft patch 4.3.0 PTR                  15005' // World of Warcraft patch 4.3.0                  15050' // World of Warcraft patch 4.3.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 0)' new uint[] {                  14732' // World of Warcraft patch 4.3.0 PTR                  14791' // World of Warcraft patch 4.3.0 PTR                  14809' // World of Warcraft patch 4.3.0 PTR                  14849' // World of Warcraft patch 4.3.0 PTR                  14890' // World of Warcraft patch 4.3.0 PTR                  14899' // World of Warcraft patch 4.3.0 PTR                  14911' // World of Warcraft patch 4.3.0 PTR                  14942' // World of Warcraft patch 4.3.0 PTR                  14966' // World of Warcraft patch 4.3.0 PTR                  14976' // World of Warcraft patch 4.3.0 PTR                  14980' // World of Warcraft patch 4.3.0 PTR                  14995' // World of Warcraft patch 4.3.0 PTR                  15005' // World of Warcraft patch 4.3.0                  15050' // World of Warcraft patch 4.3.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 0)' new uint[] {                  14732' // World of Warcraft patch 4.3.0 PTR                  14791' // World of Warcraft patch 4.3.0 PTR                  14809' // World of Warcraft patch 4.3.0 PTR                  14849' // World of Warcraft patch 4.3.0 PTR                  14890' // World of Warcraft patch 4.3.0 PTR                  14899' // World of Warcraft patch 4.3.0 PTR                  14911' // World of Warcraft patch 4.3.0 PTR                  14942' // World of Warcraft patch 4.3.0 PTR                  14966' // World of Warcraft patch 4.3.0 PTR                  14976' // World of Warcraft patch 4.3.0 PTR                  14980' // World of Warcraft patch 4.3.0 PTR                  14995' // World of Warcraft patch 4.3.0 PTR                  15005' // World of Warcraft patch 4.3.0                  15050' // World of Warcraft patch 4.3.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 0)' new uint[] {                  14732' // World of Warcraft patch 4.3.0 PTR                  14791' // World of Warcraft patch 4.3.0 PTR                  14809' // World of Warcraft patch 4.3.0 PTR                  14849' // World of Warcraft patch 4.3.0 PTR                  14890' // World of Warcraft patch 4.3.0 PTR                  14899' // World of Warcraft patch 4.3.0 PTR                  14911' // World of Warcraft patch 4.3.0 PTR                  14942' // World of Warcraft patch 4.3.0 PTR                  14966' // World of Warcraft patch 4.3.0 PTR                  14976' // World of Warcraft patch 4.3.0 PTR                  14980' // World of Warcraft patch 4.3.0 PTR                  14995' // World of Warcraft patch 4.3.0 PTR                  15005' // World of Warcraft patch 4.3.0                  15050' // World of Warcraft patch 4.3.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 0)' new uint[] {                  14732' // World of Warcraft patch 4.3.0 PTR                  14791' // World of Warcraft patch 4.3.0 PTR                  14809' // World of Warcraft patch 4.3.0 PTR                  14849' // World of Warcraft patch 4.3.0 PTR                  14890' // World of Warcraft patch 4.3.0 PTR                  14899' // World of Warcraft patch 4.3.0 PTR                  14911' // World of Warcraft patch 4.3.0 PTR                  14942' // World of Warcraft patch 4.3.0 PTR                  14966' // World of Warcraft patch 4.3.0 PTR                  14976' // World of Warcraft patch 4.3.0 PTR                  14980' // World of Warcraft patch 4.3.0 PTR                  14995' // World of Warcraft patch 4.3.0 PTR                  15005' // World of Warcraft patch 4.3.0                  15050' // World of Warcraft patch 4.3.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 0)' new uint[] {                  14732' // World of Warcraft patch 4.3.0 PTR                  14791' // World of Warcraft patch 4.3.0 PTR                  14809' // World of Warcraft patch 4.3.0 PTR                  14849' // World of Warcraft patch 4.3.0 PTR                  14890' // World of Warcraft patch 4.3.0 PTR                  14899' // World of Warcraft patch 4.3.0 PTR                  14911' // World of Warcraft patch 4.3.0 PTR                  14942' // World of Warcraft patch 4.3.0 PTR                  14966' // World of Warcraft patch 4.3.0 PTR                  14976' // World of Warcraft patch 4.3.0 PTR                  14980' // World of Warcraft patch 4.3.0 PTR                  14995' // World of Warcraft patch 4.3.0 PTR                  15005' // World of Warcraft patch 4.3.0                  15050' // World of Warcraft patch 4.3.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 0)' new uint[] {                  14732' // World of Warcraft patch 4.3.0 PTR                  14791' // World of Warcraft patch 4.3.0 PTR                  14809' // World of Warcraft patch 4.3.0 PTR                  14849' // World of Warcraft patch 4.3.0 PTR                  14890' // World of Warcraft patch 4.3.0 PTR                  14899' // World of Warcraft patch 4.3.0 PTR                  14911' // World of Warcraft patch 4.3.0 PTR                  14942' // World of Warcraft patch 4.3.0 PTR                  14966' // World of Warcraft patch 4.3.0 PTR                  14976' // World of Warcraft patch 4.3.0 PTR                  14980' // World of Warcraft patch 4.3.0 PTR                  14995' // World of Warcraft patch 4.3.0 PTR                  15005' // World of Warcraft patch 4.3.0                  15050' // World of Warcraft patch 4.3.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 0)' new uint[] {                  14732' // World of Warcraft patch 4.3.0 PTR                  14791' // World of Warcraft patch 4.3.0 PTR                  14809' // World of Warcraft patch 4.3.0 PTR                  14849' // World of Warcraft patch 4.3.0 PTR                  14890' // World of Warcraft patch 4.3.0 PTR                  14899' // World of Warcraft patch 4.3.0 PTR                  14911' // World of Warcraft patch 4.3.0 PTR                  14942' // World of Warcraft patch 4.3.0 PTR                  14966' // World of Warcraft patch 4.3.0 PTR                  14976' // World of Warcraft patch 4.3.0 PTR                  14980' // World of Warcraft patch 4.3.0 PTR                  14995' // World of Warcraft patch 4.3.0 PTR                  15005' // World of Warcraft patch 4.3.0                  15050' // World of Warcraft patch 4.3.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 0)' new uint[] {                  14732' // World of Warcraft patch 4.3.0 PTR                  14791' // World of Warcraft patch 4.3.0 PTR                  14809' // World of Warcraft patch 4.3.0 PTR                  14849' // World of Warcraft patch 4.3.0 PTR                  14890' // World of Warcraft patch 4.3.0 PTR                  14899' // World of Warcraft patch 4.3.0 PTR                  14911' // World of Warcraft patch 4.3.0 PTR                  14942' // World of Warcraft patch 4.3.0 PTR                  14966' // World of Warcraft patch 4.3.0 PTR                  14976' // World of Warcraft patch 4.3.0 PTR                  14980' // World of Warcraft patch 4.3.0 PTR                  14995' // World of Warcraft patch 4.3.0 PTR                  15005' // World of Warcraft patch 4.3.0                  15050' // World of Warcraft patch 4.3.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 0)' new uint[] {                  14732' // World of Warcraft patch 4.3.0 PTR                  14791' // World of Warcraft patch 4.3.0 PTR                  14809' // World of Warcraft patch 4.3.0 PTR                  14849' // World of Warcraft patch 4.3.0 PTR                  14890' // World of Warcraft patch 4.3.0 PTR                  14899' // World of Warcraft patch 4.3.0 PTR                  14911' // World of Warcraft patch 4.3.0 PTR                  14942' // World of Warcraft patch 4.3.0 PTR                  14966' // World of Warcraft patch 4.3.0 PTR                  14976' // World of Warcraft patch 4.3.0 PTR                  14980' // World of Warcraft patch 4.3.0 PTR                  14995' // World of Warcraft patch 4.3.0 PTR                  15005' // World of Warcraft patch 4.3.0                  15050' // World of Warcraft patch 4.3.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 0)' new uint[] {                  14732' // World of Warcraft patch 4.3.0 PTR                  14791' // World of Warcraft patch 4.3.0 PTR                  14809' // World of Warcraft patch 4.3.0 PTR                  14849' // World of Warcraft patch 4.3.0 PTR                  14890' // World of Warcraft patch 4.3.0 PTR                  14899' // World of Warcraft patch 4.3.0 PTR                  14911' // World of Warcraft patch 4.3.0 PTR                  14942' // World of Warcraft patch 4.3.0 PTR                  14966' // World of Warcraft patch 4.3.0 PTR                  14976' // World of Warcraft patch 4.3.0 PTR                  14980' // World of Warcraft patch 4.3.0 PTR                  14995' // World of Warcraft patch 4.3.0 PTR                  15005' // World of Warcraft patch 4.3.0                  15050' // World of Warcraft patch 4.3.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 0)' new uint[] {                  14732' // World of Warcraft patch 4.3.0 PTR                  14791' // World of Warcraft patch 4.3.0 PTR                  14809' // World of Warcraft patch 4.3.0 PTR                  14849' // World of Warcraft patch 4.3.0 PTR                  14890' // World of Warcraft patch 4.3.0 PTR                  14899' // World of Warcraft patch 4.3.0 PTR                  14911' // World of Warcraft patch 4.3.0 PTR                  14942' // World of Warcraft patch 4.3.0 PTR                  14966' // World of Warcraft patch 4.3.0 PTR                  14976' // World of Warcraft patch 4.3.0 PTR                  14980' // World of Warcraft patch 4.3.0 PTR                  14995' // World of Warcraft patch 4.3.0 PTR                  15005' // World of Warcraft patch 4.3.0                  15050' // World of Warcraft patch 4.3.0a              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 2)' new uint[] {                  15148' // World of Warcraft patch 4.3.2 PTR                  15171' // World of Warcraft patch 4.3.2 PTR                  15176' // World of Warcraft patch 4.3.2 PTR                  15201' // World of Warcraft patch 4.3.2 PTR                  15211' // World of Warcraft patch 4.3.2              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 2)' new uint[] {                  15148' // World of Warcraft patch 4.3.2 PTR                  15171' // World of Warcraft patch 4.3.2 PTR                  15176' // World of Warcraft patch 4.3.2 PTR                  15201' // World of Warcraft patch 4.3.2 PTR                  15211' // World of Warcraft patch 4.3.2              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 2)' new uint[] {                  15148' // World of Warcraft patch 4.3.2 PTR                  15171' // World of Warcraft patch 4.3.2 PTR                  15176' // World of Warcraft patch 4.3.2 PTR                  15201' // World of Warcraft patch 4.3.2 PTR                  15211' // World of Warcraft patch 4.3.2              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 2)' new uint[] {                  15148' // World of Warcraft patch 4.3.2 PTR                  15171' // World of Warcraft patch 4.3.2 PTR                  15176' // World of Warcraft patch 4.3.2 PTR                  15201' // World of Warcraft patch 4.3.2 PTR                  15211' // World of Warcraft patch 4.3.2              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 2)' new uint[] {                  15148' // World of Warcraft patch 4.3.2 PTR                  15171' // World of Warcraft patch 4.3.2 PTR                  15176' // World of Warcraft patch 4.3.2 PTR                  15201' // World of Warcraft patch 4.3.2 PTR                  15211' // World of Warcraft patch 4.3.2              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 2)' new uint[] {                  15148' // World of Warcraft patch 4.3.2 PTR                  15171' // World of Warcraft patch 4.3.2 PTR                  15176' // World of Warcraft patch 4.3.2 PTR                  15201' // World of Warcraft patch 4.3.2 PTR                  15211' // World of Warcraft patch 4.3.2              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 2)' new uint[] {                  15148' // World of Warcraft patch 4.3.2 PTR                  15171' // World of Warcraft patch 4.3.2 PTR                  15176' // World of Warcraft patch 4.3.2 PTR                  15201' // World of Warcraft patch 4.3.2 PTR                  15211' // World of Warcraft patch 4.3.2              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 2)' new uint[] {                  15148' // World of Warcraft patch 4.3.2 PTR                  15171' // World of Warcraft patch 4.3.2 PTR                  15176' // World of Warcraft patch 4.3.2 PTR                  15201' // World of Warcraft patch 4.3.2 PTR                  15211' // World of Warcraft patch 4.3.2              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 3)' new uint[] {                  15314' // World of Warcraft patch 4.3.3 PTR                  15338' // World of Warcraft patch 4.3.3 PTR                  15354' // World of Warcraft patch 4.3.3              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 3)' new uint[] {                  15314' // World of Warcraft patch 4.3.3 PTR                  15338' // World of Warcraft patch 4.3.3 PTR                  15354' // World of Warcraft patch 4.3.3              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 3)' new uint[] {                  15314' // World of Warcraft patch 4.3.3 PTR                  15338' // World of Warcraft patch 4.3.3 PTR                  15354' // World of Warcraft patch 4.3.3              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 3)' new uint[] {                  15314' // World of Warcraft patch 4.3.3 PTR                  15338' // World of Warcraft patch 4.3.3 PTR                  15354' // World of Warcraft patch 4.3.3              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 3)' new uint[] {                  15314' // World of Warcraft patch 4.3.3 PTR                  15338' // World of Warcraft patch 4.3.3 PTR                  15354' // World of Warcraft patch 4.3.3              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 3)' new uint[] {                  15314' // World of Warcraft patch 4.3.3 PTR                  15338' // World of Warcraft patch 4.3.3 PTR                  15354' // World of Warcraft patch 4.3.3              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 4)' new uint[] {                  15499' // World of Warcraft patch 4.3.4 PTR                  15531' // World of Warcraft patch 4.3.4 PTR              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 4)' new uint[] {                  15499' // World of Warcraft patch 4.3.4 PTR                  15531' // World of Warcraft patch 4.3.4 PTR              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 4)' new uint[] {                  15499' // World of Warcraft patch 4.3.4 PTR                  15531' // World of Warcraft patch 4.3.4 PTR              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 4)' new uint[] {                  15499' // World of Warcraft patch 4.3.4 PTR                  15531' // World of Warcraft patch 4.3.4 PTR              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(4' 3' 4)' new uint[] {                  15499' // World of Warcraft patch 4.3.4 PTR                  15531' // World of Warcraft patch 4.3.4 PTR              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(5' 0' 1)' "MistsOfPandariaBeta"' new uint[] {                  15464' // World of Warcraft patch 5.0.1 Beta                  15508' // World of Warcraft patch 5.0.1 Beta              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(5' 0' 1)' "MistsOfPandariaBeta"' new uint[] {                  15464' // World of Warcraft patch 5.0.1 Beta                  15508' // World of Warcraft patch 5.0.1 Beta              });
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd(new Version(5' 0' 1)' "MistsOfPandariaBeta"' new uint[] {                  15464' // World of Warcraft patch 5.0.1 Beta                  15508' // World of Warcraft patch 5.0.1 Beta              });
Magic Number,Kamilla.Network.Protocols.Wow,StreamHandlerExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Protocols\Wow\StreamHandlerExtensions.cs,DecompressBlock,The following statement contains a magic number: reader.Skip(2);
Magic Number,Kamilla.Network.Protocols.Wow,VectorPackingExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Protocols\Wow\VectorPackingExtensions.cs,Pack,The following statement contains a magic number: long x = ((int)(quat.X * (double)PACK_COEFF_X)) * w_sign & ((1 << 22) - 1);
Magic Number,Kamilla.Network.Protocols.Wow,VectorPackingExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Protocols\Wow\VectorPackingExtensions.cs,Pack,The following statement contains a magic number: long y = ((int)(quat.Y * (double)PACK_COEFF_YZ)) * w_sign & ((1 << 21) - 1);
Magic Number,Kamilla.Network.Protocols.Wow,VectorPackingExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Protocols\Wow\VectorPackingExtensions.cs,Pack,The following statement contains a magic number: long z = ((int)(quat.Z * (double)PACK_COEFF_YZ)) * w_sign & ((1 << 21) - 1);
Magic Number,Kamilla.Network.Protocols.Wow,VectorPackingExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Protocols\Wow\VectorPackingExtensions.cs,Pack,The following statement contains a magic number: return (ulong)(z | (y << 21) | (x << 42));
Magic Number,Kamilla.Network.Protocols.Wow,VectorPackingExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Protocols\Wow\VectorPackingExtensions.cs,Pack,The following statement contains a magic number: return (ulong)(z | (y << 21) | (x << 42));
Magic Number,Kamilla.Network.Protocols.Wow,VectorPackingExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Protocols\Wow\VectorPackingExtensions.cs,UnpackQuaternion,The following statement contains a magic number: var x = (float)(value >> 42) / (float)PACK_COEFF_X;
Magic Number,Kamilla.Network.Protocols.Wow,VectorPackingExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Protocols\Wow\VectorPackingExtensions.cs,UnpackQuaternion,The following statement contains a magic number: var y = (float)(value << 22 >> 43) / (float)PACK_COEFF_YZ;
Magic Number,Kamilla.Network.Protocols.Wow,VectorPackingExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Protocols\Wow\VectorPackingExtensions.cs,UnpackQuaternion,The following statement contains a magic number: var y = (float)(value << 22 >> 43) / (float)PACK_COEFF_YZ;
Magic Number,Kamilla.Network.Protocols.Wow,VectorPackingExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Protocols\Wow\VectorPackingExtensions.cs,UnpackQuaternion,The following statement contains a magic number: var z = (float)(value << 43 >> 43) / (float)PACK_COEFF_YZ;
Magic Number,Kamilla.Network.Protocols.Wow,VectorPackingExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Protocols\Wow\VectorPackingExtensions.cs,UnpackQuaternion,The following statement contains a magic number: var z = (float)(value << 43 >> 43) / (float)PACK_COEFF_YZ;
Magic Number,Kamilla.Network.Protocols.Wow,VectorPackingExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Protocols\Wow\VectorPackingExtensions.cs,UnpackAgainst,The following statement contains a magic number: float dX = ((value >> 00) & 0x7FF) * 0.25f;
Magic Number,Kamilla.Network.Protocols.Wow,VectorPackingExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Protocols\Wow\VectorPackingExtensions.cs,UnpackAgainst,The following statement contains a magic number: float dY = ((value >> 11) & 0x7FF) * 0.25f;
Magic Number,Kamilla.Network.Protocols.Wow,VectorPackingExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Protocols\Wow\VectorPackingExtensions.cs,UnpackAgainst,The following statement contains a magic number: float dY = ((value >> 11) & 0x7FF) * 0.25f;
Magic Number,Kamilla.Network.Protocols.Wow,VectorPackingExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Protocols\Wow\VectorPackingExtensions.cs,UnpackAgainst,The following statement contains a magic number: float dZ = ((value >> 22) & 0x3FF) * 0.25f;
Magic Number,Kamilla.Network.Protocols.Wow,VectorPackingExtensions,D:\research\architectureSmells\repos\LordJZ_Kamilla\Kamilla.Wow\Network\Protocols\Wow\VectorPackingExtensions.cs,UnpackAgainst,The following statement contains a magic number: float dZ = ((value >> 22) & 0x3FF) * 0.25f;
