Implementation smell,Namespace,Class,File,Method,Description
Long Method,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The method has 102 lines of code.
Long Method,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The method has 154 lines of code.
Complex Method,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,Cyclomatic complexity of the method is 26
Complex Method,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,Cyclomatic complexity of the method is 8
Long Parameter List,Kamilla.Network.Protocols.Wow,WowPacket,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Protocols\Wow\WowPacket.cs,WowPacket,The method has 8 parameters.
Long Statement,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The length of the statement  "						throw new FormatException (string.Format ("Error in data chunk at line {0} ({1} vs {2} len)"' nLine' datas.Length' data.Length)); " is 129.
Long Statement,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalRead,The length of the statement  "			var packet = new WowPacket (data' header->Direction' flags' wowFlags' header->UnixTime.AsUnixTime ()' header->TickCount' opcode' connId); " is 137.
Long Statement,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalRead,The length of the statement  "				int newProgress = (int)((m_stream.Position - m_streamOriginalPosition) * 100 / (m_stream.Length - m_streamOriginalPosition)); " is 125.
Long Statement,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalRead,The length of the statement  "			var packet = new WowPacket (data' header->Direction' flags' wowFlags' this.StartTime.AddMilliseconds (header->TickCount - startTicks)' header->TickCount' opcode' header->ConnectionId); " is 184.
Long Statement,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalRead,The length of the statement  "				int newProgress = (int)((m_stream.Position - m_streamOriginalPosition) * 100 / (m_stream.Length - m_streamOriginalPosition)); " is 125.
Long Statement,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,ChainAdd,The length of the statement  "	foreach (var info in builds.Select (build => new ClientBuildInfo (new Version (baseVersion.Major' baseVersion.Minor' baseVersion.Build' (int)build)' latestBuild' explicitName))) { " is 179.
Empty Catch Block,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The method has an empty catch block.
Empty Catch Block,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The method has an empty catch block.
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: try {  	while ((line = m_streamReader.ReadLine ()) != null) {  		++nLine;  		if (nLine == 1) {  			if (line.StartsWith ("EXPECTED CLIENT BUILD "' StringComparison.InvariantCultureIgnoreCase)) {  				m_version = GetClientBuildInfo (uint.Parse (line.Substring ("EXPECTED CLIENT BUILD ".Length)));  			}  			continue;  		}  		if (line.Trim () == string.Empty) {  			readingData = false;  			if (data != null) {  				string[] datas = dataString.Split (new char[] {  					' '  				}' StringSplitOptions.RemoveEmptyEntries);  				if (datas.Length != data.Length)  					throw new FormatException (string.Format ("Error in data chunk at line {0} ({1} vs {2} len)"' nLine' datas.Length' data.Length));  				for (int i = 0; i < datas.Length; ++i)  					data [i] = byte.Parse (datas [i]' NumberStyles.AllowHexSpecifier);  				var pkt = new WowPacket (data' direction' flags' flags2' time' ticks' opcode' conn_id);  				this.InternalAddPacket (pkt);  				this.OnPacketAdded (pkt);  				if (reportProgressDelegate != null) {  					int newProgress = (int)(m_streamReader.BaseStream.Position * 100 / m_streamReader.BaseStream.Length);  					if (newProgress != progress) {  						progress = newProgress;  						reportProgressDelegate (progress);  					}  				}  				dataString = null;  				data = null;  				flags = PacketFlags.None;  				flags2 = WowPacketFlags.None;  				ticks = 0;  			}  			waitingDate = true;  		} else if (waitingDate) {  			var parts = line.Split (new char[] {  				' '  			}' 4);  			time = DateTime.Parse (parts [0] + ' ' + parts [1]' CultureInfo.InvariantCulture);  			waitingDate = false;  			if (parts.Length >= 4)  				ticks = uint.Parse (parts [2]' NumberStyles.AllowHexSpecifier);  			if (line.IndexOf ("SERVER") != -1)  				direction = TransferDirection.ToClient;  			else if (line.IndexOf ("CLIENT") != -1)  				direction = TransferDirection.ToServer;  		} else if (readingData) {  			dataString += line;  		} else if (line.StartsWith ("CLIENT")) {  			direction = TransferDirection.ToServer;  		} else if (line.StartsWith ("SERVER")) {  			direction = TransferDirection.ToClient;  		} else if (line.StartsWith ("SOCKET")) {  			int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  			if (ConnectionIds.ContainsKey (socket))  				conn_id = ConnectionIds [socket];  			else {  				conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  				ConnectionIds.Add (socket' conn_id);  			}  		} else if (line.StartsWith ("LENGTH")) {  			int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  			data = new byte[len];  		} else if (line.StartsWith ("OPCODE")) {  			string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  			opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  			if (opcode == 0x4F57 || opcode == 0x4C524F57) {  				flags2 |= WowPacketFlags.HelloPacket;  				opcode = SpecialWowOpcodes.HelloOpcode;  			}  		} else if (line.StartsWith ("DATA")) {  			readingData = true;  			dataString = string.Empty;  		} else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  			flags |= PacketFlags.Freezed;  		} else  			throw new IOException ();  	}  } catch (Exception ex) {  	throw new FormatException ("Error reading data on line " + nLine + "."' ex);  } finally {  	this.CloseStream ();  }  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: try {  	while ((line = m_streamReader.ReadLine ()) != null) {  		++nLine;  		if (nLine == 1) {  			if (line.StartsWith ("EXPECTED CLIENT BUILD "' StringComparison.InvariantCultureIgnoreCase)) {  				m_version = GetClientBuildInfo (uint.Parse (line.Substring ("EXPECTED CLIENT BUILD ".Length)));  			}  			continue;  		}  		if (line.Trim () == string.Empty) {  			readingData = false;  			if (data != null) {  				string[] datas = dataString.Split (new char[] {  					' '  				}' StringSplitOptions.RemoveEmptyEntries);  				if (datas.Length != data.Length)  					throw new FormatException (string.Format ("Error in data chunk at line {0} ({1} vs {2} len)"' nLine' datas.Length' data.Length));  				for (int i = 0; i < datas.Length; ++i)  					data [i] = byte.Parse (datas [i]' NumberStyles.AllowHexSpecifier);  				var pkt = new WowPacket (data' direction' flags' flags2' time' ticks' opcode' conn_id);  				this.InternalAddPacket (pkt);  				this.OnPacketAdded (pkt);  				if (reportProgressDelegate != null) {  					int newProgress = (int)(m_streamReader.BaseStream.Position * 100 / m_streamReader.BaseStream.Length);  					if (newProgress != progress) {  						progress = newProgress;  						reportProgressDelegate (progress);  					}  				}  				dataString = null;  				data = null;  				flags = PacketFlags.None;  				flags2 = WowPacketFlags.None;  				ticks = 0;  			}  			waitingDate = true;  		} else if (waitingDate) {  			var parts = line.Split (new char[] {  				' '  			}' 4);  			time = DateTime.Parse (parts [0] + ' ' + parts [1]' CultureInfo.InvariantCulture);  			waitingDate = false;  			if (parts.Length >= 4)  				ticks = uint.Parse (parts [2]' NumberStyles.AllowHexSpecifier);  			if (line.IndexOf ("SERVER") != -1)  				direction = TransferDirection.ToClient;  			else if (line.IndexOf ("CLIENT") != -1)  				direction = TransferDirection.ToServer;  		} else if (readingData) {  			dataString += line;  		} else if (line.StartsWith ("CLIENT")) {  			direction = TransferDirection.ToServer;  		} else if (line.StartsWith ("SERVER")) {  			direction = TransferDirection.ToClient;  		} else if (line.StartsWith ("SOCKET")) {  			int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  			if (ConnectionIds.ContainsKey (socket))  				conn_id = ConnectionIds [socket];  			else {  				conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  				ConnectionIds.Add (socket' conn_id);  			}  		} else if (line.StartsWith ("LENGTH")) {  			int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  			data = new byte[len];  		} else if (line.StartsWith ("OPCODE")) {  			string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  			opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  			if (opcode == 0x4F57 || opcode == 0x4C524F57) {  				flags2 |= WowPacketFlags.HelloPacket;  				opcode = SpecialWowOpcodes.HelloOpcode;  			}  		} else if (line.StartsWith ("DATA")) {  			readingData = true;  			dataString = string.Empty;  		} else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  			flags |= PacketFlags.Freezed;  		} else  			throw new IOException ();  	}  } catch (Exception ex) {  	throw new FormatException ("Error reading data on line " + nLine + "."' ex);  } finally {  	this.CloseStream ();  }  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: try {  	while ((line = m_streamReader.ReadLine ()) != null) {  		++nLine;  		if (nLine == 1) {  			if (line.StartsWith ("EXPECTED CLIENT BUILD "' StringComparison.InvariantCultureIgnoreCase)) {  				m_version = GetClientBuildInfo (uint.Parse (line.Substring ("EXPECTED CLIENT BUILD ".Length)));  			}  			continue;  		}  		if (line.Trim () == string.Empty) {  			readingData = false;  			if (data != null) {  				string[] datas = dataString.Split (new char[] {  					' '  				}' StringSplitOptions.RemoveEmptyEntries);  				if (datas.Length != data.Length)  					throw new FormatException (string.Format ("Error in data chunk at line {0} ({1} vs {2} len)"' nLine' datas.Length' data.Length));  				for (int i = 0; i < datas.Length; ++i)  					data [i] = byte.Parse (datas [i]' NumberStyles.AllowHexSpecifier);  				var pkt = new WowPacket (data' direction' flags' flags2' time' ticks' opcode' conn_id);  				this.InternalAddPacket (pkt);  				this.OnPacketAdded (pkt);  				if (reportProgressDelegate != null) {  					int newProgress = (int)(m_streamReader.BaseStream.Position * 100 / m_streamReader.BaseStream.Length);  					if (newProgress != progress) {  						progress = newProgress;  						reportProgressDelegate (progress);  					}  				}  				dataString = null;  				data = null;  				flags = PacketFlags.None;  				flags2 = WowPacketFlags.None;  				ticks = 0;  			}  			waitingDate = true;  		} else if (waitingDate) {  			var parts = line.Split (new char[] {  				' '  			}' 4);  			time = DateTime.Parse (parts [0] + ' ' + parts [1]' CultureInfo.InvariantCulture);  			waitingDate = false;  			if (parts.Length >= 4)  				ticks = uint.Parse (parts [2]' NumberStyles.AllowHexSpecifier);  			if (line.IndexOf ("SERVER") != -1)  				direction = TransferDirection.ToClient;  			else if (line.IndexOf ("CLIENT") != -1)  				direction = TransferDirection.ToServer;  		} else if (readingData) {  			dataString += line;  		} else if (line.StartsWith ("CLIENT")) {  			direction = TransferDirection.ToServer;  		} else if (line.StartsWith ("SERVER")) {  			direction = TransferDirection.ToClient;  		} else if (line.StartsWith ("SOCKET")) {  			int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  			if (ConnectionIds.ContainsKey (socket))  				conn_id = ConnectionIds [socket];  			else {  				conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  				ConnectionIds.Add (socket' conn_id);  			}  		} else if (line.StartsWith ("LENGTH")) {  			int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  			data = new byte[len];  		} else if (line.StartsWith ("OPCODE")) {  			string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  			opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  			if (opcode == 0x4F57 || opcode == 0x4C524F57) {  				flags2 |= WowPacketFlags.HelloPacket;  				opcode = SpecialWowOpcodes.HelloOpcode;  			}  		} else if (line.StartsWith ("DATA")) {  			readingData = true;  			dataString = string.Empty;  		} else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  			flags |= PacketFlags.Freezed;  		} else  			throw new IOException ();  	}  } catch (Exception ex) {  	throw new FormatException ("Error reading data on line " + nLine + "."' ex);  } finally {  	this.CloseStream ();  }  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: try {  	while ((line = m_streamReader.ReadLine ()) != null) {  		++nLine;  		if (nLine == 1) {  			if (line.StartsWith ("EXPECTED CLIENT BUILD "' StringComparison.InvariantCultureIgnoreCase)) {  				m_version = GetClientBuildInfo (uint.Parse (line.Substring ("EXPECTED CLIENT BUILD ".Length)));  			}  			continue;  		}  		if (line.Trim () == string.Empty) {  			readingData = false;  			if (data != null) {  				string[] datas = dataString.Split (new char[] {  					' '  				}' StringSplitOptions.RemoveEmptyEntries);  				if (datas.Length != data.Length)  					throw new FormatException (string.Format ("Error in data chunk at line {0} ({1} vs {2} len)"' nLine' datas.Length' data.Length));  				for (int i = 0; i < datas.Length; ++i)  					data [i] = byte.Parse (datas [i]' NumberStyles.AllowHexSpecifier);  				var pkt = new WowPacket (data' direction' flags' flags2' time' ticks' opcode' conn_id);  				this.InternalAddPacket (pkt);  				this.OnPacketAdded (pkt);  				if (reportProgressDelegate != null) {  					int newProgress = (int)(m_streamReader.BaseStream.Position * 100 / m_streamReader.BaseStream.Length);  					if (newProgress != progress) {  						progress = newProgress;  						reportProgressDelegate (progress);  					}  				}  				dataString = null;  				data = null;  				flags = PacketFlags.None;  				flags2 = WowPacketFlags.None;  				ticks = 0;  			}  			waitingDate = true;  		} else if (waitingDate) {  			var parts = line.Split (new char[] {  				' '  			}' 4);  			time = DateTime.Parse (parts [0] + ' ' + parts [1]' CultureInfo.InvariantCulture);  			waitingDate = false;  			if (parts.Length >= 4)  				ticks = uint.Parse (parts [2]' NumberStyles.AllowHexSpecifier);  			if (line.IndexOf ("SERVER") != -1)  				direction = TransferDirection.ToClient;  			else if (line.IndexOf ("CLIENT") != -1)  				direction = TransferDirection.ToServer;  		} else if (readingData) {  			dataString += line;  		} else if (line.StartsWith ("CLIENT")) {  			direction = TransferDirection.ToServer;  		} else if (line.StartsWith ("SERVER")) {  			direction = TransferDirection.ToClient;  		} else if (line.StartsWith ("SOCKET")) {  			int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  			if (ConnectionIds.ContainsKey (socket))  				conn_id = ConnectionIds [socket];  			else {  				conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  				ConnectionIds.Add (socket' conn_id);  			}  		} else if (line.StartsWith ("LENGTH")) {  			int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  			data = new byte[len];  		} else if (line.StartsWith ("OPCODE")) {  			string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  			opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  			if (opcode == 0x4F57 || opcode == 0x4C524F57) {  				flags2 |= WowPacketFlags.HelloPacket;  				opcode = SpecialWowOpcodes.HelloOpcode;  			}  		} else if (line.StartsWith ("DATA")) {  			readingData = true;  			dataString = string.Empty;  		} else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  			flags |= PacketFlags.Freezed;  		} else  			throw new IOException ();  	}  } catch (Exception ex) {  	throw new FormatException ("Error reading data on line " + nLine + "."' ex);  } finally {  	this.CloseStream ();  }  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: try {  	while ((line = m_streamReader.ReadLine ()) != null) {  		++nLine;  		if (nLine == 1) {  			if (line.StartsWith ("EXPECTED CLIENT BUILD "' StringComparison.InvariantCultureIgnoreCase)) {  				m_version = GetClientBuildInfo (uint.Parse (line.Substring ("EXPECTED CLIENT BUILD ".Length)));  			}  			continue;  		}  		if (line.Trim () == string.Empty) {  			readingData = false;  			if (data != null) {  				string[] datas = dataString.Split (new char[] {  					' '  				}' StringSplitOptions.RemoveEmptyEntries);  				if (datas.Length != data.Length)  					throw new FormatException (string.Format ("Error in data chunk at line {0} ({1} vs {2} len)"' nLine' datas.Length' data.Length));  				for (int i = 0; i < datas.Length; ++i)  					data [i] = byte.Parse (datas [i]' NumberStyles.AllowHexSpecifier);  				var pkt = new WowPacket (data' direction' flags' flags2' time' ticks' opcode' conn_id);  				this.InternalAddPacket (pkt);  				this.OnPacketAdded (pkt);  				if (reportProgressDelegate != null) {  					int newProgress = (int)(m_streamReader.BaseStream.Position * 100 / m_streamReader.BaseStream.Length);  					if (newProgress != progress) {  						progress = newProgress;  						reportProgressDelegate (progress);  					}  				}  				dataString = null;  				data = null;  				flags = PacketFlags.None;  				flags2 = WowPacketFlags.None;  				ticks = 0;  			}  			waitingDate = true;  		} else if (waitingDate) {  			var parts = line.Split (new char[] {  				' '  			}' 4);  			time = DateTime.Parse (parts [0] + ' ' + parts [1]' CultureInfo.InvariantCulture);  			waitingDate = false;  			if (parts.Length >= 4)  				ticks = uint.Parse (parts [2]' NumberStyles.AllowHexSpecifier);  			if (line.IndexOf ("SERVER") != -1)  				direction = TransferDirection.ToClient;  			else if (line.IndexOf ("CLIENT") != -1)  				direction = TransferDirection.ToServer;  		} else if (readingData) {  			dataString += line;  		} else if (line.StartsWith ("CLIENT")) {  			direction = TransferDirection.ToServer;  		} else if (line.StartsWith ("SERVER")) {  			direction = TransferDirection.ToClient;  		} else if (line.StartsWith ("SOCKET")) {  			int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  			if (ConnectionIds.ContainsKey (socket))  				conn_id = ConnectionIds [socket];  			else {  				conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  				ConnectionIds.Add (socket' conn_id);  			}  		} else if (line.StartsWith ("LENGTH")) {  			int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  			data = new byte[len];  		} else if (line.StartsWith ("OPCODE")) {  			string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  			opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  			if (opcode == 0x4F57 || opcode == 0x4C524F57) {  				flags2 |= WowPacketFlags.HelloPacket;  				opcode = SpecialWowOpcodes.HelloOpcode;  			}  		} else if (line.StartsWith ("DATA")) {  			readingData = true;  			dataString = string.Empty;  		} else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  			flags |= PacketFlags.Freezed;  		} else  			throw new IOException ();  	}  } catch (Exception ex) {  	throw new FormatException ("Error reading data on line " + nLine + "."' ex);  } finally {  	this.CloseStream ();  }  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: while ((line = m_streamReader.ReadLine ()) != null) {  	++nLine;  	if (nLine == 1) {  		if (line.StartsWith ("EXPECTED CLIENT BUILD "' StringComparison.InvariantCultureIgnoreCase)) {  			m_version = GetClientBuildInfo (uint.Parse (line.Substring ("EXPECTED CLIENT BUILD ".Length)));  		}  		continue;  	}  	if (line.Trim () == string.Empty) {  		readingData = false;  		if (data != null) {  			string[] datas = dataString.Split (new char[] {  				' '  			}' StringSplitOptions.RemoveEmptyEntries);  			if (datas.Length != data.Length)  				throw new FormatException (string.Format ("Error in data chunk at line {0} ({1} vs {2} len)"' nLine' datas.Length' data.Length));  			for (int i = 0; i < datas.Length; ++i)  				data [i] = byte.Parse (datas [i]' NumberStyles.AllowHexSpecifier);  			var pkt = new WowPacket (data' direction' flags' flags2' time' ticks' opcode' conn_id);  			this.InternalAddPacket (pkt);  			this.OnPacketAdded (pkt);  			if (reportProgressDelegate != null) {  				int newProgress = (int)(m_streamReader.BaseStream.Position * 100 / m_streamReader.BaseStream.Length);  				if (newProgress != progress) {  					progress = newProgress;  					reportProgressDelegate (progress);  				}  			}  			dataString = null;  			data = null;  			flags = PacketFlags.None;  			flags2 = WowPacketFlags.None;  			ticks = 0;  		}  		waitingDate = true;  	} else if (waitingDate) {  		var parts = line.Split (new char[] {  			' '  		}' 4);  		time = DateTime.Parse (parts [0] + ' ' + parts [1]' CultureInfo.InvariantCulture);  		waitingDate = false;  		if (parts.Length >= 4)  			ticks = uint.Parse (parts [2]' NumberStyles.AllowHexSpecifier);  		if (line.IndexOf ("SERVER") != -1)  			direction = TransferDirection.ToClient;  		else if (line.IndexOf ("CLIENT") != -1)  			direction = TransferDirection.ToServer;  	} else if (readingData) {  		dataString += line;  	} else if (line.StartsWith ("CLIENT")) {  		direction = TransferDirection.ToServer;  	} else if (line.StartsWith ("SERVER")) {  		direction = TransferDirection.ToClient;  	} else if (line.StartsWith ("SOCKET")) {  		int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  		if (ConnectionIds.ContainsKey (socket))  			conn_id = ConnectionIds [socket];  		else {  			conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  			ConnectionIds.Add (socket' conn_id);  		}  	} else if (line.StartsWith ("LENGTH")) {  		int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  		data = new byte[len];  	} else if (line.StartsWith ("OPCODE")) {  		string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  		opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  		if (opcode == 0x4F57 || opcode == 0x4C524F57) {  			flags2 |= WowPacketFlags.HelloPacket;  			opcode = SpecialWowOpcodes.HelloOpcode;  		}  	} else if (line.StartsWith ("DATA")) {  		readingData = true;  		dataString = string.Empty;  	} else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  		flags |= PacketFlags.Freezed;  	} else  		throw new IOException ();  }  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: while ((line = m_streamReader.ReadLine ()) != null) {  	++nLine;  	if (nLine == 1) {  		if (line.StartsWith ("EXPECTED CLIENT BUILD "' StringComparison.InvariantCultureIgnoreCase)) {  			m_version = GetClientBuildInfo (uint.Parse (line.Substring ("EXPECTED CLIENT BUILD ".Length)));  		}  		continue;  	}  	if (line.Trim () == string.Empty) {  		readingData = false;  		if (data != null) {  			string[] datas = dataString.Split (new char[] {  				' '  			}' StringSplitOptions.RemoveEmptyEntries);  			if (datas.Length != data.Length)  				throw new FormatException (string.Format ("Error in data chunk at line {0} ({1} vs {2} len)"' nLine' datas.Length' data.Length));  			for (int i = 0; i < datas.Length; ++i)  				data [i] = byte.Parse (datas [i]' NumberStyles.AllowHexSpecifier);  			var pkt = new WowPacket (data' direction' flags' flags2' time' ticks' opcode' conn_id);  			this.InternalAddPacket (pkt);  			this.OnPacketAdded (pkt);  			if (reportProgressDelegate != null) {  				int newProgress = (int)(m_streamReader.BaseStream.Position * 100 / m_streamReader.BaseStream.Length);  				if (newProgress != progress) {  					progress = newProgress;  					reportProgressDelegate (progress);  				}  			}  			dataString = null;  			data = null;  			flags = PacketFlags.None;  			flags2 = WowPacketFlags.None;  			ticks = 0;  		}  		waitingDate = true;  	} else if (waitingDate) {  		var parts = line.Split (new char[] {  			' '  		}' 4);  		time = DateTime.Parse (parts [0] + ' ' + parts [1]' CultureInfo.InvariantCulture);  		waitingDate = false;  		if (parts.Length >= 4)  			ticks = uint.Parse (parts [2]' NumberStyles.AllowHexSpecifier);  		if (line.IndexOf ("SERVER") != -1)  			direction = TransferDirection.ToClient;  		else if (line.IndexOf ("CLIENT") != -1)  			direction = TransferDirection.ToServer;  	} else if (readingData) {  		dataString += line;  	} else if (line.StartsWith ("CLIENT")) {  		direction = TransferDirection.ToServer;  	} else if (line.StartsWith ("SERVER")) {  		direction = TransferDirection.ToClient;  	} else if (line.StartsWith ("SOCKET")) {  		int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  		if (ConnectionIds.ContainsKey (socket))  			conn_id = ConnectionIds [socket];  		else {  			conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  			ConnectionIds.Add (socket' conn_id);  		}  	} else if (line.StartsWith ("LENGTH")) {  		int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  		data = new byte[len];  	} else if (line.StartsWith ("OPCODE")) {  		string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  		opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  		if (opcode == 0x4F57 || opcode == 0x4C524F57) {  			flags2 |= WowPacketFlags.HelloPacket;  			opcode = SpecialWowOpcodes.HelloOpcode;  		}  	} else if (line.StartsWith ("DATA")) {  		readingData = true;  		dataString = string.Empty;  	} else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  		flags |= PacketFlags.Freezed;  	} else  		throw new IOException ();  }  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: while ((line = m_streamReader.ReadLine ()) != null) {  	++nLine;  	if (nLine == 1) {  		if (line.StartsWith ("EXPECTED CLIENT BUILD "' StringComparison.InvariantCultureIgnoreCase)) {  			m_version = GetClientBuildInfo (uint.Parse (line.Substring ("EXPECTED CLIENT BUILD ".Length)));  		}  		continue;  	}  	if (line.Trim () == string.Empty) {  		readingData = false;  		if (data != null) {  			string[] datas = dataString.Split (new char[] {  				' '  			}' StringSplitOptions.RemoveEmptyEntries);  			if (datas.Length != data.Length)  				throw new FormatException (string.Format ("Error in data chunk at line {0} ({1} vs {2} len)"' nLine' datas.Length' data.Length));  			for (int i = 0; i < datas.Length; ++i)  				data [i] = byte.Parse (datas [i]' NumberStyles.AllowHexSpecifier);  			var pkt = new WowPacket (data' direction' flags' flags2' time' ticks' opcode' conn_id);  			this.InternalAddPacket (pkt);  			this.OnPacketAdded (pkt);  			if (reportProgressDelegate != null) {  				int newProgress = (int)(m_streamReader.BaseStream.Position * 100 / m_streamReader.BaseStream.Length);  				if (newProgress != progress) {  					progress = newProgress;  					reportProgressDelegate (progress);  				}  			}  			dataString = null;  			data = null;  			flags = PacketFlags.None;  			flags2 = WowPacketFlags.None;  			ticks = 0;  		}  		waitingDate = true;  	} else if (waitingDate) {  		var parts = line.Split (new char[] {  			' '  		}' 4);  		time = DateTime.Parse (parts [0] + ' ' + parts [1]' CultureInfo.InvariantCulture);  		waitingDate = false;  		if (parts.Length >= 4)  			ticks = uint.Parse (parts [2]' NumberStyles.AllowHexSpecifier);  		if (line.IndexOf ("SERVER") != -1)  			direction = TransferDirection.ToClient;  		else if (line.IndexOf ("CLIENT") != -1)  			direction = TransferDirection.ToServer;  	} else if (readingData) {  		dataString += line;  	} else if (line.StartsWith ("CLIENT")) {  		direction = TransferDirection.ToServer;  	} else if (line.StartsWith ("SERVER")) {  		direction = TransferDirection.ToClient;  	} else if (line.StartsWith ("SOCKET")) {  		int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  		if (ConnectionIds.ContainsKey (socket))  			conn_id = ConnectionIds [socket];  		else {  			conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  			ConnectionIds.Add (socket' conn_id);  		}  	} else if (line.StartsWith ("LENGTH")) {  		int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  		data = new byte[len];  	} else if (line.StartsWith ("OPCODE")) {  		string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  		opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  		if (opcode == 0x4F57 || opcode == 0x4C524F57) {  			flags2 |= WowPacketFlags.HelloPacket;  			opcode = SpecialWowOpcodes.HelloOpcode;  		}  	} else if (line.StartsWith ("DATA")) {  		readingData = true;  		dataString = string.Empty;  	} else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  		flags |= PacketFlags.Freezed;  	} else  		throw new IOException ();  }  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: while ((line = m_streamReader.ReadLine ()) != null) {  	++nLine;  	if (nLine == 1) {  		if (line.StartsWith ("EXPECTED CLIENT BUILD "' StringComparison.InvariantCultureIgnoreCase)) {  			m_version = GetClientBuildInfo (uint.Parse (line.Substring ("EXPECTED CLIENT BUILD ".Length)));  		}  		continue;  	}  	if (line.Trim () == string.Empty) {  		readingData = false;  		if (data != null) {  			string[] datas = dataString.Split (new char[] {  				' '  			}' StringSplitOptions.RemoveEmptyEntries);  			if (datas.Length != data.Length)  				throw new FormatException (string.Format ("Error in data chunk at line {0} ({1} vs {2} len)"' nLine' datas.Length' data.Length));  			for (int i = 0; i < datas.Length; ++i)  				data [i] = byte.Parse (datas [i]' NumberStyles.AllowHexSpecifier);  			var pkt = new WowPacket (data' direction' flags' flags2' time' ticks' opcode' conn_id);  			this.InternalAddPacket (pkt);  			this.OnPacketAdded (pkt);  			if (reportProgressDelegate != null) {  				int newProgress = (int)(m_streamReader.BaseStream.Position * 100 / m_streamReader.BaseStream.Length);  				if (newProgress != progress) {  					progress = newProgress;  					reportProgressDelegate (progress);  				}  			}  			dataString = null;  			data = null;  			flags = PacketFlags.None;  			flags2 = WowPacketFlags.None;  			ticks = 0;  		}  		waitingDate = true;  	} else if (waitingDate) {  		var parts = line.Split (new char[] {  			' '  		}' 4);  		time = DateTime.Parse (parts [0] + ' ' + parts [1]' CultureInfo.InvariantCulture);  		waitingDate = false;  		if (parts.Length >= 4)  			ticks = uint.Parse (parts [2]' NumberStyles.AllowHexSpecifier);  		if (line.IndexOf ("SERVER") != -1)  			direction = TransferDirection.ToClient;  		else if (line.IndexOf ("CLIENT") != -1)  			direction = TransferDirection.ToServer;  	} else if (readingData) {  		dataString += line;  	} else if (line.StartsWith ("CLIENT")) {  		direction = TransferDirection.ToServer;  	} else if (line.StartsWith ("SERVER")) {  		direction = TransferDirection.ToClient;  	} else if (line.StartsWith ("SOCKET")) {  		int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  		if (ConnectionIds.ContainsKey (socket))  			conn_id = ConnectionIds [socket];  		else {  			conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  			ConnectionIds.Add (socket' conn_id);  		}  	} else if (line.StartsWith ("LENGTH")) {  		int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  		data = new byte[len];  	} else if (line.StartsWith ("OPCODE")) {  		string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  		opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  		if (opcode == 0x4F57 || opcode == 0x4C524F57) {  			flags2 |= WowPacketFlags.HelloPacket;  			opcode = SpecialWowOpcodes.HelloOpcode;  		}  	} else if (line.StartsWith ("DATA")) {  		readingData = true;  		dataString = string.Empty;  	} else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  		flags |= PacketFlags.Freezed;  	} else  		throw new IOException ();  }  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: while ((line = m_streamReader.ReadLine ()) != null) {  	++nLine;  	if (nLine == 1) {  		if (line.StartsWith ("EXPECTED CLIENT BUILD "' StringComparison.InvariantCultureIgnoreCase)) {  			m_version = GetClientBuildInfo (uint.Parse (line.Substring ("EXPECTED CLIENT BUILD ".Length)));  		}  		continue;  	}  	if (line.Trim () == string.Empty) {  		readingData = false;  		if (data != null) {  			string[] datas = dataString.Split (new char[] {  				' '  			}' StringSplitOptions.RemoveEmptyEntries);  			if (datas.Length != data.Length)  				throw new FormatException (string.Format ("Error in data chunk at line {0} ({1} vs {2} len)"' nLine' datas.Length' data.Length));  			for (int i = 0; i < datas.Length; ++i)  				data [i] = byte.Parse (datas [i]' NumberStyles.AllowHexSpecifier);  			var pkt = new WowPacket (data' direction' flags' flags2' time' ticks' opcode' conn_id);  			this.InternalAddPacket (pkt);  			this.OnPacketAdded (pkt);  			if (reportProgressDelegate != null) {  				int newProgress = (int)(m_streamReader.BaseStream.Position * 100 / m_streamReader.BaseStream.Length);  				if (newProgress != progress) {  					progress = newProgress;  					reportProgressDelegate (progress);  				}  			}  			dataString = null;  			data = null;  			flags = PacketFlags.None;  			flags2 = WowPacketFlags.None;  			ticks = 0;  		}  		waitingDate = true;  	} else if (waitingDate) {  		var parts = line.Split (new char[] {  			' '  		}' 4);  		time = DateTime.Parse (parts [0] + ' ' + parts [1]' CultureInfo.InvariantCulture);  		waitingDate = false;  		if (parts.Length >= 4)  			ticks = uint.Parse (parts [2]' NumberStyles.AllowHexSpecifier);  		if (line.IndexOf ("SERVER") != -1)  			direction = TransferDirection.ToClient;  		else if (line.IndexOf ("CLIENT") != -1)  			direction = TransferDirection.ToServer;  	} else if (readingData) {  		dataString += line;  	} else if (line.StartsWith ("CLIENT")) {  		direction = TransferDirection.ToServer;  	} else if (line.StartsWith ("SERVER")) {  		direction = TransferDirection.ToClient;  	} else if (line.StartsWith ("SOCKET")) {  		int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  		if (ConnectionIds.ContainsKey (socket))  			conn_id = ConnectionIds [socket];  		else {  			conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  			ConnectionIds.Add (socket' conn_id);  		}  	} else if (line.StartsWith ("LENGTH")) {  		int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  		data = new byte[len];  	} else if (line.StartsWith ("OPCODE")) {  		string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  		opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  		if (opcode == 0x4F57 || opcode == 0x4C524F57) {  			flags2 |= WowPacketFlags.HelloPacket;  			opcode = SpecialWowOpcodes.HelloOpcode;  		}  	} else if (line.StartsWith ("DATA")) {  		readingData = true;  		dataString = string.Empty;  	} else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  		flags |= PacketFlags.Freezed;  	} else  		throw new IOException ();  }  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: if (line.Trim () == string.Empty) {  	readingData = false;  	if (data != null) {  		string[] datas = dataString.Split (new char[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		if (datas.Length != data.Length)  			throw new FormatException (string.Format ("Error in data chunk at line {0} ({1} vs {2} len)"' nLine' datas.Length' data.Length));  		for (int i = 0; i < datas.Length; ++i)  			data [i] = byte.Parse (datas [i]' NumberStyles.AllowHexSpecifier);  		var pkt = new WowPacket (data' direction' flags' flags2' time' ticks' opcode' conn_id);  		this.InternalAddPacket (pkt);  		this.OnPacketAdded (pkt);  		if (reportProgressDelegate != null) {  			int newProgress = (int)(m_streamReader.BaseStream.Position * 100 / m_streamReader.BaseStream.Length);  			if (newProgress != progress) {  				progress = newProgress;  				reportProgressDelegate (progress);  			}  		}  		dataString = null;  		data = null;  		flags = PacketFlags.None;  		flags2 = WowPacketFlags.None;  		ticks = 0;  	}  	waitingDate = true;  } else if (waitingDate) {  	var parts = line.Split (new char[] {  		' '  	}' 4);  	time = DateTime.Parse (parts [0] + ' ' + parts [1]' CultureInfo.InvariantCulture);  	waitingDate = false;  	if (parts.Length >= 4)  		ticks = uint.Parse (parts [2]' NumberStyles.AllowHexSpecifier);  	if (line.IndexOf ("SERVER") != -1)  		direction = TransferDirection.ToClient;  	else if (line.IndexOf ("CLIENT") != -1)  		direction = TransferDirection.ToServer;  } else if (readingData) {  	dataString += line;  } else if (line.StartsWith ("CLIENT")) {  	direction = TransferDirection.ToServer;  } else if (line.StartsWith ("SERVER")) {  	direction = TransferDirection.ToClient;  } else if (line.StartsWith ("SOCKET")) {  	int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	if (ConnectionIds.ContainsKey (socket))  		conn_id = ConnectionIds [socket];  	else {  		conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  		ConnectionIds.Add (socket' conn_id);  	}  } else if (line.StartsWith ("LENGTH")) {  	int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	data = new byte[len];  } else if (line.StartsWith ("OPCODE")) {  	string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  	opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  	if (opcode == 0x4F57 || opcode == 0x4C524F57) {  		flags2 |= WowPacketFlags.HelloPacket;  		opcode = SpecialWowOpcodes.HelloOpcode;  	}  } else if (line.StartsWith ("DATA")) {  	readingData = true;  	dataString = string.Empty;  } else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  	flags |= PacketFlags.Freezed;  } else  	throw new IOException ();  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: if (line.Trim () == string.Empty) {  	readingData = false;  	if (data != null) {  		string[] datas = dataString.Split (new char[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		if (datas.Length != data.Length)  			throw new FormatException (string.Format ("Error in data chunk at line {0} ({1} vs {2} len)"' nLine' datas.Length' data.Length));  		for (int i = 0; i < datas.Length; ++i)  			data [i] = byte.Parse (datas [i]' NumberStyles.AllowHexSpecifier);  		var pkt = new WowPacket (data' direction' flags' flags2' time' ticks' opcode' conn_id);  		this.InternalAddPacket (pkt);  		this.OnPacketAdded (pkt);  		if (reportProgressDelegate != null) {  			int newProgress = (int)(m_streamReader.BaseStream.Position * 100 / m_streamReader.BaseStream.Length);  			if (newProgress != progress) {  				progress = newProgress;  				reportProgressDelegate (progress);  			}  		}  		dataString = null;  		data = null;  		flags = PacketFlags.None;  		flags2 = WowPacketFlags.None;  		ticks = 0;  	}  	waitingDate = true;  } else if (waitingDate) {  	var parts = line.Split (new char[] {  		' '  	}' 4);  	time = DateTime.Parse (parts [0] + ' ' + parts [1]' CultureInfo.InvariantCulture);  	waitingDate = false;  	if (parts.Length >= 4)  		ticks = uint.Parse (parts [2]' NumberStyles.AllowHexSpecifier);  	if (line.IndexOf ("SERVER") != -1)  		direction = TransferDirection.ToClient;  	else if (line.IndexOf ("CLIENT") != -1)  		direction = TransferDirection.ToServer;  } else if (readingData) {  	dataString += line;  } else if (line.StartsWith ("CLIENT")) {  	direction = TransferDirection.ToServer;  } else if (line.StartsWith ("SERVER")) {  	direction = TransferDirection.ToClient;  } else if (line.StartsWith ("SOCKET")) {  	int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	if (ConnectionIds.ContainsKey (socket))  		conn_id = ConnectionIds [socket];  	else {  		conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  		ConnectionIds.Add (socket' conn_id);  	}  } else if (line.StartsWith ("LENGTH")) {  	int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	data = new byte[len];  } else if (line.StartsWith ("OPCODE")) {  	string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  	opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  	if (opcode == 0x4F57 || opcode == 0x4C524F57) {  		flags2 |= WowPacketFlags.HelloPacket;  		opcode = SpecialWowOpcodes.HelloOpcode;  	}  } else if (line.StartsWith ("DATA")) {  	readingData = true;  	dataString = string.Empty;  } else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  	flags |= PacketFlags.Freezed;  } else  	throw new IOException ();  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: if (line.Trim () == string.Empty) {  	readingData = false;  	if (data != null) {  		string[] datas = dataString.Split (new char[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		if (datas.Length != data.Length)  			throw new FormatException (string.Format ("Error in data chunk at line {0} ({1} vs {2} len)"' nLine' datas.Length' data.Length));  		for (int i = 0; i < datas.Length; ++i)  			data [i] = byte.Parse (datas [i]' NumberStyles.AllowHexSpecifier);  		var pkt = new WowPacket (data' direction' flags' flags2' time' ticks' opcode' conn_id);  		this.InternalAddPacket (pkt);  		this.OnPacketAdded (pkt);  		if (reportProgressDelegate != null) {  			int newProgress = (int)(m_streamReader.BaseStream.Position * 100 / m_streamReader.BaseStream.Length);  			if (newProgress != progress) {  				progress = newProgress;  				reportProgressDelegate (progress);  			}  		}  		dataString = null;  		data = null;  		flags = PacketFlags.None;  		flags2 = WowPacketFlags.None;  		ticks = 0;  	}  	waitingDate = true;  } else if (waitingDate) {  	var parts = line.Split (new char[] {  		' '  	}' 4);  	time = DateTime.Parse (parts [0] + ' ' + parts [1]' CultureInfo.InvariantCulture);  	waitingDate = false;  	if (parts.Length >= 4)  		ticks = uint.Parse (parts [2]' NumberStyles.AllowHexSpecifier);  	if (line.IndexOf ("SERVER") != -1)  		direction = TransferDirection.ToClient;  	else if (line.IndexOf ("CLIENT") != -1)  		direction = TransferDirection.ToServer;  } else if (readingData) {  	dataString += line;  } else if (line.StartsWith ("CLIENT")) {  	direction = TransferDirection.ToServer;  } else if (line.StartsWith ("SERVER")) {  	direction = TransferDirection.ToClient;  } else if (line.StartsWith ("SOCKET")) {  	int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	if (ConnectionIds.ContainsKey (socket))  		conn_id = ConnectionIds [socket];  	else {  		conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  		ConnectionIds.Add (socket' conn_id);  	}  } else if (line.StartsWith ("LENGTH")) {  	int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	data = new byte[len];  } else if (line.StartsWith ("OPCODE")) {  	string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  	opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  	if (opcode == 0x4F57 || opcode == 0x4C524F57) {  		flags2 |= WowPacketFlags.HelloPacket;  		opcode = SpecialWowOpcodes.HelloOpcode;  	}  } else if (line.StartsWith ("DATA")) {  	readingData = true;  	dataString = string.Empty;  } else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  	flags |= PacketFlags.Freezed;  } else  	throw new IOException ();  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: if (line.Trim () == string.Empty) {  	readingData = false;  	if (data != null) {  		string[] datas = dataString.Split (new char[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		if (datas.Length != data.Length)  			throw new FormatException (string.Format ("Error in data chunk at line {0} ({1} vs {2} len)"' nLine' datas.Length' data.Length));  		for (int i = 0; i < datas.Length; ++i)  			data [i] = byte.Parse (datas [i]' NumberStyles.AllowHexSpecifier);  		var pkt = new WowPacket (data' direction' flags' flags2' time' ticks' opcode' conn_id);  		this.InternalAddPacket (pkt);  		this.OnPacketAdded (pkt);  		if (reportProgressDelegate != null) {  			int newProgress = (int)(m_streamReader.BaseStream.Position * 100 / m_streamReader.BaseStream.Length);  			if (newProgress != progress) {  				progress = newProgress;  				reportProgressDelegate (progress);  			}  		}  		dataString = null;  		data = null;  		flags = PacketFlags.None;  		flags2 = WowPacketFlags.None;  		ticks = 0;  	}  	waitingDate = true;  } else if (waitingDate) {  	var parts = line.Split (new char[] {  		' '  	}' 4);  	time = DateTime.Parse (parts [0] + ' ' + parts [1]' CultureInfo.InvariantCulture);  	waitingDate = false;  	if (parts.Length >= 4)  		ticks = uint.Parse (parts [2]' NumberStyles.AllowHexSpecifier);  	if (line.IndexOf ("SERVER") != -1)  		direction = TransferDirection.ToClient;  	else if (line.IndexOf ("CLIENT") != -1)  		direction = TransferDirection.ToServer;  } else if (readingData) {  	dataString += line;  } else if (line.StartsWith ("CLIENT")) {  	direction = TransferDirection.ToServer;  } else if (line.StartsWith ("SERVER")) {  	direction = TransferDirection.ToClient;  } else if (line.StartsWith ("SOCKET")) {  	int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	if (ConnectionIds.ContainsKey (socket))  		conn_id = ConnectionIds [socket];  	else {  		conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  		ConnectionIds.Add (socket' conn_id);  	}  } else if (line.StartsWith ("LENGTH")) {  	int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	data = new byte[len];  } else if (line.StartsWith ("OPCODE")) {  	string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  	opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  	if (opcode == 0x4F57 || opcode == 0x4C524F57) {  		flags2 |= WowPacketFlags.HelloPacket;  		opcode = SpecialWowOpcodes.HelloOpcode;  	}  } else if (line.StartsWith ("DATA")) {  	readingData = true;  	dataString = string.Empty;  } else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  	flags |= PacketFlags.Freezed;  } else  	throw new IOException ();  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: if (line.Trim () == string.Empty) {  	readingData = false;  	if (data != null) {  		string[] datas = dataString.Split (new char[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		if (datas.Length != data.Length)  			throw new FormatException (string.Format ("Error in data chunk at line {0} ({1} vs {2} len)"' nLine' datas.Length' data.Length));  		for (int i = 0; i < datas.Length; ++i)  			data [i] = byte.Parse (datas [i]' NumberStyles.AllowHexSpecifier);  		var pkt = new WowPacket (data' direction' flags' flags2' time' ticks' opcode' conn_id);  		this.InternalAddPacket (pkt);  		this.OnPacketAdded (pkt);  		if (reportProgressDelegate != null) {  			int newProgress = (int)(m_streamReader.BaseStream.Position * 100 / m_streamReader.BaseStream.Length);  			if (newProgress != progress) {  				progress = newProgress;  				reportProgressDelegate (progress);  			}  		}  		dataString = null;  		data = null;  		flags = PacketFlags.None;  		flags2 = WowPacketFlags.None;  		ticks = 0;  	}  	waitingDate = true;  } else if (waitingDate) {  	var parts = line.Split (new char[] {  		' '  	}' 4);  	time = DateTime.Parse (parts [0] + ' ' + parts [1]' CultureInfo.InvariantCulture);  	waitingDate = false;  	if (parts.Length >= 4)  		ticks = uint.Parse (parts [2]' NumberStyles.AllowHexSpecifier);  	if (line.IndexOf ("SERVER") != -1)  		direction = TransferDirection.ToClient;  	else if (line.IndexOf ("CLIENT") != -1)  		direction = TransferDirection.ToServer;  } else if (readingData) {  	dataString += line;  } else if (line.StartsWith ("CLIENT")) {  	direction = TransferDirection.ToServer;  } else if (line.StartsWith ("SERVER")) {  	direction = TransferDirection.ToClient;  } else if (line.StartsWith ("SOCKET")) {  	int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	if (ConnectionIds.ContainsKey (socket))  		conn_id = ConnectionIds [socket];  	else {  		conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  		ConnectionIds.Add (socket' conn_id);  	}  } else if (line.StartsWith ("LENGTH")) {  	int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	data = new byte[len];  } else if (line.StartsWith ("OPCODE")) {  	string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  	opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  	if (opcode == 0x4F57 || opcode == 0x4C524F57) {  		flags2 |= WowPacketFlags.HelloPacket;  		opcode = SpecialWowOpcodes.HelloOpcode;  	}  } else if (line.StartsWith ("DATA")) {  	readingData = true;  	dataString = string.Empty;  } else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  	flags |= PacketFlags.Freezed;  } else  	throw new IOException ();  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: if (data != null) {  	string[] datas = dataString.Split (new char[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	if (datas.Length != data.Length)  		throw new FormatException (string.Format ("Error in data chunk at line {0} ({1} vs {2} len)"' nLine' datas.Length' data.Length));  	for (int i = 0; i < datas.Length; ++i)  		data [i] = byte.Parse (datas [i]' NumberStyles.AllowHexSpecifier);  	var pkt = new WowPacket (data' direction' flags' flags2' time' ticks' opcode' conn_id);  	this.InternalAddPacket (pkt);  	this.OnPacketAdded (pkt);  	if (reportProgressDelegate != null) {  		int newProgress = (int)(m_streamReader.BaseStream.Position * 100 / m_streamReader.BaseStream.Length);  		if (newProgress != progress) {  			progress = newProgress;  			reportProgressDelegate (progress);  		}  	}  	dataString = null;  	data = null;  	flags = PacketFlags.None;  	flags2 = WowPacketFlags.None;  	ticks = 0;  }  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: if (reportProgressDelegate != null) {  	int newProgress = (int)(m_streamReader.BaseStream.Position * 100 / m_streamReader.BaseStream.Length);  	if (newProgress != progress) {  		progress = newProgress;  		reportProgressDelegate (progress);  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: if (waitingDate) {  	var parts = line.Split (new char[] {  		' '  	}' 4);  	time = DateTime.Parse (parts [0] + ' ' + parts [1]' CultureInfo.InvariantCulture);  	waitingDate = false;  	if (parts.Length >= 4)  		ticks = uint.Parse (parts [2]' NumberStyles.AllowHexSpecifier);  	if (line.IndexOf ("SERVER") != -1)  		direction = TransferDirection.ToClient;  	else if (line.IndexOf ("CLIENT") != -1)  		direction = TransferDirection.ToServer;  } else if (readingData) {  	dataString += line;  } else if (line.StartsWith ("CLIENT")) {  	direction = TransferDirection.ToServer;  } else if (line.StartsWith ("SERVER")) {  	direction = TransferDirection.ToClient;  } else if (line.StartsWith ("SOCKET")) {  	int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	if (ConnectionIds.ContainsKey (socket))  		conn_id = ConnectionIds [socket];  	else {  		conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  		ConnectionIds.Add (socket' conn_id);  	}  } else if (line.StartsWith ("LENGTH")) {  	int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	data = new byte[len];  } else if (line.StartsWith ("OPCODE")) {  	string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  	opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  	if (opcode == 0x4F57 || opcode == 0x4C524F57) {  		flags2 |= WowPacketFlags.HelloPacket;  		opcode = SpecialWowOpcodes.HelloOpcode;  	}  } else if (line.StartsWith ("DATA")) {  	readingData = true;  	dataString = string.Empty;  } else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  	flags |= PacketFlags.Freezed;  } else  	throw new IOException ();  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: if (waitingDate) {  	var parts = line.Split (new char[] {  		' '  	}' 4);  	time = DateTime.Parse (parts [0] + ' ' + parts [1]' CultureInfo.InvariantCulture);  	waitingDate = false;  	if (parts.Length >= 4)  		ticks = uint.Parse (parts [2]' NumberStyles.AllowHexSpecifier);  	if (line.IndexOf ("SERVER") != -1)  		direction = TransferDirection.ToClient;  	else if (line.IndexOf ("CLIENT") != -1)  		direction = TransferDirection.ToServer;  } else if (readingData) {  	dataString += line;  } else if (line.StartsWith ("CLIENT")) {  	direction = TransferDirection.ToServer;  } else if (line.StartsWith ("SERVER")) {  	direction = TransferDirection.ToClient;  } else if (line.StartsWith ("SOCKET")) {  	int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	if (ConnectionIds.ContainsKey (socket))  		conn_id = ConnectionIds [socket];  	else {  		conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  		ConnectionIds.Add (socket' conn_id);  	}  } else if (line.StartsWith ("LENGTH")) {  	int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	data = new byte[len];  } else if (line.StartsWith ("OPCODE")) {  	string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  	opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  	if (opcode == 0x4F57 || opcode == 0x4C524F57) {  		flags2 |= WowPacketFlags.HelloPacket;  		opcode = SpecialWowOpcodes.HelloOpcode;  	}  } else if (line.StartsWith ("DATA")) {  	readingData = true;  	dataString = string.Empty;  } else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  	flags |= PacketFlags.Freezed;  } else  	throw new IOException ();  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: if (waitingDate) {  	var parts = line.Split (new char[] {  		' '  	}' 4);  	time = DateTime.Parse (parts [0] + ' ' + parts [1]' CultureInfo.InvariantCulture);  	waitingDate = false;  	if (parts.Length >= 4)  		ticks = uint.Parse (parts [2]' NumberStyles.AllowHexSpecifier);  	if (line.IndexOf ("SERVER") != -1)  		direction = TransferDirection.ToClient;  	else if (line.IndexOf ("CLIENT") != -1)  		direction = TransferDirection.ToServer;  } else if (readingData) {  	dataString += line;  } else if (line.StartsWith ("CLIENT")) {  	direction = TransferDirection.ToServer;  } else if (line.StartsWith ("SERVER")) {  	direction = TransferDirection.ToClient;  } else if (line.StartsWith ("SOCKET")) {  	int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	if (ConnectionIds.ContainsKey (socket))  		conn_id = ConnectionIds [socket];  	else {  		conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  		ConnectionIds.Add (socket' conn_id);  	}  } else if (line.StartsWith ("LENGTH")) {  	int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	data = new byte[len];  } else if (line.StartsWith ("OPCODE")) {  	string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  	opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  	if (opcode == 0x4F57 || opcode == 0x4C524F57) {  		flags2 |= WowPacketFlags.HelloPacket;  		opcode = SpecialWowOpcodes.HelloOpcode;  	}  } else if (line.StartsWith ("DATA")) {  	readingData = true;  	dataString = string.Empty;  } else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  	flags |= PacketFlags.Freezed;  } else  	throw new IOException ();  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: if (waitingDate) {  	var parts = line.Split (new char[] {  		' '  	}' 4);  	time = DateTime.Parse (parts [0] + ' ' + parts [1]' CultureInfo.InvariantCulture);  	waitingDate = false;  	if (parts.Length >= 4)  		ticks = uint.Parse (parts [2]' NumberStyles.AllowHexSpecifier);  	if (line.IndexOf ("SERVER") != -1)  		direction = TransferDirection.ToClient;  	else if (line.IndexOf ("CLIENT") != -1)  		direction = TransferDirection.ToServer;  } else if (readingData) {  	dataString += line;  } else if (line.StartsWith ("CLIENT")) {  	direction = TransferDirection.ToServer;  } else if (line.StartsWith ("SERVER")) {  	direction = TransferDirection.ToClient;  } else if (line.StartsWith ("SOCKET")) {  	int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	if (ConnectionIds.ContainsKey (socket))  		conn_id = ConnectionIds [socket];  	else {  		conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  		ConnectionIds.Add (socket' conn_id);  	}  } else if (line.StartsWith ("LENGTH")) {  	int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	data = new byte[len];  } else if (line.StartsWith ("OPCODE")) {  	string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  	opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  	if (opcode == 0x4F57 || opcode == 0x4C524F57) {  		flags2 |= WowPacketFlags.HelloPacket;  		opcode = SpecialWowOpcodes.HelloOpcode;  	}  } else if (line.StartsWith ("DATA")) {  	readingData = true;  	dataString = string.Empty;  } else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  	flags |= PacketFlags.Freezed;  } else  	throw new IOException ();  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: if (parts.Length >= 4)  	ticks = uint.Parse (parts [2]' NumberStyles.AllowHexSpecifier);  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: if (parts.Length >= 4)  	ticks = uint.Parse (parts [2]' NumberStyles.AllowHexSpecifier);  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: ticks = uint.Parse (parts [2]' NumberStyles.AllowHexSpecifier);  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: if (readingData) {  	dataString += line;  } else if (line.StartsWith ("CLIENT")) {  	direction = TransferDirection.ToServer;  } else if (line.StartsWith ("SERVER")) {  	direction = TransferDirection.ToClient;  } else if (line.StartsWith ("SOCKET")) {  	int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	if (ConnectionIds.ContainsKey (socket))  		conn_id = ConnectionIds [socket];  	else {  		conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  		ConnectionIds.Add (socket' conn_id);  	}  } else if (line.StartsWith ("LENGTH")) {  	int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	data = new byte[len];  } else if (line.StartsWith ("OPCODE")) {  	string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  	opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  	if (opcode == 0x4F57 || opcode == 0x4C524F57) {  		flags2 |= WowPacketFlags.HelloPacket;  		opcode = SpecialWowOpcodes.HelloOpcode;  	}  } else if (line.StartsWith ("DATA")) {  	readingData = true;  	dataString = string.Empty;  } else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  	flags |= PacketFlags.Freezed;  } else  	throw new IOException ();  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: if (line.StartsWith ("CLIENT")) {  	direction = TransferDirection.ToServer;  } else if (line.StartsWith ("SERVER")) {  	direction = TransferDirection.ToClient;  } else if (line.StartsWith ("SOCKET")) {  	int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	if (ConnectionIds.ContainsKey (socket))  		conn_id = ConnectionIds [socket];  	else {  		conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  		ConnectionIds.Add (socket' conn_id);  	}  } else if (line.StartsWith ("LENGTH")) {  	int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	data = new byte[len];  } else if (line.StartsWith ("OPCODE")) {  	string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  	opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  	if (opcode == 0x4F57 || opcode == 0x4C524F57) {  		flags2 |= WowPacketFlags.HelloPacket;  		opcode = SpecialWowOpcodes.HelloOpcode;  	}  } else if (line.StartsWith ("DATA")) {  	readingData = true;  	dataString = string.Empty;  } else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  	flags |= PacketFlags.Freezed;  } else  	throw new IOException ();  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: if (line.StartsWith ("SERVER")) {  	direction = TransferDirection.ToClient;  } else if (line.StartsWith ("SOCKET")) {  	int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	if (ConnectionIds.ContainsKey (socket))  		conn_id = ConnectionIds [socket];  	else {  		conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  		ConnectionIds.Add (socket' conn_id);  	}  } else if (line.StartsWith ("LENGTH")) {  	int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	data = new byte[len];  } else if (line.StartsWith ("OPCODE")) {  	string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  	opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  	if (opcode == 0x4F57 || opcode == 0x4C524F57) {  		flags2 |= WowPacketFlags.HelloPacket;  		opcode = SpecialWowOpcodes.HelloOpcode;  	}  } else if (line.StartsWith ("DATA")) {  	readingData = true;  	dataString = string.Empty;  } else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  	flags |= PacketFlags.Freezed;  } else  	throw new IOException ();  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: if (line.StartsWith ("SOCKET")) {  	int socket = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	if (ConnectionIds.ContainsKey (socket))  		conn_id = ConnectionIds [socket];  	else {  		conn_id = (byte)(ConnectionIds.Count == 0 ? 1 : ConnectionIds.Last ().Value + 1);  		ConnectionIds.Add (socket' conn_id);  	}  } else if (line.StartsWith ("LENGTH")) {  	int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	data = new byte[len];  } else if (line.StartsWith ("OPCODE")) {  	string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  	opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  	if (opcode == 0x4F57 || opcode == 0x4C524F57) {  		flags2 |= WowPacketFlags.HelloPacket;  		opcode = SpecialWowOpcodes.HelloOpcode;  	}  } else if (line.StartsWith ("DATA")) {  	readingData = true;  	dataString = string.Empty;  } else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  	flags |= PacketFlags.Freezed;  } else  	throw new IOException ();  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: if (line.StartsWith ("LENGTH")) {  	int len = int.Parse (line.Substring (line.IndexOf (':') + 1).Trim ());  	data = new byte[len];  } else if (line.StartsWith ("OPCODE")) {  	string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  	opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  	if (opcode == 0x4F57 || opcode == 0x4C524F57) {  		flags2 |= WowPacketFlags.HelloPacket;  		opcode = SpecialWowOpcodes.HelloOpcode;  	}  } else if (line.StartsWith ("DATA")) {  	readingData = true;  	dataString = string.Empty;  } else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  	flags |= PacketFlags.Freezed;  } else  	throw new IOException ();  
Magic Number,Kamilla.Network.Logging.Wow,MangosNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\MangosNetworkLog.cs,InternalRead,The following statement contains a magic number: if (line.StartsWith ("OPCODE")) {  	string substr = line.Substring (line.IndexOf ('(') + 1 + 2).TrimEnd (')');  	opcode = uint.Parse (substr' NumberStyles.AllowHexSpecifier);  	if (opcode == 0x4F57 || opcode == 0x4C524F57) {  		flags2 |= WowPacketFlags.HelloPacket;  		opcode = SpecialWowOpcodes.HelloOpcode;  	}  } else if (line.StartsWith ("DATA")) {  	readingData = true;  	dataString = string.Empty;  } else if (line.Trim ().Equals ("NOT SEND"' StringComparison.InvariantCultureIgnoreCase)) {  	flags |= PacketFlags.Freezed;  } else  	throw new IOException ();  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: fixed (byte* ptr = headerBytes) {  	var header = (MainHeader*)ptr;  	GetClientBuildInfo (header->ClientBuild);  	var langBytes = stackalloc byte[5];  	langBytes [0] = header->Lang [0];  	langBytes [1] = header->Lang [1];  	langBytes [2] = (byte)'-';  	langBytes [3] = header->Lang [2];  	langBytes [4] = header->Lang [3];  	var lang = new string ((sbyte*)langBytes' 0' 5);  	try {  		this.Culture = CultureInfo.GetCultureInfo (lang);  	} catch {  	}  	optLen = header->OptionalHeaderLength;  	Marshal.Copy (new IntPtr (header->SessionKey)' m_sessionKey' 0' 40);  	this.SnifferId = (PktSnifferId)header->SnifferId;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: fixed (byte* ptr = headerBytes) {  	var header = (MainHeader*)ptr;  	GetClientBuildInfo (header->ClientBuild);  	var langBytes = stackalloc byte[5];  	langBytes [0] = header->Lang [0];  	langBytes [1] = header->Lang [1];  	langBytes [2] = (byte)'-';  	langBytes [3] = header->Lang [2];  	langBytes [4] = header->Lang [3];  	var lang = new string ((sbyte*)langBytes' 0' 5);  	try {  		this.Culture = CultureInfo.GetCultureInfo (lang);  	} catch {  	}  	optLen = header->OptionalHeaderLength;  	Marshal.Copy (new IntPtr (header->SessionKey)' m_sessionKey' 0' 40);  	this.SnifferId = (PktSnifferId)header->SnifferId;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: fixed (byte* ptr = headerBytes) {  	var header = (MainHeader*)ptr;  	GetClientBuildInfo (header->ClientBuild);  	var langBytes = stackalloc byte[5];  	langBytes [0] = header->Lang [0];  	langBytes [1] = header->Lang [1];  	langBytes [2] = (byte)'-';  	langBytes [3] = header->Lang [2];  	langBytes [4] = header->Lang [3];  	var lang = new string ((sbyte*)langBytes' 0' 5);  	try {  		this.Culture = CultureInfo.GetCultureInfo (lang);  	} catch {  	}  	optLen = header->OptionalHeaderLength;  	Marshal.Copy (new IntPtr (header->SessionKey)' m_sessionKey' 0' 40);  	this.SnifferId = (PktSnifferId)header->SnifferId;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: fixed (byte* ptr = headerBytes) {  	var header = (MainHeader*)ptr;  	GetClientBuildInfo (header->ClientBuild);  	var langBytes = stackalloc byte[5];  	langBytes [0] = header->Lang [0];  	langBytes [1] = header->Lang [1];  	langBytes [2] = (byte)'-';  	langBytes [3] = header->Lang [2];  	langBytes [4] = header->Lang [3];  	var lang = new string ((sbyte*)langBytes' 0' 5);  	try {  		this.Culture = CultureInfo.GetCultureInfo (lang);  	} catch {  	}  	optLen = header->OptionalHeaderLength;  	Marshal.Copy (new IntPtr (header->SessionKey)' m_sessionKey' 0' 40);  	this.SnifferId = (PktSnifferId)header->SnifferId;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: fixed (byte* ptr = headerBytes) {  	var header = (MainHeader*)ptr;  	GetClientBuildInfo (header->ClientBuild);  	var langBytes = stackalloc byte[5];  	langBytes [0] = header->Lang [0];  	langBytes [1] = header->Lang [1];  	langBytes [2] = (byte)'-';  	langBytes [3] = header->Lang [2];  	langBytes [4] = header->Lang [3];  	var lang = new string ((sbyte*)langBytes' 0' 5);  	try {  		this.Culture = CultureInfo.GetCultureInfo (lang);  	} catch {  	}  	optLen = header->OptionalHeaderLength;  	Marshal.Copy (new IntPtr (header->SessionKey)' m_sessionKey' 0' 40);  	this.SnifferId = (PktSnifferId)header->SnifferId;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: fixed (byte* ptr = headerBytes) {  	var header = (MainHeader*)ptr;  	GetClientBuildInfo (header->ClientBuild);  	var langBytes = stackalloc byte[5];  	langBytes [0] = header->Lang [0];  	langBytes [1] = header->Lang [1];  	langBytes [2] = (byte)'-';  	langBytes [3] = header->Lang [2];  	langBytes [4] = header->Lang [3];  	var lang = new string ((sbyte*)langBytes' 0' 5);  	try {  		this.Culture = CultureInfo.GetCultureInfo (lang);  	} catch {  	}  	optLen = header->OptionalHeaderLength;  	Marshal.Copy (new IntPtr (header->SessionKey)' m_sessionKey' 0' 40);  	this.SnifferId = (PktSnifferId)header->SnifferId;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: fixed (byte* ptr = headerBytes) {  	var header = (MainHeader*)ptr;  	GetClientBuildInfo (header->ClientBuild);  	var langBytes = stackalloc byte[5];  	langBytes [0] = header->Lang [0];  	langBytes [1] = header->Lang [1];  	langBytes [2] = (byte)'-';  	langBytes [3] = header->Lang [2];  	langBytes [4] = header->Lang [3];  	var lang = new string ((sbyte*)langBytes' 0' 5);  	try {  		this.Culture = CultureInfo.GetCultureInfo (lang);  	} catch {  	}  	optLen = header->OptionalHeaderLength;  	Marshal.Copy (new IntPtr (header->SessionKey)' m_sessionKey' 0' 40);  	this.SnifferId = (PktSnifferId)header->SnifferId;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: fixed (byte* ptr = headerBytes) {  	var header = (MainHeader*)ptr;  	GetClientBuildInfo (header->ClientBuild);  	var langBytes = stackalloc byte[5];  	langBytes [0] = header->Lang [0];  	langBytes [1] = header->Lang [1];  	langBytes [2] = (byte)'-';  	langBytes [3] = header->Lang [2];  	langBytes [4] = header->Lang [3];  	var lang = new string ((sbyte*)langBytes' 0' 5);  	try {  		this.Culture = CultureInfo.GetCultureInfo (lang);  	} catch {  	}  	optLen = header->OptionalHeaderLength;  	Marshal.Copy (new IntPtr (header->SessionKey)' m_sessionKey' 0' 40);  	this.SnifferId = (PktSnifferId)header->SnifferId;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: langBytes [2] = (byte)'-';  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: langBytes [3] = header->Lang [2];  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: langBytes [3] = header->Lang [2];  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: langBytes [4] = header->Lang [3];  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: langBytes [4] = header->Lang [3];  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: Marshal.Copy (new IntPtr (header->SessionKey)' m_sessionKey' 0' 40);  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	if (optLen > 0) {  		using (var reader = new StreamHandler (m_stream.ReadBytes (optLen))) {  			this.StartTime = reader.ReadUInt32 ().AsUnixTime ();  			this.StartTicks = reader.ReadUInt32 ();  			// ACAD' cannot maintain integrity so just skip  			reader.Skip (16);  			this.SnifferDesc = reader.ReadCString ();  			if (!reader.IsRead)  				this.TCAD = reader.ReadBytes (32);  		}  	}  } else  	m_stream.Skip (optLen);  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	if (optLen > 0) {  		using (var reader = new StreamHandler (m_stream.ReadBytes (optLen))) {  			this.StartTime = reader.ReadUInt32 ().AsUnixTime ();  			this.StartTicks = reader.ReadUInt32 ();  			// ACAD' cannot maintain integrity so just skip  			reader.Skip (16);  			this.SnifferDesc = reader.ReadCString ();  			if (!reader.IsRead)  				this.TCAD = reader.ReadBytes (32);  		}  	}  } else  	m_stream.Skip (optLen);  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: if (optLen > 0) {  	using (var reader = new StreamHandler (m_stream.ReadBytes (optLen))) {  		this.StartTime = reader.ReadUInt32 ().AsUnixTime ();  		this.StartTicks = reader.ReadUInt32 ();  		// ACAD' cannot maintain integrity so just skip  		reader.Skip (16);  		this.SnifferDesc = reader.ReadCString ();  		if (!reader.IsRead)  			this.TCAD = reader.ReadBytes (32);  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: if (optLen > 0) {  	using (var reader = new StreamHandler (m_stream.ReadBytes (optLen))) {  		this.StartTime = reader.ReadUInt32 ().AsUnixTime ();  		this.StartTicks = reader.ReadUInt32 ();  		// ACAD' cannot maintain integrity so just skip  		reader.Skip (16);  		this.SnifferDesc = reader.ReadCString ();  		if (!reader.IsRead)  			this.TCAD = reader.ReadBytes (32);  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: using (var reader = new StreamHandler (m_stream.ReadBytes (optLen))) {  	this.StartTime = reader.ReadUInt32 ().AsUnixTime ();  	this.StartTicks = reader.ReadUInt32 ();  	// ACAD' cannot maintain integrity so just skip  	reader.Skip (16);  	this.SnifferDesc = reader.ReadCString ();  	if (!reader.IsRead)  		this.TCAD = reader.ReadBytes (32);  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: using (var reader = new StreamHandler (m_stream.ReadBytes (optLen))) {  	this.StartTime = reader.ReadUInt32 ().AsUnixTime ();  	this.StartTicks = reader.ReadUInt32 ();  	// ACAD' cannot maintain integrity so just skip  	reader.Skip (16);  	this.SnifferDesc = reader.ReadCString ();  	if (!reader.IsRead)  		this.TCAD = reader.ReadBytes (32);  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: reader.Skip (16);  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: if (!reader.IsRead)  	this.TCAD = reader.ReadBytes (32);  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: this.TCAD = reader.ReadBytes (32);  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: this.InternalSetCapacity ((int)((m_stream.Length - m_stream.Position) / 100));  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalRead,The following statement contains a magic number: fixed (byte* ptr = headerBytes) {  	int progress = 0;  	var header = (ChunkHeader*)ptr;  	while (m_stream.CanRead (1)) {  		if (m_stream.Read (headerBytes' 0' headerSize) != headerSize)  			throw new EndOfStreamException ();  		var flags = PacketFlags.None;  		int connId = 0;  		if (m_snifferId == PktSnifferId.Kamilla) {  			int nOptBytes = header->OptionalDataLength;  			if (--nOptBytes >= 0) {  				flags = (PacketFlags)m_stream.ReadByte ();  				if (--nOptBytes >= 0) {  					connId = m_stream.ReadByte ();  					if (nOptBytes > 0)  						m_stream.Skip (nOptBytes);  				}  			}  		} else  			m_stream.Skip (header->OptionalDataLength);  		var opcode = m_stream.ReadUInt32 ();  		var data = m_stream.ReadBytes (header->DataLength - 4);  		var wowFlags = (WowPacketFlags)(flags & ~PacketFlags.All);  		if ((wowFlags & WowPacketFlags.HelloPacket) != 0)  			opcode = SpecialWowOpcodes.HelloOpcode;  		flags &= PacketFlags.All;  		var packet = new WowPacket (data' header->Direction' flags' wowFlags' header->UnixTime.AsUnixTime ()' header->TickCount' opcode' connId);  		this.InternalAddPacket (packet);  		this.OnPacketAdded (packet);  		if (firstPacket) {  			if (this.StartTicks == 0) {  				this.StartTime = packet.ArrivalTime;  				this.StartTicks = packet.ArrivalTicks;  			}  		}  		firstPacket = false;  		if (reportProgressDelegate != null) {  			int newProgress = (int)((m_stream.Position - m_streamOriginalPosition) * 100 / (m_stream.Length - m_streamOriginalPosition));  			if (newProgress != progress) {  				progress = newProgress;  				reportProgressDelegate (progress);  			}  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalRead,The following statement contains a magic number: fixed (byte* ptr = headerBytes) {  	int progress = 0;  	var header = (ChunkHeader*)ptr;  	while (m_stream.CanRead (1)) {  		if (m_stream.Read (headerBytes' 0' headerSize) != headerSize)  			throw new EndOfStreamException ();  		var flags = PacketFlags.None;  		int connId = 0;  		if (m_snifferId == PktSnifferId.Kamilla) {  			int nOptBytes = header->OptionalDataLength;  			if (--nOptBytes >= 0) {  				flags = (PacketFlags)m_stream.ReadByte ();  				if (--nOptBytes >= 0) {  					connId = m_stream.ReadByte ();  					if (nOptBytes > 0)  						m_stream.Skip (nOptBytes);  				}  			}  		} else  			m_stream.Skip (header->OptionalDataLength);  		var opcode = m_stream.ReadUInt32 ();  		var data = m_stream.ReadBytes (header->DataLength - 4);  		var wowFlags = (WowPacketFlags)(flags & ~PacketFlags.All);  		if ((wowFlags & WowPacketFlags.HelloPacket) != 0)  			opcode = SpecialWowOpcodes.HelloOpcode;  		flags &= PacketFlags.All;  		var packet = new WowPacket (data' header->Direction' flags' wowFlags' header->UnixTime.AsUnixTime ()' header->TickCount' opcode' connId);  		this.InternalAddPacket (packet);  		this.OnPacketAdded (packet);  		if (firstPacket) {  			if (this.StartTicks == 0) {  				this.StartTime = packet.ArrivalTime;  				this.StartTicks = packet.ArrivalTicks;  			}  		}  		firstPacket = false;  		if (reportProgressDelegate != null) {  			int newProgress = (int)((m_stream.Position - m_streamOriginalPosition) * 100 / (m_stream.Length - m_streamOriginalPosition));  			if (newProgress != progress) {  				progress = newProgress;  				reportProgressDelegate (progress);  			}  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalRead,The following statement contains a magic number: while (m_stream.CanRead (1)) {  	if (m_stream.Read (headerBytes' 0' headerSize) != headerSize)  		throw new EndOfStreamException ();  	var flags = PacketFlags.None;  	int connId = 0;  	if (m_snifferId == PktSnifferId.Kamilla) {  		int nOptBytes = header->OptionalDataLength;  		if (--nOptBytes >= 0) {  			flags = (PacketFlags)m_stream.ReadByte ();  			if (--nOptBytes >= 0) {  				connId = m_stream.ReadByte ();  				if (nOptBytes > 0)  					m_stream.Skip (nOptBytes);  			}  		}  	} else  		m_stream.Skip (header->OptionalDataLength);  	var opcode = m_stream.ReadUInt32 ();  	var data = m_stream.ReadBytes (header->DataLength - 4);  	var wowFlags = (WowPacketFlags)(flags & ~PacketFlags.All);  	if ((wowFlags & WowPacketFlags.HelloPacket) != 0)  		opcode = SpecialWowOpcodes.HelloOpcode;  	flags &= PacketFlags.All;  	var packet = new WowPacket (data' header->Direction' flags' wowFlags' header->UnixTime.AsUnixTime ()' header->TickCount' opcode' connId);  	this.InternalAddPacket (packet);  	this.OnPacketAdded (packet);  	if (firstPacket) {  		if (this.StartTicks == 0) {  			this.StartTime = packet.ArrivalTime;  			this.StartTicks = packet.ArrivalTicks;  		}  	}  	firstPacket = false;  	if (reportProgressDelegate != null) {  		int newProgress = (int)((m_stream.Position - m_streamOriginalPosition) * 100 / (m_stream.Length - m_streamOriginalPosition));  		if (newProgress != progress) {  			progress = newProgress;  			reportProgressDelegate (progress);  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalRead,The following statement contains a magic number: while (m_stream.CanRead (1)) {  	if (m_stream.Read (headerBytes' 0' headerSize) != headerSize)  		throw new EndOfStreamException ();  	var flags = PacketFlags.None;  	int connId = 0;  	if (m_snifferId == PktSnifferId.Kamilla) {  		int nOptBytes = header->OptionalDataLength;  		if (--nOptBytes >= 0) {  			flags = (PacketFlags)m_stream.ReadByte ();  			if (--nOptBytes >= 0) {  				connId = m_stream.ReadByte ();  				if (nOptBytes > 0)  					m_stream.Skip (nOptBytes);  			}  		}  	} else  		m_stream.Skip (header->OptionalDataLength);  	var opcode = m_stream.ReadUInt32 ();  	var data = m_stream.ReadBytes (header->DataLength - 4);  	var wowFlags = (WowPacketFlags)(flags & ~PacketFlags.All);  	if ((wowFlags & WowPacketFlags.HelloPacket) != 0)  		opcode = SpecialWowOpcodes.HelloOpcode;  	flags &= PacketFlags.All;  	var packet = new WowPacket (data' header->Direction' flags' wowFlags' header->UnixTime.AsUnixTime ()' header->TickCount' opcode' connId);  	this.InternalAddPacket (packet);  	this.OnPacketAdded (packet);  	if (firstPacket) {  		if (this.StartTicks == 0) {  			this.StartTime = packet.ArrivalTime;  			this.StartTicks = packet.ArrivalTicks;  		}  	}  	firstPacket = false;  	if (reportProgressDelegate != null) {  		int newProgress = (int)((m_stream.Position - m_streamOriginalPosition) * 100 / (m_stream.Length - m_streamOriginalPosition));  		if (newProgress != progress) {  			progress = newProgress;  			reportProgressDelegate (progress);  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalRead,The following statement contains a magic number: if (reportProgressDelegate != null) {  	int newProgress = (int)((m_stream.Position - m_streamOriginalPosition) * 100 / (m_stream.Length - m_streamOriginalPosition));  	if (newProgress != progress) {  		progress = newProgress;  		reportProgressDelegate (progress);  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 8;  		// ACAD  		optLen += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.TCAD != null)  			optLen += 32;  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 0;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  			index += 4;  			*(uint*)(bytesPtr + index) = this.StartTicks;  			index += 4;  			// ACAD  			index += 16;  			if (!string.IsNullOrEmpty (this.SnifferDesc)) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if (this.TCAD != null) {  				Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  				index += 32;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 8;  		// ACAD  		optLen += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.TCAD != null)  			optLen += 32;  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 0;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  			index += 4;  			*(uint*)(bytesPtr + index) = this.StartTicks;  			index += 4;  			// ACAD  			index += 16;  			if (!string.IsNullOrEmpty (this.SnifferDesc)) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if (this.TCAD != null) {  				Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  				index += 32;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 8;  		// ACAD  		optLen += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.TCAD != null)  			optLen += 32;  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 0;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  			index += 4;  			*(uint*)(bytesPtr + index) = this.StartTicks;  			index += 4;  			// ACAD  			index += 16;  			if (!string.IsNullOrEmpty (this.SnifferDesc)) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if (this.TCAD != null) {  				Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  				index += 32;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 8;  		// ACAD  		optLen += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.TCAD != null)  			optLen += 32;  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 0;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  			index += 4;  			*(uint*)(bytesPtr + index) = this.StartTicks;  			index += 4;  			// ACAD  			index += 16;  			if (!string.IsNullOrEmpty (this.SnifferDesc)) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if (this.TCAD != null) {  				Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  				index += 32;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 8;  		// ACAD  		optLen += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.TCAD != null)  			optLen += 32;  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 0;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  			index += 4;  			*(uint*)(bytesPtr + index) = this.StartTicks;  			index += 4;  			// ACAD  			index += 16;  			if (!string.IsNullOrEmpty (this.SnifferDesc)) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if (this.TCAD != null) {  				Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  				index += 32;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 8;  		// ACAD  		optLen += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.TCAD != null)  			optLen += 32;  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 0;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  			index += 4;  			*(uint*)(bytesPtr + index) = this.StartTicks;  			index += 4;  			// ACAD  			index += 16;  			if (!string.IsNullOrEmpty (this.SnifferDesc)) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if (this.TCAD != null) {  				Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  				index += 32;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 8;  		// ACAD  		optLen += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.TCAD != null)  			optLen += 32;  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 0;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  			index += 4;  			*(uint*)(bytesPtr + index) = this.StartTicks;  			index += 4;  			// ACAD  			index += 16;  			if (!string.IsNullOrEmpty (this.SnifferDesc)) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if (this.TCAD != null) {  				Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  				index += 32;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 8;  		// ACAD  		optLen += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.TCAD != null)  			optLen += 32;  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 0;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  			index += 4;  			*(uint*)(bytesPtr + index) = this.StartTicks;  			index += 4;  			// ACAD  			index += 16;  			if (!string.IsNullOrEmpty (this.SnifferDesc)) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if (this.TCAD != null) {  				Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  				index += 32;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 8;  		// ACAD  		optLen += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.TCAD != null)  			optLen += 32;  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 0;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  			index += 4;  			*(uint*)(bytesPtr + index) = this.StartTicks;  			index += 4;  			// ACAD  			index += 16;  			if (!string.IsNullOrEmpty (this.SnifferDesc)) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if (this.TCAD != null) {  				Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  				index += 32;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 8;  		// ACAD  		optLen += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.TCAD != null)  			optLen += 32;  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 0;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  			index += 4;  			*(uint*)(bytesPtr + index) = this.StartTicks;  			index += 4;  			// ACAD  			index += 16;  			if (!string.IsNullOrEmpty (this.SnifferDesc)) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if (this.TCAD != null) {  				Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  				index += 32;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 8;  		// ACAD  		optLen += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.TCAD != null)  			optLen += 32;  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 0;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  			index += 4;  			*(uint*)(bytesPtr + index) = this.StartTicks;  			index += 4;  			// ACAD  			index += 16;  			if (!string.IsNullOrEmpty (this.SnifferDesc)) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if (this.TCAD != null) {  				Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  				index += 32;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 8;  		// ACAD  		optLen += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.TCAD != null)  			optLen += 32;  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 0;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  			index += 4;  			*(uint*)(bytesPtr + index) = this.StartTicks;  			index += 4;  			// ACAD  			index += 16;  			if (!string.IsNullOrEmpty (this.SnifferDesc)) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if (this.TCAD != null) {  				Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  				index += 32;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 8;  		// ACAD  		optLen += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.TCAD != null)  			optLen += 32;  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 0;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  			index += 4;  			*(uint*)(bytesPtr + index) = this.StartTicks;  			index += 4;  			// ACAD  			index += 16;  			if (!string.IsNullOrEmpty (this.SnifferDesc)) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if (this.TCAD != null) {  				Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  				index += 32;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 8;  		// ACAD  		optLen += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.TCAD != null)  			optLen += 32;  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 0;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  			index += 4;  			*(uint*)(bytesPtr + index) = this.StartTicks;  			index += 4;  			// ACAD  			index += 16;  			if (!string.IsNullOrEmpty (this.SnifferDesc)) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if (this.TCAD != null) {  				Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  				index += 32;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 8;  		// ACAD  		optLen += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.TCAD != null)  			optLen += 32;  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 0;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  			index += 4;  			*(uint*)(bytesPtr + index) = this.StartTicks;  			index += 4;  			// ACAD  			index += 16;  			if (!string.IsNullOrEmpty (this.SnifferDesc)) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if (this.TCAD != null) {  				Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  				index += 32;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	optLen += 8;  	// ACAD  	optLen += 16;  	if (!string.IsNullOrEmpty (this.SnifferDesc)) {  		descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  		optLen += descStr.Length + 1;  	}  	if (this.TCAD != null)  		optLen += 32;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	optLen += 8;  	// ACAD  	optLen += 16;  	if (!string.IsNullOrEmpty (this.SnifferDesc)) {  		descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  		optLen += descStr.Length + 1;  	}  	if (this.TCAD != null)  		optLen += 32;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	optLen += 8;  	// ACAD  	optLen += 16;  	if (!string.IsNullOrEmpty (this.SnifferDesc)) {  		descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  		optLen += descStr.Length + 1;  	}  	if (this.TCAD != null)  		optLen += 32;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: optLen += 8;  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: optLen += 16;  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if (this.TCAD != null)  	optLen += 32;  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: optLen += 32;  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 0;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  		index += 4;  		*(uint*)(bytesPtr + index) = this.StartTicks;  		index += 4;  		// ACAD  		index += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if (this.TCAD != null) {  			Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  			index += 32;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 0;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  		index += 4;  		*(uint*)(bytesPtr + index) = this.StartTicks;  		index += 4;  		// ACAD  		index += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if (this.TCAD != null) {  			Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  			index += 32;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 0;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  		index += 4;  		*(uint*)(bytesPtr + index) = this.StartTicks;  		index += 4;  		// ACAD  		index += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if (this.TCAD != null) {  			Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  			index += 32;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 0;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  		index += 4;  		*(uint*)(bytesPtr + index) = this.StartTicks;  		index += 4;  		// ACAD  		index += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if (this.TCAD != null) {  			Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  			index += 32;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 0;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  		index += 4;  		*(uint*)(bytesPtr + index) = this.StartTicks;  		index += 4;  		// ACAD  		index += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if (this.TCAD != null) {  			Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  			index += 32;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 0;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  		index += 4;  		*(uint*)(bytesPtr + index) = this.StartTicks;  		index += 4;  		// ACAD  		index += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if (this.TCAD != null) {  			Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  			index += 32;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 0;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  		index += 4;  		*(uint*)(bytesPtr + index) = this.StartTicks;  		index += 4;  		// ACAD  		index += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if (this.TCAD != null) {  			Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  			index += 32;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 0;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  		index += 4;  		*(uint*)(bytesPtr + index) = this.StartTicks;  		index += 4;  		// ACAD  		index += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if (this.TCAD != null) {  			Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  			index += 32;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 0;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  		index += 4;  		*(uint*)(bytesPtr + index) = this.StartTicks;  		index += 4;  		// ACAD  		index += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if (this.TCAD != null) {  			Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  			index += 32;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 0;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  		index += 4;  		*(uint*)(bytesPtr + index) = this.StartTicks;  		index += 4;  		// ACAD  		index += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if (this.TCAD != null) {  			Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  			index += 32;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 0;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  		index += 4;  		*(uint*)(bytesPtr + index) = this.StartTicks;  		index += 4;  		// ACAD  		index += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if (this.TCAD != null) {  			Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  			index += 32;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 0;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  		index += 4;  		*(uint*)(bytesPtr + index) = this.StartTicks;  		index += 4;  		// ACAD  		index += 16;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if (this.TCAD != null) {  			Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  			index += 32;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: header->Signature [2] = (byte)'T';  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: header->MajorVersion = 3;  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: header->Lang [2] = langBytes [2];  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: header->Lang [2] = langBytes [2];  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: header->Lang [3] = langBytes [3];  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: header->Lang [3] = langBytes [3];  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	int index = MainHeader.Size;  	*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  	index += 4;  	*(uint*)(bytesPtr + index) = this.StartTicks;  	index += 4;  	// ACAD  	index += 16;  	if (!string.IsNullOrEmpty (this.SnifferDesc)) {  		Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  		index += descStr.Length;  		bytes [index] = 0;  		++index;  	}  	if (this.TCAD != null) {  		Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  		index += 32;  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	int index = MainHeader.Size;  	*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  	index += 4;  	*(uint*)(bytesPtr + index) = this.StartTicks;  	index += 4;  	// ACAD  	index += 16;  	if (!string.IsNullOrEmpty (this.SnifferDesc)) {  		Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  		index += descStr.Length;  		bytes [index] = 0;  		++index;  	}  	if (this.TCAD != null) {  		Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  		index += 32;  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	int index = MainHeader.Size;  	*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  	index += 4;  	*(uint*)(bytesPtr + index) = this.StartTicks;  	index += 4;  	// ACAD  	index += 16;  	if (!string.IsNullOrEmpty (this.SnifferDesc)) {  		Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  		index += descStr.Length;  		bytes [index] = 0;  		++index;  	}  	if (this.TCAD != null) {  		Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  		index += 32;  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	int index = MainHeader.Size;  	*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  	index += 4;  	*(uint*)(bytesPtr + index) = this.StartTicks;  	index += 4;  	// ACAD  	index += 16;  	if (!string.IsNullOrEmpty (this.SnifferDesc)) {  		Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  		index += descStr.Length;  		bytes [index] = 0;  		++index;  	}  	if (this.TCAD != null) {  		Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  		index += 32;  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	int index = MainHeader.Size;  	*(uint*)(bytesPtr + index) = this.StartTime.ToUnixTime ();  	index += 4;  	*(uint*)(bytesPtr + index) = this.StartTicks;  	index += 4;  	// ACAD  	index += 16;  	if (!string.IsNullOrEmpty (this.SnifferDesc)) {  		Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  		index += descStr.Length;  		bytes [index] = 0;  		++index;  	}  	if (this.TCAD != null) {  		Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  		index += 32;  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: index += 4;  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: index += 4;  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: index += 16;  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if (this.TCAD != null) {  	Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  	index += 32;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if (this.TCAD != null) {  	Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  	index += 32;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: Buffer.BlockCopy (this.TCAD' 0' bytes' index' 32);  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: index += 32;  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWritePacket2,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	bytes = new byte[OutChunkHeaderKamilla.Size];  	fixed (byte* bytesPtr = bytes) {  		var header = (OutChunkHeaderKamilla*)bytesPtr;  		header->m_header.UnixTime = packet.ArrivalTime.ToUnixTime ();  		header->m_header.DataLength = data.Length + 4;  		header->m_header.Direction = packet.Direction;  		header->m_header.OptionalDataLength = 2;  		header->m_header.TickCount = packet.ArrivalTicks;  		header->m_flags = (byte)packet.Flags;  		header->m_connId = (byte)packet.ConnectionId;  		header->m_opcode = packet.Opcode;  	}  } else {  	bytes = new byte[OutChunkHeader.Size];  	fixed (byte* bytesPtr = bytes) {  		var header = (OutChunkHeader*)bytesPtr;  		header->m_header.UnixTime = packet.ArrivalTime.ToUnixTime ();  		header->m_header.DataLength = data.Length + 4;  		header->m_header.Direction = packet.Direction;  		header->m_header.OptionalDataLength = 0;  		header->m_header.TickCount = packet.ArrivalTicks;  		header->m_opcode = packet.Opcode;  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWritePacket2,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	bytes = new byte[OutChunkHeaderKamilla.Size];  	fixed (byte* bytesPtr = bytes) {  		var header = (OutChunkHeaderKamilla*)bytesPtr;  		header->m_header.UnixTime = packet.ArrivalTime.ToUnixTime ();  		header->m_header.DataLength = data.Length + 4;  		header->m_header.Direction = packet.Direction;  		header->m_header.OptionalDataLength = 2;  		header->m_header.TickCount = packet.ArrivalTicks;  		header->m_flags = (byte)packet.Flags;  		header->m_connId = (byte)packet.ConnectionId;  		header->m_opcode = packet.Opcode;  	}  } else {  	bytes = new byte[OutChunkHeader.Size];  	fixed (byte* bytesPtr = bytes) {  		var header = (OutChunkHeader*)bytesPtr;  		header->m_header.UnixTime = packet.ArrivalTime.ToUnixTime ();  		header->m_header.DataLength = data.Length + 4;  		header->m_header.Direction = packet.Direction;  		header->m_header.OptionalDataLength = 0;  		header->m_header.TickCount = packet.ArrivalTicks;  		header->m_opcode = packet.Opcode;  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWritePacket2,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	bytes = new byte[OutChunkHeaderKamilla.Size];  	fixed (byte* bytesPtr = bytes) {  		var header = (OutChunkHeaderKamilla*)bytesPtr;  		header->m_header.UnixTime = packet.ArrivalTime.ToUnixTime ();  		header->m_header.DataLength = data.Length + 4;  		header->m_header.Direction = packet.Direction;  		header->m_header.OptionalDataLength = 2;  		header->m_header.TickCount = packet.ArrivalTicks;  		header->m_flags = (byte)packet.Flags;  		header->m_connId = (byte)packet.ConnectionId;  		header->m_opcode = packet.Opcode;  	}  } else {  	bytes = new byte[OutChunkHeader.Size];  	fixed (byte* bytesPtr = bytes) {  		var header = (OutChunkHeader*)bytesPtr;  		header->m_header.UnixTime = packet.ArrivalTime.ToUnixTime ();  		header->m_header.DataLength = data.Length + 4;  		header->m_header.Direction = packet.Direction;  		header->m_header.OptionalDataLength = 0;  		header->m_header.TickCount = packet.ArrivalTicks;  		header->m_opcode = packet.Opcode;  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWritePacket2,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (OutChunkHeaderKamilla*)bytesPtr;  	header->m_header.UnixTime = packet.ArrivalTime.ToUnixTime ();  	header->m_header.DataLength = data.Length + 4;  	header->m_header.Direction = packet.Direction;  	header->m_header.OptionalDataLength = 2;  	header->m_header.TickCount = packet.ArrivalTicks;  	header->m_flags = (byte)packet.Flags;  	header->m_connId = (byte)packet.ConnectionId;  	header->m_opcode = packet.Opcode;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWritePacket2,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (OutChunkHeaderKamilla*)bytesPtr;  	header->m_header.UnixTime = packet.ArrivalTime.ToUnixTime ();  	header->m_header.DataLength = data.Length + 4;  	header->m_header.Direction = packet.Direction;  	header->m_header.OptionalDataLength = 2;  	header->m_header.TickCount = packet.ArrivalTicks;  	header->m_flags = (byte)packet.Flags;  	header->m_connId = (byte)packet.ConnectionId;  	header->m_opcode = packet.Opcode;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWritePacket2,The following statement contains a magic number: header->m_header.DataLength = data.Length + 4;  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWritePacket2,The following statement contains a magic number: header->m_header.OptionalDataLength = 2;  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWritePacket2,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (OutChunkHeader*)bytesPtr;  	header->m_header.UnixTime = packet.ArrivalTime.ToUnixTime ();  	header->m_header.DataLength = data.Length + 4;  	header->m_header.Direction = packet.Direction;  	header->m_header.OptionalDataLength = 0;  	header->m_header.TickCount = packet.ArrivalTicks;  	header->m_opcode = packet.Opcode;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt30NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt30NetworkLog.cs,InternalWritePacket2,The following statement contains a magic number: header->m_header.DataLength = data.Length + 4;  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: fixed (byte* ptr = headerBytes) {  	var header = (MainHeader*)ptr;  	GetClientBuildInfo (header->ClientBuild);  	var langBytes = stackalloc byte[5];  	langBytes [0] = header->Lang [0];  	langBytes [1] = header->Lang [1];  	langBytes [2] = (byte)'-';  	langBytes [3] = header->Lang [2];  	langBytes [4] = header->Lang [3];  	var lang = new string ((sbyte*)langBytes' 0' 5);  	try {  		this.Culture = CultureInfo.GetCultureInfo (lang);  	} catch {  	}  	optLen = header->OptionalHeaderLength;  	Marshal.Copy (new IntPtr (header->SessionKey)' m_sessionKey' 0' 40);  	this.SnifferId = (PktSnifferId)header->SnifferId;  	this.StartTicks = header->StartedOnTicks;  	this.StartTime = header->StartedOnUnix.AsUnixTime ();  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: fixed (byte* ptr = headerBytes) {  	var header = (MainHeader*)ptr;  	GetClientBuildInfo (header->ClientBuild);  	var langBytes = stackalloc byte[5];  	langBytes [0] = header->Lang [0];  	langBytes [1] = header->Lang [1];  	langBytes [2] = (byte)'-';  	langBytes [3] = header->Lang [2];  	langBytes [4] = header->Lang [3];  	var lang = new string ((sbyte*)langBytes' 0' 5);  	try {  		this.Culture = CultureInfo.GetCultureInfo (lang);  	} catch {  	}  	optLen = header->OptionalHeaderLength;  	Marshal.Copy (new IntPtr (header->SessionKey)' m_sessionKey' 0' 40);  	this.SnifferId = (PktSnifferId)header->SnifferId;  	this.StartTicks = header->StartedOnTicks;  	this.StartTime = header->StartedOnUnix.AsUnixTime ();  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: fixed (byte* ptr = headerBytes) {  	var header = (MainHeader*)ptr;  	GetClientBuildInfo (header->ClientBuild);  	var langBytes = stackalloc byte[5];  	langBytes [0] = header->Lang [0];  	langBytes [1] = header->Lang [1];  	langBytes [2] = (byte)'-';  	langBytes [3] = header->Lang [2];  	langBytes [4] = header->Lang [3];  	var lang = new string ((sbyte*)langBytes' 0' 5);  	try {  		this.Culture = CultureInfo.GetCultureInfo (lang);  	} catch {  	}  	optLen = header->OptionalHeaderLength;  	Marshal.Copy (new IntPtr (header->SessionKey)' m_sessionKey' 0' 40);  	this.SnifferId = (PktSnifferId)header->SnifferId;  	this.StartTicks = header->StartedOnTicks;  	this.StartTime = header->StartedOnUnix.AsUnixTime ();  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: fixed (byte* ptr = headerBytes) {  	var header = (MainHeader*)ptr;  	GetClientBuildInfo (header->ClientBuild);  	var langBytes = stackalloc byte[5];  	langBytes [0] = header->Lang [0];  	langBytes [1] = header->Lang [1];  	langBytes [2] = (byte)'-';  	langBytes [3] = header->Lang [2];  	langBytes [4] = header->Lang [3];  	var lang = new string ((sbyte*)langBytes' 0' 5);  	try {  		this.Culture = CultureInfo.GetCultureInfo (lang);  	} catch {  	}  	optLen = header->OptionalHeaderLength;  	Marshal.Copy (new IntPtr (header->SessionKey)' m_sessionKey' 0' 40);  	this.SnifferId = (PktSnifferId)header->SnifferId;  	this.StartTicks = header->StartedOnTicks;  	this.StartTime = header->StartedOnUnix.AsUnixTime ();  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: fixed (byte* ptr = headerBytes) {  	var header = (MainHeader*)ptr;  	GetClientBuildInfo (header->ClientBuild);  	var langBytes = stackalloc byte[5];  	langBytes [0] = header->Lang [0];  	langBytes [1] = header->Lang [1];  	langBytes [2] = (byte)'-';  	langBytes [3] = header->Lang [2];  	langBytes [4] = header->Lang [3];  	var lang = new string ((sbyte*)langBytes' 0' 5);  	try {  		this.Culture = CultureInfo.GetCultureInfo (lang);  	} catch {  	}  	optLen = header->OptionalHeaderLength;  	Marshal.Copy (new IntPtr (header->SessionKey)' m_sessionKey' 0' 40);  	this.SnifferId = (PktSnifferId)header->SnifferId;  	this.StartTicks = header->StartedOnTicks;  	this.StartTime = header->StartedOnUnix.AsUnixTime ();  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: fixed (byte* ptr = headerBytes) {  	var header = (MainHeader*)ptr;  	GetClientBuildInfo (header->ClientBuild);  	var langBytes = stackalloc byte[5];  	langBytes [0] = header->Lang [0];  	langBytes [1] = header->Lang [1];  	langBytes [2] = (byte)'-';  	langBytes [3] = header->Lang [2];  	langBytes [4] = header->Lang [3];  	var lang = new string ((sbyte*)langBytes' 0' 5);  	try {  		this.Culture = CultureInfo.GetCultureInfo (lang);  	} catch {  	}  	optLen = header->OptionalHeaderLength;  	Marshal.Copy (new IntPtr (header->SessionKey)' m_sessionKey' 0' 40);  	this.SnifferId = (PktSnifferId)header->SnifferId;  	this.StartTicks = header->StartedOnTicks;  	this.StartTime = header->StartedOnUnix.AsUnixTime ();  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: fixed (byte* ptr = headerBytes) {  	var header = (MainHeader*)ptr;  	GetClientBuildInfo (header->ClientBuild);  	var langBytes = stackalloc byte[5];  	langBytes [0] = header->Lang [0];  	langBytes [1] = header->Lang [1];  	langBytes [2] = (byte)'-';  	langBytes [3] = header->Lang [2];  	langBytes [4] = header->Lang [3];  	var lang = new string ((sbyte*)langBytes' 0' 5);  	try {  		this.Culture = CultureInfo.GetCultureInfo (lang);  	} catch {  	}  	optLen = header->OptionalHeaderLength;  	Marshal.Copy (new IntPtr (header->SessionKey)' m_sessionKey' 0' 40);  	this.SnifferId = (PktSnifferId)header->SnifferId;  	this.StartTicks = header->StartedOnTicks;  	this.StartTime = header->StartedOnUnix.AsUnixTime ();  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: fixed (byte* ptr = headerBytes) {  	var header = (MainHeader*)ptr;  	GetClientBuildInfo (header->ClientBuild);  	var langBytes = stackalloc byte[5];  	langBytes [0] = header->Lang [0];  	langBytes [1] = header->Lang [1];  	langBytes [2] = (byte)'-';  	langBytes [3] = header->Lang [2];  	langBytes [4] = header->Lang [3];  	var lang = new string ((sbyte*)langBytes' 0' 5);  	try {  		this.Culture = CultureInfo.GetCultureInfo (lang);  	} catch {  	}  	optLen = header->OptionalHeaderLength;  	Marshal.Copy (new IntPtr (header->SessionKey)' m_sessionKey' 0' 40);  	this.SnifferId = (PktSnifferId)header->SnifferId;  	this.StartTicks = header->StartedOnTicks;  	this.StartTime = header->StartedOnUnix.AsUnixTime ();  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: langBytes [2] = (byte)'-';  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: langBytes [3] = header->Lang [2];  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: langBytes [3] = header->Lang [2];  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: langBytes [4] = header->Lang [3];  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: langBytes [4] = header->Lang [3];  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: Marshal.Copy (new IntPtr (header->SessionKey)' m_sessionKey' 0' 40);  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	using (var reader = new StreamHandler (m_stream.ReadBytes (optLen))) {  		var flags = (OptHeaderFlags)reader.ReadUInt32 ();  		if ((flags & OptHeaderFlags.HasOCAD) != 0)  			reader.Skip (4);  		if ((flags & OptHeaderFlags.HasSnifferDescString) != 0)  			this.SnifferDesc = reader.ReadCString ();  		if ((flags & OptHeaderFlags.HasFCAD) != 0)  			this.FCAD = reader.ReadBytes (16);  		if ((flags & OptHeaderFlags.HasSCAD) != 0)  			this.SCAD = reader.ReadBytes (16);  	}  } else  	m_stream.Skip (optLen);  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	using (var reader = new StreamHandler (m_stream.ReadBytes (optLen))) {  		var flags = (OptHeaderFlags)reader.ReadUInt32 ();  		if ((flags & OptHeaderFlags.HasOCAD) != 0)  			reader.Skip (4);  		if ((flags & OptHeaderFlags.HasSnifferDescString) != 0)  			this.SnifferDesc = reader.ReadCString ();  		if ((flags & OptHeaderFlags.HasFCAD) != 0)  			this.FCAD = reader.ReadBytes (16);  		if ((flags & OptHeaderFlags.HasSCAD) != 0)  			this.SCAD = reader.ReadBytes (16);  	}  } else  	m_stream.Skip (optLen);  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	using (var reader = new StreamHandler (m_stream.ReadBytes (optLen))) {  		var flags = (OptHeaderFlags)reader.ReadUInt32 ();  		if ((flags & OptHeaderFlags.HasOCAD) != 0)  			reader.Skip (4);  		if ((flags & OptHeaderFlags.HasSnifferDescString) != 0)  			this.SnifferDesc = reader.ReadCString ();  		if ((flags & OptHeaderFlags.HasFCAD) != 0)  			this.FCAD = reader.ReadBytes (16);  		if ((flags & OptHeaderFlags.HasSCAD) != 0)  			this.SCAD = reader.ReadBytes (16);  	}  } else  	m_stream.Skip (optLen);  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: using (var reader = new StreamHandler (m_stream.ReadBytes (optLen))) {  	var flags = (OptHeaderFlags)reader.ReadUInt32 ();  	if ((flags & OptHeaderFlags.HasOCAD) != 0)  		reader.Skip (4);  	if ((flags & OptHeaderFlags.HasSnifferDescString) != 0)  		this.SnifferDesc = reader.ReadCString ();  	if ((flags & OptHeaderFlags.HasFCAD) != 0)  		this.FCAD = reader.ReadBytes (16);  	if ((flags & OptHeaderFlags.HasSCAD) != 0)  		this.SCAD = reader.ReadBytes (16);  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: using (var reader = new StreamHandler (m_stream.ReadBytes (optLen))) {  	var flags = (OptHeaderFlags)reader.ReadUInt32 ();  	if ((flags & OptHeaderFlags.HasOCAD) != 0)  		reader.Skip (4);  	if ((flags & OptHeaderFlags.HasSnifferDescString) != 0)  		this.SnifferDesc = reader.ReadCString ();  	if ((flags & OptHeaderFlags.HasFCAD) != 0)  		this.FCAD = reader.ReadBytes (16);  	if ((flags & OptHeaderFlags.HasSCAD) != 0)  		this.SCAD = reader.ReadBytes (16);  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: using (var reader = new StreamHandler (m_stream.ReadBytes (optLen))) {  	var flags = (OptHeaderFlags)reader.ReadUInt32 ();  	if ((flags & OptHeaderFlags.HasOCAD) != 0)  		reader.Skip (4);  	if ((flags & OptHeaderFlags.HasSnifferDescString) != 0)  		this.SnifferDesc = reader.ReadCString ();  	if ((flags & OptHeaderFlags.HasFCAD) != 0)  		this.FCAD = reader.ReadBytes (16);  	if ((flags & OptHeaderFlags.HasSCAD) != 0)  		this.SCAD = reader.ReadBytes (16);  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: if ((flags & OptHeaderFlags.HasOCAD) != 0)  	reader.Skip (4);  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: reader.Skip (4);  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: if ((flags & OptHeaderFlags.HasFCAD) != 0)  	this.FCAD = reader.ReadBytes (16);  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: this.FCAD = reader.ReadBytes (16);  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: if ((flags & OptHeaderFlags.HasSCAD) != 0)  	this.SCAD = reader.ReadBytes (16);  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: this.SCAD = reader.ReadBytes (16);  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalOpenForReading,The following statement contains a magic number: this.InternalSetCapacity ((int)((m_stream.Length - m_stream.Position) / 100));  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalRead,The following statement contains a magic number: fixed (byte* ptr = headerBytes) {  	int progress = 0;  	var header = (ChunkHeader*)ptr;  	while (!m_stream.IsRead) {  		if (m_stream.Read (headerBytes' 0' headerSize) != headerSize)  			throw new EndOfStreamException ();  		var flags = PacketFlags.None;  		if (m_snifferId == PktSnifferId.Kamilla && header->OptionalDataLength > 0) {  			flags = (PacketFlags)m_stream.ReadByte ();  			m_stream.Skip (header->OptionalDataLength - 1);  		} else  			m_stream.Skip (header->OptionalDataLength);  		var opcode = m_stream.ReadUInt32 ();  		var data = m_stream.ReadBytes (header->DataLength - 4);  		var wowFlags = (WowPacketFlags)(flags & ~PacketFlags.All);  		if ((wowFlags & WowPacketFlags.HelloPacket) != 0)  			opcode = SpecialWowOpcodes.HelloOpcode;  		flags &= PacketFlags.All;  		var packet = new WowPacket (data' header->Direction' flags' wowFlags' this.StartTime.AddMilliseconds (header->TickCount - startTicks)' header->TickCount' opcode' header->ConnectionId);  		this.InternalAddPacket (packet);  		this.OnPacketAdded (packet);  		if (reportProgressDelegate != null) {  			int newProgress = (int)((m_stream.Position - m_streamOriginalPosition) * 100 / (m_stream.Length - m_streamOriginalPosition));  			if (newProgress != progress) {  				progress = newProgress;  				reportProgressDelegate (progress);  			}  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalRead,The following statement contains a magic number: fixed (byte* ptr = headerBytes) {  	int progress = 0;  	var header = (ChunkHeader*)ptr;  	while (!m_stream.IsRead) {  		if (m_stream.Read (headerBytes' 0' headerSize) != headerSize)  			throw new EndOfStreamException ();  		var flags = PacketFlags.None;  		if (m_snifferId == PktSnifferId.Kamilla && header->OptionalDataLength > 0) {  			flags = (PacketFlags)m_stream.ReadByte ();  			m_stream.Skip (header->OptionalDataLength - 1);  		} else  			m_stream.Skip (header->OptionalDataLength);  		var opcode = m_stream.ReadUInt32 ();  		var data = m_stream.ReadBytes (header->DataLength - 4);  		var wowFlags = (WowPacketFlags)(flags & ~PacketFlags.All);  		if ((wowFlags & WowPacketFlags.HelloPacket) != 0)  			opcode = SpecialWowOpcodes.HelloOpcode;  		flags &= PacketFlags.All;  		var packet = new WowPacket (data' header->Direction' flags' wowFlags' this.StartTime.AddMilliseconds (header->TickCount - startTicks)' header->TickCount' opcode' header->ConnectionId);  		this.InternalAddPacket (packet);  		this.OnPacketAdded (packet);  		if (reportProgressDelegate != null) {  			int newProgress = (int)((m_stream.Position - m_streamOriginalPosition) * 100 / (m_stream.Length - m_streamOriginalPosition));  			if (newProgress != progress) {  				progress = newProgress;  				reportProgressDelegate (progress);  			}  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalRead,The following statement contains a magic number: while (!m_stream.IsRead) {  	if (m_stream.Read (headerBytes' 0' headerSize) != headerSize)  		throw new EndOfStreamException ();  	var flags = PacketFlags.None;  	if (m_snifferId == PktSnifferId.Kamilla && header->OptionalDataLength > 0) {  		flags = (PacketFlags)m_stream.ReadByte ();  		m_stream.Skip (header->OptionalDataLength - 1);  	} else  		m_stream.Skip (header->OptionalDataLength);  	var opcode = m_stream.ReadUInt32 ();  	var data = m_stream.ReadBytes (header->DataLength - 4);  	var wowFlags = (WowPacketFlags)(flags & ~PacketFlags.All);  	if ((wowFlags & WowPacketFlags.HelloPacket) != 0)  		opcode = SpecialWowOpcodes.HelloOpcode;  	flags &= PacketFlags.All;  	var packet = new WowPacket (data' header->Direction' flags' wowFlags' this.StartTime.AddMilliseconds (header->TickCount - startTicks)' header->TickCount' opcode' header->ConnectionId);  	this.InternalAddPacket (packet);  	this.OnPacketAdded (packet);  	if (reportProgressDelegate != null) {  		int newProgress = (int)((m_stream.Position - m_streamOriginalPosition) * 100 / (m_stream.Length - m_streamOriginalPosition));  		if (newProgress != progress) {  			progress = newProgress;  			reportProgressDelegate (progress);  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalRead,The following statement contains a magic number: while (!m_stream.IsRead) {  	if (m_stream.Read (headerBytes' 0' headerSize) != headerSize)  		throw new EndOfStreamException ();  	var flags = PacketFlags.None;  	if (m_snifferId == PktSnifferId.Kamilla && header->OptionalDataLength > 0) {  		flags = (PacketFlags)m_stream.ReadByte ();  		m_stream.Skip (header->OptionalDataLength - 1);  	} else  		m_stream.Skip (header->OptionalDataLength);  	var opcode = m_stream.ReadUInt32 ();  	var data = m_stream.ReadBytes (header->DataLength - 4);  	var wowFlags = (WowPacketFlags)(flags & ~PacketFlags.All);  	if ((wowFlags & WowPacketFlags.HelloPacket) != 0)  		opcode = SpecialWowOpcodes.HelloOpcode;  	flags &= PacketFlags.All;  	var packet = new WowPacket (data' header->Direction' flags' wowFlags' this.StartTime.AddMilliseconds (header->TickCount - startTicks)' header->TickCount' opcode' header->ConnectionId);  	this.InternalAddPacket (packet);  	this.OnPacketAdded (packet);  	if (reportProgressDelegate != null) {  		int newProgress = (int)((m_stream.Position - m_streamOriginalPosition) * 100 / (m_stream.Length - m_streamOriginalPosition));  		if (newProgress != progress) {  			progress = newProgress;  			reportProgressDelegate (progress);  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalRead,The following statement contains a magic number: if (reportProgressDelegate != null) {  	int newProgress = (int)((m_stream.Position - m_streamOriginalPosition) * 100 / (m_stream.Length - m_streamOriginalPosition));  	if (newProgress != progress) {  		progress = newProgress;  		reportProgressDelegate (progress);  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	var flags = OptHeaderFlags.None;  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 4;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			flags |= OptHeaderFlags.HasSnifferDescString;  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.FCAD != null) {  			flags |= OptHeaderFlags.HasFCAD;  			optLen += 16;  		}  		if (this.SCAD != null) {  			flags |= OptHeaderFlags.HasSCAD;  			optLen += 16;  		}  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 1;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->StartedOnUnix = this.StartTime.ToUnixTime ();  		header->StartedOnTicks = this.StartTicks;  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = (uint)flags;  			index += 4;  			if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if ((flags & OptHeaderFlags.HasFCAD) != 0) {  				Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  				index += 16;  			}  			if ((flags & OptHeaderFlags.HasSCAD) != 0) {  				Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  				index += 16;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	var flags = OptHeaderFlags.None;  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 4;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			flags |= OptHeaderFlags.HasSnifferDescString;  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.FCAD != null) {  			flags |= OptHeaderFlags.HasFCAD;  			optLen += 16;  		}  		if (this.SCAD != null) {  			flags |= OptHeaderFlags.HasSCAD;  			optLen += 16;  		}  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 1;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->StartedOnUnix = this.StartTime.ToUnixTime ();  		header->StartedOnTicks = this.StartTicks;  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = (uint)flags;  			index += 4;  			if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if ((flags & OptHeaderFlags.HasFCAD) != 0) {  				Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  				index += 16;  			}  			if ((flags & OptHeaderFlags.HasSCAD) != 0) {  				Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  				index += 16;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	var flags = OptHeaderFlags.None;  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 4;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			flags |= OptHeaderFlags.HasSnifferDescString;  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.FCAD != null) {  			flags |= OptHeaderFlags.HasFCAD;  			optLen += 16;  		}  		if (this.SCAD != null) {  			flags |= OptHeaderFlags.HasSCAD;  			optLen += 16;  		}  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 1;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->StartedOnUnix = this.StartTime.ToUnixTime ();  		header->StartedOnTicks = this.StartTicks;  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = (uint)flags;  			index += 4;  			if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if ((flags & OptHeaderFlags.HasFCAD) != 0) {  				Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  				index += 16;  			}  			if ((flags & OptHeaderFlags.HasSCAD) != 0) {  				Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  				index += 16;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	var flags = OptHeaderFlags.None;  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 4;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			flags |= OptHeaderFlags.HasSnifferDescString;  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.FCAD != null) {  			flags |= OptHeaderFlags.HasFCAD;  			optLen += 16;  		}  		if (this.SCAD != null) {  			flags |= OptHeaderFlags.HasSCAD;  			optLen += 16;  		}  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 1;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->StartedOnUnix = this.StartTime.ToUnixTime ();  		header->StartedOnTicks = this.StartTicks;  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = (uint)flags;  			index += 4;  			if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if ((flags & OptHeaderFlags.HasFCAD) != 0) {  				Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  				index += 16;  			}  			if ((flags & OptHeaderFlags.HasSCAD) != 0) {  				Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  				index += 16;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	var flags = OptHeaderFlags.None;  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 4;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			flags |= OptHeaderFlags.HasSnifferDescString;  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.FCAD != null) {  			flags |= OptHeaderFlags.HasFCAD;  			optLen += 16;  		}  		if (this.SCAD != null) {  			flags |= OptHeaderFlags.HasSCAD;  			optLen += 16;  		}  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 1;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->StartedOnUnix = this.StartTime.ToUnixTime ();  		header->StartedOnTicks = this.StartTicks;  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = (uint)flags;  			index += 4;  			if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if ((flags & OptHeaderFlags.HasFCAD) != 0) {  				Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  				index += 16;  			}  			if ((flags & OptHeaderFlags.HasSCAD) != 0) {  				Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  				index += 16;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	var flags = OptHeaderFlags.None;  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 4;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			flags |= OptHeaderFlags.HasSnifferDescString;  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.FCAD != null) {  			flags |= OptHeaderFlags.HasFCAD;  			optLen += 16;  		}  		if (this.SCAD != null) {  			flags |= OptHeaderFlags.HasSCAD;  			optLen += 16;  		}  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 1;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->StartedOnUnix = this.StartTime.ToUnixTime ();  		header->StartedOnTicks = this.StartTicks;  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = (uint)flags;  			index += 4;  			if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if ((flags & OptHeaderFlags.HasFCAD) != 0) {  				Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  				index += 16;  			}  			if ((flags & OptHeaderFlags.HasSCAD) != 0) {  				Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  				index += 16;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	var flags = OptHeaderFlags.None;  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 4;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			flags |= OptHeaderFlags.HasSnifferDescString;  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.FCAD != null) {  			flags |= OptHeaderFlags.HasFCAD;  			optLen += 16;  		}  		if (this.SCAD != null) {  			flags |= OptHeaderFlags.HasSCAD;  			optLen += 16;  		}  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 1;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->StartedOnUnix = this.StartTime.ToUnixTime ();  		header->StartedOnTicks = this.StartTicks;  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = (uint)flags;  			index += 4;  			if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if ((flags & OptHeaderFlags.HasFCAD) != 0) {  				Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  				index += 16;  			}  			if ((flags & OptHeaderFlags.HasSCAD) != 0) {  				Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  				index += 16;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	var flags = OptHeaderFlags.None;  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 4;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			flags |= OptHeaderFlags.HasSnifferDescString;  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.FCAD != null) {  			flags |= OptHeaderFlags.HasFCAD;  			optLen += 16;  		}  		if (this.SCAD != null) {  			flags |= OptHeaderFlags.HasSCAD;  			optLen += 16;  		}  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 1;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->StartedOnUnix = this.StartTime.ToUnixTime ();  		header->StartedOnTicks = this.StartTicks;  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = (uint)flags;  			index += 4;  			if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if ((flags & OptHeaderFlags.HasFCAD) != 0) {  				Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  				index += 16;  			}  			if ((flags & OptHeaderFlags.HasSCAD) != 0) {  				Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  				index += 16;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	var flags = OptHeaderFlags.None;  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 4;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			flags |= OptHeaderFlags.HasSnifferDescString;  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.FCAD != null) {  			flags |= OptHeaderFlags.HasFCAD;  			optLen += 16;  		}  		if (this.SCAD != null) {  			flags |= OptHeaderFlags.HasSCAD;  			optLen += 16;  		}  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 1;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->StartedOnUnix = this.StartTime.ToUnixTime ();  		header->StartedOnTicks = this.StartTicks;  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = (uint)flags;  			index += 4;  			if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if ((flags & OptHeaderFlags.HasFCAD) != 0) {  				Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  				index += 16;  			}  			if ((flags & OptHeaderFlags.HasSCAD) != 0) {  				Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  				index += 16;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	var flags = OptHeaderFlags.None;  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 4;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			flags |= OptHeaderFlags.HasSnifferDescString;  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.FCAD != null) {  			flags |= OptHeaderFlags.HasFCAD;  			optLen += 16;  		}  		if (this.SCAD != null) {  			flags |= OptHeaderFlags.HasSCAD;  			optLen += 16;  		}  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 1;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->StartedOnUnix = this.StartTime.ToUnixTime ();  		header->StartedOnTicks = this.StartTicks;  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = (uint)flags;  			index += 4;  			if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if ((flags & OptHeaderFlags.HasFCAD) != 0) {  				Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  				index += 16;  			}  			if ((flags & OptHeaderFlags.HasSCAD) != 0) {  				Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  				index += 16;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	var flags = OptHeaderFlags.None;  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 4;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			flags |= OptHeaderFlags.HasSnifferDescString;  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.FCAD != null) {  			flags |= OptHeaderFlags.HasFCAD;  			optLen += 16;  		}  		if (this.SCAD != null) {  			flags |= OptHeaderFlags.HasSCAD;  			optLen += 16;  		}  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 1;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->StartedOnUnix = this.StartTime.ToUnixTime ();  		header->StartedOnTicks = this.StartTicks;  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = (uint)flags;  			index += 4;  			if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if ((flags & OptHeaderFlags.HasFCAD) != 0) {  				Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  				index += 16;  			}  			if ((flags & OptHeaderFlags.HasSCAD) != 0) {  				Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  				index += 16;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	var flags = OptHeaderFlags.None;  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 4;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			flags |= OptHeaderFlags.HasSnifferDescString;  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.FCAD != null) {  			flags |= OptHeaderFlags.HasFCAD;  			optLen += 16;  		}  		if (this.SCAD != null) {  			flags |= OptHeaderFlags.HasSCAD;  			optLen += 16;  		}  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 1;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->StartedOnUnix = this.StartTime.ToUnixTime ();  		header->StartedOnTicks = this.StartTicks;  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = (uint)flags;  			index += 4;  			if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if ((flags & OptHeaderFlags.HasFCAD) != 0) {  				Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  				index += 16;  			}  			if ((flags & OptHeaderFlags.HasSCAD) != 0) {  				Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  				index += 16;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	var flags = OptHeaderFlags.None;  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 4;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			flags |= OptHeaderFlags.HasSnifferDescString;  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.FCAD != null) {  			flags |= OptHeaderFlags.HasFCAD;  			optLen += 16;  		}  		if (this.SCAD != null) {  			flags |= OptHeaderFlags.HasSCAD;  			optLen += 16;  		}  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 1;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->StartedOnUnix = this.StartTime.ToUnixTime ();  		header->StartedOnTicks = this.StartTicks;  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = (uint)flags;  			index += 4;  			if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if ((flags & OptHeaderFlags.HasFCAD) != 0) {  				Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  				index += 16;  			}  			if ((flags & OptHeaderFlags.HasSCAD) != 0) {  				Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  				index += 16;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	var flags = OptHeaderFlags.None;  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 4;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			flags |= OptHeaderFlags.HasSnifferDescString;  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.FCAD != null) {  			flags |= OptHeaderFlags.HasFCAD;  			optLen += 16;  		}  		if (this.SCAD != null) {  			flags |= OptHeaderFlags.HasSCAD;  			optLen += 16;  		}  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 1;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->StartedOnUnix = this.StartTime.ToUnixTime ();  		header->StartedOnTicks = this.StartTicks;  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = (uint)flags;  			index += 4;  			if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if ((flags & OptHeaderFlags.HasFCAD) != 0) {  				Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  				index += 16;  			}  			if ((flags & OptHeaderFlags.HasSCAD) != 0) {  				Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  				index += 16;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: m_stream.DoAt (m_streamOriginalPosition' () => {  	var flags = OptHeaderFlags.None;  	int optLen = 0;  	byte[] descStr = null;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		optLen += 4;  		if (!string.IsNullOrEmpty (this.SnifferDesc)) {  			flags |= OptHeaderFlags.HasSnifferDescString;  			descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  			optLen += descStr.Length + 1;  		}  		if (this.FCAD != null) {  			flags |= OptHeaderFlags.HasFCAD;  			optLen += 16;  		}  		if (this.SCAD != null) {  			flags |= OptHeaderFlags.HasSCAD;  			optLen += 16;  		}  	}  	var bytes = new byte[MainHeader.Size + optLen];  	fixed (byte* bytesPtr = bytes) {  		var header = (MainHeader*)bytesPtr;  		var langBytes = this.LangBytes;  		header->Signature [0] = (byte)'P';  		header->Signature [1] = (byte)'K';  		header->Signature [2] = (byte)'T';  		header->MinorVersion = 1;  		header->MajorVersion = 3;  		header->SnifferId = (byte)this.SnifferId;  		header->ClientBuild = (uint)this.ClientVersion.Revision;  		header->Lang [0] = langBytes [0];  		header->Lang [1] = langBytes [1];  		header->Lang [2] = langBytes [2];  		header->Lang [3] = langBytes [3];  		Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  		header->StartedOnUnix = this.StartTime.ToUnixTime ();  		header->StartedOnTicks = this.StartTicks;  		header->OptionalHeaderLength = optLen;  		if (this.SnifferId == PktSnifferId.Kamilla) {  			int index = MainHeader.Size;  			*(uint*)(bytesPtr + index) = (uint)flags;  			index += 4;  			if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  				Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  				index += descStr.Length;  				bytes [index] = 0;  				++index;  			}  			if ((flags & OptHeaderFlags.HasFCAD) != 0) {  				Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  				index += 16;  			}  			if ((flags & OptHeaderFlags.HasSCAD) != 0) {  				Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  				index += 16;  			}  		}  	}  	m_stream.WriteBytes (bytes);  });  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	optLen += 4;  	if (!string.IsNullOrEmpty (this.SnifferDesc)) {  		flags |= OptHeaderFlags.HasSnifferDescString;  		descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  		optLen += descStr.Length + 1;  	}  	if (this.FCAD != null) {  		flags |= OptHeaderFlags.HasFCAD;  		optLen += 16;  	}  	if (this.SCAD != null) {  		flags |= OptHeaderFlags.HasSCAD;  		optLen += 16;  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	optLen += 4;  	if (!string.IsNullOrEmpty (this.SnifferDesc)) {  		flags |= OptHeaderFlags.HasSnifferDescString;  		descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  		optLen += descStr.Length + 1;  	}  	if (this.FCAD != null) {  		flags |= OptHeaderFlags.HasFCAD;  		optLen += 16;  	}  	if (this.SCAD != null) {  		flags |= OptHeaderFlags.HasSCAD;  		optLen += 16;  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	optLen += 4;  	if (!string.IsNullOrEmpty (this.SnifferDesc)) {  		flags |= OptHeaderFlags.HasSnifferDescString;  		descStr = Encoding.ASCII.GetBytes (this.SnifferDesc);  		optLen += descStr.Length + 1;  	}  	if (this.FCAD != null) {  		flags |= OptHeaderFlags.HasFCAD;  		optLen += 16;  	}  	if (this.SCAD != null) {  		flags |= OptHeaderFlags.HasSCAD;  		optLen += 16;  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: optLen += 4;  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if (this.FCAD != null) {  	flags |= OptHeaderFlags.HasFCAD;  	optLen += 16;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: optLen += 16;  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if (this.SCAD != null) {  	flags |= OptHeaderFlags.HasSCAD;  	optLen += 16;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: optLen += 16;  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 1;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->StartedOnUnix = this.StartTime.ToUnixTime ();  	header->StartedOnTicks = this.StartTicks;  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = (uint)flags;  		index += 4;  		if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if ((flags & OptHeaderFlags.HasFCAD) != 0) {  			Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  			index += 16;  		}  		if ((flags & OptHeaderFlags.HasSCAD) != 0) {  			Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  			index += 16;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 1;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->StartedOnUnix = this.StartTime.ToUnixTime ();  	header->StartedOnTicks = this.StartTicks;  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = (uint)flags;  		index += 4;  		if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if ((flags & OptHeaderFlags.HasFCAD) != 0) {  			Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  			index += 16;  		}  		if ((flags & OptHeaderFlags.HasSCAD) != 0) {  			Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  			index += 16;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 1;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->StartedOnUnix = this.StartTime.ToUnixTime ();  	header->StartedOnTicks = this.StartTicks;  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = (uint)flags;  		index += 4;  		if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if ((flags & OptHeaderFlags.HasFCAD) != 0) {  			Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  			index += 16;  		}  		if ((flags & OptHeaderFlags.HasSCAD) != 0) {  			Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  			index += 16;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 1;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->StartedOnUnix = this.StartTime.ToUnixTime ();  	header->StartedOnTicks = this.StartTicks;  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = (uint)flags;  		index += 4;  		if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if ((flags & OptHeaderFlags.HasFCAD) != 0) {  			Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  			index += 16;  		}  		if ((flags & OptHeaderFlags.HasSCAD) != 0) {  			Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  			index += 16;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 1;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->StartedOnUnix = this.StartTime.ToUnixTime ();  	header->StartedOnTicks = this.StartTicks;  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = (uint)flags;  		index += 4;  		if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if ((flags & OptHeaderFlags.HasFCAD) != 0) {  			Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  			index += 16;  		}  		if ((flags & OptHeaderFlags.HasSCAD) != 0) {  			Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  			index += 16;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 1;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->StartedOnUnix = this.StartTime.ToUnixTime ();  	header->StartedOnTicks = this.StartTicks;  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = (uint)flags;  		index += 4;  		if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if ((flags & OptHeaderFlags.HasFCAD) != 0) {  			Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  			index += 16;  		}  		if ((flags & OptHeaderFlags.HasSCAD) != 0) {  			Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  			index += 16;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 1;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->StartedOnUnix = this.StartTime.ToUnixTime ();  	header->StartedOnTicks = this.StartTicks;  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = (uint)flags;  		index += 4;  		if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if ((flags & OptHeaderFlags.HasFCAD) != 0) {  			Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  			index += 16;  		}  		if ((flags & OptHeaderFlags.HasSCAD) != 0) {  			Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  			index += 16;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 1;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->StartedOnUnix = this.StartTime.ToUnixTime ();  	header->StartedOnTicks = this.StartTicks;  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = (uint)flags;  		index += 4;  		if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if ((flags & OptHeaderFlags.HasFCAD) != 0) {  			Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  			index += 16;  		}  		if ((flags & OptHeaderFlags.HasSCAD) != 0) {  			Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  			index += 16;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 1;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->StartedOnUnix = this.StartTime.ToUnixTime ();  	header->StartedOnTicks = this.StartTicks;  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = (uint)flags;  		index += 4;  		if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if ((flags & OptHeaderFlags.HasFCAD) != 0) {  			Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  			index += 16;  		}  		if ((flags & OptHeaderFlags.HasSCAD) != 0) {  			Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  			index += 16;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 1;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->StartedOnUnix = this.StartTime.ToUnixTime ();  	header->StartedOnTicks = this.StartTicks;  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = (uint)flags;  		index += 4;  		if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if ((flags & OptHeaderFlags.HasFCAD) != 0) {  			Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  			index += 16;  		}  		if ((flags & OptHeaderFlags.HasSCAD) != 0) {  			Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  			index += 16;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 1;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->StartedOnUnix = this.StartTime.ToUnixTime ();  	header->StartedOnTicks = this.StartTicks;  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = (uint)flags;  		index += 4;  		if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if ((flags & OptHeaderFlags.HasFCAD) != 0) {  			Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  			index += 16;  		}  		if ((flags & OptHeaderFlags.HasSCAD) != 0) {  			Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  			index += 16;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (MainHeader*)bytesPtr;  	var langBytes = this.LangBytes;  	header->Signature [0] = (byte)'P';  	header->Signature [1] = (byte)'K';  	header->Signature [2] = (byte)'T';  	header->MinorVersion = 1;  	header->MajorVersion = 3;  	header->SnifferId = (byte)this.SnifferId;  	header->ClientBuild = (uint)this.ClientVersion.Revision;  	header->Lang [0] = langBytes [0];  	header->Lang [1] = langBytes [1];  	header->Lang [2] = langBytes [2];  	header->Lang [3] = langBytes [3];  	Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  	header->StartedOnUnix = this.StartTime.ToUnixTime ();  	header->StartedOnTicks = this.StartTicks;  	header->OptionalHeaderLength = optLen;  	if (this.SnifferId == PktSnifferId.Kamilla) {  		int index = MainHeader.Size;  		*(uint*)(bytesPtr + index) = (uint)flags;  		index += 4;  		if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  			Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  			index += descStr.Length;  			bytes [index] = 0;  			++index;  		}  		if ((flags & OptHeaderFlags.HasFCAD) != 0) {  			Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  			index += 16;  		}  		if ((flags & OptHeaderFlags.HasSCAD) != 0) {  			Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  			index += 16;  		}  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: header->Signature [2] = (byte)'T';  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: header->MajorVersion = 3;  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: header->Lang [2] = langBytes [2];  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: header->Lang [2] = langBytes [2];  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: header->Lang [3] = langBytes [3];  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: header->Lang [3] = langBytes [3];  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: Marshal.Copy (this.SessionKey' 0' new IntPtr (header->SessionKey)' 40);  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	int index = MainHeader.Size;  	*(uint*)(bytesPtr + index) = (uint)flags;  	index += 4;  	if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  		Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  		index += descStr.Length;  		bytes [index] = 0;  		++index;  	}  	if ((flags & OptHeaderFlags.HasFCAD) != 0) {  		Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  		index += 16;  	}  	if ((flags & OptHeaderFlags.HasSCAD) != 0) {  		Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  		index += 16;  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	int index = MainHeader.Size;  	*(uint*)(bytesPtr + index) = (uint)flags;  	index += 4;  	if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  		Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  		index += descStr.Length;  		bytes [index] = 0;  		++index;  	}  	if ((flags & OptHeaderFlags.HasFCAD) != 0) {  		Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  		index += 16;  	}  	if ((flags & OptHeaderFlags.HasSCAD) != 0) {  		Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  		index += 16;  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	int index = MainHeader.Size;  	*(uint*)(bytesPtr + index) = (uint)flags;  	index += 4;  	if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  		Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  		index += descStr.Length;  		bytes [index] = 0;  		++index;  	}  	if ((flags & OptHeaderFlags.HasFCAD) != 0) {  		Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  		index += 16;  	}  	if ((flags & OptHeaderFlags.HasSCAD) != 0) {  		Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  		index += 16;  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	int index = MainHeader.Size;  	*(uint*)(bytesPtr + index) = (uint)flags;  	index += 4;  	if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  		Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  		index += descStr.Length;  		bytes [index] = 0;  		++index;  	}  	if ((flags & OptHeaderFlags.HasFCAD) != 0) {  		Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  		index += 16;  	}  	if ((flags & OptHeaderFlags.HasSCAD) != 0) {  		Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  		index += 16;  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	int index = MainHeader.Size;  	*(uint*)(bytesPtr + index) = (uint)flags;  	index += 4;  	if ((flags & OptHeaderFlags.HasSnifferDescString) != 0) {  		Buffer.BlockCopy (descStr' 0' bytes' index' descStr.Length);  		index += descStr.Length;  		bytes [index] = 0;  		++index;  	}  	if ((flags & OptHeaderFlags.HasFCAD) != 0) {  		Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  		index += 16;  	}  	if ((flags & OptHeaderFlags.HasSCAD) != 0) {  		Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  		index += 16;  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: index += 4;  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if ((flags & OptHeaderFlags.HasFCAD) != 0) {  	Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  	index += 16;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if ((flags & OptHeaderFlags.HasFCAD) != 0) {  	Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  	index += 16;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: Buffer.BlockCopy (this.FCAD' 0' bytes' index' 16);  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: index += 16;  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if ((flags & OptHeaderFlags.HasSCAD) != 0) {  	Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  	index += 16;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: if ((flags & OptHeaderFlags.HasSCAD) != 0) {  	Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  	index += 16;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: Buffer.BlockCopy (this.SCAD' 0' bytes' index' 16);  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWriteMetaData,The following statement contains a magic number: index += 16;  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWritePacket2,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	bytes = new byte[OutChunkHeaderKamilla.Size];  	fixed (byte* bytesPtr = bytes) {  		var header = (OutChunkHeaderKamilla*)bytesPtr;  		header->m_header.ConnectionId = packet.ConnectionId;  		header->m_header.DataLength = data.Length + 4;  		header->m_header.Direction = packet.Direction;  		header->m_header.OptionalDataLength = 1;  		header->m_header.TickCount = packet.ArrivalTicks;  		header->m_flags = (byte)packet.Flags;  		header->m_opcode = packet.Opcode;  	}  } else {  	bytes = new byte[OutChunkHeader.Size];  	fixed (byte* bytesPtr = bytes) {  		var header = (OutChunkHeader*)bytesPtr;  		header->m_header.ConnectionId = packet.ConnectionId;  		header->m_header.DataLength = data.Length + 4;  		header->m_header.Direction = packet.Direction;  		header->m_header.OptionalDataLength = 0;  		header->m_header.TickCount = packet.ArrivalTicks;  		header->m_opcode = packet.Opcode;  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWritePacket2,The following statement contains a magic number: if (this.SnifferId == PktSnifferId.Kamilla) {  	bytes = new byte[OutChunkHeaderKamilla.Size];  	fixed (byte* bytesPtr = bytes) {  		var header = (OutChunkHeaderKamilla*)bytesPtr;  		header->m_header.ConnectionId = packet.ConnectionId;  		header->m_header.DataLength = data.Length + 4;  		header->m_header.Direction = packet.Direction;  		header->m_header.OptionalDataLength = 1;  		header->m_header.TickCount = packet.ArrivalTicks;  		header->m_flags = (byte)packet.Flags;  		header->m_opcode = packet.Opcode;  	}  } else {  	bytes = new byte[OutChunkHeader.Size];  	fixed (byte* bytesPtr = bytes) {  		var header = (OutChunkHeader*)bytesPtr;  		header->m_header.ConnectionId = packet.ConnectionId;  		header->m_header.DataLength = data.Length + 4;  		header->m_header.Direction = packet.Direction;  		header->m_header.OptionalDataLength = 0;  		header->m_header.TickCount = packet.ArrivalTicks;  		header->m_opcode = packet.Opcode;  	}  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWritePacket2,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (OutChunkHeaderKamilla*)bytesPtr;  	header->m_header.ConnectionId = packet.ConnectionId;  	header->m_header.DataLength = data.Length + 4;  	header->m_header.Direction = packet.Direction;  	header->m_header.OptionalDataLength = 1;  	header->m_header.TickCount = packet.ArrivalTicks;  	header->m_flags = (byte)packet.Flags;  	header->m_opcode = packet.Opcode;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWritePacket2,The following statement contains a magic number: header->m_header.DataLength = data.Length + 4;  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWritePacket2,The following statement contains a magic number: fixed (byte* bytesPtr = bytes) {  	var header = (OutChunkHeader*)bytesPtr;  	header->m_header.ConnectionId = packet.ConnectionId;  	header->m_header.DataLength = data.Length + 4;  	header->m_header.Direction = packet.Direction;  	header->m_header.OptionalDataLength = 0;  	header->m_header.TickCount = packet.ArrivalTicks;  	header->m_opcode = packet.Opcode;  }  
Magic Number,Kamilla.Network.Logging.Wow,Pkt31NetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\Pkt31NetworkLog.cs,InternalWritePacket2,The following statement contains a magic number: header->m_header.DataLength = data.Length + 4;  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: s_clientBuildInfos = new List<ClientBuildInfo> (50);  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (3' 3' 5)' new uint[] {  	11993'  	// World of Warcraft patch 3.3.5 PTR  	12213'  	// World of Warcraft patch 3.3.5 "Defending the Ruby Sanctum"  	12340'  // World of Warcraft patch 3.3.5a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (3' 3' 5)' new uint[] {  	11993'  	// World of Warcraft patch 3.3.5 PTR  	12213'  	// World of Warcraft patch 3.3.5 "Defending the Ruby Sanctum"  	12340'  // World of Warcraft patch 3.3.5a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (3' 3' 5)' new uint[] {  	11993'  	// World of Warcraft patch 3.3.5 PTR  	12213'  	// World of Warcraft patch 3.3.5 "Defending the Ruby Sanctum"  	12340'  // World of Warcraft patch 3.3.5a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (3' 3' 5)' new uint[] {  	11993'  	// World of Warcraft patch 3.3.5 PTR  	12213'  	// World of Warcraft patch 3.3.5 "Defending the Ruby Sanctum"  	12340'  // World of Warcraft patch 3.3.5a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (3' 3' 5)' new uint[] {  	11993'  	// World of Warcraft patch 3.3.5 PTR  	12213'  	// World of Warcraft patch 3.3.5 "Defending the Ruby Sanctum"  	12340'  // World of Warcraft patch 3.3.5a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (3' 3' 5)' new uint[] {  	11993'  	// World of Warcraft patch 3.3.5 PTR  	12213'  	// World of Warcraft patch 3.3.5 "Defending the Ruby Sanctum"  	12340'  // World of Warcraft patch 3.3.5a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add (new Version (4' 0' 0' 11792)' 13329);  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add (new Version (4' 0' 0' 11792)' 13329);  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add (new Version (4' 0' 0' 11792)' 13329);  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add (new Version (4' 0' 1' 13131)' 13329);  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add (new Version (4' 0' 1' 13131)' 13329);  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add (new Version (4' 0' 1' 13131)' 13329);  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add (new Version (4' 0' 1' 13164)' 13329);  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add (new Version (4' 0' 1' 13164)' 13329);  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add (new Version (4' 0' 1' 13164)' 13329);  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add (new Version (4' 0' 1' 13205)' 13329);  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add (new Version (4' 0' 1' 13205)' 13329);  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add (new Version (4' 0' 1' 13205)' 13329);  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add (new Version (4' 0' 3' 13287)' 13329);  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add (new Version (4' 0' 3' 13287)' 13329);  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add (new Version (4' 0' 3' 13287)' 13329);  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add (new Version (4' 0' 3' 13287)' 13329);  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add (new Version (4' 0' 3' 13329)' 13329);  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add (new Version (4' 0' 3' 13329)' 13329);  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add (new Version (4' 0' 3' 13329)' 13329);  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: Add (new Version (4' 0' 3' 13329)' 13329);  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 0' 6)' new uint[] {  	13561'  	// World of Warcraft patch 4.0.6 PTR  	13596'  	// World of Warcraft patch 4.0.6  	13623'  // World of Warcraft patch 4.0.6a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 0' 6)' new uint[] {  	13561'  	// World of Warcraft patch 4.0.6 PTR  	13596'  	// World of Warcraft patch 4.0.6  	13623'  // World of Warcraft patch 4.0.6a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 0' 6)' new uint[] {  	13561'  	// World of Warcraft patch 4.0.6 PTR  	13596'  	// World of Warcraft patch 4.0.6  	13623'  // World of Warcraft patch 4.0.6a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 0' 6)' new uint[] {  	13561'  	// World of Warcraft patch 4.0.6 PTR  	13596'  	// World of Warcraft patch 4.0.6  	13623'  // World of Warcraft patch 4.0.6a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 0' 6)' new uint[] {  	13561'  	// World of Warcraft patch 4.0.6 PTR  	13596'  	// World of Warcraft patch 4.0.6  	13623'  // World of Warcraft patch 4.0.6a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 1' 0)' new uint[] {  	13682'  	// World of Warcraft patch 4.1.0 PTR  	13707'  	// World of Warcraft patch 4.1.0 PTR  	13726'  	// World of Warcraft patch 4.1.0 PTR  	13750'  	// World of Warcraft patch 4.1.0 PTR  	13793'  	// World of Warcraft patch 4.1.0 PTR  	13812'  	// World of Warcraft patch 4.1.0 PTR  	13850'  	// World of Warcraft patch 4.1.0 PTR  	13860'  	// World of Warcraft patch 4.1.0 PTR  	13875'  	// World of Warcraft patch 4.1.0 PTR  	13914'  	// World of Warcraft patch 4.1.0 "Rise of the Zandalari"  	14007'  // World of Warcraft patch 4.1.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 1' 0)' new uint[] {  	13682'  	// World of Warcraft patch 4.1.0 PTR  	13707'  	// World of Warcraft patch 4.1.0 PTR  	13726'  	// World of Warcraft patch 4.1.0 PTR  	13750'  	// World of Warcraft patch 4.1.0 PTR  	13793'  	// World of Warcraft patch 4.1.0 PTR  	13812'  	// World of Warcraft patch 4.1.0 PTR  	13850'  	// World of Warcraft patch 4.1.0 PTR  	13860'  	// World of Warcraft patch 4.1.0 PTR  	13875'  	// World of Warcraft patch 4.1.0 PTR  	13914'  	// World of Warcraft patch 4.1.0 "Rise of the Zandalari"  	14007'  // World of Warcraft patch 4.1.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 1' 0)' new uint[] {  	13682'  	// World of Warcraft patch 4.1.0 PTR  	13707'  	// World of Warcraft patch 4.1.0 PTR  	13726'  	// World of Warcraft patch 4.1.0 PTR  	13750'  	// World of Warcraft patch 4.1.0 PTR  	13793'  	// World of Warcraft patch 4.1.0 PTR  	13812'  	// World of Warcraft patch 4.1.0 PTR  	13850'  	// World of Warcraft patch 4.1.0 PTR  	13860'  	// World of Warcraft patch 4.1.0 PTR  	13875'  	// World of Warcraft patch 4.1.0 PTR  	13914'  	// World of Warcraft patch 4.1.0 "Rise of the Zandalari"  	14007'  // World of Warcraft patch 4.1.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 1' 0)' new uint[] {  	13682'  	// World of Warcraft patch 4.1.0 PTR  	13707'  	// World of Warcraft patch 4.1.0 PTR  	13726'  	// World of Warcraft patch 4.1.0 PTR  	13750'  	// World of Warcraft patch 4.1.0 PTR  	13793'  	// World of Warcraft patch 4.1.0 PTR  	13812'  	// World of Warcraft patch 4.1.0 PTR  	13850'  	// World of Warcraft patch 4.1.0 PTR  	13860'  	// World of Warcraft patch 4.1.0 PTR  	13875'  	// World of Warcraft patch 4.1.0 PTR  	13914'  	// World of Warcraft patch 4.1.0 "Rise of the Zandalari"  	14007'  // World of Warcraft patch 4.1.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 1' 0)' new uint[] {  	13682'  	// World of Warcraft patch 4.1.0 PTR  	13707'  	// World of Warcraft patch 4.1.0 PTR  	13726'  	// World of Warcraft patch 4.1.0 PTR  	13750'  	// World of Warcraft patch 4.1.0 PTR  	13793'  	// World of Warcraft patch 4.1.0 PTR  	13812'  	// World of Warcraft patch 4.1.0 PTR  	13850'  	// World of Warcraft patch 4.1.0 PTR  	13860'  	// World of Warcraft patch 4.1.0 PTR  	13875'  	// World of Warcraft patch 4.1.0 PTR  	13914'  	// World of Warcraft patch 4.1.0 "Rise of the Zandalari"  	14007'  // World of Warcraft patch 4.1.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 1' 0)' new uint[] {  	13682'  	// World of Warcraft patch 4.1.0 PTR  	13707'  	// World of Warcraft patch 4.1.0 PTR  	13726'  	// World of Warcraft patch 4.1.0 PTR  	13750'  	// World of Warcraft patch 4.1.0 PTR  	13793'  	// World of Warcraft patch 4.1.0 PTR  	13812'  	// World of Warcraft patch 4.1.0 PTR  	13850'  	// World of Warcraft patch 4.1.0 PTR  	13860'  	// World of Warcraft patch 4.1.0 PTR  	13875'  	// World of Warcraft patch 4.1.0 PTR  	13914'  	// World of Warcraft patch 4.1.0 "Rise of the Zandalari"  	14007'  // World of Warcraft patch 4.1.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 1' 0)' new uint[] {  	13682'  	// World of Warcraft patch 4.1.0 PTR  	13707'  	// World of Warcraft patch 4.1.0 PTR  	13726'  	// World of Warcraft patch 4.1.0 PTR  	13750'  	// World of Warcraft patch 4.1.0 PTR  	13793'  	// World of Warcraft patch 4.1.0 PTR  	13812'  	// World of Warcraft patch 4.1.0 PTR  	13850'  	// World of Warcraft patch 4.1.0 PTR  	13860'  	// World of Warcraft patch 4.1.0 PTR  	13875'  	// World of Warcraft patch 4.1.0 PTR  	13914'  	// World of Warcraft patch 4.1.0 "Rise of the Zandalari"  	14007'  // World of Warcraft patch 4.1.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 1' 0)' new uint[] {  	13682'  	// World of Warcraft patch 4.1.0 PTR  	13707'  	// World of Warcraft patch 4.1.0 PTR  	13726'  	// World of Warcraft patch 4.1.0 PTR  	13750'  	// World of Warcraft patch 4.1.0 PTR  	13793'  	// World of Warcraft patch 4.1.0 PTR  	13812'  	// World of Warcraft patch 4.1.0 PTR  	13850'  	// World of Warcraft patch 4.1.0 PTR  	13860'  	// World of Warcraft patch 4.1.0 PTR  	13875'  	// World of Warcraft patch 4.1.0 PTR  	13914'  	// World of Warcraft patch 4.1.0 "Rise of the Zandalari"  	14007'  // World of Warcraft patch 4.1.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 1' 0)' new uint[] {  	13682'  	// World of Warcraft patch 4.1.0 PTR  	13707'  	// World of Warcraft patch 4.1.0 PTR  	13726'  	// World of Warcraft patch 4.1.0 PTR  	13750'  	// World of Warcraft patch 4.1.0 PTR  	13793'  	// World of Warcraft patch 4.1.0 PTR  	13812'  	// World of Warcraft patch 4.1.0 PTR  	13850'  	// World of Warcraft patch 4.1.0 PTR  	13860'  	// World of Warcraft patch 4.1.0 PTR  	13875'  	// World of Warcraft patch 4.1.0 PTR  	13914'  	// World of Warcraft patch 4.1.0 "Rise of the Zandalari"  	14007'  // World of Warcraft patch 4.1.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 1' 0)' new uint[] {  	13682'  	// World of Warcraft patch 4.1.0 PTR  	13707'  	// World of Warcraft patch 4.1.0 PTR  	13726'  	// World of Warcraft patch 4.1.0 PTR  	13750'  	// World of Warcraft patch 4.1.0 PTR  	13793'  	// World of Warcraft patch 4.1.0 PTR  	13812'  	// World of Warcraft patch 4.1.0 PTR  	13850'  	// World of Warcraft patch 4.1.0 PTR  	13860'  	// World of Warcraft patch 4.1.0 PTR  	13875'  	// World of Warcraft patch 4.1.0 PTR  	13914'  	// World of Warcraft patch 4.1.0 "Rise of the Zandalari"  	14007'  // World of Warcraft patch 4.1.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 1' 0)' new uint[] {  	13682'  	// World of Warcraft patch 4.1.0 PTR  	13707'  	// World of Warcraft patch 4.1.0 PTR  	13726'  	// World of Warcraft patch 4.1.0 PTR  	13750'  	// World of Warcraft patch 4.1.0 PTR  	13793'  	// World of Warcraft patch 4.1.0 PTR  	13812'  	// World of Warcraft patch 4.1.0 PTR  	13850'  	// World of Warcraft patch 4.1.0 PTR  	13860'  	// World of Warcraft patch 4.1.0 PTR  	13875'  	// World of Warcraft patch 4.1.0 PTR  	13914'  	// World of Warcraft patch 4.1.0 "Rise of the Zandalari"  	14007'  // World of Warcraft patch 4.1.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 1' 0)' new uint[] {  	13682'  	// World of Warcraft patch 4.1.0 PTR  	13707'  	// World of Warcraft patch 4.1.0 PTR  	13726'  	// World of Warcraft patch 4.1.0 PTR  	13750'  	// World of Warcraft patch 4.1.0 PTR  	13793'  	// World of Warcraft patch 4.1.0 PTR  	13812'  	// World of Warcraft patch 4.1.0 PTR  	13850'  	// World of Warcraft patch 4.1.0 PTR  	13860'  	// World of Warcraft patch 4.1.0 PTR  	13875'  	// World of Warcraft patch 4.1.0 PTR  	13914'  	// World of Warcraft patch 4.1.0 "Rise of the Zandalari"  	14007'  // World of Warcraft patch 4.1.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 2' 0)' new uint[] {  	14002'  	// World of Warcraft patch 4.2.0 PTR  	14040'  	// World of Warcraft patch 4.2.0 PTR  	14107'  	// World of Warcraft patch 4.2.0 PTR  	14133'  	// World of Warcraft patch 4.2.0 PTR  	14199'  	// World of Warcraft patch 4.2.0 PTR  	14241'  	// World of Warcraft patch 4.2.0 PTR  	14265'  	// World of Warcraft patch 4.2.0 PTR  	14288'  	// World of Warcraft patch 4.2.0 PTR  	14299'  	// World of Warcraft patch 4.2.0 PTR  	14313'  	// World of Warcraft patch 4.2.0 PTR  	14316'  	// World of Warcraft patch 4.2.0 PTR  	14333'  	// World of Warcraft patch 4.2.0 "Rage of the Firelands"  	14480'  // World of Warcraft patch 4.2.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 2' 0)' new uint[] {  	14002'  	// World of Warcraft patch 4.2.0 PTR  	14040'  	// World of Warcraft patch 4.2.0 PTR  	14107'  	// World of Warcraft patch 4.2.0 PTR  	14133'  	// World of Warcraft patch 4.2.0 PTR  	14199'  	// World of Warcraft patch 4.2.0 PTR  	14241'  	// World of Warcraft patch 4.2.0 PTR  	14265'  	// World of Warcraft patch 4.2.0 PTR  	14288'  	// World of Warcraft patch 4.2.0 PTR  	14299'  	// World of Warcraft patch 4.2.0 PTR  	14313'  	// World of Warcraft patch 4.2.0 PTR  	14316'  	// World of Warcraft patch 4.2.0 PTR  	14333'  	// World of Warcraft patch 4.2.0 "Rage of the Firelands"  	14480'  // World of Warcraft patch 4.2.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 2' 0)' new uint[] {  	14002'  	// World of Warcraft patch 4.2.0 PTR  	14040'  	// World of Warcraft patch 4.2.0 PTR  	14107'  	// World of Warcraft patch 4.2.0 PTR  	14133'  	// World of Warcraft patch 4.2.0 PTR  	14199'  	// World of Warcraft patch 4.2.0 PTR  	14241'  	// World of Warcraft patch 4.2.0 PTR  	14265'  	// World of Warcraft patch 4.2.0 PTR  	14288'  	// World of Warcraft patch 4.2.0 PTR  	14299'  	// World of Warcraft patch 4.2.0 PTR  	14313'  	// World of Warcraft patch 4.2.0 PTR  	14316'  	// World of Warcraft patch 4.2.0 PTR  	14333'  	// World of Warcraft patch 4.2.0 "Rage of the Firelands"  	14480'  // World of Warcraft patch 4.2.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 2' 0)' new uint[] {  	14002'  	// World of Warcraft patch 4.2.0 PTR  	14040'  	// World of Warcraft patch 4.2.0 PTR  	14107'  	// World of Warcraft patch 4.2.0 PTR  	14133'  	// World of Warcraft patch 4.2.0 PTR  	14199'  	// World of Warcraft patch 4.2.0 PTR  	14241'  	// World of Warcraft patch 4.2.0 PTR  	14265'  	// World of Warcraft patch 4.2.0 PTR  	14288'  	// World of Warcraft patch 4.2.0 PTR  	14299'  	// World of Warcraft patch 4.2.0 PTR  	14313'  	// World of Warcraft patch 4.2.0 PTR  	14316'  	// World of Warcraft patch 4.2.0 PTR  	14333'  	// World of Warcraft patch 4.2.0 "Rage of the Firelands"  	14480'  // World of Warcraft patch 4.2.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 2' 0)' new uint[] {  	14002'  	// World of Warcraft patch 4.2.0 PTR  	14040'  	// World of Warcraft patch 4.2.0 PTR  	14107'  	// World of Warcraft patch 4.2.0 PTR  	14133'  	// World of Warcraft patch 4.2.0 PTR  	14199'  	// World of Warcraft patch 4.2.0 PTR  	14241'  	// World of Warcraft patch 4.2.0 PTR  	14265'  	// World of Warcraft patch 4.2.0 PTR  	14288'  	// World of Warcraft patch 4.2.0 PTR  	14299'  	// World of Warcraft patch 4.2.0 PTR  	14313'  	// World of Warcraft patch 4.2.0 PTR  	14316'  	// World of Warcraft patch 4.2.0 PTR  	14333'  	// World of Warcraft patch 4.2.0 "Rage of the Firelands"  	14480'  // World of Warcraft patch 4.2.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 2' 0)' new uint[] {  	14002'  	// World of Warcraft patch 4.2.0 PTR  	14040'  	// World of Warcraft patch 4.2.0 PTR  	14107'  	// World of Warcraft patch 4.2.0 PTR  	14133'  	// World of Warcraft patch 4.2.0 PTR  	14199'  	// World of Warcraft patch 4.2.0 PTR  	14241'  	// World of Warcraft patch 4.2.0 PTR  	14265'  	// World of Warcraft patch 4.2.0 PTR  	14288'  	// World of Warcraft patch 4.2.0 PTR  	14299'  	// World of Warcraft patch 4.2.0 PTR  	14313'  	// World of Warcraft patch 4.2.0 PTR  	14316'  	// World of Warcraft patch 4.2.0 PTR  	14333'  	// World of Warcraft patch 4.2.0 "Rage of the Firelands"  	14480'  // World of Warcraft patch 4.2.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 2' 0)' new uint[] {  	14002'  	// World of Warcraft patch 4.2.0 PTR  	14040'  	// World of Warcraft patch 4.2.0 PTR  	14107'  	// World of Warcraft patch 4.2.0 PTR  	14133'  	// World of Warcraft patch 4.2.0 PTR  	14199'  	// World of Warcraft patch 4.2.0 PTR  	14241'  	// World of Warcraft patch 4.2.0 PTR  	14265'  	// World of Warcraft patch 4.2.0 PTR  	14288'  	// World of Warcraft patch 4.2.0 PTR  	14299'  	// World of Warcraft patch 4.2.0 PTR  	14313'  	// World of Warcraft patch 4.2.0 PTR  	14316'  	// World of Warcraft patch 4.2.0 PTR  	14333'  	// World of Warcraft patch 4.2.0 "Rage of the Firelands"  	14480'  // World of Warcraft patch 4.2.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 2' 0)' new uint[] {  	14002'  	// World of Warcraft patch 4.2.0 PTR  	14040'  	// World of Warcraft patch 4.2.0 PTR  	14107'  	// World of Warcraft patch 4.2.0 PTR  	14133'  	// World of Warcraft patch 4.2.0 PTR  	14199'  	// World of Warcraft patch 4.2.0 PTR  	14241'  	// World of Warcraft patch 4.2.0 PTR  	14265'  	// World of Warcraft patch 4.2.0 PTR  	14288'  	// World of Warcraft patch 4.2.0 PTR  	14299'  	// World of Warcraft patch 4.2.0 PTR  	14313'  	// World of Warcraft patch 4.2.0 PTR  	14316'  	// World of Warcraft patch 4.2.0 PTR  	14333'  	// World of Warcraft patch 4.2.0 "Rage of the Firelands"  	14480'  // World of Warcraft patch 4.2.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 2' 0)' new uint[] {  	14002'  	// World of Warcraft patch 4.2.0 PTR  	14040'  	// World of Warcraft patch 4.2.0 PTR  	14107'  	// World of Warcraft patch 4.2.0 PTR  	14133'  	// World of Warcraft patch 4.2.0 PTR  	14199'  	// World of Warcraft patch 4.2.0 PTR  	14241'  	// World of Warcraft patch 4.2.0 PTR  	14265'  	// World of Warcraft patch 4.2.0 PTR  	14288'  	// World of Warcraft patch 4.2.0 PTR  	14299'  	// World of Warcraft patch 4.2.0 PTR  	14313'  	// World of Warcraft patch 4.2.0 PTR  	14316'  	// World of Warcraft patch 4.2.0 PTR  	14333'  	// World of Warcraft patch 4.2.0 "Rage of the Firelands"  	14480'  // World of Warcraft patch 4.2.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 2' 0)' new uint[] {  	14002'  	// World of Warcraft patch 4.2.0 PTR  	14040'  	// World of Warcraft patch 4.2.0 PTR  	14107'  	// World of Warcraft patch 4.2.0 PTR  	14133'  	// World of Warcraft patch 4.2.0 PTR  	14199'  	// World of Warcraft patch 4.2.0 PTR  	14241'  	// World of Warcraft patch 4.2.0 PTR  	14265'  	// World of Warcraft patch 4.2.0 PTR  	14288'  	// World of Warcraft patch 4.2.0 PTR  	14299'  	// World of Warcraft patch 4.2.0 PTR  	14313'  	// World of Warcraft patch 4.2.0 PTR  	14316'  	// World of Warcraft patch 4.2.0 PTR  	14333'  	// World of Warcraft patch 4.2.0 "Rage of the Firelands"  	14480'  // World of Warcraft patch 4.2.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 2' 0)' new uint[] {  	14002'  	// World of Warcraft patch 4.2.0 PTR  	14040'  	// World of Warcraft patch 4.2.0 PTR  	14107'  	// World of Warcraft patch 4.2.0 PTR  	14133'  	// World of Warcraft patch 4.2.0 PTR  	14199'  	// World of Warcraft patch 4.2.0 PTR  	14241'  	// World of Warcraft patch 4.2.0 PTR  	14265'  	// World of Warcraft patch 4.2.0 PTR  	14288'  	// World of Warcraft patch 4.2.0 PTR  	14299'  	// World of Warcraft patch 4.2.0 PTR  	14313'  	// World of Warcraft patch 4.2.0 PTR  	14316'  	// World of Warcraft patch 4.2.0 PTR  	14333'  	// World of Warcraft patch 4.2.0 "Rage of the Firelands"  	14480'  // World of Warcraft patch 4.2.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 2' 0)' new uint[] {  	14002'  	// World of Warcraft patch 4.2.0 PTR  	14040'  	// World of Warcraft patch 4.2.0 PTR  	14107'  	// World of Warcraft patch 4.2.0 PTR  	14133'  	// World of Warcraft patch 4.2.0 PTR  	14199'  	// World of Warcraft patch 4.2.0 PTR  	14241'  	// World of Warcraft patch 4.2.0 PTR  	14265'  	// World of Warcraft patch 4.2.0 PTR  	14288'  	// World of Warcraft patch 4.2.0 PTR  	14299'  	// World of Warcraft patch 4.2.0 PTR  	14313'  	// World of Warcraft patch 4.2.0 PTR  	14316'  	// World of Warcraft patch 4.2.0 PTR  	14333'  	// World of Warcraft patch 4.2.0 "Rage of the Firelands"  	14480'  // World of Warcraft patch 4.2.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 2' 0)' new uint[] {  	14002'  	// World of Warcraft patch 4.2.0 PTR  	14040'  	// World of Warcraft patch 4.2.0 PTR  	14107'  	// World of Warcraft patch 4.2.0 PTR  	14133'  	// World of Warcraft patch 4.2.0 PTR  	14199'  	// World of Warcraft patch 4.2.0 PTR  	14241'  	// World of Warcraft patch 4.2.0 PTR  	14265'  	// World of Warcraft patch 4.2.0 PTR  	14288'  	// World of Warcraft patch 4.2.0 PTR  	14299'  	// World of Warcraft patch 4.2.0 PTR  	14313'  	// World of Warcraft patch 4.2.0 PTR  	14316'  	// World of Warcraft patch 4.2.0 PTR  	14333'  	// World of Warcraft patch 4.2.0 "Rage of the Firelands"  	14480'  // World of Warcraft patch 4.2.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 2' 0)' new uint[] {  	14002'  	// World of Warcraft patch 4.2.0 PTR  	14040'  	// World of Warcraft patch 4.2.0 PTR  	14107'  	// World of Warcraft patch 4.2.0 PTR  	14133'  	// World of Warcraft patch 4.2.0 PTR  	14199'  	// World of Warcraft patch 4.2.0 PTR  	14241'  	// World of Warcraft patch 4.2.0 PTR  	14265'  	// World of Warcraft patch 4.2.0 PTR  	14288'  	// World of Warcraft patch 4.2.0 PTR  	14299'  	// World of Warcraft patch 4.2.0 PTR  	14313'  	// World of Warcraft patch 4.2.0 PTR  	14316'  	// World of Warcraft patch 4.2.0 PTR  	14333'  	// World of Warcraft patch 4.2.0 "Rage of the Firelands"  	14480'  // World of Warcraft patch 4.2.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 2' 0)' new uint[] {  	14002'  	// World of Warcraft patch 4.2.0 PTR  	14040'  	// World of Warcraft patch 4.2.0 PTR  	14107'  	// World of Warcraft patch 4.2.0 PTR  	14133'  	// World of Warcraft patch 4.2.0 PTR  	14199'  	// World of Warcraft patch 4.2.0 PTR  	14241'  	// World of Warcraft patch 4.2.0 PTR  	14265'  	// World of Warcraft patch 4.2.0 PTR  	14288'  	// World of Warcraft patch 4.2.0 PTR  	14299'  	// World of Warcraft patch 4.2.0 PTR  	14313'  	// World of Warcraft patch 4.2.0 PTR  	14316'  	// World of Warcraft patch 4.2.0 PTR  	14333'  	// World of Warcraft patch 4.2.0 "Rage of the Firelands"  	14480'  // World of Warcraft patch 4.2.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 2' 2)' new uint[] {  	14522'  	// World of Warcraft patch 4.2.2 PTR  	14534'  	// World of Warcraft patch 4.2.2 PTR  	14545'  // World of Warcraft patch 4.2.2  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 2' 2)' new uint[] {  	14522'  	// World of Warcraft patch 4.2.2 PTR  	14534'  	// World of Warcraft patch 4.2.2 PTR  	14545'  // World of Warcraft patch 4.2.2  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 2' 2)' new uint[] {  	14522'  	// World of Warcraft patch 4.2.2 PTR  	14534'  	// World of Warcraft patch 4.2.2 PTR  	14545'  // World of Warcraft patch 4.2.2  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 2' 2)' new uint[] {  	14522'  	// World of Warcraft patch 4.2.2 PTR  	14534'  	// World of Warcraft patch 4.2.2 PTR  	14545'  // World of Warcraft patch 4.2.2  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 2' 2)' new uint[] {  	14522'  	// World of Warcraft patch 4.2.2 PTR  	14534'  	// World of Warcraft patch 4.2.2 PTR  	14545'  // World of Warcraft patch 4.2.2  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 2' 2)' new uint[] {  	14522'  	// World of Warcraft patch 4.2.2 PTR  	14534'  	// World of Warcraft patch 4.2.2 PTR  	14545'  // World of Warcraft patch 4.2.2  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 0)' new uint[] {  	14732'  	// World of Warcraft patch 4.3.0 PTR  	14791'  	// World of Warcraft patch 4.3.0 PTR  	14809'  	// World of Warcraft patch 4.3.0 PTR  	14849'  	// World of Warcraft patch 4.3.0 PTR  	14890'  	// World of Warcraft patch 4.3.0 PTR  	14899'  	// World of Warcraft patch 4.3.0 PTR  	14911'  	// World of Warcraft patch 4.3.0 PTR  	14942'  	// World of Warcraft patch 4.3.0 PTR  	14966'  	// World of Warcraft patch 4.3.0 PTR  	14976'  	// World of Warcraft patch 4.3.0 PTR  	14980'  	// World of Warcraft patch 4.3.0 PTR  	14995'  	// World of Warcraft patch 4.3.0 PTR  	15005'  	// World of Warcraft patch 4.3.0  	15050'  // World of Warcraft patch 4.3.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 0)' new uint[] {  	14732'  	// World of Warcraft patch 4.3.0 PTR  	14791'  	// World of Warcraft patch 4.3.0 PTR  	14809'  	// World of Warcraft patch 4.3.0 PTR  	14849'  	// World of Warcraft patch 4.3.0 PTR  	14890'  	// World of Warcraft patch 4.3.0 PTR  	14899'  	// World of Warcraft patch 4.3.0 PTR  	14911'  	// World of Warcraft patch 4.3.0 PTR  	14942'  	// World of Warcraft patch 4.3.0 PTR  	14966'  	// World of Warcraft patch 4.3.0 PTR  	14976'  	// World of Warcraft patch 4.3.0 PTR  	14980'  	// World of Warcraft patch 4.3.0 PTR  	14995'  	// World of Warcraft patch 4.3.0 PTR  	15005'  	// World of Warcraft patch 4.3.0  	15050'  // World of Warcraft patch 4.3.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 0)' new uint[] {  	14732'  	// World of Warcraft patch 4.3.0 PTR  	14791'  	// World of Warcraft patch 4.3.0 PTR  	14809'  	// World of Warcraft patch 4.3.0 PTR  	14849'  	// World of Warcraft patch 4.3.0 PTR  	14890'  	// World of Warcraft patch 4.3.0 PTR  	14899'  	// World of Warcraft patch 4.3.0 PTR  	14911'  	// World of Warcraft patch 4.3.0 PTR  	14942'  	// World of Warcraft patch 4.3.0 PTR  	14966'  	// World of Warcraft patch 4.3.0 PTR  	14976'  	// World of Warcraft patch 4.3.0 PTR  	14980'  	// World of Warcraft patch 4.3.0 PTR  	14995'  	// World of Warcraft patch 4.3.0 PTR  	15005'  	// World of Warcraft patch 4.3.0  	15050'  // World of Warcraft patch 4.3.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 0)' new uint[] {  	14732'  	// World of Warcraft patch 4.3.0 PTR  	14791'  	// World of Warcraft patch 4.3.0 PTR  	14809'  	// World of Warcraft patch 4.3.0 PTR  	14849'  	// World of Warcraft patch 4.3.0 PTR  	14890'  	// World of Warcraft patch 4.3.0 PTR  	14899'  	// World of Warcraft patch 4.3.0 PTR  	14911'  	// World of Warcraft patch 4.3.0 PTR  	14942'  	// World of Warcraft patch 4.3.0 PTR  	14966'  	// World of Warcraft patch 4.3.0 PTR  	14976'  	// World of Warcraft patch 4.3.0 PTR  	14980'  	// World of Warcraft patch 4.3.0 PTR  	14995'  	// World of Warcraft patch 4.3.0 PTR  	15005'  	// World of Warcraft patch 4.3.0  	15050'  // World of Warcraft patch 4.3.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 0)' new uint[] {  	14732'  	// World of Warcraft patch 4.3.0 PTR  	14791'  	// World of Warcraft patch 4.3.0 PTR  	14809'  	// World of Warcraft patch 4.3.0 PTR  	14849'  	// World of Warcraft patch 4.3.0 PTR  	14890'  	// World of Warcraft patch 4.3.0 PTR  	14899'  	// World of Warcraft patch 4.3.0 PTR  	14911'  	// World of Warcraft patch 4.3.0 PTR  	14942'  	// World of Warcraft patch 4.3.0 PTR  	14966'  	// World of Warcraft patch 4.3.0 PTR  	14976'  	// World of Warcraft patch 4.3.0 PTR  	14980'  	// World of Warcraft patch 4.3.0 PTR  	14995'  	// World of Warcraft patch 4.3.0 PTR  	15005'  	// World of Warcraft patch 4.3.0  	15050'  // World of Warcraft patch 4.3.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 0)' new uint[] {  	14732'  	// World of Warcraft patch 4.3.0 PTR  	14791'  	// World of Warcraft patch 4.3.0 PTR  	14809'  	// World of Warcraft patch 4.3.0 PTR  	14849'  	// World of Warcraft patch 4.3.0 PTR  	14890'  	// World of Warcraft patch 4.3.0 PTR  	14899'  	// World of Warcraft patch 4.3.0 PTR  	14911'  	// World of Warcraft patch 4.3.0 PTR  	14942'  	// World of Warcraft patch 4.3.0 PTR  	14966'  	// World of Warcraft patch 4.3.0 PTR  	14976'  	// World of Warcraft patch 4.3.0 PTR  	14980'  	// World of Warcraft patch 4.3.0 PTR  	14995'  	// World of Warcraft patch 4.3.0 PTR  	15005'  	// World of Warcraft patch 4.3.0  	15050'  // World of Warcraft patch 4.3.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 0)' new uint[] {  	14732'  	// World of Warcraft patch 4.3.0 PTR  	14791'  	// World of Warcraft patch 4.3.0 PTR  	14809'  	// World of Warcraft patch 4.3.0 PTR  	14849'  	// World of Warcraft patch 4.3.0 PTR  	14890'  	// World of Warcraft patch 4.3.0 PTR  	14899'  	// World of Warcraft patch 4.3.0 PTR  	14911'  	// World of Warcraft patch 4.3.0 PTR  	14942'  	// World of Warcraft patch 4.3.0 PTR  	14966'  	// World of Warcraft patch 4.3.0 PTR  	14976'  	// World of Warcraft patch 4.3.0 PTR  	14980'  	// World of Warcraft patch 4.3.0 PTR  	14995'  	// World of Warcraft patch 4.3.0 PTR  	15005'  	// World of Warcraft patch 4.3.0  	15050'  // World of Warcraft patch 4.3.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 0)' new uint[] {  	14732'  	// World of Warcraft patch 4.3.0 PTR  	14791'  	// World of Warcraft patch 4.3.0 PTR  	14809'  	// World of Warcraft patch 4.3.0 PTR  	14849'  	// World of Warcraft patch 4.3.0 PTR  	14890'  	// World of Warcraft patch 4.3.0 PTR  	14899'  	// World of Warcraft patch 4.3.0 PTR  	14911'  	// World of Warcraft patch 4.3.0 PTR  	14942'  	// World of Warcraft patch 4.3.0 PTR  	14966'  	// World of Warcraft patch 4.3.0 PTR  	14976'  	// World of Warcraft patch 4.3.0 PTR  	14980'  	// World of Warcraft patch 4.3.0 PTR  	14995'  	// World of Warcraft patch 4.3.0 PTR  	15005'  	// World of Warcraft patch 4.3.0  	15050'  // World of Warcraft patch 4.3.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 0)' new uint[] {  	14732'  	// World of Warcraft patch 4.3.0 PTR  	14791'  	// World of Warcraft patch 4.3.0 PTR  	14809'  	// World of Warcraft patch 4.3.0 PTR  	14849'  	// World of Warcraft patch 4.3.0 PTR  	14890'  	// World of Warcraft patch 4.3.0 PTR  	14899'  	// World of Warcraft patch 4.3.0 PTR  	14911'  	// World of Warcraft patch 4.3.0 PTR  	14942'  	// World of Warcraft patch 4.3.0 PTR  	14966'  	// World of Warcraft patch 4.3.0 PTR  	14976'  	// World of Warcraft patch 4.3.0 PTR  	14980'  	// World of Warcraft patch 4.3.0 PTR  	14995'  	// World of Warcraft patch 4.3.0 PTR  	15005'  	// World of Warcraft patch 4.3.0  	15050'  // World of Warcraft patch 4.3.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 0)' new uint[] {  	14732'  	// World of Warcraft patch 4.3.0 PTR  	14791'  	// World of Warcraft patch 4.3.0 PTR  	14809'  	// World of Warcraft patch 4.3.0 PTR  	14849'  	// World of Warcraft patch 4.3.0 PTR  	14890'  	// World of Warcraft patch 4.3.0 PTR  	14899'  	// World of Warcraft patch 4.3.0 PTR  	14911'  	// World of Warcraft patch 4.3.0 PTR  	14942'  	// World of Warcraft patch 4.3.0 PTR  	14966'  	// World of Warcraft patch 4.3.0 PTR  	14976'  	// World of Warcraft patch 4.3.0 PTR  	14980'  	// World of Warcraft patch 4.3.0 PTR  	14995'  	// World of Warcraft patch 4.3.0 PTR  	15005'  	// World of Warcraft patch 4.3.0  	15050'  // World of Warcraft patch 4.3.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 0)' new uint[] {  	14732'  	// World of Warcraft patch 4.3.0 PTR  	14791'  	// World of Warcraft patch 4.3.0 PTR  	14809'  	// World of Warcraft patch 4.3.0 PTR  	14849'  	// World of Warcraft patch 4.3.0 PTR  	14890'  	// World of Warcraft patch 4.3.0 PTR  	14899'  	// World of Warcraft patch 4.3.0 PTR  	14911'  	// World of Warcraft patch 4.3.0 PTR  	14942'  	// World of Warcraft patch 4.3.0 PTR  	14966'  	// World of Warcraft patch 4.3.0 PTR  	14976'  	// World of Warcraft patch 4.3.0 PTR  	14980'  	// World of Warcraft patch 4.3.0 PTR  	14995'  	// World of Warcraft patch 4.3.0 PTR  	15005'  	// World of Warcraft patch 4.3.0  	15050'  // World of Warcraft patch 4.3.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 0)' new uint[] {  	14732'  	// World of Warcraft patch 4.3.0 PTR  	14791'  	// World of Warcraft patch 4.3.0 PTR  	14809'  	// World of Warcraft patch 4.3.0 PTR  	14849'  	// World of Warcraft patch 4.3.0 PTR  	14890'  	// World of Warcraft patch 4.3.0 PTR  	14899'  	// World of Warcraft patch 4.3.0 PTR  	14911'  	// World of Warcraft patch 4.3.0 PTR  	14942'  	// World of Warcraft patch 4.3.0 PTR  	14966'  	// World of Warcraft patch 4.3.0 PTR  	14976'  	// World of Warcraft patch 4.3.0 PTR  	14980'  	// World of Warcraft patch 4.3.0 PTR  	14995'  	// World of Warcraft patch 4.3.0 PTR  	15005'  	// World of Warcraft patch 4.3.0  	15050'  // World of Warcraft patch 4.3.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 0)' new uint[] {  	14732'  	// World of Warcraft patch 4.3.0 PTR  	14791'  	// World of Warcraft patch 4.3.0 PTR  	14809'  	// World of Warcraft patch 4.3.0 PTR  	14849'  	// World of Warcraft patch 4.3.0 PTR  	14890'  	// World of Warcraft patch 4.3.0 PTR  	14899'  	// World of Warcraft patch 4.3.0 PTR  	14911'  	// World of Warcraft patch 4.3.0 PTR  	14942'  	// World of Warcraft patch 4.3.0 PTR  	14966'  	// World of Warcraft patch 4.3.0 PTR  	14976'  	// World of Warcraft patch 4.3.0 PTR  	14980'  	// World of Warcraft patch 4.3.0 PTR  	14995'  	// World of Warcraft patch 4.3.0 PTR  	15005'  	// World of Warcraft patch 4.3.0  	15050'  // World of Warcraft patch 4.3.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 0)' new uint[] {  	14732'  	// World of Warcraft patch 4.3.0 PTR  	14791'  	// World of Warcraft patch 4.3.0 PTR  	14809'  	// World of Warcraft patch 4.3.0 PTR  	14849'  	// World of Warcraft patch 4.3.0 PTR  	14890'  	// World of Warcraft patch 4.3.0 PTR  	14899'  	// World of Warcraft patch 4.3.0 PTR  	14911'  	// World of Warcraft patch 4.3.0 PTR  	14942'  	// World of Warcraft patch 4.3.0 PTR  	14966'  	// World of Warcraft patch 4.3.0 PTR  	14976'  	// World of Warcraft patch 4.3.0 PTR  	14980'  	// World of Warcraft patch 4.3.0 PTR  	14995'  	// World of Warcraft patch 4.3.0 PTR  	15005'  	// World of Warcraft patch 4.3.0  	15050'  // World of Warcraft patch 4.3.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 0)' new uint[] {  	14732'  	// World of Warcraft patch 4.3.0 PTR  	14791'  	// World of Warcraft patch 4.3.0 PTR  	14809'  	// World of Warcraft patch 4.3.0 PTR  	14849'  	// World of Warcraft patch 4.3.0 PTR  	14890'  	// World of Warcraft patch 4.3.0 PTR  	14899'  	// World of Warcraft patch 4.3.0 PTR  	14911'  	// World of Warcraft patch 4.3.0 PTR  	14942'  	// World of Warcraft patch 4.3.0 PTR  	14966'  	// World of Warcraft patch 4.3.0 PTR  	14976'  	// World of Warcraft patch 4.3.0 PTR  	14980'  	// World of Warcraft patch 4.3.0 PTR  	14995'  	// World of Warcraft patch 4.3.0 PTR  	15005'  	// World of Warcraft patch 4.3.0  	15050'  // World of Warcraft patch 4.3.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 0)' new uint[] {  	14732'  	// World of Warcraft patch 4.3.0 PTR  	14791'  	// World of Warcraft patch 4.3.0 PTR  	14809'  	// World of Warcraft patch 4.3.0 PTR  	14849'  	// World of Warcraft patch 4.3.0 PTR  	14890'  	// World of Warcraft patch 4.3.0 PTR  	14899'  	// World of Warcraft patch 4.3.0 PTR  	14911'  	// World of Warcraft patch 4.3.0 PTR  	14942'  	// World of Warcraft patch 4.3.0 PTR  	14966'  	// World of Warcraft patch 4.3.0 PTR  	14976'  	// World of Warcraft patch 4.3.0 PTR  	14980'  	// World of Warcraft patch 4.3.0 PTR  	14995'  	// World of Warcraft patch 4.3.0 PTR  	15005'  	// World of Warcraft patch 4.3.0  	15050'  // World of Warcraft patch 4.3.0a  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 2)' new uint[] {  	15148'  	// World of Warcraft patch 4.3.2 PTR  	15171'  	// World of Warcraft patch 4.3.2 PTR  	15176'  	// World of Warcraft patch 4.3.2 PTR  	15201'  	// World of Warcraft patch 4.3.2 PTR  	15211'  // World of Warcraft patch 4.3.2  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 2)' new uint[] {  	15148'  	// World of Warcraft patch 4.3.2 PTR  	15171'  	// World of Warcraft patch 4.3.2 PTR  	15176'  	// World of Warcraft patch 4.3.2 PTR  	15201'  	// World of Warcraft patch 4.3.2 PTR  	15211'  // World of Warcraft patch 4.3.2  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 2)' new uint[] {  	15148'  	// World of Warcraft patch 4.3.2 PTR  	15171'  	// World of Warcraft patch 4.3.2 PTR  	15176'  	// World of Warcraft patch 4.3.2 PTR  	15201'  	// World of Warcraft patch 4.3.2 PTR  	15211'  // World of Warcraft patch 4.3.2  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 2)' new uint[] {  	15148'  	// World of Warcraft patch 4.3.2 PTR  	15171'  	// World of Warcraft patch 4.3.2 PTR  	15176'  	// World of Warcraft patch 4.3.2 PTR  	15201'  	// World of Warcraft patch 4.3.2 PTR  	15211'  // World of Warcraft patch 4.3.2  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 2)' new uint[] {  	15148'  	// World of Warcraft patch 4.3.2 PTR  	15171'  	// World of Warcraft patch 4.3.2 PTR  	15176'  	// World of Warcraft patch 4.3.2 PTR  	15201'  	// World of Warcraft patch 4.3.2 PTR  	15211'  // World of Warcraft patch 4.3.2  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 2)' new uint[] {  	15148'  	// World of Warcraft patch 4.3.2 PTR  	15171'  	// World of Warcraft patch 4.3.2 PTR  	15176'  	// World of Warcraft patch 4.3.2 PTR  	15201'  	// World of Warcraft patch 4.3.2 PTR  	15211'  // World of Warcraft patch 4.3.2  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 2)' new uint[] {  	15148'  	// World of Warcraft patch 4.3.2 PTR  	15171'  	// World of Warcraft patch 4.3.2 PTR  	15176'  	// World of Warcraft patch 4.3.2 PTR  	15201'  	// World of Warcraft patch 4.3.2 PTR  	15211'  // World of Warcraft patch 4.3.2  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 2)' new uint[] {  	15148'  	// World of Warcraft patch 4.3.2 PTR  	15171'  	// World of Warcraft patch 4.3.2 PTR  	15176'  	// World of Warcraft patch 4.3.2 PTR  	15201'  	// World of Warcraft patch 4.3.2 PTR  	15211'  // World of Warcraft patch 4.3.2  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 3)' new uint[] {  	15314'  	// World of Warcraft patch 4.3.3 PTR  	15338'  	// World of Warcraft patch 4.3.3 PTR  	15354'  // World of Warcraft patch 4.3.3  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 3)' new uint[] {  	15314'  	// World of Warcraft patch 4.3.3 PTR  	15338'  	// World of Warcraft patch 4.3.3 PTR  	15354'  // World of Warcraft patch 4.3.3  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 3)' new uint[] {  	15314'  	// World of Warcraft patch 4.3.3 PTR  	15338'  	// World of Warcraft patch 4.3.3 PTR  	15354'  // World of Warcraft patch 4.3.3  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 3)' new uint[] {  	15314'  	// World of Warcraft patch 4.3.3 PTR  	15338'  	// World of Warcraft patch 4.3.3 PTR  	15354'  // World of Warcraft patch 4.3.3  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 3)' new uint[] {  	15314'  	// World of Warcraft patch 4.3.3 PTR  	15338'  	// World of Warcraft patch 4.3.3 PTR  	15354'  // World of Warcraft patch 4.3.3  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 3)' new uint[] {  	15314'  	// World of Warcraft patch 4.3.3 PTR  	15338'  	// World of Warcraft patch 4.3.3 PTR  	15354'  // World of Warcraft patch 4.3.3  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 4)' new uint[] {  	15499'  	// World of Warcraft patch 4.3.4 PTR  	15531'  // World of Warcraft patch 4.3.4 PTR  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 4)' new uint[] {  	15499'  	// World of Warcraft patch 4.3.4 PTR  	15531'  // World of Warcraft patch 4.3.4 PTR  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 4)' new uint[] {  	15499'  	// World of Warcraft patch 4.3.4 PTR  	15531'  // World of Warcraft patch 4.3.4 PTR  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 4)' new uint[] {  	15499'  	// World of Warcraft patch 4.3.4 PTR  	15531'  // World of Warcraft patch 4.3.4 PTR  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (4' 3' 4)' new uint[] {  	15499'  	// World of Warcraft patch 4.3.4 PTR  	15531'  // World of Warcraft patch 4.3.4 PTR  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (5' 0' 1)' "MistsOfPandariaBeta"' new uint[] {  	15464'  	// World of Warcraft patch 5.0.1 Beta  	15508'  // World of Warcraft patch 5.0.1 Beta  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (5' 0' 1)' "MistsOfPandariaBeta"' new uint[] {  	15464'  	// World of Warcraft patch 5.0.1 Beta  	15508'  // World of Warcraft patch 5.0.1 Beta  });  
Magic Number,Kamilla.Network.Logging.Wow,WowNetworkLog,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Logging\Wow\WowNetworkLog.cs,WowNetworkLog,The following statement contains a magic number: ChainAdd (new Version (5' 0' 1)' "MistsOfPandariaBeta"' new uint[] {  	15464'  	// World of Warcraft patch 5.0.1 Beta  	15508'  // World of Warcraft patch 5.0.1 Beta  });  
Magic Number,Kamilla.Network.Protocols.Wow,StreamHandlerExtensions,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Protocols\Wow\StreamHandlerExtensions.cs,DecompressBlock,The following statement contains a magic number: reader.Skip (2);  
Magic Number,Kamilla.Network.Protocols.Wow,VectorPackingExtensions,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Protocols\Wow\VectorPackingExtensions.cs,Pack,The following statement contains a magic number: return (ulong)(z | (y << 21) | (x << 42));  
Magic Number,Kamilla.Network.Protocols.Wow,VectorPackingExtensions,F:\newReposMay17\LordJZ_Kamilla\Kamilla.Wow\Network\Protocols\Wow\VectorPackingExtensions.cs,Pack,The following statement contains a magic number: return (ulong)(z | (y << 21) | (x << 42));  
