Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,STPSLDemo,UsageHistoryControl,F:\newReposMay17\amibar_SmartThreadPool\STPSLDemo\UsageHistoryControl.xaml.cs,DrawLine,The method has 5 parameters.
Long Statement,STPSLDemo,App,F:\newReposMay17\amibar_SmartThreadPool\STPSLDemo\App.xaml.cs,ReportErrorToDOM,The length of the statement  "		System.Windows.Browser.HtmlPage.Window.Eval ("throw new Error(\"Unhandled Error in Silverlight 2 Application " + errorMsg + "\");"); " is 132.
Long Statement,STPSLDemo,UsageHistoryControl,F:\newReposMay17\amibar_SmartThreadPool\STPSLDemo\UsageHistoryControl.xaml.cs,Redraw,The length of the statement  "		DrawLine (Colors.Red' (int)Width - (i - 1) * _shiftStep' (int)Height - prevVal2' (int)Width - i * _shiftStep' (int)Height - val2); " is 130.
Empty Catch Block,STPSLDemo,App,F:\newReposMay17\amibar_SmartThreadPool\STPSLDemo\App.xaml.cs,ReportErrorToDOM,The method has an empty catch block.
Magic Number,STPSLDemo,Page,F:\newReposMay17\amibar_SmartThreadPool\STPSLDemo\Page.xaml.cs,Page,The following statement contains a magic number: _timer.Interval = new TimeSpan (0' 0' 0' 0' 500);  
Magic Number,STPSLDemo,Page,F:\newReposMay17\amibar_SmartThreadPool\STPSLDemo\Page.xaml.cs,Page,The following statement contains a magic number: _spinMaxThreads.Value = 10;  
Magic Number,STPSLDemo,Page,F:\newReposMay17\amibar_SmartThreadPool\STPSLDemo\Page.xaml.cs,Page,The following statement contains a magic number: _spinIdleTimeout.Value = 5;  
Magic Number,STPSLDemo,Page,F:\newReposMay17\amibar_SmartThreadPool\STPSLDemo\Page.xaml.cs,Page,The following statement contains a magic number: _spinWorkItemTime.Value = 100;  
Magic Number,STPSLDemo,Page,F:\newReposMay17\amibar_SmartThreadPool\STPSLDemo\Page.xaml.cs,Page,The following statement contains a magic number: _spinInterval.Value = 100;  
Magic Number,STPSLDemo,Page,F:\newReposMay17\amibar_SmartThreadPool\STPSLDemo\Page.xaml.cs,Start_Click,The following statement contains a magic number: stpStartInfo.IdleTimeout = _spinIdleTimeout.Value * 1000;  
Magic Number,STPSLDemo,Page,F:\newReposMay17\amibar_SmartThreadPool\STPSLDemo\Page.xaml.cs,Stop_Click,The following statement contains a magic number: _stp.Shutdown (true' 1000);  
Magic Number,STPSLDemo,SpinButton,F:\newReposMay17\amibar_SmartThreadPool\STPSLDemo\SpinButton.xaml.cs,SpinButton,The following statement contains a magic number: Value = 5;  
Magic Number,STPSLDemo,SpinButton,F:\newReposMay17\amibar_SmartThreadPool\STPSLDemo\SpinButton.xaml.cs,SpinButton,The following statement contains a magic number: Maximum = 10;  
Magic Number,STPSLDemo,UsageControl,F:\newReposMay17\amibar_SmartThreadPool\STPSLDemo\UsageControl.xaml.cs,LayoutRoot_Loaded,The following statement contains a magic number: LayoutRoot.Height = _rows * 4;  
Magic Number,STPSLDemo,UsageControl,F:\newReposMay17\amibar_SmartThreadPool\STPSLDemo\UsageControl.xaml.cs,LayoutRoot_Loaded,The following statement contains a magic number: LayoutRoot.Width = _columns * 18;  
Magic Number,STPSLDemo,UsageHistoryControl,F:\newReposMay17\amibar_SmartThreadPool\STPSLDemo\UsageHistoryControl.xaml.cs,Redraw,The following statement contains a magic number: for (int i = 1; i < lastValuesCount; ++i) {  	int index = nextValueIndex - 1 - i;  	if (index < 0) {  		index += maxLastValuesCount;  	}  	int val1 = GetRelativeValue (lastValues1 [index]);  	int val2 = GetRelativeValue (lastValues2 [index]);  	//Brush redBrush =  	//    new LinearGradientBrush(  	//        new Point(0' -(int)Height / 2)'  	//        new Point(0' (int)Height)'  	//        Color.Black'  	//        Color.Red);  	DrawLine (Colors.Red' (int)Width - (i - 1) * _shiftStep' (int)Height - prevVal2' (int)Width - i * _shiftStep' (int)Height - val2);  	//g.FillPolygon(  	//    redBrush'  	//    new Point[]   	//    {  	//        new Point((int)Width-(i-1)*_shiftStep' (int)Height-prevVal2)'   	//        new Point((int)Width-i*_shiftStep' (int)Height-val2)'   	//        new Point((int)Width-i*_shiftStep' (int)Height)'   	//        new Point((int)Width-(i-1)*_shiftStep' (int)Height)'   	//    });  	//Brush greenBrush =  	//    new LinearGradientBrush(  	//        new Point(0' -(int)Height / 2)'  	//        new Point(0' (int)Height)'  	//        Color.Black'  	//        Color.LawnGreen);  	DrawLine (Color.FromArgb (255' 124' 252' 0)' // Colors.LawnGreen  	(int)Width - (i - 1) * _shiftStep' (int)Height - prevVal1' (int)Width - i * _shiftStep' (int)Height - val1);  	//g.FillPolygon(  	//   greenBrush'  	//   new Point[]   	//    {  	//        new Point((int)Width-(i-1)*_shiftStep' (int)Height-prevVal1)'   	//        new Point((int)Width-i*_shiftStep' (int)Height-val1)'   	//        new Point((int)Width-i*_shiftStep' (int)Height)'   	//        new Point((int)Width-(i-1)*_shiftStep' (int)Height)'   	//    });  	prevVal1 = val1;  	prevVal2 = val2;  }  
Magic Number,STPSLDemo,UsageHistoryControl,F:\newReposMay17\amibar_SmartThreadPool\STPSLDemo\UsageHistoryControl.xaml.cs,Redraw,The following statement contains a magic number: for (int i = 1; i < lastValuesCount; ++i) {  	int index = nextValueIndex - 1 - i;  	if (index < 0) {  		index += maxLastValuesCount;  	}  	int val1 = GetRelativeValue (lastValues1 [index]);  	int val2 = GetRelativeValue (lastValues2 [index]);  	//Brush redBrush =  	//    new LinearGradientBrush(  	//        new Point(0' -(int)Height / 2)'  	//        new Point(0' (int)Height)'  	//        Color.Black'  	//        Color.Red);  	DrawLine (Colors.Red' (int)Width - (i - 1) * _shiftStep' (int)Height - prevVal2' (int)Width - i * _shiftStep' (int)Height - val2);  	//g.FillPolygon(  	//    redBrush'  	//    new Point[]   	//    {  	//        new Point((int)Width-(i-1)*_shiftStep' (int)Height-prevVal2)'   	//        new Point((int)Width-i*_shiftStep' (int)Height-val2)'   	//        new Point((int)Width-i*_shiftStep' (int)Height)'   	//        new Point((int)Width-(i-1)*_shiftStep' (int)Height)'   	//    });  	//Brush greenBrush =  	//    new LinearGradientBrush(  	//        new Point(0' -(int)Height / 2)'  	//        new Point(0' (int)Height)'  	//        Color.Black'  	//        Color.LawnGreen);  	DrawLine (Color.FromArgb (255' 124' 252' 0)' // Colors.LawnGreen  	(int)Width - (i - 1) * _shiftStep' (int)Height - prevVal1' (int)Width - i * _shiftStep' (int)Height - val1);  	//g.FillPolygon(  	//   greenBrush'  	//   new Point[]   	//    {  	//        new Point((int)Width-(i-1)*_shiftStep' (int)Height-prevVal1)'   	//        new Point((int)Width-i*_shiftStep' (int)Height-val1)'   	//        new Point((int)Width-i*_shiftStep' (int)Height)'   	//        new Point((int)Width-(i-1)*_shiftStep' (int)Height)'   	//    });  	prevVal1 = val1;  	prevVal2 = val2;  }  
Magic Number,STPSLDemo,UsageHistoryControl,F:\newReposMay17\amibar_SmartThreadPool\STPSLDemo\UsageHistoryControl.xaml.cs,Redraw,The following statement contains a magic number: for (int i = 1; i < lastValuesCount; ++i) {  	int index = nextValueIndex - 1 - i;  	if (index < 0) {  		index += maxLastValuesCount;  	}  	int val1 = GetRelativeValue (lastValues1 [index]);  	int val2 = GetRelativeValue (lastValues2 [index]);  	//Brush redBrush =  	//    new LinearGradientBrush(  	//        new Point(0' -(int)Height / 2)'  	//        new Point(0' (int)Height)'  	//        Color.Black'  	//        Color.Red);  	DrawLine (Colors.Red' (int)Width - (i - 1) * _shiftStep' (int)Height - prevVal2' (int)Width - i * _shiftStep' (int)Height - val2);  	//g.FillPolygon(  	//    redBrush'  	//    new Point[]   	//    {  	//        new Point((int)Width-(i-1)*_shiftStep' (int)Height-prevVal2)'   	//        new Point((int)Width-i*_shiftStep' (int)Height-val2)'   	//        new Point((int)Width-i*_shiftStep' (int)Height)'   	//        new Point((int)Width-(i-1)*_shiftStep' (int)Height)'   	//    });  	//Brush greenBrush =  	//    new LinearGradientBrush(  	//        new Point(0' -(int)Height / 2)'  	//        new Point(0' (int)Height)'  	//        Color.Black'  	//        Color.LawnGreen);  	DrawLine (Color.FromArgb (255' 124' 252' 0)' // Colors.LawnGreen  	(int)Width - (i - 1) * _shiftStep' (int)Height - prevVal1' (int)Width - i * _shiftStep' (int)Height - val1);  	//g.FillPolygon(  	//   greenBrush'  	//   new Point[]   	//    {  	//        new Point((int)Width-(i-1)*_shiftStep' (int)Height-prevVal1)'   	//        new Point((int)Width-i*_shiftStep' (int)Height-val1)'   	//        new Point((int)Width-i*_shiftStep' (int)Height)'   	//        new Point((int)Width-(i-1)*_shiftStep' (int)Height)'   	//    });  	prevVal1 = val1;  	prevVal2 = val2;  }  
Magic Number,STPSLDemo,UsageHistoryControl,F:\newReposMay17\amibar_SmartThreadPool\STPSLDemo\UsageHistoryControl.xaml.cs,Redraw,The following statement contains a magic number: DrawLine (Color.FromArgb (255' 124' 252' 0)' // Colors.LawnGreen  (int)Width - (i - 1) * _shiftStep' (int)Height - prevVal1' (int)Width - i * _shiftStep' (int)Height - val1);  
Magic Number,STPSLDemo,UsageHistoryControl,F:\newReposMay17\amibar_SmartThreadPool\STPSLDemo\UsageHistoryControl.xaml.cs,Redraw,The following statement contains a magic number: DrawLine (Color.FromArgb (255' 124' 252' 0)' // Colors.LawnGreen  (int)Width - (i - 1) * _shiftStep' (int)Height - prevVal1' (int)Width - i * _shiftStep' (int)Height - val1);  
Magic Number,STPSLDemo,UsageHistoryControl,F:\newReposMay17\amibar_SmartThreadPool\STPSLDemo\UsageHistoryControl.xaml.cs,Redraw,The following statement contains a magic number: DrawLine (Color.FromArgb (255' 124' 252' 0)' // Colors.LawnGreen  (int)Width - (i - 1) * _shiftStep' (int)Height - prevVal1' (int)Width - i * _shiftStep' (int)Height - val1);  
