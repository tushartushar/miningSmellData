Implementation smell,Namespace,Class,File,Method,Description
Long Method,Amib.Threading,SmartThreadPool,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\SmartThreadPool.cs,ProcessQueuedItems,The method has 144 lines of code.
Complex Method,Amib.Threading.Internal,WorkItem,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItem.cs,WaitAll,Cyclomatic complexity of the method is 8
Complex Method,Amib.Threading.Internal,WorkItem,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItem.cs,Cancel,Cyclomatic complexity of the method is 9
Complex Method,Amib.Threading.Internal,WorkItem,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItem.cs,GetResult,Cyclomatic complexity of the method is 8
Complex Method,Amib.Threading.Internal,WorkItemsGroup,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItemsGroup.cs,EnqueueToSTPNextWorkItem,Cyclomatic complexity of the method is 11
Complex Method,Amib.Threading,SmartThreadPool,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\SmartThreadPool.cs,ProcessQueuedItems,Cyclomatic complexity of the method is 9
Complex Method,Amib.Threading,SmartThreadPool,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\SmartThreadPool.cs,Shutdown,Cyclomatic complexity of the method is 9
Long Parameter List,Amib.Threading.Internal,WorkItemFactory,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItemFactory.cs,CreateWorkItem,The method has 5 parameters. Parameters: workItemsGroup' wigStartInfo' callback' state' workItemPriority
Long Parameter List,Amib.Threading.Internal,WorkItemFactory,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItemFactory.cs,CreateWorkItem,The method has 5 parameters. Parameters: workItemsGroup' wigStartInfo' workItemInfo' callback' state
Long Parameter List,Amib.Threading.Internal,WorkItemFactory,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItemFactory.cs,CreateWorkItem,The method has 5 parameters. Parameters: workItemsGroup' wigStartInfo' callback' state' postExecuteWorkItemCallback
Long Parameter List,Amib.Threading.Internal,WorkItemFactory,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItemFactory.cs,CreateWorkItem,The method has 6 parameters. Parameters: workItemsGroup' wigStartInfo' callback' state' postExecuteWorkItemCallback' workItemPriority
Long Parameter List,Amib.Threading.Internal,WorkItemFactory,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItemFactory.cs,CreateWorkItem,The method has 6 parameters. Parameters: workItemsGroup' wigStartInfo' callback' state' postExecuteWorkItemCallback' callToPostExecute
Long Parameter List,Amib.Threading.Internal,WorkItemFactory,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItemFactory.cs,CreateWorkItem,The method has 7 parameters. Parameters: workItemsGroup' wigStartInfo' callback' state' postExecuteWorkItemCallback' callToPostExecute' workItemPriority
Long Parameter List,Amib.Threading.Internal,WorkItemsGroupBase,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItemsGroupBase.cs,QueueWorkItem,The method has 5 parameters. Parameters: callback' state' postExecuteWorkItemCallback' callToPostExecute' workItemPriority
Long Parameter List,Amib.Threading.Internal,WorkItemsGroupBase,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItemsGroupBase.cs,QueueWorkItem,The method has 5 parameters. Parameters: action' arg1' arg2' arg3' priority
Long Parameter List,Amib.Threading.Internal,WorkItemsGroupBase,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItemsGroupBase.cs,QueueWorkItem,The method has 6 parameters. Parameters: action' arg1' arg2' arg3' arg4' priority
Long Parameter List,Amib.Threading.Internal,WorkItemsGroupBase,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItemsGroupBase.cs,QueueWorkItem,The method has 5 parameters. Parameters: func' arg1' arg2' arg3' priority
Long Parameter List,Amib.Threading.Internal,WorkItemsGroupBase,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItemsGroupBase.cs,QueueWorkItem,The method has 6 parameters. Parameters: func' arg1' arg2' arg3' arg4' priority
Long Parameter List,Amib.Threading,IWorkItemsGroup,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\Interfaces.cs,QueueWorkItem,The method has 5 parameters. Parameters: callback' state' postExecuteWorkItemCallback' callToPostExecute' workItemPriority
Long Parameter List,Amib.Threading,IWorkItemsGroup,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\Interfaces.cs,QueueWorkItem,The method has 5 parameters. Parameters: action' arg1' arg2' arg3' priority
Long Parameter List,Amib.Threading,IWorkItemsGroup,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\Interfaces.cs,QueueWorkItem,The method has 6 parameters. Parameters: action' arg1' arg2' arg3' arg4' priority
Long Parameter List,Amib.Threading,IWorkItemsGroup,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\Interfaces.cs,QueueWorkItem,The method has 5 parameters. Parameters: func' arg1' arg2' arg3' priority
Long Parameter List,Amib.Threading,IWorkItemsGroup,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\Interfaces.cs,QueueWorkItem,The method has 6 parameters. Parameters: func' arg1' arg2' arg3' arg4' priority
Long Identifier,Amib.Threading.Internal,CallerThreadContext,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\CallerThreadContext.cs,,The length of the parameter getLogicalCallContextMethodInfo is 31.
Long Identifier,Amib.Threading.Internal,CallerThreadContext,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\CallerThreadContext.cs,,The length of the parameter setLogicalCallContextMethodInfo is 31.
Long Identifier,Amib.Threading.Internal,STPInstancePerformanceCounters,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\STPPerformanceCounter.cs,,The length of the parameter _stpInstanceNullPerformanceCounter is 34.
Long Identifier,Amib.Threading,SmartThreadPool,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\SmartThreadPool.cs,ProcessQueuedItems,The length of the parameter bInUseWorkerThreadsWasIncremented is 33.
Long Identifier,Amib.Threading,SmartThreadPool,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\SmartThreadPool.cs,,The length of the parameter DefaultPostExecuteWorkItemCallback is 34.
Long Identifier,Amib.Threading,SmartThreadPool,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\SmartThreadPool.cs,,The length of the parameter DefaultPerformanceCounterInstanceName is 37.
Long Identifier,Amib.Threading,STPStartInfo,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\STPStartInfo.cs,,The length of the parameter _performanceCounterInstanceName is 31.
Long Identifier,Amib.Threading,STPStartInfo,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\STPStartInfo.cs,,The length of the parameter _enableLocalPerformanceCounters is 31.
Long Statement,Amib.Threading.Internal,CallerThreadContext,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\CallerThreadContext.cs,Capture,The length of the statement  "				callerThreadContext._callContext = (LogicalCallContext)getLogicalCallContextMethodInfo.Invoke(Thread.CurrentThread' null); " is 122.
Long Statement,Amib.Threading.Internal,WorkItemsGroupBase,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItemsGroupBase.cs,QueueWorkItem,The length of the statement  "            WorkItem workItem = WorkItemFactory.CreateWorkItem(this' WIGStartInfo' callback' state' postExecuteWorkItemCallback' workItemPriority); " is 135.
Long Statement,Amib.Threading.Internal,WorkItemsGroupBase,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItemsGroupBase.cs,QueueWorkItem,The length of the statement  "            WorkItem workItem = WorkItemFactory.CreateWorkItem(this' WIGStartInfo' callback' state' postExecuteWorkItemCallback' callToPostExecute); " is 136.
Long Statement,Amib.Threading.Internal,WorkItemsGroupBase,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItemsGroupBase.cs,QueueWorkItem,The length of the statement  "            WorkItem workItem = WorkItemFactory.CreateWorkItem(this' WIGStartInfo' callback' state' postExecuteWorkItemCallback' callToPostExecute' workItemPriority); " is 154.
Long Statement,Amib.Threading,SmartThreadPool,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\SmartThreadPool.cs,Initialize,The length of the statement  "                throw new NotSupportedException("Performance counters are not implemented for Compact Framework/Silverlight/Mono' instead use StpStartInfo.EnableLocalPerformanceCounters"); " is 172.
Long Statement,Amib.Threading,SmartThreadPool,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\SmartThreadPool.cs,ValidateWorkItemsGroupWaitForIdle,The length of the statement  "				throw new NotSupportedException("WaitForIdle cannot be called from a thread on its SmartThreadPool' it causes a deadlock"); " is 123.
Long Statement,Amib.Threading,SmartThreadPool,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\SmartThreadPool.cs,ValidateWorkItemsGroupWaitForIdleImpl,The length of the statement  "				throw new NotSupportedException("WaitForIdle cannot be called from a thread on its SmartThreadPool' it causes a deadlock"); " is 123.
Long Statement,Amib.Threading,SmartThreadPool,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\SmartThreadPool.cs,Choice,The length of the statement  "                workItemsGroup.QueueWorkItem(() => { act(); Interlocked.CompareExchange(ref choiceIndex._index' value' -1); anActionCompleted.Set(); }); " is 136.
Empty Catch Block,Amib.Threading.Internal,WorkItem,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItem.cs,FireWorkItemCompleted,The method has an empty catch block.
Empty Catch Block,Amib.Threading.Internal,WorkItem,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItem.cs,FireWorkItemStarted,The method has an empty catch block.
Empty Catch Block,Amib.Threading.Internal,WorkItemsGroup,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItemsGroup.cs,FireOnIdleImpl,The method has an empty catch block.
Magic Number,Amib.Threading.Internal,WorkItem,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItem.cs,ExecuteWorkItem,The following statement contains a magic number: Thread.Sleep(60 * 1000);
Magic Number,Amib.Threading.Internal,WorkItem,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItem.cs,ExecuteWorkItem,The following statement contains a magic number: Thread.Sleep(60 * 1000);
Magic Number,Amib.Threading.Internal,WorkItem,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItem.cs,WaitAll,The following statement contains a magic number: (null == cancelWaitHandle) && (waitHandles.Length <= 64)
Missing Default,Amib.Threading.Internal,WorkItem,D:\research\architectureSmells\repos\amibar_SmartThreadPool\SmartThreadPool\WorkItem.cs,Cancel,The following switch statement is missing a default case: switch (GetWorkItemState())                  {                      case WorkItemState.Canceled:                          //Debug.WriteLine("Work item already canceled");                          if (abortExecution)                          {                              Thread executionThread = Interlocked.CompareExchange(ref _executingThread' null' _executingThread);                              if (null != executionThread)                              {                                  executionThread.Abort(); // "Cancel"                                  // No need to signalComplete' because we already cancelled this work item                                  // so it already signaled its completion.                                  //signalComplete = true;                              }                          }                           success = true;                          break;                      case WorkItemState.Completed:                          //Debug.WriteLine("Work item cannot be canceled");                          break;                      case WorkItemState.InProgress:                          if (abortExecution)                          {                              Thread executionThread = Interlocked.CompareExchange(ref _executingThread' null' _executingThread);                              if (null != executionThread)                              {                                  executionThread.Abort(); // "Cancel"                                  success = true;                                  signalComplete = true;                              }                          }                          else                          {                              success = true;                              signalComplete = true;                          }                          break;                      case WorkItemState.InQueue:                          // Signal to the wait for completion that the work                          // item has been completed (canceled). There is no                          // reason to wait for it to get out of the queue                          signalComplete = true;                          //Debug.WriteLine("Work item canceled");                          success = true;                          break;                  }
