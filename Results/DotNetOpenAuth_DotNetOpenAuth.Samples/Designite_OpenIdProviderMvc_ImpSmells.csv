Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OpenIdProviderMvc.Code,ReadOnlyXmlMembershipProvider,C:\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdProviderMvc\Code\ReadOnlyXmlMembershipProvider.cs,Initialize,Cyclomatic complexity of the method is 8
Complex Method,OpenIdProviderMvc.Controllers,OpenIdController,C:\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdProviderMvc\Controllers\OpenIdController.cs,SendAssertion,Cyclomatic complexity of the method is 12
Long Parameter List,OpenIdProviderMvc.Code,ReadOnlyXmlMembershipProvider,C:\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdProviderMvc\Code\ReadOnlyXmlMembershipProvider.cs,CreateUser,The method has 8 parameters. Parameters: username' password' email' passwordQuestion' passwordAnswer' isApproved' providerUserKey' status
Long Identifier,OpenIdProviderMvc,MvcApplication,C:\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdProviderMvc\Global.asax.cs,,The length of the parameter behaviorInitializationSyncObject is 32.
Long Statement,OpenIdProviderMvc.Controllers,OpenIdController,C:\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdProviderMvc\Controllers\OpenIdController.cs,AutoRespondIfPossible,The length of the statement  "			if (ProviderEndpoint.PendingRequest.IsReturnUrlDiscoverable(OpenIdProvider.Channel.WebRequestHandler) == RelyingPartyDiscoveryResult.Success " is 140.
Long Statement,OpenIdProviderMvc,MvcApplication,C:\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdProviderMvc\Global.asax.cs,InitializeBehaviors,The length of the statement  "						DotNetOpenAuth.OpenId.Provider.Behaviors.PpidGeneration.PpidIdentifierProvider = new Code.AnonymousIdentifierProvider(); " is 120.
Long Statement,OpenIdProviderMvc,MvcApplication,C:\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdProviderMvc\Global.asax.cs,InitializeBehaviors,The length of the statement  "						DotNetOpenAuth.OpenId.Provider.Behaviors.GsaIcamProfile.PpidIdentifierProvider = new Code.AnonymousIdentifierProvider(); " is 120.
Complex Conditional,OpenIdProviderMvc.Controllers,OpenIdController,C:\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdProviderMvc\Controllers\OpenIdController.cs,SendAssertion,The conditional expression  "(authReq != null && authReq.IsAuthenticated.Value) ||  				(anonReq != null && anonReq.IsApproved.Value)"  is complex.
Magic Number,OpenIdProviderMvc.Code,ReadOnlyXmlMembershipProvider,C:\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdProviderMvc\Code\ReadOnlyXmlMembershipProvider.cs,ReadMembershipDataStore,The following statement contains a magic number: lock (this) {  				if (this.users == null) {  					this.users = new Dictionary<string' MembershipUser>(16' StringComparer.InvariantCultureIgnoreCase);  					XmlDocument doc = new XmlDocument();  					doc.Load(this.xmlFileName);  					XmlNodeList nodes = doc.GetElementsByTagName("User");    					foreach (XmlNode node in nodes) {  						// Yes' we're misusing some of these fields.  A real app would  						// have the right fields from a database to use.  						MembershipUser user = new MembershipUser(  							Name'                       // Provider name  							node["UserName"].InnerText' // Username  							null'                       // providerUserKey  							node["Salt"].InnerText'     // Email  							string.Empty'               // passwordQuestion  							node["Password"].InnerText' // Comment  							true'                       // isApproved  							false'                      // isLockedOut  							DateTime.Now'               // creationDate  							DateTime.Now'               // lastLoginDate  							DateTime.Now'               // lastActivityDate  							DateTime.Now' // lastPasswordChangedDate  							new DateTime(1980' 1' 1));  // lastLockoutDate    						this.users.Add(user.UserName' user);  					}  				}  			}
Magic Number,OpenIdProviderMvc.Code,ReadOnlyXmlMembershipProvider,C:\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdProviderMvc\Code\ReadOnlyXmlMembershipProvider.cs,ReadMembershipDataStore,The following statement contains a magic number: lock (this) {  				if (this.users == null) {  					this.users = new Dictionary<string' MembershipUser>(16' StringComparer.InvariantCultureIgnoreCase);  					XmlDocument doc = new XmlDocument();  					doc.Load(this.xmlFileName);  					XmlNodeList nodes = doc.GetElementsByTagName("User");    					foreach (XmlNode node in nodes) {  						// Yes' we're misusing some of these fields.  A real app would  						// have the right fields from a database to use.  						MembershipUser user = new MembershipUser(  							Name'                       // Provider name  							node["UserName"].InnerText' // Username  							null'                       // providerUserKey  							node["Salt"].InnerText'     // Email  							string.Empty'               // passwordQuestion  							node["Password"].InnerText' // Comment  							true'                       // isApproved  							false'                      // isLockedOut  							DateTime.Now'               // creationDate  							DateTime.Now'               // lastLoginDate  							DateTime.Now'               // lastActivityDate  							DateTime.Now' // lastPasswordChangedDate  							new DateTime(1980' 1' 1));  // lastLockoutDate    						this.users.Add(user.UserName' user);  					}  				}  			}
