Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,,The length of the parameter ResourceServerEncryptionPublicKey is 33.
Long Statement,OAuthAuthorizationServer.Code,Client,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\Client.cs,IsCallbackAllowed,The length of the statement  "			if (string.Equals(acceptableCallbackPattern.GetLeftPart(UriPartial.Authority)' callback.GetLeftPart(UriPartial.Authority)' StringComparison.Ordinal)) { " is 151.
Long Statement,OAuthAuthorizationServer.Code,DatabaseKeyNonceStore,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\DatabaseKeyNonceStore.cs,StoreNonce,The length of the statement  "			MvcApplication.DataContext.Nonces.InsertOnSubmit(new Nonce { Context = context' Code = nonce' Timestamp = timestampUtc }); " is 122.
Long Statement,OAuthAuthorizationServer.Code,DatabaseKeyNonceStore,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\DatabaseKeyNonceStore.cs,RemoveKey,The length of the statement  "			var match = MvcApplication.DataContext.SymmetricCryptoKeys.FirstOrDefault(k => k.Bucket == bucket && k.Handle == handle); " is 121.
Long Statement,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,IsAuthorizationValid,The length of the statement  "			return this.IsAuthorizationValid(authorization.Scope' authorization.ClientIdentifier' authorization.UtcIssued' authorization.User); " is 131.
Long Statement,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,TryAuthorizeResourceOwnerCredentialGrant,The length of the statement  "			// This web site delegates user authentication to OpenID Providers' and as such no users have local passwords with this server. " is 127.
Long Statement,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CanBeAutoApproved,The length of the statement  "				var requestingClient = MvcApplication.DataContext.Clients.First(c => c.ClientIdentifier == authorizationRequest.ClientIdentifier); " is 130.
Long Statement,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The length of the statement  "			// we hard-code a FOR SAMPLE USE ONLY key pair.  The matching public key information is hard-coded into the OAuthResourceServer sample. " is 135.
Long Statement,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The length of the statement  "			// In a real app' the RSA parameters would typically come from a certificate that may already exist.  It may simply be the HTTPS certificate for the auth server. " is 161.
Long Statement,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The length of the statement  "				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }' " is 603.
Long Statement,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The length of the statement  "				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }' " is 310.
Long Statement,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The length of the statement  "				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }' " is 311.
Long Statement,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The length of the statement  "				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }' " is 314.
Long Statement,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The length of the statement  "				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }' " is 317.
Long Statement,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The length of the statement  "				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }' " is 318.
Long Statement,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The length of the statement  "				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }' " is 605.
Long Statement,OAuthAuthorizationServer.Controllers,AccountController,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Controllers\AccountController.cs,LogOn,The length of the statement  "				var request = rp.CreateRequest(model.UserSuppliedIdentifier' Realm.AutoDetect' new Uri(Request.Url' Url.Action("Authenticate"))); " is 129.
Long Statement,OAuthAuthorizationServer.Controllers,HomeController,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Controllers\HomeController.cs,CreateDatabase,The length of the statement  "			string connectionString = ConfigurationManager.ConnectionStrings["DatabaseConnectionString"].ConnectionString.Replace("|DataDirectory|"' databasePath); " is 151.
Long Statement,OAuthAuthorizationServer.Controllers,OAuthController,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Controllers\OAuthController.cs,Authorize,The length of the statement  "			var requestingClient = MvcApplication.DataContext.Clients.First(c => c.ClientIdentifier == pendingRequest.ClientIdentifier); " is 124.
Long Statement,OAuthAuthorizationServer.Controllers,OAuthController,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Controllers\OAuthController.cs,Authorize,The length of the statement  "			if (((OAuth2AuthorizationServer)this.authorizationServer.AuthorizationServerServices).CanBeAutoApproved(pendingRequest)) { " is 122.
Long Statement,OAuthAuthorizationServer.Controllers,OAuthController,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Controllers\OAuthController.cs,Authorize,The length of the statement  "				var approval = this.authorizationServer.PrepareApproveAuthorizationRequest(pendingRequest' HttpContext.User.Identity.Name); " is 123.
Long Statement,OAuthAuthorizationServer.Controllers,OAuthController,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Controllers\OAuthController.cs,AuthorizeResponse,The length of the statement  "				MvcApplication.DataContext.SubmitChanges(); // submit now so that this new row can be retrieved later in this same HTTP request " is 127.
Long Statement,OAuthAuthorizationServer.Controllers,OAuthController,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Controllers\OAuthController.cs,AuthorizeResponse,The length of the statement  "				// But in a real app' you could grant a reduced scope of access to the client by passing a scope parameter to this method. " is 122.
Long Statement,OAuthAuthorizationServer.Controllers,OAuthController,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Controllers\OAuthController.cs,AuthorizeResponse,The length of the statement  "                //    errorResponse.Error = "accesss_denied";  // see http://tools.ietf.org/id/draft-ietf-oauth-v2-31.html#rfc.section.4.1.2.1 for valid values " is 143.
Long Statement,OAuthAuthorizationServer,MvcApplication,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Global.asax.cs,Application_Error,The length of the statement  "			// In the event of an unhandled exception' reverse any changes that were made to the database to avoid any partial database updates. " is 132.
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAccessToken,The following statement contains a magic number: accessToken.Lifetime = TimeSpan.FromMinutes(2);
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
Magic Number,OAuthAuthorizationServer.Code,OAuth2AuthorizationServer,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OAuth\OAuthAuthorizationServer\Code\OAuth2AuthorizationServer.cs,CreateAuthorizationServerSigningKey,The following statement contains a magic number: return new RSAParameters {  				Exponent = new byte[] { 1' 0' 1 }'  				Modulus = new byte[] { 210' 95' 53' 12' 203' 114' 150' 23' 23' 88' 4' 200' 47' 219' 73' 54' 146' 253' 126' 121' 105' 91' 118' 217' 182' 167' 140' 6' 67' 112' 97' 183' 66' 112' 245' 103' 136' 222' 205' 28' 196' 45' 6' 223' 192' 76' 56' 180' 90' 120' 144' 19' 31' 193' 37' 129' 186' 214' 36' 53' 204' 53' 108' 133' 112' 17' 133' 244' 3' 12' 230' 29' 243' 51' 79' 253' 10' 111' 185' 23' 74' 230' 99' 94' 78' 49' 209' 39' 95' 213' 248' 212' 22' 4' 222' 145' 77' 190' 136' 230' 134' 70' 228' 241' 194' 216' 163' 234' 52' 1' 64' 181' 139' 128' 90' 255' 214' 60' 168' 233' 254' 110' 31' 102' 58' 67' 201' 33 }'  				P = new byte[] { 237' 238' 79' 75' 29' 57' 145' 201' 57' 177' 215' 108' 40' 77' 232' 237' 113' 38' 157' 195' 174' 134' 188' 175' 121' 28' 11' 236' 80' 146' 12' 38' 8' 12' 104' 46' 6' 247' 14' 149' 196' 23' 130' 116' 141' 137' 225' 74' 84' 111' 44' 163' 55' 10' 246' 154' 195' 158' 186' 241' 162' 11' 217' 77 }'  				Q = new byte[] { 226' 89' 29' 67' 178' 205' 30' 152' 184' 165' 15' 152' 131' 245' 141' 80' 150' 3' 224' 136' 188' 248' 149' 36' 200' 250' 207' 156' 224' 79' 150' 191' 84' 214' 233' 173' 95' 192' 55' 123' 124' 255' 53' 85' 11' 233' 156' 66' 14' 27' 27' 163' 108' 199' 90' 37' 118' 38' 78' 171' 80' 26' 101' 37 }'  				DP = new byte[] { 108' 176' 122' 132' 131' 187' 50' 191' 203' 157' 84' 29' 82' 100' 20' 205' 178' 236' 195' 17' 10' 254' 253' 222' 226' 226' 79' 8' 10' 222' 76' 178' 106' 230' 208' 8' 134' 162' 1' 133' 164' 232' 96' 109' 193' 226' 132' 138' 33' 252' 15' 86' 23' 228' 232' 54' 86' 186' 130' 7' 179' 208' 217' 217 }'  				DQ = new byte[] { 175' 63' 252' 46' 140' 99' 208' 138' 194' 123' 218' 101' 101' 214' 91' 65' 199' 196' 220' 182' 66' 73' 221' 128' 11' 180' 85' 198' 202' 206' 20' 147' 179' 102' 106' 170' 247' 245' 229' 127' 81' 58' 111' 218' 151' 76' 154' 213' 114' 2' 127' 21' 187' 133' 102' 64' 151' 7' 245' 229' 34' 50' 45' 153 }'  				InverseQ = new byte[] { 137' 156' 11' 248' 118' 201' 135' 145' 134' 121' 14' 162' 149' 14' 98' 84' 108' 160' 27' 91' 230' 116' 216' 181' 200' 49' 34' 254' 119' 153' 179' 52' 231' 234' 36' 148' 71' 161' 182' 171' 35' 182' 46' 164' 179' 100' 226' 71' 119' 23' 0' 16' 240' 4' 30' 57' 76' 109' 89' 131' 56' 219' 71' 206 }'  				D = new byte[] { 108' 15' 123' 176' 150' 208' 197' 72' 23' 53' 159' 63' 53' 85' 238' 197' 153' 187' 156' 187' 192' 226' 186' 170' 26' 168' 245' 196' 65' 223' 248' 81' 170' 79' 91' 191' 83' 15' 31' 77' 39' 119' 249' 143' 245' 183' 49' 105' 115' 15' 122' 242' 87' 221' 94' 230' 196' 146' 59' 7' 103' 94' 9' 223' 146' 180' 189' 86' 190' 94' 242' 59' 32' 54' 23' 181' 124' 170' 63' 172' 90' 158' 169' 140' 6' 102' 170' 0' 135' 199' 35' 196' 212' 238' 196' 56' 14' 0' 140' 197' 169' 240' 156' 43' 182' 123' 102' 79' 89' 20' 120' 171' 43' 223' 58' 190' 230' 166' 185' 162' 186' 226' 31' 206' 196' 188' 104' 1 }'  			};
