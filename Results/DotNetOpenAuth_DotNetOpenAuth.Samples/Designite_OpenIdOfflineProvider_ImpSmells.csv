Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DotNetOpenAuth.OpenIdOfflineProvider,HostedProvider,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\HostedProvider.cs,RequestHandler,Cyclomatic complexity of the method is 8
Long Identifier,DotNetOpenAuth.OpenIdOfflineProvider,HostedProvider,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\HostedProvider.cs,GenerateHtmlDiscoveryDocument,The length of the parameter NonDelegatedHtmlDiscoveryFormat is 31.
Long Statement,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\MainWindow.xaml.cs,ProcessRequest,The length of the statement  "							userIdentityPageBase = (this.hostedProvider.UserIdentityPageBase.Scheme + Uri.SchemeDelimiter + this.hostedProvider.UserIdentityPageBase.Authority).ToUpperInvariant () + this.hostedProvider.UserIdentityPageBase.PathAndQuery; " is 224.
Long Statement,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\MainWindow.xaml.cs,opIdentifierLabel_MouseDown,The length of the statement  "		MessageBox.Show (this' ex.Message' "Error while copying OP Identifier to the clipboard"' MessageBoxButton.OK' MessageBoxImage.Error); " is 133.
Long Statement,DotNetOpenAuth.OpenIdOfflineProvider,HostedProvider,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\HostedProvider.cs,GenerateHtmlDiscoveryDocument,The length of the statement  "	return string.Format (localId != null ? DelegatedHtmlDiscoveryFormat : NonDelegatedHtmlDiscoveryFormat' providerEndpoint.AbsoluteUri' localId); " is 143.
Long Statement,DotNetOpenAuth.OpenIdOfflineProvider,HostedProvider,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\HostedProvider.cs,GenerateXrdsOPIdentifierDocument,The length of the statement  "	string extensions = string.Join ("\n\t\t\t"' supportedExtensions.Select (ext => "<Type>" + ext + "</Type>").ToArray ()); " is 120.
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\MainWindow.xaml.cs,ProcessRequest,The following statement contains a magic number: this.Dispatcher.Invoke ((Action)delegate {  	if (!request.IsResponseReady) {  		var authRequest = request as IAuthenticationRequest;  		if (authRequest != null) {  			switch (this.checkidRequestList.SelectedIndex) {  			case 0:  				if (authRequest.IsDirectedIdentity) {  					string userIdentityPageBase = this.hostedProvider.UserIdentityPageBase.AbsoluteUri;  					if (this.capitalizedHostName.IsChecked.Value) {  						userIdentityPageBase = (this.hostedProvider.UserIdentityPageBase.Scheme + Uri.SchemeDelimiter + this.hostedProvider.UserIdentityPageBase.Authority).ToUpperInvariant () + this.hostedProvider.UserIdentityPageBase.PathAndQuery;  					}  					string leafPath = "directedidentity";  					if (this.directedIdentityTrailingPeriodsCheckbox.IsChecked.Value) {  						leafPath += ".";  					}  					authRequest.ClaimedIdentifier = Identifier.Parse (userIdentityPageBase + leafPath' true);  					authRequest.LocalIdentifier = authRequest.ClaimedIdentifier;  				}  				authRequest.IsAuthenticated = true;  				break;  			case 1:  				authRequest.IsAuthenticated = false;  				break;  			case 2:  				IntPtr oldForegroundWindow = NativeMethods.GetForegroundWindow ();  				bool stoleFocus = NativeMethods.SetForegroundWindow (this);  				CheckIdWindow.ProcessAuthentication (this.hostedProvider' authRequest);  				if (stoleFocus) {  					NativeMethods.SetForegroundWindow (oldForegroundWindow);  				}  				break;  			}  		}  	}  });  
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\MainWindow.xaml.cs,ProcessRequest,The following statement contains a magic number: if (!request.IsResponseReady) {  	var authRequest = request as IAuthenticationRequest;  	if (authRequest != null) {  		switch (this.checkidRequestList.SelectedIndex) {  		case 0:  			if (authRequest.IsDirectedIdentity) {  				string userIdentityPageBase = this.hostedProvider.UserIdentityPageBase.AbsoluteUri;  				if (this.capitalizedHostName.IsChecked.Value) {  					userIdentityPageBase = (this.hostedProvider.UserIdentityPageBase.Scheme + Uri.SchemeDelimiter + this.hostedProvider.UserIdentityPageBase.Authority).ToUpperInvariant () + this.hostedProvider.UserIdentityPageBase.PathAndQuery;  				}  				string leafPath = "directedidentity";  				if (this.directedIdentityTrailingPeriodsCheckbox.IsChecked.Value) {  					leafPath += ".";  				}  				authRequest.ClaimedIdentifier = Identifier.Parse (userIdentityPageBase + leafPath' true);  				authRequest.LocalIdentifier = authRequest.ClaimedIdentifier;  			}  			authRequest.IsAuthenticated = true;  			break;  		case 1:  			authRequest.IsAuthenticated = false;  			break;  		case 2:  			IntPtr oldForegroundWindow = NativeMethods.GetForegroundWindow ();  			bool stoleFocus = NativeMethods.SetForegroundWindow (this);  			CheckIdWindow.ProcessAuthentication (this.hostedProvider' authRequest);  			if (stoleFocus) {  				NativeMethods.SetForegroundWindow (oldForegroundWindow);  			}  			break;  		}  	}  }  
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\MainWindow.xaml.cs,ProcessRequest,The following statement contains a magic number: if (authRequest != null) {  	switch (this.checkidRequestList.SelectedIndex) {  	case 0:  		if (authRequest.IsDirectedIdentity) {  			string userIdentityPageBase = this.hostedProvider.UserIdentityPageBase.AbsoluteUri;  			if (this.capitalizedHostName.IsChecked.Value) {  				userIdentityPageBase = (this.hostedProvider.UserIdentityPageBase.Scheme + Uri.SchemeDelimiter + this.hostedProvider.UserIdentityPageBase.Authority).ToUpperInvariant () + this.hostedProvider.UserIdentityPageBase.PathAndQuery;  			}  			string leafPath = "directedidentity";  			if (this.directedIdentityTrailingPeriodsCheckbox.IsChecked.Value) {  				leafPath += ".";  			}  			authRequest.ClaimedIdentifier = Identifier.Parse (userIdentityPageBase + leafPath' true);  			authRequest.LocalIdentifier = authRequest.ClaimedIdentifier;  		}  		authRequest.IsAuthenticated = true;  		break;  	case 1:  		authRequest.IsAuthenticated = false;  		break;  	case 2:  		IntPtr oldForegroundWindow = NativeMethods.GetForegroundWindow ();  		bool stoleFocus = NativeMethods.SetForegroundWindow (this);  		CheckIdWindow.ProcessAuthentication (this.hostedProvider' authRequest);  		if (stoleFocus) {  			NativeMethods.SetForegroundWindow (oldForegroundWindow);  		}  		break;  	}  }  
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\MainWindow.xaml.cs,ProcessRequest,The following statement contains a magic number: switch (this.checkidRequestList.SelectedIndex) {  case 0:  	if (authRequest.IsDirectedIdentity) {  		string userIdentityPageBase = this.hostedProvider.UserIdentityPageBase.AbsoluteUri;  		if (this.capitalizedHostName.IsChecked.Value) {  			userIdentityPageBase = (this.hostedProvider.UserIdentityPageBase.Scheme + Uri.SchemeDelimiter + this.hostedProvider.UserIdentityPageBase.Authority).ToUpperInvariant () + this.hostedProvider.UserIdentityPageBase.PathAndQuery;  		}  		string leafPath = "directedidentity";  		if (this.directedIdentityTrailingPeriodsCheckbox.IsChecked.Value) {  			leafPath += ".";  		}  		authRequest.ClaimedIdentifier = Identifier.Parse (userIdentityPageBase + leafPath' true);  		authRequest.LocalIdentifier = authRequest.ClaimedIdentifier;  	}  	authRequest.IsAuthenticated = true;  	break;  case 1:  	authRequest.IsAuthenticated = false;  	break;  case 2:  	IntPtr oldForegroundWindow = NativeMethods.GetForegroundWindow ();  	bool stoleFocus = NativeMethods.SetForegroundWindow (this);  	CheckIdWindow.ProcessAuthentication (this.hostedProvider' authRequest);  	if (stoleFocus) {  		NativeMethods.SetForegroundWindow (oldForegroundWindow);  	}  	break;  }  
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,HttpHost,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\HttpHost.cs,HttpHost,The following statement contains a magic number: this.Port = 45235;  
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,HttpHost,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\HttpHost.cs,HttpHost,The following statement contains a magic number: try {  	this.listener = new HttpListener ();  	this.listener.Prefixes.Add (string.Format (CultureInfo.InvariantCulture' "http://localhost:{0}/"' this.Port));  	this.listener.Start ();  } catch (HttpListenerException ex) {  	if (ex.Message.Contains ("conflicts")) {  		this.Port += r.Next (1' 20);  		goto tryAgain;  	}  	throw;  }  
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,HttpHost,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\HttpHost.cs,HttpHost,The following statement contains a magic number: if (ex.Message.Contains ("conflicts")) {  	this.Port += r.Next (1' 20);  	goto tryAgain;  }  
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,HttpHost,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\HttpHost.cs,HttpHost,The following statement contains a magic number: this.Port += r.Next (1' 20);  
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,HttpHost,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\HttpHost.cs,Dispose,The following statement contains a magic number: if (disposing) {  	this.listener.Close ();  	this.listenerThread.Join (1000);  	this.listenerThread.Abort ();  }  
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,HttpHost,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\HttpHost.cs,Dispose,The following statement contains a magic number: this.listenerThread.Join (1000);  
Missing Default,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,F:\newReposMay17\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\MainWindow.xaml.cs,ProcessRequest,The following switch statement is missing a default case: switch (this.checkidRequestList.SelectedIndex) {  case 0:  	if (authRequest.IsDirectedIdentity) {  		string userIdentityPageBase = this.hostedProvider.UserIdentityPageBase.AbsoluteUri;  		if (this.capitalizedHostName.IsChecked.Value) {  			userIdentityPageBase = (this.hostedProvider.UserIdentityPageBase.Scheme + Uri.SchemeDelimiter + this.hostedProvider.UserIdentityPageBase.Authority).ToUpperInvariant () + this.hostedProvider.UserIdentityPageBase.PathAndQuery;  		}  		string leafPath = "directedidentity";  		if (this.directedIdentityTrailingPeriodsCheckbox.IsChecked.Value) {  			leafPath += ".";  		}  		authRequest.ClaimedIdentifier = Identifier.Parse (userIdentityPageBase + leafPath' true);  		authRequest.LocalIdentifier = authRequest.ClaimedIdentifier;  	}  	authRequest.IsAuthenticated = true;  	break;  case 1:  	authRequest.IsAuthenticated = false;  	break;  case 2:  	IntPtr oldForegroundWindow = NativeMethods.GetForegroundWindow ();  	bool stoleFocus = NativeMethods.SetForegroundWindow (this);  	CheckIdWindow.ProcessAuthentication (this.hostedProvider' authRequest);  	if (stoleFocus) {  		NativeMethods.SetForegroundWindow (oldForegroundWindow);  	}  	break;  }  
