Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,DotNetOpenAuth.OpenIdOfflineProvider,HostedProvider,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\HostedProvider.cs,GenerateHtmlDiscoveryDocument,The length of the parameter NonDelegatedHtmlDiscoveryFormat is 31.
Long Statement,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\MainWindow.xaml.cs,ProcessRequest,The length of the statement  "										userIdentityPageBase = (this.hostedProvider.UserIdentityPageBase.Scheme + Uri.SchemeDelimiter + this.hostedProvider.UserIdentityPageBase.Authority).ToUpperInvariant() + this.hostedProvider.UserIdentityPageBase.PathAndQuery; " is 223.
Long Statement,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\MainWindow.xaml.cs,opIdentifierLabel_MouseDown,The length of the statement  "				MessageBox.Show(this' ex.Message' "Error while copying OP Identifier to the clipboard"' MessageBoxButton.OK' MessageBoxImage.Error); " is 132.
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\MainWindow.xaml.cs,ProcessRequest,The following statement contains a magic number: this.Dispatcher.Invoke((Action)delegate {  				if (!request.IsResponseReady) {  					var authRequest = request as IAuthenticationRequest;  					if (authRequest != null) {  						switch (this.checkidRequestList.SelectedIndex) {  							case 0:  								if (authRequest.IsDirectedIdentity) {  									string userIdentityPageBase = this.hostedProvider.UserIdentityPageBase.AbsoluteUri;  									if (this.capitalizedHostName.IsChecked.Value) {  										userIdentityPageBase = (this.hostedProvider.UserIdentityPageBase.Scheme + Uri.SchemeDelimiter + this.hostedProvider.UserIdentityPageBase.Authority).ToUpperInvariant() + this.hostedProvider.UserIdentityPageBase.PathAndQuery;  									}  									string leafPath = "directedidentity";  									if (this.directedIdentityTrailingPeriodsCheckbox.IsChecked.Value) {  										leafPath += ".";  									}  									authRequest.ClaimedIdentifier = Identifier.Parse(userIdentityPageBase + leafPath' true);  									authRequest.LocalIdentifier = authRequest.ClaimedIdentifier;  								}  								authRequest.IsAuthenticated = true;  								break;  							case 1:  								authRequest.IsAuthenticated = false;  								break;  							case 2:  								IntPtr oldForegroundWindow = NativeMethods.GetForegroundWindow();  								bool stoleFocus = NativeMethods.SetForegroundWindow(this);  								CheckIdWindow.ProcessAuthentication(this.hostedProvider' authRequest);  								if (stoleFocus) {  									NativeMethods.SetForegroundWindow(oldForegroundWindow);  								}  								break;  						}  					}  				}  			});
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,HttpHost,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\HttpHost.cs,HttpHost,The following statement contains a magic number: this.Port = 45235;
Magic Number,DotNetOpenAuth.OpenIdOfflineProvider,HttpHost,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\HttpHost.cs,Dispose,The following statement contains a magic number: this.listenerThread.Join(1000);
Missing Default,DotNetOpenAuth.OpenIdOfflineProvider,MainWindow,D:\research\architectureSmells\repos\DotNetOpenAuth_DotNetOpenAuth.Samples\src\OpenID\OpenIdOfflineProvider\MainWindow.xaml.cs,ProcessRequest,The following switch statement is missing a default case: switch (this.checkidRequestList.SelectedIndex) {  							case 0:  								if (authRequest.IsDirectedIdentity) {  									string userIdentityPageBase = this.hostedProvider.UserIdentityPageBase.AbsoluteUri;  									if (this.capitalizedHostName.IsChecked.Value) {  										userIdentityPageBase = (this.hostedProvider.UserIdentityPageBase.Scheme + Uri.SchemeDelimiter + this.hostedProvider.UserIdentityPageBase.Authority).ToUpperInvariant() + this.hostedProvider.UserIdentityPageBase.PathAndQuery;  									}  									string leafPath = "directedidentity";  									if (this.directedIdentityTrailingPeriodsCheckbox.IsChecked.Value) {  										leafPath += ".";  									}  									authRequest.ClaimedIdentifier = Identifier.Parse(userIdentityPageBase + leafPath' true);  									authRequest.LocalIdentifier = authRequest.ClaimedIdentifier;  								}  								authRequest.IsAuthenticated = true;  								break;  							case 1:  								authRequest.IsAuthenticated = false;  								break;  							case 2:  								IntPtr oldForegroundWindow = NativeMethods.GetForegroundWindow();  								bool stoleFocus = NativeMethods.SetForegroundWindow(this);  								CheckIdWindow.ProcessAuthentication(this.hostedProvider' authRequest);  								if (stoleFocus) {  									NativeMethods.SetForegroundWindow(oldForegroundWindow);  								}  								break;  						}
